{"uploader":"herrzinter","packageMeta":{"homepage":"https://github.com/herrzinter/purescript-base-rationals","repository":{"url":"git://github.com/herrzinter/purescript-base-rationals.git","type":"git"},"ignore":["**/.*","node_modules","bower_components","output"],"devDependencies":{"purescript-console":"3.0.0","purescript-test-unit":"11.0.0","purescript-psci-support":"^3.0.0"},"dependencies":{"purescript-bigints":"3.0.0","purescript-rationals":"4.0.0","purescript-tailrec":"3.3.0","purescript-prelude":"^3.0.0","purescript-errors":"3.0.0","purescript-strings":"3.3.0","purescript-lists":"4.0.1"},"name":"purescript-base-rationals","license":["GPL-3.0"],"description":"Arbitrary base rationals"},"tagTime":"2017-08-06T19:23:17+0000","modules":[{"reExports":[],"name":"BaseRationals","comments":"Implements in arbitrary basis given arbitrary digits:\n* parsing a string for a rational\n* rendering a non-fractional string represenation of a rational\n\nDigits can be created from an `Array` of `Char`s.\n```\nlet digits  = digitsFromArray ['0', '1', '2', 'A', 'B']\n```\n\n`toString` and `fromString` run both in the `(Either String)` monad,\nproviding `String` error messages.\nBoth have `Digits` and a *basis* as `Int` as their first two arguments;\nand a `String` or a `PreciseRational` as third one respectively. A usage\nexample is:\n```\nstring :: Either String String\nstring = do\n    let pr = PR.fromInts 1 7 :: PreciseRational\n    let basis = 4\n    s <-\n    pure s\n\npr :: Either String PreciseRational\npr = do\n    let s = \"A2AB01.20B1A\" :: String\n    let basis = 5\n    pr <- fromString digits basis s\n```\n","declarations":[{"children":[{"comments":null,"title":"showDigits","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Show"],"Show"]},{"tag":"TypeConstructor","contents":[["BaseRationals"],"Digits"]}]}},"sourceSpan":{"start":[73,1],"name":"C:\\Users\\herrzinter\\Documents\\Projects\\purescript-baseRationals\\src\\BaseRationals.purs","end":[74,37]}}],"comments":"Container type for an `Array` of `Chars` representing digits. The\nconstructor is hidden, as digits are more constrained than an `Array` of\n`Char`s, use `digitsFromArray` instead.\n","title":"Digits","info":{"declType":"data","dataDeclType":"data","typeArguments":[]},"sourceSpan":{"start":[71,1],"name":"C:\\Users\\herrzinter\\Documents\\Projects\\purescript-baseRationals\\src\\BaseRationals.purs","end":[71,34]}},{"children":[],"comments":"Wrap `Array` of `Char`s in digit container, if array\n* contains at least two digits, as the minimum basis is two\n* all contained digits need to be unique\n","title":"digitsFromArray","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeConstructor","contents":[["Prim"],"Char"]}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Either"],"Either"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeConstructor","contents":[["BaseRationals"],"Digits"]}]}]}},"sourceSpan":{"start":[79,1],"name":"C:\\Users\\herrzinter\\Documents\\Projects\\purescript-baseRationals\\src\\BaseRationals.purs","end":[79,54]}},{"children":[],"comments":"Unwrap `Array` of `Char`s from `Digits` container\n","title":"arrayFromDigits","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["BaseRationals"],"Digits"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeConstructor","contents":[["Prim"],"Char"]}]}]}},"sourceSpan":{"start":[91,1],"name":"C:\\Users\\herrzinter\\Documents\\Projects\\purescript-baseRationals\\src\\BaseRationals.purs","end":[91,40]}},{"children":[],"comments":"Get the maximal possible basis for `Digits`. It equals the length of the\nwrapped `Array` of `Char`s\n","title":"maximalBasisOfDigits","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["BaseRationals"],"Digits"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}},"sourceSpan":{"start":[96,1],"name":"C:\\Users\\herrzinter\\Documents\\Projects\\purescript-baseRationals\\src\\BaseRationals.purs","end":[96,38]}},{"children":[],"comments":"Parse a `PreciseRational` from a `String` in basis `Int` given\n`Digits`.\n","title":"fromString","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["BaseRationals"],"Digits"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Either"],"Either"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeConstructor","contents":[["PreciseRational"],"PreciseRational"]}]}]}]}]}},"sourceSpan":{"start":[101,1],"name":"C:\\Users\\herrzinter\\Documents\\Projects\\purescript-baseRationals\\src\\BaseRationals.purs","end":[101,71]}},{"children":[],"comments":"Render a non-fractional `String`-representation of a `PreciseRational`\nin basis `Int` given `Digits`.\n","title":"toString","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["BaseRationals"],"Digits"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["PreciseRational"],"PreciseRational"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Either"],"Either"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}]}]}]}},"sourceSpan":{"start":[127,1],"name":"C:\\Users\\herrzinter\\Documents\\Projects\\purescript-baseRationals\\src\\BaseRationals.purs","end":[127,69]}},{"children":[],"comments":"Lookup the *digit* `Char` with *index* `BigInt` in `Digits`\n","title":"index","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["BaseRationals"],"Digits"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","BigInt"],"BigInt"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Either"],"Either"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Char"]}]}]}]}},"sourceSpan":{"start":[145,1],"name":"C:\\Users\\herrzinter\\Documents\\Projects\\purescript-baseRationals\\src\\BaseRationals.purs","end":[145,48]}},{"children":[],"comments":"Lookup the *index* `BigInt` of the first occurence of `Char` in\n`Digits`\n","title":"digitIndex","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Char"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["BaseRationals"],"Digits"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Either"],"Either"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeConstructor","contents":[["Data","BigInt"],"BigInt"]}]}]}]}},"sourceSpan":{"start":[158,1],"name":"C:\\Users\\herrzinter\\Documents\\Projects\\purescript-baseRationals\\src\\BaseRationals.purs","end":[158,53]}}]},{"reExports":[],"name":"PreciseFloat","comments":null,"declarations":[{"children":[{"comments":null,"title":"PreciseFloat","info":{"arguments":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Record"]},{"tag":"RCons","contents":["finit",{"tag":"TypeConstructor","contents":[["Data","BigInt"],"BigInt"]},{"tag":"RCons","contents":["infinit",{"tag":"TypeConstructor","contents":[["Data","BigInt"],"BigInt"]},{"tag":"RCons","contents":["infinitLength",{"tag":"TypeConstructor","contents":[["Data","BigInt"],"BigInt"]},{"tag":"RCons","contents":["shift",{"tag":"TypeConstructor","contents":[["Data","BigInt"],"BigInt"]},{"tag":"REmpty"}]}]}]}]}]}],"declType":"dataConstructor"},"sourceSpan":null},{"comments":null,"title":"showPreciseFloat","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Show"],"Show"]},{"tag":"TypeConstructor","contents":[["PreciseFloat"],"PreciseFloat"]}]}},"sourceSpan":{"start":[52,1],"name":"C:\\Users\\herrzinter\\Documents\\Projects\\purescript-baseRationals\\src\\PreciseFloat.purs","end":[59,1]}},{"comments":null,"title":"eqPreciseFloat","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Eq"],"Eq"]},{"tag":"TypeConstructor","contents":[["PreciseFloat"],"PreciseFloat"]}]}},"sourceSpan":{"start":[59,1],"name":"C:\\Users\\herrzinter\\Documents\\Projects\\purescript-baseRationals\\src\\PreciseFloat.purs","end":[59,50]}}],"comments":"The `PreciseFloat` data type is a non-fractional representation of\nrational numbers, ie. it is an infinit precision floating point number.\nRational numbers can have recurring, and thus, infinit, non-fractional\nrepresenations. The `finit`, ie. not recurring, and `infinit` , ie.\nrecurring, part are seperated.\n`infinitLength` specifies the length of the infinit part. This is\nnecessarry to encode the difference between infinit parts which are lead by\nzeros and infinit parts which are not, eg.\n\"0.[1]\" and \"0.[001]\" have both infinit = 1, but different\n`infinitLength`s.\n`shift` specifies by how many digits the radix points has to be shifted to\nthe left, so that, `finit` and `infinit` become whole numbers. Thus,\nin contrast to traditional floating point types, shift is only positive,\nand always interpreted as negative exponent, eg.\n\"1000\" is coded as {f: 1000, i: 0, il: 0, s: 0},\nbut \"0.001\" as {f: 1, i: 0, il: 0, s: 3}\n","title":"PreciseFloat","info":{"declType":"data","dataDeclType":"data","typeArguments":[]},"sourceSpan":{"start":[45,1],"name":"C:\\Users\\herrzinter\\Documents\\Projects\\purescript-baseRationals\\src\\PreciseFloat.purs","end":[50,4]}},{"children":[],"comments":"Convert a `PreciseRational` to a `PreciseFloat`, ie. convert a fractional\nrepresentation of a rational to a non-fractoinal one.\n","title":"fromRatio","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["PreciseRational"],"PreciseRational"]}]},{"tag":"TypeConstructor","contents":[["PreciseFloat"],"PreciseFloat"]}]}},"sourceSpan":{"start":[63,1],"name":"C:\\Users\\herrzinter\\Documents\\Projects\\purescript-baseRationals\\src\\PreciseFloat.purs","end":[63,45]}},{"children":[],"comments":"Construct `PreciseFloat` from four `Int`s describiing `finit`, `infinit`,\n`infinitLength` and `shift`\n","title":"fromInts","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeConstructor","contents":[["PreciseFloat"],"PreciseFloat"]}]}]}]}]}},"sourceSpan":{"start":[112,1],"name":"C:\\Users\\herrzinter\\Documents\\Projects\\purescript-baseRationals\\src\\PreciseFloat.purs","end":[112,53]}},{"children":[],"comments":"Try to construct `PreciseFloat` from four `Strings`s describiing `finit`,\n`infinit`, `infinitLength` and `shift`\n","title":"fromStrings","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeConstructor","contents":[["PreciseFloat"],"PreciseFloat"]}]}]}]}]}]}},"sourceSpan":{"start":[122,1],"name":"C:\\Users\\herrzinter\\Documents\\Projects\\purescript-baseRationals\\src\\PreciseFloat.purs","end":[122,74]}},{"children":[],"comments":"Convert a `PreciseFloat` to a `PreciseRational` ie. convert a\nnon-fractional representation of a rational to a fractional one.\n","title":"toRatio","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["PreciseFloat"],"PreciseFloat"]}]},{"tag":"TypeConstructor","contents":[["PreciseRational"],"PreciseRational"]}]}},"sourceSpan":{"start":[133,1],"name":"C:\\Users\\herrzinter\\Documents\\Projects\\purescript-baseRationals\\src\\PreciseFloat.purs","end":[133,43]}},{"children":[],"comments":"Check if the `PreciseFloat` has a recurring part\n","title":"isRecurring","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["PreciseFloat"],"PreciseFloat"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}},"sourceSpan":{"start":[145,1],"name":"C:\\Users\\herrzinter\\Documents\\Projects\\purescript-baseRationals\\src\\PreciseFloat.purs","end":[145,39]}},{"children":[],"comments":"Check if the `PreciseFloat` is zero\n","title":"isZero","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["PreciseFloat"],"PreciseFloat"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}},"sourceSpan":{"start":[149,1],"name":"C:\\Users\\herrzinter\\Documents\\Projects\\purescript-baseRationals\\src\\PreciseFloat.purs","end":[149,34]}},{"children":[],"comments":"Scale the `PreciseFloat` by a `BigInt` `factor`\n","title":"scale","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["PreciseFloat"],"PreciseFloat"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","BigInt"],"BigInt"]}]},{"tag":"TypeConstructor","contents":[["PreciseFloat"],"PreciseFloat"]}]}]}},"sourceSpan":{"start":[153,1],"name":"C:\\Users\\herrzinter\\Documents\\Projects\\purescript-baseRationals\\src\\PreciseFloat.purs","end":[153,48]}},{"children":[],"comments":"Eg. 123 `appendNZerosOnTheRight` 2 -> 12300\n","title":"appendNZerosOnTheRight","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","BigInt"],"BigInt"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","BigInt"],"BigInt"]}]},{"tag":"TypeConstructor","contents":[["Data","BigInt"],"BigInt"]}]}]}},"sourceSpan":{"start":[165,1],"name":"C:\\Users\\herrzinter\\Documents\\Projects\\purescript-baseRationals\\src\\PreciseFloat.purs","end":[165,53]}},{"children":[],"comments":"eg. 12345 `stripNDigitsOnTheRight` 2 -> 123\n","title":"stripNDigitsOnTheRight","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","BigInt"],"BigInt"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","BigInt"],"BigInt"]}]},{"tag":"TypeConstructor","contents":[["Data","BigInt"],"BigInt"]}]}]}},"sourceSpan":{"start":[169,1],"name":"C:\\Users\\herrzinter\\Documents\\Projects\\purescript-baseRationals\\src\\PreciseFloat.purs","end":[169,53]}},{"children":[],"comments":"Seperate the `whole` from the `propper` part of an (possibly) impropper\nfraction\n","title":"toMixedRatio","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["PreciseRational"],"PreciseRational"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Record"]},{"tag":"RCons","contents":["whole",{"tag":"TypeConstructor","contents":[["Data","BigInt"],"BigInt"]},{"tag":"RCons","contents":["propper",{"tag":"TypeConstructor","contents":[["PreciseRational"],"PreciseRational"]},{"tag":"REmpty"}]}]}]}]}},"sourceSpan":{"start":[174,1],"name":"C:\\Users\\herrzinter\\Documents\\Projects\\purescript-baseRationals\\src\\PreciseFloat.purs","end":[174,81]}}]},{"reExports":[],"name":"PreciseRational","comments":null,"declarations":[{"children":[],"comments":"Type alias for a `Ratio` of `BigInt`s\n","title":"PreciseRational","info":{"arguments":[],"declType":"typeSynonym","type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Ratio"],"Ratio"]},{"tag":"TypeConstructor","contents":[["Data","BigInt"],"BigInt"]}]}},"sourceSpan":{"start":[17,1],"name":"C:\\Users\\herrzinter\\Documents\\Projects\\purescript-baseRationals\\src\\PreciseRational.purs","end":[17,39]}},{"children":[],"comments":"Create a `PreciseRational` from an `Int` with denominator one\n","title":"fromInt","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeConstructor","contents":[["PreciseRational"],"PreciseRational"]}]}},"sourceSpan":{"start":[20,1],"name":"C:\\Users\\herrzinter\\Documents\\Projects\\purescript-baseRationals\\src\\PreciseRational.purs","end":[20,34]}},{"children":[],"comments":"Create a `PreciseRational` from two `Int`s as numerator and denominator\n","title":"fromInts","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeConstructor","contents":[["PreciseRational"],"PreciseRational"]}]}]}},"sourceSpan":{"start":[24,1],"name":"C:\\Users\\herrzinter\\Documents\\Projects\\purescript-baseRationals\\src\\PreciseRational.purs","end":[24,42]}},{"children":[],"comments":"Create a `PreciseRational` from an `BigInt` with denominator one\n","title":"fromBI","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","BigInt"],"BigInt"]}]},{"tag":"TypeConstructor","contents":[["PreciseRational"],"PreciseRational"]}]}},"sourceSpan":{"start":[28,1],"name":"C:\\Users\\herrzinter\\Documents\\Projects\\purescript-baseRationals\\src\\PreciseRational.purs","end":[28,39]}},{"children":[],"comments":"Try to create a `PreciseRational` from two `String`s as numerator and\ndenominator\n","title":"fromStrings","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeConstructor","contents":[["PreciseRational"],"PreciseRational"]}]}]}]}},"sourceSpan":{"start":[33,1],"name":"C:\\Users\\herrzinter\\Documents\\Projects\\purescript-baseRationals\\src\\PreciseRational.purs","end":[33,57]}}]}],"resolvedDependencies":{"purescript-free":"4.1.0","purescript-proxy":"2.1.0","purescript-bigints":"3.0.0","purescript-exceptions":"3.1.0","purescript-newtype":"2.0.0","purescript-maps":"3.5.1","purescript-control":"3.3.0","purescript-console":"3.0.0","purescript-either":"3.1.0","purescript-arrays":"4.1.2","purescript-maybe":"3.0.0","purescript-symbols":"3.0.0","purescript-type-equality":"2.1.0","purescript-js-timers":"3.0.0","purescript-exists":"3.0.0","purescript-distributive":"3.0.0","purescript-unfoldable":"3.0.0","purescript-invariant":"3.0.0","purescript-lazy":"3.0.0","purescript-monoid":"3.1.0","purescript-aff":"3.1.0","purescript-foldable-traversable":"3.4.0","purescript-rationals":"4.0.0","purescript-tailrec":"3.3.0","purescript-gen":"1.1.0","purescript-functors":"2.2.0","purescript-prelude":"3.1.0","purescript-st":"3.0.0","purescript-bifunctors":"3.0.0","purescript-nonempty":"4.0.0","purescript-contravariant":"3.1.0","purescript-generics":"4.0.0","purescript-unsafe-coerce":"3.0.0","purescript-refs":"3.0.0","purescript-integers":"3.1.0","purescript-eff":"3.1.0","purescript-test-unit":"11.0.0","purescript-const":"3.0.0","purescript-transformers":"3.4.0","purescript-globals":"3.0.0","purescript-generics-rep":"5.2.0","purescript-math":"2.1.0","purescript-enums":"3.2.1","purescript-psci-support":"3.0.0","purescript-catenable-lists":"4.0.0","purescript-random":"3.0.0","purescript-parallel":"3.0.0","purescript-tuples":"4.1.0","purescript-errors":"3.0.0","purescript-partial":"1.2.1","purescript-quickcheck":"4.4.0","purescript-strings":"3.3.0","purescript-identity":"3.1.0","purescript-lists":"4.0.1","purescript-datetime":"3.3.0","purescript-functions":"3.0.0"},"version":"0.1.2","github":["herrzinter","purescript-base-rationals"],"versionTag":"v0.1.2","moduleMap":{"Data.BooleanAlgebra":"purescript-prelude","Data.Decide":"purescript-contravariant","Data.Ring":"purescript-prelude","Data.Rational":"purescript-rationals","Control.Monad.Trans.Class":"purescript-transformers","Data.Functor.Product":"purescript-functors","Data.NonEmpty":"purescript-nonempty","Control.Monad.Eff.Ref":"purescript-refs","Data.Char.Gen":"purescript-strings","Control.Monad.Aff.Class":"purescript-aff","Data.Generic":"purescript-generics","Data.Traversable.Accum.Internal":"purescript-foldable-traversable","Data.Enum.Gen":"purescript-enums","Control.Comonad.Env":"purescript-transformers","Control.Comonad.Traced.Class":"purescript-transformers","Data.StrMap":"purescript-maps","Control.Monad.Eff.Unsafe":"purescript-eff","Data.Functor.Compose":"purescript-functors","Data.Int.Bits":"purescript-integers","Data.DateTime":"purescript-datetime","Data.Bifunctor.Flip":"purescript-bifunctors","Data.String.CodePoints":"purescript-strings","Data.Ord":"purescript-prelude","Control.Monad.Gen":"purescript-gen","Data.Date":"purescript-datetime","Data.Monoid.Dual":"purescript-monoid","Control.Monad.Rec.Class":"purescript-tailrec","Data.StrMap.ST.Unsafe":"purescript-maps","Data.Time.Component":"purescript-datetime","Data.Bitraversable":"purescript-foldable-traversable","Test.Unit.Assert":"purescript-test-unit","Data.Boolean":"purescript-prelude","Data.Map":"purescript-maps","Control.Biapplicative":"purescript-bifunctors","Data.CatList":"purescript-catenable-lists","Control.Parallel.Class":"purescript-parallel","Type.Proxy":"purescript-proxy","Test.Unit.Output.Fancy":"purescript-test-unit","Data.Coyoneda":"purescript-free","Data.Array.ST.Iterator":"purescript-arrays","Data.DateTime.Gen":"purescript-datetime","Data.Bounded":"purescript-prelude","Control.Monad.State.Trans":"purescript-transformers","Data.TraversableWithIndex":"purescript-foldable-traversable","Data.Int":"purescript-integers","Data.StrMap.Gen":"purescript-maps","Data.Show":"purescript-prelude","Data.Bifunctor.Clown":"purescript-bifunctors","Control.Monad.Writer.Trans":"purescript-transformers","Data.Foldable":"purescript-foldable-traversable","Data.Divide":"purescript-contravariant","Control.Comonad.Store.Class":"purescript-transformers","Data.Enum":"purescript-enums","Control.Monad.Trampoline":"purescript-free","Control.Monad.Aff.AVar":"purescript-aff","Control.Apply":"purescript-prelude","Data.Functor.Contravariant":"purescript-contravariant","Data.Tuple.Nested":"purescript-tuples","Data.Generic.Rep.Semigroup":"purescript-generics-rep","Test.QuickCheck.LCG":"purescript-quickcheck","Control.Monad":"purescript-prelude","Data.Lazy":"purescript-lazy","Data.Monoid":"purescript-monoid","Control.Monad.Eff.Uncurried":"purescript-eff","Control.Monad.List.Trans":"purescript-transformers","Control.Monad.RWS":"purescript-transformers","Data.Maybe.First":"purescript-maybe","Control.Bind":"purescript-prelude","Data.Monoid.Additive":"purescript-monoid","Data.Symbol":"purescript-symbols","Data.Map.Gen":"purescript-maps","Data.String.Regex":"purescript-strings","Data.HeytingAlgebra":"purescript-prelude","Control.Alt":"purescript-control","Data.Date.Gen":"purescript-datetime","Control.Monad.Maybe.Trans":"purescript-transformers","Control.Monad.Cont":"purescript-transformers","Data.Time.Component.Gen":"purescript-datetime","Data.List.ZipList":"purescript-lists","Data.Functor.Coproduct.Nested":"purescript-functors","Control.Error.Util":"purescript-errors","Data.Ord.Unsafe":"purescript-prelude","Data.Semigroup":"purescript-prelude","Control.Monad.Reader":"purescript-transformers","Test.Unit.QuickCheck":"purescript-test-unit","Data.Const":"purescript-const","Data.Generic.Rep.Enum":"purescript-generics-rep","Data.Generic.Rep.Bounded":"purescript-generics-rep","Control.Monad.Eff":"purescript-eff","Control.Comonad.Traced.Trans":"purescript-transformers","Data.Array.ST.Partial":"purescript-arrays","Data.StrMap.Unsafe":"purescript-maps","Data.Generic.Rep.Show":"purescript-generics-rep","Data.Tuple":"purescript-tuples","Data.Semigroup.Foldable":"purescript-foldable-traversable","Control.Biapply":"purescript-bifunctors","Data.Distributive":"purescript-distributive","Type.Equality":"purescript-type-equality","Control.Alternative":"purescript-control","Data.Semiring":"purescript-prelude","Data.StrMap.ST":"purescript-maps","Data.Exists":"purescript-exists","Data.Traversable.Accum":"purescript-foldable-traversable","Data.CommutativeRing":"purescript-prelude","Data.NaturalTransformation":"purescript-prelude","Data.Monoid.Conj":"purescript-monoid","Data.Yoneda":"purescript-free","Control.Monad.Aff.Internal":"purescript-aff","Data.Functor.App":"purescript-functors","Data.Unfoldable":"purescript-unfoldable","Control.Monad.Eff.Random":"purescript-random","Control.Comonad.Store.Trans":"purescript-transformers","Control.Monad.ST":"purescript-st","Control.Monad.State.Class":"purescript-transformers","Data.List.Types":"purescript-lists","Data.Functor":"purescript-prelude","Unsafe.Coerce":"purescript-unsafe-coerce","Control.Monad.Writer.Class":"purescript-transformers","Data.Generic.Rep.Ord":"purescript-generics-rep","Data.CatQueue":"purescript-catenable-lists","Control.Monad.Except":"purescript-transformers","Data.Interval":"purescript-datetime","Data.List.Lazy.Types":"purescript-lists","Data.DateTime.Locale":"purescript-datetime","Control.Category":"purescript-prelude","Test.QuickCheck.Arbitrary":"purescript-quickcheck","Data.Interval.Duration":"purescript-datetime","Control.Monad.Gen.Common":"purescript-gen","Control.Monad.RWS.Trans":"purescript-transformers","Test.QuickCheck.Data.AlphaNumString":"purescript-quickcheck","Control.Monad.Cont.Trans":"purescript-transformers","Data.Maybe":"purescript-maybe","Data.String.Regex.Unsafe":"purescript-strings","Control.Comonad":"purescript-control","Data.Function":"purescript-prelude","Data.List":"purescript-lists","Data.Field":"purescript-prelude","Data.List.Lazy":"purescript-lists","Data.Generic.Rep.Eq":"purescript-generics-rep","Test.Unit.Output.TAP":"purescript-test-unit","Data.EuclideanRing":"purescript-prelude","Data.Functor.Invariant":"purescript-invariant","Control.Comonad.Traced":"purescript-transformers","Global.Unsafe":"purescript-globals","Data.Comparison":"purescript-contravariant","Data.String.Unsafe":"purescript-strings","Prelude":"purescript-prelude","Control.Monad.Aff":"purescript-aff","Data.Predicate":"purescript-contravariant","Partial.Unsafe":"purescript-partial","Data.Array":"purescript-arrays","Data.Bifunctor.Product":"purescript-bifunctors","Data.Ratio":"purescript-rationals","Control.Extend":"purescript-control","Test.Unit.Console":"purescript-test-unit","Control.Lazy":"purescript-control","Data.Function.Uncurried":"purescript-functions","Control.Monad.Reader.Trans":"purescript-transformers","Data.Functor.Product.Nested":"purescript-functors","Test.Unit.Output.Simple":"purescript-test-unit","Control.Comonad.Env.Class":"purescript-transformers","Data.Interval.Duration.Iso":"purescript-datetime","Data.Eq":"purescript-prelude","Data.Either.Nested":"purescript-either","Control.Comonad.Cofree":"purescript-free","Data.Newtype":"purescript-newtype","Control.Monad.Eff.Console":"purescript-console","Data.Semigroup.Traversable":"purescript-foldable-traversable","Data.Bifunctor":"purescript-bifunctors","Data.Monoid.Disj":"purescript-monoid","Control.Monad.Eff.Exception":"purescript-exceptions","Control.Monad.Eff.Timer":"purescript-js-timers","Control.Monad.Gen.Class":"purescript-gen","Data.Array.Partial":"purescript-arrays","Data.String.CaseInsensitive":"purescript-strings","Control.Monad.Free":"purescript-free","Control.Parallel":"purescript-parallel","Control.MonadPlus":"purescript-control","Data.Void":"purescript-prelude","Control.MonadZero":"purescript-control","Data.DateTime.Instant":"purescript-datetime","Control.Comonad.Store":"purescript-transformers","Control.Monad.Except.Trans":"purescript-transformers","Data.Bifunctor.Joker":"purescript-bifunctors","Data.FunctorWithIndex":"purescript-foldable-traversable","Data.Divisible":"purescript-contravariant","Data.DivisionRing":"purescript-prelude","Data.Bifunctor.Wrap":"purescript-bifunctors","PSCI.Support":"purescript-psci-support","Data.Equivalence":"purescript-contravariant","Data.Maybe.Last":"purescript-maybe","Data.Unit":"purescript-prelude","Control.Monad.Eff.Ref.Unsafe":"purescript-refs","Data.List.NonEmpty":"purescript-lists","Data.List.Lazy.NonEmpty":"purescript-lists","Data.Ordering":"purescript-prelude","Data.Functor.Coproduct":"purescript-functors","Control.Monad.Cont.Class":"purescript-transformers","Data.Identity":"purescript-identity","Math":"purescript-math","Control.Comonad.Trans.Class":"purescript-transformers","Data.String":"purescript-strings","Control.Plus":"purescript-control","Control.Monad.Eff.Class":"purescript-eff","Test.QuickCheck":"purescript-quickcheck","Test.Unit.Main":"purescript-test-unit","Data.Time":"purescript-datetime","Type.Row.Effect.Equality":"purescript-type-equality","Data.EitherR":"purescript-errors","Data.Time.Duration":"purescript-datetime","Data.Date.Component":"purescript-datetime","Partial":"purescript-partial","Control.Comonad.Env.Trans":"purescript-transformers","Global":"purescript-globals","Control.Monad.Reader.Class":"purescript-transformers","Data.Decidable":"purescript-contravariant","Control.Monad.Aff.Unsafe":"purescript-aff","Data.Monoid.Multiplicative":"purescript-monoid","Data.Array.ST":"purescript-arrays","Control.Monad.Error.Class":"purescript-transformers","Test.Unit":"purescript-test-unit","Data.Generic.Rep.Monoid":"purescript-generics-rep","Control.Monad.Aff.Console":"purescript-aff","Control.Semigroupoid":"purescript-prelude","Data.Monoid.Alternate":"purescript-monoid","Data.Char":"purescript-strings","Data.Generic.Rep":"purescript-generics-rep","Data.Bifunctor.Join":"purescript-bifunctors","Control.Monad.Eff.Exception.Unsafe":"purescript-exceptions","Data.Bifoldable":"purescript-foldable-traversable","Data.Monoid.Endo":"purescript-monoid","Control.Monad.State":"purescript-transformers","Data.List.Partial":"purescript-lists","Data.String.Regex.Flags":"purescript-strings","Data.Either":"purescript-either","Data.Time.Duration.Gen":"purescript-datetime","Data.Date.Component.Gen":"purescript-datetime","Control.Applicative":"purescript-prelude","Data.FoldableWithIndex":"purescript-foldable-traversable","Data.Op":"purescript-contravariant","Test.QuickCheck.Gen":"purescript-quickcheck","Control.Monad.Writer":"purescript-transformers","Data.Time.Gen":"purescript-datetime","Data.BigInt":"purescript-bigints","Data.Traversable":"purescript-foldable-traversable","Data.String.Gen":"purescript-strings"},"compilerVersion":"0.11.4"}