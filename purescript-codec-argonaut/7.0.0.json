{"uploader":"garyb","packageMeta":{"homepage":"https://github.com/garyb/purescript-codec-argonaut","repository":{"url":"git://github.com/garyb/purescript-codec-argonaut.git","type":"git"},"ignore":["**/.*","bower_components","node_modules","output","test","bower.json","package.json"],"devDependencies":{"purescript-argonaut-codecs":"^6.0.0","purescript-quickcheck":"^6.1.0"},"dependencies":{"purescript-ordered-collections":"^1.0.0","purescript-variant":"^6.0.0","purescript-type-equality":"^3.0.0","purescript-argonaut-core":"^5.0.0","purescript-codec":"v3.0.0","purescript-typelevel-prelude":"^4.0.0","purescript-generics-rep":"^6.0.0"},"name":"purescript-codec-argonaut","license":["MIT"]},"tagTime":"2019-03-18T19:15:10+0000","modules":[{"reExports":[{"moduleName":{"package":"purescript-codec","item":["Data","Codec"]},"declarations":[{"children":[],"comments":null,"title":"encode","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["d",{"annotation":[],"tag":"ForAll","contents":["c",{"annotation":[],"tag":"ForAll","contents":["b",{"annotation":[],"tag":"ForAll","contents":["a",{"annotation":[],"tag":"ForAll","contents":["m",{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Codec"],"Codec"]},{"annotation":[],"tag":"TypeVar","contents":"m"}]},{"annotation":[],"tag":"TypeVar","contents":"a"}]},{"annotation":[],"tag":"TypeVar","contents":"b"}]},{"annotation":[],"tag":"TypeVar","contents":"c"}]},{"annotation":[],"tag":"TypeVar","contents":"d"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeVar","contents":"c"}]},{"annotation":[],"tag":"TypeVar","contents":"b"}]}]},null]},null]},null]},null]},null]}},"sourceSpan":{"start":[96,1],"name":"/home/travis/build/garyb/purescript-codec-argonaut/bower_components/purescript-codec/src/Data/Codec.purs","end":[96,46]}},{"children":[],"comments":null,"title":"decode","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["d",{"annotation":[],"tag":"ForAll","contents":["c",{"annotation":[],"tag":"ForAll","contents":["b",{"annotation":[],"tag":"ForAll","contents":["a",{"annotation":[],"tag":"ForAll","contents":["m",{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Codec"],"Codec"]},{"annotation":[],"tag":"TypeVar","contents":"m"}]},{"annotation":[],"tag":"TypeVar","contents":"a"}]},{"annotation":[],"tag":"TypeVar","contents":"b"}]},{"annotation":[],"tag":"TypeVar","contents":"c"}]},{"annotation":[],"tag":"TypeVar","contents":"d"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeVar","contents":"m"},{"annotation":[],"tag":"TypeVar","contents":"d"}]}]}]},null]},null]},null]},null]},null]}},"sourceSpan":{"start":[93,1],"name":"/home/travis/build/garyb/purescript-codec-argonaut/bower_components/purescript-codec/src/Data/Codec.purs","end":[93,48]}},{"children":[],"comments":"`GCodec` is defined as a `Profunctor` so that `lmap` can be used to target\nspecific fields when defining a codec for a product type. This operator\nis a convenience for that:\n\n``` purescript\ntupleCodec =\n  Tuple\n    <$> fst ~ fstCodec\n    <*> snd ~ sndCodec\n```\n","title":"(~)","info":{"declType":"alias","alias":[["Data","Profunctor"],{"Right":{"Left":{"Ident":"lcmap"}}}],"fixity":{"associativity":"infixl","precedence":5}},"sourceSpan":{"start":[89,1],"name":"/home/travis/build/garyb/purescript-codec-argonaut/bower_components/purescript-codec/src/Data/Codec.purs","end":[89,20]}},{"children":[],"comments":null,"title":"(<~<)","info":{"declType":"alias","alias":[["Data","Codec"],{"Right":{"Left":{"Ident":"composeCodec"}}}],"fixity":{"associativity":"infixr","precedence":8}},"sourceSpan":{"start":[126,1],"name":"/home/travis/build/garyb/purescript-codec-argonaut/bower_components/purescript-codec/src/Data/Codec.purs","end":[126,29]}}]}],"name":"Data.Codec.Argonaut","comments":null,"declarations":[{"children":[],"comments":"Codec type for `Json` values.\n","title":"JsonCodec","info":{"arguments":[["a",null]],"declType":"typeSynonym","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Codec"],"BasicCodec"]},{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Either"],"Either"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Codec","Argonaut"],"JsonDecodeError"]}]}}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Argonaut","Core"],"Json"]}]},{"annotation":[],"tag":"TypeVar","contents":"a"}]}},"sourceSpan":{"start":[56,1],"name":"/home/travis/build/garyb/purescript-codec-argonaut/src/Data/Codec/Argonaut.purs","end":[56,64]}},{"children":[{"comments":null,"title":"TypeMismatch","info":{"arguments":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"String"]}],"declType":"dataConstructor"},"sourceSpan":null},{"comments":null,"title":"UnexpectedValue","info":{"arguments":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Argonaut","Core"],"Json"]}],"declType":"dataConstructor"},"sourceSpan":null},{"comments":null,"title":"AtIndex","info":{"arguments":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Int"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Codec","Argonaut"],"JsonDecodeError"]}],"declType":"dataConstructor"},"sourceSpan":null},{"comments":null,"title":"AtKey","info":{"arguments":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"String"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Codec","Argonaut"],"JsonDecodeError"]}],"declType":"dataConstructor"},"sourceSpan":null},{"comments":null,"title":"Named","info":{"arguments":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"String"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Codec","Argonaut"],"JsonDecodeError"]}],"declType":"dataConstructor"},"sourceSpan":null},{"comments":null,"title":"MissingValue","info":{"arguments":[],"declType":"dataConstructor"},"sourceSpan":null},{"comments":null,"title":"eqJsonDecodeError","info":{"declType":"instance","dependencies":[],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Eq"],"Eq"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Codec","Argonaut"],"JsonDecodeError"]}]}},"sourceSpan":{"start":[67,8],"name":"/home/travis/build/garyb/purescript-codec-argonaut/src/Data/Codec/Argonaut.purs","end":[67,55]}},{"comments":null,"title":"ordJsonDecodeError","info":{"declType":"instance","dependencies":[],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Ord"],"Ord"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Codec","Argonaut"],"JsonDecodeError"]}]}},"sourceSpan":{"start":[68,8],"name":"/home/travis/build/garyb/purescript-codec-argonaut/src/Data/Codec/Argonaut.purs","end":[68,57]}},{"comments":null,"title":"genericJsonDecodeError","info":{"declType":"instance","dependencies":[],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Generic","Rep"],"Generic"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Codec","Argonaut"],"JsonDecodeError"]}]},{"annotation":[],"tag":"TypeWildcard","contents":null}]}},"sourceSpan":{"start":[69,8],"name":"/home/travis/build/garyb/purescript-codec-argonaut/src/Data/Codec/Argonaut.purs","end":[69,67]}},{"comments":null,"title":"showJsonDecodeError","info":{"declType":"instance","dependencies":[],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Show"],"Show"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Codec","Argonaut"],"JsonDecodeError"]}]}},"sourceSpan":{"start":[71,1],"name":"/home/travis/build/garyb/purescript-codec-argonaut/src/Data/Codec/Argonaut.purs","end":[71,52]}}],"comments":"Error type for failures while decoding.\n","title":"JsonDecodeError","info":{"declType":"data","dataDeclType":"data","typeArguments":[]},"sourceSpan":{"start":[59,1],"name":"/home/travis/build/garyb/purescript-codec-argonaut/src/Data/Codec/Argonaut.purs","end":[65,17]}},{"children":[],"comments":"Prints a `JsonDecodeError` as a somewhat readable error message.\n","title":"printJsonDecodeError","info":{"declType":"value","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Codec","Argonaut"],"JsonDecodeError"]}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}},"sourceSpan":{"start":[81,1],"name":"/home/travis/build/garyb/purescript-codec-argonaut/src/Data/Codec/Argonaut.purs","end":[81,48]}},{"children":[],"comments":"The \"identity codec\" for `Json` values.\n","title":"json","info":{"declType":"value","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Codec","Argonaut"],"JsonCodec"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Argonaut","Core"],"Json"]}]}},"sourceSpan":{"start":[94,1],"name":"/home/travis/build/garyb/purescript-codec-argonaut/src/Data/Codec/Argonaut.purs","end":[94,24]}},{"children":[],"comments":"A codec for `null` values in `Json`.\n","title":"null","info":{"declType":"value","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Codec","Argonaut"],"JsonCodec"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}},"sourceSpan":{"start":[98,1],"name":"/home/travis/build/garyb/purescript-codec-argonaut/src/Data/Codec/Argonaut.purs","end":[98,22]}},{"children":[],"comments":"A codec for `Boolean` values in `Json`.\n","title":"boolean","info":{"declType":"value","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Codec","Argonaut"],"JsonCodec"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}},"sourceSpan":{"start":[102,1],"name":"/home/travis/build/garyb/purescript-codec-argonaut/src/Data/Codec/Argonaut.purs","end":[102,28]}},{"children":[],"comments":"A codec for `Number` values in `Json`.\n","title":"number","info":{"declType":"value","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Codec","Argonaut"],"JsonCodec"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]}},"sourceSpan":{"start":[106,1],"name":"/home/travis/build/garyb/purescript-codec-argonaut/src/Data/Codec/Argonaut.purs","end":[106,26]}},{"children":[],"comments":"A codec for `Int` values in `Json`.\n","title":"int","info":{"declType":"value","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Codec","Argonaut"],"JsonCodec"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}},"sourceSpan":{"start":[110,1],"name":"/home/travis/build/garyb/purescript-codec-argonaut/src/Data/Codec/Argonaut.purs","end":[110,20]}},{"children":[],"comments":"A codec for `String` values in `Json`.\n","title":"string","info":{"declType":"value","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Codec","Argonaut"],"JsonCodec"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}},"sourceSpan":{"start":[114,1],"name":"/home/travis/build/garyb/purescript-codec-argonaut/src/Data/Codec/Argonaut.purs","end":[114,26]}},{"children":[],"comments":"A codec for `Char` values in `Json`.\n","title":"char","info":{"declType":"value","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Codec","Argonaut"],"JsonCodec"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Char"]}]}},"sourceSpan":{"start":[122,1],"name":"/home/travis/build/garyb/purescript-codec-argonaut/src/Data/Codec/Argonaut.purs","end":[122,22]}},{"children":[],"comments":"A codec for `Array Json` values in `Json`. This does not decode the values\nof the array, for that use `array` for a general array decoder, or\n`indexedArray` with `index` to decode fixed length array encodings.\n","title":"jarray","info":{"declType":"value","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Codec","Argonaut"],"JsonCodec"]},{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Argonaut","Core"],"Json"]}]}}]}},"sourceSpan":{"start":[132,1],"name":"/home/travis/build/garyb/purescript-codec-argonaut/src/Data/Codec/Argonaut.purs","end":[132,34]}},{"children":[],"comments":"A codec for `JObject` values in `Json`.\n","title":"jobject","info":{"declType":"value","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Codec","Argonaut"],"JsonCodec"]},{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Foreign","Object"],"Object"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Argonaut","Core"],"Json"]}]}}]}},"sourceSpan":{"start":[136,1],"name":"/home/travis/build/garyb/purescript-codec-argonaut/src/Data/Codec/Argonaut.purs","end":[136,39]}},{"children":[],"comments":"A codec for `Void` values.\n","title":"void","info":{"declType":"value","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Codec","Argonaut"],"JsonCodec"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Void"],"Void"]}]}},"sourceSpan":{"start":[126,1],"name":"/home/travis/build/garyb/purescript-codec-argonaut/src/Data/Codec/Argonaut.purs","end":[126,22]}},{"children":[],"comments":"A codec for `Array` values.\n```purescript\ndecodeIntArray ∷ Json → Either JsonDecodeError (Array Int)\ndecodeIntArray = decode (array int)\n```\n","title":"array","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["a",{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Codec","Argonaut"],"JsonCodec"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Codec","Argonaut"],"JsonCodec"]},{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]}}]}]},null]}},"sourceSpan":{"start":[145,1],"name":"/home/travis/build/garyb/purescript-codec-argonaut/src/Data/Codec/Argonaut.purs","end":[145,47]}},{"children":[],"comments":"Codec type for specifically indexed `JArray` elements.\n","title":"JIndexedCodec","info":{"arguments":[["a",null]],"declType":"typeSynonym","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Codec"],"Codec"]},{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Either"],"Either"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Codec","Argonaut"],"JsonDecodeError"]}]}}]},{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Argonaut","Core"],"Json"]}]}}]},{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","List","Types"],"List"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Argonaut","Core"],"Json"]}]}}]},{"annotation":[],"tag":"TypeVar","contents":"a"}]},{"annotation":[],"tag":"TypeVar","contents":"a"}]}},"sourceSpan":{"start":[155,1],"name":"/home/travis/build/garyb/purescript-codec-argonaut/src/Data/Codec/Argonaut.purs","end":[160,8]}},{"children":[],"comments":"A codec for types that are encoded as an array with a specific layout.\n\nFor example, given that we'd like to encode a Person as a 2-element array,\nlike so `[ \"Karl\", 25 ]`, we could write the following codec:\n\n```purescript\ntype Person = { name ∷ String, age ∷ Int }\n\nJA.indexedArray \"Test Object\" $\n  { name: _, age: _ }\n    <$> _.name ~ index 0 JA.string\n    <*> _.age ~ index 1 JA.int\n```\n","title":"indexedArray","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["a",{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Codec","Argonaut"],"JIndexedCodec"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Codec","Argonaut"],"JsonCodec"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]}]}]},null]}},"sourceSpan":{"start":[175,1],"name":"/home/travis/build/garyb/purescript-codec-argonaut/src/Data/Codec/Argonaut.purs","end":[175,59]}},{"children":[],"comments":"A codec for an item in an `indexedArray`.\n","title":"index","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["a",{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Codec","Argonaut"],"JsonCodec"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Codec","Argonaut"],"JIndexedCodec"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]}]}]},null]}},"sourceSpan":{"start":[182,1],"name":"/home/travis/build/garyb/purescript-codec-argonaut/src/Data/Codec/Argonaut.purs","end":[182,49]}},{"children":[],"comments":"Codec type for `JObject` prop/value pairs.\n","title":"JPropCodec","info":{"arguments":[["a",null]],"declType":"typeSynonym","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Codec"],"Codec"]},{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Either"],"Either"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Codec","Argonaut"],"JsonDecodeError"]}]}}]},{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Foreign","Object"],"Object"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Argonaut","Core"],"Json"]}]}}]},{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","List","Types"],"List"]},{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Tuple"],"Tuple"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Argonaut","Core"],"Json"]}]}}]}}]},{"annotation":[],"tag":"TypeVar","contents":"a"}]},{"annotation":[],"tag":"TypeVar","contents":"a"}]}},"sourceSpan":{"start":[192,1],"name":"/home/travis/build/garyb/purescript-codec-argonaut/src/Data/Codec/Argonaut.purs","end":[197,8]}},{"children":[],"comments":"A codec for objects that are encoded with specific properties.\n","title":"object","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["a",{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Codec","Argonaut"],"JPropCodec"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Codec","Argonaut"],"JsonCodec"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]}]}]},null]}},"sourceSpan":{"start":[200,1],"name":"/home/travis/build/garyb/purescript-codec-argonaut/src/Data/Codec/Argonaut.purs","end":[200,50]}},{"children":[],"comments":"A codec for a property of an object.\n","title":"prop","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["a",{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Codec","Argonaut"],"JsonCodec"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Codec","Argonaut"],"JPropCodec"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]}]}]},null]}},"sourceSpan":{"start":[207,1],"name":"/home/travis/build/garyb/purescript-codec-argonaut/src/Data/Codec/Argonaut.purs","end":[207,48]}},{"children":[],"comments":"The starting value for a object-record codec. Used with `recordProp` it\nprovides a convenient method for defining codecs for record types that\nencode into JSON objects of the same shape.\n\nFor example:\n```\nmyRecordCodec =\n  object \"MyRecord\" $ record\n    # recordProp (SProxy :: SProxy \"tag\") tagCodec\n    # recordProp (SProxy :: SProxy \"value\") valueCodec\n```\n","title":"record","info":{"declType":"value","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Codec","Argonaut"],"JPropCodec"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Record"]},{"annotation":[],"tag":"REmpty"}]}]}},"sourceSpan":{"start":[229,1],"name":"/home/travis/build/garyb/purescript-codec-argonaut/src/Data/Codec/Argonaut.purs","end":[229,23]}},{"children":[],"comments":"Used with `record` to define codecs for record types that encode into JSON\nobjects of the same shape. See the comment on `record` for an example.\n","title":"recordProp","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["r'",{"annotation":[],"tag":"ForAll","contents":["r",{"annotation":[],"tag":"ForAll","contents":["a",{"annotation":[],"tag":"ForAll","contents":["p",{"annotation":[],"tag":"ConstrainedType","contents":[{"constraintAnn":[],"constraintClass":[["Data","Symbol"],"IsSymbol"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"p"}],"constraintData":null},{"annotation":[],"tag":"ConstrainedType","contents":[{"constraintAnn":[],"constraintClass":[["Prim","Row"],"Cons"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"p"},{"annotation":[],"tag":"TypeVar","contents":"a"},{"annotation":[],"tag":"TypeVar","contents":"r"},{"annotation":[],"tag":"TypeVar","contents":"r'"}],"constraintData":null},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Symbol"],"SProxy"]},{"annotation":[],"tag":"TypeVar","contents":"p"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Codec","Argonaut"],"JsonCodec"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Codec","Argonaut"],"JPropCodec"]},{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Record"]},{"annotation":[],"tag":"TypeVar","contents":"r"}]}}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Codec","Argonaut"],"JPropCodec"]},{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Record"]},{"annotation":[],"tag":"TypeVar","contents":"r'"}]}}]}]}]}]}]}]},null]},null]},null]},null]}},"sourceSpan":{"start":[234,1],"name":"/home/travis/build/garyb/purescript-codec-argonaut/src/Data/Codec/Argonaut.purs","end":[241,27]}},{"children":[],"comments":"Helper function for defining recursive codecs.\n","title":"fix","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["a",{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Codec","Argonaut"],"JsonCodec"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Codec","Argonaut"],"JsonCodec"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]}]}}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Codec","Argonaut"],"JsonCodec"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]}]},null]}},"sourceSpan":{"start":[274,1],"name":"/home/travis/build/garyb/purescript-codec-argonaut/src/Data/Codec/Argonaut.purs","end":[274,53]}},{"children":[],"comments":"Adapts an existing codec with a pair of functions to allow a value to be\nfurther refined. If the inner decoder fails an `UnexpectedValue` error will\nbe raised for JSON input.\n\nThis function is named as such as the pair of functions it accepts\ncorrespond with the `preview` and `view` functions of a `Prism`-style lens.\n\nFor example, in order to parse a mapping from an enum to strings, which\ndoesn't match up nicely with `Data.Codec.Argonaut.Sum.enumSum` we can use\nprismaticCodec:\n\n```purescript\ndata Direction = North | South | West | East\n\ndirectionCodec :: JsonCodec Direction\ndirectionCodec = prismaticCodec dec enc string\n  where\n    dec = case _ of\n      \"N\" -> Just North\n      \"S\" -> Just South\n      \"W\" -> Just West\n      \"E\" -> Just East\n      _ -> Nothing\n\n    enc = case _ of\n      North -> \"N\"\n      South -> \"S\"\n      West -> \"W\"\n      East -> \"E\"\n```\n","title":"prismaticCodec","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["b",{"annotation":[],"tag":"ForAll","contents":["a",{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"annotation":[],"tag":"TypeVar","contents":"b"}]}]}}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeVar","contents":"b"}]},{"annotation":[],"tag":"TypeVar","contents":"a"}]}}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Codec","Argonaut"],"JsonCodec"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Codec","Argonaut"],"JsonCodec"]},{"annotation":[],"tag":"TypeVar","contents":"b"}]}]}]}]},null]},null]}},"sourceSpan":{"start":[310,1],"name":"/home/travis/build/garyb/purescript-codec-argonaut/src/Data/Codec/Argonaut.purs","end":[310,76]}}]},{"reExports":[{"moduleName":{"package":null,"item":["Data","Codec","Argonaut"]},"declarations":[{"children":[{"comments":null,"title":"TypeMismatch","info":{"arguments":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"String"]}],"declType":"dataConstructor"},"sourceSpan":null},{"comments":null,"title":"UnexpectedValue","info":{"arguments":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Argonaut","Core"],"Json"]}],"declType":"dataConstructor"},"sourceSpan":null},{"comments":null,"title":"AtIndex","info":{"arguments":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Int"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Codec","Argonaut"],"JsonDecodeError"]}],"declType":"dataConstructor"},"sourceSpan":null},{"comments":null,"title":"AtKey","info":{"arguments":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"String"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Codec","Argonaut"],"JsonDecodeError"]}],"declType":"dataConstructor"},"sourceSpan":null},{"comments":null,"title":"Named","info":{"arguments":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"String"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Codec","Argonaut"],"JsonDecodeError"]}],"declType":"dataConstructor"},"sourceSpan":null},{"comments":null,"title":"MissingValue","info":{"arguments":[],"declType":"dataConstructor"},"sourceSpan":null},{"comments":null,"title":"eqJsonDecodeError","info":{"declType":"instance","dependencies":[],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Eq"],"Eq"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Codec","Argonaut"],"JsonDecodeError"]}]}},"sourceSpan":{"start":[67,8],"name":"/home/travis/build/garyb/purescript-codec-argonaut/src/Data/Codec/Argonaut.purs","end":[67,55]}},{"comments":null,"title":"ordJsonDecodeError","info":{"declType":"instance","dependencies":[],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Ord"],"Ord"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Codec","Argonaut"],"JsonDecodeError"]}]}},"sourceSpan":{"start":[68,8],"name":"/home/travis/build/garyb/purescript-codec-argonaut/src/Data/Codec/Argonaut.purs","end":[68,57]}},{"comments":null,"title":"genericJsonDecodeError","info":{"declType":"instance","dependencies":[],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Generic","Rep"],"Generic"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Codec","Argonaut"],"JsonDecodeError"]}]},{"annotation":[],"tag":"TypeWildcard","contents":null}]}},"sourceSpan":{"start":[69,8],"name":"/home/travis/build/garyb/purescript-codec-argonaut/src/Data/Codec/Argonaut.purs","end":[69,67]}},{"comments":null,"title":"showJsonDecodeError","info":{"declType":"instance","dependencies":[],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Show"],"Show"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Codec","Argonaut"],"JsonDecodeError"]}]}},"sourceSpan":{"start":[71,1],"name":"/home/travis/build/garyb/purescript-codec-argonaut/src/Data/Codec/Argonaut.purs","end":[71,52]}}],"comments":"Error type for failures while decoding.\n","title":"JsonDecodeError","info":{"declType":"data","dataDeclType":"data","typeArguments":[]},"sourceSpan":{"start":[59,1],"name":"/home/travis/build/garyb/purescript-codec-argonaut/src/Data/Codec/Argonaut.purs","end":[65,17]}},{"children":[],"comments":"Codec type for `Json` values.\n","title":"JsonCodec","info":{"arguments":[["a",null]],"declType":"typeSynonym","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Codec"],"BasicCodec"]},{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Either"],"Either"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Codec","Argonaut"],"JsonDecodeError"]}]}}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Argonaut","Core"],"Json"]}]},{"annotation":[],"tag":"TypeVar","contents":"a"}]}},"sourceSpan":{"start":[56,1],"name":"/home/travis/build/garyb/purescript-codec-argonaut/src/Data/Codec/Argonaut.purs","end":[56,64]}},{"children":[],"comments":"Codec type for `JObject` prop/value pairs.\n","title":"JPropCodec","info":{"arguments":[["a",null]],"declType":"typeSynonym","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Codec"],"Codec"]},{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Either"],"Either"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Codec","Argonaut"],"JsonDecodeError"]}]}}]},{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Foreign","Object"],"Object"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Argonaut","Core"],"Json"]}]}}]},{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","List","Types"],"List"]},{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Tuple"],"Tuple"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Argonaut","Core"],"Json"]}]}}]}}]},{"annotation":[],"tag":"TypeVar","contents":"a"}]},{"annotation":[],"tag":"TypeVar","contents":"a"}]}},"sourceSpan":{"start":[192,1],"name":"/home/travis/build/garyb/purescript-codec-argonaut/src/Data/Codec/Argonaut.purs","end":[197,8]}},{"children":[],"comments":"Codec type for specifically indexed `JArray` elements.\n","title":"JIndexedCodec","info":{"arguments":[["a",null]],"declType":"typeSynonym","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Codec"],"Codec"]},{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Either"],"Either"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Codec","Argonaut"],"JsonDecodeError"]}]}}]},{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Argonaut","Core"],"Json"]}]}}]},{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","List","Types"],"List"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Argonaut","Core"],"Json"]}]}}]},{"annotation":[],"tag":"TypeVar","contents":"a"}]},{"annotation":[],"tag":"TypeVar","contents":"a"}]}},"sourceSpan":{"start":[155,1],"name":"/home/travis/build/garyb/purescript-codec-argonaut/src/Data/Codec/Argonaut.purs","end":[160,8]}},{"children":[],"comments":"A codec for `String` values in `Json`.\n","title":"string","info":{"declType":"value","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Codec","Argonaut"],"JsonCodec"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}},"sourceSpan":{"start":[114,1],"name":"/home/travis/build/garyb/purescript-codec-argonaut/src/Data/Codec/Argonaut.purs","end":[114,26]}},{"children":[],"comments":"Used with `record` to define codecs for record types that encode into JSON\nobjects of the same shape. See the comment on `record` for an example.\n","title":"recordProp","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["r'",{"annotation":[],"tag":"ForAll","contents":["r",{"annotation":[],"tag":"ForAll","contents":["a",{"annotation":[],"tag":"ForAll","contents":["p",{"annotation":[],"tag":"ConstrainedType","contents":[{"constraintAnn":[],"constraintClass":[["Data","Symbol"],"IsSymbol"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"p"}],"constraintData":null},{"annotation":[],"tag":"ConstrainedType","contents":[{"constraintAnn":[],"constraintClass":[["Prim","Row"],"Cons"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"p"},{"annotation":[],"tag":"TypeVar","contents":"a"},{"annotation":[],"tag":"TypeVar","contents":"r"},{"annotation":[],"tag":"TypeVar","contents":"r'"}],"constraintData":null},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Symbol"],"SProxy"]},{"annotation":[],"tag":"TypeVar","contents":"p"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Codec","Argonaut"],"JsonCodec"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Codec","Argonaut"],"JPropCodec"]},{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Record"]},{"annotation":[],"tag":"TypeVar","contents":"r"}]}}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Codec","Argonaut"],"JPropCodec"]},{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Record"]},{"annotation":[],"tag":"TypeVar","contents":"r'"}]}}]}]}]}]}]}]},null]},null]},null]},null]}},"sourceSpan":{"start":[234,1],"name":"/home/travis/build/garyb/purescript-codec-argonaut/src/Data/Codec/Argonaut.purs","end":[241,27]}},{"children":[],"comments":"The starting value for a object-record codec. Used with `recordProp` it\nprovides a convenient method for defining codecs for record types that\nencode into JSON objects of the same shape.\n\nFor example:\n```\nmyRecordCodec =\n  object \"MyRecord\" $ record\n    # recordProp (SProxy :: SProxy \"tag\") tagCodec\n    # recordProp (SProxy :: SProxy \"value\") valueCodec\n```\n","title":"record","info":{"declType":"value","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Codec","Argonaut"],"JPropCodec"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Record"]},{"annotation":[],"tag":"REmpty"}]}]}},"sourceSpan":{"start":[229,1],"name":"/home/travis/build/garyb/purescript-codec-argonaut/src/Data/Codec/Argonaut.purs","end":[229,23]}},{"children":[],"comments":"A codec for a property of an object.\n","title":"prop","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["a",{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Codec","Argonaut"],"JsonCodec"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Codec","Argonaut"],"JPropCodec"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]}]}]},null]}},"sourceSpan":{"start":[207,1],"name":"/home/travis/build/garyb/purescript-codec-argonaut/src/Data/Codec/Argonaut.purs","end":[207,48]}},{"children":[],"comments":"Prints a `JsonDecodeError` as a somewhat readable error message.\n","title":"printJsonDecodeError","info":{"declType":"value","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Codec","Argonaut"],"JsonDecodeError"]}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}},"sourceSpan":{"start":[81,1],"name":"/home/travis/build/garyb/purescript-codec-argonaut/src/Data/Codec/Argonaut.purs","end":[81,48]}},{"children":[],"comments":"A codec for objects that are encoded with specific properties.\n","title":"object","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["a",{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Codec","Argonaut"],"JPropCodec"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Codec","Argonaut"],"JsonCodec"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]}]}]},null]}},"sourceSpan":{"start":[200,1],"name":"/home/travis/build/garyb/purescript-codec-argonaut/src/Data/Codec/Argonaut.purs","end":[200,50]}},{"children":[],"comments":"A codec for `Number` values in `Json`.\n","title":"number","info":{"declType":"value","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Codec","Argonaut"],"JsonCodec"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]}},"sourceSpan":{"start":[106,1],"name":"/home/travis/build/garyb/purescript-codec-argonaut/src/Data/Codec/Argonaut.purs","end":[106,26]}},{"children":[],"comments":"A codec for `null` values in `Json`.\n","title":"null","info":{"declType":"value","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Codec","Argonaut"],"JsonCodec"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}},"sourceSpan":{"start":[98,1],"name":"/home/travis/build/garyb/purescript-codec-argonaut/src/Data/Codec/Argonaut.purs","end":[98,22]}},{"children":[],"comments":"The \"identity codec\" for `Json` values.\n","title":"json","info":{"declType":"value","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Codec","Argonaut"],"JsonCodec"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Argonaut","Core"],"Json"]}]}},"sourceSpan":{"start":[94,1],"name":"/home/travis/build/garyb/purescript-codec-argonaut/src/Data/Codec/Argonaut.purs","end":[94,24]}},{"children":[],"comments":"A codec for `JObject` values in `Json`.\n","title":"jobject","info":{"declType":"value","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Codec","Argonaut"],"JsonCodec"]},{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Foreign","Object"],"Object"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Argonaut","Core"],"Json"]}]}}]}},"sourceSpan":{"start":[136,1],"name":"/home/travis/build/garyb/purescript-codec-argonaut/src/Data/Codec/Argonaut.purs","end":[136,39]}},{"children":[],"comments":"A codec for `Array Json` values in `Json`. This does not decode the values\nof the array, for that use `array` for a general array decoder, or\n`indexedArray` with `index` to decode fixed length array encodings.\n","title":"jarray","info":{"declType":"value","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Codec","Argonaut"],"JsonCodec"]},{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Argonaut","Core"],"Json"]}]}}]}},"sourceSpan":{"start":[132,1],"name":"/home/travis/build/garyb/purescript-codec-argonaut/src/Data/Codec/Argonaut.purs","end":[132,34]}},{"children":[],"comments":"A codec for `Int` values in `Json`.\n","title":"int","info":{"declType":"value","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Codec","Argonaut"],"JsonCodec"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}},"sourceSpan":{"start":[110,1],"name":"/home/travis/build/garyb/purescript-codec-argonaut/src/Data/Codec/Argonaut.purs","end":[110,20]}},{"children":[],"comments":"A codec for types that are encoded as an array with a specific layout.\n\nFor example, given that we'd like to encode a Person as a 2-element array,\nlike so `[ \"Karl\", 25 ]`, we could write the following codec:\n\n```purescript\ntype Person = { name ∷ String, age ∷ Int }\n\nJA.indexedArray \"Test Object\" $\n  { name: _, age: _ }\n    <$> _.name ~ index 0 JA.string\n    <*> _.age ~ index 1 JA.int\n```\n","title":"indexedArray","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["a",{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Codec","Argonaut"],"JIndexedCodec"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Codec","Argonaut"],"JsonCodec"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]}]}]},null]}},"sourceSpan":{"start":[175,1],"name":"/home/travis/build/garyb/purescript-codec-argonaut/src/Data/Codec/Argonaut.purs","end":[175,59]}},{"children":[],"comments":"A codec for an item in an `indexedArray`.\n","title":"index","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["a",{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Codec","Argonaut"],"JsonCodec"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Codec","Argonaut"],"JIndexedCodec"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]}]}]},null]}},"sourceSpan":{"start":[182,1],"name":"/home/travis/build/garyb/purescript-codec-argonaut/src/Data/Codec/Argonaut.purs","end":[182,49]}},{"children":[],"comments":"Helper function for defining recursive codecs.\n","title":"fix","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["a",{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Codec","Argonaut"],"JsonCodec"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Codec","Argonaut"],"JsonCodec"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]}]}}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Codec","Argonaut"],"JsonCodec"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]}]},null]}},"sourceSpan":{"start":[274,1],"name":"/home/travis/build/garyb/purescript-codec-argonaut/src/Data/Codec/Argonaut.purs","end":[274,53]}},{"children":[],"comments":null,"title":"encode","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["d",{"annotation":[],"tag":"ForAll","contents":["c",{"annotation":[],"tag":"ForAll","contents":["b",{"annotation":[],"tag":"ForAll","contents":["a",{"annotation":[],"tag":"ForAll","contents":["m",{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Codec"],"Codec"]},{"annotation":[],"tag":"TypeVar","contents":"m"}]},{"annotation":[],"tag":"TypeVar","contents":"a"}]},{"annotation":[],"tag":"TypeVar","contents":"b"}]},{"annotation":[],"tag":"TypeVar","contents":"c"}]},{"annotation":[],"tag":"TypeVar","contents":"d"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeVar","contents":"c"}]},{"annotation":[],"tag":"TypeVar","contents":"b"}]}]},null]},null]},null]},null]},null]}},"sourceSpan":{"start":[96,1],"name":"/home/travis/build/garyb/purescript-codec-argonaut/bower_components/purescript-codec/src/Data/Codec.purs","end":[96,46]}},{"children":[],"comments":null,"title":"decode","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["d",{"annotation":[],"tag":"ForAll","contents":["c",{"annotation":[],"tag":"ForAll","contents":["b",{"annotation":[],"tag":"ForAll","contents":["a",{"annotation":[],"tag":"ForAll","contents":["m",{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Codec"],"Codec"]},{"annotation":[],"tag":"TypeVar","contents":"m"}]},{"annotation":[],"tag":"TypeVar","contents":"a"}]},{"annotation":[],"tag":"TypeVar","contents":"b"}]},{"annotation":[],"tag":"TypeVar","contents":"c"}]},{"annotation":[],"tag":"TypeVar","contents":"d"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeVar","contents":"m"},{"annotation":[],"tag":"TypeVar","contents":"d"}]}]}]},null]},null]},null]},null]},null]}},"sourceSpan":{"start":[93,1],"name":"/home/travis/build/garyb/purescript-codec-argonaut/bower_components/purescript-codec/src/Data/Codec.purs","end":[93,48]}},{"children":[],"comments":"A codec for `Char` values in `Json`.\n","title":"char","info":{"declType":"value","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Codec","Argonaut"],"JsonCodec"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Char"]}]}},"sourceSpan":{"start":[122,1],"name":"/home/travis/build/garyb/purescript-codec-argonaut/src/Data/Codec/Argonaut.purs","end":[122,22]}},{"children":[],"comments":"A codec for `Boolean` values in `Json`.\n","title":"boolean","info":{"declType":"value","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Codec","Argonaut"],"JsonCodec"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}},"sourceSpan":{"start":[102,1],"name":"/home/travis/build/garyb/purescript-codec-argonaut/src/Data/Codec/Argonaut.purs","end":[102,28]}},{"children":[],"comments":"A codec for `Array` values.\n```purescript\ndecodeIntArray ∷ Json → Either JsonDecodeError (Array Int)\ndecodeIntArray = decode (array int)\n```\n","title":"array","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["a",{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Codec","Argonaut"],"JsonCodec"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Codec","Argonaut"],"JsonCodec"]},{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]}}]}]},null]}},"sourceSpan":{"start":[145,1],"name":"/home/travis/build/garyb/purescript-codec-argonaut/src/Data/Codec/Argonaut.purs","end":[145,47]}},{"children":[],"comments":"`GCodec` is defined as a `Profunctor` so that `lmap` can be used to target\nspecific fields when defining a codec for a product type. This operator\nis a convenience for that:\n\n``` purescript\ntupleCodec =\n  Tuple\n    <$> fst ~ fstCodec\n    <*> snd ~ sndCodec\n```\n","title":"(~)","info":{"declType":"alias","alias":[["Data","Profunctor"],{"Right":{"Left":{"Ident":"lcmap"}}}],"fixity":{"associativity":"infixl","precedence":5}},"sourceSpan":{"start":[89,1],"name":"/home/travis/build/garyb/purescript-codec-argonaut/bower_components/purescript-codec/src/Data/Codec.purs","end":[89,20]}},{"children":[],"comments":null,"title":"(<~<)","info":{"declType":"alias","alias":[["Data","Codec"],{"Right":{"Left":{"Ident":"composeCodec"}}}],"fixity":{"associativity":"infixr","precedence":8}},"sourceSpan":{"start":[126,1],"name":"/home/travis/build/garyb/purescript-codec-argonaut/bower_components/purescript-codec/src/Data/Codec.purs","end":[126,29]}}]}],"name":"Data.Codec.Argonaut.Common","comments":null,"declarations":[{"children":[],"comments":"A codec for `Either` values.\n","title":"either","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["b",{"annotation":[],"tag":"ForAll","contents":["a",{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Codec","Argonaut"],"JsonCodec"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Codec","Argonaut"],"JsonCodec"]},{"annotation":[],"tag":"TypeVar","contents":"b"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Codec","Argonaut"],"JsonCodec"]},{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Either"],"Either"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]},{"annotation":[],"tag":"TypeVar","contents":"b"}]}}]}]}]},null]},null]}},"sourceSpan":{"start":[51,1],"name":"/home/travis/build/garyb/purescript-codec-argonaut/src/Data/Codec/Argonaut/Common.purs","end":[51,67]}},{"children":[],"comments":"A codec for `StrMap` values.\n\nEncodes as an array of two-element key/value arrays in JSON.\n","title":"foreignObject","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["a",{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Codec","Argonaut"],"JsonCodec"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Codec","Argonaut"],"JsonCodec"]},{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Foreign","Object"],"Object"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]}}]}]},null]}},"sourceSpan":{"start":[83,1],"name":"/home/travis/build/garyb/purescript-codec-argonaut/src/Data/Codec/Argonaut/Common.purs","end":[83,59]}},{"children":[],"comments":"A codec for `List` values.\n\nEncodes as an array in JSON.\n","title":"list","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["a",{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Codec","Argonaut"],"JsonCodec"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Codec","Argonaut"],"JsonCodec"]},{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","List","Types"],"List"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]}}]}]},null]}},"sourceSpan":{"start":[71,1],"name":"/home/travis/build/garyb/purescript-codec-argonaut/src/Data/Codec/Argonaut/Common.purs","end":[71,47]}},{"children":[],"comments":"A codec for `Map` values.\n\nEncodes as an array of two-element key/value arrays in JSON.\n","title":"map","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["b",{"annotation":[],"tag":"ForAll","contents":["a",{"annotation":[],"tag":"ConstrainedType","contents":[{"constraintAnn":[],"constraintClass":[["Data","Ord"],"Ord"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"a"}],"constraintData":null},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Codec","Argonaut"],"JsonCodec"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Codec","Argonaut"],"JsonCodec"]},{"annotation":[],"tag":"TypeVar","contents":"b"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Codec","Argonaut"],"JsonCodec"]},{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Map","Internal"],"Map"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]},{"annotation":[],"tag":"TypeVar","contents":"b"}]}}]}]}]}]},null]},null]}},"sourceSpan":{"start":[77,1],"name":"/home/travis/build/garyb/purescript-codec-argonaut/src/Data/Codec/Argonaut/Common.purs","end":[77,71]}},{"children":[],"comments":"A codec for `Maybe` values.\n\nNOTE: This is not suitable to en/decode null values. If you need these kinds of codecs,\nlook into `Data.Codec.Argonaut.Compat`\n","title":"maybe","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["a",{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Codec","Argonaut"],"JsonCodec"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Codec","Argonaut"],"JsonCodec"]},{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]}}]}]},null]}},"sourceSpan":{"start":[24,1],"name":"/home/travis/build/garyb/purescript-codec-argonaut/src/Data/Codec/Argonaut/Common.purs","end":[24,47]}},{"children":[],"comments":"A codec for `Tuple` values.\n\nEncodes as a two-element array in JSON.\n","title":"tuple","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["b",{"annotation":[],"tag":"ForAll","contents":["a",{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Codec","Argonaut"],"JsonCodec"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Codec","Argonaut"],"JsonCodec"]},{"annotation":[],"tag":"TypeVar","contents":"b"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Codec","Argonaut"],"JsonCodec"]},{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Tuple"],"Tuple"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]},{"annotation":[],"tag":"TypeVar","contents":"b"}]}}]}]}]},null]},null]}},"sourceSpan":{"start":[44,1],"name":"/home/travis/build/garyb/purescript-codec-argonaut/src/Data/Codec/Argonaut/Common.purs","end":[44,65]}}]},{"reExports":[{"moduleName":{"package":null,"item":["Data","Codec","Argonaut"]},"declarations":[{"children":[{"comments":null,"title":"TypeMismatch","info":{"arguments":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"String"]}],"declType":"dataConstructor"},"sourceSpan":null},{"comments":null,"title":"UnexpectedValue","info":{"arguments":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Argonaut","Core"],"Json"]}],"declType":"dataConstructor"},"sourceSpan":null},{"comments":null,"title":"AtIndex","info":{"arguments":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Int"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Codec","Argonaut"],"JsonDecodeError"]}],"declType":"dataConstructor"},"sourceSpan":null},{"comments":null,"title":"AtKey","info":{"arguments":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"String"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Codec","Argonaut"],"JsonDecodeError"]}],"declType":"dataConstructor"},"sourceSpan":null},{"comments":null,"title":"Named","info":{"arguments":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"String"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Codec","Argonaut"],"JsonDecodeError"]}],"declType":"dataConstructor"},"sourceSpan":null},{"comments":null,"title":"MissingValue","info":{"arguments":[],"declType":"dataConstructor"},"sourceSpan":null},{"comments":null,"title":"eqJsonDecodeError","info":{"declType":"instance","dependencies":[],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Eq"],"Eq"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Codec","Argonaut"],"JsonDecodeError"]}]}},"sourceSpan":{"start":[67,8],"name":"/home/travis/build/garyb/purescript-codec-argonaut/src/Data/Codec/Argonaut.purs","end":[67,55]}},{"comments":null,"title":"ordJsonDecodeError","info":{"declType":"instance","dependencies":[],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Ord"],"Ord"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Codec","Argonaut"],"JsonDecodeError"]}]}},"sourceSpan":{"start":[68,8],"name":"/home/travis/build/garyb/purescript-codec-argonaut/src/Data/Codec/Argonaut.purs","end":[68,57]}},{"comments":null,"title":"genericJsonDecodeError","info":{"declType":"instance","dependencies":[],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Generic","Rep"],"Generic"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Codec","Argonaut"],"JsonDecodeError"]}]},{"annotation":[],"tag":"TypeWildcard","contents":null}]}},"sourceSpan":{"start":[69,8],"name":"/home/travis/build/garyb/purescript-codec-argonaut/src/Data/Codec/Argonaut.purs","end":[69,67]}},{"comments":null,"title":"showJsonDecodeError","info":{"declType":"instance","dependencies":[],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Show"],"Show"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Codec","Argonaut"],"JsonDecodeError"]}]}},"sourceSpan":{"start":[71,1],"name":"/home/travis/build/garyb/purescript-codec-argonaut/src/Data/Codec/Argonaut.purs","end":[71,52]}}],"comments":"Error type for failures while decoding.\n","title":"JsonDecodeError","info":{"declType":"data","dataDeclType":"data","typeArguments":[]},"sourceSpan":{"start":[59,1],"name":"/home/travis/build/garyb/purescript-codec-argonaut/src/Data/Codec/Argonaut.purs","end":[65,17]}},{"children":[],"comments":"Codec type for `Json` values.\n","title":"JsonCodec","info":{"arguments":[["a",null]],"declType":"typeSynonym","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Codec"],"BasicCodec"]},{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Either"],"Either"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Codec","Argonaut"],"JsonDecodeError"]}]}}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Argonaut","Core"],"Json"]}]},{"annotation":[],"tag":"TypeVar","contents":"a"}]}},"sourceSpan":{"start":[56,1],"name":"/home/travis/build/garyb/purescript-codec-argonaut/src/Data/Codec/Argonaut.purs","end":[56,64]}},{"children":[],"comments":"Codec type for `JObject` prop/value pairs.\n","title":"JPropCodec","info":{"arguments":[["a",null]],"declType":"typeSynonym","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Codec"],"Codec"]},{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Either"],"Either"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Codec","Argonaut"],"JsonDecodeError"]}]}}]},{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Foreign","Object"],"Object"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Argonaut","Core"],"Json"]}]}}]},{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","List","Types"],"List"]},{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Tuple"],"Tuple"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Argonaut","Core"],"Json"]}]}}]}}]},{"annotation":[],"tag":"TypeVar","contents":"a"}]},{"annotation":[],"tag":"TypeVar","contents":"a"}]}},"sourceSpan":{"start":[192,1],"name":"/home/travis/build/garyb/purescript-codec-argonaut/src/Data/Codec/Argonaut.purs","end":[197,8]}},{"children":[],"comments":"Codec type for specifically indexed `JArray` elements.\n","title":"JIndexedCodec","info":{"arguments":[["a",null]],"declType":"typeSynonym","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Codec"],"Codec"]},{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Either"],"Either"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Codec","Argonaut"],"JsonDecodeError"]}]}}]},{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Argonaut","Core"],"Json"]}]}}]},{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","List","Types"],"List"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Argonaut","Core"],"Json"]}]}}]},{"annotation":[],"tag":"TypeVar","contents":"a"}]},{"annotation":[],"tag":"TypeVar","contents":"a"}]}},"sourceSpan":{"start":[155,1],"name":"/home/travis/build/garyb/purescript-codec-argonaut/src/Data/Codec/Argonaut.purs","end":[160,8]}},{"children":[],"comments":"A codec for `String` values in `Json`.\n","title":"string","info":{"declType":"value","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Codec","Argonaut"],"JsonCodec"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}},"sourceSpan":{"start":[114,1],"name":"/home/travis/build/garyb/purescript-codec-argonaut/src/Data/Codec/Argonaut.purs","end":[114,26]}},{"children":[],"comments":"Used with `record` to define codecs for record types that encode into JSON\nobjects of the same shape. See the comment on `record` for an example.\n","title":"recordProp","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["r'",{"annotation":[],"tag":"ForAll","contents":["r",{"annotation":[],"tag":"ForAll","contents":["a",{"annotation":[],"tag":"ForAll","contents":["p",{"annotation":[],"tag":"ConstrainedType","contents":[{"constraintAnn":[],"constraintClass":[["Data","Symbol"],"IsSymbol"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"p"}],"constraintData":null},{"annotation":[],"tag":"ConstrainedType","contents":[{"constraintAnn":[],"constraintClass":[["Prim","Row"],"Cons"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"p"},{"annotation":[],"tag":"TypeVar","contents":"a"},{"annotation":[],"tag":"TypeVar","contents":"r"},{"annotation":[],"tag":"TypeVar","contents":"r'"}],"constraintData":null},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Symbol"],"SProxy"]},{"annotation":[],"tag":"TypeVar","contents":"p"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Codec","Argonaut"],"JsonCodec"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Codec","Argonaut"],"JPropCodec"]},{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Record"]},{"annotation":[],"tag":"TypeVar","contents":"r"}]}}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Codec","Argonaut"],"JPropCodec"]},{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Record"]},{"annotation":[],"tag":"TypeVar","contents":"r'"}]}}]}]}]}]}]}]},null]},null]},null]},null]}},"sourceSpan":{"start":[234,1],"name":"/home/travis/build/garyb/purescript-codec-argonaut/src/Data/Codec/Argonaut.purs","end":[241,27]}},{"children":[],"comments":"The starting value for a object-record codec. Used with `recordProp` it\nprovides a convenient method for defining codecs for record types that\nencode into JSON objects of the same shape.\n\nFor example:\n```\nmyRecordCodec =\n  object \"MyRecord\" $ record\n    # recordProp (SProxy :: SProxy \"tag\") tagCodec\n    # recordProp (SProxy :: SProxy \"value\") valueCodec\n```\n","title":"record","info":{"declType":"value","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Codec","Argonaut"],"JPropCodec"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Record"]},{"annotation":[],"tag":"REmpty"}]}]}},"sourceSpan":{"start":[229,1],"name":"/home/travis/build/garyb/purescript-codec-argonaut/src/Data/Codec/Argonaut.purs","end":[229,23]}},{"children":[],"comments":"A codec for a property of an object.\n","title":"prop","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["a",{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Codec","Argonaut"],"JsonCodec"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Codec","Argonaut"],"JPropCodec"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]}]}]},null]}},"sourceSpan":{"start":[207,1],"name":"/home/travis/build/garyb/purescript-codec-argonaut/src/Data/Codec/Argonaut.purs","end":[207,48]}},{"children":[],"comments":"Prints a `JsonDecodeError` as a somewhat readable error message.\n","title":"printJsonDecodeError","info":{"declType":"value","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Codec","Argonaut"],"JsonDecodeError"]}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}},"sourceSpan":{"start":[81,1],"name":"/home/travis/build/garyb/purescript-codec-argonaut/src/Data/Codec/Argonaut.purs","end":[81,48]}},{"children":[],"comments":"A codec for objects that are encoded with specific properties.\n","title":"object","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["a",{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Codec","Argonaut"],"JPropCodec"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Codec","Argonaut"],"JsonCodec"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]}]}]},null]}},"sourceSpan":{"start":[200,1],"name":"/home/travis/build/garyb/purescript-codec-argonaut/src/Data/Codec/Argonaut.purs","end":[200,50]}},{"children":[],"comments":"A codec for `Number` values in `Json`.\n","title":"number","info":{"declType":"value","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Codec","Argonaut"],"JsonCodec"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]}},"sourceSpan":{"start":[106,1],"name":"/home/travis/build/garyb/purescript-codec-argonaut/src/Data/Codec/Argonaut.purs","end":[106,26]}},{"children":[],"comments":"A codec for `null` values in `Json`.\n","title":"null","info":{"declType":"value","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Codec","Argonaut"],"JsonCodec"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}},"sourceSpan":{"start":[98,1],"name":"/home/travis/build/garyb/purescript-codec-argonaut/src/Data/Codec/Argonaut.purs","end":[98,22]}},{"children":[],"comments":"The \"identity codec\" for `Json` values.\n","title":"json","info":{"declType":"value","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Codec","Argonaut"],"JsonCodec"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Argonaut","Core"],"Json"]}]}},"sourceSpan":{"start":[94,1],"name":"/home/travis/build/garyb/purescript-codec-argonaut/src/Data/Codec/Argonaut.purs","end":[94,24]}},{"children":[],"comments":"A codec for `JObject` values in `Json`.\n","title":"jobject","info":{"declType":"value","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Codec","Argonaut"],"JsonCodec"]},{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Foreign","Object"],"Object"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Argonaut","Core"],"Json"]}]}}]}},"sourceSpan":{"start":[136,1],"name":"/home/travis/build/garyb/purescript-codec-argonaut/src/Data/Codec/Argonaut.purs","end":[136,39]}},{"children":[],"comments":"A codec for `Array Json` values in `Json`. This does not decode the values\nof the array, for that use `array` for a general array decoder, or\n`indexedArray` with `index` to decode fixed length array encodings.\n","title":"jarray","info":{"declType":"value","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Codec","Argonaut"],"JsonCodec"]},{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Argonaut","Core"],"Json"]}]}}]}},"sourceSpan":{"start":[132,1],"name":"/home/travis/build/garyb/purescript-codec-argonaut/src/Data/Codec/Argonaut.purs","end":[132,34]}},{"children":[],"comments":"A codec for `Int` values in `Json`.\n","title":"int","info":{"declType":"value","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Codec","Argonaut"],"JsonCodec"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}},"sourceSpan":{"start":[110,1],"name":"/home/travis/build/garyb/purescript-codec-argonaut/src/Data/Codec/Argonaut.purs","end":[110,20]}},{"children":[],"comments":"A codec for types that are encoded as an array with a specific layout.\n\nFor example, given that we'd like to encode a Person as a 2-element array,\nlike so `[ \"Karl\", 25 ]`, we could write the following codec:\n\n```purescript\ntype Person = { name ∷ String, age ∷ Int }\n\nJA.indexedArray \"Test Object\" $\n  { name: _, age: _ }\n    <$> _.name ~ index 0 JA.string\n    <*> _.age ~ index 1 JA.int\n```\n","title":"indexedArray","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["a",{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Codec","Argonaut"],"JIndexedCodec"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Codec","Argonaut"],"JsonCodec"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]}]}]},null]}},"sourceSpan":{"start":[175,1],"name":"/home/travis/build/garyb/purescript-codec-argonaut/src/Data/Codec/Argonaut.purs","end":[175,59]}},{"children":[],"comments":"A codec for an item in an `indexedArray`.\n","title":"index","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["a",{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Codec","Argonaut"],"JsonCodec"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Codec","Argonaut"],"JIndexedCodec"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]}]}]},null]}},"sourceSpan":{"start":[182,1],"name":"/home/travis/build/garyb/purescript-codec-argonaut/src/Data/Codec/Argonaut.purs","end":[182,49]}},{"children":[],"comments":"Helper function for defining recursive codecs.\n","title":"fix","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["a",{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Codec","Argonaut"],"JsonCodec"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Codec","Argonaut"],"JsonCodec"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]}]}}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Codec","Argonaut"],"JsonCodec"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]}]},null]}},"sourceSpan":{"start":[274,1],"name":"/home/travis/build/garyb/purescript-codec-argonaut/src/Data/Codec/Argonaut.purs","end":[274,53]}},{"children":[],"comments":null,"title":"encode","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["d",{"annotation":[],"tag":"ForAll","contents":["c",{"annotation":[],"tag":"ForAll","contents":["b",{"annotation":[],"tag":"ForAll","contents":["a",{"annotation":[],"tag":"ForAll","contents":["m",{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Codec"],"Codec"]},{"annotation":[],"tag":"TypeVar","contents":"m"}]},{"annotation":[],"tag":"TypeVar","contents":"a"}]},{"annotation":[],"tag":"TypeVar","contents":"b"}]},{"annotation":[],"tag":"TypeVar","contents":"c"}]},{"annotation":[],"tag":"TypeVar","contents":"d"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeVar","contents":"c"}]},{"annotation":[],"tag":"TypeVar","contents":"b"}]}]},null]},null]},null]},null]},null]}},"sourceSpan":{"start":[96,1],"name":"/home/travis/build/garyb/purescript-codec-argonaut/bower_components/purescript-codec/src/Data/Codec.purs","end":[96,46]}},{"children":[],"comments":null,"title":"decode","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["d",{"annotation":[],"tag":"ForAll","contents":["c",{"annotation":[],"tag":"ForAll","contents":["b",{"annotation":[],"tag":"ForAll","contents":["a",{"annotation":[],"tag":"ForAll","contents":["m",{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Codec"],"Codec"]},{"annotation":[],"tag":"TypeVar","contents":"m"}]},{"annotation":[],"tag":"TypeVar","contents":"a"}]},{"annotation":[],"tag":"TypeVar","contents":"b"}]},{"annotation":[],"tag":"TypeVar","contents":"c"}]},{"annotation":[],"tag":"TypeVar","contents":"d"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeVar","contents":"m"},{"annotation":[],"tag":"TypeVar","contents":"d"}]}]}]},null]},null]},null]},null]},null]}},"sourceSpan":{"start":[93,1],"name":"/home/travis/build/garyb/purescript-codec-argonaut/bower_components/purescript-codec/src/Data/Codec.purs","end":[93,48]}},{"children":[],"comments":"A codec for `Char` values in `Json`.\n","title":"char","info":{"declType":"value","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Codec","Argonaut"],"JsonCodec"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Char"]}]}},"sourceSpan":{"start":[122,1],"name":"/home/travis/build/garyb/purescript-codec-argonaut/src/Data/Codec/Argonaut.purs","end":[122,22]}},{"children":[],"comments":"A codec for `Boolean` values in `Json`.\n","title":"boolean","info":{"declType":"value","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Codec","Argonaut"],"JsonCodec"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}},"sourceSpan":{"start":[102,1],"name":"/home/travis/build/garyb/purescript-codec-argonaut/src/Data/Codec/Argonaut.purs","end":[102,28]}},{"children":[],"comments":"A codec for `Array` values.\n```purescript\ndecodeIntArray ∷ Json → Either JsonDecodeError (Array Int)\ndecodeIntArray = decode (array int)\n```\n","title":"array","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["a",{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Codec","Argonaut"],"JsonCodec"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Codec","Argonaut"],"JsonCodec"]},{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]}}]}]},null]}},"sourceSpan":{"start":[145,1],"name":"/home/travis/build/garyb/purescript-codec-argonaut/src/Data/Codec/Argonaut.purs","end":[145,47]}},{"children":[],"comments":"`GCodec` is defined as a `Profunctor` so that `lmap` can be used to target\nspecific fields when defining a codec for a product type. This operator\nis a convenience for that:\n\n``` purescript\ntupleCodec =\n  Tuple\n    <$> fst ~ fstCodec\n    <*> snd ~ sndCodec\n```\n","title":"(~)","info":{"declType":"alias","alias":[["Data","Profunctor"],{"Right":{"Left":{"Ident":"lcmap"}}}],"fixity":{"associativity":"infixl","precedence":5}},"sourceSpan":{"start":[89,1],"name":"/home/travis/build/garyb/purescript-codec-argonaut/bower_components/purescript-codec/src/Data/Codec.purs","end":[89,20]}},{"children":[],"comments":null,"title":"(<~<)","info":{"declType":"alias","alias":[["Data","Codec"],{"Right":{"Left":{"Ident":"composeCodec"}}}],"fixity":{"associativity":"infixr","precedence":8}},"sourceSpan":{"start":[126,1],"name":"/home/travis/build/garyb/purescript-codec-argonaut/bower_components/purescript-codec/src/Data/Codec.purs","end":[126,29]}}]},{"moduleName":{"package":null,"item":["Data","Codec","Argonaut","Common"]},"declarations":[{"children":[],"comments":"A codec for `Tuple` values.\n\nEncodes as a two-element array in JSON.\n","title":"tuple","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["b",{"annotation":[],"tag":"ForAll","contents":["a",{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Codec","Argonaut"],"JsonCodec"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Codec","Argonaut"],"JsonCodec"]},{"annotation":[],"tag":"TypeVar","contents":"b"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Codec","Argonaut"],"JsonCodec"]},{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Tuple"],"Tuple"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]},{"annotation":[],"tag":"TypeVar","contents":"b"}]}}]}]}]},null]},null]}},"sourceSpan":{"start":[44,1],"name":"/home/travis/build/garyb/purescript-codec-argonaut/src/Data/Codec/Argonaut/Common.purs","end":[44,65]}},{"children":[],"comments":"A codec for `Map` values.\n\nEncodes as an array of two-element key/value arrays in JSON.\n","title":"map","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["b",{"annotation":[],"tag":"ForAll","contents":["a",{"annotation":[],"tag":"ConstrainedType","contents":[{"constraintAnn":[],"constraintClass":[["Data","Ord"],"Ord"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"a"}],"constraintData":null},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Codec","Argonaut"],"JsonCodec"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Codec","Argonaut"],"JsonCodec"]},{"annotation":[],"tag":"TypeVar","contents":"b"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Codec","Argonaut"],"JsonCodec"]},{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Map","Internal"],"Map"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]},{"annotation":[],"tag":"TypeVar","contents":"b"}]}}]}]}]}]},null]},null]}},"sourceSpan":{"start":[77,1],"name":"/home/travis/build/garyb/purescript-codec-argonaut/src/Data/Codec/Argonaut/Common.purs","end":[77,71]}},{"children":[],"comments":"A codec for `List` values.\n\nEncodes as an array in JSON.\n","title":"list","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["a",{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Codec","Argonaut"],"JsonCodec"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Codec","Argonaut"],"JsonCodec"]},{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","List","Types"],"List"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]}}]}]},null]}},"sourceSpan":{"start":[71,1],"name":"/home/travis/build/garyb/purescript-codec-argonaut/src/Data/Codec/Argonaut/Common.purs","end":[71,47]}},{"children":[],"comments":"A codec for `Either` values.\n","title":"either","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["b",{"annotation":[],"tag":"ForAll","contents":["a",{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Codec","Argonaut"],"JsonCodec"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Codec","Argonaut"],"JsonCodec"]},{"annotation":[],"tag":"TypeVar","contents":"b"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Codec","Argonaut"],"JsonCodec"]},{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Either"],"Either"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]},{"annotation":[],"tag":"TypeVar","contents":"b"}]}}]}]}]},null]},null]}},"sourceSpan":{"start":[51,1],"name":"/home/travis/build/garyb/purescript-codec-argonaut/src/Data/Codec/Argonaut/Common.purs","end":[51,67]}}]}],"name":"Data.Codec.Argonaut.Compat","comments":"Codecs that are compatible with `purescript-argonaut-codecs`.\n","declarations":[{"children":[],"comments":"A codec for `StrMap` values.\n\nEncodes as a JSON object with the keys as properties.\n\n```purescript\nencode (foreignObject int) (Foreign.Object.fromFoldable [Tuple \"a\" 1, Tuple \"b\" 2]) == \"{ \\\"a\\\": 1, \\\"b\\\": 2}\"\n```\n","title":"foreignObject","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["a",{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Codec","Argonaut"],"JsonCodec"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Codec","Argonaut"],"JsonCodec"]},{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Foreign","Object"],"Object"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]}}]}]},null]}},"sourceSpan":{"start":[47,1],"name":"/home/travis/build/garyb/purescript-codec-argonaut/src/Data/Codec/Argonaut/Compat.purs","end":[47,59]}},{"children":[],"comments":"A codec for `Maybe` values.\n\nEncodes and decodes `Nothing` as `null`\n\nNote: this codec cannot represent nested `Maybe` values in a lossless\nmanner.\n","title":"maybe","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["a",{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Codec","Argonaut"],"JsonCodec"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Codec","Argonaut"],"JsonCodec"]},{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]}}]}]},null]}},"sourceSpan":{"start":[28,1],"name":"/home/travis/build/garyb/purescript-codec-argonaut/src/Data/Codec/Argonaut/Compat.purs","end":[28,47]}}]},{"reExports":[],"name":"Data.Codec.Argonaut.Generic","comments":null,"declarations":[{"children":[],"comments":"Encodes nullary sums with a Generic instance as strings that match the constructor names.\n\n```purescript\nimport Data.Argonaut as J\n\ndata MySum = Ctor1 | Ctor2 | MoarCtors\nderive instance genericMySum ∷ Generic MySum _\n\nencode nullarySum Ctor1 == J.fromString \"Ctor1\"\ndecode nullarySum (J.fromString \"MoarCtors\") == Right MoarCtors\n```\n","title":"nullarySum","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["r",{"annotation":[],"tag":"ForAll","contents":["a",{"annotation":[],"tag":"ConstrainedType","contents":[{"constraintAnn":[],"constraintClass":[["Data","Generic","Rep"],"Generic"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"a"},{"annotation":[],"tag":"TypeVar","contents":"r"}],"constraintData":null},{"annotation":[],"tag":"ConstrainedType","contents":[{"constraintAnn":[],"constraintClass":[["Data","Codec","Argonaut","Generic"],"NullarySumCodec"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"r"}],"constraintData":null},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Codec","Argonaut"],"JsonCodec"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]}]}]}]},null]},null]}},"sourceSpan":{"start":[24,1],"name":"/home/travis/build/garyb/purescript-codec-argonaut/src/Data/Codec/Argonaut/Generic.purs","end":[24,78]}},{"children":[{"comments":null,"title":"nullarySumEncode","info":{"declType":"typeClassMember","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeVar","contents":"r"}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Argonaut","Core"],"Json"]}]}},"sourceSpan":{"start":[31,3],"name":"/home/travis/build/garyb/purescript-codec-argonaut/src/Data/Codec/Argonaut/Generic.purs","end":[31,32]}},{"comments":null,"title":"nullarySumDecode","info":{"declType":"typeClassMember","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Argonaut","Core"],"Json"]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Either"],"Either"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Codec","Argonaut"],"JsonDecodeError"]}]},{"annotation":[],"tag":"TypeVar","contents":"r"}]}]}]}},"sourceSpan":{"start":[32,3],"name":"/home/travis/build/garyb/purescript-codec-argonaut/src/Data/Codec/Argonaut/Generic.purs","end":[32,67]}},{"comments":null,"title":"nullarySumCodecSum","info":{"declType":"instance","dependencies":[{"constraintAnn":[],"constraintClass":[["Data","Codec","Argonaut","Generic"],"NullarySumCodec"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"a"}],"constraintData":null},{"constraintAnn":[],"constraintClass":[["Data","Codec","Argonaut","Generic"],"NullarySumCodec"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"b"}],"constraintData":null}],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Codec","Argonaut","Generic"],"NullarySumCodec"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Generic","Rep"],"Sum"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]},{"annotation":[],"tag":"TypeVar","contents":"b"}]}]}},"sourceSpan":{"start":[34,1],"name":"/home/travis/build/garyb/purescript-codec-argonaut/src/Data/Codec/Argonaut/Generic.purs","end":[34,97]}},{"comments":null,"title":"nullarySumCodecCtor","info":{"declType":"instance","dependencies":[{"constraintAnn":[],"constraintClass":[["Data","Symbol"],"IsSymbol"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"name"}],"constraintData":null}],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Codec","Argonaut","Generic"],"NullarySumCodec"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Generic","Rep"],"Constructor"]},{"annotation":[],"tag":"TypeVar","contents":"name"}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Generic","Rep"],"NoArguments"]}]}]}},"sourceSpan":{"start":[42,1],"name":"/home/travis/build/garyb/purescript-codec-argonaut/src/Data/Codec/Argonaut/Generic.purs","end":[42,94]}}],"comments":null,"title":"NullarySumCodec","info":{"fundeps":[],"arguments":[["r",null]],"declType":"typeClass","superclasses":[]},"sourceSpan":{"start":[30,1],"name":"/home/travis/build/garyb/purescript-codec-argonaut/src/Data/Codec/Argonaut/Generic.purs","end":[32,67]}}]},{"reExports":[],"name":"Data.Codec.Argonaut.Migration","comments":null,"declarations":[{"children":[],"comments":"When dealing with a JSON object that may be missing a field, this codec\ncan be used to alter the JSON before parsing to ensure a default value is\npresent instead.\n","title":"addDefaultField","info":{"declType":"value","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Argonaut","Core"],"Json"]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Codec","Argonaut"],"JsonCodec"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Argonaut","Core"],"Json"]}]}]}]}},"sourceSpan":{"start":[22,1],"name":"/home/travis/build/garyb/purescript-codec-argonaut/src/Data/Codec/Argonaut/Migration.purs","end":[22,53]}},{"children":[],"comments":"Re-maps the value of a field in a JSON object.\n","title":"updateField","info":{"declType":"value","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Argonaut","Core"],"Json"]}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Argonaut","Core"],"Json"]}]}}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Codec","Argonaut"],"JsonCodec"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Argonaut","Core"],"Json"]}]}]}]}},"sourceSpan":{"start":[26,1],"name":"/home/travis/build/garyb/purescript-codec-argonaut/src/Data/Codec/Argonaut/Migration.purs","end":[26,60]}},{"children":[],"comments":"When dealing with a JSON object that may be missing a field, this codec\ncan be used to alter the JSON before parsing to ensure a default value is\npresent instead. Similar to `addDefaultField`, but allows existing values\nto be modified also.\n","title":"addDefaultOrUpdateField","info":{"declType":"value","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Argonaut","Core"],"Json"]}]}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Argonaut","Core"],"Json"]}]}}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Codec","Argonaut"],"JsonCodec"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Argonaut","Core"],"Json"]}]}]}]}},"sourceSpan":{"start":[33,1],"name":"/home/travis/build/garyb/purescript-codec-argonaut/src/Data/Codec/Argonaut/Migration.purs","end":[33,78]}},{"children":[],"comments":"When dealing with a JSON object that has had a field name changed, this\ncodec can be used to alter the JSON before parsing to ensure the new field\nname is used instead\n","title":"renameField","info":{"declType":"value","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Codec","Argonaut"],"JsonCodec"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Argonaut","Core"],"Json"]}]}]}]}},"sourceSpan":{"start":[39,1],"name":"/home/travis/build/garyb/purescript-codec-argonaut/src/Data/Codec/Argonaut/Migration.purs","end":[39,49]}},{"children":[],"comments":"Prepares an object from a legacy codec for use in a `Variant` or\n`taggedSum` codec.\n\nFor an input like:\n```{ \"tag\": \"tag\", \"x\": 1, \"y\": 2, \"z\": 3 }```\nthe result will be:\n```{ \"tag\": \"tag\", \"value\": { \"x\": 1, \"y\": 2, \"z\": 3 } }```\n\nFor an input like:\n```{ \"tag\": \"tag\", \"value\": 1, \"foo\": 2 }```\nthe result will be:\n```{ \"tag\": \"tag\", \"value\": { \"value\": 1, \"foo\": 2 }```\n\nIf the value is already in the expected form, where there is only `value`\nand no other keys (aside from `tag`):\n```{ \"tag\": \"tag\", \"value\": true }```\nthe result will be the same as the input.\n\nIf the tag field is missing from the input, it will also be missing in the\noutput.\n","title":"nestForTagged","info":{"declType":"value","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Codec","Argonaut"],"JsonCodec"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Argonaut","Core"],"Json"]}]}},"sourceSpan":{"start":[67,1],"name":"/home/travis/build/garyb/purescript-codec-argonaut/src/Data/Codec/Argonaut/Migration.purs","end":[67,33]}}]},{"reExports":[],"name":"Data.Codec.Argonaut.Record","comments":null,"declarations":[{"children":[{"comments":null,"title":"rowListCodec","info":{"declType":"typeClassMember","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Type","Data","RowList"],"RLProxy"]},{"annotation":[],"tag":"TypeVar","contents":"rl"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Record"]},{"annotation":[],"tag":"TypeVar","contents":"ri"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Codec","Argonaut"],"JPropCodec"]},{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Record"]},{"annotation":[],"tag":"TypeVar","contents":"ro"}]}}]}]}]}},"sourceSpan":{"start":[16,3],"name":"/home/travis/build/garyb/purescript-codec-argonaut/src/Data/Codec/Argonaut/Record.purs","end":[16,70]}},{"comments":null,"title":"rowListCodecNil","info":{"declType":"instance","dependencies":[],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Codec","Argonaut","Record"],"RowListCodec"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim","RowList"],"Nil"]}]},{"annotation":[],"tag":"REmpty"}]},{"annotation":[],"tag":"REmpty"}]}},"sourceSpan":{"start":[18,1],"name":"/home/travis/build/garyb/purescript-codec-argonaut/src/Data/Codec/Argonaut/Record.purs","end":[18,52]}},{"comments":null,"title":"rowListCodecCons","info":{"declType":"instance","dependencies":[{"constraintAnn":[],"constraintClass":[["Data","Codec","Argonaut","Record"],"RowListCodec"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"rs"},{"annotation":[],"tag":"TypeVar","contents":"ri'"},{"annotation":[],"tag":"TypeVar","contents":"ro'"}],"constraintData":null},{"constraintAnn":[],"constraintClass":[["Prim","Row"],"Cons"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"sym"},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Codec","Argonaut"],"JsonCodec"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]},{"annotation":[],"tag":"TypeVar","contents":"ri'"},{"annotation":[],"tag":"TypeVar","contents":"ri"}],"constraintData":null},{"constraintAnn":[],"constraintClass":[["Prim","Row"],"Cons"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"sym"},{"annotation":[],"tag":"TypeVar","contents":"a"},{"annotation":[],"tag":"TypeVar","contents":"ro'"},{"annotation":[],"tag":"TypeVar","contents":"ro"}],"constraintData":null},{"constraintAnn":[],"constraintClass":[["Data","Symbol"],"IsSymbol"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"sym"}],"constraintData":null},{"constraintAnn":[],"constraintClass":[["Type","Equality"],"TypeEquals"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"co"},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Codec","Argonaut"],"JsonCodec"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]}],"constraintData":null}],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Codec","Argonaut","Record"],"RowListCodec"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim","RowList"],"Cons"]},{"annotation":[],"tag":"TypeVar","contents":"sym"}]},{"annotation":[],"tag":"TypeVar","contents":"co"}]},{"annotation":[],"tag":"TypeVar","contents":"rs"}]}]},{"annotation":[],"tag":"TypeVar","contents":"ri"}]},{"annotation":[],"tag":"TypeVar","contents":"ro"}]}},"sourceSpan":{"start":[21,1],"name":"/home/travis/build/garyb/purescript-codec-argonaut/src/Data/Codec/Argonaut/Record.purs","end":[27,44]}}],"comments":null,"title":"RowListCodec","info":{"fundeps":[[["rl"],["ri","ro"]]],"arguments":[["rl",{"annotation":[],"tag":"NamedKind","contents":[["Prim","RowList"],"RowList"]}],["ri",{"annotation":[],"tag":"Row","contents":{"annotation":[],"tag":"NamedKind","contents":[["Prim"],"Type"]}}],["ro",{"annotation":[],"tag":"Row","contents":{"annotation":[],"tag":"NamedKind","contents":[["Prim"],"Type"]}}]],"declType":"typeClass","superclasses":[]},"sourceSpan":{"start":[15,1],"name":"/home/travis/build/garyb/purescript-codec-argonaut/src/Data/Codec/Argonaut/Record.purs","end":[16,70]}},{"children":[],"comments":"Constructs a record codec from a record of codecs.\n\n```purescript\ntype Person = { name ∷ String, age ∷ Int }\n\npersonCodec ∷ CA.JsonCodec Person\npersonCodec = CA.object \"Person\" (record { name: CA.string, age: CA.int })\n\ndecode personCodec \"{ name: \\\"Carl\\\", age:\\\"25\\\" }\" == Right { name: \"Carl\", age: 25 }\n```\n","title":"record","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["rl",{"annotation":[],"tag":"ForAll","contents":["ro",{"annotation":[],"tag":"ForAll","contents":["ri",{"annotation":[],"tag":"ConstrainedType","contents":[{"constraintAnn":[],"constraintClass":[["Prim","RowList"],"RowToList"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"ri"},{"annotation":[],"tag":"TypeVar","contents":"rl"}],"constraintData":null},{"annotation":[],"tag":"ConstrainedType","contents":[{"constraintAnn":[],"constraintClass":[["Data","Codec","Argonaut","Record"],"RowListCodec"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"rl"},{"annotation":[],"tag":"TypeVar","contents":"ri"},{"annotation":[],"tag":"TypeVar","contents":"ro"}],"constraintData":null},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Record"]},{"annotation":[],"tag":"TypeVar","contents":"ri"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Codec","Argonaut"],"JPropCodec"]},{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Record"]},{"annotation":[],"tag":"TypeVar","contents":"ro"}]}}]}]}]}]},null]},null]},null]}},"sourceSpan":{"start":[48,1],"name":"/home/travis/build/garyb/purescript-codec-argonaut/src/Data/Codec/Argonaut/Record.purs","end":[53,30]}}]},{"reExports":[],"name":"Data.Codec.Argonaut.Sum","comments":null,"declarations":[{"children":[],"comments":"A helper for defining JSON codecs for \"enum\" sum types, where every\nconstructor is nullary, and the type will be encoded as a string.\n","title":"enumSum","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["a",{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]}]}}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Codec","Argonaut"],"JsonCodec"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]}]}]},null]}},"sourceSpan":{"start":[23,1],"name":"/home/travis/build/garyb/purescript-codec-argonaut/src/Data/Codec/Argonaut/Sum.purs","end":[27,16]}},{"children":[],"comments":"A helper for defining JSON codecs for sum types. To ensure exhaustivity\nthere needs to be a mapping to and from a tag type for the type to be\nencoded.\n\n- The first argument is the name of the type being decoded, for error\n  message purposes.\n- The second argument maps a tag value to a string to use in the encoding.\n- The second argument maps a string back to a tag value during decoding.\n- The third argument returns either a constant value or a decoder function\n  based on a tag value.\n- The fourth argument returns a tag value and optional encoded value to\n  store for a constructor of the sum.\n","title":"taggedSum","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["a",{"annotation":[],"tag":"ForAll","contents":["tag",{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeVar","contents":"tag"}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"annotation":[],"tag":"TypeVar","contents":"tag"}]}]}}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeVar","contents":"tag"}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Either"],"Either"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]},{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Argonaut","Core"],"Json"]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Either"],"Either"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Codec","Argonaut"],"JsonDecodeError"]}]},{"annotation":[],"tag":"TypeVar","contents":"a"}]}]}}]}]}}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Tuple"],"Tuple"]},{"annotation":[],"tag":"TypeVar","contents":"tag"}]},{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Argonaut","Core"],"Json"]}]}}]}]}}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Codec","Argonaut"],"JsonCodec"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]}]}]}]}]}]},null]},null]}},"sourceSpan":{"start":[51,1],"name":"/home/travis/build/garyb/purescript-codec-argonaut/src/Data/Codec/Argonaut/Sum.purs","end":[58,16]}}]},{"reExports":[],"name":"Data.Codec.Argonaut.Variant","comments":null,"declarations":[{"children":[],"comments":"Allows building codecs for variants in combination with variantCase.\n\nCommonly used to write decoders for sum-types, by providing a mapping from\nand to a Variant from that type and then using `dimap`.\n\n```purescript\ncodecMaybe ∷ ∀ a. JA.JsonCodec a → JA.JsonCodec (Maybe a)\ncodecMaybe codecA =\n  dimap toVariant fromVariant\n    (JAV.variant\n      # JAV.variantCase _Just (Right codecA)\n      # JAV.variantCase _Nothing (Left unit))\n  where\n  toVariant = case _ of\n    Just a → V.inj _Just a\n    Nothing → V.inj _Nothing unit\n  fromVariant = V.case_\n    # V.on _Just Just\n    # V.on _Nothing (const Nothing)\n  _Just = SProxy ∷ SProxy \"just\"\n  _Nothing = SProxy ∷ SProxy \"nothing\"\n```\n","title":"variant","info":{"declType":"value","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Codec","Argonaut"],"JsonCodec"]},{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Variant"],"Variant"]},{"annotation":[],"tag":"REmpty"}]}}]}},"sourceSpan":{"start":[46,1],"name":"/home/travis/build/garyb/purescript-codec-argonaut/src/Data/Codec/Argonaut/Variant.purs","end":[46,33]}},{"children":[],"comments":null,"title":"variantCase","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["r'",{"annotation":[],"tag":"ForAll","contents":["r",{"annotation":[],"tag":"ForAll","contents":["a",{"annotation":[],"tag":"ForAll","contents":["l",{"annotation":[],"tag":"ConstrainedType","contents":[{"constraintAnn":[],"constraintClass":[["Data","Symbol"],"IsSymbol"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"l"}],"constraintData":null},{"annotation":[],"tag":"ConstrainedType","contents":[{"constraintAnn":[],"constraintClass":[["Prim","Row"],"Cons"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"l"},{"annotation":[],"tag":"TypeVar","contents":"a"},{"annotation":[],"tag":"TypeVar","contents":"r"},{"annotation":[],"tag":"TypeVar","contents":"r'"}],"constraintData":null},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Symbol"],"SProxy"]},{"annotation":[],"tag":"TypeVar","contents":"l"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Either"],"Either"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]},{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Codec","Argonaut"],"JsonCodec"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]}}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Codec","Argonaut"],"JsonCodec"]},{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Variant"],"Variant"]},{"annotation":[],"tag":"TypeVar","contents":"r"}]}}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Codec","Argonaut"],"JsonCodec"]},{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Variant"],"Variant"]},{"annotation":[],"tag":"TypeVar","contents":"r'"}]}}]}]}]}]}]}]},null]},null]},null]},null]}},"sourceSpan":{"start":[49,1],"name":"/home/travis/build/garyb/purescript-codec-argonaut/src/Data/Codec/Argonaut/Variant.purs","end":[56,27]}},{"children":[{"comments":null,"title":"variantCodec","info":{"declType":"typeClassMember","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Type","Data","RowList"],"RLProxy"]},{"annotation":[],"tag":"TypeVar","contents":"rl"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Record"]},{"annotation":[],"tag":"TypeVar","contents":"ri"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Codec","Argonaut"],"JsonCodec"]},{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Variant"],"Variant"]},{"annotation":[],"tag":"TypeVar","contents":"ro"}]}}]}]}]}},"sourceSpan":{"start":[88,3],"name":"/home/travis/build/garyb/purescript-codec-argonaut/src/Data/Codec/Argonaut/Variant.purs","end":[88,67]}},{"comments":null,"title":"variantCodecNil","info":{"declType":"instance","dependencies":[],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Codec","Argonaut","Variant"],"VariantCodec"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim","RowList"],"Nil"]}]},{"annotation":[],"tag":"REmpty"}]},{"annotation":[],"tag":"REmpty"}]}},"sourceSpan":{"start":[90,1],"name":"/home/travis/build/garyb/purescript-codec-argonaut/src/Data/Codec/Argonaut/Variant.purs","end":[90,52]}},{"comments":null,"title":"variantCodecCons","info":{"declType":"instance","dependencies":[{"constraintAnn":[],"constraintClass":[["Data","Codec","Argonaut","Variant"],"VariantCodec"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"rs"},{"annotation":[],"tag":"TypeVar","contents":"ri'"},{"annotation":[],"tag":"TypeVar","contents":"ro'"}],"constraintData":null},{"constraintAnn":[],"constraintClass":[["Prim","Row"],"Cons"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"sym"},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Either"],"Either"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Codec","Argonaut"],"JsonCodec"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]}]},{"annotation":[],"tag":"TypeVar","contents":"ri'"},{"annotation":[],"tag":"TypeVar","contents":"ri"}],"constraintData":null},{"constraintAnn":[],"constraintClass":[["Prim","Row"],"Cons"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"sym"},{"annotation":[],"tag":"TypeVar","contents":"a"},{"annotation":[],"tag":"TypeVar","contents":"ro'"},{"annotation":[],"tag":"TypeVar","contents":"ro"}],"constraintData":null},{"constraintAnn":[],"constraintClass":[["Data","Symbol"],"IsSymbol"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"sym"}],"constraintData":null},{"constraintAnn":[],"constraintClass":[["Type","Equality"],"TypeEquals"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"co"},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Either"],"Either"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Codec","Argonaut"],"JsonCodec"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]}]}],"constraintData":null}],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Codec","Argonaut","Variant"],"VariantCodec"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim","RowList"],"Cons"]},{"annotation":[],"tag":"TypeVar","contents":"sym"}]},{"annotation":[],"tag":"TypeVar","contents":"co"}]},{"annotation":[],"tag":"TypeVar","contents":"rs"}]}]},{"annotation":[],"tag":"TypeVar","contents":"ri"}]},{"annotation":[],"tag":"TypeVar","contents":"ro"}]}},"sourceSpan":{"start":[93,1],"name":"/home/travis/build/garyb/purescript-codec-argonaut/src/Data/Codec/Argonaut/Variant.purs","end":[99,44]}}],"comments":null,"title":"VariantCodec","info":{"fundeps":[[["rl"],["ri","ro"]]],"arguments":[["rl",{"annotation":[],"tag":"NamedKind","contents":[["Prim","RowList"],"RowList"]}],["ri",{"annotation":[],"tag":"Row","contents":{"annotation":[],"tag":"NamedKind","contents":[["Prim"],"Type"]}}],["ro",{"annotation":[],"tag":"Row","contents":{"annotation":[],"tag":"NamedKind","contents":[["Prim"],"Type"]}}]],"declType":"typeClass","superclasses":[]},"sourceSpan":{"start":[87,1],"name":"/home/travis/build/garyb/purescript-codec-argonaut/src/Data/Codec/Argonaut/Variant.purs","end":[88,67]}},{"children":[],"comments":null,"title":"variantMatch","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["ro",{"annotation":[],"tag":"ForAll","contents":["ri",{"annotation":[],"tag":"ForAll","contents":["rl",{"annotation":[],"tag":"ConstrainedType","contents":[{"constraintAnn":[],"constraintClass":[["Prim","RowList"],"RowToList"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"ri"},{"annotation":[],"tag":"TypeVar","contents":"rl"}],"constraintData":null},{"annotation":[],"tag":"ConstrainedType","contents":[{"constraintAnn":[],"constraintClass":[["Data","Codec","Argonaut","Variant"],"VariantCodec"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"rl"},{"annotation":[],"tag":"TypeVar","contents":"ri"},{"annotation":[],"tag":"TypeVar","contents":"ro"}],"constraintData":null},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Record"]},{"annotation":[],"tag":"TypeVar","contents":"ri"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Codec","Argonaut"],"JsonCodec"]},{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Variant"],"Variant"]},{"annotation":[],"tag":"TypeVar","contents":"ro"}]}}]}]}]}]},null]},null]},null]}},"sourceSpan":{"start":[109,1],"name":"/home/travis/build/garyb/purescript-codec-argonaut/src/Data/Codec/Argonaut/Variant.purs","end":[114,27]}}]}],"resolvedDependencies":{"purescript-proxy":"3.0.0","purescript-exceptions":"4.0.0","purescript-newtype":"3.0.0","purescript-effect":"2.0.1","purescript-ordered-collections":"1.6.0","purescript-control":"4.1.0","purescript-variant":"6.0.0","purescript-console":"4.2.0","purescript-either":"4.1.1","purescript-profunctor":"4.0.0","purescript-arrays":"5.2.0","purescript-maybe":"4.0.1","purescript-type-equality":"3.0.0","purescript-exists":"4.0.0","purescript-distributive":"4.0.0","purescript-unfoldable":"4.0.0","purescript-invariant":"4.1.0","purescript-lcg":"2.0.0","purescript-argonaut-core":"5.0.0","purescript-lazy":"4.0.0","purescript-foreign-object":"2.0.1","purescript-codec":"3.0.0","purescript-foldable-traversable":"4.1.1","purescript-tailrec":"4.0.0","purescript-gen":"2.1.0","purescript-typelevel-prelude":"4.0.0","purescript-prelude":"4.1.0","purescript-st":"4.0.0","purescript-bifunctors":"4.0.0","purescript-nonempty":"5.0.0","purescript-contravariant":"4.0.0","purescript-unsafe-coerce":"4.0.0","purescript-refs":"4.1.0","purescript-integers":"4.0.0","purescript-argonaut-codecs":"6.0.0","purescript-orders":"4.0.0","purescript-record":"2.0.0","purescript-transformers":"4.2.0","purescript-globals":"4.0.0","purescript-generics-rep":"6.1.1","purescript-math":"2.1.1","purescript-enums":"4.0.1","purescript-random":"4.0.0","purescript-tuples":"5.1.0","purescript-partial":"2.0.1","purescript-quickcheck":"6.1.0","purescript-strings":"4.0.1","purescript-identity":"4.1.0","purescript-lists":"5.4.0","purescript-functions":"4.0.0"},"version":"7.0.0","github":["garyb","purescript-codec-argonaut"],"versionTag":"v7.0.0","moduleMap":{"Data.BooleanAlgebra":"purescript-prelude","Data.Decide":"purescript-contravariant","Type.Data.Boolean":"purescript-typelevel-prelude","Data.Ring":"purescript-prelude","Record.ST":"purescript-record","Control.Monad.Trans.Class":"purescript-transformers","Record.Unsafe.Union":"purescript-record","Data.NonEmpty":"purescript-nonempty","Effect.Uncurried":"purescript-effect","Data.Char.Gen":"purescript-strings","Data.String.NonEmpty":"purescript-strings","Effect":"purescript-effect","Data.Traversable.Accum.Internal":"purescript-foldable-traversable","Data.Enum.Gen":"purescript-enums","Control.Comonad.Env":"purescript-transformers","Control.Comonad.Traced.Class":"purescript-transformers","Foreign.Object.Gen":"purescript-foreign-object","Type.Row.Homogeneous":"purescript-typelevel-prelude","Data.Int.Bits":"purescript-integers","Data.Bifunctor.Flip":"purescript-bifunctors","Data.String.CodePoints":"purescript-strings","Data.Ord":"purescript-prelude","Control.Monad.Gen":"purescript-gen","Type.Data.Row":"purescript-prelude","Data.Argonaut.Parser":"purescript-argonaut-core","Data.Argonaut.Encode.Combinators":"purescript-argonaut-codecs","Data.Monoid.Dual":"purescript-prelude","Data.Generic.Rep.Ring":"purescript-generics-rep","Control.Monad.Rec.Class":"purescript-tailrec","Data.Bitraversable":"purescript-foldable-traversable","Data.Profunctor.Costar":"purescript-profunctor","Data.Profunctor.Cowrap":"purescript-profunctor","Record.Builder":"purescript-record","Data.Boolean":"purescript-prelude","Data.Map":"purescript-ordered-collections","Control.Biapplicative":"purescript-bifunctors","Effect.Exception.Unsafe":"purescript-exceptions","Data.Array.NonEmpty.Internal":"purescript-arrays","Type.Proxy":"purescript-proxy","Data.Array.ST.Iterator":"purescript-arrays","Data.String.Pattern":"purescript-strings","Data.Bounded":"purescript-prelude","Control.Monad.State.Trans":"purescript-transformers","Data.TraversableWithIndex":"purescript-foldable-traversable","Data.Int":"purescript-integers","Data.Profunctor.Cochoice":"purescript-profunctor","Data.Show":"purescript-prelude","Random.LCG":"purescript-lcg","Data.Bifunctor.Clown":"purescript-bifunctors","Control.Monad.Writer.Trans":"purescript-transformers","Data.Foldable":"purescript-foldable-traversable","Data.Divide":"purescript-contravariant","Control.Comonad.Store.Class":"purescript-transformers","Data.Enum":"purescript-enums","Foreign.Object":"purescript-foreign-object","Control.Apply":"purescript-prelude","Data.Functor.Contravariant":"purescript-contravariant","Data.Tuple.Nested":"purescript-tuples","Data.Generic.Rep.Semigroup":"purescript-generics-rep","Control.Monad":"purescript-prelude","Data.Lazy":"purescript-lazy","Data.Monoid":"purescript-prelude","Data.Profunctor.Closed":"purescript-profunctor","Control.Monad.List.Trans":"purescript-transformers","Control.Monad.RWS":"purescript-transformers","Data.String.Common":"purescript-strings","Data.Maybe.First":"purescript-maybe","Control.Bind":"purescript-prelude","Data.Profunctor.Split":"purescript-profunctor","Data.Monoid.Additive":"purescript-prelude","Data.Symbol":"purescript-prelude","Data.Map.Gen":"purescript-ordered-collections","Data.String.Regex":"purescript-strings","Data.Profunctor.Join":"purescript-profunctor","Data.HeytingAlgebra":"purescript-prelude","Control.Alt":"purescript-control","Control.Monad.Maybe.Trans":"purescript-transformers","Control.Monad.Cont":"purescript-transformers","Control.Monad.ST.Internal":"purescript-st","Data.Codec":"purescript-codec","Type.Data.RowList":"purescript-prelude","Effect.Ref":"purescript-refs","Data.Either.Inject":"purescript-either","Foreign.Object.ST.Unsafe":"purescript-foreign-object","Data.List.ZipList":"purescript-lists","Data.Ord.Min":"purescript-orders","Data.Ord.Unsafe":"purescript-prelude","Data.Semigroup":"purescript-prelude","Data.Array.NonEmpty":"purescript-arrays","Control.Monad.Reader":"purescript-transformers","Data.Generic.Rep.Enum":"purescript-generics-rep","Data.Generic.Rep.Bounded":"purescript-generics-rep","Control.Comonad.Traced.Trans":"purescript-transformers","Data.Argonaut.Encode.Class":"purescript-argonaut-codecs","Data.Ord.Down":"purescript-orders","Data.Array.ST.Partial":"purescript-arrays","Data.Generic.Rep.Show":"purescript-generics-rep","Effect.Unsafe":"purescript-effect","Data.Profunctor.Clown":"purescript-profunctor","Type.Data.Ordering":"purescript-typelevel-prelude","Data.Tuple":"purescript-tuples","Data.Semigroup.Foldable":"purescript-foldable-traversable","Control.Biapply":"purescript-bifunctors","Data.Distributive":"purescript-distributive","Effect.Exception":"purescript-exceptions","Type.Equality":"purescript-type-equality","Control.Alternative":"purescript-control","Data.Semiring":"purescript-prelude","Data.Exists":"purescript-exists","Effect.Console":"purescript-console","Data.Traversable.Accum":"purescript-foldable-traversable","Data.CommutativeRing":"purescript-prelude","Data.NaturalTransformation":"purescript-prelude","Data.Monoid.Conj":"purescript-prelude","Data.Profunctor.Star":"purescript-profunctor","Data.Unfoldable":"purescript-unfoldable","Data.Profunctor.Wrap":"purescript-profunctor","Control.Comonad.Store.Trans":"purescript-transformers","Foreign.Object.Unsafe":"purescript-foreign-object","Control.Monad.ST":"purescript-st","Control.Monad.State.Class":"purescript-transformers","Data.Argonaut.Decode":"purescript-argonaut-codecs","Data.List.Types":"purescript-lists","Data.String.NonEmpty.CodeUnits":"purescript-strings","Data.Functor":"purescript-prelude","Unsafe.Coerce":"purescript-unsafe-coerce","Control.Monad.Writer.Class":"purescript-transformers","Data.Generic.Rep.Ord":"purescript-generics-rep","Data.Profunctor.Strong":"purescript-profunctor","Control.Monad.Except":"purescript-transformers","Data.List.Lazy.Types":"purescript-lists","Control.Category":"purescript-prelude","Test.QuickCheck.Arbitrary":"purescript-quickcheck","Control.Monad.Gen.Common":"purescript-gen","Control.Monad.RWS.Trans":"purescript-transformers","Control.Monad.Cont.Trans":"purescript-transformers","Data.Maybe":"purescript-maybe","Type.Row":"purescript-typelevel-prelude","Data.String.Regex.Unsafe":"purescript-strings","Foreign.Object.ST":"purescript-foreign-object","Data.Set":"purescript-ordered-collections","Data.Profunctor":"purescript-profunctor","Control.Comonad":"purescript-control","Data.Function":"purescript-prelude","Data.List":"purescript-lists","Data.Field":"purescript-prelude","Data.List.Lazy":"purescript-lists","Data.Generic.Rep.Eq":"purescript-generics-rep","Data.EuclideanRing":"purescript-prelude","Data.Semigroup.Last":"purescript-prelude","Data.Semigroup.First":"purescript-prelude","Data.Functor.Invariant":"purescript-invariant","Control.Comonad.Traced":"purescript-transformers","Global.Unsafe":"purescript-globals","Data.Comparison":"purescript-contravariant","Data.String.Unsafe":"purescript-strings","Prelude":"purescript-prelude","Effect.Class":"purescript-effect","Data.Predicate":"purescript-contravariant","Partial.Unsafe":"purescript-partial","Data.Array":"purescript-arrays","Data.Bifunctor.Product":"purescript-bifunctors","Control.Extend":"purescript-control","Data.Unfoldable1":"purescript-unfoldable","Control.Lazy":"purescript-control","Data.Function.Uncurried":"purescript-functions","Control.Monad.Reader.Trans":"purescript-transformers","Control.Comonad.Env.Class":"purescript-transformers","Data.Eq":"purescript-prelude","Data.Either.Nested":"purescript-either","Data.Newtype":"purescript-newtype","Data.Semigroup.Traversable":"purescript-foldable-traversable","Data.Bifunctor":"purescript-bifunctors","Effect.Random":"purescript-random","Data.Monoid.Disj":"purescript-prelude","Control.Monad.Gen.Class":"purescript-gen","Data.Array.Partial":"purescript-arrays","Data.String.CaseInsensitive":"purescript-strings","Control.MonadPlus":"purescript-control","Data.Void":"purescript-prelude","Control.MonadZero":"purescript-control","Data.Profunctor.Costrong":"purescript-profunctor","Data.Ord.Max":"purescript-orders","Control.Comonad.Store":"purescript-transformers","Control.Monad.Except.Trans":"purescript-transformers","Data.String.CodeUnits":"purescript-strings","Data.Bifunctor.Joker":"purescript-bifunctors","Data.FunctorWithIndex":"purescript-foldable-traversable","Data.Divisible":"purescript-contravariant","Data.DivisionRing":"purescript-prelude","Record":"purescript-record","Data.Bifunctor.Wrap":"purescript-bifunctors","Data.Equivalence":"purescript-contravariant","Data.Maybe.Last":"purescript-maybe","Data.Unit":"purescript-prelude","Data.List.NonEmpty":"purescript-lists","Data.Generic.Rep.Semiring":"purescript-generics-rep","Data.List.Lazy.NonEmpty":"purescript-lists","Data.Ordering":"purescript-prelude","Data.Functor.Variant":"purescript-variant","Data.Variant.Internal":"purescript-variant","Control.Monad.Cont.Class":"purescript-transformers","Data.Argonaut.Decode.Combinators":"purescript-argonaut-codecs","Data.Identity":"purescript-identity","Math":"purescript-math","Data.Set.NonEmpty":"purescript-ordered-collections","Control.Comonad.Trans.Class":"purescript-transformers","Data.String":"purescript-strings","Control.Plus":"purescript-control","Data.Profunctor.Joker":"purescript-profunctor","Data.Argonaut.Encode":"purescript-argonaut-codecs","Test.QuickCheck":"purescript-quickcheck","Data.Map.Internal":"purescript-ordered-collections","Partial":"purescript-partial","Control.Comonad.Env.Trans":"purescript-transformers","Global":"purescript-globals","Control.Monad.Reader.Class":"purescript-transformers","Data.String.NonEmpty.CodePoints":"purescript-strings","Data.Decidable":"purescript-contravariant","Data.String.NonEmpty.Internal":"purescript-strings","Data.Monoid.Multiplicative":"purescript-prelude","Data.String.NonEmpty.CaseInsensitive":"purescript-strings","Type.Data.Symbol":"purescript-typelevel-prelude","Data.Array.ST":"purescript-arrays","Control.Monad.Error.Class":"purescript-transformers","Data.Argonaut.Core":"purescript-argonaut-core","Data.Generic.Rep.HeytingAlgebra":"purescript-generics-rep","Data.Generic.Rep.Monoid":"purescript-generics-rep","Control.Semigroupoid":"purescript-prelude","Data.Monoid.Alternate":"purescript-control","Data.Char":"purescript-strings","Data.Generic.Rep":"purescript-generics-rep","Effect.Class.Console":"purescript-console","Data.Bifunctor.Join":"purescript-bifunctors","Data.Bifoldable":"purescript-foldable-traversable","Control.Monad.ST.Ref":"purescript-st","Data.Monoid.Endo":"purescript-prelude","Control.Monad.State":"purescript-transformers","Data.List.Partial":"purescript-lists","Data.String.Regex.Flags":"purescript-strings","Data.Argonaut.Decode.Class":"purescript-argonaut-codecs","Data.Either":"purescript-either","Type.Prelude":"purescript-typelevel-prelude","Control.Applicative":"purescript-prelude","Data.FoldableWithIndex":"purescript-foldable-traversable","Data.Op":"purescript-contravariant","Data.Variant":"purescript-variant","Record.Unsafe":"purescript-prelude","Test.QuickCheck.Gen":"purescript-quickcheck","Control.Monad.Writer":"purescript-transformers","Data.Argonaut.Gen":"purescript-argonaut-core","Data.Profunctor.Choice":"purescript-profunctor","Data.Traversable":"purescript-foldable-traversable","Data.String.Gen":"purescript-strings"},"compilerVersion":"0.12.2"}