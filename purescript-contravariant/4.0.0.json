{"uploader":"garyb","packageMeta":{"homepage":"https://github.com/purescript/purescript-contravariant","repository":{"url":"git://github.com/purescript/purescript-contravariant.git","type":"git"},"ignore":["**/.*","bower_components","node_modules","output","test","bower.json","package.json"],"dependencies":{"purescript-newtype":"^3.0.0","purescript-either":"^4.0.0","purescript-prelude":"^4.0.0","purescript-tuples":"^5.0.0"},"name":"purescript-contravariant","license":["BSD-3-Clause"]},"tagTime":"2018-05-23T14:56:18+0000","modules":[{"reExports":[],"name":"Data.Comparison","comments":null,"declarations":[{"children":[{"comments":null,"title":"Comparison","info":{"arguments":[{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeConstructor","contents":[["Data","Ordering"],"Ordering"]}]}]}}],"declType":"dataConstructor"},"sourceSpan":null},{"comments":null,"title":"newtypeComparison","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Newtype"],"Newtype"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Comparison"],"Comparison"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeWildcard","contents":{"start":[13,61],"name":"/home/travis/build/purescript/purescript-contravariant/src/Data/Comparison.purs","end":[13,62]}}]}},"sourceSpan":{"start":[13,8],"name":"/home/travis/build/purescript/purescript-contravariant/src/Data/Comparison.purs","end":[13,62]}},{"comments":null,"title":"contravariantComparison","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Functor","Contravariant"],"Contravariant"]},{"tag":"TypeConstructor","contents":[["Data","Comparison"],"Comparison"]}]}},"sourceSpan":{"start":[15,1],"name":"/home/travis/build/purescript/purescript-contravariant/src/Data/Comparison.purs","end":[15,61]}},{"comments":null,"title":"semigroupComparison","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Semigroup"],"Semigroup"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Comparison"],"Comparison"]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[18,1],"name":"/home/travis/build/purescript/purescript-contravariant/src/Data/Comparison.purs","end":[18,57]}},{"comments":null,"title":"monoidComparison","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Monoid"],"Monoid"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Comparison"],"Comparison"]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[21,1],"name":"/home/travis/build/purescript/purescript-contravariant/src/Data/Comparison.purs","end":[21,51]}}],"comments":"An adaptor allowing `>$<` to map over the inputs of a comparison function.\n","title":"Comparison","info":{"declType":"data","dataDeclType":"newtype","typeArguments":[["a",null]]},"sourceSpan":{"start":[11,1],"name":"/home/travis/build/purescript/purescript-contravariant/src/Data/Comparison.purs","end":[11,55]}},{"children":[],"comments":"The default comparison for any values with an `Ord` instance.\n","title":"defaultComparison","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Ord"],"Ord"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Comparison"],"Comparison"]},{"tag":"TypeVar","contents":"a"}]}]},null]}},"sourceSpan":{"start":[25,1],"name":"/home/travis/build/purescript/purescript-contravariant/src/Data/Comparison.purs","end":[25,53]}}]},{"reExports":[],"name":"Data.Decidable","comments":null,"declarations":[{"children":[{"comments":null,"title":"lose","info":{"declType":"typeClassMember","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeConstructor","contents":[["Data","Void"],"Void"]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}]},null]}},"sourceSpan":{"start":[14,3],"name":"/home/travis/build/purescript/purescript-contravariant/src/Data/Decidable.purs","end":[14,39]}},{"comments":null,"title":"decidableComparison","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Decidable"],"Decidable"]},{"tag":"TypeConstructor","contents":[["Data","Comparison"],"Comparison"]}]}},"sourceSpan":{"start":[16,1],"name":"/home/travis/build/purescript/purescript-contravariant/src/Data/Decidable.purs","end":[16,53]}},{"comments":null,"title":"decidableEquivalence","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Decidable"],"Decidable"]},{"tag":"TypeConstructor","contents":[["Data","Equivalence"],"Equivalence"]}]}},"sourceSpan":{"start":[19,1],"name":"/home/travis/build/purescript/purescript-contravariant/src/Data/Decidable.purs","end":[19,55]}},{"comments":null,"title":"decidablePredicate","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Decidable"],"Decidable"]},{"tag":"TypeConstructor","contents":[["Data","Predicate"],"Predicate"]}]}},"sourceSpan":{"start":[22,1],"name":"/home/travis/build/purescript/purescript-contravariant/src/Data/Decidable.purs","end":[22,51]}},{"comments":null,"title":"decidableOp","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","Monoid"],"Monoid"],"constraintArgs":[{"tag":"TypeVar","contents":"r"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Decidable"],"Decidable"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Op"],"Op"]},{"tag":"TypeVar","contents":"r"}]}]}},"sourceSpan":{"start":[25,1],"name":"/home/travis/build/purescript/purescript-contravariant/src/Data/Decidable.purs","end":[25,53]}}],"comments":"`Decidable` is the contravariant analogue of `Alternative`.\n","title":"Decidable","info":{"fundeps":[],"arguments":[["f",null]],"declType":"typeClass","superclasses":[{"constraintClass":[["Data","Decide"],"Decide"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}],"constraintData":null},{"constraintClass":[["Data","Divisible"],"Divisible"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}],"constraintData":null}]},"sourceSpan":{"start":[13,1],"name":"/home/travis/build/purescript/purescript-contravariant/src/Data/Decidable.purs","end":[14,39]}},{"children":[],"comments":null,"title":"lost","info":{"declType":"value","type":{"tag":"ForAll","contents":["f",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Decidable"],"Decidable"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeConstructor","contents":[["Data","Void"],"Void"]}]}]},null]}},"sourceSpan":{"start":[28,1],"name":"/home/travis/build/purescript/purescript-contravariant/src/Data/Decidable.purs","end":[28,40]}}]},{"reExports":[],"name":"Data.Decide","comments":null,"declarations":[{"children":[{"comments":null,"title":"choose","info":{"declType":"typeClassMember","type":{"tag":"ForAll","contents":["c",{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Either"],"Either"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeVar","contents":"c"}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"c"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}]}]}]},null]},null]},null]}},"sourceSpan":{"start":[14,3],"name":"/home/travis/build/purescript/purescript-contravariant/src/Data/Decide.purs","end":[14,65]}},{"comments":null,"title":"chooseComparison","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Decide"],"Decide"]},{"tag":"TypeConstructor","contents":[["Data","Comparison"],"Comparison"]}]}},"sourceSpan":{"start":[16,1],"name":"/home/travis/build/purescript/purescript-contravariant/src/Data/Decide.purs","end":[16,47]}},{"comments":null,"title":"chooseEquivalence","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Decide"],"Decide"]},{"tag":"TypeConstructor","contents":[["Data","Equivalence"],"Equivalence"]}]}},"sourceSpan":{"start":[25,1],"name":"/home/travis/build/purescript/purescript-contravariant/src/Data/Decide.purs","end":[25,49]}},{"comments":null,"title":"choosePredicate","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Decide"],"Decide"]},{"tag":"TypeConstructor","contents":[["Data","Predicate"],"Predicate"]}]}},"sourceSpan":{"start":[34,1],"name":"/home/travis/build/purescript/purescript-contravariant/src/Data/Decide.purs","end":[34,45]}},{"comments":null,"title":"chooseOp","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","Semigroup"],"Semigroup"],"constraintArgs":[{"tag":"TypeVar","contents":"r"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Decide"],"Decide"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Op"],"Op"]},{"tag":"TypeVar","contents":"r"}]}]}},"sourceSpan":{"start":[37,1],"name":"/home/travis/build/purescript/purescript-contravariant/src/Data/Decide.purs","end":[37,50]}}],"comments":"`Decide` is the contravariant analogue of `Alt`.\n","title":"Decide","info":{"fundeps":[],"arguments":[["f",null]],"declType":"typeClass","superclasses":[{"constraintClass":[["Data","Divide"],"Divide"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}],"constraintData":null}]},"sourceSpan":{"start":[13,1],"name":"/home/travis/build/purescript/purescript-contravariant/src/Data/Decide.purs","end":[14,65]}},{"children":[],"comments":"`chosen = choose id`\n","title":"chosen","info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["f",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Decide"],"Decide"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Either"],"Either"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}]}]}]},null]},null]},null]}},"sourceSpan":{"start":[41,1],"name":"/home/travis/build/purescript/purescript-contravariant/src/Data/Decide.purs","end":[41,65]}}]},{"reExports":[],"name":"Data.Divide","comments":null,"declarations":[{"children":[{"comments":null,"title":"divide","info":{"declType":"typeClassMember","type":{"tag":"ForAll","contents":["c",{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Tuple"],"Tuple"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeVar","contents":"c"}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"c"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}]}]}]},null]},null]},null]}},"sourceSpan":{"start":[24,3],"name":"/home/travis/build/purescript/purescript-contravariant/src/Data/Divide.purs","end":[24,64]}},{"comments":null,"title":"divideComparison","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Divide"],"Divide"]},{"tag":"TypeConstructor","contents":[["Data","Comparison"],"Comparison"]}]}},"sourceSpan":{"start":[26,1],"name":"/home/travis/build/purescript/purescript-contravariant/src/Data/Divide.purs","end":[26,47]}},{"comments":null,"title":"divideEquivalence","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Divide"],"Divide"]},{"tag":"TypeConstructor","contents":[["Data","Equivalence"],"Equivalence"]}]}},"sourceSpan":{"start":[31,1],"name":"/home/travis/build/purescript/purescript-contravariant/src/Data/Divide.purs","end":[31,49]}},{"comments":null,"title":"dividePredicate","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Divide"],"Divide"]},{"tag":"TypeConstructor","contents":[["Data","Predicate"],"Predicate"]}]}},"sourceSpan":{"start":[36,1],"name":"/home/travis/build/purescript/purescript-contravariant/src/Data/Divide.purs","end":[36,45]}},{"comments":null,"title":"divideOp","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","Semigroup"],"Semigroup"],"constraintArgs":[{"tag":"TypeVar","contents":"r"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Divide"],"Divide"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Op"],"Op"]},{"tag":"TypeVar","contents":"r"}]}]}},"sourceSpan":{"start":[40,1],"name":"/home/travis/build/purescript/purescript-contravariant/src/Data/Divide.purs","end":[40,50]}}],"comments":"`Divide` is the contravariant analogue of `Apply`.\n\nFor example, to test equality of `Point`s, we can use the `Divide` instance\nfor `Equivalence`:\n\n```purescript\ntype Point = Tuple Int Int\n\npointEquiv :: Equivalence Point\npointEquiv = divided defaultEquivalence defaultEquivalence\n```\n","title":"Divide","info":{"fundeps":[],"arguments":[["f",null]],"declType":"typeClass","superclasses":[{"constraintClass":[["Data","Functor","Contravariant"],"Contravariant"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}],"constraintData":null}]},"sourceSpan":{"start":[23,1],"name":"/home/travis/build/purescript/purescript-contravariant/src/Data/Divide.purs","end":[24,64]}},{"children":[],"comments":"`divided = divide id`\n","title":"divided","info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["f",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Divide"],"Divide"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Tuple"],"Tuple"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}]}]}]},null]},null]},null]}},"sourceSpan":{"start":[45,1],"name":"/home/travis/build/purescript/purescript-contravariant/src/Data/Divide.purs","end":[45,65]}}]},{"reExports":[],"name":"Data.Divisible","comments":null,"declarations":[{"children":[{"comments":null,"title":"conquer","info":{"declType":"typeClassMember","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]},null]}},"sourceSpan":{"start":[13,3],"name":"/home/travis/build/purescript/purescript-contravariant/src/Data/Divisible.purs","end":[13,27]}},{"comments":null,"title":"divisibleComparison","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Divisible"],"Divisible"]},{"tag":"TypeConstructor","contents":[["Data","Comparison"],"Comparison"]}]}},"sourceSpan":{"start":[15,1],"name":"/home/travis/build/purescript/purescript-contravariant/src/Data/Divisible.purs","end":[15,53]}},{"comments":null,"title":"divisibleEquivalence","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Divisible"],"Divisible"]},{"tag":"TypeConstructor","contents":[["Data","Equivalence"],"Equivalence"]}]}},"sourceSpan":{"start":[18,1],"name":"/home/travis/build/purescript/purescript-contravariant/src/Data/Divisible.purs","end":[18,55]}},{"comments":null,"title":"divisiblePredicate","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Divisible"],"Divisible"]},{"tag":"TypeConstructor","contents":[["Data","Predicate"],"Predicate"]}]}},"sourceSpan":{"start":[21,1],"name":"/home/travis/build/purescript/purescript-contravariant/src/Data/Divisible.purs","end":[21,51]}},{"comments":null,"title":"divisibleOp","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","Monoid"],"Monoid"],"constraintArgs":[{"tag":"TypeVar","contents":"r"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Divisible"],"Divisible"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Op"],"Op"]},{"tag":"TypeVar","contents":"r"}]}]}},"sourceSpan":{"start":[24,1],"name":"/home/travis/build/purescript/purescript-contravariant/src/Data/Divisible.purs","end":[24,55]}}],"comments":"`Divisible` is the contravariant analogue of `Applicative`.\n","title":"Divisible","info":{"fundeps":[],"arguments":[["f",null]],"declType":"typeClass","superclasses":[{"constraintClass":[["Data","Divide"],"Divide"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}],"constraintData":null}]},"sourceSpan":{"start":[12,1],"name":"/home/travis/build/purescript/purescript-contravariant/src/Data/Divisible.purs","end":[13,27]}}]},{"reExports":[],"name":"Data.Equivalence","comments":null,"declarations":[{"children":[{"comments":null,"title":"Equivalence","info":{"arguments":[{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}]}}],"declType":"dataConstructor"},"sourceSpan":null},{"comments":null,"title":"newtypeEquivalence","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Newtype"],"Newtype"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Equivalence"],"Equivalence"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeWildcard","contents":{"start":[14,63],"name":"/home/travis/build/purescript/purescript-contravariant/src/Data/Equivalence.purs","end":[14,64]}}]}},"sourceSpan":{"start":[14,8],"name":"/home/travis/build/purescript/purescript-contravariant/src/Data/Equivalence.purs","end":[14,64]}},{"comments":null,"title":"contravariantEquivalence","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Functor","Contravariant"],"Contravariant"]},{"tag":"TypeConstructor","contents":[["Data","Equivalence"],"Equivalence"]}]}},"sourceSpan":{"start":[16,1],"name":"/home/travis/build/purescript/purescript-contravariant/src/Data/Equivalence.purs","end":[16,63]}},{"comments":null,"title":"semigroupEquivalence","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Semigroup"],"Semigroup"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Equivalence"],"Equivalence"]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[19,1],"name":"/home/travis/build/purescript/purescript-contravariant/src/Data/Equivalence.purs","end":[19,59]}},{"comments":null,"title":"monoidEquivalence","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Monoid"],"Monoid"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Equivalence"],"Equivalence"]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[22,1],"name":"/home/travis/build/purescript/purescript-contravariant/src/Data/Equivalence.purs","end":[22,53]}}],"comments":"An adaptor allowing `>$<` to map over the inputs of an equivalence\nrelation.\n","title":"Equivalence","info":{"declType":"data","dataDeclType":"newtype","typeArguments":[["a",null]]},"sourceSpan":{"start":[12,1],"name":"/home/travis/build/purescript/purescript-contravariant/src/Data/Equivalence.purs","end":[12,56]}},{"children":[],"comments":"The default equivalence relation for any values with an `Eq` instance.\n","title":"defaultEquivalence","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Eq"],"Eq"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Equivalence"],"Equivalence"]},{"tag":"TypeVar","contents":"a"}]}]},null]}},"sourceSpan":{"start":[26,1],"name":"/home/travis/build/purescript/purescript-contravariant/src/Data/Equivalence.purs","end":[26,54]}},{"children":[],"comments":"An equivalence relation for any `Comparison`.\n","title":"comparisonEquivalence","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Comparison"],"Comparison"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Equivalence"],"Equivalence"]},{"tag":"TypeVar","contents":"a"}]}]},null]}},"sourceSpan":{"start":[30,1],"name":"/home/travis/build/purescript/purescript-contravariant/src/Data/Equivalence.purs","end":[30,65]}}]},{"reExports":[],"name":"Data.Functor.Contravariant","comments":null,"declarations":[{"children":[{"comments":null,"title":"cmap","info":{"declType":"typeClassMember","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeVar","contents":"a"}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"b"}]}]}]},null]},null]}},"sourceSpan":{"start":[15,3],"name":"/home/travis/build/purescript/purescript-contravariant/src/Data/Functor/Contravariant.purs","end":[15,45]}}],"comments":"A `Contravariant` functor can be seen as a way of changing the input type\nof a consumer of input, in contrast to the standard covariant `Functor`\nthat can be seen as a way of changing the output type of a producer of\noutput.\n\n`Contravariant` instances should satisfy the following laws:\n\n- Identity `cmap id = id`\n- Composition `cmap f <<< cmap g = cmap (g <<< f)`\n","title":"Contravariant","info":{"fundeps":[],"arguments":[["f",null]],"declType":"typeClass","superclasses":[]},"sourceSpan":{"start":[14,1],"name":"/home/travis/build/purescript/purescript-contravariant/src/Data/Functor/Contravariant.purs","end":[15,45]}},{"children":[],"comments":null,"title":"(>$<)","info":{"declType":"alias","alias":[["Data","Functor","Contravariant"],{"Right":{"Left":{"Ident":"cmap"}}}],"fixity":{"associativity":"infixl","precedence":4}},"sourceSpan":{"start":[17,1],"name":"/home/travis/build/purescript/purescript-contravariant/src/Data/Functor/Contravariant.purs","end":[17,21]}},{"children":[],"comments":"`cmapFlipped` is `cmap` with its arguments reversed.\n","title":"cmapFlipped","info":{"declType":"value","type":{"tag":"ForAll","contents":["f",{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Functor","Contravariant"],"Contravariant"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeVar","contents":"a"}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"b"}]}]}]}]},null]},null]},null]}},"sourceSpan":{"start":[20,1],"name":"/home/travis/build/purescript/purescript-contravariant/src/Data/Functor/Contravariant.purs","end":[20,71]}},{"children":[],"comments":null,"title":"(>#<)","info":{"declType":"alias","alias":[["Data","Functor","Contravariant"],{"Right":{"Left":{"Ident":"cmapFlipped"}}}],"fixity":{"associativity":"infixl","precedence":4}},"sourceSpan":{"start":[23,1],"name":"/home/travis/build/purescript/purescript-contravariant/src/Data/Functor/Contravariant.purs","end":[23,28]}},{"children":[],"comments":null,"title":"coerce","info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["f",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Functor","Contravariant"],"Contravariant"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}],"constraintData":null},{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Functor"],"Functor"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"b"}]}]}]}]},null]},null]},null]}},"sourceSpan":{"start":[25,1],"name":"/home/travis/build/purescript/purescript-contravariant/src/Data/Functor/Contravariant.purs","end":[25,67]}},{"children":[],"comments":"As all `Contravariant` functors are also trivially `Invariant`, this function can be used as the `imap` implementation for any types that have an existing `Contravariant` instance.\n","title":"imapC","info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["f",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Functor","Contravariant"],"Contravariant"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeVar","contents":"a"}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"b"}]}]}]}]}]},null]},null]},null]}},"sourceSpan":{"start":[29,1],"name":"/home/travis/build/purescript/purescript-contravariant/src/Data/Functor/Contravariant.purs","end":[29,77]}}]},{"reExports":[],"name":"Data.Op","comments":null,"declarations":[{"children":[{"comments":null,"title":"Op","info":{"arguments":[{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeVar","contents":"a"}]}}],"declType":"dataConstructor"},"sourceSpan":null},{"comments":null,"title":"newtypeOp","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Newtype"],"Newtype"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Op"],"Op"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeWildcard","contents":{"start":[11,47],"name":"/home/travis/build/purescript/purescript-contravariant/src/Data/Op.purs","end":[11,48]}}]}},"sourceSpan":{"start":[11,8],"name":"/home/travis/build/purescript/purescript-contravariant/src/Data/Op.purs","end":[11,48]}},{"comments":null,"title":"semigroupOp","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","Semigroup"],"Semigroup"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Semigroup"],"Semigroup"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Op"],"Op"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]}},"sourceSpan":{"start":[12,16],"name":"/home/travis/build/purescript/purescript-contravariant/src/Data/Op.purs","end":[12,72]}},{"comments":null,"title":"monoidOp","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","Monoid"],"Monoid"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Monoid"],"Monoid"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Op"],"Op"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]}},"sourceSpan":{"start":[13,16],"name":"/home/travis/build/purescript/purescript-contravariant/src/Data/Op.purs","end":[13,64]}},{"comments":null,"title":"semigroupoidOp","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Semigroupoid"],"Semigroupoid"]},{"tag":"TypeConstructor","contents":[["Data","Op"],"Op"]}]}},"sourceSpan":{"start":[15,1],"name":"/home/travis/build/purescript/purescript-contravariant/src/Data/Op.purs","end":[15,43]}},{"comments":null,"title":"categoryOp","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Category"],"Category"]},{"tag":"TypeConstructor","contents":[["Data","Op"],"Op"]}]}},"sourceSpan":{"start":[18,1],"name":"/home/travis/build/purescript/purescript-contravariant/src/Data/Op.purs","end":[18,35]}},{"comments":null,"title":"contravariantOp","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Functor","Contravariant"],"Contravariant"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Op"],"Op"]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[21,1],"name":"/home/travis/build/purescript/purescript-contravariant/src/Data/Op.purs","end":[21,49]}}],"comments":"The opposite of the function category.\n","title":"Op","info":{"declType":"data","dataDeclType":"newtype","typeArguments":[["a",null],["b",null]]},"sourceSpan":{"start":[9,1],"name":"/home/travis/build/purescript/purescript-contravariant/src/Data/Op.purs","end":[9,29]}}]},{"reExports":[],"name":"Data.Predicate","comments":null,"declarations":[{"children":[{"comments":null,"title":"Predicate","info":{"arguments":[{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}}],"declType":"dataConstructor"},"sourceSpan":null},{"comments":null,"title":"newtypePredicate","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Newtype"],"Newtype"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Predicate"],"Predicate"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeWildcard","contents":{"start":[11,59],"name":"/home/travis/build/purescript/purescript-contravariant/src/Data/Predicate.purs","end":[11,60]}}]}},"sourceSpan":{"start":[11,8],"name":"/home/travis/build/purescript/purescript-contravariant/src/Data/Predicate.purs","end":[11,60]}},{"comments":null,"title":"heytingAlgebraPredicate","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","HeytingAlgebra"],"HeytingAlgebra"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Predicate"],"Predicate"]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[13,16],"name":"/home/travis/build/purescript/purescript-contravariant/src/Data/Predicate.purs","end":[13,80]}},{"comments":null,"title":"booleanAlgebraPredicate","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","BooleanAlgebra"],"BooleanAlgebra"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Predicate"],"Predicate"]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[15,16],"name":"/home/travis/build/purescript/purescript-contravariant/src/Data/Predicate.purs","end":[15,80]}},{"comments":null,"title":"contravariantPredicate","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Functor","Contravariant"],"Contravariant"]},{"tag":"TypeConstructor","contents":[["Data","Predicate"],"Predicate"]}]}},"sourceSpan":{"start":[17,1],"name":"/home/travis/build/purescript/purescript-contravariant/src/Data/Predicate.purs","end":[17,59]}}],"comments":"An adaptor allowing `>$<` to map over the inputs of a predicate.\n","title":"Predicate","info":{"declType":"data","dataDeclType":"newtype","typeArguments":[["a",null]]},"sourceSpan":{"start":[9,1],"name":"/home/travis/build/purescript/purescript-contravariant/src/Data/Predicate.purs","end":[9,47]}}]}],"resolvedDependencies":{"purescript-newtype":"3.0.0","purescript-control":"4.0.0","purescript-either":"4.0.0","purescript-maybe":"4.0.0","purescript-type-equality":"3.0.0","purescript-distributive":"4.0.0","purescript-invariant":"4.0.0","purescript-foldable-traversable":"4.0.0","purescript-prelude":"4.0.0","purescript-bifunctors":"4.0.0","purescript-orders":"4.0.0","purescript-tuples":"5.0.0","purescript-identity":"4.0.0"},"version":"4.0.0","github":["purescript","purescript-contravariant"],"versionTag":"v4.0.0","moduleMap":{"Data.BooleanAlgebra":"purescript-prelude","Data.Ring":"purescript-prelude","Data.Traversable.Accum.Internal":"purescript-foldable-traversable","Data.Bifunctor.Flip":"purescript-bifunctors","Data.Ord":"purescript-prelude","Type.Data.Row":"purescript-prelude","Data.Monoid.Dual":"purescript-prelude","Data.Bitraversable":"purescript-foldable-traversable","Data.Boolean":"purescript-prelude","Control.Biapplicative":"purescript-bifunctors","Data.Bounded":"purescript-prelude","Data.TraversableWithIndex":"purescript-foldable-traversable","Data.Show":"purescript-prelude","Data.Bifunctor.Clown":"purescript-bifunctors","Data.Foldable":"purescript-foldable-traversable","Control.Apply":"purescript-prelude","Data.Tuple.Nested":"purescript-tuples","Control.Monad":"purescript-prelude","Data.Monoid":"purescript-prelude","Data.Maybe.First":"purescript-maybe","Control.Bind":"purescript-prelude","Data.Monoid.Additive":"purescript-prelude","Data.Symbol":"purescript-prelude","Data.HeytingAlgebra":"purescript-prelude","Control.Alt":"purescript-control","Type.Data.RowList":"purescript-prelude","Data.Either.Inject":"purescript-either","Data.Ord.Min":"purescript-orders","Data.Ord.Unsafe":"purescript-prelude","Data.Semigroup":"purescript-prelude","Data.Ord.Down":"purescript-orders","Data.Tuple":"purescript-tuples","Data.Semigroup.Foldable":"purescript-foldable-traversable","Control.Biapply":"purescript-bifunctors","Data.Distributive":"purescript-distributive","Type.Equality":"purescript-type-equality","Control.Alternative":"purescript-control","Data.Semiring":"purescript-prelude","Data.Traversable.Accum":"purescript-foldable-traversable","Data.CommutativeRing":"purescript-prelude","Data.NaturalTransformation":"purescript-prelude","Data.Monoid.Conj":"purescript-prelude","Data.Functor":"purescript-prelude","Control.Category":"purescript-prelude","Data.Maybe":"purescript-maybe","Control.Comonad":"purescript-control","Data.Function":"purescript-prelude","Data.Field":"purescript-prelude","Data.EuclideanRing":"purescript-prelude","Data.Semigroup.Last":"purescript-prelude","Data.Semigroup.First":"purescript-prelude","Data.Functor.Invariant":"purescript-invariant","Prelude":"purescript-prelude","Data.Bifunctor.Product":"purescript-bifunctors","Control.Extend":"purescript-control","Control.Lazy":"purescript-control","Data.Eq":"purescript-prelude","Data.Either.Nested":"purescript-either","Data.Newtype":"purescript-newtype","Data.Semigroup.Traversable":"purescript-foldable-traversable","Data.Bifunctor":"purescript-bifunctors","Data.Monoid.Disj":"purescript-prelude","Control.MonadPlus":"purescript-control","Data.Void":"purescript-prelude","Control.MonadZero":"purescript-control","Data.Ord.Max":"purescript-orders","Data.Bifunctor.Joker":"purescript-bifunctors","Data.FunctorWithIndex":"purescript-foldable-traversable","Data.DivisionRing":"purescript-prelude","Data.Bifunctor.Wrap":"purescript-bifunctors","Data.Maybe.Last":"purescript-maybe","Data.Unit":"purescript-prelude","Data.Ordering":"purescript-prelude","Data.Identity":"purescript-identity","Control.Plus":"purescript-control","Data.Monoid.Multiplicative":"purescript-prelude","Control.Semigroupoid":"purescript-prelude","Data.Bifunctor.Join":"purescript-bifunctors","Data.Bifoldable":"purescript-foldable-traversable","Data.Monoid.Endo":"purescript-prelude","Data.Either":"purescript-either","Control.Applicative":"purescript-prelude","Data.FoldableWithIndex":"purescript-foldable-traversable","Record.Unsafe":"purescript-prelude","Data.Traversable":"purescript-foldable-traversable"},"compilerVersion":"0.11.7"}