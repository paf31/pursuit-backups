{"uploader":"garyb","packageMeta":{"homepage":"https://github.com/garyb/purescript-debug","repository":{"url":"git://github.com/garyb/purescript-debug.git","type":"git"},"ignore":["**/.*","bower_components","node_modules","output","bower.json","package.json"],"devDependencies":{"purescript-effect":"^2.0.0"},"dependencies":{"purescript-prelude":"^4.0.0"},"name":"purescript-debug","license":["MIT"],"description":"Console based debugging functions"},"tagTime":"2018-05-27T17:54:02+0000","modules":[{"reExports":[],"name":"Debug.Trace","comments":null,"declarations":[{"children":[{"comments":null,"title":"warn","info":{"declType":"instance","dependencies":[{"constraintClass":[["Prim","TypeError"],"Warn"],"constraintArgs":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim","TypeError"],"Text"]},{"tag":"TypeLevelString","contents":"Debug.Trace usage"}]}],"constraintData":null}],"type":{"tag":"TypeConstructor","contents":[["Debug","Trace"],"DebugWarning"]}},"sourceSpan":{"start":[10,1],"name":"/home/travis/build/garyb/purescript-debug/src/Debug/Trace.purs","end":[10,65]}}],"comments":"Nullary class used to raise a custom warning for the debug functions.\n","title":"DebugWarning","info":{"fundeps":[],"arguments":[],"declType":"typeClass","superclasses":[]},"sourceSpan":{"start":[8,1],"name":"/home/travis/build/garyb/purescript-debug/src/Debug/Trace.purs","end":[8,19]}},{"children":[],"comments":"Log any PureScript value to the console for debugging purposes and then\nreturn a value. This will log the value's underlying representation for\nlow-level debugging, so it may be desireable to `show` the value first.\n\nThe return value is thunked so it is not evaluated until after the\nmessage has been printed, to preserve a predictable console output.\n\nFor example:\n``` purescript\ndoSomething = trace \"Hello\" \\_ -> ... some value or computation ...\n```\n","title":"trace","info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Debug","Trace"],"DebugWarning"],"constraintArgs":[],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]},{"tag":"TypeVar","contents":"b"}]}}]},{"tag":"TypeVar","contents":"b"}]}]}]},null]},null]}},"sourceSpan":{"start":[23,1],"name":"/home/travis/build/garyb/purescript-debug/src/Debug/Trace.purs","end":[23,74]}},{"children":[],"comments":"Log any PureScript value to the console and return the unit value of the\nMonad `m`.\n","title":"traceM","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["m",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Debug","Trace"],"DebugWarning"],"constraintArgs":[],"constraintData":null},{"tag":"ConstrainedType","contents":[{"constraintClass":[["Control","Monad"],"Monad"],"constraintArgs":[{"tag":"TypeVar","contents":"m"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"m"},{"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}]}]}]},null]},null]}},"sourceSpan":{"start":[27,1],"name":"/home/travis/build/garyb/purescript-debug/src/Debug/Trace.purs","end":[27,61]}},{"children":[],"comments":"Logs any value and returns it, using a \"tag\" or key value to annotate the\ntraced value. Useful when debugging something in the middle of a\nexpression, as you can insert this into the expression without having to\nbreak it up.\n","title":"spy","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Debug","Trace"],"DebugWarning"],"constraintArgs":[],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"a"}]}]}]},null]}},"sourceSpan":{"start":[36,1],"name":"/home/travis/build/garyb/purescript-debug/src/Debug/Trace.purs","end":[36,64]}}]}],"resolvedDependencies":{"purescript-effect":"2.0.0","purescript-prelude":"4.0.0"},"version":"4.0.0","github":["garyb","purescript-debug"],"versionTag":"v4.0.0","moduleMap":{"Data.BooleanAlgebra":"purescript-prelude","Data.Ring":"purescript-prelude","Effect.Uncurried":"purescript-effect","Effect":"purescript-effect","Data.Ord":"purescript-prelude","Type.Data.Row":"purescript-prelude","Data.Monoid.Dual":"purescript-prelude","Data.Boolean":"purescript-prelude","Data.Bounded":"purescript-prelude","Data.Show":"purescript-prelude","Control.Apply":"purescript-prelude","Control.Monad":"purescript-prelude","Data.Monoid":"purescript-prelude","Control.Bind":"purescript-prelude","Data.Monoid.Additive":"purescript-prelude","Data.Symbol":"purescript-prelude","Data.HeytingAlgebra":"purescript-prelude","Type.Data.RowList":"purescript-prelude","Data.Ord.Unsafe":"purescript-prelude","Data.Semigroup":"purescript-prelude","Effect.Unsafe":"purescript-effect","Data.Semiring":"purescript-prelude","Data.CommutativeRing":"purescript-prelude","Data.NaturalTransformation":"purescript-prelude","Data.Monoid.Conj":"purescript-prelude","Data.Functor":"purescript-prelude","Control.Category":"purescript-prelude","Data.Function":"purescript-prelude","Data.Field":"purescript-prelude","Data.EuclideanRing":"purescript-prelude","Data.Semigroup.Last":"purescript-prelude","Data.Semigroup.First":"purescript-prelude","Prelude":"purescript-prelude","Effect.Class":"purescript-effect","Data.Eq":"purescript-prelude","Data.Monoid.Disj":"purescript-prelude","Data.Void":"purescript-prelude","Data.DivisionRing":"purescript-prelude","Data.Unit":"purescript-prelude","Data.Ordering":"purescript-prelude","Data.Monoid.Multiplicative":"purescript-prelude","Control.Semigroupoid":"purescript-prelude","Data.Monoid.Endo":"purescript-prelude","Control.Applicative":"purescript-prelude","Record.Unsafe":"purescript-prelude"},"compilerVersion":"0.11.7"}