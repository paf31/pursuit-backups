{"uploader":"i-am-tom","packageMeta":{"repository":{"url":"git://github.com/i-am-tom/purescript-easings.git","type":"git"},"ignore":["**/.*","node_modules","bower_components","output"],"devDependencies":{"purescript-test-unit":"^11.0.0","purescript-psci-support":"^3.0.0"},"dependencies":{"purescript-prelude":"^3.1.0","purescript-math":"^2.1.0"},"name":"purescript-easings","license":["MIT"]},"tagTime":"2017-08-02T21:53:42+0000","modules":[{"reExports":[],"name":"Easing","comments":null,"declarations":[{"children":[],"comments":"The `Easing` type is just to make the code a bit easier to read.\nWe can call the three inputs, \"start\", \"end\", and \"progress\",\nrespectively. The \"progress\" is a number (usually) between 0 and\n1, indicating how far through the animation we are (0 being the\nstart, and 1 being the end). The \"start\" and \"end\" values are the\nactual values between which we're easing. The result is simply\nwhat the value would be at that point in the progress!\n","title":"Easing","info":{"arguments":[],"declType":"typeSynonym","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]}]}]}},"sourceSpan":{"start":[26,1],"name":"/Users/Tom/Git/purescript/purescript-easings/src/Easing.purs","end":[26,51]}},{"children":[],"comments":"All the easings \"ease in\". For example, the elastic easing will\nbe elastic around the _end_ of the animation, rather than the\nbeginning. Sometimes, however, you want the opposite. Well, as\nluck would have it, we have the function for you! Simply, this\nflips the inputs and progress for an easing function, so you can\nuse `out circular` just as you'd use `circular`.\n","title":"out","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Easing"],"Easing"]}]},{"tag":"TypeConstructor","contents":[["Easing"],"Easing"]}]}},"sourceSpan":{"start":[36,1],"name":"/Users/Tom/Git/purescript/purescript-easings/src/Easing.purs","end":[36,24]}},{"children":[],"comments":"With all these in and out escapades, you might find yourself with\na longing - a _yearning_ - for symmetry. Be afflicted no more:\n`inAndOut` will take a function, and mirror it, such that it will\nease in and out in exactly the same way.\n","title":"inAndOut","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Easing"],"Easing"]}]},{"tag":"TypeConstructor","contents":[["Easing"],"Easing"]}]}},"sourceSpan":{"start":[43,1],"name":"/Users/Tom/Git/purescript/purescript-easings/src/Easing.purs","end":[43,29]}},{"children":[],"comments":"Polynomial easing. `polynomial 1` is your run-of-the-mill linear\neasing, start-to-end moving at a constant speed, yawn. However,\nthe 1 can be replaced with other numbers, and that value will be\nthe power to which `progress` is lifted. As it goes up, entry and\nexit will become steeper. Somewhere between 1 and 5 is usually\npretty good.\n","title":"polynomial","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]},{"tag":"TypeConstructor","contents":[["Easing"],"Easing"]}]}},"sourceSpan":{"start":[54,1],"name":"/Users/Tom/Git/purescript/purescript-easings/src/Easing.purs","end":[54,31]}},{"children":[],"comments":"Sinusoidal easing. This is an easing that follows a sinusoidal\ncurve from `start` to `end`, starting fast and ending slow. Bit\nof trivia: internally, it uses `cos`, not `sin`. Pranked ya!\n","title":"sine","info":{"declType":"value","type":{"tag":"TypeConstructor","contents":[["Easing"],"Easing"]}},"sourceSpan":{"start":[61,1],"name":"/Users/Tom/Git/purescript/purescript-easings/src/Easing.purs","end":[61,15]}},{"children":[],"comments":"Exponential easing. This is an easing whose speed follows the\nexponential curve: it starts very slow, and ends very fast.\n","title":"exponential","info":{"declType":"value","type":{"tag":"TypeConstructor","contents":[["Easing"],"Easing"]}},"sourceSpan":{"start":[67,1],"name":"/Users/Tom/Git/purescript/purescript-easings/src/Easing.purs","end":[67,22]}},{"children":[],"comments":"Circular easing. Why settle for things like sinusoidal easing\nwhen you can follow the exact edge of a circle? Look, reader: I\nported this library from a jQuery plugin. I didn't get to make\nany decisions about its content.\n","title":"circular","info":{"declType":"value","type":{"tag":"TypeConstructor","contents":[["Easing"],"Easing"]}},"sourceSpan":{"start":[76,1],"name":"/Users/Tom/Git/purescript/purescript-easings/src/Easing.purs","end":[76,19]}},{"children":[],"comments":"Elastic easing. This is the sexy animation that everyone wants to\nsee on your Web2.0 startup page. The animation quickly moves\n_beyond_ the final value, and then elastically bounces back to\nthe value you actually wanted. Watch your investors *swoon*.\n","title":"elastic","info":{"declType":"value","type":{"tag":"TypeConstructor","contents":[["Easing"],"Easing"]}},"sourceSpan":{"start":[84,1],"name":"/Users/Tom/Git/purescript/purescript-easings/src/Easing.purs","end":[84,18]}},{"children":[],"comments":"Back easing. I'd have called this one \"run-up\": we move slightly\nbackwards from the start, then charge forward to the end, with a\nlittle pinch of acceleration for good measure. Think about blinds\nin cartoons.\n","title":"back","info":{"declType":"value","type":{"tag":"TypeConstructor","contents":[["Easing"],"Easing"]}},"sourceSpan":{"start":[95,1],"name":"/Users/Tom/Git/purescript/purescript-easings/src/Easing.purs","end":[95,15]}},{"children":[],"comments":"Imagine your \"end\" value is a solid wall. This basically looks\nlike `elastic`, except it \"bounces\" off the end value instead of\ngoing over it. Imagine dropping an `h1` from 200px high onto a\ntarmac floor (remembering that `h1`s are quite rubbery). That's\nwhat you get with `bounce -200.0 0`. This isn't the prettiest of\nimplementations, so maybe just don't look at it for too long.\n","title":"bounce","info":{"declType":"value","type":{"tag":"TypeConstructor","contents":[["Easing"],"Easing"]}},"sourceSpan":{"start":[105,1],"name":"/Users/Tom/Git/purescript/purescript-easings/src/Easing.purs","end":[105,17]}}]}],"resolvedDependencies":{"purescript-free":"4.1.0","purescript-proxy":"2.1.0","purescript-exceptions":"3.1.0","purescript-newtype":"2.0.0","purescript-maps":"3.5.0","purescript-control":"3.3.0","purescript-console":"3.0.0","purescript-either":"3.1.0","purescript-arrays":"4.1.2","purescript-maybe":"3.0.0","purescript-symbols":"3.0.0","purescript-type-equality":"2.1.0","purescript-js-timers":"3.0.0","purescript-exists":"3.0.0","purescript-distributive":"3.0.0","purescript-unfoldable":"3.0.0","purescript-invariant":"3.0.0","purescript-lazy":"3.0.0","purescript-monoid":"3.1.0","purescript-aff":"3.1.0","purescript-foldable-traversable":"3.4.0","purescript-tailrec":"3.3.0","purescript-gen":"1.1.0","purescript-functors":"2.2.0","purescript-prelude":"3.1.0","purescript-st":"3.0.0","purescript-bifunctors":"3.0.0","purescript-nonempty":"4.0.0","purescript-contravariant":"3.1.0","purescript-generics":"4.0.0","purescript-unsafe-coerce":"3.0.0","purescript-refs":"3.0.0","purescript-integers":"3.1.0","purescript-eff":"3.1.0","purescript-test-unit":"11.0.0","purescript-const":"3.0.0","purescript-transformers":"3.4.0","purescript-globals":"3.0.0","purescript-generics-rep":"5.1.0","purescript-math":"2.1.0","purescript-enums":"3.2.1","purescript-psci-support":"3.0.0","purescript-catenable-lists":"4.0.0","purescript-random":"3.0.0","purescript-parallel":"3.0.0","purescript-tuples":"4.1.0","purescript-partial":"1.2.1","purescript-quickcheck":"4.4.0","purescript-strings":"3.3.0","purescript-identity":"3.1.0","purescript-lists":"4.9.0","purescript-datetime":"3.3.0","purescript-functions":"3.0.0"},"version":"2.1.0","github":["i-am-tom","purescript-easings"],"versionTag":"v2.1.0","moduleMap":{"Data.BooleanAlgebra":"purescript-prelude","Data.Decide":"purescript-contravariant","Data.Ring":"purescript-prelude","Control.Monad.Trans.Class":"purescript-transformers","Data.Functor.Product":"purescript-functors","Data.NonEmpty":"purescript-nonempty","Control.Monad.Eff.Ref":"purescript-refs","Data.Char.Gen":"purescript-strings","Control.Monad.Aff.Class":"purescript-aff","Data.Generic":"purescript-generics","Data.Traversable.Accum.Internal":"purescript-foldable-traversable","Data.Enum.Gen":"purescript-enums","Control.Comonad.Env":"purescript-transformers","Control.Comonad.Traced.Class":"purescript-transformers","Data.StrMap":"purescript-maps","Control.Monad.Eff.Unsafe":"purescript-eff","Data.Functor.Compose":"purescript-functors","Data.Int.Bits":"purescript-integers","Data.DateTime":"purescript-datetime","Data.Bifunctor.Flip":"purescript-bifunctors","Data.String.CodePoints":"purescript-strings","Data.Ord":"purescript-prelude","Control.Monad.Gen":"purescript-gen","Data.Date":"purescript-datetime","Data.Monoid.Dual":"purescript-monoid","Control.Monad.Rec.Class":"purescript-tailrec","Data.StrMap.ST.Unsafe":"purescript-maps","Data.Time.Component":"purescript-datetime","Data.Bitraversable":"purescript-foldable-traversable","Test.Unit.Assert":"purescript-test-unit","Data.Boolean":"purescript-prelude","Data.Map":"purescript-maps","Control.Biapplicative":"purescript-bifunctors","Data.CatList":"purescript-catenable-lists","Control.Parallel.Class":"purescript-parallel","Type.Proxy":"purescript-proxy","Test.Unit.Output.Fancy":"purescript-test-unit","Data.Coyoneda":"purescript-free","Data.Array.ST.Iterator":"purescript-arrays","Data.DateTime.Gen":"purescript-datetime","Data.Bounded":"purescript-prelude","Control.Monad.State.Trans":"purescript-transformers","Data.TraversableWithIndex":"purescript-foldable-traversable","Data.Int":"purescript-integers","Data.StrMap.Gen":"purescript-maps","Data.Show":"purescript-prelude","Data.Bifunctor.Clown":"purescript-bifunctors","Control.Monad.Writer.Trans":"purescript-transformers","Data.Foldable":"purescript-foldable-traversable","Data.Divide":"purescript-contravariant","Control.Comonad.Store.Class":"purescript-transformers","Data.Enum":"purescript-enums","Control.Monad.Trampoline":"purescript-free","Control.Monad.Aff.AVar":"purescript-aff","Control.Apply":"purescript-prelude","Data.Functor.Contravariant":"purescript-contravariant","Data.Tuple.Nested":"purescript-tuples","Data.Generic.Rep.Semigroup":"purescript-generics-rep","Test.QuickCheck.LCG":"purescript-quickcheck","Control.Monad":"purescript-prelude","Data.Lazy":"purescript-lazy","Data.Monoid":"purescript-monoid","Control.Monad.Eff.Uncurried":"purescript-eff","Control.Monad.List.Trans":"purescript-transformers","Control.Monad.RWS":"purescript-transformers","Data.Maybe.First":"purescript-maybe","Control.Bind":"purescript-prelude","Data.Monoid.Additive":"purescript-monoid","Data.Symbol":"purescript-symbols","Data.Map.Gen":"purescript-maps","Data.String.Regex":"purescript-strings","Data.HeytingAlgebra":"purescript-prelude","Control.Alt":"purescript-control","Data.Date.Gen":"purescript-datetime","Control.Monad.Maybe.Trans":"purescript-transformers","Control.Monad.Cont":"purescript-transformers","Data.Time.Component.Gen":"purescript-datetime","Data.List.ZipList":"purescript-lists","Data.Functor.Coproduct.Nested":"purescript-functors","Data.Ord.Unsafe":"purescript-prelude","Data.Semigroup":"purescript-prelude","Control.Monad.Reader":"purescript-transformers","Test.Unit.QuickCheck":"purescript-test-unit","Data.Const":"purescript-const","Data.Generic.Rep.Bounded":"purescript-generics-rep","Control.Monad.Eff":"purescript-eff","Control.Comonad.Traced.Trans":"purescript-transformers","Data.Array.ST.Partial":"purescript-arrays","Data.StrMap.Unsafe":"purescript-maps","Data.Generic.Rep.Show":"purescript-generics-rep","Data.Tuple":"purescript-tuples","Data.Semigroup.Foldable":"purescript-foldable-traversable","Control.Biapply":"purescript-bifunctors","Data.Distributive":"purescript-distributive","Type.Equality":"purescript-type-equality","Control.Alternative":"purescript-control","Data.Semiring":"purescript-prelude","Data.StrMap.ST":"purescript-maps","Data.Exists":"purescript-exists","Data.Traversable.Accum":"purescript-foldable-traversable","Data.CommutativeRing":"purescript-prelude","Data.NaturalTransformation":"purescript-prelude","Data.Monoid.Conj":"purescript-monoid","Data.Yoneda":"purescript-free","Control.Monad.Aff.Internal":"purescript-aff","Data.Functor.App":"purescript-functors","Data.Unfoldable":"purescript-unfoldable","Control.Monad.Eff.Random":"purescript-random","Control.Comonad.Store.Trans":"purescript-transformers","Control.Monad.ST":"purescript-st","Control.Monad.State.Class":"purescript-transformers","Data.List.Types":"purescript-lists","Data.Functor":"purescript-prelude","Unsafe.Coerce":"purescript-unsafe-coerce","Control.Monad.Writer.Class":"purescript-transformers","Data.Generic.Rep.Ord":"purescript-generics-rep","Data.CatQueue":"purescript-catenable-lists","Control.Monad.Except":"purescript-transformers","Data.Interval":"purescript-datetime","Data.List.Lazy.Types":"purescript-lists","Data.DateTime.Locale":"purescript-datetime","Control.Category":"purescript-prelude","Test.QuickCheck.Arbitrary":"purescript-quickcheck","Data.Interval.Duration":"purescript-datetime","Control.Monad.Gen.Common":"purescript-gen","Control.Monad.RWS.Trans":"purescript-transformers","Test.QuickCheck.Data.AlphaNumString":"purescript-quickcheck","Control.Monad.Cont.Trans":"purescript-transformers","Data.Maybe":"purescript-maybe","Data.String.Regex.Unsafe":"purescript-strings","Control.Comonad":"purescript-control","Data.Function":"purescript-prelude","Data.List":"purescript-lists","Data.Field":"purescript-prelude","Data.List.Lazy":"purescript-lists","Data.Generic.Rep.Eq":"purescript-generics-rep","Test.Unit.Output.TAP":"purescript-test-unit","Data.EuclideanRing":"purescript-prelude","Data.Functor.Invariant":"purescript-invariant","Control.Comonad.Traced":"purescript-transformers","Global.Unsafe":"purescript-globals","Data.Comparison":"purescript-contravariant","Data.String.Unsafe":"purescript-strings","Prelude":"purescript-prelude","Control.Monad.Aff":"purescript-aff","Data.Predicate":"purescript-contravariant","Partial.Unsafe":"purescript-partial","Data.Array":"purescript-arrays","Data.Bifunctor.Product":"purescript-bifunctors","Control.Extend":"purescript-control","Test.Unit.Console":"purescript-test-unit","Control.Lazy":"purescript-control","Data.Function.Uncurried":"purescript-functions","Control.Monad.Reader.Trans":"purescript-transformers","Data.Functor.Product.Nested":"purescript-functors","Test.Unit.Output.Simple":"purescript-test-unit","Control.Comonad.Env.Class":"purescript-transformers","Data.Interval.Duration.Iso":"purescript-datetime","Data.Eq":"purescript-prelude","Data.Either.Nested":"purescript-either","Control.Comonad.Cofree":"purescript-free","Data.Newtype":"purescript-newtype","Control.Monad.Eff.Console":"purescript-console","Data.Semigroup.Traversable":"purescript-foldable-traversable","Data.Bifunctor":"purescript-bifunctors","Data.Monoid.Disj":"purescript-monoid","Control.Monad.Eff.Exception":"purescript-exceptions","Control.Monad.Eff.Timer":"purescript-js-timers","Control.Monad.Gen.Class":"purescript-gen","Data.Array.Partial":"purescript-arrays","Data.String.CaseInsensitive":"purescript-strings","Control.Monad.Free":"purescript-free","Control.Parallel":"purescript-parallel","Control.MonadPlus":"purescript-control","Data.Void":"purescript-prelude","Control.MonadZero":"purescript-control","Data.DateTime.Instant":"purescript-datetime","Control.Comonad.Store":"purescript-transformers","Control.Monad.Except.Trans":"purescript-transformers","Data.Bifunctor.Joker":"purescript-bifunctors","Data.FunctorWithIndex":"purescript-foldable-traversable","Data.Divisible":"purescript-contravariant","Data.DivisionRing":"purescript-prelude","Data.Bifunctor.Wrap":"purescript-bifunctors","PSCI.Support":"purescript-psci-support","Data.Equivalence":"purescript-contravariant","Data.Maybe.Last":"purescript-maybe","Data.Unit":"purescript-prelude","Control.Monad.Eff.Ref.Unsafe":"purescript-refs","Data.List.NonEmpty":"purescript-lists","Data.List.Lazy.NonEmpty":"purescript-lists","Data.Ordering":"purescript-prelude","Data.Functor.Coproduct":"purescript-functors","Control.Monad.Cont.Class":"purescript-transformers","Data.Identity":"purescript-identity","Math":"purescript-math","Control.Comonad.Trans.Class":"purescript-transformers","Data.String":"purescript-strings","Control.Plus":"purescript-control","Control.Monad.Eff.Class":"purescript-eff","Test.QuickCheck":"purescript-quickcheck","Test.Unit.Main":"purescript-test-unit","Data.Time":"purescript-datetime","Type.Row.Effect.Equality":"purescript-type-equality","Data.Time.Duration":"purescript-datetime","Data.Date.Component":"purescript-datetime","Partial":"purescript-partial","Control.Comonad.Env.Trans":"purescript-transformers","Global":"purescript-globals","Control.Monad.Reader.Class":"purescript-transformers","Data.Decidable":"purescript-contravariant","Control.Monad.Aff.Unsafe":"purescript-aff","Data.Monoid.Multiplicative":"purescript-monoid","Data.Array.ST":"purescript-arrays","Control.Monad.Error.Class":"purescript-transformers","Test.Unit":"purescript-test-unit","Data.Generic.Rep.Monoid":"purescript-generics-rep","Control.Monad.Aff.Console":"purescript-aff","Control.Semigroupoid":"purescript-prelude","Data.Monoid.Alternate":"purescript-monoid","Data.Char":"purescript-strings","Data.Generic.Rep":"purescript-generics-rep","Data.Bifunctor.Join":"purescript-bifunctors","Control.Monad.Eff.Exception.Unsafe":"purescript-exceptions","Data.Bifoldable":"purescript-foldable-traversable","Data.Monoid.Endo":"purescript-monoid","Control.Monad.State":"purescript-transformers","Data.List.Partial":"purescript-lists","Data.String.Regex.Flags":"purescript-strings","Data.Either":"purescript-either","Data.Time.Duration.Gen":"purescript-datetime","Data.Date.Component.Gen":"purescript-datetime","Control.Applicative":"purescript-prelude","Data.FoldableWithIndex":"purescript-foldable-traversable","Data.Op":"purescript-contravariant","Test.QuickCheck.Gen":"purescript-quickcheck","Control.Monad.Writer":"purescript-transformers","Data.Time.Gen":"purescript-datetime","Data.Traversable":"purescript-foldable-traversable","Data.String.Gen":"purescript-strings"},"compilerVersion":"0.11.4"}