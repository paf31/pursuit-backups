{"uploader":"hdgarrood","packageMeta":{"repository":{"url":"https://github.com/hdgarrood/purescript-eff-object","type":"git"},"ignore":["**/.*","node_modules","bower_components","output"],"devDependencies":{"purescript-psci-support":"^3.0.0"},"dependencies":{"purescript-console":"^3.0.0","purescript-symbols":"^3.0.0","purescript-type-equality":"^2.0.0","purescript-prelude":"^3.0.0","purescript-unsafe-coerce":"^3.0.0"},"name":"purescript-eff-object","license":["MIT"]},"tagTime":"2017-07-13T00:28:38+0000","modules":[{"reExports":[],"name":"EffObject","comments":"This module contains declarations and some basic functions to allow you to\ngive PureScript types to stateful or otherwise effectful JavaScript APIs\nlike XMLHttpRequest or WebSocket without writing a ton of error-prone and\ntedious FFI code.\n\nFor example, if you wanted to provide a low-level typing for the\nXMLHttpRequest web API, you might write the following:\n\n```purescript\ntype XMLHttpRequest e =\n  EffObject\n    -- The first type argument contains effects associated with interacting\n    -- with the object. Interacting with an XHR uses an AJAX effect, so\n    -- we record this here.\n    ( ajax :: AJAX )\n    -- We record the properties as well as their types and access levels\n    -- in the second type argument.\n    ( onreadystatechange :: ReadWrite (Eff e Unit)\n    , readyState :: ReadOnly Int\n    , response :: ReadOnly (Nullable Response)\n    , [...]\n    )\n```\n\nConsumers of your API can now interact with an `XMLHttpRequest` object\nusing the `readProperty` or `writeProperty` functions:\n\n```purescript\ncheckReadyState ::\n  forall e.\n  XMLHttpRequest e ->\n  Eff (ajax :: AJAX | e) String\ncheckReadyState req = do\n  s <- readProperty (SProxy :: SProxy \"readyState\") req\n  pure $ if (s == done)\n    then \"Done!\"\n    else \"Not done.\"\n  where\n    done = 4\n```\n\nAttempting to write read-only properties will produce a custom type error\nexplaining what happened:\n\n```purescript\noops :: forall e. XMLHttpRequest e -> Eff (ajax :: AJAX | e) Unit\noops req = writeProperty (SProxy :: SProxy \"readyState\") req 0\n-- Throws:\n--   A custom type error occurred while solving type class constraints:\n--     Cannot write to a read-only property.\n```\n\nNote that any APIs constructed using this library will necessarily be\nvery low-level; you might want to build extra layers above this API, for\ninstance, to provide a real `ReadyState` type which is guaranteed to only\nonly take values which would are valid for `readyState` property itself.\n","declarations":[{"children":[{"comments":null,"title":"readableReadOnly","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["EffObject"],"Readable"]},{"tag":"TypeConstructor","contents":[["EffObject"],"ReadOnly"]}]}},"sourceSpan":{"start":[86,1],"name":"/home/harry/code/purescript-eff-object/src/EffObject.purs","end":[86,47]}},{"comments":null,"title":"notWriteableReadOnly","info":{"declType":"instance","dependencies":[{"constraintClass":[["Prim"],"Fail"],"constraintArgs":[{"tag":"TypeLevelString","contents":"Cannot write to a read-only property."}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["EffObject"],"Writeable"]},{"tag":"TypeConstructor","contents":[["EffObject"],"ReadOnly"]}]}},"sourceSpan":{"start":[97,1],"name":"/home/harry/code/purescript-eff-object/src/EffObject.purs","end":[98,69]}}],"comments":null,"title":"ReadOnly","info":{"declType":"data","dataDeclType":"data","typeArguments":[["a",{"tag":"NamedKind","contents":[["Prim"],"Type"]}]]},"sourceSpan":{"start":[80,1],"name":"/home/harry/code/purescript-eff-object/src/EffObject.purs","end":[80,26]}},{"children":[{"comments":null,"title":"notReadableWriteOnly","info":{"declType":"instance","dependencies":[{"constraintClass":[["Prim"],"Fail"],"constraintArgs":[{"tag":"TypeLevelString","contents":"Cannot read from a write-only property."}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["EffObject"],"Readable"]},{"tag":"TypeConstructor","contents":[["EffObject"],"WriteOnly"]}]}},"sourceSpan":{"start":[89,1],"name":"/home/harry/code/purescript-eff-object/src/EffObject.purs","end":[90,71]}},{"comments":null,"title":"writeableWriteOnly","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["EffObject"],"Writeable"]},{"tag":"TypeConstructor","contents":[["EffObject"],"WriteOnly"]}]}},"sourceSpan":{"start":[94,1],"name":"/home/harry/code/purescript-eff-object/src/EffObject.purs","end":[94,51]}}],"comments":null,"title":"WriteOnly","info":{"declType":"data","dataDeclType":"data","typeArguments":[["a",{"tag":"NamedKind","contents":[["Prim"],"Type"]}]]},"sourceSpan":{"start":[81,1],"name":"/home/harry/code/purescript-eff-object/src/EffObject.purs","end":[81,27]}},{"children":[{"comments":null,"title":"readableReadWrite","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["EffObject"],"Readable"]},{"tag":"TypeConstructor","contents":[["EffObject"],"ReadWrite"]}]}},"sourceSpan":{"start":[87,1],"name":"/home/harry/code/purescript-eff-object/src/EffObject.purs","end":[87,49]}},{"comments":null,"title":"writeableReadWrite","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["EffObject"],"Writeable"]},{"tag":"TypeConstructor","contents":[["EffObject"],"ReadWrite"]}]}},"sourceSpan":{"start":[95,1],"name":"/home/harry/code/purescript-eff-object/src/EffObject.purs","end":[95,51]}}],"comments":null,"title":"ReadWrite","info":{"declType":"data","dataDeclType":"data","typeArguments":[["a",{"tag":"NamedKind","contents":[["Prim"],"Type"]}]]},"sourceSpan":{"start":[82,1],"name":"/home/harry/code/purescript-eff-object/src/EffObject.purs","end":[82,27]}},{"children":[{"comments":null,"title":"readableReadOnly","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["EffObject"],"Readable"]},{"tag":"TypeConstructor","contents":[["EffObject"],"ReadOnly"]}]}},"sourceSpan":{"start":[86,1],"name":"/home/harry/code/purescript-eff-object/src/EffObject.purs","end":[86,47]}},{"comments":null,"title":"readableReadWrite","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["EffObject"],"Readable"]},{"tag":"TypeConstructor","contents":[["EffObject"],"ReadWrite"]}]}},"sourceSpan":{"start":[87,1],"name":"/home/harry/code/purescript-eff-object/src/EffObject.purs","end":[87,49]}},{"comments":null,"title":"notReadableWriteOnly","info":{"declType":"instance","dependencies":[{"constraintClass":[["Prim"],"Fail"],"constraintArgs":[{"tag":"TypeLevelString","contents":"Cannot read from a write-only property."}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["EffObject"],"Readable"]},{"tag":"TypeConstructor","contents":[["EffObject"],"WriteOnly"]}]}},"sourceSpan":{"start":[89,1],"name":"/home/harry/code/purescript-eff-object/src/EffObject.purs","end":[90,71]}}],"comments":null,"title":"Readable","info":{"fundeps":[],"arguments":[["a",{"tag":"FunKind","contents":[{"tag":"NamedKind","contents":[["Prim"],"Type"]},{"tag":"NamedKind","contents":[["Prim"],"Type"]}]}]],"declType":"typeClass","superclasses":[]},"sourceSpan":{"start":[84,1],"name":"/home/harry/code/purescript-eff-object/src/EffObject.purs","end":[84,35]}},{"children":[{"comments":null,"title":"writeableWriteOnly","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["EffObject"],"Writeable"]},{"tag":"TypeConstructor","contents":[["EffObject"],"WriteOnly"]}]}},"sourceSpan":{"start":[94,1],"name":"/home/harry/code/purescript-eff-object/src/EffObject.purs","end":[94,51]}},{"comments":null,"title":"writeableReadWrite","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["EffObject"],"Writeable"]},{"tag":"TypeConstructor","contents":[["EffObject"],"ReadWrite"]}]}},"sourceSpan":{"start":[95,1],"name":"/home/harry/code/purescript-eff-object/src/EffObject.purs","end":[95,51]}},{"comments":null,"title":"notWriteableReadOnly","info":{"declType":"instance","dependencies":[{"constraintClass":[["Prim"],"Fail"],"constraintArgs":[{"tag":"TypeLevelString","contents":"Cannot write to a read-only property."}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["EffObject"],"Writeable"]},{"tag":"TypeConstructor","contents":[["EffObject"],"ReadOnly"]}]}},"sourceSpan":{"start":[97,1],"name":"/home/harry/code/purescript-eff-object/src/EffObject.purs","end":[98,69]}}],"comments":null,"title":"Writeable","info":{"fundeps":[],"arguments":[["a",{"tag":"FunKind","contents":[{"tag":"NamedKind","contents":[["Prim"],"Type"]},{"tag":"NamedKind","contents":[["Prim"],"Type"]}]}]],"declType":"typeClass","superclasses":[]},"sourceSpan":{"start":[92,1],"name":"/home/harry/code/purescript-eff-object/src/EffObject.purs","end":[92,36]}},{"children":[],"comments":"A JavaScript object, with properties which can be read or written. The\ntype arguments track:\n\n* `e`: Effects associated with reading or writing properties\n* `props`: Properties.\n\nThe labels in the `props` row type must correspond exactly to the property\nnames on the underlying object, and the types in the `props` row should\nbe of the form `ReadOnly a`, `WriteOnly a`, or `ReadWrite a`, depending\non the access level, and where `a` is the type of the property's value.\n","title":"EffObject","info":{"declType":"data","dataDeclType":"data","typeArguments":[["e",{"tag":"Row","contents":{"tag":"NamedKind","contents":[["Control","Monad","Eff"],"Effect"]}}],["props",{"tag":"Row","contents":{"tag":"NamedKind","contents":[["Prim"],"Type"]}}]]},"sourceSpan":{"start":[110,1],"name":"/home/harry/code/purescript-eff-object/src/EffObject.purs","end":[112,20]}},{"children":[],"comments":"Read a property from an `EffObject`.\n","title":"readProperty","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["access",{"tag":"ForAll","contents":["name",{"tag":"ForAll","contents":["props'",{"tag":"ForAll","contents":["props",{"tag":"ForAll","contents":["prop",{"tag":"ForAll","contents":["e",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Symbol"],"IsSymbol"],"constraintArgs":[{"tag":"TypeVar","contents":"name"}],"constraintData":null},{"tag":"ConstrainedType","contents":[{"constraintClass":[["EffObject"],"Readable"],"constraintArgs":[{"tag":"TypeVar","contents":"access"}],"constraintData":null},{"tag":"ConstrainedType","contents":[{"constraintClass":[["Prim"],"RowCons"],"constraintArgs":[{"tag":"TypeVar","contents":"name"},{"tag":"TypeVar","contents":"prop"},{"tag":"TypeVar","contents":"props'"},{"tag":"TypeVar","contents":"props"}],"constraintData":null},{"tag":"ConstrainedType","contents":[{"constraintClass":[["Type","Equality"],"TypeEquals"],"constraintArgs":[{"tag":"TypeVar","contents":"prop"},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"access"},{"tag":"TypeVar","contents":"a"}]}}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Symbol"],"SProxy"]},{"tag":"TypeVar","contents":"name"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["EffObject"],"EffObject"]},{"tag":"TypeVar","contents":"e"}]},{"tag":"TypeVar","contents":"props"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad","Eff"],"Eff"]},{"tag":"TypeVar","contents":"e"}]},{"tag":"TypeVar","contents":"a"}]}]}]}]}]}]}]},null]},null]},null]},null]},null]},null]},null]}},"sourceSpan":{"start":[115,1],"name":"/home/harry/code/purescript-eff-object/src/EffObject.purs","end":[123,10]}},{"children":[],"comments":"Write a property to an `EffObject`.\n","title":"writeProperty","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["access",{"tag":"ForAll","contents":["name",{"tag":"ForAll","contents":["props'",{"tag":"ForAll","contents":["props",{"tag":"ForAll","contents":["prop",{"tag":"ForAll","contents":["e",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Symbol"],"IsSymbol"],"constraintArgs":[{"tag":"TypeVar","contents":"name"}],"constraintData":null},{"tag":"ConstrainedType","contents":[{"constraintClass":[["EffObject"],"Writeable"],"constraintArgs":[{"tag":"TypeVar","contents":"access"}],"constraintData":null},{"tag":"ConstrainedType","contents":[{"constraintClass":[["Prim"],"RowCons"],"constraintArgs":[{"tag":"TypeVar","contents":"name"},{"tag":"TypeVar","contents":"prop"},{"tag":"TypeVar","contents":"props'"},{"tag":"TypeVar","contents":"props"}],"constraintData":null},{"tag":"ConstrainedType","contents":[{"constraintClass":[["Type","Equality"],"TypeEquals"],"constraintArgs":[{"tag":"TypeVar","contents":"prop"},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"access"},{"tag":"TypeVar","contents":"a"}]}}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Symbol"],"SProxy"]},{"tag":"TypeVar","contents":"name"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["EffObject"],"EffObject"]},{"tag":"TypeVar","contents":"e"}]},{"tag":"TypeVar","contents":"props"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad","Eff"],"Eff"]},{"tag":"TypeVar","contents":"e"}]},{"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}]}]}]}]}]}]}]},null]},null]},null]},null]},null]},null]},null]}},"sourceSpan":{"start":[131,1],"name":"/home/harry/code/purescript-eff-object/src/EffObject.purs","end":[140,13]}},{"children":[],"comments":"A function which should be called with a `this` value which is a specific\ntype. The `fn` type argument should generally either be an\n`EffFn` from `purescript-eff`, or a `Fn` from `purescript-functions`.\n","title":"BoundFunction","info":{"declType":"data","dataDeclType":"newtype","typeArguments":[["receiver",{"tag":"NamedKind","contents":[["Prim"],"Type"]}],["fn",{"tag":"NamedKind","contents":[["Prim"],"Type"]}]]},"sourceSpan":{"start":[150,1],"name":"/home/harry/code/purescript-eff-object/src/EffObject.purs","end":[151,21]}},{"children":[],"comments":"Wrap a function in a `BoundFunction` constructor to ensure that it may only\nbe called with a `this` value of the type `receiver`.\n","title":"mkBoundFunction","info":{"declType":"value","type":{"tag":"ForAll","contents":["receiver",{"tag":"ForAll","contents":["fn",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"fn"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["EffObject"],"BoundFunction"]},{"tag":"TypeVar","contents":"receiver"}]},{"tag":"TypeVar","contents":"fn"}]}]},null]},null]}},"sourceSpan":{"start":[155,1],"name":"/home/harry/code/purescript-eff-object/src/EffObject.purs","end":[155,71]}},{"children":[],"comments":"Run a `BoundFunction` by providing a `this` object.\n","title":"bindTo","info":{"declType":"value","type":{"tag":"ForAll","contents":["receiver",{"tag":"ForAll","contents":["fn",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"receiver"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["EffObject"],"BoundFunction"]},{"tag":"TypeVar","contents":"receiver"}]},{"tag":"TypeVar","contents":"fn"}]}]},{"tag":"TypeVar","contents":"fn"}]}]},null]},null]}},"sourceSpan":{"start":[159,1],"name":"/home/harry/code/purescript-eff-object/src/EffObject.purs","end":[159,74]}},{"children":[],"comments":"This type provides a way of saying that a `BoundFunction` which is a\nproperty of some `EffObject` should receive that `EffObject` as its `this`\nvalue when called.\n","title":"Self","info":{"declType":"data","dataDeclType":"data","typeArguments":[]},"sourceSpan":{"start":[167,1],"name":"/home/harry/code/purescript-eff-object/src/EffObject.purs","end":[167,10]}},{"children":[],"comments":null,"title":"BoundMethod","info":{"arguments":[["fn",null]],"declType":"typeSynonym","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["EffObject"],"BoundFunction"]},{"tag":"TypeConstructor","contents":[["EffObject"],"Self"]}]},{"tag":"TypeVar","contents":"fn"}]}},"sourceSpan":{"start":[172,1],"name":"/home/harry/code/purescript-eff-object/src/EffObject.purs","end":[173,26]}},{"children":[],"comments":null,"title":"bindProperty","info":{"declType":"value","type":{"tag":"ForAll","contents":["fn",{"tag":"ForAll","contents":["access",{"tag":"ForAll","contents":["name",{"tag":"ForAll","contents":["props'",{"tag":"ForAll","contents":["props",{"tag":"ForAll","contents":["prop",{"tag":"ForAll","contents":["e",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Symbol"],"IsSymbol"],"constraintArgs":[{"tag":"TypeVar","contents":"name"}],"constraintData":null},{"tag":"ConstrainedType","contents":[{"constraintClass":[["EffObject"],"Readable"],"constraintArgs":[{"tag":"TypeVar","contents":"access"}],"constraintData":null},{"tag":"ConstrainedType","contents":[{"constraintClass":[["Prim"],"RowCons"],"constraintArgs":[{"tag":"TypeVar","contents":"name"},{"tag":"TypeVar","contents":"prop"},{"tag":"TypeVar","contents":"props'"},{"tag":"TypeVar","contents":"props"}],"constraintData":null},{"tag":"ConstrainedType","contents":[{"constraintClass":[["Type","Equality"],"TypeEquals"],"constraintArgs":[{"tag":"TypeVar","contents":"prop"},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"access"},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["EffObject"],"BoundMethod"]},{"tag":"TypeVar","contents":"fn"}]}}]}}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Symbol"],"SProxy"]},{"tag":"TypeVar","contents":"name"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["EffObject"],"EffObject"]},{"tag":"TypeVar","contents":"e"}]},{"tag":"TypeVar","contents":"props"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad","Eff"],"Eff"]},{"tag":"TypeVar","contents":"e"}]},{"tag":"TypeVar","contents":"fn"}]}]}]}]}]}]}]},null]},null]},null]},null]},null]},null]},null]}},"sourceSpan":{"start":[175,1],"name":"/home/harry/code/purescript-eff-object/src/EffObject.purs","end":[183,11]}}]}],"resolvedDependencies":{"purescript-console":"3.0.0","purescript-symbols":"3.0.0","purescript-type-equality":"2.0.0","purescript-prelude":"3.0.0","purescript-unsafe-coerce":"3.0.0","purescript-eff":"3.1.0","purescript-psci-support":"3.0.0"},"version":"0.0.0","github":["hdgarrood","purescript-eff-object"],"versionTag":"v0.0.0","moduleMap":{"Data.BooleanAlgebra":"purescript-prelude","Data.Ring":"purescript-prelude","Control.Monad.Eff.Unsafe":"purescript-eff","Data.Ord":"purescript-prelude","Data.Boolean":"purescript-prelude","Data.Bounded":"purescript-prelude","Data.Show":"purescript-prelude","Control.Apply":"purescript-prelude","Control.Monad":"purescript-prelude","Control.Monad.Eff.Uncurried":"purescript-eff","Control.Bind":"purescript-prelude","Data.Symbol":"purescript-symbols","Data.HeytingAlgebra":"purescript-prelude","Data.Ord.Unsafe":"purescript-prelude","Data.Semigroup":"purescript-prelude","Control.Monad.Eff":"purescript-eff","Type.Equality":"purescript-type-equality","Data.Semiring":"purescript-prelude","Data.CommutativeRing":"purescript-prelude","Data.NaturalTransformation":"purescript-prelude","Data.Functor":"purescript-prelude","Unsafe.Coerce":"purescript-unsafe-coerce","Control.Category":"purescript-prelude","Data.Function":"purescript-prelude","Data.Field":"purescript-prelude","Data.EuclideanRing":"purescript-prelude","Prelude":"purescript-prelude","Data.Eq":"purescript-prelude","Control.Monad.Eff.Console":"purescript-console","Data.Void":"purescript-prelude","PSCI.Support":"purescript-psci-support","Data.Unit":"purescript-prelude","Data.Ordering":"purescript-prelude","Control.Monad.Eff.Class":"purescript-eff","Control.Semigroupoid":"purescript-prelude","Control.Applicative":"purescript-prelude"},"compilerVersion":"0.11.4"}