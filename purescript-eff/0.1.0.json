{"uploader":"paf31","packageMeta":{"homepage":"https://github.com/purescript/purescript-eff","repository":{"url":"git://github.com/purescript/purescript-eff.git","type":"git"},"ignore":["**/.*","bower_components","node_modules","output","test","bower.json","gulpfile.js","package.json"],"dependencies":{"purescript-prelude":"^0.1.0"},"name":"purescript-eff","keywords":["purescript"],"description":"The Eff monad, for handling native side effects"},"modules":[{"name":"Control.Monad.Eff","comments":null,"declarations":[{"children":[{"comments":null,"title":"functorEff","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":"Prelude.Functor"},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":"Control.Monad.Eff.Eff"},{"tag":"TypeVar","contents":"e"}]}]}},"sourceSpan":{"start":[32,1],"name":"src/Control/Monad/Eff.purs","end":[35,1]}},{"comments":null,"title":"applyEff","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":"Prelude.Apply"},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":"Control.Monad.Eff.Eff"},{"tag":"TypeVar","contents":"e"}]}]}},"sourceSpan":{"start":[35,1],"name":"src/Control/Monad/Eff.purs","end":[38,1]}},{"comments":null,"title":"applicativeEff","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":"Prelude.Applicative"},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":"Control.Monad.Eff.Eff"},{"tag":"TypeVar","contents":"e"}]}]}},"sourceSpan":{"start":[38,1],"name":"src/Control/Monad/Eff.purs","end":[41,1]}},{"comments":null,"title":"bindEff","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":"Prelude.Bind"},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":"Control.Monad.Eff.Eff"},{"tag":"TypeVar","contents":"e"}]}]}},"sourceSpan":{"start":[41,1],"name":"src/Control/Monad/Eff.purs","end":[44,1]}},{"comments":null,"title":"monadEff","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":"Prelude.Monad"},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":"Control.Monad.Eff.Eff"},{"tag":"TypeVar","contents":"e"}]}]}},"sourceSpan":{"start":[44,1],"name":"src/Control/Monad/Eff.purs","end":[50,1]}}],"comments":"The `Eff` type constructor is used to represent _native_ effects.\n\nSee [Handling Native Effects with the Eff Monad](https://github.com/purescript/purescript/wiki/Handling-Native-Effects-with-the-Eff-Monad) for more details.\n\nThe first type parameter is a row of effects which represents the contexts in which a computation can be run, and the second type parameter is the return type.\n","title":"Eff","fixity":null,"info":{"kind":{"tag":"FunKind","contents":[{"tag":"Row","contents":{"tag":"Bang","contents":[]}},{"tag":"FunKind","contents":[{"tag":"Star","contents":[]},{"tag":"Star","contents":[]}]}]},"declType":"externData"},"sourceSpan":{"start":[15,1],"name":"src/Control/Monad/Eff.purs","end":[17,1]}},{"children":[],"comments":"The `Pure` type synonym represents _pure_ computations, i.e. ones in which all effects have been handled.\n\nThe `runPure` function can be used to run pure computations and obtain their result.\n","title":"Pure","fixity":null,"info":{"arguments":[["a",null]],"declType":"typeSynonym","type":{"tag":"ForAll","contents":["e",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":"Control.Monad.Eff.Eff"},{"tag":"TypeVar","contents":"e"}]},{"tag":"TypeVar","contents":"a"}]},null]}},"sourceSpan":{"start":[24,1],"name":"src/Control/Monad/Eff.purs","end":[30,1]}},{"children":[],"comments":"Run a pure computation and return its result.\n\nNote: since this function has a rank-2 type, it may cause problems to apply this function using the `$` operator. The recommended approach\nis to use parentheses instead.\n","title":"runPure","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":"Prim.Function"},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":"Control.Monad.Eff.Pure"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeVar","contents":"a"}]},null]}},"sourceSpan":{"start":[30,1],"name":"src/Control/Monad/Eff.purs","end":[32,1]}},{"children":[],"comments":"Loop until a condition becomes `true`.\n\n`untilE b` is an effectful computation which repeatedly runs the effectful computation `b`,\nuntil its return value is `true`.\n","title":"untilE","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["e",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":"Prim.Function"},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":"Control.Monad.Eff.Eff"},{"tag":"TypeVar","contents":"e"}]},{"tag":"TypeConstructor","contents":"Prim.Boolean"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":"Control.Monad.Eff.Eff"},{"tag":"TypeVar","contents":"e"}]},{"tag":"TypeConstructor","contents":"Prelude.Unit"}]}]},null]}},"sourceSpan":{"start":[50,1],"name":"src/Control/Monad/Eff.purs","end":[56,1]}},{"children":[],"comments":"Loop while a condition is `true`.\n\n`whileE b m` is effectful computation which runs the effectful computation `b`. If its result is\n`true`, it runs the effectful computation `m` and loops. If not, the computation ends.\n","title":"whileE","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["e",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":"Prim.Function"},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":"Control.Monad.Eff.Eff"},{"tag":"TypeVar","contents":"e"}]},{"tag":"TypeConstructor","contents":"Prim.Boolean"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":"Prim.Function"},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":"Control.Monad.Eff.Eff"},{"tag":"TypeVar","contents":"e"}]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":"Control.Monad.Eff.Eff"},{"tag":"TypeVar","contents":"e"}]},{"tag":"TypeConstructor","contents":"Prelude.Unit"}]}]}]},null]},null]}},"sourceSpan":{"start":[56,1],"name":"src/Control/Monad/Eff.purs","end":[62,1]}},{"children":[],"comments":"Loop over a consecutive collection of numbers.\n\n`forE lo hi f` runs the computation returned by the function `f` for each of the inputs\nbetween `lo` (inclusive) and `hi` (exclusive).\n","title":"forE","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["e",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":"Prim.Function"},{"tag":"TypeConstructor","contents":"Prim.Number"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":"Prim.Function"},{"tag":"TypeConstructor","contents":"Prim.Number"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":"Prim.Function"},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":"Prim.Function"},{"tag":"TypeConstructor","contents":"Prim.Number"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":"Control.Monad.Eff.Eff"},{"tag":"TypeVar","contents":"e"}]},{"tag":"TypeConstructor","contents":"Prelude.Unit"}]}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":"Control.Monad.Eff.Eff"},{"tag":"TypeVar","contents":"e"}]},{"tag":"TypeConstructor","contents":"Prelude.Unit"}]}]}]}]},null]}},"sourceSpan":{"start":[62,1],"name":"src/Control/Monad/Eff.purs","end":[67,1]}},{"children":[],"comments":"Loop over an array of values.\n\n`foreach xs f` runs the computation returned by the function `f` for each of the inputs `xs`.\n","title":"foreachE","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["e",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":"Prim.Function"},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":"Prim.Array"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":"Prim.Function"},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":"Prim.Function"},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":"Control.Monad.Eff.Eff"},{"tag":"TypeVar","contents":"e"}]},{"tag":"TypeConstructor","contents":"Prelude.Unit"}]}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":"Control.Monad.Eff.Eff"},{"tag":"TypeVar","contents":"e"}]},{"tag":"TypeConstructor","contents":"Prelude.Unit"}]}]}]},null]},null]}},"sourceSpan":{"start":[67,1],"name":"src/Control/Monad/Eff.purs","end":[67,78]}}]},{"name":"Control.Monad.Eff.Class","comments":null,"declarations":[{"children":[{"comments":null,"title":"liftEff","info":{"declType":"typeClassMember","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":"Prim.Function"},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":"Control.Monad.Eff.Eff"},{"tag":"TypeVar","contents":"eff"}]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"m"},{"tag":"TypeVar","contents":"a"}]}]},null]}},"sourceSpan":null},{"comments":null,"title":"monadEffEff","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":"Control.Monad.Eff.Class.MonadEff"},{"tag":"TypeVar","contents":"eff"}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":"Control.Monad.Eff.Eff"},{"tag":"TypeVar","contents":"eff"}]}]}},"sourceSpan":{"start":[23,1],"name":"src/Control/Monad/Eff/Class.purs","end":[24,13]}}],"comments":"The `MonadEff` class captures those monads which support native effects.\n\nInstances are provided for `Eff` itself, and the standard monad transformers.\n\n`liftEff` can be used in any appropriate monad transformer stack to lift an action\nof type `Eff eff a` into the monad.\n\nNote that `MonadEff` is parameterized by the row of effects, so type inference can be\ntricky. It is generally recommended to either work with a polymorphic row of effects,\nor a concrete, closed row of effects such as `(trace :: Trace)`.\n","title":"MonadEff","fixity":null,"info":{"arguments":[["eff",null],["m",null]],"declType":"typeClass","superclasses":[["Prelude.Monad",[{"tag":"TypeVar","contents":"m"}]]]},"sourceSpan":{"start":[20,1],"name":"src/Control/Monad/Eff/Class.purs","end":[23,1]}}]},{"name":"Control.Monad.Eff.Unsafe","comments":null,"declarations":[{"children":[],"comments":"Change the type of an effectful computation, allowing it to be run in another context.\n\nNote: use of this function can result in arbitrary side-effects.\n","title":"unsafeInterleaveEff","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["eff2",{"tag":"ForAll","contents":["eff1",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":"Prim.Function"},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":"Control.Monad.Eff.Eff"},{"tag":"TypeVar","contents":"eff1"}]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":"Control.Monad.Eff.Eff"},{"tag":"TypeVar","contents":"eff2"}]},{"tag":"TypeVar","contents":"a"}]}]},null]},null]},null]}},"sourceSpan":{"start":[10,1],"name":"src/Control/Monad/Eff/Unsafe.purs","end":[10,82]}}]}],"resolvedDependencies":{"purescript-prelude":"0.1.0"},"bookmarks":[{"package":"purescript-prelude","item":["Prelude","Unit"]},{"package":"purescript-prelude","item":["Prelude","unit"]},{"package":"purescript-prelude","item":["Prelude","($)"]},{"package":"purescript-prelude","item":["Prelude","(#)"]},{"package":"purescript-prelude","item":["Prelude","($)"]},{"package":"purescript-prelude","item":["Prelude","(#)"]},{"package":"purescript-prelude","item":["Prelude","flip"]},{"package":"purescript-prelude","item":["Prelude","const"]},{"package":"purescript-prelude","item":["Prelude","asTypeOf"]},{"package":"purescript-prelude","item":["Prelude","otherwise"]},{"package":"purescript-prelude","item":["Prelude","Semigroupoid"]},{"package":"purescript-prelude","item":["Prelude","semigroupoidFn"]},{"package":"purescript-prelude","item":["Prelude","(>>>)"]},{"package":"purescript-prelude","item":["Prelude","(<<<)"]},{"package":"purescript-prelude","item":["Prelude","(<<<)"]},{"package":"purescript-prelude","item":["Prelude","(>>>)"]},{"package":"purescript-prelude","item":["Prelude","Category"]},{"package":"purescript-prelude","item":["Prelude","categoryFn"]},{"package":"purescript-prelude","item":["Prelude","Functor"]},{"package":"purescript-prelude","item":["Prelude","functorFn"]},{"package":"purescript-prelude","item":["Prelude","functorArray"]},{"package":"purescript-prelude","item":["Prelude","(<$>)"]},{"package":"purescript-prelude","item":["Prelude","(<#>)"]},{"package":"purescript-prelude","item":["Prelude","(<$>)"]},{"package":"purescript-prelude","item":["Prelude","(<#>)"]},{"package":"purescript-prelude","item":["Prelude","void"]},{"package":"purescript-prelude","item":["Prelude","Apply"]},{"package":"purescript-prelude","item":["Prelude","applyFn"]},{"package":"purescript-prelude","item":["Prelude","applyArray"]},{"package":"purescript-prelude","item":["Prelude","(<*>)"]},{"package":"purescript-prelude","item":["Prelude","(<*>)"]},{"package":"purescript-prelude","item":["Prelude","Applicative"]},{"package":"purescript-prelude","item":["Prelude","applicativeFn"]},{"package":"purescript-prelude","item":["Prelude","applicativeArray"]},{"package":"purescript-prelude","item":["Prelude","return"]},{"package":"purescript-prelude","item":["Prelude","liftA1"]},{"package":"purescript-prelude","item":["Prelude","Bind"]},{"package":"purescript-prelude","item":["Prelude","bindFn"]},{"package":"purescript-prelude","item":["Prelude","bindArray"]},{"package":"purescript-prelude","item":["Prelude","(>>=)"]},{"package":"purescript-prelude","item":["Prelude","(>>=)"]},{"package":"purescript-prelude","item":["Prelude","Monad"]},{"package":"purescript-prelude","item":["Prelude","monadFn"]},{"package":"purescript-prelude","item":["Prelude","monadArray"]},{"package":"purescript-prelude","item":["Prelude","liftM1"]},{"package":"purescript-prelude","item":["Prelude","ap"]},{"package":"purescript-prelude","item":["Prelude","Semigroup"]},{"package":"purescript-prelude","item":["Prelude","(<>)"]},{"package":"purescript-prelude","item":["Prelude","(++)"]},{"package":"purescript-prelude","item":["Prelude","(<>)"]},{"package":"purescript-prelude","item":["Prelude","(++)"]},{"package":"purescript-prelude","item":["Prelude","semigroupString"]},{"package":"purescript-prelude","item":["Prelude","semigroupUnit"]},{"package":"purescript-prelude","item":["Prelude","semigroupFn"]},{"package":"purescript-prelude","item":["Prelude","semigroupOrdering"]},{"package":"purescript-prelude","item":["Prelude","semigroupArray"]},{"package":"purescript-prelude","item":["Prelude","Semiring"]},{"package":"purescript-prelude","item":["Prelude","semiringInt"]},{"package":"purescript-prelude","item":["Prelude","semiringNumber"]},{"package":"purescript-prelude","item":["Prelude","semiringUnit"]},{"package":"purescript-prelude","item":["Prelude","(+)"]},{"package":"purescript-prelude","item":["Prelude","(*)"]},{"package":"purescript-prelude","item":["Prelude","(+)"]},{"package":"purescript-prelude","item":["Prelude","(*)"]},{"package":"purescript-prelude","item":["Prelude","Ring"]},{"package":"purescript-prelude","item":["Prelude","ringInt"]},{"package":"purescript-prelude","item":["Prelude","ringNumber"]},{"package":"purescript-prelude","item":["Prelude","ringUnit"]},{"package":"purescript-prelude","item":["Prelude","(-)"]},{"package":"purescript-prelude","item":["Prelude","(-)"]},{"package":"purescript-prelude","item":["Prelude","negate"]},{"package":"purescript-prelude","item":["Prelude","ModuloSemiring"]},{"package":"purescript-prelude","item":["Prelude","moduloSemiringInt"]},{"package":"purescript-prelude","item":["Prelude","moduloSemiringNumber"]},{"package":"purescript-prelude","item":["Prelude","moduloSemiringUnit"]},{"package":"purescript-prelude","item":["Prelude","(/)"]},{"package":"purescript-prelude","item":["Prelude","(/)"]},{"package":"purescript-prelude","item":["Prelude","DivisionRing"]},{"package":"purescript-prelude","item":["Prelude","divisionRingNumber"]},{"package":"purescript-prelude","item":["Prelude","divisionRingUnit"]},{"package":"purescript-prelude","item":["Prelude","Num"]},{"package":"purescript-prelude","item":["Prelude","numNumber"]},{"package":"purescript-prelude","item":["Prelude","numUnit"]},{"package":"purescript-prelude","item":["Prelude","Eq"]},{"package":"purescript-prelude","item":["Prelude","(==)"]},{"package":"purescript-prelude","item":["Prelude","(/=)"]},{"package":"purescript-prelude","item":["Prelude","(==)"]},{"package":"purescript-prelude","item":["Prelude","(/=)"]},{"package":"purescript-prelude","item":["Prelude","eqBoolean"]},{"package":"purescript-prelude","item":["Prelude","eqInt"]},{"package":"purescript-prelude","item":["Prelude","eqNumber"]},{"package":"purescript-prelude","item":["Prelude","eqChar"]},{"package":"purescript-prelude","item":["Prelude","eqString"]},{"package":"purescript-prelude","item":["Prelude","eqUnit"]},{"package":"purescript-prelude","item":["Prelude","eqArray"]},{"package":"purescript-prelude","item":["Prelude","eqOrdering"]},{"package":"purescript-prelude","item":["Prelude","Ordering"]},{"package":"purescript-prelude","item":["Prelude","Ord"]},{"package":"purescript-prelude","item":["Prelude","ordBoolean"]},{"package":"purescript-prelude","item":["Prelude","ordInt"]},{"package":"purescript-prelude","item":["Prelude","ordNumber"]},{"package":"purescript-prelude","item":["Prelude","ordString"]},{"package":"purescript-prelude","item":["Prelude","ordChar"]},{"package":"purescript-prelude","item":["Prelude","ordUnit"]},{"package":"purescript-prelude","item":["Prelude","ordArray"]},{"package":"purescript-prelude","item":["Prelude","ordOrdering"]},{"package":"purescript-prelude","item":["Prelude","(<)"]},{"package":"purescript-prelude","item":["Prelude","(>)"]},{"package":"purescript-prelude","item":["Prelude","(<=)"]},{"package":"purescript-prelude","item":["Prelude","(>=)"]},{"package":"purescript-prelude","item":["Prelude","(<)"]},{"package":"purescript-prelude","item":["Prelude","(>)"]},{"package":"purescript-prelude","item":["Prelude","(<=)"]},{"package":"purescript-prelude","item":["Prelude","(>=)"]},{"package":"purescript-prelude","item":["Prelude","Bounded"]},{"package":"purescript-prelude","item":["Prelude","boundedBoolean"]},{"package":"purescript-prelude","item":["Prelude","boundedUnit"]},{"package":"purescript-prelude","item":["Prelude","boundedOrdering"]},{"package":"purescript-prelude","item":["Prelude","boundedInt"]},{"package":"purescript-prelude","item":["Prelude","boundedFn"]},{"package":"purescript-prelude","item":["Prelude","BoundedOrd"]},{"package":"purescript-prelude","item":["Prelude","boundedOrdBoolean"]},{"package":"purescript-prelude","item":["Prelude","boundedOrdUnit"]},{"package":"purescript-prelude","item":["Prelude","boundedOrdOrdering"]},{"package":"purescript-prelude","item":["Prelude","boundedOrdInt"]},{"package":"purescript-prelude","item":["Prelude","BooleanAlgebra"]},{"package":"purescript-prelude","item":["Prelude","booleanAlgebraBoolean"]},{"package":"purescript-prelude","item":["Prelude","booleanAlgebraUnit"]},{"package":"purescript-prelude","item":["Prelude","booleanAlgebraFn"]},{"package":"purescript-prelude","item":["Prelude","(&&)"]},{"package":"purescript-prelude","item":["Prelude","(||)"]},{"package":"purescript-prelude","item":["Prelude","(&&)"]},{"package":"purescript-prelude","item":["Prelude","(||)"]},{"package":"purescript-prelude","item":["Prelude","Show"]},{"package":"purescript-prelude","item":["Prelude","showBoolean"]},{"package":"purescript-prelude","item":["Prelude","showInt"]},{"package":"purescript-prelude","item":["Prelude","showNumber"]},{"package":"purescript-prelude","item":["Prelude","showChar"]},{"package":"purescript-prelude","item":["Prelude","showString"]},{"package":"purescript-prelude","item":["Prelude","showUnit"]},{"package":"purescript-prelude","item":["Prelude","showArray"]},{"package":"purescript-prelude","item":["Prelude","showOrdering"]},{"package":null,"item":["Control.Monad.Eff","Eff"]},{"package":null,"item":["Control.Monad.Eff","Pure"]},{"package":null,"item":["Control.Monad.Eff","runPure"]},{"package":null,"item":["Control.Monad.Eff","functorEff"]},{"package":null,"item":["Control.Monad.Eff","applyEff"]},{"package":null,"item":["Control.Monad.Eff","applicativeEff"]},{"package":null,"item":["Control.Monad.Eff","bindEff"]},{"package":null,"item":["Control.Monad.Eff","monadEff"]},{"package":null,"item":["Control.Monad.Eff","untilE"]},{"package":null,"item":["Control.Monad.Eff","whileE"]},{"package":null,"item":["Control.Monad.Eff","forE"]},{"package":null,"item":["Control.Monad.Eff","foreachE"]},{"package":null,"item":["Control.Monad.Eff.Class","MonadEff"]},{"package":null,"item":["Control.Monad.Eff.Class","monadEffEff"]},{"package":null,"item":["Control.Monad.Eff.Unsafe","unsafeInterleaveEff"]}],"version":"0.1.0","github":["purescript","purescript-eff"],"versionTag":"v0.1.0"}