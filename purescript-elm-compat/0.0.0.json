{"uploader":"hdgarrood","packageMeta":{"homepage":"https://github.com/rgrempel/purescript-elm-compat","repository":{"url":"git://github.com/rgrempel/purescript-elm-compat.git","type":"git"},"ignore":["**/.*","node_modules","bower_components","output"],"devDependencies":{"purescript-quickcheck-laws":"~0.1.1","purescript-generics":"~0.7.2","purescript-test-unit":"~4.1.0"},"authors":[{"email":"rgrempel@gmail.com","name":"Ryan Rempel"}],"dependencies":{"purescript-maybe":"~0.3.5","purescript-foldable-traversable":"~0.4.2","purescript-debug":"~0.1.3","purescript-sequences":"~0.5.0","purescript-prelude":"~0.1.5","purescript-integers":"~0.2.1","purescript-orders":"~0.1.1","purescript-int-53":"~1.0.0","purescript-partial":"~1.1.0","purescript-strings":"~0.7.1","purescript-foreign":"~0.7.2","purescript-sets":"~0.5.7","purescript-lists":"~0.7.10","purescript-datetime":"~0.9.1"},"name":"purescript-elm-compat","keywords":["purescript"],"license":["MIT"],"description":"Basic Elm modules in Purescript"},"modules":[{"reExports":[],"name":"Elm.Apply","comments":"Elm modules typically use `map2` through `map5` for what Purescript's\n`Apply` class would call `lift2` through `lift5`.\n\nSo, we define `map2` through `map5` here as synonyms for `lift2` through\n`lift5`. We also re-export these in the individual Elm modules that use\nthem, so that that the API matches with the Elm API.\n\nWe also make `andMap` a synonym for Purescript's `apply`.\n","declarations":[{"children":[],"comments":"Map a function of two arguments over some container type.\n\nThe equivalent of Purescript's `lift2`.\n","title":"map2","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["f",{"tag":"ForAll","contents":["c",{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[[[[["Prelude"],"Apply"],[{"tag":"TypeVar","contents":"f"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeVar","contents":"c"}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"c"}]}]}]}]}]},null]},null]},null]},null]}},"sourceSpan":{"start":[24,1],"name":"src/Elm/Apply.purs","end":[25,1]}},{"children":[],"comments":"Map a function of three arguments over some container type.\n\nThe equivalent of Purescript's `lift3`.\n","title":"map3","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["f",{"tag":"ForAll","contents":["d",{"tag":"ForAll","contents":["c",{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[[[[["Prelude"],"Apply"],[{"tag":"TypeVar","contents":"f"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"c"}]},{"tag":"TypeVar","contents":"d"}]}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"c"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"d"}]}]}]}]}]}]},null]},null]},null]},null]},null]}},"sourceSpan":{"start":[31,1],"name":"src/Elm/Apply.purs","end":[32,1]}},{"children":[],"comments":"Map a function of four arguments over some container type.\n\nThe equivalent of Purescript's `lift4`.\n","title":"map4","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["f",{"tag":"ForAll","contents":["e",{"tag":"ForAll","contents":["d",{"tag":"ForAll","contents":["c",{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[[[[["Prelude"],"Apply"],[{"tag":"TypeVar","contents":"f"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"c"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"d"}]},{"tag":"TypeVar","contents":"e"}]}]}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"c"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"d"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"e"}]}]}]}]}]}]}]},null]},null]},null]},null]},null]},null]}},"sourceSpan":{"start":[38,1],"name":"src/Elm/Apply.purs","end":[39,1]}},{"children":[],"comments":"Map a function of five arguments over some container type.\n\nThe equivalent of Purescript's `lift5`.\n","title":"map5","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["g",{"tag":"ForAll","contents":["f",{"tag":"ForAll","contents":["e",{"tag":"ForAll","contents":["d",{"tag":"ForAll","contents":["c",{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[[[[["Prelude"],"Apply"],[{"tag":"TypeVar","contents":"f"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"c"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"d"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"e"}]},{"tag":"TypeVar","contents":"g"}]}]}]}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"c"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"d"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"e"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"g"}]}]}]}]}]}]}]}]},null]},null]},null]},null]},null]},null]},null]}},"sourceSpan":{"start":[45,1],"name":"src/Elm/Apply.purs","end":[46,1]}},{"children":[],"comments":"Map a function in a container to a value in a container.\n\nThis is the equivalent of Purescript's `apply`.\n","title":"andMap","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["f",{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[[[[["Prelude"],"Apply"],[{"tag":"TypeVar","contents":"f"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"b"}]}]}]}]},null]},null]},null]}},"sourceSpan":{"start":[52,1],"name":"src/Elm/Apply.purs","end":[53,1]}}]},{"reExports":[{"moduleName":["Data","Foldable"],"declarations":[{"children":[],"comments":null,"title":"foldr","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["f",{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[[[[null,"Foldable"],[{"tag":"TypeVar","contents":"f"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeVar","contents":"b"}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeVar","contents":"b"}]}]}]}]},null]},null]},null]}},"sourceSpan":null}]},{"moduleName":["Data","Sequence"],"declarations":[{"children":[],"comments":"A sequence with no elements.\n","title":"empty","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Sequence"],"Seq"]},{"tag":"TypeVar","contents":"a"}]},null]}},"sourceSpan":{"start":[152,1],"name":"bower_components/purescript-sequences/src/Data/Sequence.purs","end":[153,1]}},{"children":[],"comments":"O(n). Create a new Seq which contains only those elements of the input\nSeq which satisfy the given predicate.\n","title":"filter","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Sequence"],"Seq"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Sequence"],"Seq"]},{"tag":"TypeVar","contents":"a"}]}]}]},null]}},"sourceSpan":{"start":[323,1],"name":"bower_components/purescript-sequences/src/Data/Sequence.purs","end":[324,1]}},{"children":[],"comments":"O(1). The number of elements in the sequence.\n","title":"length","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Sequence"],"Seq"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},null]}},"sourceSpan":{"start":[184,1],"name":"bower_components/purescript-sequences/src/Data/Sequence.purs","end":[185,1]}}]},{"moduleName":["Elm","Foldable"],"declarations":[{"children":[],"comments":"Reduce a container from the left.\n\nEquivalent to Purescript's `foldl`, but the function you supply is flipped.\n","title":"foldl","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["f",{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[[[[["Data","Foldable"],"Foldable"],[{"tag":"TypeVar","contents":"f"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeVar","contents":"b"}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeVar","contents":"b"}]}]}]}]},null]},null]},null]}},"sourceSpan":{"start":[15,1],"name":"src/Elm/Foldable.purs","end":[16,1]}}]},{"moduleName":["Prelude"],"declarations":[{"children":[],"comments":null,"title":"map","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["f",{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[[[[null,"Functor"],[{"tag":"TypeVar","contents":"f"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"b"}]}]}]}]},null]},null]},null]}},"sourceSpan":null},{"children":[],"comments":null,"title":"append","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[[[[null,"Semigroup"],[{"tag":"TypeVar","contents":"a"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"a"}]}]}]},null]}},"sourceSpan":null}]}],"name":"Elm.Array","comments":"A library for fast immutable arrays. The elements in an array must have the\nsame type.\n\nThis is based on the Purescript `Data.Sequence` package -- an `Array` is a\n`Data.Sequence.Seq`, so you can use additional functions from that package\nas well.\n\nNote that the Purescript primitive `Array` type is something different --\nit is actually a Javascript array.\n","declarations":[{"children":[],"comments":"The `Array` type is synonym for `Data.Sequence.Seq`.\n","title":"Array","fixity":null,"info":{"arguments":[],"declType":"typeSynonym","type":{"tag":"TypeConstructor","contents":[["Data","Sequence"],"Seq"]}},"sourceSpan":{"start":[53,1],"name":"src/Elm/Array.purs","end":[62,1]}},{"children":[],"comments":"Initialize an array. `initialize n f` creates an array of length `n` with\nthe element at index `i` initialized to the result of `(f i)`.\n\n    initialize 4 identity    == fromList [0,1,2,3]\n    initialize 4 (\\n -> n*n) == fromList [0,1,4,9]\n    initialize 4 (always 0)  == fromList [0,0,0,0]\n","title":"initialize","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeVar","contents":"a"}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Elm","Array"],"Array"]},{"tag":"TypeVar","contents":"a"}]}]}]},null]}},"sourceSpan":{"start":[62,1],"name":"src/Elm/Array.purs","end":[63,1]}},{"children":[],"comments":"Creates an array with a given length, filled with a default element.\n\n    repeat 5 0     == fromList [0,0,0,0,0]\n    repeat 3 \"cat\" == fromList [\"cat\",\"cat\",\"cat\"]\n\nNotice that `repeat 3 x` is the same as `initialize 3 (always x)`.\n","title":"repeat","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Elm","Array"],"Array"]},{"tag":"TypeVar","contents":"a"}]}]}]},null]}},"sourceSpan":{"start":[77,1],"name":"src/Elm/Array.purs","end":[78,1]}},{"children":[],"comments":"Create an array from a list.\n\nNote that this actually works with any `Foldable`.\n","title":"fromList","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["f",{"tag":"ConstrainedType","contents":[[[[["Data","Foldable"],"Foldable"],[{"tag":"TypeVar","contents":"f"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Elm","Array"],"Array"]},{"tag":"TypeVar","contents":"a"}]}]}]},null]},null]}},"sourceSpan":{"start":[85,1],"name":"src/Elm/Array.purs","end":[86,1]}},{"children":[],"comments":"Create a list of elements from an array.\n\n    toList (fromList [3,5,8]) == [3,5,8]\n\nNote that this actually works with any type that is both a\n`Functor` and an `Unfoldable`.\n","title":"toList","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["f",{"tag":"ConstrainedType","contents":[[[[["Prelude"],"Functor"],[{"tag":"TypeVar","contents":"f"}]],[[["Data","Unfoldable"],"Unfoldable"],[{"tag":"TypeVar","contents":"f"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Elm","Array"],"Array"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}]}]},null]},null]}},"sourceSpan":{"start":[95,1],"name":"src/Elm/Array.purs","end":[96,1]}},{"children":[],"comments":"Create an indexed list from an array. Each element of the array will be\npaired with its index.\n\n    toIndexedList (fromList [\"cat\",\"dog\"]) == [Tuple 0 \"cat\", Tuple 1 \"dog\"]\n\nThe container in the return type is defined polymorphically to accommodate\n`List` and Purescript's `Array`, among others.\n","title":"toIndexedList","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["f",{"tag":"ConstrainedType","contents":[[[[["Prelude"],"Applicative"],[{"tag":"TypeVar","contents":"f"}]],[[["Data","Monoid"],"Monoid"],[{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Tuple"],"Tuple"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeVar","contents":"a"}]}}]}}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Elm","Array"],"Array"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Tuple"],"Tuple"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeVar","contents":"a"}]}}]}]}]},null]},null]}},"sourceSpan":{"start":[106,1],"name":"src/Elm/Array.purs","end":[107,1]}},{"children":[],"comments":"Apply a function on every element with its index as first argument.\n\n    indexedMap (*) (fromList [5,5,5]) == fromList [0,5,10]\n","title":"indexedMap","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Elm","Array"],"Array"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Elm","Array"],"Array"]},{"tag":"TypeVar","contents":"b"}]}]}]},null]},null]}},"sourceSpan":{"start":[117,1],"name":"src/Elm/Array.purs","end":[118,1]}},{"children":[],"comments":"Push an element to the end of an array.\n\n    push 3 (fromList [1,2]) == fromList [1,2,3]\n\nEquivalent to Purescript's `snoc`, but with the arguments flipped.\n","title":"push","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Elm","Array"],"Array"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Elm","Array"],"Array"]},{"tag":"TypeVar","contents":"a"}]}]}]},null]}},"sourceSpan":{"start":[130,1],"name":"src/Elm/Array.purs","end":[131,1]}},{"children":[],"comments":"Return Just the element at the index or Nothing if the index is out of range.\n\n    get  0 (fromList [0,1,2]) == Just 0\n    get  2 (fromList [0,1,2]) == Just 2\n    get  5 (fromList [0,1,2]) == Nothing\n    get -1 (fromList [0,1,2]) == Nothing\n\nEquivalent to Purescript's `index`.\n","title":"get","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Elm","Array"],"Array"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeVar","contents":"a"}]}]}]},null]}},"sourceSpan":{"start":[142,1],"name":"src/Elm/Array.purs","end":[143,1]}},{"children":[],"comments":"Set the element at a particular index. Returns an updated array.\nIf the index is out of range, the array is unaltered.\n\n    set 1 7 (fromList [1,2,3]) == fromList [1,7,3]\n\nEquivalent to Purescript's `replace`, but with the arguments flipped.\n","title":"set","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Elm","Array"],"Array"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Elm","Array"],"Array"]},{"tag":"TypeVar","contents":"a"}]}]}]}]},null]}},"sourceSpan":{"start":[152,1],"name":"src/Elm/Array.purs","end":[153,1]}},{"children":[],"comments":"Get a sub-section of an array: `(slice start end array)`. The `start` is a\nzero-based index where we will start our slice. The `end` is a zero-based index\nthat indicates the end of the slice. The slice extracts up to but not including\n`end`.\n\n    slice  0  3 (fromList [0,1,2,3,4]) == fromList [0,1,2]\n    slice  1  4 (fromList [0,1,2,3,4]) == fromList [1,2,3]\n\nBoth the `start` and `end` indexes can be negative, indicating an offset from\nthe end of the array.\n\n    slice  1 -1 (fromList [0,1,2,3,4]) == fromList [1,2,3]\n    slice -2  5 (fromList [0,1,2,3,4]) == fromList [3,4]\n\nThis makes it pretty easy to `pop` the last element off of an array: `slice 0 -1 array`\n","title":"slice","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Elm","Array"],"Array"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Elm","Array"],"Array"]},{"tag":"TypeVar","contents":"a"}]}]}]}]},null]}},"sourceSpan":{"start":[171,1],"name":"src/Elm/Array.purs","end":[172,1]}}]},{"reExports":[{"moduleName":["Data","Int"],"declarations":[{"children":[],"comments":"Convert a `Number` to an `Int`, by taking the closest integer equal to or\nless than the argument. Values outside the `Int` range are clamped.\n","title":"floor","fixity":null,"info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}},"sourceSpan":{"start":[32,1],"name":"bower_components/purescript-integers/src/Data/Int.purs","end":[33,1]}},{"children":[],"comments":"Convert a `Number` to an `Int`, by taking the nearest integer to the\nargument. Values outside the `Int` range are clamped.\n","title":"round","fixity":null,"info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}},"sourceSpan":{"start":[42,1],"name":"bower_components/purescript-integers/src/Data/Int.purs","end":[43,1]}}]},{"moduleName":["Data","Ord"],"declarations":[{"children":[],"comments":"Clamp a value between a minimum and a maximum. For example:\n\n    let f = clamp 0 10\n    f (-5) == 0\n    f 5    == 5\n    f 15   == 10\n\n","title":"clamp","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[[[[["Prelude"],"Ord"],[{"tag":"TypeVar","contents":"a"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"a"}]}]}]}]},null]}},"sourceSpan":{"start":[43,1],"name":"bower_components/purescript-orders/src/Data/Ord.purs","end":[44,1]}},{"children":[],"comments":"Take the maximum of two values. If they compare to `EQ`, the first\nargument is chosen.\n","title":"max","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[[[[["Prelude"],"Ord"],[{"tag":"TypeVar","contents":"a"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"a"}]}]}]},null]}},"sourceSpan":{"start":[67,1],"name":"bower_components/purescript-orders/src/Data/Ord.purs","end":[68,1]}},{"children":[],"comments":"Take the minimum of two values. If they compare to `EQ`, the first\nargument is chosen.\n","title":"min","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[[[[["Prelude"],"Ord"],[{"tag":"TypeVar","contents":"a"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"a"}]}]}]},null]}},"sourceSpan":{"start":[58,1],"name":"bower_components/purescript-orders/src/Data/Ord.purs","end":[59,1]}}]},{"moduleName":["Data","Tuple"],"declarations":[{"children":[{"comments":null,"title":"Tuple","info":{"arguments":[{"tag":"TypeVar","contents":"a"},{"tag":"TypeVar","contents":"b"}],"declType":"dataConstructor"},"sourceSpan":null},{"comments":"Allows `Tuple`s to be rendered as a string with `show` whenever there are\n`Show` instances for both component types.\n","title":"showTuple","info":{"declType":"instance","dependencies":[[[["Prelude"],"Show"],[{"tag":"TypeVar","contents":"a"}]],[[["Prelude"],"Show"],[{"tag":"TypeVar","contents":"b"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prelude"],"Show"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Tuple"],"Tuple"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}},"sourceSpan":{"start":[26,1],"name":"bower_components/purescript-tuples/src/Data/Tuple.purs","end":[31,1]}},{"comments":"Allows `Tuple`s to be checked for equality with `==` and `/=` whenever\nthere are `Eq` instances for both component types.\n","title":"eqTuple","info":{"declType":"instance","dependencies":[[[["Prelude"],"Eq"],[{"tag":"TypeVar","contents":"a"}]],[[["Prelude"],"Eq"],[{"tag":"TypeVar","contents":"b"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prelude"],"Eq"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Tuple"],"Tuple"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}},"sourceSpan":{"start":[31,1],"name":"bower_components/purescript-tuples/src/Data/Tuple.purs","end":[38,1]}},{"comments":"Allows `Tuple`s to be compared with `compare`, `>`, `>=`, `<` and `<=`\nwhenever there are `Ord` instances for both component types. To obtain\nthe result, the `fst`s are `compare`d, and if they are `EQ`ual, the\n`snd`s are `compare`d.\n","title":"ordTuple","info":{"declType":"instance","dependencies":[[[["Prelude"],"Ord"],[{"tag":"TypeVar","contents":"a"}]],[[["Prelude"],"Ord"],[{"tag":"TypeVar","contents":"b"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prelude"],"Ord"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Tuple"],"Tuple"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}},"sourceSpan":{"start":[38,1],"name":"bower_components/purescript-tuples/src/Data/Tuple.purs","end":[43,1]}},{"comments":null,"title":"boundedTuple","info":{"declType":"instance","dependencies":[[[["Prelude"],"Bounded"],[{"tag":"TypeVar","contents":"a"}]],[[["Prelude"],"Bounded"],[{"tag":"TypeVar","contents":"b"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prelude"],"Bounded"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Tuple"],"Tuple"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}},"sourceSpan":{"start":[43,1],"name":"bower_components/purescript-tuples/src/Data/Tuple.purs","end":[47,1]}},{"comments":null,"title":"boundedOrdTuple","info":{"declType":"instance","dependencies":[[[["Prelude"],"BoundedOrd"],[{"tag":"TypeVar","contents":"a"}]],[[["Prelude"],"BoundedOrd"],[{"tag":"TypeVar","contents":"b"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prelude"],"BoundedOrd"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Tuple"],"Tuple"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}},"sourceSpan":{"start":[47,1],"name":"bower_components/purescript-tuples/src/Data/Tuple.purs","end":[49,1]}},{"comments":null,"title":"semigroupoidTuple","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prelude"],"Semigroupoid"]},{"tag":"TypeConstructor","contents":[["Data","Tuple"],"Tuple"]}]}},"sourceSpan":{"start":[49,1],"name":"bower_components/purescript-tuples/src/Data/Tuple.purs","end":[58,1]}},{"comments":"The `Semigroup` instance enables use of the associative operator `<>` on\n`Tuple`s whenever there are `Semigroup` instances for the component\ntypes. The `<>` operator is applied pairwise, so:\n```purescript\n(Tuple a1 b1) <> (Tuple a2 b2) = Tuple (a1 <> a2) (b1 <> b2)\n```\n","title":"semigroupTuple","info":{"declType":"instance","dependencies":[[[["Prelude"],"Semigroup"],[{"tag":"TypeVar","contents":"a"}]],[[["Prelude"],"Semigroup"],[{"tag":"TypeVar","contents":"b"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prelude"],"Semigroup"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Tuple"],"Tuple"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}},"sourceSpan":{"start":[58,1],"name":"bower_components/purescript-tuples/src/Data/Tuple.purs","end":[61,1]}},{"comments":null,"title":"monoidTuple","info":{"declType":"instance","dependencies":[[[["Data","Monoid"],"Monoid"],[{"tag":"TypeVar","contents":"a"}]],[[["Data","Monoid"],"Monoid"],[{"tag":"TypeVar","contents":"b"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Monoid"],"Monoid"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Tuple"],"Tuple"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}},"sourceSpan":{"start":[61,1],"name":"bower_components/purescript-tuples/src/Data/Tuple.purs","end":[64,1]}},{"comments":null,"title":"semiringTuple","info":{"declType":"instance","dependencies":[[[["Prelude"],"Semiring"],[{"tag":"TypeVar","contents":"a"}]],[[["Prelude"],"Semiring"],[{"tag":"TypeVar","contents":"b"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prelude"],"Semiring"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Tuple"],"Tuple"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}},"sourceSpan":{"start":[64,1],"name":"bower_components/purescript-tuples/src/Data/Tuple.purs","end":[70,1]}},{"comments":null,"title":"moduloSemiringTuple","info":{"declType":"instance","dependencies":[[[["Prelude"],"ModuloSemiring"],[{"tag":"TypeVar","contents":"a"}]],[[["Prelude"],"ModuloSemiring"],[{"tag":"TypeVar","contents":"b"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prelude"],"ModuloSemiring"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Tuple"],"Tuple"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}},"sourceSpan":{"start":[70,1],"name":"bower_components/purescript-tuples/src/Data/Tuple.purs","end":[74,1]}},{"comments":null,"title":"ringTuple","info":{"declType":"instance","dependencies":[[[["Prelude"],"Ring"],[{"tag":"TypeVar","contents":"a"}]],[[["Prelude"],"Ring"],[{"tag":"TypeVar","contents":"b"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prelude"],"Ring"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Tuple"],"Tuple"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}},"sourceSpan":{"start":[74,1],"name":"bower_components/purescript-tuples/src/Data/Tuple.purs","end":[77,1]}},{"comments":null,"title":"divisionRingTuple","info":{"declType":"instance","dependencies":[[[["Prelude"],"DivisionRing"],[{"tag":"TypeVar","contents":"a"}]],[[["Prelude"],"DivisionRing"],[{"tag":"TypeVar","contents":"b"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prelude"],"DivisionRing"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Tuple"],"Tuple"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}},"sourceSpan":{"start":[77,1],"name":"bower_components/purescript-tuples/src/Data/Tuple.purs","end":[79,1]}},{"comments":null,"title":"numTuple","info":{"declType":"instance","dependencies":[[[["Prelude"],"Num"],[{"tag":"TypeVar","contents":"a"}]],[[["Prelude"],"Num"],[{"tag":"TypeVar","contents":"b"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prelude"],"Num"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Tuple"],"Tuple"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}},"sourceSpan":{"start":[79,1],"name":"bower_components/purescript-tuples/src/Data/Tuple.purs","end":[81,1]}},{"comments":null,"title":"booleanAlgebraTuple","info":{"declType":"instance","dependencies":[[[["Prelude"],"BooleanAlgebra"],[{"tag":"TypeVar","contents":"a"}]],[[["Prelude"],"BooleanAlgebra"],[{"tag":"TypeVar","contents":"b"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prelude"],"BooleanAlgebra"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Tuple"],"Tuple"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}},"sourceSpan":{"start":[81,1],"name":"bower_components/purescript-tuples/src/Data/Tuple.purs","end":[92,1]}},{"comments":"The `Functor` instance allows functions to transform the contents of a\n`Tuple` with the `<$>` operator, applying the function to the second\ncomponent, so:\n```purescript\nf <$> (Tuple x y) = Tuple x (f y)\n````\n","title":"functorTuple","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prelude"],"Functor"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Tuple"],"Tuple"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[92,1],"name":"bower_components/purescript-tuples/src/Data/Tuple.purs","end":[95,1]}},{"comments":null,"title":"invariantTuple","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Functor","Invariant"],"Invariant"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Tuple"],"Tuple"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[95,1],"name":"bower_components/purescript-tuples/src/Data/Tuple.purs","end":[98,1]}},{"comments":null,"title":"bifunctorTuple","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Bifunctor"],"Bifunctor"]},{"tag":"TypeConstructor","contents":[["Data","Tuple"],"Tuple"]}]}},"sourceSpan":{"start":[98,1],"name":"bower_components/purescript-tuples/src/Data/Tuple.purs","end":[107,1]}},{"comments":"The `Functor` instance allows functions to transform the contents of a\n`Tuple` with the `<*>` operator whenever there is a `Semigroup` instance\nfor the `fst` component, so:\n```purescript\n(Tuple a1 f) <*> (Tuple a2 x) == Tuple (a1 <> a2) (f x)\n```\n","title":"applyTuple","info":{"declType":"instance","dependencies":[[[["Prelude"],"Semigroup"],[{"tag":"TypeVar","contents":"a"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prelude"],"Apply"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Tuple"],"Tuple"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[107,1],"name":"bower_components/purescript-tuples/src/Data/Tuple.purs","end":[110,1]}},{"comments":null,"title":"biapplyTuple","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Biapply"],"Biapply"]},{"tag":"TypeConstructor","contents":[["Data","Tuple"],"Tuple"]}]}},"sourceSpan":{"start":[110,1],"name":"bower_components/purescript-tuples/src/Data/Tuple.purs","end":[113,1]}},{"comments":null,"title":"applicativeTuple","info":{"declType":"instance","dependencies":[[[["Data","Monoid"],"Monoid"],[{"tag":"TypeVar","contents":"a"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prelude"],"Applicative"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Tuple"],"Tuple"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[113,1],"name":"bower_components/purescript-tuples/src/Data/Tuple.purs","end":[116,1]}},{"comments":null,"title":"biapplicativeTuple","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Biapplicative"],"Biapplicative"]},{"tag":"TypeConstructor","contents":[["Data","Tuple"],"Tuple"]}]}},"sourceSpan":{"start":[116,1],"name":"bower_components/purescript-tuples/src/Data/Tuple.purs","end":[119,1]}},{"comments":null,"title":"bindTuple","info":{"declType":"instance","dependencies":[[[["Prelude"],"Semigroup"],[{"tag":"TypeVar","contents":"a"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prelude"],"Bind"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Tuple"],"Tuple"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[119,1],"name":"bower_components/purescript-tuples/src/Data/Tuple.purs","end":[123,1]}},{"comments":null,"title":"monadTuple","info":{"declType":"instance","dependencies":[[[["Data","Monoid"],"Monoid"],[{"tag":"TypeVar","contents":"a"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prelude"],"Monad"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Tuple"],"Tuple"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[123,1],"name":"bower_components/purescript-tuples/src/Data/Tuple.purs","end":[125,1]}},{"comments":null,"title":"extendTuple","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Extend"],"Extend"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Tuple"],"Tuple"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[125,1],"name":"bower_components/purescript-tuples/src/Data/Tuple.purs","end":[128,1]}},{"comments":null,"title":"comonadTuple","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Comonad"],"Comonad"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Tuple"],"Tuple"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[128,1],"name":"bower_components/purescript-tuples/src/Data/Tuple.purs","end":[131,1]}},{"comments":null,"title":"lazyTuple","info":{"declType":"instance","dependencies":[[[["Control","Lazy"],"Lazy"],[{"tag":"TypeVar","contents":"a"}]],[[["Control","Lazy"],"Lazy"],[{"tag":"TypeVar","contents":"b"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Lazy"],"Lazy"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Tuple"],"Tuple"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}},"sourceSpan":{"start":[131,1],"name":"bower_components/purescript-tuples/src/Data/Tuple.purs","end":[134,1]}},{"comments":null,"title":"foldableTuple","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Foldable"],"Foldable"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Tuple"],"Tuple"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[134,1],"name":"bower_components/purescript-tuples/src/Data/Tuple.purs","end":[139,1]}},{"comments":null,"title":"bifoldableTuple","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Bifoldable"],"Bifoldable"]},{"tag":"TypeConstructor","contents":[["Data","Tuple"],"Tuple"]}]}},"sourceSpan":{"start":[139,1],"name":"bower_components/purescript-tuples/src/Data/Tuple.purs","end":[144,1]}},{"comments":null,"title":"traversableTuple","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Traversable"],"Traversable"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Tuple"],"Tuple"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[144,1],"name":"bower_components/purescript-tuples/src/Data/Tuple.purs","end":[148,1]}},{"comments":null,"title":"bitraversableTuple","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Bitraversable"],"Bitraversable"]},{"tag":"TypeConstructor","contents":[["Data","Tuple"],"Tuple"]}]}},"sourceSpan":{"start":[148,1],"name":"bower_components/purescript-tuples/src/Data/Tuple.purs","end":[153,1]}}],"comments":"A simple product type for wrapping a pair of component values.\n","title":"Tuple","fixity":null,"info":{"declType":"data","dataDeclType":"data","typeArguments":[["a",null],["b",null]]},"sourceSpan":{"start":[22,1],"name":"bower_components/purescript-tuples/src/Data/Tuple.purs","end":[26,1]}},{"children":[],"comments":"Turn a function that expects a tuple into a function of two arguments.\n","title":"curry","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["c",{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Tuple"],"Tuple"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeVar","contents":"c"}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeVar","contents":"c"}]}]}]},null]},null]},null]}},"sourceSpan":{"start":[161,1],"name":"bower_components/purescript-tuples/src/Data/Tuple.purs","end":[162,1]}},{"children":[],"comments":"Returns the first component of a tuple.\n","title":"fst","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Tuple"],"Tuple"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeVar","contents":"a"}]},null]},null]}},"sourceSpan":{"start":[153,1],"name":"bower_components/purescript-tuples/src/Data/Tuple.purs","end":[154,1]}},{"children":[],"comments":"Returns the second component of a tuple.\n","title":"snd","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Tuple"],"Tuple"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeVar","contents":"b"}]},null]},null]}},"sourceSpan":{"start":[157,1],"name":"bower_components/purescript-tuples/src/Data/Tuple.purs","end":[158,1]}},{"children":[],"comments":"Turn a function of two arguments into a function that expects a tuple.\n","title":"uncurry","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["c",{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeVar","contents":"c"}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Tuple"],"Tuple"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeVar","contents":"c"}]}]},null]},null]},null]}},"sourceSpan":{"start":[165,1],"name":"bower_components/purescript-tuples/src/Data/Tuple.purs","end":[166,1]}}]},{"moduleName":["Global"],"declarations":[{"children":[],"comments":"Test whether a number is NaN\n","title":"isNaN","fixity":null,"info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}},"sourceSpan":{"start":[9,1],"name":"bower_components/purescript-globals/src/Global.purs","end":[12,1]}}]},{"moduleName":["Math"],"declarations":[{"children":[],"comments":"Returns the inverse cosine of the argument.\n","title":"acos","fixity":null,"info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]},{"tag":"TypeConstructor","contents":[["Math"],"Radians"]}]}},"sourceSpan":{"start":[12,1],"name":"bower_components/purescript-math/src/Math.purs","end":[15,1]}},{"children":[],"comments":"Returns the inverse sine of the argument.\n","title":"asin","fixity":null,"info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]},{"tag":"TypeConstructor","contents":[["Math"],"Radians"]}]}},"sourceSpan":{"start":[15,1],"name":"bower_components/purescript-math/src/Math.purs","end":[18,1]}},{"children":[],"comments":"Returns the inverse tangent of the argument.\n","title":"atan","fixity":null,"info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]},{"tag":"TypeConstructor","contents":[["Math"],"Radians"]}]}},"sourceSpan":{"start":[18,1],"name":"bower_components/purescript-math/src/Math.purs","end":[25,1]}},{"children":[],"comments":"Four-quadrant tangent inverse. Given the arguments `y` and `x`, returns\nthe inverse tangent of `y / x`, where the signs of both arguments are used\nto determine the sign of the result.\nIf the first argument is negative, the result will be negative.\nThe result is the angle between the positive x axis and  a point `(x, y)`.\n","title":"atan2","fixity":null,"info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]},{"tag":"TypeConstructor","contents":[["Math"],"Radians"]}]}]}},"sourceSpan":{"start":[25,1],"name":"bower_components/purescript-math/src/Math.purs","end":[28,1]}},{"children":[],"comments":"Returns the cosine of the argument.\n","title":"cos","fixity":null,"info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Math"],"Radians"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]}},"sourceSpan":{"start":[31,1],"name":"bower_components/purescript-math/src/Math.purs","end":[34,1]}},{"children":[],"comments":"The base of natural logarithms, *e*, around 2.71828.\n","title":"e","fixity":null,"info":{"declType":"value","type":{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}},"sourceSpan":{"start":[69,1],"name":"bower_components/purescript-math/src/Math.purs","end":[72,1]}},{"children":[],"comments":"The ratio of the circumference of a circle to its diameter, around 3.14159.\n","title":"pi","fixity":null,"info":{"declType":"value","type":{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}},"sourceSpan":{"start":[84,1],"name":"bower_components/purescript-math/src/Math.purs","end":[87,1]}},{"children":[],"comments":"Returns the sine of the argument.\n","title":"sin","fixity":null,"info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Math"],"Radians"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]}},"sourceSpan":{"start":[55,1],"name":"bower_components/purescript-math/src/Math.purs","end":[58,1]}},{"children":[],"comments":"Returns the square root of the argument.\n","title":"sqrt","fixity":null,"info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]}},"sourceSpan":{"start":[58,1],"name":"bower_components/purescript-math/src/Math.purs","end":[61,1]}},{"children":[],"comments":"Returns the tangent of the argument.\n","title":"tan","fixity":null,"info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Math"],"Radians"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]}},"sourceSpan":{"start":[61,1],"name":"bower_components/purescript-math/src/Math.purs","end":[63,1]}}]},{"moduleName":["Prelude"],"declarations":[{"children":[],"comments":null,"title":"not","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[[[[null,"BooleanAlgebra"],[{"tag":"TypeVar","contents":"a"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"a"}]}]},null]}},"sourceSpan":null},{"children":[],"comments":null,"title":"compare","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[[[[null,"Ord"],[{"tag":"TypeVar","contents":"a"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeConstructor","contents":[["Prelude"],"Ordering"]}]}]}]},null]}},"sourceSpan":null},{"children":[],"comments":"Flips the order of the arguments to a function of two arguments.\n\n```purescript\nflip const 1 2 = const 2 1 = 2\n```\n","title":"flip","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["c",{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeVar","contents":"c"}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"c"}]}]}]},null]},null]},null]}},"sourceSpan":{"start":[84,1],"name":"bower_components/purescript-prelude/src/Prelude.purs","end":[85,1]}},{"children":[],"comments":"`negate x` can be used as a shorthand for `zero - x`.\n","title":"negate","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[[[[["Prelude"],"Ring"],[{"tag":"TypeVar","contents":"a"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"a"}]}]},null]}},"sourceSpan":{"start":[506,1],"name":"bower_components/purescript-prelude/src/Prelude.purs","end":[507,1]}},{"children":[],"comments":"`(&&)` is an alias for `conj`.\n","title":"(&&)","fixity":{"associativity":"infixl","precedence":-1},"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[[[[["Prelude"],"BooleanAlgebra"],[{"tag":"TypeVar","contents":"a"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"a"}]}]}]},null]}},"sourceSpan":{"start":[821,1],"name":"bower_components/purescript-prelude/src/Prelude.purs","end":[822,1]}},{"children":[],"comments":"`(*)` is an alias for `mul`.\n","title":"(*)","fixity":{"associativity":"infixl","precedence":-1},"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[[[[["Prelude"],"Semiring"],[{"tag":"TypeVar","contents":"a"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"a"}]}]}]},null]}},"sourceSpan":{"start":[472,1],"name":"bower_components/purescript-prelude/src/Prelude.purs","end":[473,1]}},{"children":[],"comments":"`(+)` is an alias for `add`.\n","title":"(+)","fixity":{"associativity":"infixl","precedence":-1},"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[[[[["Prelude"],"Semiring"],[{"tag":"TypeVar","contents":"a"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"a"}]}]}]},null]}},"sourceSpan":{"start":[468,1],"name":"bower_components/purescript-prelude/src/Prelude.purs","end":[469,1]}},{"children":[],"comments":"`(++)` is an alternative alias for `append`.\n","title":"(++)","fixity":{"associativity":"infixl","precedence":-1},"info":{"declType":"value","type":{"tag":"ForAll","contents":["s",{"tag":"ConstrainedType","contents":[[[[["Prelude"],"Semigroup"],[{"tag":"TypeVar","contents":"s"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"s"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"s"}]},{"tag":"TypeVar","contents":"s"}]}]}]},null]}},"sourceSpan":{"start":[401,1],"name":"bower_components/purescript-prelude/src/Prelude.purs","end":[402,1]}},{"children":[],"comments":"`(-)` is an alias for `sub`.\n","title":"(-)","fixity":{"associativity":"infixl","precedence":-1},"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[[[[["Prelude"],"Ring"],[{"tag":"TypeVar","contents":"a"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"a"}]}]}]},null]}},"sourceSpan":{"start":[502,1],"name":"bower_components/purescript-prelude/src/Prelude.purs","end":[503,1]}},{"children":[],"comments":"`(/)` is an alias for `div`.\n","title":"(/)","fixity":{"associativity":"infixl","precedence":-1},"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[[[[["Prelude"],"ModuloSemiring"],[{"tag":"TypeVar","contents":"a"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"a"}]}]}]},null]}},"sourceSpan":{"start":[538,1],"name":"bower_components/purescript-prelude/src/Prelude.purs","end":[539,1]}},{"children":[],"comments":"`(/=)` tests whether one value is _not equal_ to another. Shorthand for\n`not (x == y)`.\n","title":"(/=)","fixity":{"associativity":"infixl","precedence":-1},"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[[[[["Prelude"],"Eq"],[{"tag":"TypeVar","contents":"a"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}]}]},null]}},"sourceSpan":{"start":[589,1],"name":"bower_components/purescript-prelude/src/Prelude.purs","end":[590,1]}},{"children":[],"comments":"Test whether one value is _strictly less than_ another.\n","title":"(<)","fixity":{"associativity":"infixl","precedence":-1},"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[[[[["Prelude"],"Ord"],[{"tag":"TypeVar","contents":"a"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}]}]},null]}},"sourceSpan":{"start":[683,1],"name":"bower_components/purescript-prelude/src/Prelude.purs","end":[684,1]}},{"children":[],"comments":"Test whether one value is _non-strictly less than_ another.\n","title":"(<=)","fixity":{"associativity":"infixl","precedence":-1},"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[[[[["Prelude"],"Ord"],[{"tag":"TypeVar","contents":"a"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}]}]},null]}},"sourceSpan":{"start":[695,1],"name":"bower_components/purescript-prelude/src/Prelude.purs","end":[696,1]}},{"children":[],"comments":"`(==)` is an alias for `eq`. Tests whether one value is equal to another.\n","title":"(==)","fixity":{"associativity":"infixl","precedence":-1},"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[[[[["Prelude"],"Eq"],[{"tag":"TypeVar","contents":"a"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}]}]},null]}},"sourceSpan":{"start":[584,1],"name":"bower_components/purescript-prelude/src/Prelude.purs","end":[585,1]}},{"children":[],"comments":"Test whether one value is _strictly greater than_ another.\n","title":"(>)","fixity":{"associativity":"infixl","precedence":-1},"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[[[[["Prelude"],"Ord"],[{"tag":"TypeVar","contents":"a"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}]}]},null]}},"sourceSpan":{"start":[689,1],"name":"bower_components/purescript-prelude/src/Prelude.purs","end":[690,1]}},{"children":[],"comments":"Test whether one value is _non-strictly greater than_ another.\n","title":"(>=)","fixity":{"associativity":"infixl","precedence":-1},"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[[[[["Prelude"],"Ord"],[{"tag":"TypeVar","contents":"a"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}]}]},null]}},"sourceSpan":{"start":[701,1],"name":"bower_components/purescript-prelude/src/Prelude.purs","end":[702,1]}},{"children":[],"comments":"`(||)` is an alias for `disj`.\n","title":"(||)","fixity":{"associativity":"infixl","precedence":-1},"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[[[[["Prelude"],"BooleanAlgebra"],[{"tag":"TypeVar","contents":"a"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"a"}]}]}]},null]}},"sourceSpan":{"start":[825,1],"name":"bower_components/purescript-prelude/src/Prelude.purs","end":[826,1]}}]}],"name":"Elm.Basics","comments":"The Elm equivalent of Purescript's `Prelude`.\n\nNote that many of these functions are re-exported from other modules in\nPurescript. The goal is to bundle together the same things that Elm's `Basics` module\nbundles together.\n\nIn Elm, these functions are all imported by default. Purescript does not\nhave default imports, so you will need to import this manually.\n\n### Tuples\n\nNote that Purescript does not have a literal syntax for Tuples. So, in places where\nyou used Tuples, there are two alternatives.\n\n* There is a `Data.Tuple` type in\n  [purescript-tuples](http://pursuit.purescript.org/packages/purescript-tuples).\n  However, it is just an ordinary tagged union type. So you construct and pattern\n  match it in the usual way -- there is no `,` operator to construct tuples.\n\n      tuple = Tuple 1 2\n\n      case tuple of\n          Tuple a b -> a\n\n* Usually, it's better to use Purescript's record type. Essentially, if you\n  have a `Tuple2`, just use a record where you name the first and second\n  elements.  (You could even name them `fst` and `snd` if you don't have\n  anything better at hand).\n\n      tuple =\n          { fst: 1\n          , snd: 2\n          }\n\nIn converting Elm APIs, I've sometimes used the `Tuple` type, and sometimes\nconverted to using records instead. In either case, you'll need to make some\nmodifications to your own code that uses Tuples.\n","declarations":[{"children":[],"comments":"The Purescript equivalent of Elm's `Float` is `Number`.\n","title":"Float","fixity":null,"info":{"arguments":[],"declType":"typeSynonym","type":{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}},"sourceSpan":{"start":[96,1],"name":"src/Elm/Basics.purs","end":[100,1]}},{"children":[],"comments":"The Purescript equivalent of Elm's `Bool` is `Boolean`.\n","title":"Bool","fixity":null,"info":{"arguments":[],"declType":"typeSynonym","type":{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}},"sourceSpan":{"start":[100,1],"name":"src/Elm/Basics.purs","end":[104,1]}},{"children":[],"comments":"Convert radians to standard Elm angles (radians).\n","title":"radians","fixity":null,"info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Elm","Basics"],"Float"]}]},{"tag":"TypeConstructor","contents":[["Elm","Basics"],"Float"]}]}},"sourceSpan":{"start":[104,1],"name":"src/Elm/Basics.purs","end":[105,1]}},{"children":[],"comments":"Convert degrees to standard Elm angles (radians).\n","title":"degrees","fixity":null,"info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Elm","Basics"],"Float"]}]},{"tag":"TypeConstructor","contents":[["Elm","Basics"],"Float"]}]}},"sourceSpan":{"start":[109,1],"name":"src/Elm/Basics.purs","end":[110,1]}},{"children":[],"comments":"Convert turns to standard Elm angles (radians).\nOne turn is equal to 360&deg;.\n","title":"turns","fixity":null,"info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Elm","Basics"],"Float"]}]},{"tag":"TypeConstructor","contents":[["Elm","Basics"],"Float"]}]}},"sourceSpan":{"start":[116,1],"name":"src/Elm/Basics.purs","end":[117,1]}},{"children":[],"comments":"Convert polar coordinates `{r, theta}` to Cartesian coordinates `{x, y}`.\n\nNote that the Elm version uses tuples ... it seemed like this was a good\ncandidate for records instead. (Since Purescript does not have tuple\nliterals, Elm code using Tuples nees some modification in any event).\n\nIf you want some more sophisticated handling of complex numbers, see\n[purescript-complex](http://pursuit.purescript.org/packages/purescript-complex).\n","title":"fromPolar","fixity":null,"info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Object"]},{"tag":"RCons","contents":["r",{"tag":"TypeConstructor","contents":[["Elm","Basics"],"Float"]},{"tag":"RCons","contents":["theta",{"tag":"TypeConstructor","contents":[["Elm","Basics"],"Float"]},{"tag":"REmpty","contents":[]}]}]}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Object"]},{"tag":"RCons","contents":["x",{"tag":"TypeConstructor","contents":[["Elm","Basics"],"Float"]},{"tag":"RCons","contents":["y",{"tag":"TypeConstructor","contents":[["Elm","Basics"],"Float"]},{"tag":"REmpty","contents":[]}]}]}]}]}},"sourceSpan":{"start":[129,1],"name":"src/Elm/Basics.purs","end":[130,1]}},{"children":[],"comments":"Convert Cartesian coordinates `{x, y}` to polar coordinates `{r, theta}`.\n\nNote that the Elm version uses tuples ... it seemed like this was a good\ncandidate for records instead. (Since Purescript does not have tuple\nliterals, Elm code using Tuples nees some modification in any event).\n\nIf you want some more sophisticated handling of complex numbers, see\n[purescript-complex](http://pursuit.purescript.org/packages/purescript-complex).\n","title":"toPolar","fixity":null,"info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Object"]},{"tag":"RCons","contents":["x",{"tag":"TypeConstructor","contents":[["Elm","Basics"],"Float"]},{"tag":"RCons","contents":["y",{"tag":"TypeConstructor","contents":[["Elm","Basics"],"Float"]},{"tag":"REmpty","contents":[]}]}]}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Object"]},{"tag":"RCons","contents":["r",{"tag":"TypeConstructor","contents":[["Elm","Basics"],"Float"]},{"tag":"RCons","contents":["theta",{"tag":"TypeConstructor","contents":[["Elm","Basics"],"Float"]},{"tag":"REmpty","contents":[]}]}]}]}]}},"sourceSpan":{"start":[144,1],"name":"src/Elm/Basics.purs","end":[145,1]}},{"children":[],"comments":null,"title":"(//)","fixity":{"associativity":"infixl","precedence":7},"info":{"declType":"alias","fixity":{"associativity":"infixl","precedence":7},"for":[["Elm","Basics"],{"AliasValue":{"Ident":"intDiv"}}]},"sourceSpan":{"start":[151,1],"name":"src/Elm/Basics.purs","end":[156,1]}},{"children":[],"comments":"Integer division. The remainder is discarded.\n\nIn Purescript, you can simply use `/`.\n","title":"intDiv","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[[[[["Prelude"],"ModuloSemiring"],[{"tag":"TypeVar","contents":"a"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"a"}]}]}]},null]}},"sourceSpan":{"start":[156,1],"name":"src/Elm/Basics.purs","end":[157,1]}},{"children":[],"comments":"Find the remainder after dividing one number by another.\n\n    7 `rem` 2 == 1\n    -1 `rem` 4 == -1\n\nEquivalent to Purescript's `Prelude.mod`.\n","title":"rem","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[[[[["Prelude"],"ModuloSemiring"],[{"tag":"TypeVar","contents":"a"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"a"}]}]}]},null]}},"sourceSpan":{"start":[170,1],"name":"src/Elm/Basics.purs","end":[171,1]}},{"children":[],"comments":null,"title":"(%)","fixity":{"associativity":"infixl","precedence":7},"info":{"declType":"alias","fixity":{"associativity":"infixl","precedence":7},"for":[["Elm","Basics"],{"AliasValue":{"Ident":"mod"}}]},"sourceSpan":{"start":[174,1],"name":"src/Elm/Basics.purs","end":[183,1]}},{"children":[],"comments":"Perform [modular arithmetic](http://en.wikipedia.org/wiki/Modular_arithmetic).\n\n       7 % 2 == 1\n    (-1) % 4 == 3\n\nNote that this is not the same as Purescript's `Prelude.mod` --\nfor that, see `Basics.rem`.\n","title":"mod","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[[[[["Prelude"],"Ord"],[{"tag":"TypeVar","contents":"a"}]],[[["Prelude"],"ModuloSemiring"],[{"tag":"TypeVar","contents":"a"}]],[[["Prelude"],"Ring"],[{"tag":"TypeVar","contents":"a"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"a"}]}]}]},null]}},"sourceSpan":{"start":[183,1],"name":"src/Elm/Basics.purs","end":[184,1]}},{"children":[{"comments":null,"title":"pow","info":{"declType":"typeClassMember","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":null},{"comments":null,"title":"intIntPow","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Elm","Basics"],"Pow"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}},"sourceSpan":{"start":[215,1],"name":"src/Elm/Basics.purs","end":[218,1]}},{"comments":null,"title":"floatFloatPow","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Elm","Basics"],"Pow"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]}},"sourceSpan":{"start":[218,1],"name":"src/Elm/Basics.purs","end":[222,1]}}],"comments":"A class for things that can be raised to a power.\n","title":"Pow","fixity":null,"info":{"arguments":[["a",null]],"declType":"typeClass","superclasses":[]},"sourceSpan":{"start":[212,1],"name":"src/Elm/Basics.purs","end":[215,1]}},{"children":[],"comments":null,"title":"(^)","fixity":{"associativity":"infixr","precedence":8},"info":{"declType":"alias","fixity":{"associativity":"infixr","precedence":8},"for":[["Elm","Basics"],{"AliasValue":{"Ident":"pow"}}]},"sourceSpan":{"start":[222,1],"name":"src/Elm/Basics.purs","end":[226,1]}},{"children":[],"comments":"Take the absolute value of a number.\n","title":"abs","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[[[[["Prelude"],"Ring"],[{"tag":"TypeVar","contents":"a"}]],[[["Prelude"],"Ord"],[{"tag":"TypeVar","contents":"a"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"a"}]}]},null]}},"sourceSpan":{"start":[226,1],"name":"src/Elm/Basics.purs","end":[227,1]}},{"children":[],"comments":"Calculate the logarithm of a number with a given base.\n\n    logBase 10.0 100.0 == 2.0\n    logBase 2.0 256.0 == 8.0\n","title":"logBase","fixity":null,"info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Elm","Basics"],"Float"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Elm","Basics"],"Float"]}]},{"tag":"TypeConstructor","contents":[["Elm","Basics"],"Float"]}]}]}},"sourceSpan":{"start":[237,1],"name":"src/Elm/Basics.purs","end":[238,1]}},{"children":[],"comments":"Represents the relative ordering of two things.\nThe relations are less than, equal to, and greater than.\n\nEquivalent to Purescript's `Ordering`.\n","title":"Order","fixity":null,"info":{"arguments":[],"declType":"typeSynonym","type":{"tag":"TypeConstructor","contents":[["Prelude"],"Ordering"]}},"sourceSpan":{"start":[246,1],"name":"src/Elm/Basics.purs","end":[250,1]}},{"children":[],"comments":"The exclusive-or operator. `true` if exactly one input is `true`.\n","title":"xor","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[[[[["Prelude"],"BooleanAlgebra"],[{"tag":"TypeVar","contents":"a"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"a"}]}]}]},null]}},"sourceSpan":{"start":[250,1],"name":"src/Elm/Basics.purs","end":[251,1]}},{"children":[],"comments":"Truncate a number, rounding towards zero.\n","title":"truncate","fixity":null,"info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Elm","Basics"],"Float"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}},"sourceSpan":{"start":[256,1],"name":"src/Elm/Basics.purs","end":[262,1]}},{"children":[],"comments":"Ceiling function, rounding up.\n\nEquivalent to Purescript's `ceil`.\n","title":"ceiling","fixity":null,"info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Elm","Basics"],"Float"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}},"sourceSpan":{"start":[262,1],"name":"src/Elm/Basics.purs","end":[263,1]}},{"children":[],"comments":"Convert an integer into a float.\n\nEquivalent to Purescript's `toNumber`.\n","title":"toFloat","fixity":null,"info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeConstructor","contents":[["Elm","Basics"],"Float"]}]}},"sourceSpan":{"start":[269,1],"name":"src/Elm/Basics.purs","end":[270,1]}},{"children":[],"comments":"Determine whether a float is positive or negative infinity.\n\n    isInfinite (0.0 / 0.0)   == false\n    isInfinite (sqrt (-1.0)) == false\n    isInfinite (1.0 / 0.0)   == true\n    isInfinite 1.0           == false\n\nNotice that NaN is not infinite! For float `n` to be finite implies that\n`not (isInfinite n || isNaN n)` evaluates to `true`.\n\nNote that this is not equivalent to the negation of Javascript's `isFinite()`.\n","title":"isInfinite","fixity":null,"info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Elm","Basics"],"Float"]}]},{"tag":"TypeConstructor","contents":[["Elm","Basics"],"Bool"]}]}},"sourceSpan":{"start":[284,1],"name":"src/Elm/Basics.purs","end":[285,1]}},{"children":[],"comments":"Turn any kind of value into a string.\n\n    toString 42 == \"42\"\n    toString [1,2] == \"[1,2]\"\n    toString \"he said, \\\"hi\\\"\" == \"\\\"he said, \\\\\\\"hi\\\\\\\"\\\"\"\n\nEquivalent to Purescript's `show`.\n","title":"toString","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[[[[["Prelude"],"Show"],[{"tag":"TypeVar","contents":"a"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}]},null]}},"sourceSpan":{"start":[296,1],"name":"src/Elm/Basics.purs","end":[297,1]}},{"children":[],"comments":null,"title":"(<<)","fixity":{"associativity":"infixr","precedence":9},"info":{"declType":"alias","fixity":{"associativity":"infixr","precedence":9},"for":[["Elm","Basics"],{"AliasValue":{"Ident":"compose"}}]},"sourceSpan":{"start":[303,1],"name":"src/Elm/Basics.purs","end":[319,1]}},{"children":[],"comments":"Function composition, passing results along in the suggested direction. For\nexample, the following code checks if the square root of a number is odd:\n\n    not << isEven << sqrt\n\nYou can think of this operator as equivalent to the following:\n\n    (g << f)  ==  (\\x -> g (f x))\n\nSo our example expands out to something like this:\n\n    \\n -> not (isEven (sqrt n))\n\nEquivalent to Purescript's `<<<`.\n","title":"compose","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["c",{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeVar","contents":"c"}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"c"}]}}]}]},null]},null]},null]}},"sourceSpan":{"start":[319,1],"name":"src/Elm/Basics.purs","end":[320,1]}},{"children":[],"comments":null,"title":"(>>)","fixity":{"associativity":"infixl","precedence":9},"info":{"declType":"alias","fixity":{"associativity":"infixl","precedence":9},"for":[["Elm","Basics"],{"AliasValue":{"Ident":"composeFlipped"}}]},"sourceSpan":{"start":[323,1],"name":"src/Elm/Basics.purs","end":[334,1]}},{"children":[],"comments":"Function composition, passing results along in the suggested direction. For\nexample, the following code checks if the square root of a number is odd:\n\n    sqrt >> isEven >> not\n\nThis direction of function composition seems less pleasant than `(<<)` which\nreads nicely in expressions like: `filter (not << isRegistered) students`\n\nEquivalent to Purescript's `>>>`.\n","title":"composeFlipped","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["c",{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeVar","contents":"c"}]}}]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"c"}]}}]}]},null]},null]},null]}},"sourceSpan":{"start":[334,1],"name":"src/Elm/Basics.purs","end":[335,1]}},{"children":[],"comments":null,"title":"(|>)","fixity":{"associativity":"infixl","precedence":0},"info":{"declType":"alias","fixity":{"associativity":"infixl","precedence":0},"for":[["Elm","Basics"],{"AliasValue":{"Ident":"applyFnFlipped"}}]},"sourceSpan":{"start":[338,1],"name":"src/Elm/Basics.purs","end":[354,1]}},{"children":[],"comments":"Forward function application `x |> f == f x`. This function is useful\nfor avoiding parenthesis and writing code in a more natural way.\nConsider the following code to create a pentagon:\n\n    scale 2 (move (10,10) (filled blue (ngon 5 30)))\n\nThis can also be written as:\n\n    ngon 5 30\n      |> filled blue\n      |> move (10,10)\n      |> scale 2\n\nEquivalent to Purescript's `#`.\n","title":"applyFnFlipped","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]},{"tag":"TypeVar","contents":"b"}]}]},null]},null]}},"sourceSpan":{"start":[354,1],"name":"src/Elm/Basics.purs","end":[355,1]}},{"children":[],"comments":null,"title":"(<|)","fixity":{"associativity":"infixr","precedence":0},"info":{"declType":"alias","fixity":{"associativity":"infixr","precedence":0},"for":[["Elm","Basics"],{"AliasValue":{"Ident":"applyFn"}}]},"sourceSpan":{"start":[358,1],"name":"src/Elm/Basics.purs","end":[370,1]}},{"children":[],"comments":"Backward function application `f <| x == f x`. This function is useful for\navoiding parenthesis. Consider the following code to create a text element:\n\n    leftAligned (monospace (fromString \"code\"))\n\nThis can also be written as:\n\n    leftAligned <| monospace <| fromString \"code\"\n\nEquivalent to Purescript's `$`.\n","title":"applyFn","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]},null]},null]}},"sourceSpan":{"start":[370,1],"name":"src/Elm/Basics.purs","end":[371,1]}},{"children":[],"comments":"Given a value, returns exactly the same value. This is called\n[the identity function](http://en.wikipedia.org/wiki/Identity_function).\n\nThe Purescript equivalent is `id`.\n","title":"identity","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"a"}]},null]}},"sourceSpan":{"start":[378,1],"name":"src/Elm/Basics.purs","end":[379,1]}},{"children":[],"comments":"Create a [constant function](http://en.wikipedia.org/wiki/Constant_function),\na function that *always* returns the same value regardless of what input you give.\nIt is defined as:\n\n    always a b = a\n\nIt totally ignores the second argument, so `always 42` is a function that always\nreturns 42. When you are dealing with higher-order functions, this comes in\nhandy more often than you might expect. For example, creating a zeroed out list\nof length ten would be:\n\n    map (always 0) [0..9]\n\nThe Purescript equivalent is `const`.\n","title":"always","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeVar","contents":"a"}]}]},null]},null]}},"sourceSpan":{"start":[396,1],"name":"src/Elm/Basics.purs","end":[397,1]}}]},{"reExports":[],"name":"Elm.Bind","comments":"Elm modules typically use `andThen` for what Purescript would call `bind`.\nWe define the synomyn here generically so that we don't have to define the\nfunction multiple times. And, we can re-export it (as Elm code expects)\nwithout producing conflicts, since it's all the same function.\n","declarations":[{"children":[],"comments":"Given some computation, chain its result with another computation.\n\nEquivalent to Purescript's `bind`.\n","title":"andThen","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["m",{"tag":"ConstrainedType","contents":[[[[["Prelude"],"Bind"],[{"tag":"TypeVar","contents":"m"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"m"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"m"},{"tag":"TypeVar","contents":"b"}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"m"},{"tag":"TypeVar","contents":"b"}]}]}]}]},null]},null]},null]}},"sourceSpan":{"start":[16,1],"name":"src/Elm/Bind.purs","end":[17,1]}}]},{"reExports":[{"moduleName":["Data","Int","Bits"],"declarations":[{"children":[],"comments":"Bitwise NOT.\n","title":"complement","fixity":null,"info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}},"sourceSpan":{"start":[44,1],"name":"bower_components/purescript-integers/src/Data/Int/Bits.purs","end":[44,37]}}]}],"name":"Elm.Bitwise","comments":"Library for [bitwise operations](http://en.wikipedia.org/wiki/Bitwise_operation)\n\nImplemented using Purescript's [`Data.Int.Bits`](https://pursuit.purescript.org/packages/purescript-integers) module.\n","declarations":[{"children":[],"comments":"Bitwise AND\n\nEquivalent to Purescript's `(.&.)`\n","title":"and","fixity":null,"info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}]}},"sourceSpan":{"start":[24,1],"name":"src/Elm/Bitwise.purs","end":[25,1]}},{"children":[],"comments":"Bitwise OR\n\nEquivalent to Purescript's `(.|.)`\n","title":"or","fixity":null,"info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}]}},"sourceSpan":{"start":[31,1],"name":"src/Elm/Bitwise.purs","end":[32,1]}},{"children":[],"comments":"Bitwise XOR\n\nEquivalent to Purescript's `(.^.)`\n","title":"xor","fixity":null,"info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}]}},"sourceSpan":{"start":[38,1],"name":"src/Elm/Bitwise.purs","end":[39,1]}},{"children":[],"comments":"Shift bits to the left by a given offset, filling new bits with zeros.\nThis can be used to multiply numbers by powers of two.\n\n    8 `shiftLeft` 1 == 16\n    8 `shiftLeft` 2 == 32\n\nEquivalent to Purescript's `shl`\n","title":"shiftLeft","fixity":null,"info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}]}},"sourceSpan":{"start":[49,1],"name":"src/Elm/Bitwise.purs","end":[50,1]}},{"children":[],"comments":"Shift bits to the right by a given offset, filling new bits with\nwhatever is the topmost bit. This can be used to divide numbers by powers of two.\n\n     32 `shiftRight` 1 == 16\n     32 `shiftRight` 2 == 8\n    -32 `shiftRight` 1 == -16\n\nThis is called an\n[arithmetic right shift](http://en.wikipedia.org/wiki/Bitwise_operation#Arithmetic_shift),\noften written (>>), and sometimes called a sign-propagating\nright shift because it fills empty spots with copies of the highest bit.\n\nEquivalent to Purescript's `shr`\n","title":"shiftRight","fixity":null,"info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}]}},"sourceSpan":{"start":[66,1],"name":"src/Elm/Bitwise.purs","end":[67,1]}},{"children":[],"comments":"Shift bits to the right by a given offset, filling new bits with\nzeros.\n\n     32 `shiftRightLogical` 1 == 16\n     32 `shiftRightLogical` 2 == 8\n    -32 `shiftRightLogical` 1 == 2147483632\n\nThis is called an\n[logical right shift](http://en.wikipedia.org/wiki/Bitwise_operation#Logical_shift),\noften written (>>>), and sometimes called a zero-fill right shift because\nit fills empty spots with zeros.\n\nEquivalent to Purescript's `zshr`\n","title":"shiftRightLogical","fixity":null,"info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}]}},"sourceSpan":{"start":[83,1],"name":"src/Elm/Bitwise.purs","end":[84,1]}}]},{"reExports":[{"moduleName":["Data","Char"],"declarations":[{"children":[],"comments":"Converts a character to lowercase.\n","title":"toLower","fixity":null,"info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Char"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Char"]}]}},"sourceSpan":{"start":[22,1],"name":"bower_components/purescript-strings/src/Data/Char.purs","end":[25,1]}},{"children":[],"comments":"Converts a character to uppercase.\n","title":"toUpper","fixity":null,"info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Char"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Char"]}]}},"sourceSpan":{"start":[25,1],"name":"bower_components/purescript-strings/src/Data/Char.purs","end":[25,35]}}]}],"name":"Elm.Char","comments":"Functions for working with characters. Character literals are enclosed in\n`'a'` pair of single quotes.\n\nImplemented using Purescript's [`Data.Char`](https://pursuit.purescript.org/packages/purescript-strings) module.\n","declarations":[{"children":[],"comments":"True for upper case letters.\n","title":"isUpper","fixity":null,"info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Char"]}]},{"tag":"TypeConstructor","contents":[["Elm","Basics"],"Bool"]}]}},"sourceSpan":{"start":[35,1],"name":"src/Elm/Char.purs","end":[36,1]}},{"children":[],"comments":"True for lower case letters.\n","title":"isLower","fixity":null,"info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Char"]}]},{"tag":"TypeConstructor","contents":[["Elm","Basics"],"Bool"]}]}},"sourceSpan":{"start":[40,1],"name":"src/Elm/Char.purs","end":[41,1]}},{"children":[],"comments":"True for ASCII digits `[0-9]`.\n","title":"isDigit","fixity":null,"info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Char"]}]},{"tag":"TypeConstructor","contents":[["Elm","Basics"],"Bool"]}]}},"sourceSpan":{"start":[45,1],"name":"src/Elm/Char.purs","end":[46,1]}},{"children":[],"comments":"True for ASCII octal digits `[0-7]`.\n","title":"isOctDigit","fixity":null,"info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Char"]}]},{"tag":"TypeConstructor","contents":[["Elm","Basics"],"Bool"]}]}},"sourceSpan":{"start":[50,1],"name":"src/Elm/Char.purs","end":[51,1]}},{"children":[],"comments":"True for ASCII hexadecimal digits `[0-9a-fA-F]`.\n","title":"isHexDigit","fixity":null,"info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Char"]}]},{"tag":"TypeConstructor","contents":[["Elm","Basics"],"Bool"]}]}},"sourceSpan":{"start":[55,1],"name":"src/Elm/Char.purs","end":[56,1]}},{"children":[],"comments":"Convert to upper case, according to any locale-specific case mappings.\n","title":"toLocaleUpper","fixity":null,"info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Char"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Char"]}]}},"sourceSpan":{"start":[61,1],"name":"src/Elm/Char.purs","end":[65,1]}},{"children":[],"comments":"Convert to lower case, according to any locale-specific case mappings.\n","title":"toLocaleLower","fixity":null,"info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Char"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Char"]}]}},"sourceSpan":{"start":[65,1],"name":"src/Elm/Char.purs","end":[71,1]}},{"children":[],"comments":"In this library, we use integers to represent the key codes coming from the\nkeyboard. You can use `toCode` and `fromCode`\nto convert between key codes and characters.\n","title":"KeyCode","fixity":null,"info":{"arguments":[],"declType":"typeSynonym","type":{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}},"sourceSpan":{"start":[71,1],"name":"src/Elm/Char.purs","end":[75,1]}},{"children":[],"comments":"Convert to unicode.\n","title":"toCode","fixity":null,"info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Char"]}]},{"tag":"TypeConstructor","contents":[["Elm","Char"],"KeyCode"]}]}},"sourceSpan":{"start":[75,1],"name":"src/Elm/Char.purs","end":[76,1]}},{"children":[],"comments":"Convert from unicode.\n","title":"fromCode","fixity":null,"info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Elm","Char"],"KeyCode"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Char"]}]}},"sourceSpan":{"start":[80,1],"name":"src/Elm/Char.purs","end":[81,1]}}]},{"reExports":[{"moduleName":["Data","Date"],"declarations":[{"children":[{"comments":null,"title":"eqDate","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prelude"],"Eq"]},{"tag":"TypeConstructor","contents":[["Data","Date"],"Date"]}]}},"sourceSpan":{"start":[40,1],"name":"bower_components/purescript-datetime/src/Data/Date.purs","end":[43,1]}},{"comments":null,"title":"ordDate","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prelude"],"Ord"]},{"tag":"TypeConstructor","contents":[["Data","Date"],"Date"]}]}},"sourceSpan":{"start":[43,1],"name":"bower_components/purescript-datetime/src/Data/Date.purs","end":[46,1]}},{"comments":null,"title":"showDate","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prelude"],"Show"]},{"tag":"TypeConstructor","contents":[["Data","Date"],"Date"]}]}},"sourceSpan":{"start":[46,1],"name":"bower_components/purescript-datetime/src/Data/Date.purs","end":[51,1]}}],"comments":"A combined date/time value. `Date`s cannot be constructed directly to\nensure they are not the `Invalid Date` value, and instead must be created\nvia `fromJSDate`, `fromEpochMilliseconds`, `fromString`, etc. or the `date`\nand `dateTime` functions in the `Data.Date.Locale` and `Data.Date.UTC`\nmodules.\n","title":"Date","fixity":null,"info":{"declType":"data","dataDeclType":"newtype","typeArguments":[]},"sourceSpan":{"start":[38,1],"name":"bower_components/purescript-datetime/src/Data/Date.purs","end":[40,1]}},{"children":[{"comments":null,"title":"eqDayOfMonth","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prelude"],"Eq"]},{"tag":"TypeConstructor","contents":[["Data","Date"],"DayOfMonth"]}]}},"sourceSpan":{"start":[219,1],"name":"bower_components/purescript-datetime/src/Data/Date.purs","end":[222,1]}},{"comments":null,"title":"ordDayOfMonth","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prelude"],"Ord"]},{"tag":"TypeConstructor","contents":[["Data","Date"],"DayOfMonth"]}]}},"sourceSpan":{"start":[222,1],"name":"bower_components/purescript-datetime/src/Data/Date.purs","end":[225,1]}},{"comments":null,"title":"showDayOfMonth","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prelude"],"Show"]},{"tag":"TypeConstructor","contents":[["Data","Date"],"DayOfMonth"]}]}},"sourceSpan":{"start":[225,1],"name":"bower_components/purescript-datetime/src/Data/Date.purs","end":[229,1]}}],"comments":"A day-of-month date component value.\n","title":"DayOfMonth","fixity":null,"info":{"declType":"data","dataDeclType":"newtype","typeArguments":[]},"sourceSpan":{"start":[217,1],"name":"bower_components/purescript-datetime/src/Data/Date.purs","end":[219,1]}},{"children":[{"comments":null,"title":"Sunday","info":{"arguments":[],"declType":"dataConstructor"},"sourceSpan":null},{"comments":null,"title":"Monday","info":{"arguments":[],"declType":"dataConstructor"},"sourceSpan":null},{"comments":null,"title":"Tuesday","info":{"arguments":[],"declType":"dataConstructor"},"sourceSpan":null},{"comments":null,"title":"Wednesday","info":{"arguments":[],"declType":"dataConstructor"},"sourceSpan":null},{"comments":null,"title":"Thursday","info":{"arguments":[],"declType":"dataConstructor"},"sourceSpan":null},{"comments":null,"title":"Friday","info":{"arguments":[],"declType":"dataConstructor"},"sourceSpan":null},{"comments":null,"title":"Saturday","info":{"arguments":[],"declType":"dataConstructor"},"sourceSpan":null},{"comments":null,"title":"eqDayOfWeek","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prelude"],"Eq"]},{"tag":"TypeConstructor","contents":[["Data","Date"],"DayOfWeek"]}]}},"sourceSpan":{"start":[238,1],"name":"bower_components/purescript-datetime/src/Data/Date.purs","end":[248,1]}},{"comments":null,"title":"ordDayOfWeek","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prelude"],"Ord"]},{"tag":"TypeConstructor","contents":[["Data","Date"],"DayOfWeek"]}]}},"sourceSpan":{"start":[248,1],"name":"bower_components/purescript-datetime/src/Data/Date.purs","end":[251,1]}},{"comments":null,"title":"boundedDayOfWeek","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prelude"],"Bounded"]},{"tag":"TypeConstructor","contents":[["Data","Date"],"DayOfWeek"]}]}},"sourceSpan":{"start":[251,1],"name":"bower_components/purescript-datetime/src/Data/Date.purs","end":[255,1]}},{"comments":null,"title":"boundedOrdDayOfWeek","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prelude"],"BoundedOrd"]},{"tag":"TypeConstructor","contents":[["Data","Date"],"DayOfWeek"]}]}},"sourceSpan":{"start":[255,1],"name":"bower_components/purescript-datetime/src/Data/Date.purs","end":[257,1]}},{"comments":null,"title":"showDayOfWeek","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prelude"],"Show"]},{"tag":"TypeConstructor","contents":[["Data","Date"],"DayOfWeek"]}]}},"sourceSpan":{"start":[257,1],"name":"bower_components/purescript-datetime/src/Data/Date.purs","end":[266,1]}},{"comments":null,"title":"enumDayOfWeek","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Enum"],"Enum"]},{"tag":"TypeConstructor","contents":[["Data","Date"],"DayOfWeek"]}]}},"sourceSpan":{"start":[266,1],"name":"bower_components/purescript-datetime/src/Data/Date.purs","end":[273,1]}}],"comments":"A day-of-week date component value.\n","title":"DayOfWeek","fixity":null,"info":{"declType":"data","dataDeclType":"data","typeArguments":[]},"sourceSpan":{"start":[229,1],"name":"bower_components/purescript-datetime/src/Data/Date.purs","end":[238,1]}},{"children":[{"comments":null,"title":"January","info":{"arguments":[],"declType":"dataConstructor"},"sourceSpan":null},{"comments":null,"title":"February","info":{"arguments":[],"declType":"dataConstructor"},"sourceSpan":null},{"comments":null,"title":"March","info":{"arguments":[],"declType":"dataConstructor"},"sourceSpan":null},{"comments":null,"title":"April","info":{"arguments":[],"declType":"dataConstructor"},"sourceSpan":null},{"comments":null,"title":"May","info":{"arguments":[],"declType":"dataConstructor"},"sourceSpan":null},{"comments":null,"title":"June","info":{"arguments":[],"declType":"dataConstructor"},"sourceSpan":null},{"comments":null,"title":"July","info":{"arguments":[],"declType":"dataConstructor"},"sourceSpan":null},{"comments":null,"title":"August","info":{"arguments":[],"declType":"dataConstructor"},"sourceSpan":null},{"comments":null,"title":"September","info":{"arguments":[],"declType":"dataConstructor"},"sourceSpan":null},{"comments":null,"title":"October","info":{"arguments":[],"declType":"dataConstructor"},"sourceSpan":null},{"comments":null,"title":"November","info":{"arguments":[],"declType":"dataConstructor"},"sourceSpan":null},{"comments":null,"title":"December","info":{"arguments":[],"declType":"dataConstructor"},"sourceSpan":null},{"comments":null,"title":"eqMonth","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prelude"],"Eq"]},{"tag":"TypeConstructor","contents":[["Data","Date"],"Month"]}]}},"sourceSpan":{"start":[142,1],"name":"bower_components/purescript-datetime/src/Data/Date.purs","end":[157,1]}},{"comments":null,"title":"ordMonth","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prelude"],"Ord"]},{"tag":"TypeConstructor","contents":[["Data","Date"],"Month"]}]}},"sourceSpan":{"start":[157,1],"name":"bower_components/purescript-datetime/src/Data/Date.purs","end":[160,1]}},{"comments":null,"title":"boundedMonth","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prelude"],"Bounded"]},{"tag":"TypeConstructor","contents":[["Data","Date"],"Month"]}]}},"sourceSpan":{"start":[160,1],"name":"bower_components/purescript-datetime/src/Data/Date.purs","end":[164,1]}},{"comments":null,"title":"boundedOrdMonth","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prelude"],"BoundedOrd"]},{"tag":"TypeConstructor","contents":[["Data","Date"],"Month"]}]}},"sourceSpan":{"start":[164,1],"name":"bower_components/purescript-datetime/src/Data/Date.purs","end":[166,1]}},{"comments":null,"title":"showMonth","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prelude"],"Show"]},{"tag":"TypeConstructor","contents":[["Data","Date"],"Month"]}]}},"sourceSpan":{"start":[166,1],"name":"bower_components/purescript-datetime/src/Data/Date.purs","end":[180,1]}},{"comments":null,"title":"enumMonth","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Enum"],"Enum"]},{"tag":"TypeConstructor","contents":[["Data","Date"],"Month"]}]}},"sourceSpan":{"start":[180,1],"name":"bower_components/purescript-datetime/src/Data/Date.purs","end":[187,1]}}],"comments":"A month date component value.\n","title":"Month","fixity":null,"info":{"declType":"data","dataDeclType":"data","typeArguments":[]},"sourceSpan":{"start":[128,1],"name":"bower_components/purescript-datetime/src/Data/Date.purs","end":[142,1]}},{"children":[{"comments":null,"title":"Year","info":{"arguments":[{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}],"declType":"dataConstructor"},"sourceSpan":null},{"comments":null,"title":"eqYear","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prelude"],"Eq"]},{"tag":"TypeConstructor","contents":[["Data","Date"],"Year"]}]}},"sourceSpan":{"start":[109,1],"name":"bower_components/purescript-datetime/src/Data/Date.purs","end":[112,1]}},{"comments":null,"title":"ordYear","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prelude"],"Ord"]},{"tag":"TypeConstructor","contents":[["Data","Date"],"Year"]}]}},"sourceSpan":{"start":[112,1],"name":"bower_components/purescript-datetime/src/Data/Date.purs","end":[115,1]}},{"comments":null,"title":"semiringYear","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prelude"],"Semiring"]},{"tag":"TypeConstructor","contents":[["Data","Date"],"Year"]}]}},"sourceSpan":{"start":[115,1],"name":"bower_components/purescript-datetime/src/Data/Date.purs","end":[121,1]}},{"comments":null,"title":"ringYear","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prelude"],"Ring"]},{"tag":"TypeConstructor","contents":[["Data","Date"],"Year"]}]}},"sourceSpan":{"start":[121,1],"name":"bower_components/purescript-datetime/src/Data/Date.purs","end":[124,1]}},{"comments":null,"title":"showYear","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prelude"],"Show"]},{"tag":"TypeConstructor","contents":[["Data","Date"],"Year"]}]}},"sourceSpan":{"start":[124,1],"name":"bower_components/purescript-datetime/src/Data/Date.purs","end":[128,1]}}],"comments":"A year date component value.\n","title":"Year","fixity":null,"info":{"declType":"data","dataDeclType":"newtype","typeArguments":[]},"sourceSpan":{"start":[107,1],"name":"bower_components/purescript-datetime/src/Data/Date.purs","end":[109,1]}}]}],"name":"Elm.Date","comments":"Library for working with dates.\n\nImplemented using Puresript's `Data.Date` module.\n\nNote that the Purescript `Month` and `DayOfWeek` types\nspell out the entire word for constructors ... e.g.\n`January` for `Jan` and `Monday` for `Mon`.\n\nAlso, the Elm `Day` type is `DayOfWeek` in Purescript, and there are\ndistinct types for `DayOfMonth` and `Year`.\n","declarations":[{"children":[],"comments":"Attempt to read a date from a string.\n","title":"fromString","fixity":null,"info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Elm","Result"],"Result"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeConstructor","contents":[["Data","Date"],"Date"]}]}]}},"sourceSpan":{"start":[55,1],"name":"src/Elm/Date.purs","end":[56,1]}},{"children":[],"comments":"Convert a date into a time since midnight (UTC) of 1 January 1970 (i.e.\n[UNIX time](http://en.wikipedia.org/wiki/Unix_time)). Given the date 23 June\n1990 at 11:45AM this returns the corresponding time.\n","title":"toTime","fixity":null,"info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Date"],"Date"]}]},{"tag":"TypeConstructor","contents":[["Elm","Date"],"Time"]}]}},"sourceSpan":{"start":[65,1],"name":"src/Elm/Date.purs","end":[66,1]}},{"children":[],"comments":"Take a UNIX time and convert it to a `Date`.\n","title":"fromTime","fixity":null,"info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Elm","Date"],"Time"]}]},{"tag":"TypeConstructor","contents":[["Data","Date"],"Date"]}]}},"sourceSpan":{"start":[72,1],"name":"src/Elm/Date.purs","end":[73,1]}},{"children":[],"comments":"Extract the year of a given date. Given the date 23 June 1990 at 11:45AM\nthis returns the integer `1990`.\n\nAs in the Elm implementation, this implicitly uses the current locale.\n","title":"year","fixity":null,"info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Date"],"Date"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}},"sourceSpan":{"start":[83,1],"name":"src/Elm/Date.purs","end":[84,1]}},{"children":[],"comments":"Extract the month of a given date. Given the date 23 June 1990 at 11:45AM\nthis returns the Month `June` as defined below.\n\nNote that in Purescript, the constructors for `Month` are fully spelled out,\nso it is 'June` instead of `Jun`.\n\nAs in the Elm implementation, this implicitly uses the current locale.\n","title":"month","fixity":null,"info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Date"],"Date"]}]},{"tag":"TypeConstructor","contents":[["Data","Date"],"Month"]}]}},"sourceSpan":{"start":[96,1],"name":"src/Elm/Date.purs","end":[97,1]}},{"children":[],"comments":"Extract the day of a given date. Given the date 23 June 1990 at 11:45AM\nthis returns the integer `23`.\n\nAs in the Elm implementation, this implicitly uses the current locale.\n","title":"day","fixity":null,"info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Date"],"Date"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}},"sourceSpan":{"start":[104,1],"name":"src/Elm/Date.purs","end":[105,1]}},{"children":[],"comments":"Extract the day of the week for a given date. Given the date 23 June\n1990 at 11:45AM this returns the Day `Thursday` as defined below.\n\nNote that in Purescript, the days of the week are fully spelled out,\nso it is `Thursday` instead of `Thu`.\n\nAs in the Elm implementation, this implicitly uses the current locale.\n","title":"dayOfWeek","fixity":null,"info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Date"],"Date"]}]},{"tag":"TypeConstructor","contents":[["Data","Date"],"DayOfWeek"]}]}},"sourceSpan":{"start":[117,1],"name":"src/Elm/Date.purs","end":[118,1]}},{"children":[],"comments":"Extract the hour of a given date. Given the date 23 June 1990 at 11:45AM\nthis returns the integer `11`.\n\nAs in the Elm implementation, this implicitly uses the current locale.\n","title":"hour","fixity":null,"info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Date"],"Date"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}},"sourceSpan":{"start":[125,1],"name":"src/Elm/Date.purs","end":[126,1]}},{"children":[],"comments":"Extract the minute of a given date. Given the date 23 June 1990 at 11:45AM\nthis returns the integer `45`.\n\nAs in the Elm implementation, this implicitly uses the current locale.\n","title":"minute","fixity":null,"info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Date"],"Date"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}},"sourceSpan":{"start":[135,1],"name":"src/Elm/Date.purs","end":[136,1]}},{"children":[],"comments":"Extract the second of a given date. Given the date 23 June 1990 at 11:45AM\nthis returns the integer `0`.\n\nAs in the Elm implementation, this implicitly uses the current locale.\n","title":"second","fixity":null,"info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Date"],"Date"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}},"sourceSpan":{"start":[145,1],"name":"src/Elm/Date.purs","end":[146,1]}},{"children":[],"comments":"Extract the millisecond of a given date. Given the date 23 June 1990 at 11:45:30.123AM\nthis returns the integer `123`.\n\nAs in the Elm implementation, this implicitly uses the current locale.\n","title":"millisecond","fixity":null,"info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Date"],"Date"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}},"sourceSpan":{"start":[155,1],"name":"src/Elm/Date.purs","end":[156,1]}}]},{"reExports":[],"name":"Elm.Debug","comments":"This library is for investigating bugs or performance problems.\n","declarations":[{"children":[],"comments":"Log a tagged value on the developer console, and then return the value.\n\n    1 + log \"number\" 1        -- equals 2, logs \"number: 1\"\n    length (log \"start\" [])   -- equals 0, logs \"start: []\"\n\nNotice that `log` is not a pure function! It should *only* be used for\ninvestigating bugs or performance problems.\n","title":"log","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"a"}]}]},null]}},"sourceSpan":{"start":[23,1],"name":"src/Elm/Debug.purs","end":[24,1]}},{"children":[],"comments":"Crash the program with an error message.\n\nEquivalent to Purescript's `Partial.Unsafe.unsafeCrashWith`\n","title":"crash","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeVar","contents":"a"}]},null]}},"sourceSpan":{"start":[31,1],"name":"src/Elm/Debug.purs","end":[32,1]}}]},{"reExports":[{"moduleName":["Data","Map"],"declarations":[{"children":[],"comments":"An empty map\n","title":"empty","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["v",{"tag":"ForAll","contents":["k",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Map"],"Map"]},{"tag":"TypeVar","contents":"k"}]},{"tag":"TypeVar","contents":"v"}]},null]},null]}},"sourceSpan":{"start":[93,1],"name":"bower_components/purescript-maps/src/Data/Map.purs","end":[94,1]}},{"children":[],"comments":"Convert any foldable collection of key/value pairs to a map.\nOn key collision, later values take precedence over earlier ones.\n","title":"fromFoldable","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["v",{"tag":"ForAll","contents":["k",{"tag":"ForAll","contents":["f",{"tag":"ConstrainedType","contents":[[[[["Prelude"],"Ord"],[{"tag":"TypeVar","contents":"k"}]],[[["Data","Foldable"],"Foldable"],[{"tag":"TypeVar","contents":"f"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Tuple"],"Tuple"]},{"tag":"TypeVar","contents":"k"}]},{"tag":"TypeVar","contents":"v"}]}}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Map"],"Map"]},{"tag":"TypeVar","contents":"k"}]},{"tag":"TypeVar","contents":"v"}]}]}]},null]},null]},null]}},"sourceSpan":{"start":[278,1],"name":"bower_components/purescript-maps/src/Data/Map.purs","end":[279,1]}},{"children":[],"comments":"Create a map from a list of key/value pairs\n","title":"fromList","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["v",{"tag":"ForAll","contents":["k",{"tag":"ConstrainedType","contents":[[[[["Prelude"],"Ord"],[{"tag":"TypeVar","contents":"k"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","List"],"List"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Tuple"],"Tuple"]},{"tag":"TypeVar","contents":"k"}]},{"tag":"TypeVar","contents":"v"}]}}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Map"],"Map"]},{"tag":"TypeVar","contents":"k"}]},{"tag":"TypeVar","contents":"v"}]}]}]},null]},null]}},"sourceSpan":{"start":[295,1],"name":"bower_components/purescript-maps/src/Data/Map.purs","end":[296,1]}},{"children":[],"comments":"Insert a key/value pair into a map\n","title":"insert","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["v",{"tag":"ForAll","contents":["k",{"tag":"ConstrainedType","contents":[[[[["Prelude"],"Ord"],[{"tag":"TypeVar","contents":"k"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"k"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"v"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Map"],"Map"]},{"tag":"TypeVar","contents":"k"}]},{"tag":"TypeVar","contents":"v"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Map"],"Map"]},{"tag":"TypeVar","contents":"k"}]},{"tag":"TypeVar","contents":"v"}]}]}]}]}]},null]},null]}},"sourceSpan":{"start":[166,1],"name":"bower_components/purescript-maps/src/Data/Map.purs","end":[167,1]}},{"children":[],"comments":"Test if a map is empty\n","title":"isEmpty","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["v",{"tag":"ForAll","contents":["k",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Map"],"Map"]},{"tag":"TypeVar","contents":"k"}]},{"tag":"TypeVar","contents":"v"}]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]},null]},null]}},"sourceSpan":{"start":[97,1],"name":"bower_components/purescript-maps/src/Data/Map.purs","end":[98,1]}},{"children":[],"comments":"Get a list of the keys contained in a map\n","title":"keys","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["v",{"tag":"ForAll","contents":["k",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Map"],"Map"]},{"tag":"TypeVar","contents":"k"}]},{"tag":"TypeVar","contents":"v"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","List"],"List"]},{"tag":"TypeVar","contents":"k"}]}]},null]},null]}},"sourceSpan":{"start":[304,1],"name":"bower_components/purescript-maps/src/Data/Map.purs","end":[305,1]}},{"children":[],"comments":"Test if a key is a member of a map\n","title":"member","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["v",{"tag":"ForAll","contents":["k",{"tag":"ConstrainedType","contents":[[[[["Prelude"],"Ord"],[{"tag":"TypeVar","contents":"k"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"k"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Map"],"Map"]},{"tag":"TypeVar","contents":"k"}]},{"tag":"TypeVar","contents":"v"}]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}]}]},null]},null]}},"sourceSpan":{"start":[143,1],"name":"bower_components/purescript-maps/src/Data/Map.purs","end":[144,1]}},{"children":[],"comments":"Create a map with one key/value pair\n","title":"singleton","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["v",{"tag":"ForAll","contents":["k",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"k"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"v"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Map"],"Map"]},{"tag":"TypeVar","contents":"k"}]},{"tag":"TypeVar","contents":"v"}]}]}]},null]},null]}},"sourceSpan":{"start":[102,1],"name":"bower_components/purescript-maps/src/Data/Map.purs","end":[103,1]}},{"children":[],"comments":"Calculate the number of key/value pairs in a map\n","title":"size","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["v",{"tag":"ForAll","contents":["k",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Map"],"Map"]},{"tag":"TypeVar","contents":"k"}]},{"tag":"TypeVar","contents":"v"}]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},null]},null]}},"sourceSpan":{"start":[332,1],"name":"bower_components/purescript-maps/src/Data/Map.purs","end":[333,1]}},{"children":[],"comments":"Convert a map to a list of key/value pairs\n","title":"toList","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["v",{"tag":"ForAll","contents":["k",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Map"],"Map"]},{"tag":"TypeVar","contents":"k"}]},{"tag":"TypeVar","contents":"v"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","List"],"List"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Tuple"],"Tuple"]},{"tag":"TypeVar","contents":"k"}]},{"tag":"TypeVar","contents":"v"}]}}]}]},null]},null]}},"sourceSpan":{"start":[289,1],"name":"bower_components/purescript-maps/src/Data/Map.purs","end":[290,1]}},{"children":[],"comments":"Compute the union of two maps, preferring values from the first map in the case\nof duplicate keys\n","title":"union","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["v",{"tag":"ForAll","contents":["k",{"tag":"ConstrainedType","contents":[[[[["Prelude"],"Ord"],[{"tag":"TypeVar","contents":"k"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Map"],"Map"]},{"tag":"TypeVar","contents":"k"}]},{"tag":"TypeVar","contents":"v"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Map"],"Map"]},{"tag":"TypeVar","contents":"k"}]},{"tag":"TypeVar","contents":"v"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Map"],"Map"]},{"tag":"TypeVar","contents":"k"}]},{"tag":"TypeVar","contents":"v"}]}]}]}]},null]},null]}},"sourceSpan":{"start":[324,1],"name":"bower_components/purescript-maps/src/Data/Map.purs","end":[325,1]}},{"children":[],"comments":"Get a list of the values contained in a map\n","title":"values","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["v",{"tag":"ForAll","contents":["k",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Map"],"Map"]},{"tag":"TypeVar","contents":"k"}]},{"tag":"TypeVar","contents":"v"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","List"],"List"]},{"tag":"TypeVar","contents":"v"}]}]},null]},null]}},"sourceSpan":{"start":[310,1],"name":"bower_components/purescript-maps/src/Data/Map.purs","end":[311,1]}}]}],"name":"Elm.Dict","comments":"A dictionary mapping unique keys to values. The keys can be any type which\nhas an instance of the `Ord` class.\n\nThis is implemented in terms of Purescript's `Data.Map`.\n","declarations":[{"children":[],"comments":"Elm's `Dict` type is a synonym for Purescript's `Data.Map`.\n","title":"Dict","fixity":null,"info":{"arguments":[],"declType":"typeSynonym","type":{"tag":"TypeConstructor","contents":[["Data","Map"],"Map"]}},"sourceSpan":{"start":[40,1],"name":"src/Elm/Dict.purs","end":[58,1]}},{"children":[],"comments":"Get the value associated with a key. If the key is not found, return\n`Nothing`. This is useful when you are not sure if a key will be in the\ndictionary.\n\n    animals = fromList [ (\"Tom\", Cat), (\"Jerry\", Mouse) ]\n\n    get \"Tom\"   animals == Just Cat\n    get \"Jerry\" animals == Just Mouse\n    get \"Spike\" animals == Nothing\n\nEquivalent to Purescript's `lookup`.\n","title":"get","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["v",{"tag":"ForAll","contents":["k",{"tag":"ConstrainedType","contents":[[[[["Prelude"],"Ord"],[{"tag":"TypeVar","contents":"k"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"k"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Elm","Dict"],"Dict"]},{"tag":"TypeVar","contents":"k"}]},{"tag":"TypeVar","contents":"v"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeVar","contents":"v"}]}]}]}]},null]},null]}},"sourceSpan":{"start":[58,1],"name":"src/Elm/Dict.purs","end":[59,1]}},{"children":[],"comments":"Remove a key-value pair from a dictionary. If the key is not found,\nno changes are made.\n\nEquivalent to Purescript's `delete`.\n","title":"remove","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["v",{"tag":"ForAll","contents":["k",{"tag":"ConstrainedType","contents":[[[[["Prelude"],"Ord"],[{"tag":"TypeVar","contents":"k"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"k"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Elm","Dict"],"Dict"]},{"tag":"TypeVar","contents":"k"}]},{"tag":"TypeVar","contents":"v"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Elm","Dict"],"Dict"]},{"tag":"TypeVar","contents":"k"}]},{"tag":"TypeVar","contents":"v"}]}]}]}]},null]},null]}},"sourceSpan":{"start":[66,1],"name":"src/Elm/Dict.purs","end":[67,1]}},{"children":[],"comments":"Update the value of a dictionary for a specific key with a given function.\n\nLike Purescript's `alter`, but with flipped arguments.\n","title":"update","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["v",{"tag":"ForAll","contents":["k",{"tag":"ConstrainedType","contents":[[[[["Prelude"],"Ord"],[{"tag":"TypeVar","contents":"k"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"k"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeVar","contents":"v"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeVar","contents":"v"}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Elm","Dict"],"Dict"]},{"tag":"TypeVar","contents":"k"}]},{"tag":"TypeVar","contents":"v"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Elm","Dict"],"Dict"]},{"tag":"TypeVar","contents":"k"}]},{"tag":"TypeVar","contents":"v"}]}]}]}]}]},null]},null]}},"sourceSpan":{"start":[73,1],"name":"src/Elm/Dict.purs","end":[74,1]}},{"children":[],"comments":"Keep a key-value pair when its key appears in the second dictionary.\nPreference is given to values in the first dictionary.\n","title":"intersect","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["v",{"tag":"ForAll","contents":["k",{"tag":"ConstrainedType","contents":[[[[["Prelude"],"Ord"],[{"tag":"TypeVar","contents":"k"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Elm","Dict"],"Dict"]},{"tag":"TypeVar","contents":"k"}]},{"tag":"TypeVar","contents":"v"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Elm","Dict"],"Dict"]},{"tag":"TypeVar","contents":"k"}]},{"tag":"TypeVar","contents":"v"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Elm","Dict"],"Dict"]},{"tag":"TypeVar","contents":"k"}]},{"tag":"TypeVar","contents":"v"}]}]}]}]},null]},null]}},"sourceSpan":{"start":[79,1],"name":"src/Elm/Dict.purs","end":[80,1]}},{"children":[],"comments":"Keep a key-value pair when its key does not appear in the second dictionary.\n","title":"diff","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["v",{"tag":"ForAll","contents":["k",{"tag":"ConstrainedType","contents":[[[[["Prelude"],"Ord"],[{"tag":"TypeVar","contents":"k"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Elm","Dict"],"Dict"]},{"tag":"TypeVar","contents":"k"}]},{"tag":"TypeVar","contents":"v"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Elm","Dict"],"Dict"]},{"tag":"TypeVar","contents":"k"}]},{"tag":"TypeVar","contents":"v"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Elm","Dict"],"Dict"]},{"tag":"TypeVar","contents":"k"}]},{"tag":"TypeVar","contents":"v"}]}]}]}]},null]},null]}},"sourceSpan":{"start":[85,1],"name":"src/Elm/Dict.purs","end":[86,1]}},{"children":[],"comments":"Keep a key-value pair when it satisfies a predicate.\n","title":"filter","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["v",{"tag":"ForAll","contents":["k",{"tag":"ConstrainedType","contents":[[[[["Prelude"],"Ord"],[{"tag":"TypeVar","contents":"k"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"k"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"v"}]},{"tag":"TypeConstructor","contents":[["Elm","Basics"],"Bool"]}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Elm","Dict"],"Dict"]},{"tag":"TypeVar","contents":"k"}]},{"tag":"TypeVar","contents":"v"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Elm","Dict"],"Dict"]},{"tag":"TypeVar","contents":"k"}]},{"tag":"TypeVar","contents":"v"}]}]}]}]},null]},null]}},"sourceSpan":{"start":[91,1],"name":"src/Elm/Dict.purs","end":[92,1]}},{"children":[],"comments":"Partition a dictionary according to a predicate. The first dictionary\ncontains all key-value pairs which satisfy the predicate, and the second\ncontains the rest.\n\nThe result is a record of `{trues, falses}`, which is different from the Elm\nversion, which returns a `Tuple`.\n","title":"partition","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["v",{"tag":"ForAll","contents":["k",{"tag":"ConstrainedType","contents":[[[[["Prelude"],"Ord"],[{"tag":"TypeVar","contents":"k"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"k"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"v"}]},{"tag":"TypeConstructor","contents":[["Elm","Basics"],"Bool"]}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Elm","Dict"],"Dict"]},{"tag":"TypeVar","contents":"k"}]},{"tag":"TypeVar","contents":"v"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Object"]},{"tag":"RCons","contents":["trues",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Elm","Dict"],"Dict"]},{"tag":"TypeVar","contents":"k"}]},{"tag":"TypeVar","contents":"v"}]},{"tag":"RCons","contents":["falses",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Elm","Dict"],"Dict"]},{"tag":"TypeVar","contents":"k"}]},{"tag":"TypeVar","contents":"v"}]},{"tag":"REmpty","contents":[]}]}]}]}]}]}]},null]},null]}},"sourceSpan":{"start":[109,1],"name":"src/Elm/Dict.purs","end":[110,1]}},{"children":[],"comments":"Apply a function to all values in a dictionary.\n","title":"map","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["k",{"tag":"ConstrainedType","contents":[[[[["Prelude"],"Ord"],[{"tag":"TypeVar","contents":"k"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"k"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Elm","Dict"],"Dict"]},{"tag":"TypeVar","contents":"k"}]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Elm","Dict"],"Dict"]},{"tag":"TypeVar","contents":"k"}]},{"tag":"TypeVar","contents":"b"}]}]}]}]},null]},null]},null]}},"sourceSpan":{"start":[122,1],"name":"src/Elm/Dict.purs","end":[123,1]}},{"children":[],"comments":"Fold over the key-value pairs in a dictionary, in order from lowest\nkey to highest key.\n","title":"foldl","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["v",{"tag":"ForAll","contents":["k",{"tag":"ConstrainedType","contents":[[[[["Prelude"],"Ord"],[{"tag":"TypeVar","contents":"k"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"k"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"v"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeVar","contents":"b"}]}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Elm","Dict"],"Dict"]},{"tag":"TypeVar","contents":"k"}]},{"tag":"TypeVar","contents":"v"}]}]},{"tag":"TypeVar","contents":"b"}]}]}]}]},null]},null]},null]}},"sourceSpan":{"start":[142,1],"name":"src/Elm/Dict.purs","end":[143,1]}},{"children":[],"comments":"Fold over the key-value pairs in a dictionary, in order from highest\nkey to lowest key.\n","title":"foldr","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["v",{"tag":"ForAll","contents":["k",{"tag":"ConstrainedType","contents":[[[[["Prelude"],"Ord"],[{"tag":"TypeVar","contents":"k"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"k"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"v"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeVar","contents":"b"}]}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Elm","Dict"],"Dict"]},{"tag":"TypeVar","contents":"k"}]},{"tag":"TypeVar","contents":"v"}]}]},{"tag":"TypeVar","contents":"b"}]}]}]}]},null]},null]},null]}},"sourceSpan":{"start":[159,1],"name":"src/Elm/Dict.purs","end":[160,1]}},{"children":[],"comments":"Produce a `Dict` from any `Unfoldable` container of tuples of keys\nand values. Defined polymorphically to accommodate Purescript `Array`,\namong others.\n\nNote that this is not in the Elm API.\n","title":"toUnfoldable","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["v",{"tag":"ForAll","contents":["k",{"tag":"ForAll","contents":["f",{"tag":"ConstrainedType","contents":[[[[["Prelude"],"Ord"],[{"tag":"TypeVar","contents":"k"}]],[[["Data","Unfoldable"],"Unfoldable"],[{"tag":"TypeVar","contents":"f"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Elm","Dict"],"Dict"]},{"tag":"TypeVar","contents":"k"}]},{"tag":"TypeVar","contents":"v"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Tuple"],"Tuple"]},{"tag":"TypeVar","contents":"k"}]},{"tag":"TypeVar","contents":"v"}]}}]}]}]},null]},null]},null]}},"sourceSpan":{"start":[179,1],"name":"src/Elm/Dict.purs","end":[180,1]}}]},{"reExports":[],"name":"Elm.Foldable","comments":"Elm modules define `foldl` with a different signature than Purescript's.\nSo, we define that alternative `foldl` here.\n","declarations":[{"children":[],"comments":"Reduce a container from the left.\n\nEquivalent to Purescript's `foldl`, but the function you supply is flipped.\n","title":"foldl","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["f",{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[[[[["Data","Foldable"],"Foldable"],[{"tag":"TypeVar","contents":"f"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeVar","contents":"b"}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeVar","contents":"b"}]}]}]}]},null]},null]},null]}},"sourceSpan":{"start":[15,1],"name":"src/Elm/Foldable.purs","end":[16,1]}}]},{"reExports":[{"moduleName":["Elm","Apply"],"declarations":[{"children":[],"comments":"Map a function in a container to a value in a container.\n\nThis is the equivalent of Purescript's `apply`.\n","title":"andMap","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["f",{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[[[[["Prelude"],"Apply"],[{"tag":"TypeVar","contents":"f"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"b"}]}]}]}]},null]},null]},null]}},"sourceSpan":{"start":[52,1],"name":"src/Elm/Apply.purs","end":[53,1]}},{"children":[],"comments":"Map a function of two arguments over some container type.\n\nThe equivalent of Purescript's `lift2`.\n","title":"map2","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["f",{"tag":"ForAll","contents":["c",{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[[[[["Prelude"],"Apply"],[{"tag":"TypeVar","contents":"f"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeVar","contents":"c"}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"c"}]}]}]}]}]},null]},null]},null]},null]}},"sourceSpan":{"start":[24,1],"name":"src/Elm/Apply.purs","end":[25,1]}},{"children":[],"comments":"Map a function of three arguments over some container type.\n\nThe equivalent of Purescript's `lift3`.\n","title":"map3","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["f",{"tag":"ForAll","contents":["d",{"tag":"ForAll","contents":["c",{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[[[[["Prelude"],"Apply"],[{"tag":"TypeVar","contents":"f"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"c"}]},{"tag":"TypeVar","contents":"d"}]}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"c"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"d"}]}]}]}]}]}]},null]},null]},null]},null]},null]}},"sourceSpan":{"start":[31,1],"name":"src/Elm/Apply.purs","end":[32,1]}},{"children":[],"comments":"Map a function of four arguments over some container type.\n\nThe equivalent of Purescript's `lift4`.\n","title":"map4","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["f",{"tag":"ForAll","contents":["e",{"tag":"ForAll","contents":["d",{"tag":"ForAll","contents":["c",{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[[[[["Prelude"],"Apply"],[{"tag":"TypeVar","contents":"f"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"c"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"d"}]},{"tag":"TypeVar","contents":"e"}]}]}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"c"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"d"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"e"}]}]}]}]}]}]}]},null]},null]},null]},null]},null]},null]}},"sourceSpan":{"start":[38,1],"name":"src/Elm/Apply.purs","end":[39,1]}},{"children":[],"comments":"Map a function of five arguments over some container type.\n\nThe equivalent of Purescript's `lift5`.\n","title":"map5","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["g",{"tag":"ForAll","contents":["f",{"tag":"ForAll","contents":["e",{"tag":"ForAll","contents":["d",{"tag":"ForAll","contents":["c",{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[[[[["Prelude"],"Apply"],[{"tag":"TypeVar","contents":"f"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"c"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"d"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"e"}]},{"tag":"TypeVar","contents":"g"}]}]}]}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"c"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"d"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"e"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"g"}]}]}]}]}]}]}]}]},null]},null]},null]},null]},null]},null]},null]}},"sourceSpan":{"start":[45,1],"name":"src/Elm/Apply.purs","end":[46,1]}}]},{"moduleName":["Elm","Bind"],"declarations":[{"children":[],"comments":"Given some computation, chain its result with another computation.\n\nEquivalent to Purescript's `bind`.\n","title":"andThen","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["m",{"tag":"ConstrainedType","contents":[[[[["Prelude"],"Bind"],[{"tag":"TypeVar","contents":"m"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"m"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"m"},{"tag":"TypeVar","contents":"b"}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"m"},{"tag":"TypeVar","contents":"b"}]}]}]}]},null]},null]},null]}},"sourceSpan":{"start":[16,1],"name":"src/Elm/Bind.purs","end":[17,1]}}]},{"moduleName":["Elm","Json","Encode"],"declarations":[{"children":[],"comments":"Represents a JavaScript value.\n","title":"Value","fixity":null,"info":{"arguments":[],"declType":"typeSynonym","type":{"tag":"TypeConstructor","contents":[["Data","Foreign"],"Foreign"]}},"sourceSpan":{"start":[28,1],"name":"src/Elm/Json/Encode.purs","end":[48,1]}}]},{"moduleName":["Prelude"],"declarations":[{"children":[],"comments":null,"title":"map","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["f",{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[[[[null,"Functor"],[{"tag":"TypeVar","contents":"f"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"b"}]}]}]}]},null]},null]},null]}},"sourceSpan":null}]}],"name":"Elm.Json.Decode","comments":"A way to turn Json values into Elm values. A `Decoder a` represents a\ndecoding operation that will either produce a value of type `a`, or fail.\n\nElm's `Json.Decode` doesn't seem to be quite like any existing Purescript\npackage, so I've re-implemented it, using parts of purescript-foreign as\na base. For other approaches to decoding JSON in Purescript, you could see\npurescript-foreign, and the purescript-argonaut-* packages.\n","declarations":[{"children":[{"comments":null,"title":"functorDecoder","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prelude"],"Functor"]},{"tag":"TypeConstructor","contents":[["Elm","Json","Decode"],"Decoder"]}]}},"sourceSpan":{"start":[80,1],"name":"src/Elm/Json/Decode.purs","end":[85,1]}},{"comments":null,"title":"altDecoder","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Alt"],"Alt"]},{"tag":"TypeConstructor","contents":[["Elm","Json","Decode"],"Decoder"]}]}},"sourceSpan":{"start":[85,1],"name":"src/Elm/Json/Decode.purs","end":[101,1]}},{"comments":null,"title":"applyDecoder","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prelude"],"Apply"]},{"tag":"TypeConstructor","contents":[["Elm","Json","Decode"],"Decoder"]}]}},"sourceSpan":{"start":[101,1],"name":"src/Elm/Json/Decode.purs","end":[107,1]}},{"comments":null,"title":"applicativeDecoder","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prelude"],"Applicative"]},{"tag":"TypeConstructor","contents":[["Elm","Json","Decode"],"Decoder"]}]}},"sourceSpan":{"start":[107,1],"name":"src/Elm/Json/Decode.purs","end":[111,1]}},{"comments":null,"title":"bindDecoder","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prelude"],"Bind"]},{"tag":"TypeConstructor","contents":[["Elm","Json","Decode"],"Decoder"]}]}},"sourceSpan":{"start":[111,1],"name":"src/Elm/Json/Decode.purs","end":[122,1]}},{"comments":null,"title":"monadDecoder","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prelude"],"Monad"]},{"tag":"TypeConstructor","contents":[["Elm","Json","Decode"],"Decoder"]}]}},"sourceSpan":{"start":[122,1],"name":"src/Elm/Json/Decode.purs","end":[130,1]}}],"comments":"Represents a way of decoding JSON values. If you have a `(Decoder (List String))`\nit will attempt to take some JSON value and turn it into a list of strings.\nThese decoders are easy to put together so you can create more and more complex\ndecoders.\n","title":"Decoder","fixity":null,"info":{"declType":"data","dataDeclType":"newtype","typeArguments":[["a",null]]},"sourceSpan":{"start":[67,1],"name":"src/Elm/Json/Decode.purs","end":[75,1]}},{"children":[],"comments":"Using a certain decoder, attempt to parse a JSON string. If the decoder\nfails, you will get a string message telling you why.\n\n    decodeString (tuple2 Tuple float float) \"[3,4]\"                  -- Ok (Tuple 3 4)\n    decodeString (tuple2 Tuple float float) \"{ \\\"x\\\": 3, \\\"y\\\": 4 }\" -- Err \"\"\n","title":"decodeString","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Elm","Json","Decode"],"Decoder"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Elm","Result"],"Result"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeVar","contents":"a"}]}]}]},null]}},"sourceSpan":{"start":[130,1],"name":"src/Elm/Json/Decode.purs","end":[131,1]}},{"children":[],"comments":"Access a nested field, making it easy to dive into big structures. This is\nreally a helper function so you do not need to write `(:=)` so many times.\n\n    -- object.target.value = 'hello'\n    value :: Decoder String\n    value =\n        at [\"target\", \"value\"] string\n\nIt is defined as\n\n    at fields decoder =\n        List.foldr (:=) decoder fields\n\nNote that the signature is defined in terms of `Foldable` so that it will\nwork with `Array` or `List` (among others).\n","title":"at","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["f",{"tag":"ConstrainedType","contents":[[[[["Data","Foldable"],"Foldable"],[{"tag":"TypeVar","contents":"f"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Elm","Json","Decode"],"Decoder"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Elm","Json","Decode"],"Decoder"]},{"tag":"TypeVar","contents":"a"}]}]}]}]},null]},null]}},"sourceSpan":{"start":[152,1],"name":"src/Elm/Json/Decode.purs","end":[153,1]}},{"children":[],"comments":"Applies the decoder to the field with the given name.\nFails if the JSON object has no such field.\n\n    nameAndAge :: Decoder (Tuple String Int)\n    nameAndAge =\n        object2 Tuple\n          (\"name\" := string)\n          (\"age\" := int)\n\n    optionalProfession :: Decoder (Maybe String)\n    optionalProfession =\n        maybe (\"profession\" := string)\n","title":"field","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Elm","Json","Decode"],"Decoder"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Elm","Json","Decode"],"Decoder"]},{"tag":"TypeVar","contents":"a"}]}]}]},null]}},"sourceSpan":{"start":[169,1],"name":"src/Elm/Json/Decode.purs","end":[170,1]}},{"children":[],"comments":null,"title":"(:=)","fixity":{"associativity":"infixl","precedence":4},"info":{"declType":"alias","fixity":{"associativity":"infixl","precedence":4},"for":[["Elm","Json","Decode"],{"AliasValue":{"Ident":"field"}}]},"sourceSpan":{"start":[174,1],"name":"src/Elm/Json/Decode.purs","end":[182,1]}},{"children":[],"comments":"Apply a function to a decoder.\n\n    object1 sqrt (\"x\" := float)\n\nEquivalent to Purescript's `map`.\n","title":"object1","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["value",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"value"}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Elm","Json","Decode"],"Decoder"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Elm","Json","Decode"],"Decoder"]},{"tag":"TypeVar","contents":"value"}]}]}]},null]},null]}},"sourceSpan":{"start":[182,1],"name":"src/Elm/Json/Decode.purs","end":[183,1]}},{"children":[],"comments":"Use two different decoders on a JS value. This is nice for extracting\nmultiple fields from an object.\n\n    point :: Decoder (Tuple Float Float)\n    point =\n        object2 Tuple\n          (\"x\" := float)\n          (\"y\" := float)\n\nEquivalent to Purescript's `lift2`.\n","title":"object2","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["value",{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeVar","contents":"value"}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Elm","Json","Decode"],"Decoder"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Elm","Json","Decode"],"Decoder"]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Elm","Json","Decode"],"Decoder"]},{"tag":"TypeVar","contents":"value"}]}]}]}]},null]},null]},null]}},"sourceSpan":{"start":[196,1],"name":"src/Elm/Json/Decode.purs","end":[197,1]}},{"children":[],"comments":"Use three different decoders on a JS value. This is nice for extracting\nmultiple fields from an object.\n\n    type Job = { name :: String, id :: Int, completed :: Bool }\n\n    point :: Decoder Job\n    point =\n        object3 Job\n          (\"name\" := string)\n          (\"id\" := int)\n          (\"completed\" := bool)\n\nEquivalent to Purescript's `lift3`.\n","title":"object3","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["value",{"tag":"ForAll","contents":["c",{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"c"}]},{"tag":"TypeVar","contents":"value"}]}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Elm","Json","Decode"],"Decoder"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Elm","Json","Decode"],"Decoder"]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Elm","Json","Decode"],"Decoder"]},{"tag":"TypeVar","contents":"c"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Elm","Json","Decode"],"Decoder"]},{"tag":"TypeVar","contents":"value"}]}]}]}]}]},null]},null]},null]},null]}},"sourceSpan":{"start":[213,1],"name":"src/Elm/Json/Decode.purs","end":[214,1]}},{"children":[],"comments":"Equivalent to Purescript's `lift4`.\n","title":"object4","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["value",{"tag":"ForAll","contents":["d",{"tag":"ForAll","contents":["c",{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"c"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"d"}]},{"tag":"TypeVar","contents":"value"}]}]}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Elm","Json","Decode"],"Decoder"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Elm","Json","Decode"],"Decoder"]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Elm","Json","Decode"],"Decoder"]},{"tag":"TypeVar","contents":"c"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Elm","Json","Decode"],"Decoder"]},{"tag":"TypeVar","contents":"d"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Elm","Json","Decode"],"Decoder"]},{"tag":"TypeVar","contents":"value"}]}]}]}]}]}]},null]},null]},null]},null]},null]}},"sourceSpan":{"start":[218,1],"name":"src/Elm/Json/Decode.purs","end":[219,1]}},{"children":[],"comments":"Equivalent to Purescript's `lift5`.\n","title":"object5","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["value",{"tag":"ForAll","contents":["e",{"tag":"ForAll","contents":["d",{"tag":"ForAll","contents":["c",{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"c"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"d"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"e"}]},{"tag":"TypeVar","contents":"value"}]}]}]}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Elm","Json","Decode"],"Decoder"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Elm","Json","Decode"],"Decoder"]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Elm","Json","Decode"],"Decoder"]},{"tag":"TypeVar","contents":"c"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Elm","Json","Decode"],"Decoder"]},{"tag":"TypeVar","contents":"d"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Elm","Json","Decode"],"Decoder"]},{"tag":"TypeVar","contents":"e"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Elm","Json","Decode"],"Decoder"]},{"tag":"TypeVar","contents":"value"}]}]}]}]}]}]}]},null]},null]},null]},null]},null]},null]}},"sourceSpan":{"start":[223,1],"name":"src/Elm/Json/Decode.purs","end":[224,1]}},{"children":[],"comments":null,"title":"object6","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["value",{"tag":"ForAll","contents":["f",{"tag":"ForAll","contents":["e",{"tag":"ForAll","contents":["d",{"tag":"ForAll","contents":["c",{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"c"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"d"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"e"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"f"}]},{"tag":"TypeVar","contents":"value"}]}]}]}]}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Elm","Json","Decode"],"Decoder"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Elm","Json","Decode"],"Decoder"]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Elm","Json","Decode"],"Decoder"]},{"tag":"TypeVar","contents":"c"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Elm","Json","Decode"],"Decoder"]},{"tag":"TypeVar","contents":"d"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Elm","Json","Decode"],"Decoder"]},{"tag":"TypeVar","contents":"e"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Elm","Json","Decode"],"Decoder"]},{"tag":"TypeVar","contents":"f"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Elm","Json","Decode"],"Decoder"]},{"tag":"TypeVar","contents":"value"}]}]}]}]}]}]}]}]},null]},null]},null]},null]},null]},null]},null]}},"sourceSpan":{"start":[227,1],"name":"src/Elm/Json/Decode.purs","end":[228,1]}},{"children":[],"comments":null,"title":"object7","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["value",{"tag":"ForAll","contents":["g",{"tag":"ForAll","contents":["f",{"tag":"ForAll","contents":["e",{"tag":"ForAll","contents":["d",{"tag":"ForAll","contents":["c",{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"c"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"d"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"e"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"f"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"g"}]},{"tag":"TypeVar","contents":"value"}]}]}]}]}]}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Elm","Json","Decode"],"Decoder"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Elm","Json","Decode"],"Decoder"]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Elm","Json","Decode"],"Decoder"]},{"tag":"TypeVar","contents":"c"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Elm","Json","Decode"],"Decoder"]},{"tag":"TypeVar","contents":"d"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Elm","Json","Decode"],"Decoder"]},{"tag":"TypeVar","contents":"e"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Elm","Json","Decode"],"Decoder"]},{"tag":"TypeVar","contents":"f"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Elm","Json","Decode"],"Decoder"]},{"tag":"TypeVar","contents":"g"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Elm","Json","Decode"],"Decoder"]},{"tag":"TypeVar","contents":"value"}]}]}]}]}]}]}]}]}]},null]},null]},null]},null]},null]},null]},null]},null]}},"sourceSpan":{"start":[232,1],"name":"src/Elm/Json/Decode.purs","end":[233,1]}},{"children":[],"comments":null,"title":"object8","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["value",{"tag":"ForAll","contents":["h",{"tag":"ForAll","contents":["g",{"tag":"ForAll","contents":["f",{"tag":"ForAll","contents":["e",{"tag":"ForAll","contents":["d",{"tag":"ForAll","contents":["c",{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"c"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"d"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"e"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"f"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"g"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"h"}]},{"tag":"TypeVar","contents":"value"}]}]}]}]}]}]}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Elm","Json","Decode"],"Decoder"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Elm","Json","Decode"],"Decoder"]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Elm","Json","Decode"],"Decoder"]},{"tag":"TypeVar","contents":"c"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Elm","Json","Decode"],"Decoder"]},{"tag":"TypeVar","contents":"d"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Elm","Json","Decode"],"Decoder"]},{"tag":"TypeVar","contents":"e"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Elm","Json","Decode"],"Decoder"]},{"tag":"TypeVar","contents":"f"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Elm","Json","Decode"],"Decoder"]},{"tag":"TypeVar","contents":"g"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Elm","Json","Decode"],"Decoder"]},{"tag":"TypeVar","contents":"h"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Elm","Json","Decode"],"Decoder"]},{"tag":"TypeVar","contents":"value"}]}]}]}]}]}]}]}]}]}]},null]},null]},null]},null]},null]},null]},null]},null]},null]}},"sourceSpan":{"start":[237,1],"name":"src/Elm/Json/Decode.purs","end":[238,1]}},{"children":[],"comments":"Turn any object into a list of key-value pairs, including inherited enumerable properties. Fails if _any_ value can't be\ndecoded with the given decoder.\n\n    -- { \"tom\": 89, \"sue\": 92, \"bill\": 97, ... }\n    grades :: Decoder (List (Tuple String Int))\n    grades =\n        keyValuePairs int\n\nThe container for the return type is polymorphic in order to accommodate `List` or `Array`, among others.\n","title":"keyValuePairs","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["f",{"tag":"ConstrainedType","contents":[[[[["Data","Monoid"],"Monoid"],[{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Tuple"],"Tuple"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeVar","contents":"a"}]}}]}}]],[[["Prelude"],"Applicative"],[{"tag":"TypeVar","contents":"f"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Elm","Json","Decode"],"Decoder"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Elm","Json","Decode"],"Decoder"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Tuple"],"Tuple"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeVar","contents":"a"}]}}]}}]}]}]},null]},null]}},"sourceSpan":{"start":[251,1],"name":"src/Elm/Json/Decode.purs","end":[252,1]}},{"children":[],"comments":"Turn any object into a dictionary of key-value pairs, including inherited enumerable properties. Fails if _any_ value can't be\ndecoded with the given decoder.\n\n    -- { \"mercury\": 0.33, \"venus\": 4.87, \"earth\": 5.97, ... }\n    planetMasses :: Decoder (Dict String Float)\n    planetMasses =\n        dict float\n","title":"dict","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Elm","Json","Decode"],"Decoder"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Elm","Json","Decode"],"Decoder"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Elm","Dict"],"Dict"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeVar","contents":"a"}]}}]}]},null]}},"sourceSpan":{"start":[284,1],"name":"src/Elm/Json/Decode.purs","end":[285,1]}},{"children":[],"comments":"Try out multiple different decoders. This is helpful when you are dealing\nwith something with a very strange shape and when `andThen` does not help\nnarrow things down so you can be more targeted.\n\n    -- [ [3,4], { \"x\":0, \"y\":0 }, [5,12] ]\n\n    points :: Decoder (List (Tuple Float Float))\n    points =\n        list point\n\n    point :: Decoder (Tuple Float Float)\n    point =\n        oneOf\n        [ tuple2 Tuple float float\n        , object2 Tuple (\"x\" := float) (\"y\" := float)\n        ]\n\nThe container has a polymorphic type to accommodate `List` or `Array`,\namong others.\n","title":"oneOf","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["f",{"tag":"ConstrainedType","contents":[[[[["Data","Foldable"],"Foldable"],[{"tag":"TypeVar","contents":"f"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Elm","Json","Decode"],"Decoder"]},{"tag":"TypeVar","contents":"a"}]}}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Elm","Json","Decode"],"Decoder"]},{"tag":"TypeVar","contents":"a"}]}]}]},null]},null]}},"sourceSpan":{"start":[308,1],"name":"src/Elm/Json/Decode.purs","end":[309,1]}},{"children":[],"comments":"Extract any value with an `IsForeign` instance.\n\nNote that this is not in the Elm API.\n","title":"extractForeign","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[[[[["Data","Foreign","Class"],"IsForeign"],[{"tag":"TypeVar","contents":"a"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Elm","Json","Decode"],"Decoder"]},{"tag":"TypeVar","contents":"a"}]}]},null]}},"sourceSpan":{"start":[316,1],"name":"src/Elm/Json/Decode.purs","end":[317,1]}},{"children":[],"comments":"Extract a string.\n\n    -- [\"John\",\"Doe\"]\n\n    name :: Decoder (Tuple String String)\n    name =\n        tuple2 Tuple string string\n","title":"string","fixity":null,"info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Elm","Json","Decode"],"Decoder"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}},"sourceSpan":{"start":[327,1],"name":"src/Elm/Json/Decode.purs","end":[328,1]}},{"children":[],"comments":"Extract a float.\n\n    -- [ 6.022, 3.1415, 1.618 ]\n\n    numbers :: Decoder (List Float)\n    numbers =\n        list float\n","title":"float","fixity":null,"info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Elm","Json","Decode"],"Decoder"]},{"tag":"TypeConstructor","contents":[["Elm","Basics"],"Float"]}]}},"sourceSpan":{"start":[338,1],"name":"src/Elm/Json/Decode.purs","end":[339,1]}},{"children":[],"comments":"Extract an integer.\n\n    -- { ... \"age\": 42 ... }\n\n    age :: Decoder Int\n    age =\n        \"age\" := int\n","title":"int","fixity":null,"info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Elm","Json","Decode"],"Decoder"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}},"sourceSpan":{"start":[349,1],"name":"src/Elm/Json/Decode.purs","end":[350,1]}},{"children":[],"comments":"Extract a boolean.\n\n    -- { ... \"checked\": true ... }\n\n    checked :: Decoder Bool\n    checked =\n        \"checked\" := bool\n","title":"bool","fixity":null,"info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Elm","Json","Decode"],"Decoder"]},{"tag":"TypeConstructor","contents":[["Elm","Basics"],"Bool"]}]}},"sourceSpan":{"start":[360,1],"name":"src/Elm/Json/Decode.purs","end":[361,1]}},{"children":[],"comments":"Extract a List from a JS array.\n\n    -- [1,2,3,4]\n\n    numbers :: Decoder (List Int)\n    numbers =\n        list int\n","title":"list","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Elm","Json","Decode"],"Decoder"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Elm","Json","Decode"],"Decoder"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","List"],"List"]},{"tag":"TypeVar","contents":"a"}]}}]}]},null]}},"sourceSpan":{"start":[371,1],"name":"src/Elm/Json/Decode.purs","end":[372,1]}},{"children":[],"comments":"Extract an Array from a JS array.\n\n    -- [1,2,3,4]\n\n    numbers :: Decoder (Array Int)\n    numbers =\n        array int\n\nThe return type is polymorphic to accommodate `Array` and `Elm.Array`,\namong others.\n","title":"array","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["f",{"tag":"ConstrainedType","contents":[[[[["Data","Unfoldable"],"Unfoldable"],[{"tag":"TypeVar","contents":"f"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Elm","Json","Decode"],"Decoder"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Elm","Json","Decode"],"Decoder"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}}]}]}]},null]},null]}},"sourceSpan":{"start":[388,1],"name":"src/Elm/Json/Decode.purs","end":[389,1]}},{"children":[],"comments":"Extract any `Unfoldable` from a JS array.\n\n    -- [1,2,3,4]\n\n    numbers :: Decoder (Array Int)\n    numbers =\n        unfoldable int\n\nNote that this is not part of the Elm API.\n","title":"unfoldable","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["f",{"tag":"ConstrainedType","contents":[[[[["Data","Unfoldable"],"Unfoldable"],[{"tag":"TypeVar","contents":"f"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Elm","Json","Decode"],"Decoder"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Elm","Json","Decode"],"Decoder"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}}]}]}]},null]},null]}},"sourceSpan":{"start":[401,1],"name":"src/Elm/Json/Decode.purs","end":[402,1]}},{"children":[],"comments":"Decode null as the value given, and fail otherwise. Primarily useful for\ncreating *other* decoders.\n\n    numbers :: Decoder (Array Int)\n    numbers =\n        list (oneOf [ int, null 0 ])\n\nThis decoder treats `null` as `Nothing`, and otherwise tries to produce a\n`Just`.\n\n    nullOr :: Decoder a -> Decoder (Maybe a)\n    nullOr decoder =\n        oneOf\n        [ null Nothing\n        , map Just decoder\n        ]\n","title":"null","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Elm","Json","Decode"],"Decoder"]},{"tag":"TypeVar","contents":"a"}]}]},null]}},"sourceSpan":{"start":[427,1],"name":"src/Elm/Json/Decode.purs","end":[428,1]}},{"children":[],"comments":"Extract a Maybe value, wrapping successes with `Just` and turning any\nfailure in `Nothing`. If you are expecting that a field can sometimes be `null`,\nit's better to check for it explicitly, as this function will swallow\nerrors from ill-formed JSON.\n\nThe following code decodes JSON objects that may not have a profession field.\n\n    -- profession: Just \"plumber\"\n    -- { name: \"Tom\", age: 31, profession: \"plumber\" }\n    -- profession: Nothing\n    -- { name: \"Sue\", age: 42 }\n    -- { name: \"Amy\", age: 27, profession: null }\n    -- { name: \"Joe\", age: 36, profession: [\"something\", \"unexpected\"] }\n\n    type Person =\n        { name :: String\n        , age :: Int\n        , profession :: Maybe String\n        }\n\n    person :: Decoder Person\n    person =\n        object3 Person\n          (\"name\" := string)\n          (\"age\" := int)\n          (maybe (\"profession\" := string))\n","title":"maybe","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Elm","Json","Decode"],"Decoder"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Elm","Json","Decode"],"Decoder"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeVar","contents":"a"}]}}]}]},null]}},"sourceSpan":{"start":[463,1],"name":"src/Elm/Json/Decode.purs","end":[464,1]}},{"children":[],"comments":"Bring in an arbitrary JSON value. Useful if you need to work with crazily\nformatted data. For example, this lets you create a parser for \"variadic\" lists\nwhere the first few types are different, followed by 0 or more of the same\ntype.\n\n    variadic2 :: (a -> b -> List c -> value) -> Decoder a -> Decoder b -> Decoder c -> Decoder value\n    variadic2 f a b c =\n        let\n            combineResults = List.foldr (Result.map2 (::)) (Ok [])\n        in\n            customDecoder (list value) (\\jsonList ->\n                case jsonList of\n                  one :: two :: rest ->\n                      Result.map3 f\n                        (decodeValue a one)\n                        (decodeValue b two)\n                        (combineResults (List.map (decodeValue c) rest))\n\n                  _ -> Result.Err \"expecting at least two elements in the array\")\n","title":"value","fixity":null,"info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Elm","Json","Decode"],"Decoder"]},{"tag":"TypeConstructor","contents":[["Elm","Json","Encode"],"Value"]}]}},"sourceSpan":{"start":[493,1],"name":"src/Elm/Json/Decode.purs","end":[494,1]}},{"children":[],"comments":"Using a certain decoder, attempt to parse a raw `Json.Value`.\n","title":"decodeValue","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Elm","Json","Decode"],"Decoder"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Elm","Json","Encode"],"Value"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Elm","Result"],"Result"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeVar","contents":"a"}]}]}]},null]}},"sourceSpan":{"start":[498,1],"name":"src/Elm/Json/Decode.purs","end":[499,1]}},{"children":[],"comments":"Create a custom decoder that may do some fancy computation.\n","title":"customDecoder","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Elm","Json","Decode"],"Decoder"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Elm","Result"],"Result"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeVar","contents":"b"}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Elm","Json","Decode"],"Decoder"]},{"tag":"TypeVar","contents":"b"}]}]}]},null]},null]}},"sourceSpan":{"start":[503,1],"name":"src/Elm/Json/Decode.purs","end":[504,1]}},{"children":[],"comments":"A decoder that always fails. Useful when paired with `andThen` or `oneOf`\nto improve error messages when things go wrong. For example, the following\ndecoder is able to provide a much more specific error message when `fail` is\nthe last option.\n\n    point :: Decoder (Tuple Float Float)\n    point =\n        oneOf\n        [ tuple2 Tuple float float\n        , object2 Tuple (\"x\" := float) (\"y\" := float)\n        , fail \"expecting some kind of point\"\n        ]\n","title":"fail","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Elm","Json","Decode"],"Decoder"]},{"tag":"TypeVar","contents":"a"}]}]},null]}},"sourceSpan":{"start":[520,1],"name":"src/Elm/Json/Decode.purs","end":[521,1]}},{"children":[],"comments":"A decoder that always succeeds. Useful when paired with `andThen` or\n`oneOf` but everything is supposed to work out at the end. For example,\nmaybe you have an optional field that can have a default value when it is\nmissing.\n","title":"succeed","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Elm","Json","Decode"],"Decoder"]},{"tag":"TypeVar","contents":"a"}]}]},null]}},"sourceSpan":{"start":[528,1],"name":"src/Elm/Json/Decode.purs","end":[529,1]}},{"children":[],"comments":"Handle an array with exactly one element.\n\n    extractString :: Decoder String\n    extractString =\n        tuple1 identity string\n\n    authorship :: Decoder String\n    authorship =\n        oneOf\n          [ tuple1 (\\author -> \"Author: \" ++ author) string\n          , list string |> map (\\authors -> \"Co-authors: \" ++ String.join \", \" authors)\n          ]\n","title":"tuple1","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["value",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"value"}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Elm","Json","Decode"],"Decoder"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Elm","Json","Decode"],"Decoder"]},{"tag":"TypeVar","contents":"value"}]}]}]},null]},null]}},"sourceSpan":{"start":[546,1],"name":"src/Elm/Json/Decode.purs","end":[547,1]}},{"children":[],"comments":"Handle an array with exactly two elements. Useful for points and simple\npairs.\n\n    -- [3,4] or [0,0]\n    point :: Decoder (Tuple Float Float)\n    point =\n        tuple2 Tuple float float\n\n    -- [\"John\",\"Doe\"] or [\"Hermann\",\"Hesse\"]\n    name :: Decoder Name\n    name =\n        tuple2 Name string string\n\n    type Name = { first :: String, last :: String }\n","title":"tuple2","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["value",{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeVar","contents":"value"}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Elm","Json","Decode"],"Decoder"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Elm","Json","Decode"],"Decoder"]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Elm","Json","Decode"],"Decoder"]},{"tag":"TypeVar","contents":"value"}]}]}]}]},null]},null]},null]}},"sourceSpan":{"start":[586,1],"name":"src/Elm/Json/Decode.purs","end":[587,1]}},{"children":[],"comments":"Handle an array with exactly three elements.\n","title":"tuple3","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["value",{"tag":"ForAll","contents":["c",{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"c"}]},{"tag":"TypeVar","contents":"value"}]}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Elm","Json","Decode"],"Decoder"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Elm","Json","Decode"],"Decoder"]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Elm","Json","Decode"],"Decoder"]},{"tag":"TypeVar","contents":"c"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Elm","Json","Decode"],"Decoder"]},{"tag":"TypeVar","contents":"value"}]}]}]}]}]},null]},null]},null]},null]}},"sourceSpan":{"start":[598,1],"name":"src/Elm/Json/Decode.purs","end":[599,1]}},{"children":[],"comments":null,"title":"tuple4","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["value",{"tag":"ForAll","contents":["d",{"tag":"ForAll","contents":["c",{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"c"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"d"}]},{"tag":"TypeVar","contents":"value"}]}]}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Elm","Json","Decode"],"Decoder"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Elm","Json","Decode"],"Decoder"]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Elm","Json","Decode"],"Decoder"]},{"tag":"TypeVar","contents":"c"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Elm","Json","Decode"],"Decoder"]},{"tag":"TypeVar","contents":"d"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Elm","Json","Decode"],"Decoder"]},{"tag":"TypeVar","contents":"value"}]}]}]}]}]}]},null]},null]},null]},null]},null]}},"sourceSpan":{"start":[610,1],"name":"src/Elm/Json/Decode.purs","end":[611,1]}},{"children":[],"comments":null,"title":"tuple5","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["value",{"tag":"ForAll","contents":["e",{"tag":"ForAll","contents":["d",{"tag":"ForAll","contents":["c",{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"c"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"d"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"e"}]},{"tag":"TypeVar","contents":"value"}]}]}]}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Elm","Json","Decode"],"Decoder"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Elm","Json","Decode"],"Decoder"]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Elm","Json","Decode"],"Decoder"]},{"tag":"TypeVar","contents":"c"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Elm","Json","Decode"],"Decoder"]},{"tag":"TypeVar","contents":"d"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Elm","Json","Decode"],"Decoder"]},{"tag":"TypeVar","contents":"e"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Elm","Json","Decode"],"Decoder"]},{"tag":"TypeVar","contents":"value"}]}]}]}]}]}]}]},null]},null]},null]},null]},null]},null]}},"sourceSpan":{"start":[623,1],"name":"src/Elm/Json/Decode.purs","end":[624,1]}},{"children":[],"comments":null,"title":"tuple6","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["value",{"tag":"ForAll","contents":["f",{"tag":"ForAll","contents":["e",{"tag":"ForAll","contents":["d",{"tag":"ForAll","contents":["c",{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"c"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"d"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"e"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"f"}]},{"tag":"TypeVar","contents":"value"}]}]}]}]}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Elm","Json","Decode"],"Decoder"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Elm","Json","Decode"],"Decoder"]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Elm","Json","Decode"],"Decoder"]},{"tag":"TypeVar","contents":"c"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Elm","Json","Decode"],"Decoder"]},{"tag":"TypeVar","contents":"d"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Elm","Json","Decode"],"Decoder"]},{"tag":"TypeVar","contents":"e"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Elm","Json","Decode"],"Decoder"]},{"tag":"TypeVar","contents":"f"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Elm","Json","Decode"],"Decoder"]},{"tag":"TypeVar","contents":"value"}]}]}]}]}]}]}]}]},null]},null]},null]},null]},null]},null]},null]}},"sourceSpan":{"start":[637,1],"name":"src/Elm/Json/Decode.purs","end":[638,1]}},{"children":[],"comments":null,"title":"tuple7","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["value",{"tag":"ForAll","contents":["g",{"tag":"ForAll","contents":["f",{"tag":"ForAll","contents":["e",{"tag":"ForAll","contents":["d",{"tag":"ForAll","contents":["c",{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"c"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"d"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"e"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"f"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"g"}]},{"tag":"TypeVar","contents":"value"}]}]}]}]}]}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Elm","Json","Decode"],"Decoder"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Elm","Json","Decode"],"Decoder"]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Elm","Json","Decode"],"Decoder"]},{"tag":"TypeVar","contents":"c"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Elm","Json","Decode"],"Decoder"]},{"tag":"TypeVar","contents":"d"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Elm","Json","Decode"],"Decoder"]},{"tag":"TypeVar","contents":"e"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Elm","Json","Decode"],"Decoder"]},{"tag":"TypeVar","contents":"f"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Elm","Json","Decode"],"Decoder"]},{"tag":"TypeVar","contents":"g"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Elm","Json","Decode"],"Decoder"]},{"tag":"TypeVar","contents":"value"}]}]}]}]}]}]}]}]}]},null]},null]},null]},null]},null]},null]},null]},null]}},"sourceSpan":{"start":[652,1],"name":"src/Elm/Json/Decode.purs","end":[653,1]}},{"children":[],"comments":null,"title":"tuple8","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["value",{"tag":"ForAll","contents":["h",{"tag":"ForAll","contents":["g",{"tag":"ForAll","contents":["f",{"tag":"ForAll","contents":["e",{"tag":"ForAll","contents":["d",{"tag":"ForAll","contents":["c",{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"c"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"d"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"e"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"f"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"g"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"h"}]},{"tag":"TypeVar","contents":"value"}]}]}]}]}]}]}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Elm","Json","Decode"],"Decoder"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Elm","Json","Decode"],"Decoder"]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Elm","Json","Decode"],"Decoder"]},{"tag":"TypeVar","contents":"c"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Elm","Json","Decode"],"Decoder"]},{"tag":"TypeVar","contents":"d"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Elm","Json","Decode"],"Decoder"]},{"tag":"TypeVar","contents":"e"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Elm","Json","Decode"],"Decoder"]},{"tag":"TypeVar","contents":"f"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Elm","Json","Decode"],"Decoder"]},{"tag":"TypeVar","contents":"g"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Elm","Json","Decode"],"Decoder"]},{"tag":"TypeVar","contents":"h"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Elm","Json","Decode"],"Decoder"]},{"tag":"TypeVar","contents":"value"}]}]}]}]}]}]}]}]}]}]},null]},null]},null]},null]},null]},null]},null]},null]},null]}},"sourceSpan":{"start":[668,1],"name":"src/Elm/Json/Decode.purs","end":[669,1]}}]},{"reExports":[],"name":"Elm.Json.Encode","comments":"A library for turning Elm values into Json values.\n\nThis is mainly implemented via the `toForeign` method in\n[purescript-foreign](https://pursuit.purescript.org/packages/purescript-foreign/0.7.2/docs/Data.Foreign#v:toForeign).\n\nYou could also consider the purescript-argonaut-* modules.\n","declarations":[{"children":[],"comments":"Represents a JavaScript value.\n","title":"Value","fixity":null,"info":{"arguments":[],"declType":"typeSynonym","type":{"tag":"TypeConstructor","contents":[["Data","Foreign"],"Foreign"]}},"sourceSpan":{"start":[28,1],"name":"src/Elm/Json/Encode.purs","end":[48,1]}},{"children":[],"comments":"Convert a `Value` into a prettified string. The first argument specifies\nthe amount of indentation in the resulting string.\n\n    person =\n        object\n          [ Tuple \"name\" (string \"Tom\")\n          , Tuple \"age\" (int 42)\n          ]\n\n    compact = encode 0 person\n    -- {\"name\":\"Tom\",\"age\":42}\n\n    readable = encode 4 person\n    -- {\n    --     \"name\": \"Tom\",\n    --     \"age\": 42\n    -- }\n","title":"encode","fixity":null,"info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Elm","Json","Encode"],"Value"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}]}},"sourceSpan":{"start":[48,1],"name":"src/Elm/Json/Encode.purs","end":[52,1]}},{"children":[],"comments":"Turn a `String` into a `Value`.\n","title":"string","fixity":null,"info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeConstructor","contents":[["Elm","Json","Encode"],"Value"]}]}},"sourceSpan":{"start":[52,1],"name":"src/Elm/Json/Encode.purs","end":[53,1]}},{"children":[],"comments":"Turn an `Int` into a `Value`.\n","title":"int","fixity":null,"info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeConstructor","contents":[["Elm","Json","Encode"],"Value"]}]}},"sourceSpan":{"start":[57,1],"name":"src/Elm/Json/Encode.purs","end":[58,1]}},{"children":[],"comments":"Encode a Float. `Infinity` and `NaN` are encoded as `null`.\n","title":"float","fixity":null,"info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Elm","Basics"],"Float"]}]},{"tag":"TypeConstructor","contents":[["Elm","Json","Encode"],"Value"]}]}},"sourceSpan":{"start":[62,1],"name":"src/Elm/Json/Encode.purs","end":[63,1]}},{"children":[],"comments":"Encode a `Bool`.\n","title":"bool","fixity":null,"info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Elm","Basics"],"Bool"]}]},{"tag":"TypeConstructor","contents":[["Elm","Json","Encode"],"Value"]}]}},"sourceSpan":{"start":[67,1],"name":"src/Elm/Json/Encode.purs","end":[68,1]}},{"children":[],"comments":"Encode a null value.\n","title":"null","fixity":null,"info":{"declType":"value","type":{"tag":"TypeConstructor","contents":[["Elm","Json","Encode"],"Value"]}},"sourceSpan":{"start":[72,1],"name":"src/Elm/Json/Encode.purs","end":[73,1]}},{"children":[],"comments":"Encode a JSON object.\n\nThe signature uses `Foldable` in order to work with `List` or\n`Array`, amongst others.\n","title":"object","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["f",{"tag":"ConstrainedType","contents":[[[[["Data","Foldable"],"Foldable"],[{"tag":"TypeVar","contents":"f"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Tuple"],"Tuple"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeConstructor","contents":[["Elm","Json","Encode"],"Value"]}]}}]}]},{"tag":"TypeConstructor","contents":[["Elm","Json","Encode"],"Value"]}]}]},null]}},"sourceSpan":{"start":[82,1],"name":"src/Elm/Json/Encode.purs","end":[83,1]}},{"children":[],"comments":"Encode an array type. Uses a polymorphic type in order to accommodate\nPurescript `Array` and `Elm.Array`, among others.\n","title":"array","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["f",{"tag":"ConstrainedType","contents":[[[[["Data","Foldable"],"Foldable"],[{"tag":"TypeVar","contents":"f"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeConstructor","contents":[["Elm","Json","Encode"],"Value"]}]}]},{"tag":"TypeConstructor","contents":[["Elm","Json","Encode"],"Value"]}]}]},null]}},"sourceSpan":{"start":[93,1],"name":"src/Elm/Json/Encode.purs","end":[94,1]}},{"children":[],"comments":"Encode a `List`.\n","title":"list","fixity":null,"info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","List"],"List"]},{"tag":"TypeConstructor","contents":[["Elm","Json","Encode"],"Value"]}]}]},{"tag":"TypeConstructor","contents":[["Elm","Json","Encode"],"Value"]}]}},"sourceSpan":{"start":[98,1],"name":"src/Elm/Json/Encode.purs","end":[99,1]}}]},{"reExports":[{"moduleName":["Data","Foldable"],"declarations":[{"children":[],"comments":null,"title":"foldr","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["f",{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[[[[null,"Foldable"],[{"tag":"TypeVar","contents":"f"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeVar","contents":"b"}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeVar","contents":"b"}]}]}]}]},null]},null]},null]}},"sourceSpan":null},{"children":[],"comments":"Test whether a predicate holds for all elements in a data structure.\n","title":"all","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["f",{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[[[[["Data","Foldable"],"Foldable"],[{"tag":"TypeVar","contents":"f"}]],[[["Prelude"],"BooleanAlgebra"],[{"tag":"TypeVar","contents":"b"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeVar","contents":"b"}]}]}]},null]},null]},null]}},"sourceSpan":{"start":[213,1],"name":"bower_components/purescript-foldable-traversable/src/Data/Foldable.purs","end":[214,1]}},{"children":[],"comments":"Test whether a predicate holds for any element in a data structure.\n","title":"any","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["f",{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[[[[["Data","Foldable"],"Foldable"],[{"tag":"TypeVar","contents":"f"}]],[[["Prelude"],"BooleanAlgebra"],[{"tag":"TypeVar","contents":"b"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeVar","contents":"b"}]}]}]},null]},null]},null]}},"sourceSpan":{"start":[209,1],"name":"bower_components/purescript-foldable-traversable/src/Data/Foldable.purs","end":[210,1]}},{"children":[],"comments":"Find the largest element of a structure, according to its `Ord` instance.\n","title":"maximum","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["f",{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[[[[["Prelude"],"Ord"],[{"tag":"TypeVar","contents":"a"}]],[[["Data","Foldable"],"Foldable"],[{"tag":"TypeVar","contents":"f"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeVar","contents":"a"}]}]}]},null]},null]}},"sourceSpan":{"start":[237,1],"name":"bower_components/purescript-foldable-traversable/src/Data/Foldable.purs","end":[238,1]}},{"children":[],"comments":"Find the smallest element of a structure, according to its `Ord` instance.\n","title":"minimum","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["f",{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[[[[["Prelude"],"Ord"],[{"tag":"TypeVar","contents":"a"}]],[[["Data","Foldable"],"Foldable"],[{"tag":"TypeVar","contents":"f"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeVar","contents":"a"}]}]}]},null]},null]}},"sourceSpan":{"start":[252,1],"name":"bower_components/purescript-foldable-traversable/src/Data/Foldable.purs","end":[253,1]}},{"children":[],"comments":"Find the product of the numeric values in a data structure.\n","title":"product","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["f",{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[[[[["Data","Foldable"],"Foldable"],[{"tag":"TypeVar","contents":"f"}]],[[["Prelude"],"Semiring"],[{"tag":"TypeVar","contents":"a"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeVar","contents":"a"}]}]},null]},null]}},"sourceSpan":{"start":[221,1],"name":"bower_components/purescript-foldable-traversable/src/Data/Foldable.purs","end":[222,1]}},{"children":[],"comments":"Find the sum of the numeric values in a data structure.\n","title":"sum","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["f",{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[[[[["Data","Foldable"],"Foldable"],[{"tag":"TypeVar","contents":"f"}]],[[["Prelude"],"Semiring"],[{"tag":"TypeVar","contents":"a"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeVar","contents":"a"}]}]},null]},null]}},"sourceSpan":{"start":[217,1],"name":"bower_components/purescript-foldable-traversable/src/Data/Foldable.purs","end":[218,1]}}]},{"moduleName":["Data","List"],"declarations":[{"children":[{"comments":null,"title":"Nil","info":{"arguments":[],"declType":"dataConstructor"},"sourceSpan":null},{"comments":null,"title":"Cons","info":{"arguments":[{"tag":"TypeVar","contents":"a"},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","List"],"List"]},{"tag":"TypeVar","contents":"a"}]}}],"declType":"dataConstructor"},"sourceSpan":null},{"comments":null,"title":"showList","info":{"declType":"instance","dependencies":[[[["Prelude"],"Show"],[{"tag":"TypeVar","contents":"a"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prelude"],"Show"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","List"],"List"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[726,1],"name":"bower_components/purescript-lists/src/Data/List.purs","end":[730,1]}},{"comments":null,"title":"eqList","info":{"declType":"instance","dependencies":[[[["Prelude"],"Eq"],[{"tag":"TypeVar","contents":"a"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prelude"],"Eq"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","List"],"List"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[730,1],"name":"bower_components/purescript-lists/src/Data/List.purs","end":[739,1]}},{"comments":null,"title":"ordList","info":{"declType":"instance","dependencies":[[[["Prelude"],"Ord"],[{"tag":"TypeVar","contents":"a"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prelude"],"Ord"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","List"],"List"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[739,1],"name":"bower_components/purescript-lists/src/Data/List.purs","end":[750,1]}},{"comments":null,"title":"semigroupList","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prelude"],"Semigroup"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","List"],"List"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[750,1],"name":"bower_components/purescript-lists/src/Data/List.purs","end":[754,1]}},{"comments":null,"title":"monoidList","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Monoid"],"Monoid"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","List"],"List"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[754,1],"name":"bower_components/purescript-lists/src/Data/List.purs","end":[757,1]}},{"comments":null,"title":"functorList","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prelude"],"Functor"]},{"tag":"TypeConstructor","contents":[["Data","List"],"List"]}]}},"sourceSpan":{"start":[757,1],"name":"bower_components/purescript-lists/src/Data/List.purs","end":[764,1]}},{"comments":null,"title":"foldableList","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Foldable"],"Foldable"]},{"tag":"TypeConstructor","contents":[["Data","List"],"List"]}]}},"sourceSpan":{"start":[764,1],"name":"bower_components/purescript-lists/src/Data/List.purs","end":[774,1]}},{"comments":null,"title":"unfoldableList","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Unfoldable"],"Unfoldable"]},{"tag":"TypeConstructor","contents":[["Data","List"],"List"]}]}},"sourceSpan":{"start":[774,1],"name":"bower_components/purescript-lists/src/Data/List.purs","end":[781,1]}},{"comments":null,"title":"traversableList","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Traversable"],"Traversable"]},{"tag":"TypeConstructor","contents":[["Data","List"],"List"]}]}},"sourceSpan":{"start":[781,1],"name":"bower_components/purescript-lists/src/Data/List.purs","end":[787,1]}},{"comments":null,"title":"applyList","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prelude"],"Apply"]},{"tag":"TypeConstructor","contents":[["Data","List"],"List"]}]}},"sourceSpan":{"start":[787,1],"name":"bower_components/purescript-lists/src/Data/List.purs","end":[791,1]}},{"comments":null,"title":"applicativeList","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prelude"],"Applicative"]},{"tag":"TypeConstructor","contents":[["Data","List"],"List"]}]}},"sourceSpan":{"start":[791,1],"name":"bower_components/purescript-lists/src/Data/List.purs","end":[794,1]}},{"comments":null,"title":"bindList","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prelude"],"Bind"]},{"tag":"TypeConstructor","contents":[["Data","List"],"List"]}]}},"sourceSpan":{"start":[794,1],"name":"bower_components/purescript-lists/src/Data/List.purs","end":[797,1]}},{"comments":null,"title":"monadList","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prelude"],"Monad"]},{"tag":"TypeConstructor","contents":[["Data","List"],"List"]}]}},"sourceSpan":{"start":[797,1],"name":"bower_components/purescript-lists/src/Data/List.purs","end":[799,1]}},{"comments":null,"title":"altList","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Alt"],"Alt"]},{"tag":"TypeConstructor","contents":[["Data","List"],"List"]}]}},"sourceSpan":{"start":[799,1],"name":"bower_components/purescript-lists/src/Data/List.purs","end":[802,1]}},{"comments":null,"title":"plusList","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Plus"],"Plus"]},{"tag":"TypeConstructor","contents":[["Data","List"],"List"]}]}},"sourceSpan":{"start":[802,1],"name":"bower_components/purescript-lists/src/Data/List.purs","end":[805,1]}},{"comments":null,"title":"alternativeList","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Alternative"],"Alternative"]},{"tag":"TypeConstructor","contents":[["Data","List"],"List"]}]}},"sourceSpan":{"start":[805,1],"name":"bower_components/purescript-lists/src/Data/List.purs","end":[807,1]}},{"comments":null,"title":"monadPlusList","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","MonadPlus"],"MonadPlus"]},{"tag":"TypeConstructor","contents":[["Data","List"],"List"]}]}},"sourceSpan":{"start":[807,1],"name":"bower_components/purescript-lists/src/Data/List.purs","end":[807,37]}}],"comments":"A strict linked list.\n\nA list is either empty (represented by the `Nil` constructor) or non-empty, in\nwhich case it consists of a head element, and another list (represented by the\n`Cons` constructor).\n","title":"List","fixity":null,"info":{"declType":"data","dataDeclType":"data","typeArguments":[["a",null]]},"sourceSpan":{"start":[111,1],"name":"bower_components/purescript-lists/src/Data/List.purs","end":[116,1]}},{"children":[],"comments":"Flatten a list of lists.\n\nRunning time: `O(n)`, where `n` is the total number of elements.\n","title":"concat","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","List"],"List"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","List"],"List"]},{"tag":"TypeVar","contents":"a"}]}}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","List"],"List"]},{"tag":"TypeVar","contents":"a"}]}]},null]}},"sourceSpan":{"start":[379,1],"name":"bower_components/purescript-lists/src/Data/List.purs","end":[380,1]}},{"children":[],"comments":"Apply a function to each element in a list, and flatten the results\ninto a single, new list.\n\nRunning time: `O(n)`, where `n` is the total number of elements.\n","title":"concatMap","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","List"],"List"]},{"tag":"TypeVar","contents":"b"}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","List"],"List"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","List"],"List"]},{"tag":"TypeVar","contents":"b"}]}]}]},null]},null]}},"sourceSpan":{"start":[386,1],"name":"bower_components/purescript-lists/src/Data/List.purs","end":[387,1]}},{"children":[],"comments":"Drop the specified number of elements from the front of a list.\n\nRunning time: `O(n)` where `n` is the number of elements to drop.\n","title":"drop","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","List"],"List"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","List"],"List"]},{"tag":"TypeVar","contents":"a"}]}]}]},null]}},"sourceSpan":{"start":[511,1],"name":"bower_components/purescript-lists/src/Data/List.purs","end":[512,1]}},{"children":[],"comments":"Filter a list, keeping the elements which satisfy a predicate function.\n\nRunning time: `O(n)`\n","title":"filter","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","List"],"List"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","List"],"List"]},{"tag":"TypeVar","contents":"a"}]}]}]},null]}},"sourceSpan":{"start":[393,1],"name":"bower_components/purescript-lists/src/Data/List.purs","end":[394,1]}},{"children":[],"comments":"Get the first element in a list, or `Nothing` if the list is empty.\n\nRunning time: `O(1)`.\n","title":"head","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","List"],"List"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeVar","contents":"a"}]}]},null]}},"sourceSpan":{"start":[238,1],"name":"bower_components/purescript-lists/src/Data/List.purs","end":[239,1]}},{"children":[],"comments":"Get the length of a list\n\nRunning time: `O(n)`\n","title":"length","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","List"],"List"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},null]}},"sourceSpan":{"start":[192,1],"name":"bower_components/purescript-lists/src/Data/List.purs","end":[193,1]}},{"children":[],"comments":"Reverse a list.\n\nRunning time: `O(n)`\n","title":"reverse","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","List"],"List"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","List"],"List"]},{"tag":"TypeVar","contents":"a"}]}]},null]}},"sourceSpan":{"start":[370,1],"name":"bower_components/purescript-lists/src/Data/List.purs","end":[371,1]}},{"children":[],"comments":"Sort the elements of an list in increasing order.\n","title":"sort","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[[[[["Prelude"],"Ord"],[{"tag":"TypeVar","contents":"a"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","List"],"List"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","List"],"List"]},{"tag":"TypeVar","contents":"a"}]}]}]},null]}},"sourceSpan":{"start":[441,1],"name":"bower_components/purescript-lists/src/Data/List.purs","end":[442,1]}},{"children":[],"comments":"Get all but the first element of a list, or `Nothing` if the list is empty.\n\nRunning time: `O(1)`\n","title":"tail","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","List"],"List"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","List"],"List"]},{"tag":"TypeVar","contents":"a"}]}}]}]},null]}},"sourceSpan":{"start":[253,1],"name":"bower_components/purescript-lists/src/Data/List.purs","end":[254,1]}},{"children":[],"comments":"Take the specified number of elements from the front of a list.\n\nRunning time: `O(n)` where `n` is the number of elements to take.\n","title":"take","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","List"],"List"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","List"],"List"]},{"tag":"TypeVar","contents":"a"}]}]}]},null]}},"sourceSpan":{"start":[492,1],"name":"bower_components/purescript-lists/src/Data/List.purs","end":[493,1]}}]},{"moduleName":["Elm","Foldable"],"declarations":[{"children":[],"comments":"Reduce a container from the left.\n\nEquivalent to Purescript's `foldl`, but the function you supply is flipped.\n","title":"foldl","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["f",{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[[[[["Data","Foldable"],"Foldable"],[{"tag":"TypeVar","contents":"f"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeVar","contents":"b"}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeVar","contents":"b"}]}]}]}]},null]},null]},null]}},"sourceSpan":{"start":[15,1],"name":"src/Elm/Foldable.purs","end":[16,1]}}]},{"moduleName":["Prelude"],"declarations":[{"children":[],"comments":null,"title":"map","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["f",{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[[[[null,"Functor"],[{"tag":"TypeVar","contents":"f"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"b"}]}]}]}]},null]},null]},null]}},"sourceSpan":null},{"children":[],"comments":null,"title":"append","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[[[[null,"Semigroup"],[{"tag":"TypeVar","contents":"a"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"a"}]}]}]},null]}},"sourceSpan":null}]}],"name":"Elm.List","comments":"A library for manipulating lists of values. Every value in a\nlist must have the same type.\n\nImplemented in terms of Purescript's `Data.List`, so you can also\nuse functions from `Data.List` on a `List`.\n\nNote that Purescript uses `:` for `cons` and and `::` to indicate the type\nof a thing, which is exactly the opposite of Elm.\n\nPurescript's compiler doesn't have a literal\nsyntax for lists, so instead of this:\n\n    [1, 2, 3]\n\n... you need to do something like this:\n\n    (1 : 2 : 3 : Nil)\n\nThere is a literal syntax for `Array`, e.g. `[1, 2, 3]`. However, the `Array` type in Purescript\nis actually a Javascript array, which is typically not what you want (unless you're getting\none from elsewhere anyway). And, it's not what `Elm.Array` is.\n\nWhat you can do, though, to get a list is something like this:\n\n    Data.List.toList [1, 2, 3]\n\n... which is a nice little trick when porting code, as all you have to add is the `Data.List.toList`.\n\nI have also made some of the Elm APIs accept either `Elm.List`, `Array` or `Elm.Array` by using\ntype-classes in the function signatures.\n","declarations":[{"children":[],"comments":null,"title":"(:)","fixity":{"associativity":"infixr","precedence":5},"info":{"declType":"alias","fixity":{"associativity":"infixr","precedence":5},"for":[["Elm","List"],{"AliasValue":{"Ident":"cons"}}]},"sourceSpan":{"start":[77,1],"name":"src/Elm/List.purs","end":[83,1]}},{"children":[],"comments":"Add an element to the front of a list.\n\n    cons 1 (2 : 3 : Nil] == (1 : 2 : 3 : Nil)\n    cons 1 Nil == (1 : Nil)\n","title":"cons","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","List"],"List"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","List"],"List"]},{"tag":"TypeVar","contents":"a"}]}]}]},null]}},"sourceSpan":{"start":[83,1],"name":"src/Elm/List.purs","end":[84,1]}},{"children":[],"comments":"Determine if a list is empty.\n\n    isEmpty Nil == True\n\nEquivalent to Purescript's `null`.\n","title":"isEmpty","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","List"],"List"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeConstructor","contents":[["Elm","Basics"],"Bool"]}]},null]}},"sourceSpan":{"start":[92,1],"name":"src/Elm/List.purs","end":[93,1]}},{"children":[],"comments":"Figure out whether a list contains a value.\n\n    member 9 (1 : 2 : 3 : 4 : Nil) == False\n    member 4 (1 : 2 : 3 : 4 : Nil) == True\n","title":"member","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[[[[["Prelude"],"Eq"],[{"tag":"TypeVar","contents":"a"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","List"],"List"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeConstructor","contents":[["Elm","Basics"],"Bool"]}]}]}]},null]}},"sourceSpan":{"start":[100,1],"name":"src/Elm/List.purs","end":[101,1]}},{"children":[],"comments":"Same as `map` but the function is also applied to the index of each\nelement (starting at zero).\n\n    indexedMap Tuple (\"Tom\" : \"Sue\" : \"Bob\" : Nil) == (Tuple 0 \"Tom\" : Tuple 1 \"Sue\" : Tuple 2 \"Bob\" : Nil)\n","title":"indexedMap","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","List"],"List"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","List"],"List"]},{"tag":"TypeVar","contents":"b"}]}]}]},null]},null]}},"sourceSpan":{"start":[111,1],"name":"src/Elm/List.purs","end":[112,1]}},{"children":[],"comments":"Reduce a list from the left, building up all of the intermediate results into a list.\n\n    scanl (+) 0 (1 : 2 : 3 : 4 : Nil) == (0 : 1 : 3 : 6 : 10 : Nil)\n\nThis is like Purescript's `scanl`, except that the function you provide in the first\nparameter is flipped, and the second parameter is included in the resulting list.\n","title":"scanl","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeVar","contents":"b"}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","List"],"List"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","List"],"List"]},{"tag":"TypeVar","contents":"b"}]}]}]}]},null]},null]}},"sourceSpan":{"start":[125,1],"name":"src/Elm/List.purs","end":[126,1]}},{"children":[],"comments":"Apply a function that may succeed to all values in the list, but only keep\nthe successes.\n\n    toInt :: String -> Maybe Int\n\n    filterMap toInt (\"3\" : \"4.0\" : \"5\" : \"hats\" : Nil) == (3 : 5 : Nil)\n\nEquivalent to Purescript's `mapMaybe`.\n","title":"filterMap","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeVar","contents":"b"}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","List"],"List"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","List"],"List"]},{"tag":"TypeVar","contents":"b"}]}]}]},null]},null]}},"sourceSpan":{"start":[138,1],"name":"src/Elm/List.purs","end":[139,1]}},{"children":[],"comments":"Partition a list based on a predicate. The first list contains all values\nthat satisfy the predicate, and the second list contains all the value that do\nnot.\n\n    partition (\\x -> x < 3) (0..5) == {trues: (0 : 1 : 2 : Nil), falses: (3 : 4 : 5 : Nil)}\n    partition isEven        (0..5) == {trues: (0 : 2 : 4 : Nil), falses: (1 : 3 : 5 : Nil)}\n\nNote that the result is a record of `{trues, falses}`, whereas in Elm the result\nwas a `Tuple`.\n","title":"partition","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeConstructor","contents":[["Elm","Basics"],"Bool"]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","List"],"List"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Object"]},{"tag":"RCons","contents":["trues",{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","List"],"List"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"RCons","contents":["falses",{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","List"],"List"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"REmpty","contents":[]}]}]}]}]}]},null]}},"sourceSpan":{"start":[151,1],"name":"src/Elm/List.purs","end":[152,1]}},{"children":[],"comments":"Combine two lists, combining them with the given function.\nIf one list is longer, the extra elements are dropped.\n\n    map2 (+) (1 : 2 : 3 : Nil) (1 : 2 : 3 : 4 : Nil) == (2 : 4 : 6 : Nil)\n\n    map2 Tuple (1 : 2 : 3 : Nil) ('a' : 'b' : Nil) == (Tuple 1 'a' : Tuple 2 'b' : Nil)\n\n    pairs :: List a -> List b -> List (Tuple a b)\n    pairs lefts rights =\n        map2 Tuple lefts rights\n\nEquivalent to Purescript's `zipWith`.\n","title":"map2","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["result",{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeVar","contents":"result"}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","List"],"List"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","List"],"List"]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","List"],"List"]},{"tag":"TypeVar","contents":"result"}]}]}]}]},null]},null]},null]}},"sourceSpan":{"start":[173,1],"name":"src/Elm/List.purs","end":[174,1]}},{"children":[],"comments":null,"title":"map3","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["result",{"tag":"ForAll","contents":["c",{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"c"}]},{"tag":"TypeVar","contents":"result"}]}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","List"],"List"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","List"],"List"]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","List"],"List"]},{"tag":"TypeVar","contents":"c"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","List"],"List"]},{"tag":"TypeVar","contents":"result"}]}]}]}]}]},null]},null]},null]},null]}},"sourceSpan":{"start":[177,1],"name":"src/Elm/List.purs","end":[178,1]}},{"children":[],"comments":null,"title":"map4","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["result",{"tag":"ForAll","contents":["d",{"tag":"ForAll","contents":["c",{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"c"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"d"}]},{"tag":"TypeVar","contents":"result"}]}]}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","List"],"List"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","List"],"List"]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","List"],"List"]},{"tag":"TypeVar","contents":"c"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","List"],"List"]},{"tag":"TypeVar","contents":"d"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","List"],"List"]},{"tag":"TypeVar","contents":"result"}]}]}]}]}]}]},null]},null]},null]},null]},null]}},"sourceSpan":{"start":[182,1],"name":"src/Elm/List.purs","end":[183,1]}},{"children":[],"comments":null,"title":"map5","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["result",{"tag":"ForAll","contents":["e",{"tag":"ForAll","contents":["d",{"tag":"ForAll","contents":["c",{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"c"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"d"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"e"}]},{"tag":"TypeVar","contents":"result"}]}]}]}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","List"],"List"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","List"],"List"]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","List"],"List"]},{"tag":"TypeVar","contents":"c"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","List"],"List"]},{"tag":"TypeVar","contents":"d"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","List"],"List"]},{"tag":"TypeVar","contents":"e"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","List"],"List"]},{"tag":"TypeVar","contents":"result"}]}]}]}]}]}]}]},null]},null]},null]},null]},null]},null]}},"sourceSpan":{"start":[187,1],"name":"src/Elm/List.purs","end":[188,1]}},{"children":[],"comments":"Decompose a list of tuples into a tuple of lists.\n\n    unzip (Tuple 0 True : Tuple 17 False :  Tuple 1337 True : Nil) == Tuple (0 : 17 : 1337 : Nil) (True : False : True : Nil)\n","title":"unzip","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","List"],"List"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Tuple"],"Tuple"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Tuple"],"Tuple"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","List"],"List"]},{"tag":"TypeVar","contents":"a"}]}}]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","List"],"List"]},{"tag":"TypeVar","contents":"b"}]}}]}]},null]},null]}},"sourceSpan":{"start":[195,1],"name":"src/Elm/List.purs","end":[196,1]}},{"children":[],"comments":"Places the given value between all members of the given list.\n\n    intersperse \"on\" (\"turtles\" : \"turtles\" : \"turtles\" : Nil) == (\"turtles\" : \"on\" : \"turtles\" : \"on\" : \"turtles\" : Nil)\n","title":"intersperse","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","List"],"List"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","List"],"List"]},{"tag":"TypeVar","contents":"a"}]}]}]},null]}},"sourceSpan":{"start":[208,1],"name":"src/Elm/List.purs","end":[209,1]}},{"children":[],"comments":"Create a list with *n* copies of a value:\n\n    repeat 3 0 == (0 : 0 : 0 : Nil)\n\nEquivalent to Purescript's `replicate`.\n","title":"repeat","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","List"],"List"]},{"tag":"TypeVar","contents":"a"}]}]}]},null]}},"sourceSpan":{"start":[230,1],"name":"src/Elm/List.purs","end":[231,1]}},{"children":[],"comments":"Sort values by a derived property.\n\n    alice = { name: \"Alice\", height: 1.62 }\n    bob   = { name: \"Bob\"  , height: 1.85 }\n    chuck = { name: \"Chuck\", height: 1.76 }\n\n    sortBy _.name   (chuck : alice : bob : Nil) == (alice : bob : chuck : Nil)\n    sortBy _.height (chuck : alice : bob : Nil) == (alice : chuck : bob : Nil)\n\n    sortBy String.length (\"mouse\" : \"cat\" : Nil) == (\"cat\" : \"mouse\" : Nil)\n\nNote that this is not the same as Purescript's `sortBy`, which is\nlike Elm's `sortWith`.\n","title":"sortBy","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["comparable",{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[[[[["Prelude"],"Ord"],[{"tag":"TypeVar","contents":"comparable"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"comparable"}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","List"],"List"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","List"],"List"]},{"tag":"TypeVar","contents":"a"}]}]}]}]},null]},null]}},"sourceSpan":{"start":[247,1],"name":"src/Elm/List.purs","end":[248,1]}},{"children":[],"comments":"Sort values with a custom comparison function.\n\n    sortWith flippedComparison (1..5) == (5 : 4 : 3 : 2 : 1 : Nil)\n\n    flippedComparison a b =\n        case compare a b of\n          LT -> GT\n          EQ -> EQ\n          GT -> LT\n\nThis is also the most general sort function, allowing you\nto define any other: `sort == sortWith compare`\n\nEquivalent to Purescript's `sortBy`.\n","title":"sortWith","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeConstructor","contents":[["Elm","Basics"],"Order"]}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","List"],"List"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","List"],"List"]},{"tag":"TypeVar","contents":"a"}]}]}]},null]}},"sourceSpan":{"start":[266,1],"name":"src/Elm/List.purs","end":[267,1]}},{"children":[],"comments":null,"title":"(..)","fixity":{"associativity":"infixl","precedence":4},"info":{"declType":"alias","fixity":{"associativity":"infixl","precedence":4},"for":[["Elm","List"],{"AliasValue":{"Ident":"range"}}]},"sourceSpan":{"start":[270,1],"name":"src/Elm/List.purs","end":[276,1]}},{"children":[],"comments":"The Elm built-in range operator `(..)`.\n\nLike Purescript's `range`, except that the Elm version produces an empty list\nif the first parameter is greater than the second.\n","title":"range","fixity":null,"info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","List"],"List"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}]}]}},"sourceSpan":{"start":[276,1],"name":"src/Elm/List.purs","end":[277,1]}}]},{"reExports":[{"moduleName":["Data","Maybe"],"declarations":[{"children":[{"comments":null,"title":"Nothing","info":{"arguments":[],"declType":"dataConstructor"},"sourceSpan":null},{"comments":null,"title":"Just","info":{"arguments":[{"tag":"TypeVar","contents":"a"}],"declType":"dataConstructor"},"sourceSpan":null},{"comments":"The `Functor` instance allows functions to transform the contents of a\n`Just` with the `<$>` operator:\n\n``` purescript\nf <$> Just x == Just (f x)\n```\n\n`Nothing` values are left untouched:\n\n``` purescript\nf <$> Nothing == Nothing\n```\n","title":"functorMaybe","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prelude"],"Functor"]},{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]}]}},"sourceSpan":{"start":[86,1],"name":"bower_components/purescript-maybe/src/Data/Maybe.purs","end":[121,1]}},{"comments":"The `Apply` instance allows functions contained within a `Just` to\ntransform a value contained within a `Just` using the `apply` operator:\n\n``` purescript\nJust f <*> Just x == Just (f x)\n```\n\n`Nothing` values are left untouched:\n\n``` purescript\nJust f <*> Nothing == Nothing\nNothing <*> Just x == Nothing\n```\n\nCombining `Functor`'s `<$>` with `Apply`'s `<*>` can be used transform a\npure function to take `Maybe`-typed arguments so `f :: a -> b -> c`\nbecomes `f :: Maybe a -> Maybe b -> Maybe c`:\n\n``` purescript\nf <$> Just x <*> Just y == Just (f x y)\n```\n\nThe `Nothing`-preserving behaviour of both operators means the result of\nan expression like the above but where any one of the values is `Nothing`\nmeans the whole result becomes `Nothing` also:\n\n``` purescript\nf <$> Nothing <*> Just y == Nothing\nf <$> Just x <*> Nothing == Nothing\nf <$> Nothing <*> Nothing == Nothing\n```\n","title":"applyMaybe","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prelude"],"Apply"]},{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]}]}},"sourceSpan":{"start":[121,1],"name":"bower_components/purescript-maybe/src/Data/Maybe.purs","end":[145,1]}},{"comments":"The `Applicative` instance enables lifting of values into `Maybe` with the\n`pure` or `return` function (`return` is an alias for `pure`):\n\n``` purescript\npure x :: Maybe _ == Just x\nreturn x :: Maybe _ == Just x\n```\n\nCombining `Functor`'s `<$>` with `Apply`'s `<*>` and `Applicative`'s\n`pure` can be used to pass a mixture of `Maybe` and non-`Maybe` typed\nvalues to a function that does not usually expect them, by using `pure`\nfor any value that is not already `Maybe` typed:\n\n``` purescript\nf <$> Just x <*> pure y == Just (f x y)\n```\n\nEven though `pure = Just` it is recommended to use `pure` in situations\nlike this as it allows the choice of `Applicative` to be changed later\nwithout having to go through and replace `Just` with a new constructor.\n","title":"applicativeMaybe","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prelude"],"Applicative"]},{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]}]}},"sourceSpan":{"start":[145,1],"name":"bower_components/purescript-maybe/src/Data/Maybe.purs","end":[157,1]}},{"comments":"The `Alt` instance allows for a choice to be made between two `Maybe`\nvalues with the `<|>` operator, where the first `Just` encountered\nis taken.\n\n``` purescript\nJust x <|> Just y == Just x\nNothing <|> Just y == Just y\nNothing <|> Nothing == Nothing\n```\n","title":"altMaybe","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Alt"],"Alt"]},{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]}]}},"sourceSpan":{"start":[157,1],"name":"bower_components/purescript-maybe/src/Data/Maybe.purs","end":[166,1]}},{"comments":"The `Plus` instance provides a default `Maybe` value:\n\n``` purescript\nempty :: Maybe _ == Nothing\n```\n","title":"plusMaybe","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Plus"],"Plus"]},{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]}]}},"sourceSpan":{"start":[166,1],"name":"bower_components/purescript-maybe/src/Data/Maybe.purs","end":[171,1]}},{"comments":"The `Alternative` instance guarantees that there are both `Applicative` and\n`Plus` instances for `Maybe`.\n","title":"alternativeMaybe","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Alternative"],"Alternative"]},{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]}]}},"sourceSpan":{"start":[171,1],"name":"bower_components/purescript-maybe/src/Data/Maybe.purs","end":[180,1]}},{"comments":"The `Bind` instance allows sequencing of `Maybe` values and functions that\nreturn a `Maybe` by using the `>>=` operator:\n\n``` purescript\nJust x >>= f = f x\nNothing >>= f = Nothing\n```\n","title":"bindMaybe","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prelude"],"Bind"]},{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]}]}},"sourceSpan":{"start":[180,1],"name":"bower_components/purescript-maybe/src/Data/Maybe.purs","end":[199,1]}},{"comments":"The `Monad` instance guarantees that there are both `Applicative` and\n`Bind` instances for `Maybe`. This also enables the `do` syntactic sugar:\n\n``` purescript\ndo\n  x' <- x\n  y' <- y\n  pure (f x' y')\n```\n\nWhich is equivalent to:\n\n``` purescript\nx >>= (\\x' -> y >>= (\\y' -> pure (f x' y')))\n```\n","title":"monadMaybe","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prelude"],"Monad"]},{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]}]}},"sourceSpan":{"start":[199,1],"name":"bower_components/purescript-maybe/src/Data/Maybe.purs","end":[203,1]}},{"comments":"The `MonadPlus` instance guarantees that there are both `Monad` and\n`Alternative` instances for `Maybe`.\n","title":"monadPlusMaybe","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","MonadPlus"],"MonadPlus"]},{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]}]}},"sourceSpan":{"start":[203,1],"name":"bower_components/purescript-maybe/src/Data/Maybe.purs","end":[213,1]}},{"comments":"The `Extend` instance allows sequencing of `Maybe` values and functions\nthat accept a `Maybe a` and return a non-`Maybe` result using the\n`<<=` operator.\n\n``` purescript\nf <<= Nothing = Nothing\nf <<= Just x = Just (f x)\n```\n","title":"extendMaybe","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Extend"],"Extend"]},{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]}]}},"sourceSpan":{"start":[213,1],"name":"bower_components/purescript-maybe/src/Data/Maybe.purs","end":[217,1]}},{"comments":null,"title":"invariantMaybe","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Functor","Invariant"],"Invariant"]},{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]}]}},"sourceSpan":{"start":[217,1],"name":"bower_components/purescript-maybe/src/Data/Maybe.purs","end":[231,1]}},{"comments":"The `Semigroup` instance enables use of the operator `<>` on `Maybe` values\nwhenever there is a `Semigroup` instance for the type the `Maybe` contains.\nThe exact behaviour of `<>` depends on the \"inner\" `Semigroup` instance,\nbut generally captures the notion of appending or combining things.\n\n``` purescript\nJust x <> Just y = Just (x <> y)\nJust x <> Nothing = Just x\nNothing <> Just y = Just y\nNothing <> Nothing = Nothing\n```\n","title":"semigroupMaybe","info":{"declType":"instance","dependencies":[[[["Prelude"],"Semigroup"],[{"tag":"TypeVar","contents":"a"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prelude"],"Semigroup"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[231,1],"name":"bower_components/purescript-maybe/src/Data/Maybe.purs","end":[236,1]}},{"comments":null,"title":"monoidMaybe","info":{"declType":"instance","dependencies":[[[["Prelude"],"Semigroup"],[{"tag":"TypeVar","contents":"a"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Monoid"],"Monoid"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[236,1],"name":"bower_components/purescript-maybe/src/Data/Maybe.purs","end":[239,1]}},{"comments":null,"title":"semiringMaybe","info":{"declType":"instance","dependencies":[[[["Prelude"],"Semiring"],[{"tag":"TypeVar","contents":"a"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prelude"],"Semiring"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[239,1],"name":"bower_components/purescript-maybe/src/Data/Maybe.purs","end":[245,1]}},{"comments":null,"title":"moduloSemiringMaybe","info":{"declType":"instance","dependencies":[[[["Prelude"],"ModuloSemiring"],[{"tag":"TypeVar","contents":"a"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prelude"],"ModuloSemiring"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[245,1],"name":"bower_components/purescript-maybe/src/Data/Maybe.purs","end":[249,1]}},{"comments":null,"title":"ringMaybe","info":{"declType":"instance","dependencies":[[[["Prelude"],"Ring"],[{"tag":"TypeVar","contents":"a"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prelude"],"Ring"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[249,1],"name":"bower_components/purescript-maybe/src/Data/Maybe.purs","end":[252,1]}},{"comments":null,"title":"divisionRingMaybe","info":{"declType":"instance","dependencies":[[[["Prelude"],"DivisionRing"],[{"tag":"TypeVar","contents":"a"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prelude"],"DivisionRing"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[252,1],"name":"bower_components/purescript-maybe/src/Data/Maybe.purs","end":[254,1]}},{"comments":null,"title":"numMaybe","info":{"declType":"instance","dependencies":[[[["Prelude"],"Num"],[{"tag":"TypeVar","contents":"a"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prelude"],"Num"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[254,1],"name":"bower_components/purescript-maybe/src/Data/Maybe.purs","end":[259,1]}},{"comments":"The `Eq` instance allows `Maybe` values to be checked for equality with\n`==` and inequality with `/=` whenever there is an `Eq` instance for the\ntype the `Maybe` contains.\n","title":"eqMaybe","info":{"declType":"instance","dependencies":[[[["Prelude"],"Eq"],[{"tag":"TypeVar","contents":"a"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prelude"],"Eq"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[259,1],"name":"bower_components/purescript-maybe/src/Data/Maybe.purs","end":[269,1]}},{"comments":"The `Ord` instance allows `Maybe` values to be compared with\n`compare`, `>`, `>=`, `<` and `<=` whenever there is an `Ord` instance for\nthe type the `Maybe` contains.\n\n`Nothing` is considered to be less than any `Just` value.\n","title":"ordMaybe","info":{"declType":"instance","dependencies":[[[["Prelude"],"Ord"],[{"tag":"TypeVar","contents":"a"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prelude"],"Ord"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[269,1],"name":"bower_components/purescript-maybe/src/Data/Maybe.purs","end":[275,1]}},{"comments":null,"title":"boundedMaybe","info":{"declType":"instance","dependencies":[[[["Prelude"],"Bounded"],[{"tag":"TypeVar","contents":"a"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prelude"],"Bounded"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[275,1],"name":"bower_components/purescript-maybe/src/Data/Maybe.purs","end":[279,1]}},{"comments":null,"title":"boundedOrdMaybe","info":{"declType":"instance","dependencies":[[[["Prelude"],"BoundedOrd"],[{"tag":"TypeVar","contents":"a"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prelude"],"BoundedOrd"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[279,1],"name":"bower_components/purescript-maybe/src/Data/Maybe.purs","end":[281,1]}},{"comments":null,"title":"booleanAlgebraMaybe","info":{"declType":"instance","dependencies":[[[["Prelude"],"BooleanAlgebra"],[{"tag":"TypeVar","contents":"a"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prelude"],"BooleanAlgebra"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[281,1],"name":"bower_components/purescript-maybe/src/Data/Maybe.purs","end":[289,1]}},{"comments":"The `Show` instance allows `Maybe` values to be rendered as a string with\n`show` whenever there is an `Show` instance for the type the `Maybe`\ncontains.\n","title":"showMaybe","info":{"declType":"instance","dependencies":[[[["Prelude"],"Show"],[{"tag":"TypeVar","contents":"a"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prelude"],"Show"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[289,1],"name":"bower_components/purescript-maybe/src/Data/Maybe.purs","end":[291,19]}}],"comments":"The `Maybe` type is used to represent optional values and can be seen as\nsomething like a type-safe `null`, where `Nothing` is `null` and `Just x`\nis the non-null value `x`.\n","title":"Maybe","fixity":null,"info":{"declType":"data","dataDeclType":"data","typeArguments":[["a",null]]},"sourceSpan":{"start":[16,1],"name":"bower_components/purescript-maybe/src/Data/Maybe.purs","end":[26,1]}}]},{"moduleName":["Elm","Apply"],"declarations":[{"children":[],"comments":"Map a function of two arguments over some container type.\n\nThe equivalent of Purescript's `lift2`.\n","title":"map2","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["f",{"tag":"ForAll","contents":["c",{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[[[[["Prelude"],"Apply"],[{"tag":"TypeVar","contents":"f"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeVar","contents":"c"}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"c"}]}]}]}]}]},null]},null]},null]},null]}},"sourceSpan":{"start":[24,1],"name":"src/Elm/Apply.purs","end":[25,1]}},{"children":[],"comments":"Map a function of three arguments over some container type.\n\nThe equivalent of Purescript's `lift3`.\n","title":"map3","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["f",{"tag":"ForAll","contents":["d",{"tag":"ForAll","contents":["c",{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[[[[["Prelude"],"Apply"],[{"tag":"TypeVar","contents":"f"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"c"}]},{"tag":"TypeVar","contents":"d"}]}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"c"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"d"}]}]}]}]}]}]},null]},null]},null]},null]},null]}},"sourceSpan":{"start":[31,1],"name":"src/Elm/Apply.purs","end":[32,1]}},{"children":[],"comments":"Map a function of four arguments over some container type.\n\nThe equivalent of Purescript's `lift4`.\n","title":"map4","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["f",{"tag":"ForAll","contents":["e",{"tag":"ForAll","contents":["d",{"tag":"ForAll","contents":["c",{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[[[[["Prelude"],"Apply"],[{"tag":"TypeVar","contents":"f"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"c"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"d"}]},{"tag":"TypeVar","contents":"e"}]}]}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"c"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"d"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"e"}]}]}]}]}]}]}]},null]},null]},null]},null]},null]},null]}},"sourceSpan":{"start":[38,1],"name":"src/Elm/Apply.purs","end":[39,1]}},{"children":[],"comments":"Map a function of five arguments over some container type.\n\nThe equivalent of Purescript's `lift5`.\n","title":"map5","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["g",{"tag":"ForAll","contents":["f",{"tag":"ForAll","contents":["e",{"tag":"ForAll","contents":["d",{"tag":"ForAll","contents":["c",{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[[[[["Prelude"],"Apply"],[{"tag":"TypeVar","contents":"f"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"c"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"d"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"e"}]},{"tag":"TypeVar","contents":"g"}]}]}]}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"c"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"d"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"e"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"g"}]}]}]}]}]}]}]}]},null]},null]},null]},null]},null]},null]},null]}},"sourceSpan":{"start":[45,1],"name":"src/Elm/Apply.purs","end":[46,1]}}]},{"moduleName":["Elm","Bind"],"declarations":[{"children":[],"comments":"Given some computation, chain its result with another computation.\n\nEquivalent to Purescript's `bind`.\n","title":"andThen","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["m",{"tag":"ConstrainedType","contents":[[[[["Prelude"],"Bind"],[{"tag":"TypeVar","contents":"m"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"m"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"m"},{"tag":"TypeVar","contents":"b"}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"m"},{"tag":"TypeVar","contents":"b"}]}]}]}]},null]},null]},null]}},"sourceSpan":{"start":[16,1],"name":"src/Elm/Bind.purs","end":[17,1]}}]},{"moduleName":["Prelude"],"declarations":[{"children":[],"comments":null,"title":"map","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["f",{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[[[[null,"Functor"],[{"tag":"TypeVar","contents":"f"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"b"}]}]}]}]},null]},null]},null]}},"sourceSpan":null}]}],"name":"Elm.Maybe","comments":"This library fills a bunch of important niches in Elm. A `Maybe` can help\nyou with optional arguments, error handling, and records with optional fields.\n\nThis is implemented in terms of Purescript's `Data.Maybe`, so you can use functions\nfrom there on `Maybe` values as well.\n","declarations":[{"children":[],"comments":"Provide a default value, turning an optional value into a normal\nvalue.  This comes in handy when paired with functions like\n[`Dict.get`](Dict#get) which gives back a `Maybe`.\n\n    withDefault 100 (Just 42)   -- 42\n    withDefault 100 Nothing     -- 100\n\n    withDefault \"unknown\" (Dict.get \"Tom\" Dict.empty)   -- \"unknown\"\n\nEquivalent to Purescript's 'fromMaybe`.\n","title":"withDefault","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeVar","contents":"a"}]}]},null]}},"sourceSpan":{"start":[37,1],"name":"src/Elm/Maybe.purs","end":[38,1]}},{"children":[],"comments":"Pick the first `Maybe` that actually has a value. Useful when you want to\ntry a couple different things, but there is no default value.\n\n    oneOf [ Nothing, Just 42, Just 71 ] == Just 42\n    oneOf [ Nothing, Nothing, Just 71 ] == Just 71\n    oneOf [ Nothing, Nothing, Nothing ] == Nothing\n\nThe signature uses `Foldable` to work with `List` or `Array`, among others\n","title":"oneOf","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["f",{"tag":"ConstrainedType","contents":[[[[["Data","Foldable"],"Foldable"],[{"tag":"TypeVar","contents":"f"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeVar","contents":"a"}]}}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeVar","contents":"a"}]}]}]},null]},null]}},"sourceSpan":{"start":[49,1],"name":"src/Elm/Maybe.purs","end":[50,1]}}]},{"reExports":[{"moduleName":["Elm","Apply"],"declarations":[{"children":[],"comments":"Map a function of two arguments over some container type.\n\nThe equivalent of Purescript's `lift2`.\n","title":"map2","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["f",{"tag":"ForAll","contents":["c",{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[[[[["Prelude"],"Apply"],[{"tag":"TypeVar","contents":"f"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeVar","contents":"c"}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"c"}]}]}]}]}]},null]},null]},null]},null]}},"sourceSpan":{"start":[24,1],"name":"src/Elm/Apply.purs","end":[25,1]}},{"children":[],"comments":"Map a function of three arguments over some container type.\n\nThe equivalent of Purescript's `lift3`.\n","title":"map3","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["f",{"tag":"ForAll","contents":["d",{"tag":"ForAll","contents":["c",{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[[[[["Prelude"],"Apply"],[{"tag":"TypeVar","contents":"f"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"c"}]},{"tag":"TypeVar","contents":"d"}]}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"c"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"d"}]}]}]}]}]}]},null]},null]},null]},null]},null]}},"sourceSpan":{"start":[31,1],"name":"src/Elm/Apply.purs","end":[32,1]}},{"children":[],"comments":"Map a function of four arguments over some container type.\n\nThe equivalent of Purescript's `lift4`.\n","title":"map4","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["f",{"tag":"ForAll","contents":["e",{"tag":"ForAll","contents":["d",{"tag":"ForAll","contents":["c",{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[[[[["Prelude"],"Apply"],[{"tag":"TypeVar","contents":"f"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"c"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"d"}]},{"tag":"TypeVar","contents":"e"}]}]}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"c"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"d"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"e"}]}]}]}]}]}]}]},null]},null]},null]},null]},null]},null]}},"sourceSpan":{"start":[38,1],"name":"src/Elm/Apply.purs","end":[39,1]}},{"children":[],"comments":"Map a function of five arguments over some container type.\n\nThe equivalent of Purescript's `lift5`.\n","title":"map5","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["g",{"tag":"ForAll","contents":["f",{"tag":"ForAll","contents":["e",{"tag":"ForAll","contents":["d",{"tag":"ForAll","contents":["c",{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[[[[["Prelude"],"Apply"],[{"tag":"TypeVar","contents":"f"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"c"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"d"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"e"}]},{"tag":"TypeVar","contents":"g"}]}]}]}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"c"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"d"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"e"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"g"}]}]}]}]}]}]}]}]},null]},null]},null]},null]},null]},null]},null]}},"sourceSpan":{"start":[45,1],"name":"src/Elm/Apply.purs","end":[46,1]}}]},{"moduleName":["Elm","Bind"],"declarations":[{"children":[],"comments":"Given some computation, chain its result with another computation.\n\nEquivalent to Purescript's `bind`.\n","title":"andThen","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["m",{"tag":"ConstrainedType","contents":[[[[["Prelude"],"Bind"],[{"tag":"TypeVar","contents":"m"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"m"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"m"},{"tag":"TypeVar","contents":"b"}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"m"},{"tag":"TypeVar","contents":"b"}]}]}]}]},null]},null]},null]}},"sourceSpan":{"start":[16,1],"name":"src/Elm/Bind.purs","end":[17,1]}}]},{"moduleName":["Prelude"],"declarations":[{"children":[],"comments":null,"title":"map","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["f",{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[[[[null,"Functor"],[{"tag":"TypeVar","contents":"f"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"b"}]}]}]}]},null]},null]},null]}},"sourceSpan":null}]}],"name":"Elm.Random","comments":"This library helps you generate pseudo-random values.\n\nThis library is all about building generators for whatever\ntype of values you need. There are a bunch of primitive generators like\n[`bool`](#v:bool) and [`int`](#v:int) that you can build up into fancier\ngenerators with functions like [`list`](#v:list) and [`map`](#v:map).\n\nYou use a `Generator` by running the [`generate`](#v:generate) function. If you\nneed random values across many frames, you will probably want to store the\nmost recent seed in your application state.\n\n*Note:* This is an implementation of the Portable Combined Generator of\nL'Ecuyer for 32-bit computers. It is almost a direct translation from the\n[System.Random](http://hackage.haskell.org/package/random-1.0.1.1/docs/System-Random.html)\nmodule. It has a period of roughly 2.30584e18.\n\nThis is a translation of the Elm code to Purescript. I suppose the more idiomatic\nPurescript way of doing things like this would be to use the `Arbitrary` class in\nthe purescript-quickcheck library.\n","declarations":[{"children":[],"comments":"Create a generator that produces boolean values. The following example\nsimulates a coin flip that may land heads or tails.\n\n    data Flip = Heads | Tails\n\n    coinFlip :: Generator Flip\n    coinFlip =\n        map (\\b -> if b then Heads else Tails) bool\n","title":"bool","fixity":null,"info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Elm","Random"],"Generator"]},{"tag":"TypeConstructor","contents":[["Elm","Basics"],"Bool"]}]}},"sourceSpan":{"start":[67,1],"name":"src/Elm/Random.purs","end":[68,1]}},{"children":[],"comments":"Generate 32-bit integers in a given range.\n\n    int 0 10   -- an integer between zero and ten\n    int (-5) 5   -- an integer between -5 and 5\n\n    int minInt maxInt  -- an integer in the widest range feasible\n\nYou can supply either `Int` or `Int53` for the parameters.\n","title":"int","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[[[[["Prelude"],"Ord"],[{"tag":"TypeVar","contents":"a"}]],[[["Data","Int53"],"Int53Value"],[{"tag":"TypeVar","contents":"a"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Elm","Random"],"Generator"]},{"tag":"TypeVar","contents":"a"}]}]}]}]},null]}},"sourceSpan":{"start":[80,1],"name":"src/Elm/Random.purs","end":[81,1]}},{"children":[],"comments":"The maximum value for randomly generated 32-bit ints.\n","title":"maxInt","fixity":null,"info":{"declType":"value","type":{"tag":"TypeConstructor","contents":[["Data","Int53"],"Int53"]}},"sourceSpan":{"start":[136,1],"name":"src/Elm/Random.purs","end":[137,1]}},{"children":[],"comments":"The minimum value for randomly generated 32-bit ints.\n","title":"minInt","fixity":null,"info":{"declType":"value","type":{"tag":"TypeConstructor","contents":[["Data","Int53"],"Int53"]}},"sourceSpan":{"start":[141,1],"name":"src/Elm/Random.purs","end":[142,1]}},{"children":[],"comments":"Generate floats in a given range. The following example is a generator\nthat produces decimals between 0 and 1.\n\n    probability :: Generator Float\n    probability =\n        float 0 1\n","title":"float","fixity":null,"info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Elm","Basics"],"Float"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Elm","Basics"],"Float"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Elm","Random"],"Generator"]},{"tag":"TypeConstructor","contents":[["Elm","Basics"],"Float"]}]}]}]}},"sourceSpan":{"start":[151,1],"name":"src/Elm/Random.purs","end":[152,1]}},{"children":[],"comments":"Create a pair of random values. A common use of this might be to generate\na point in a certain 2D space. Imagine we have a collage that is 400 pixels\nwide and 200 pixels tall.\n\n    randomPoint :: Generator (Tuple Int Int)\n    randomPoint =\n        pair (int -200 200) (int -100 100)\n","title":"pair","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Elm","Random"],"Generator"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Elm","Random"],"Generator"]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Elm","Random"],"Generator"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Tuple"],"Tuple"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}]}]},null]},null]}},"sourceSpan":{"start":[184,1],"name":"src/Elm/Random.purs","end":[185,1]}},{"children":[],"comments":"Create a list of random values.\n\n    floatList :: Generator (List Float)\n    floatList =\n        list 10 (float 0 1)\n\n    intList :: Generator (List Int)\n    intList =\n        list 5 (int 0 100)\n\n    intPairs :: Generator (List (Tuple Int Int))\n    intPairs =\n        list 10 <| pair (int 0 100) (int 0 100)\n\nThe return type is polymorphic in order to accommodate `List` or `Array`, among others.\n","title":"list","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["t",{"tag":"ConstrainedType","contents":[[[[["Data","Monoid"],"Monoid"],[{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"t"},{"tag":"TypeVar","contents":"a"}]}}]],[[["Prelude"],"Applicative"],[{"tag":"TypeVar","contents":"t"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Elm","Random"],"Generator"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Elm","Random"],"Generator"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"t"},{"tag":"TypeVar","contents":"a"}]}}]}]}]}]},null]},null]}},"sourceSpan":{"start":[204,1],"name":"src/Elm/Random.purs","end":[205,1]}},{"children":[{"comments":null,"title":"functorGenerator","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prelude"],"Functor"]},{"tag":"TypeConstructor","contents":[["Elm","Random"],"Generator"]}]}},"sourceSpan":{"start":[250,1],"name":"src/Elm/Random.purs","end":[253,1]}},{"comments":null,"title":"applyGenerator","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prelude"],"Apply"]},{"tag":"TypeConstructor","contents":[["Elm","Random"],"Generator"]}]}},"sourceSpan":{"start":[253,1],"name":"src/Elm/Random.purs","end":[256,1]}},{"comments":null,"title":"bindGenerator","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prelude"],"Bind"]},{"tag":"TypeConstructor","contents":[["Elm","Random"],"Generator"]}]}},"sourceSpan":{"start":[296,1],"name":"src/Elm/Random.purs","end":[300,1]}},{"comments":null,"title":"semigroupGenerator","info":{"declType":"instance","dependencies":[[[["Prelude"],"Semigroup"],[{"tag":"TypeVar","contents":"a"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prelude"],"Semigroup"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Elm","Random"],"Generator"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[300,1],"name":"src/Elm/Random.purs","end":[303,1]}}],"comments":"A `Generator` is like a recipe for generating certain random values. So a\n`Generator Int` describes how to generate integers and a `Generator String`\ndescribes how to generate strings.\n\nTo actually *run* a generator and produce the random values, you need to use\nfunctions like [`generate`](#v:generate) and [`initialSeed`](#v:initialSeed).\n","title":"Generator","fixity":null,"info":{"declType":"data","dataDeclType":"data","typeArguments":[["a",null]]},"sourceSpan":{"start":[322,1],"name":"src/Elm/Random.purs","end":[325,1]}},{"children":[],"comments":"A `Seed` is the source of randomness in this whole system. Whenever\nyou want to use a generator, you need to pair it with a seed.\n","title":"Seed","fixity":null,"info":{"declType":"data","dataDeclType":"data","typeArguments":[]},"sourceSpan":{"start":[333,1],"name":"src/Elm/Random.purs","end":[358,1]}},{"children":[],"comments":"Generate a random value as specified by a given `Generator`.\n\nIn the following example, we are trying to generate a number between 0 and 100\nwith the `int 0 100` generator. Each time we call `generate` we need to provide\na seed. This will produce a random number and a *new* seed to use if we want to\nrun other generators later.\n\nSo here it is done right, where we get a new seed from each `generate` call and\nthread that through.\n\n    seed0 = initialSeed 31415\n\n    -- generate (int 0 100) seed0 ==> {value: 42, seed: seed1}\n    -- generate (int 0 100) seed1 ==> {value: 31, seed: seed2}\n    -- generate (int 0 100) seed2 ==> (value: 99, seed: seed3}\n\nNotice that we use different seeds on each line. This is important! If you use\nthe same seed, you get the same results.\n\n    -- generate (int 0 100) seed0 ==> {value: 42, seed: seed1}\n    -- generate (int 0 100) seed0 ==> {value: 42, seed: seed1}\n    -- generate (int 0 100) seed0 ==> {value: 42, seed: seed1}\n","title":"generate","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Elm","Random"],"Generator"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Elm","Random"],"Seed"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Elm","Random"],"Generated"]},{"tag":"TypeVar","contents":"a"}]}]}]},null]}},"sourceSpan":{"start":[358,1],"name":"src/Elm/Random.purs","end":[359,1]}},{"children":[],"comments":"Create a &ldquo;seed&rdquo; of randomness which makes it possible to\ngenerate random values. If you use the same seed many times, it will result\nin the same thing every time!\n\nYou can supply either an `Int` or `Int53` for the parameter.\n","title":"initialSeed","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[[[[["Data","Int53"],"Int53Value"],[{"tag":"TypeVar","contents":"a"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeConstructor","contents":[["Elm","Random"],"Seed"]}]}]},null]}},"sourceSpan":{"start":[368,1],"name":"src/Elm/Random.purs","end":[369,1]}}]},{"reExports":[],"name":"Elm.Regex","comments":"A library for working with regular expressions. It uses the same kind of\nregular expressions\n[accepted by JavaScript](https://developer.mozilla.org/en/docs/Web/JavaScript/Guide/Regular_Expressions).\n\nPurescript has its own regular expression library in `Data.String.Regex`.\nHowever, the `Elm.Regex` API is sufficiently different that it is\nre-implemented here.\n","declarations":[{"children":[{"comments":null,"title":"showRegex","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prelude"],"Show"]},{"tag":"TypeConstructor","contents":[["Elm","Regex"],"Regex"]}]}},"sourceSpan":{"start":[37,1],"name":"src/Elm/Regex.purs","end":[44,1]}}],"comments":"A regular expression, describing a certain set of strings.\n\nNote that this is (unfortunatley) not interchangeable with Purescript's `Data.String.Regex`,\nbecause the Elm code requires that the `Regex` be created with the `g` flag.\n","title":"Regex","fixity":null,"info":{"kind":{"tag":"Star","contents":[]},"declType":"externData"},"sourceSpan":{"start":[32,1],"name":"src/Elm/Regex.purs","end":[35,1]}},{"children":[],"comments":"Escape strings to be regular expressions, making all special characters\nsafe. So `regex (escape \"^a+\")` will match exactly `\"^a+\"` instead of a series\nof `a`&rsquo;s that start at the beginning of the line.\n","title":"escape","fixity":null,"info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}},"sourceSpan":{"start":[44,1],"name":"src/Elm/Regex.purs","end":[53,1]}},{"children":[],"comments":"Create a Regex that matches patterns\n[as specified in JavaScript](https://developer.mozilla.org/en/docs/Web/JavaScript/Guide/Regular_Expressions#Writing_a_Regular_Expression_Pattern).\n\nBe careful to escape backslashes properly! For example, `\"\\w\"` is escaping the\nletter `w` which is probably not what you want. You probably want `\"\\\\w\"`\ninstead, which escapes the backslash.\n","title":"regex","fixity":null,"info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeConstructor","contents":[["Elm","Regex"],"Regex"]}]}},"sourceSpan":{"start":[53,1],"name":"src/Elm/Regex.purs","end":[57,1]}},{"children":[],"comments":"Make a regex case insensitive.\n","title":"caseInsensitive","fixity":null,"info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Elm","Regex"],"Regex"]}]},{"tag":"TypeConstructor","contents":[["Elm","Regex"],"Regex"]}]}},"sourceSpan":{"start":[57,1],"name":"src/Elm/Regex.purs","end":[67,1]}},{"children":[],"comments":"Check to see if a Regex is contained in a string.\n\n    contains (regex \"123\") \"12345\" == true\n    contains (regex \"b+\") \"aabbcc\" == true\n\n    contains (regex \"789\") \"12345\" == false\n    contains (regex \"z+\") \"aabbcc\" == false\n","title":"contains","fixity":null,"info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Elm","Regex"],"Regex"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeConstructor","contents":[["Elm","Basics"],"Bool"]}]}]}},"sourceSpan":{"start":[67,1],"name":"src/Elm/Regex.purs","end":[89,1]}},{"children":[],"comments":"A `Match` represents all of the details about a particular match in a string.\nHere are details on each field:\n\n  * `match` &mdash; the full string of the match.\n\n  * `submatches` &mdash; a regex might have\n    [subpatterns, surrounded by parentheses](https://developer.mozilla.org/en/docs/Web/JavaScript/Guide/Regular_Expressions#Using_Parenthesized_Substring_Matches).\n    If there are N subpatterns, there will be N elements in the `submatches` list.\n    Each submatch in this list is a `Maybe` because not all subpatterns may trigger.\n    For example, `(regex \"(a+)|(b+)\")` will either match many `a`&rsquo;s or\n    many `b`&rsquo;s, but never both.\n\n  * `index` &mdash; the index of the match in the original string.\n\n  * `number` &mdash; if you find many matches, you can think of each one\n    as being labeled with a `number` starting at one. So the first time you\n    find a match, that is match `number` one. Second time is match `number` two.\n    This is useful when paired with `replace All` if replacement is dependent on how\n    many times a pattern has appeared before.\n","title":"Match","fixity":null,"info":{"arguments":[],"declType":"typeSynonym","type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Object"]},{"tag":"RCons","contents":["match",{"tag":"TypeConstructor","contents":[["Prim"],"String"]},{"tag":"RCons","contents":["submatches",{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","List"],"List"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}}]},{"tag":"RCons","contents":["index",{"tag":"TypeConstructor","contents":[["Prim"],"Int"]},{"tag":"RCons","contents":["number",{"tag":"TypeConstructor","contents":[["Prim"],"Int"]},{"tag":"REmpty","contents":[]}]}]}]}]}]}},"sourceSpan":{"start":[89,1],"name":"src/Elm/Regex.purs","end":[100,1]}},{"children":[{"comments":null,"title":"All","info":{"arguments":[],"declType":"dataConstructor"},"sourceSpan":null},{"comments":null,"title":"AtMost","info":{"arguments":[{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}],"declType":"dataConstructor"},"sourceSpan":null}],"comments":"`HowMany` is used to specify how many matches you want to make. So\n`replace All` would replace every match, but `replace (AtMost 2)` would\nreplace at most two matches (i.e. zero, one, two, but never three or more).\n","title":"HowMany","fixity":null,"info":{"declType":"data","dataDeclType":"data","typeArguments":[]},"sourceSpan":{"start":[100,1],"name":"src/Elm/Regex.purs","end":[106,1]}},{"children":[],"comments":"Find matches in a string:\n\n    findTwoCommas = find (AtMost 2) (regex \",\")\n\n      -- map .index (findTwoCommas \"a,b,c,d,e\") == [1,3]\n      -- map .index (findTwoCommas \"a b c d e\") == []\n\n    places = find All (regex \"[oi]n a (\\\\w+)\") \"I am on a boat in a lake.\"\n\n      -- map .match places == [\"on a boat\", \"in a lake\"]\n      -- map .submatches places == [ [Just \"boat\"], [Just \"lake\"] ]\n","title":"find","fixity":null,"info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Elm","Regex"],"HowMany"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Elm","Regex"],"Regex"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","List"],"List"]},{"tag":"TypeConstructor","contents":[["Elm","Regex"],"Match"]}]}]}]}]}},"sourceSpan":{"start":[133,1],"name":"src/Elm/Regex.purs","end":[134,1]}},{"children":[],"comments":"Replace matches. The function from `Match` to `String` lets\nyou use the details of a specific match when making replacements.\n\n    devowel = replace All (regex \"[aeiou]\") (\\_ -> \"\")\n\n      -- devowel \"The quick brown fox\" == \"Th qck brwn fx\"\n\n    reverseWords = replace All (regex \"\\\\w+\") (\\{match} -> String.reverse match)\n\n      -- reverseWords \"deliver mined parts\" == \"reviled denim strap\"\n","title":"replace","fixity":null,"info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Elm","Regex"],"HowMany"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Elm","Regex"],"Regex"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Elm","Regex"],"Match"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}]}]}]}},"sourceSpan":{"start":[161,1],"name":"src/Elm/Regex.purs","end":[162,1]}},{"children":[],"comments":"Split a string, using the regex as the separator.\n\n    split (AtMost 1) (regex \",\") \"tom,99,90,85\" == [\"tom\",\"99,90,85\"]\n\n    split All (regex \",\") \"a,b,c,d\" == [\"a\",\"b\",\"c\",\"d\"]\n","title":"split","fixity":null,"info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Elm","Regex"],"HowMany"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Elm","Regex"],"Regex"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","List"],"List"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}]}]}]}},"sourceSpan":{"start":[175,1],"name":"src/Elm/Regex.purs","end":[176,1]}}]},{"reExports":[{"moduleName":["Elm","Apply"],"declarations":[{"children":[],"comments":"Map a function of two arguments over some container type.\n\nThe equivalent of Purescript's `lift2`.\n","title":"map2","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["f",{"tag":"ForAll","contents":["c",{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[[[[["Prelude"],"Apply"],[{"tag":"TypeVar","contents":"f"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeVar","contents":"c"}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"c"}]}]}]}]}]},null]},null]},null]},null]}},"sourceSpan":{"start":[24,1],"name":"src/Elm/Apply.purs","end":[25,1]}},{"children":[],"comments":"Map a function of three arguments over some container type.\n\nThe equivalent of Purescript's `lift3`.\n","title":"map3","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["f",{"tag":"ForAll","contents":["d",{"tag":"ForAll","contents":["c",{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[[[[["Prelude"],"Apply"],[{"tag":"TypeVar","contents":"f"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"c"}]},{"tag":"TypeVar","contents":"d"}]}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"c"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"d"}]}]}]}]}]}]},null]},null]},null]},null]},null]}},"sourceSpan":{"start":[31,1],"name":"src/Elm/Apply.purs","end":[32,1]}},{"children":[],"comments":"Map a function of four arguments over some container type.\n\nThe equivalent of Purescript's `lift4`.\n","title":"map4","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["f",{"tag":"ForAll","contents":["e",{"tag":"ForAll","contents":["d",{"tag":"ForAll","contents":["c",{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[[[[["Prelude"],"Apply"],[{"tag":"TypeVar","contents":"f"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"c"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"d"}]},{"tag":"TypeVar","contents":"e"}]}]}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"c"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"d"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"e"}]}]}]}]}]}]}]},null]},null]},null]},null]},null]},null]}},"sourceSpan":{"start":[38,1],"name":"src/Elm/Apply.purs","end":[39,1]}},{"children":[],"comments":"Map a function of five arguments over some container type.\n\nThe equivalent of Purescript's `lift5`.\n","title":"map5","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["g",{"tag":"ForAll","contents":["f",{"tag":"ForAll","contents":["e",{"tag":"ForAll","contents":["d",{"tag":"ForAll","contents":["c",{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[[[[["Prelude"],"Apply"],[{"tag":"TypeVar","contents":"f"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"c"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"d"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"e"}]},{"tag":"TypeVar","contents":"g"}]}]}]}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"c"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"d"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"e"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"g"}]}]}]}]}]}]}]}]},null]},null]},null]},null]},null]},null]},null]}},"sourceSpan":{"start":[45,1],"name":"src/Elm/Apply.purs","end":[46,1]}}]},{"moduleName":["Elm","Bind"],"declarations":[{"children":[],"comments":"Given some computation, chain its result with another computation.\n\nEquivalent to Purescript's `bind`.\n","title":"andThen","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["m",{"tag":"ConstrainedType","contents":[[[[["Prelude"],"Bind"],[{"tag":"TypeVar","contents":"m"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"m"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"m"},{"tag":"TypeVar","contents":"b"}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"m"},{"tag":"TypeVar","contents":"b"}]}]}]}]},null]},null]},null]}},"sourceSpan":{"start":[16,1],"name":"src/Elm/Bind.purs","end":[17,1]}}]},{"moduleName":["Prelude"],"declarations":[{"children":[],"comments":null,"title":"map","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["f",{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[[[[null,"Functor"],[{"tag":"TypeVar","contents":"f"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"b"}]}]}]}]},null]},null]},null]}},"sourceSpan":null}]}],"name":"Elm.Result","comments":"A `Result` is the result of a computation that may fail.\n\nNormally, I would have wanted to implement this in terms of Purescript's\n`Either` module, since it is essentially equivalent.\n\nHowever, the difficulty is that there is no way to alias the data constructors\n`Left` and `Right`, so that you could use Elm's `Ok` and `Err` instead.\nSo, in order to require fewer changes to code coming from Elm, I've\nimplemented a separate `Result` type here.\n","declarations":[{"children":[{"comments":null,"title":"Ok","info":{"arguments":[{"tag":"TypeVar","contents":"value"}],"declType":"dataConstructor"},"sourceSpan":null},{"comments":null,"title":"Err","info":{"arguments":[{"tag":"TypeVar","contents":"error"}],"declType":"dataConstructor"},"sourceSpan":null},{"comments":null,"title":"functorResult","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prelude"],"Functor"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Elm","Result"],"Result"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[126,1],"name":"src/Elm/Result.purs","end":[130,1]}},{"comments":null,"title":"bifunctorResult","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Bifunctor"],"Bifunctor"]},{"tag":"TypeConstructor","contents":[["Elm","Result"],"Result"]}]}},"sourceSpan":{"start":[130,1],"name":"src/Elm/Result.purs","end":[134,1]}},{"comments":null,"title":"applyResult","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prelude"],"Apply"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Elm","Result"],"Result"]},{"tag":"TypeVar","contents":"e"}]}}]}},"sourceSpan":{"start":[134,1],"name":"src/Elm/Result.purs","end":[138,1]}},{"comments":null,"title":"applicativeResult","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prelude"],"Applicative"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Elm","Result"],"Result"]},{"tag":"TypeVar","contents":"e"}]}}]}},"sourceSpan":{"start":[138,1],"name":"src/Elm/Result.purs","end":[141,1]}},{"comments":null,"title":"altResult","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Alt"],"Alt"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Elm","Result"],"Result"]},{"tag":"TypeVar","contents":"e"}]}}]}},"sourceSpan":{"start":[141,1],"name":"src/Elm/Result.purs","end":[145,1]}},{"comments":null,"title":"bindResult","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prelude"],"Bind"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Elm","Result"],"Result"]},{"tag":"TypeVar","contents":"e"}]}}]}},"sourceSpan":{"start":[145,1],"name":"src/Elm/Result.purs","end":[148,1]}},{"comments":null,"title":"monadResult","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prelude"],"Monad"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Elm","Result"],"Result"]},{"tag":"TypeVar","contents":"e"}]}}]}},"sourceSpan":{"start":[148,1],"name":"src/Elm/Result.purs","end":[150,1]}},{"comments":null,"title":"extendResult","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Extend"],"Extend"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Elm","Result"],"Result"]},{"tag":"TypeVar","contents":"e"}]}}]}},"sourceSpan":{"start":[150,1],"name":"src/Elm/Result.purs","end":[154,1]}},{"comments":null,"title":"showResult","info":{"declType":"instance","dependencies":[[[["Prelude"],"Show"],[{"tag":"TypeVar","contents":"a"}]],[[["Prelude"],"Show"],[{"tag":"TypeVar","contents":"b"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prelude"],"Show"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Elm","Result"],"Result"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}},"sourceSpan":{"start":[154,1],"name":"src/Elm/Result.purs","end":[158,1]}},{"comments":null,"title":"eqResult","info":{"declType":"instance","dependencies":[[[["Prelude"],"Eq"],[{"tag":"TypeVar","contents":"a"}]],[[["Prelude"],"Eq"],[{"tag":"TypeVar","contents":"b"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prelude"],"Eq"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Elm","Result"],"Result"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}},"sourceSpan":{"start":[158,1],"name":"src/Elm/Result.purs","end":[163,1]}},{"comments":null,"title":"ordResult","info":{"declType":"instance","dependencies":[[[["Prelude"],"Ord"],[{"tag":"TypeVar","contents":"a"}]],[[["Prelude"],"Ord"],[{"tag":"TypeVar","contents":"b"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prelude"],"Ord"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Elm","Result"],"Result"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}},"sourceSpan":{"start":[163,1],"name":"src/Elm/Result.purs","end":[169,1]}},{"comments":null,"title":"boundedResult","info":{"declType":"instance","dependencies":[[[["Prelude"],"Bounded"],[{"tag":"TypeVar","contents":"a"}]],[[["Prelude"],"Bounded"],[{"tag":"TypeVar","contents":"b"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prelude"],"Bounded"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Elm","Result"],"Result"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}},"sourceSpan":{"start":[169,1],"name":"src/Elm/Result.purs","end":[173,1]}},{"comments":null,"title":"foldableResult","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Foldable"],"Foldable"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Elm","Result"],"Result"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[173,1],"name":"src/Elm/Result.purs","end":[181,1]}},{"comments":null,"title":"bifoldableResult","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Bifoldable"],"Bifoldable"]},{"tag":"TypeConstructor","contents":[["Elm","Result"],"Result"]}]}},"sourceSpan":{"start":[181,1],"name":"src/Elm/Result.purs","end":[189,1]}},{"comments":null,"title":"traversableResult","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Traversable"],"Traversable"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Elm","Result"],"Result"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[189,1],"name":"src/Elm/Result.purs","end":[195,1]}},{"comments":null,"title":"bitraversableResult","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Bitraversable"],"Bitraversable"]},{"tag":"TypeConstructor","contents":[["Elm","Result"],"Result"]}]}},"sourceSpan":{"start":[195,1],"name":"src/Elm/Result.purs","end":[201,1]}},{"comments":null,"title":"semiringResult","info":{"declType":"instance","dependencies":[[[["Prelude"],"Semiring"],[{"tag":"TypeVar","contents":"b"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prelude"],"Semiring"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Elm","Result"],"Result"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}},"sourceSpan":{"start":[201,1],"name":"src/Elm/Result.purs","end":[207,1]}},{"comments":null,"title":"semigroupResult","info":{"declType":"instance","dependencies":[[[["Prelude"],"Semigroup"],[{"tag":"TypeVar","contents":"b"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prelude"],"Semigroup"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Elm","Result"],"Result"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}},"sourceSpan":{"start":[207,1],"name":"src/Elm/Result.purs","end":[208,35]}}],"comments":"A `Result` is either `Ok` meaning the computation succeeded, or it is an\n`Err` meaning that there was some failure.\n","title":"Result","fixity":null,"info":{"declType":"data","dataDeclType":"data","typeArguments":[["error",null],["value",null]]},"sourceSpan":{"start":[59,1],"name":"src/Elm/Result.purs","end":[69,1]}},{"children":[],"comments":"If the result is `Ok` return the value, but if the result is an `Err` then\nreturn a given default value. The following examples try to parse integers.\n\n    Result.withDefault 0 (String.toInt \"123\") == 123\n    Result.withDefault 0 (String.toInt \"abc\") == 0\n","title":"withDefault","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["x",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Elm","Result"],"Result"]},{"tag":"TypeVar","contents":"x"}]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeVar","contents":"a"}]}]},null]},null]}},"sourceSpan":{"start":[69,1],"name":"src/Elm/Result.purs","end":[70,1]}},{"children":[],"comments":"Format the error value of a result. If the result is `Ok`, it stays exactly\nthe same, but if the result is an `Err` we will format the error. For example,\nsay the errors we get have too much information:\n\n    parseInt :: String -> Result ParseError Int\n\n    type ParseError =\n        { message : String\n        , code : Int\n        , position : (Int,Int)\n        }\n\n    formatError .message (parseInt \"123\") == Ok 123\n    formatError .message (parseInt \"abc\") == Err \"char 'a' is not a number\"\n\nEquivalent to Purescript's `lmap`.\n","title":"formatError","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["error'",{"tag":"ForAll","contents":["error",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"error"}]},{"tag":"TypeVar","contents":"error'"}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Elm","Result"],"Result"]},{"tag":"TypeVar","contents":"error"}]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Elm","Result"],"Result"]},{"tag":"TypeVar","contents":"error'"}]},{"tag":"TypeVar","contents":"a"}]}]}]},null]},null]},null]}},"sourceSpan":{"start":[90,1],"name":"src/Elm/Result.purs","end":[91,1]}},{"children":[],"comments":"Convert to a simpler `Maybe` if the actual error message is not needed or\nyou need to interact with some code that primarily uses maybes.\n\n    parseInt :: String -> Result ParseError Int\n\n    maybeParseInt :: String -> Maybe Int\n    maybeParseInt string =\n        toMaybe (parseInt string)\n","title":"toMaybe","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["x",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Elm","Result"],"Result"]},{"tag":"TypeVar","contents":"x"}]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeVar","contents":"a"}]}]},null]},null]}},"sourceSpan":{"start":[102,1],"name":"src/Elm/Result.purs","end":[103,1]}},{"children":[],"comments":"Convert from a simple `Maybe` to interact with some code that primarily\nuses `Results`.\n\n    parseInt :: String -> Maybe Int\n\n    resultParseInt :: String -> Result String Int\n    resultParseInt string =\n        fromMaybe (\"error parsing string: \" ++ toString string) (parseInt string)\n","title":"fromMaybe","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["x",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"x"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Elm","Result"],"Result"]},{"tag":"TypeVar","contents":"x"}]},{"tag":"TypeVar","contents":"a"}]}]}]},null]},null]}},"sourceSpan":{"start":[115,1],"name":"src/Elm/Result.purs","end":[116,1]}}]},{"reExports":[{"moduleName":["Data","Foldable"],"declarations":[{"children":[],"comments":null,"title":"foldr","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["f",{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[[[[null,"Foldable"],[{"tag":"TypeVar","contents":"f"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeVar","contents":"b"}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeVar","contents":"b"}]}]}]}]},null]},null]},null]}},"sourceSpan":null}]},{"moduleName":["Data","Set"],"declarations":[{"children":[{"comments":null,"title":"eqSet","info":{"declType":"instance","dependencies":[[[["Prelude"],"Eq"],[{"tag":"TypeVar","contents":"a"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prelude"],"Eq"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Set"],"Set"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[47,1],"name":"bower_components/purescript-sets/src/Data/Set.purs","end":[50,1]}},{"comments":null,"title":"showSet","info":{"declType":"instance","dependencies":[[[["Prelude"],"Show"],[{"tag":"TypeVar","contents":"a"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prelude"],"Show"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Set"],"Set"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[50,1],"name":"bower_components/purescript-sets/src/Data/Set.purs","end":[53,1]}},{"comments":null,"title":"ordSet","info":{"declType":"instance","dependencies":[[[["Prelude"],"Ord"],[{"tag":"TypeVar","contents":"a"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prelude"],"Ord"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Set"],"Set"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[53,1],"name":"bower_components/purescript-sets/src/Data/Set.purs","end":[56,1]}},{"comments":null,"title":"monoidSet","info":{"declType":"instance","dependencies":[[[["Prelude"],"Ord"],[{"tag":"TypeVar","contents":"a"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Monoid"],"Monoid"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Set"],"Set"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[56,1],"name":"bower_components/purescript-sets/src/Data/Set.purs","end":[59,1]}},{"comments":null,"title":"semigroupSet","info":{"declType":"instance","dependencies":[[[["Prelude"],"Ord"],[{"tag":"TypeVar","contents":"a"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prelude"],"Semigroup"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Set"],"Set"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[59,1],"name":"bower_components/purescript-sets/src/Data/Set.purs","end":[62,1]}},{"comments":null,"title":"foldableSet","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Foldable"],"Foldable"]},{"tag":"TypeConstructor","contents":[["Data","Set"],"Set"]}]}},"sourceSpan":{"start":[62,1],"name":"bower_components/purescript-sets/src/Data/Set.purs","end":[68,1]}}],"comments":"`Set a` represents a set of values of type `a`\n","title":"Set","fixity":null,"info":{"declType":"data","dataDeclType":"data","typeArguments":[["a",null]]},"sourceSpan":{"start":[45,1],"name":"bower_components/purescript-sets/src/Data/Set.purs","end":[47,1]}},{"children":[],"comments":"An empty set\n","title":"empty","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Set"],"Set"]},{"tag":"TypeVar","contents":"a"}]},null]}},"sourceSpan":{"start":[68,1],"name":"bower_components/purescript-sets/src/Data/Set.purs","end":[69,1]}},{"children":[],"comments":"Create a set from a list of elements\n","title":"fromList","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[[[[["Prelude"],"Ord"],[{"tag":"TypeVar","contents":"a"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","List"],"List"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Set"],"Set"]},{"tag":"TypeVar","contents":"a"}]}]}]},null]}},"sourceSpan":{"start":[106,1],"name":"bower_components/purescript-sets/src/Data/Set.purs","end":[107,1]}},{"children":[],"comments":"Insert a value into a set\n","title":"insert","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[[[[["Prelude"],"Ord"],[{"tag":"TypeVar","contents":"a"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Set"],"Set"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Set"],"Set"]},{"tag":"TypeVar","contents":"a"}]}]}]}]},null]}},"sourceSpan":{"start":[90,1],"name":"bower_components/purescript-sets/src/Data/Set.purs","end":[91,1]}},{"children":[],"comments":"Test if a set is empty\n","title":"isEmpty","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Set"],"Set"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]},null]}},"sourceSpan":{"start":[72,1],"name":"bower_components/purescript-sets/src/Data/Set.purs","end":[73,1]}},{"children":[],"comments":"Test if a value is a member of a set\n","title":"member","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[[[[["Prelude"],"Ord"],[{"tag":"TypeVar","contents":"a"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Set"],"Set"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}]}]},null]}},"sourceSpan":{"start":[86,1],"name":"bower_components/purescript-sets/src/Data/Set.purs","end":[87,1]}},{"children":[],"comments":"Create a set with one element\n","title":"singleton","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Set"],"Set"]},{"tag":"TypeVar","contents":"a"}]}]},null]}},"sourceSpan":{"start":[76,1],"name":"bower_components/purescript-sets/src/Data/Set.purs","end":[77,1]}},{"children":[],"comments":"Find the size of a set\n","title":"size","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Set"],"Set"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},null]}},"sourceSpan":{"start":[110,1],"name":"bower_components/purescript-sets/src/Data/Set.purs","end":[111,1]}},{"children":[],"comments":"Convert a set to a list\n","title":"toList","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Set"],"Set"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","List"],"List"]},{"tag":"TypeVar","contents":"a"}]}]},null]}},"sourceSpan":{"start":[102,1],"name":"bower_components/purescript-sets/src/Data/Set.purs","end":[103,1]}},{"children":[],"comments":"Form the union of two sets\n\nRunning time: `O(n * log(m))`\n","title":"union","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[[[[["Prelude"],"Ord"],[{"tag":"TypeVar","contents":"a"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Set"],"Set"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Set"],"Set"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Set"],"Set"]},{"tag":"TypeVar","contents":"a"}]}]}]}]},null]}},"sourceSpan":{"start":[116,1],"name":"bower_components/purescript-sets/src/Data/Set.purs","end":[117,1]}}]},{"moduleName":["Elm","Foldable"],"declarations":[{"children":[],"comments":"Reduce a container from the left.\n\nEquivalent to Purescript's `foldl`, but the function you supply is flipped.\n","title":"foldl","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["f",{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[[[[["Data","Foldable"],"Foldable"],[{"tag":"TypeVar","contents":"f"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeVar","contents":"b"}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeVar","contents":"b"}]}]}]}]},null]},null]},null]}},"sourceSpan":{"start":[15,1],"name":"src/Elm/Foldable.purs","end":[16,1]}}]}],"name":"Elm.Set","comments":"A set of unique values. The values can be any type with an\n`Ord` instance.\n\nThis is implemented in terms of Purescript's `Data.Set`, so\nyou can also use functions from that module on a `Set`.\n","declarations":[{"children":[],"comments":"Remove a value from a set. If the value is not found, no changes are made.\n\nEquivalent to Purescript's `delete`.\n","title":"remove","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[[[[["Prelude"],"Ord"],[{"tag":"TypeVar","contents":"a"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Set"],"Set"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Set"],"Set"]},{"tag":"TypeVar","contents":"a"}]}]}]}]},null]}},"sourceSpan":{"start":[40,1],"name":"src/Elm/Set.purs","end":[41,1]}},{"children":[],"comments":"Get the intersection of two sets. Keeps values that appear in both sets.\n\nEquivalent to Purescript's `intersection`.\n","title":"intersect","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[[[[["Prelude"],"Ord"],[{"tag":"TypeVar","contents":"a"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Set"],"Set"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Set"],"Set"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Set"],"Set"]},{"tag":"TypeVar","contents":"a"}]}]}]}]},null]}},"sourceSpan":{"start":[47,1],"name":"src/Elm/Set.purs","end":[48,1]}},{"children":[],"comments":"Get the difference between the first set and the second. Keeps values\nthat do not appear in the second set.\n\nEquivalent to Purescript's `difference`.\n","title":"diff","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[[[[["Prelude"],"Ord"],[{"tag":"TypeVar","contents":"a"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Set"],"Set"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Set"],"Set"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Set"],"Set"]},{"tag":"TypeVar","contents":"a"}]}]}]}]},null]}},"sourceSpan":{"start":[55,1],"name":"src/Elm/Set.purs","end":[56,1]}},{"children":[],"comments":"Map a function onto a set, creating a new set with no duplicates.\n","title":"map","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[[[[["Prelude"],"Ord"],[{"tag":"TypeVar","contents":"a"}]],[[["Prelude"],"Ord"],[{"tag":"TypeVar","contents":"b"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Set"],"Set"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Set"],"Set"]},{"tag":"TypeVar","contents":"b"}]}]}]}]},null]},null]}},"sourceSpan":{"start":[60,1],"name":"src/Elm/Set.purs","end":[61,1]}},{"children":[],"comments":"Create a new set consisting only of elements which satisfy a predicate.\n","title":"filter","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[[[[["Prelude"],"Ord"],[{"tag":"TypeVar","contents":"a"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeConstructor","contents":[["Elm","Basics"],"Bool"]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Set"],"Set"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Set"],"Set"]},{"tag":"TypeVar","contents":"a"}]}]}]}]},null]}},"sourceSpan":{"start":[66,1],"name":"src/Elm/Set.purs","end":[67,1]}},{"children":[],"comments":"Create two new sets; the first consisting of elements which satisfy a\npredicate, the second consisting of elements which do not.\n\nNote that the result is a record of `{trues, falses}`, rather than a `Tuple`.\n","title":"partition","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[[[[["Prelude"],"Ord"],[{"tag":"TypeVar","contents":"a"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeConstructor","contents":[["Elm","Basics"],"Bool"]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Set"],"Set"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Object"]},{"tag":"RCons","contents":["trues",{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Set"],"Set"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"RCons","contents":["falses",{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Set"],"Set"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"REmpty","contents":[]}]}]}]}]}]}]},null]}},"sourceSpan":{"start":[75,1],"name":"src/Elm/Set.purs","end":[76,1]}}]},{"reExports":[{"moduleName":["Data","String"],"declarations":[{"children":[],"comments":"Checks whether the first string exists in the second string.\n","title":"contains","fixity":null,"info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}]}},"sourceSpan":{"start":[125,1],"name":"bower_components/purescript-strings/src/Data/String.purs","end":[126,1]}},{"children":[],"comments":"Returns a string of length `1` containing the given character.\n","title":"fromChar","fixity":null,"info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Char"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}},"sourceSpan":{"start":[53,1],"name":"bower_components/purescript-strings/src/Data/String.purs","end":[54,1]}},{"children":[],"comments":"Returns the number of characters the string is composed of.\n","title":"length","fixity":null,"info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}},"sourceSpan":{"start":[177,1],"name":"bower_components/purescript-strings/src/Data/String.purs","end":[180,1]}},{"children":[],"comments":"Returns the argument converted to lowercase.\n","title":"toLower","fixity":null,"info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}},"sourceSpan":{"start":[212,1],"name":"bower_components/purescript-strings/src/Data/String.purs","end":[215,1]}},{"children":[],"comments":"Returns the argument converted to uppercase.\n","title":"toUpper","fixity":null,"info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}},"sourceSpan":{"start":[215,1],"name":"bower_components/purescript-strings/src/Data/String.purs","end":[220,1]}},{"children":[],"comments":"Removes whitespace from the beginning and end of a string, including\n[whitespace characters](http://www.ecma-international.org/ecma-262/5.1/#sec-7.2)\nand [line terminators](http://www.ecma-international.org/ecma-262/5.1/#sec-7.3).\n","title":"trim","fixity":null,"info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}},"sourceSpan":{"start":[220,1],"name":"bower_components/purescript-strings/src/Data/String.purs","end":[224,1]}},{"children":[],"comments":"Returns the first character and the rest of the string,\nif the string is not empty.\n","title":"uncons","fixity":null,"info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Object"]},{"tag":"RCons","contents":["head",{"tag":"TypeConstructor","contents":[["Prim"],"Char"]},{"tag":"RCons","contents":["tail",{"tag":"TypeConstructor","contents":[["Prim"],"String"]},{"tag":"REmpty","contents":[]}]}]}]}]}]}},"sourceSpan":{"start":[86,1],"name":"bower_components/purescript-strings/src/Data/String.purs","end":[87,1]}}]},{"moduleName":["Prelude"],"declarations":[{"children":[],"comments":null,"title":"append","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[[[[null,"Semigroup"],[{"tag":"TypeVar","contents":"a"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"a"}]}]}]},null]}},"sourceSpan":null}]}],"name":"Elm.String","comments":"A built-in representation for efficient string manipulation. String literals\nare enclosed in `\"double quotes\"`. Strings are *not* lists of characters.\n\nThis is implemented in terms of Purescript's `String` type, so you can also\nuse functions from `Data.String`.\n","declarations":[{"children":[],"comments":"Determine if a string is empty.\n\n    isEmpty \"\" == true\n    isEmpty \"the world\" == false\n\nEquivalent to Purescript's `null`.\n","title":"isEmpty","fixity":null,"info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeConstructor","contents":[["Elm","Basics"],"Bool"]}]}},"sourceSpan":{"start":[53,1],"name":"src/Elm/String.purs","end":[54,1]}},{"children":[],"comments":"Add a character to the beginning of a string.\n","title":"cons","fixity":null,"info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Char"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}]}},"sourceSpan":{"start":[58,1],"name":"src/Elm/String.purs","end":[59,1]}},{"children":[],"comments":"Concatenate many strings into one.\n\n    concat [\"never\",\"the\",\"less\"] == \"nevertheless\"\n\nEquivalent to Purescript's `mconcat`\n\nThe signature uses `Foldable` to work with `List` or `Array`,\namong others.\n","title":"concat","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["f",{"tag":"ConstrainedType","contents":[[[[["Data","Foldable"],"Foldable"],[{"tag":"TypeVar","contents":"f"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}]},null]}},"sourceSpan":{"start":[70,1],"name":"src/Elm/String.purs","end":[71,1]}},{"children":[],"comments":"Transform every character in a string\n\n    map (\\c -> if c == '/' then '.' else c) \"a/b/c\" == \"a.b.c\"\n","title":"map","fixity":null,"info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Char"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Char"]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}]}},"sourceSpan":{"start":[77,1],"name":"src/Elm/String.purs","end":[78,1]}},{"children":[],"comments":"Keep only the characters that satisfy the predicate.\n\n    filter isDigit \"R2-D2\" == \"22\"\n","title":"filter","fixity":null,"info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Char"]}]},{"tag":"TypeConstructor","contents":[["Elm","Basics"],"Bool"]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}]}},"sourceSpan":{"start":[86,1],"name":"src/Elm/String.purs","end":[87,1]}},{"children":[],"comments":"Reverse a string.\n\n    reverse \"stressed\" == \"desserts\"\n","title":"reverse","fixity":null,"info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}},"sourceSpan":{"start":[95,1],"name":"src/Elm/String.purs","end":[96,1]}},{"children":[],"comments":"Reduce a string from the left.\n\n    foldl cons \"\" \"time\" == \"emit\"\n","title":"foldl","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Char"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeVar","contents":"b"}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeVar","contents":"b"}]}]}]},null]}},"sourceSpan":{"start":[105,1],"name":"src/Elm/String.purs","end":[111,1]}},{"children":[],"comments":"Reduce a string from the right.\n\n    foldr cons \"\" \"time\" == \"time\"\n","title":"foldr","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Char"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeVar","contents":"b"}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeVar","contents":"b"}]}]}]},null]}},"sourceSpan":{"start":[111,1],"name":"src/Elm/String.purs","end":[120,1]}},{"children":[],"comments":"Split a string using a given separator.\n\n    split \",\" \"cat,dog,cow\"        == [\"cat\",\"dog\",\"cow\"]\n    split \"/\" \"home/evan/Desktop/\" == [\"home\",\"evan\",\"Desktop\", \"\"]\n\nUse `Regex.split` if you need something more flexible.\n","title":"split","fixity":null,"info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","List"],"List"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}]}]}},"sourceSpan":{"start":[120,1],"name":"src/Elm/String.purs","end":[121,1]}},{"children":[],"comments":"Put many strings together with a given separator.\n\n    join \"a\" [\"H\",\"w\",\"ii\",\"n\"]        == \"Hawaiian\"\n    join \" \" [\"cat\",\"dog\",\"cow\"]       == \"cat dog cow\"\n    join \"/\" [\"home\",\"evan\",\"Desktop\"] == \"home/evan/Desktop\"\n","title":"join","fixity":null,"info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","List"],"List"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}]}},"sourceSpan":{"start":[131,1],"name":"src/Elm/String.purs","end":[132,1]}},{"children":[],"comments":"Repeat a string *n* times.\n\n    repeat 3 \"ha\" == \"hahaha\"\n","title":"repeat","fixity":null,"info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}]}},"sourceSpan":{"start":[138,1],"name":"src/Elm/String.purs","end":[148,1]}},{"children":[],"comments":"Take a substring given a start and end index. Negative indexes\nare taken starting from the *end* of the list.\n\n    slice  7  9 \"snakes on a plane!\" == \"on\"\n    slice  0  6 \"snakes on a plane!\" == \"snakes\"\n    slice  0 -7 \"snakes on a plane!\" == \"snakes on a\"\n    slice -6 -1 \"snakes on a plane!\" == \"plane\"\n","title":"slice","fixity":null,"info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}]}]}},"sourceSpan":{"start":[148,1],"name":"src/Elm/String.purs","end":[154,1]}},{"children":[],"comments":"Take *n* characters from the left side of a string.\n\nEquivalent to Purescript's `left`.\n","title":"left","fixity":null,"info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}]}},"sourceSpan":{"start":[154,1],"name":"src/Elm/String.purs","end":[155,1]}},{"children":[],"comments":"Take *n* characters from the right side of a string.\n","title":"right","fixity":null,"info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}]}},"sourceSpan":{"start":[159,1],"name":"src/Elm/String.purs","end":[165,1]}},{"children":[],"comments":"Drop *n* characters from the left side of a string.\n\nEquivalent to Purescript's `drop`.\n","title":"dropLeft","fixity":null,"info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}]}},"sourceSpan":{"start":[165,1],"name":"src/Elm/String.purs","end":[166,1]}},{"children":[],"comments":"Drop *n* characters from the right side of a string.\n","title":"dropRight","fixity":null,"info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}]}},"sourceSpan":{"start":[170,1],"name":"src/Elm/String.purs","end":[178,1]}},{"children":[],"comments":"Pad a string on both sides until it has a given length.\n\n    pad 5 ' ' \"1\"   == \"  1  \"\n    pad 5 ' ' \"11\"  == \"  11 \"\n    pad 5 ' ' \"121\" == \" 121 \"\n","title":"pad","fixity":null,"info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Char"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}]}]}},"sourceSpan":{"start":[178,1],"name":"src/Elm/String.purs","end":[179,1]}},{"children":[],"comments":"Pad a string on the left until it has a given length.\n\n    padLeft 5 '.' \"1\"   == \"....1\"\n    padLeft 5 '.' \"11\"  == \"...11\"\n    padLeft 5 '.' \"121\" == \"..121\"\n","title":"padLeft","fixity":null,"info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Char"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}]}]}},"sourceSpan":{"start":[204,1],"name":"src/Elm/String.purs","end":[205,1]}},{"children":[],"comments":"Pad a string on the right until it has a given length.\n\n    padRight 5 '.' \"1\"   == \"1....\"\n    padRight 5 '.' \"11\"  == \"11...\"\n    padRight 5 '.' \"121\" == \"121..\"\n","title":"padRight","fixity":null,"info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Char"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}]}]}},"sourceSpan":{"start":[222,1],"name":"src/Elm/String.purs","end":[223,1]}},{"children":[],"comments":"Get rid of whitespace on the left of a string.\n\n    trimLeft \"  hats  \\n\" == \"hats  \\n\"\n","title":"trimLeft","fixity":null,"info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}},"sourceSpan":{"start":[238,1],"name":"src/Elm/String.purs","end":[244,1]}},{"children":[],"comments":"Get rid of whitespace on the right of a string.\n\n    trimRight \"  hats  \\n\" == \"  hats\"\n","title":"trimRight","fixity":null,"info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}},"sourceSpan":{"start":[244,1],"name":"src/Elm/String.purs","end":[250,1]}},{"children":[],"comments":"Break a string into words, splitting on chunks of whitespace.\n\n    words \"How are \\t you? \\n Good?\" == [\"How\",\"are\",\"you?\",\"Good?\"]\n","title":"words","fixity":null,"info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","List"],"List"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}]}},"sourceSpan":{"start":[250,1],"name":"src/Elm/String.purs","end":[251,1]}},{"children":[],"comments":"Break a string into lines, splitting on newlines.\n\n    lines \"How are you?\\nGood?\" == [\"How are you?\", \"Good?\"]\n","title":"lines","fixity":null,"info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","List"],"List"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}]}},"sourceSpan":{"start":[260,1],"name":"src/Elm/String.purs","end":[261,1]}},{"children":[],"comments":"Determine whether *any* characters satisfy a predicate.\n\n    any isDigit \"90210\" == True\n    any isDigit \"R2-D2\" == True\n    any isDigit \"heart\" == False\n","title":"any","fixity":null,"info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Char"]}]},{"tag":"TypeConstructor","contents":[["Elm","Basics"],"Bool"]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeConstructor","contents":[["Elm","Basics"],"Bool"]}]}]}},"sourceSpan":{"start":[272,1],"name":"src/Elm/String.purs","end":[280,1]}},{"children":[],"comments":"Determine whether *all* characters satisfy a predicate.\n\n    all isDigit \"90210\" == True\n    all isDigit \"R2-D2\" == False\n    all isDigit \"heart\" == False\n","title":"all","fixity":null,"info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Char"]}]},{"tag":"TypeConstructor","contents":[["Elm","Basics"],"Bool"]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeConstructor","contents":[["Elm","Basics"],"Bool"]}]}]}},"sourceSpan":{"start":[280,1],"name":"src/Elm/String.purs","end":[287,1]}},{"children":[],"comments":"See if the second string starts with the first one.\n\n    startsWith \"the\" \"theory\" == True\n    startsWith \"ory\" \"theory\" == False\n","title":"startsWith","fixity":null,"info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeConstructor","contents":[["Elm","Basics"],"Bool"]}]}]}},"sourceSpan":{"start":[287,1],"name":"src/Elm/String.purs","end":[294,1]}},{"children":[],"comments":"See if the second string ends with the first one.\n\n    endsWith \"the\" \"theory\" == False\n    endsWith \"ory\" \"theory\" == True\n","title":"endsWith","fixity":null,"info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeConstructor","contents":[["Elm","Basics"],"Bool"]}]}]}},"sourceSpan":{"start":[294,1],"name":"src/Elm/String.purs","end":[302,1]}},{"children":[],"comments":"Get all of the indexes for a substring in another string.\n\n    indexes \"i\" \"Mississippi\"   == [1,4,7,10]\n    indexes \"ss\" \"Mississippi\"  == [2,5]\n    indexes \"needle\" \"haystack\" == []\n","title":"indexes","fixity":null,"info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","List"],"List"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}]}]}},"sourceSpan":{"start":[302,1],"name":"src/Elm/String.purs","end":[303,1]}},{"children":[],"comments":"Alias for `indexes`.\n","title":"indices","fixity":null,"info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","List"],"List"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}]}]}},"sourceSpan":{"start":[312,1],"name":"src/Elm/String.purs","end":[313,1]}},{"children":[],"comments":"Try to convert a string into an int, failing on improperly formatted strings.\n\n    toInt \"123\" == Ok 123\n    toInt \"-42\" == Ok -42\n    toInt \"3.1\" == Err \"could not convert string '3.1' to an Int\"\n    toInt \"31a\" == Err \"could not convert string '31a' to an Int\"\n","title":"toInt","fixity":null,"info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Elm","Result"],"Result"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}]}},"sourceSpan":{"start":[339,1],"name":"src/Elm/String.purs","end":[340,1]}},{"children":[],"comments":"Try to convert a string into a float, failing on improperly formatted strings.\n\n    toFloat \"123\" == Ok 123.0\n    toFloat \"-42\" == Ok -42.0\n    toFloat \"3.1\" == Ok 3.1\n    toFloat \"31a\" == Err \"could not convert string '31a' to a Float\"\n","title":"toFloat","fixity":null,"info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Elm","Result"],"Result"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeConstructor","contents":[["Elm","Basics"],"Float"]}]}]}},"sourceSpan":{"start":[349,1],"name":"src/Elm/String.purs","end":[350,1]}},{"children":[],"comments":"Convert a string to a list of characters.\n\n    toList \"abc\" == ['a','b','c']\n","title":"toList","fixity":null,"info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","List"],"List"]},{"tag":"TypeConstructor","contents":[["Prim"],"Char"]}]}]}},"sourceSpan":{"start":[356,1],"name":"src/Elm/String.purs","end":[357,1]}},{"children":[],"comments":"Convert a list of characters into a String. Can be useful if you\nwant to create a string primarily by consing, perhaps for decoding\nsomething.\n\n    fromList ['a','b','c'] == \"abc\"\n","title":"fromList","fixity":null,"info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","List"],"List"]},{"tag":"TypeConstructor","contents":[["Prim"],"Char"]}]}]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}},"sourceSpan":{"start":[365,1],"name":"src/Elm/String.purs","end":[366,1]}}]},{"reExports":[],"name":"Elm.Trampoline","comments":"A [trampoline](http://en.wikipedia.org/wiki/Tail-recursive_function#Through_trampolining)\nmakes it possible to recursively call a function without growing the stack.\n\nPopular JavaScript implementations do not perform any tail-call elimination, so\nrecursive functions can cause a stack overflow if they go too deep. Trampolines\npermit unbounded recursion despite limitations in JavaScript.\n\nThis strategy may create many intermediate closures, which is very expensive in\nJavaScript, so use this library only when it is essential that you recurse deeply.\n\nNote that in Purescript, there is tail-call elimination, so you may not need this if you\narrange your code to use tail-calls. If you do need a trampoline module, you could\nalso consider [Control.Monad.Trammpoline](https://pursuit.purescript.org/packages/purescript-free/0.9.1/docs/Control.Monad.Trampoline).\n","declarations":[{"children":[{"comments":null,"title":"Done","info":{"arguments":[{"tag":"TypeVar","contents":"a"}],"declType":"dataConstructor"},"sourceSpan":null},{"comments":null,"title":"Continue","info":{"arguments":[{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prelude"],"Unit"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Elm","Trampoline"],"Trampoline"]},{"tag":"TypeVar","contents":"a"}]}]}}],"declType":"dataConstructor"},"sourceSpan":null}],"comments":"A way to build computations that may be deeply recursive. We will take an\nexample of a tail-recursive function and rewrite it in a way that lets us use\na trampoline:\n\n    length :: List a -> Int\n    length list = length' 0 list\n\n    length' :: Int -> List a -> Int\n    length' accum list =\n        case list of\n          Nil        -> accum\n          Cons hd tl -> length' (accum + 1) tl\n\nThis finds the length of a list, but if the list is too long, it may cause a\nstack overflow. We can rewrite it as follows:\n\n    length :: List a -> Int\n    length list = trampoline (length' 0 list)\n\n    length' :: Int -> List a -> Trampoline Int\n    length' accum list =\n        case list of\n          Nil        -> Done accum\n          Cons hd tl -> Continue (\\() -> length' (accum + 1) tl)\n\nNow it uses a trampoline and can recurse without growing the stack!\n","title":"Trampoline","fixity":null,"info":{"declType":"data","dataDeclType":"data","typeArguments":[["a",null]]},"sourceSpan":{"start":[51,1],"name":"src/Elm/Trampoline.purs","end":[57,1]}},{"children":[],"comments":"Evaluate a trampolined value in constant space.\n","title":"trampoline","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Elm","Trampoline"],"Trampoline"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeVar","contents":"a"}]},null]}},"sourceSpan":{"start":[57,1],"name":"src/Elm/Trampoline.purs","end":[58,1]}}]}],"resolvedDependencies":{"purescript-proxy":"0.1.0","purescript-exceptions":"0.3.4","purescript-quickcheck-laws":"0.1.1","purescript-maps":"0.5.7","purescript-control":"0.3.2","purescript-console":"0.1.1","purescript-either":"0.2.3","purescript-profunctor":"0.3.2","purescript-arrays":"0.4.5","purescript-maybe":"0.3.5","purescript-distributive":"0.5.1","purescript-unfoldable":"0.4.1","purescript-invariant":"0.3.0","purescript-lazy":"0.4.1","purescript-monoid":"0.3.2","purescript-aff":"0.13.1","purescript-foldable-traversable":"0.4.2","purescript-debug":"0.1.3","purescript-tailrec":"0.3.1","purescript-sequences":"0.5.0","purescript-prelude":"0.1.5","purescript-st":"0.1.1","purescript-bifunctors":"0.4.0","purescript-generics":"0.7.2","purescript-unsafe-coerce":"0.1.0","purescript-integers":"0.2.1","purescript-eff":"0.1.2","purescript-test-unit":"4.1.0","purescript-orders":"0.1.1","purescript-transformers":"0.8.4","purescript-globals":"0.2.2","purescript-int-53":"1.0.0","purescript-math":"0.2.0","purescript-enums":"0.7.0","purescript-random":"0.2.3","purescript-tuples":"0.4.0","purescript-partial":"1.1.0","purescript-quickcheck":"0.12.2","purescript-strings":"0.7.1","purescript-identity":"0.4.1","purescript-foreign":"0.7.2","purescript-sets":"0.5.7","purescript-lists":"0.7.10","purescript-datetime":"0.9.2","purescript-functions":"0.1.0"},"bookmarks":[{"package":null,"item":["Elm.List","(:)"]},{"package":null,"item":["Elm.List","cons"]},{"package":null,"item":["Elm.List","isEmpty"]},{"package":null,"item":["Elm.List","member"]},{"package":null,"item":["Elm.List","indexedMap"]},{"package":null,"item":["Elm.List","scanl"]},{"package":null,"item":["Elm.List","filterMap"]},{"package":null,"item":["Elm.List","partition"]},{"package":null,"item":["Elm.List","map2"]},{"package":null,"item":["Elm.List","map3"]},{"package":null,"item":["Elm.List","map4"]},{"package":null,"item":["Elm.List","map5"]},{"package":null,"item":["Elm.List","unzip"]},{"package":null,"item":["Elm.List","intersperse"]},{"package":null,"item":["Elm.List","repeat"]},{"package":null,"item":["Elm.List","sortBy"]},{"package":null,"item":["Elm.List","sortWith"]},{"package":null,"item":["Elm.List","(..)"]},{"package":null,"item":["Elm.List","range"]},{"package":null,"item":["Elm.Debug","log"]},{"package":null,"item":["Elm.Debug","crash"]},{"package":null,"item":["Elm.Bitwise","and"]},{"package":null,"item":["Elm.Bitwise","or"]},{"package":null,"item":["Elm.Bitwise","xor"]},{"package":null,"item":["Elm.Bitwise","shiftLeft"]},{"package":null,"item":["Elm.Bitwise","shiftRight"]},{"package":null,"item":["Elm.Bitwise","shiftRightLogical"]},{"package":null,"item":["Elm.Array","initialize"]},{"package":null,"item":["Elm.Array","repeat"]},{"package":null,"item":["Elm.Array","fromList"]},{"package":null,"item":["Elm.Array","toList"]},{"package":null,"item":["Elm.Array","toIndexedList"]},{"package":null,"item":["Elm.Array","indexedMap"]},{"package":null,"item":["Elm.Array","push"]},{"package":null,"item":["Elm.Array","get"]},{"package":null,"item":["Elm.Array","set"]},{"package":null,"item":["Elm.Array","slice"]},{"package":null,"item":["Elm.Trampoline","Trampoline"]},{"package":null,"item":["Elm.Trampoline","trampoline"]},{"package":null,"item":["Elm.String","isEmpty"]},{"package":null,"item":["Elm.String","cons"]},{"package":null,"item":["Elm.String","concat"]},{"package":null,"item":["Elm.String","map"]},{"package":null,"item":["Elm.String","filter"]},{"package":null,"item":["Elm.String","reverse"]},{"package":null,"item":["Elm.String","foldl"]},{"package":null,"item":["Elm.String","foldr"]},{"package":null,"item":["Elm.String","split"]},{"package":null,"item":["Elm.String","join"]},{"package":null,"item":["Elm.String","repeat"]},{"package":null,"item":["Elm.String","slice"]},{"package":null,"item":["Elm.String","left"]},{"package":null,"item":["Elm.String","right"]},{"package":null,"item":["Elm.String","dropLeft"]},{"package":null,"item":["Elm.String","dropRight"]},{"package":null,"item":["Elm.String","pad"]},{"package":null,"item":["Elm.String","padLeft"]},{"package":null,"item":["Elm.String","padRight"]},{"package":null,"item":["Elm.String","trimLeft"]},{"package":null,"item":["Elm.String","trimRight"]},{"package":null,"item":["Elm.String","words"]},{"package":null,"item":["Elm.String","lines"]},{"package":null,"item":["Elm.String","any"]},{"package":null,"item":["Elm.String","all"]},{"package":null,"item":["Elm.String","startsWith"]},{"package":null,"item":["Elm.String","endsWith"]},{"package":null,"item":["Elm.String","indexes"]},{"package":null,"item":["Elm.String","indices"]},{"package":null,"item":["Elm.String","toInt"]},{"package":null,"item":["Elm.String","toFloat"]},{"package":null,"item":["Elm.String","toList"]},{"package":null,"item":["Elm.String","fromList"]},{"package":null,"item":["Elm.Maybe","withDefault"]},{"package":null,"item":["Elm.Maybe","oneOf"]},{"package":null,"item":["Elm.Apply","map2"]},{"package":null,"item":["Elm.Apply","map3"]},{"package":null,"item":["Elm.Apply","map4"]},{"package":null,"item":["Elm.Apply","map5"]},{"package":null,"item":["Elm.Apply","andMap"]},{"package":null,"item":["Elm.Set","remove"]},{"package":null,"item":["Elm.Set","intersect"]},{"package":null,"item":["Elm.Set","diff"]},{"package":null,"item":["Elm.Set","map"]},{"package":null,"item":["Elm.Set","filter"]},{"package":null,"item":["Elm.Set","partition"]},{"package":null,"item":["Elm.Result","Result"]},{"package":null,"item":["Elm.Result","withDefault"]},{"package":null,"item":["Elm.Result","withDefault"]},{"package":null,"item":["Elm.Result","formatError"]},{"package":null,"item":["Elm.Result","toMaybe"]},{"package":null,"item":["Elm.Result","toMaybe"]},{"package":null,"item":["Elm.Result","fromMaybe"]},{"package":null,"item":["Elm.Result","fromMaybe"]},{"package":null,"item":["Elm.Bind","andThen"]},{"package":null,"item":["Elm.Char","isUpper"]},{"package":null,"item":["Elm.Char","isLower"]},{"package":null,"item":["Elm.Char","isDigit"]},{"package":null,"item":["Elm.Char","isOctDigit"]},{"package":null,"item":["Elm.Char","isHexDigit"]},{"package":null,"item":["Elm.Char","toLocaleUpper"]},{"package":null,"item":["Elm.Char","toLocaleLower"]},{"package":null,"item":["Elm.Char","toCode"]},{"package":null,"item":["Elm.Char","fromCode"]},{"package":null,"item":["Elm.Foldable","foldl"]},{"package":null,"item":["Elm.Date","fromString"]},{"package":null,"item":["Elm.Date","toTime"]},{"package":null,"item":["Elm.Date","fromTime"]},{"package":null,"item":["Elm.Date","year"]},{"package":null,"item":["Elm.Date","month"]},{"package":null,"item":["Elm.Date","day"]},{"package":null,"item":["Elm.Date","dayOfWeek"]},{"package":null,"item":["Elm.Date","hour"]},{"package":null,"item":["Elm.Date","minute"]},{"package":null,"item":["Elm.Date","second"]},{"package":null,"item":["Elm.Date","millisecond"]},{"package":null,"item":["Elm.Dict","get"]},{"package":null,"item":["Elm.Dict","remove"]},{"package":null,"item":["Elm.Dict","update"]},{"package":null,"item":["Elm.Dict","intersect"]},{"package":null,"item":["Elm.Dict","diff"]},{"package":null,"item":["Elm.Dict","filter"]},{"package":null,"item":["Elm.Dict","partition"]},{"package":null,"item":["Elm.Dict","map"]},{"package":null,"item":["Elm.Dict","foldl"]},{"package":null,"item":["Elm.Dict","foldr"]},{"package":null,"item":["Elm.Dict","toUnfoldable"]},{"package":null,"item":["Elm.Regex","escape"]},{"package":null,"item":["Elm.Regex","regex"]},{"package":null,"item":["Elm.Regex","caseInsensitive"]},{"package":null,"item":["Elm.Regex","contains"]},{"package":null,"item":["Elm.Regex","HowMany"]},{"package":null,"item":["Elm.Regex","find"]},{"package":null,"item":["Elm.Regex","replace"]},{"package":null,"item":["Elm.Regex","split"]},{"package":null,"item":["Elm.Basics","radians"]},{"package":null,"item":["Elm.Basics","degrees"]},{"package":null,"item":["Elm.Basics","turns"]},{"package":null,"item":["Elm.Basics","fromPolar"]},{"package":null,"item":["Elm.Basics","toPolar"]},{"package":null,"item":["Elm.Basics","(//)"]},{"package":null,"item":["Elm.Basics","intDiv"]},{"package":null,"item":["Elm.Basics","rem"]},{"package":null,"item":["Elm.Basics","(%)"]},{"package":null,"item":["Elm.Basics","mod"]},{"package":null,"item":["Elm.Basics","Pow"]},{"package":null,"item":["Elm.Basics","(^)"]},{"package":null,"item":["Elm.Basics","abs"]},{"package":null,"item":["Elm.Basics","logBase"]},{"package":null,"item":["Elm.Basics","Order"]},{"package":null,"item":["Elm.Basics","xor"]},{"package":null,"item":["Elm.Basics","truncate"]},{"package":null,"item":["Elm.Basics","ceiling"]},{"package":null,"item":["Elm.Basics","toFloat"]},{"package":null,"item":["Elm.Basics","isInfinite"]},{"package":null,"item":["Elm.Basics","toString"]},{"package":null,"item":["Elm.Basics","(<<)"]},{"package":null,"item":["Elm.Basics","compose"]},{"package":null,"item":["Elm.Basics","(>>)"]},{"package":null,"item":["Elm.Basics","composeFlipped"]},{"package":null,"item":["Elm.Basics","(|>)"]},{"package":null,"item":["Elm.Basics","applyFnFlipped"]},{"package":null,"item":["Elm.Basics","(<|)"]},{"package":null,"item":["Elm.Basics","applyFn"]},{"package":null,"item":["Elm.Basics","identity"]},{"package":null,"item":["Elm.Basics","always"]},{"package":null,"item":["Elm.Random","bool"]},{"package":null,"item":["Elm.Random","int"]},{"package":null,"item":["Elm.Random","maxInt"]},{"package":null,"item":["Elm.Random","minInt"]},{"package":null,"item":["Elm.Random","float"]},{"package":null,"item":["Elm.Random","pair"]},{"package":null,"item":["Elm.Random","list"]},{"package":null,"item":["Elm.Random","Generator"]},{"package":null,"item":["Elm.Random","Seed"]},{"package":null,"item":["Elm.Random","generate"]},{"package":null,"item":["Elm.Random","initialSeed"]},{"package":null,"item":["Elm.Json.Decode","Decoder"]},{"package":null,"item":["Elm.Json.Decode","decodeString"]},{"package":null,"item":["Elm.Json.Decode","at"]},{"package":null,"item":["Elm.Json.Decode","field"]},{"package":null,"item":["Elm.Json.Decode","(:=)"]},{"package":null,"item":["Elm.Json.Decode","object1"]},{"package":null,"item":["Elm.Json.Decode","object2"]},{"package":null,"item":["Elm.Json.Decode","object3"]},{"package":null,"item":["Elm.Json.Decode","object4"]},{"package":null,"item":["Elm.Json.Decode","object5"]},{"package":null,"item":["Elm.Json.Decode","object6"]},{"package":null,"item":["Elm.Json.Decode","object7"]},{"package":null,"item":["Elm.Json.Decode","object8"]},{"package":null,"item":["Elm.Json.Decode","keyValuePairs"]},{"package":null,"item":["Elm.Json.Decode","dict"]},{"package":null,"item":["Elm.Json.Decode","oneOf"]},{"package":null,"item":["Elm.Json.Decode","extractForeign"]},{"package":null,"item":["Elm.Json.Decode","string"]},{"package":null,"item":["Elm.Json.Decode","float"]},{"package":null,"item":["Elm.Json.Decode","int"]},{"package":null,"item":["Elm.Json.Decode","bool"]},{"package":null,"item":["Elm.Json.Decode","list"]},{"package":null,"item":["Elm.Json.Decode","array"]},{"package":null,"item":["Elm.Json.Decode","unfoldable"]},{"package":null,"item":["Elm.Json.Decode","null"]},{"package":null,"item":["Elm.Json.Decode","maybe"]},{"package":null,"item":["Elm.Json.Decode","value"]},{"package":null,"item":["Elm.Json.Decode","decodeValue"]},{"package":null,"item":["Elm.Json.Decode","customDecoder"]},{"package":null,"item":["Elm.Json.Decode","fail"]},{"package":null,"item":["Elm.Json.Decode","succeed"]},{"package":null,"item":["Elm.Json.Decode","tuple1"]},{"package":null,"item":["Elm.Json.Decode","tuple2"]},{"package":null,"item":["Elm.Json.Decode","tuple3"]},{"package":null,"item":["Elm.Json.Decode","tuple4"]},{"package":null,"item":["Elm.Json.Decode","tuple5"]},{"package":null,"item":["Elm.Json.Decode","tuple6"]},{"package":null,"item":["Elm.Json.Decode","tuple7"]},{"package":null,"item":["Elm.Json.Decode","tuple8"]},{"package":null,"item":["Elm.Json.Encode","encode"]},{"package":null,"item":["Elm.Json.Encode","string"]},{"package":null,"item":["Elm.Json.Encode","int"]},{"package":null,"item":["Elm.Json.Encode","float"]},{"package":null,"item":["Elm.Json.Encode","bool"]},{"package":null,"item":["Elm.Json.Encode","null"]},{"package":null,"item":["Elm.Json.Encode","object"]},{"package":null,"item":["Elm.Json.Encode","array"]},{"package":null,"item":["Elm.Json.Encode","list"]},{"package":"purescript-aff","item":["Control.Monad.Aff","Aff"]},{"package":"purescript-aff","item":["Control.Monad.Aff","PureAff"]},{"package":"purescript-aff","item":["Control.Monad.Aff","Canceler"]},{"package":"purescript-aff","item":["Control.Monad.Aff","cancel"]},{"package":"purescript-aff","item":["Control.Monad.Aff","cancelWith"]},{"package":"purescript-aff","item":["Control.Monad.Aff","launchAff"]},{"package":"purescript-aff","item":["Control.Monad.Aff","runAff"]},{"package":"purescript-aff","item":["Control.Monad.Aff","makeAff"]},{"package":"purescript-aff","item":["Control.Monad.Aff","makeAff'"]},{"package":"purescript-aff","item":["Control.Monad.Aff","later"]},{"package":"purescript-aff","item":["Control.Monad.Aff","later'"]},{"package":"purescript-aff","item":["Control.Monad.Aff","finally"]},{"package":"purescript-aff","item":["Control.Monad.Aff","forkAff"]},{"package":"purescript-aff","item":["Control.Monad.Aff","attempt"]},{"package":"purescript-aff","item":["Control.Monad.Aff","apathize"]},{"package":"purescript-aff","item":["Control.Monad.Aff","liftEff'"]},{"package":"purescript-aff","item":["Control.Monad.Aff","nonCanceler"]},{"package":"purescript-aff","item":["Control.Monad.Aff.Unsafe","unsafeTrace"]},{"package":"purescript-aff","item":["Control.Monad.Aff.Unsafe","unsafeInterleaveAff"]},{"package":"purescript-aff","item":["Control.Monad.Aff.AVar","AVAR"]},{"package":"purescript-aff","item":["Control.Monad.Aff.AVar","AVar"]},{"package":"purescript-aff","item":["Control.Monad.Aff.AVar","AffAVar"]},{"package":"purescript-aff","item":["Control.Monad.Aff.AVar","makeVar"]},{"package":"purescript-aff","item":["Control.Monad.Aff.AVar","makeVar'"]},{"package":"purescript-aff","item":["Control.Monad.Aff.AVar","takeVar"]},{"package":"purescript-aff","item":["Control.Monad.Aff.AVar","putVar"]},{"package":"purescript-aff","item":["Control.Monad.Aff.AVar","modifyVar"]},{"package":"purescript-aff","item":["Control.Monad.Aff.AVar","killVar"]},{"package":"purescript-aff","item":["Control.Monad.Aff.Class","MonadAff"]},{"package":"purescript-aff","item":["Control.Monad.Aff.Class","monadAffAff"]},{"package":"purescript-aff","item":["Control.Monad.Aff.Class","monadAffContT"]},{"package":"purescript-aff","item":["Control.Monad.Aff.Class","monadAffExceptT"]},{"package":"purescript-aff","item":["Control.Monad.Aff.Class","monadAffListT"]},{"package":"purescript-aff","item":["Control.Monad.Aff.Class","monadAffMaybe"]},{"package":"purescript-aff","item":["Control.Monad.Aff.Class","monadAffReader"]},{"package":"purescript-aff","item":["Control.Monad.Aff.Class","monadAffRWS"]},{"package":"purescript-aff","item":["Control.Monad.Aff.Class","monadAffState"]},{"package":"purescript-aff","item":["Control.Monad.Aff.Class","monadAffWriter"]},{"package":"purescript-aff","item":["Control.Monad.Aff.Console","log"]},{"package":"purescript-aff","item":["Control.Monad.Aff.Console","print"]},{"package":"purescript-aff","item":["Control.Monad.Aff.Par","Par"]},{"package":"purescript-aff","item":["Control.Monad.Aff.Par","runPar"]},{"package":"purescript-prelude","item":["Prelude","Unit"]},{"package":"purescript-prelude","item":["Prelude","unit"]},{"package":"purescript-prelude","item":["Prelude","($)"]},{"package":"purescript-prelude","item":["Prelude","(#)"]},{"package":"purescript-prelude","item":["Prelude","flip"]},{"package":"purescript-prelude","item":["Prelude","const"]},{"package":"purescript-prelude","item":["Prelude","asTypeOf"]},{"package":"purescript-prelude","item":["Prelude","otherwise"]},{"package":"purescript-prelude","item":["Prelude","Semigroupoid"]},{"package":"purescript-prelude","item":["Prelude","(<<<)"]},{"package":"purescript-prelude","item":["Prelude","(>>>)"]},{"package":"purescript-prelude","item":["Prelude","Category"]},{"package":"purescript-prelude","item":["Prelude","Functor"]},{"package":"purescript-prelude","item":["Prelude","(<$>)"]},{"package":"purescript-prelude","item":["Prelude","(<#>)"]},{"package":"purescript-prelude","item":["Prelude","void"]},{"package":"purescript-prelude","item":["Prelude","Apply"]},{"package":"purescript-prelude","item":["Prelude","(<*>)"]},{"package":"purescript-prelude","item":["Prelude","Applicative"]},{"package":"purescript-prelude","item":["Prelude","return"]},{"package":"purescript-prelude","item":["Prelude","liftA1"]},{"package":"purescript-prelude","item":["Prelude","Bind"]},{"package":"purescript-prelude","item":["Prelude","(>>=)"]},{"package":"purescript-prelude","item":["Prelude","Monad"]},{"package":"purescript-prelude","item":["Prelude","liftM1"]},{"package":"purescript-prelude","item":["Prelude","ap"]},{"package":"purescript-prelude","item":["Prelude","Semigroup"]},{"package":"purescript-prelude","item":["Prelude","(<>)"]},{"package":"purescript-prelude","item":["Prelude","(++)"]},{"package":"purescript-prelude","item":["Prelude","Semiring"]},{"package":"purescript-prelude","item":["Prelude","(+)"]},{"package":"purescript-prelude","item":["Prelude","(*)"]},{"package":"purescript-prelude","item":["Prelude","Ring"]},{"package":"purescript-prelude","item":["Prelude","(-)"]},{"package":"purescript-prelude","item":["Prelude","negate"]},{"package":"purescript-prelude","item":["Prelude","ModuloSemiring"]},{"package":"purescript-prelude","item":["Prelude","(/)"]},{"package":"purescript-prelude","item":["Prelude","DivisionRing"]},{"package":"purescript-prelude","item":["Prelude","Num"]},{"package":"purescript-prelude","item":["Prelude","Eq"]},{"package":"purescript-prelude","item":["Prelude","(==)"]},{"package":"purescript-prelude","item":["Prelude","(/=)"]},{"package":"purescript-prelude","item":["Prelude","Ordering"]},{"package":"purescript-prelude","item":["Prelude","Ord"]},{"package":"purescript-prelude","item":["Prelude","(<)"]},{"package":"purescript-prelude","item":["Prelude","(>)"]},{"package":"purescript-prelude","item":["Prelude","(<=)"]},{"package":"purescript-prelude","item":["Prelude","(>=)"]},{"package":"purescript-prelude","item":["Prelude","unsafeCompare"]},{"package":"purescript-prelude","item":["Prelude","Bounded"]},{"package":"purescript-prelude","item":["Prelude","BoundedOrd"]},{"package":"purescript-prelude","item":["Prelude","BooleanAlgebra"]},{"package":"purescript-prelude","item":["Prelude","(&&)"]},{"package":"purescript-prelude","item":["Prelude","(||)"]},{"package":"purescript-prelude","item":["Prelude","Show"]},{"package":"purescript-unsafe-coerce","item":["Unsafe.Coerce","unsafeCoerce"]},{"package":"purescript-sets","item":["Data.Set","Set"]},{"package":"purescript-sets","item":["Data.Set","empty"]},{"package":"purescript-sets","item":["Data.Set","isEmpty"]},{"package":"purescript-sets","item":["Data.Set","singleton"]},{"package":"purescript-sets","item":["Data.Set","checkValid"]},{"package":"purescript-sets","item":["Data.Set","member"]},{"package":"purescript-sets","item":["Data.Set","insert"]},{"package":"purescript-sets","item":["Data.Set","delete"]},{"package":"purescript-sets","item":["Data.Set","fromFoldable"]},{"package":"purescript-sets","item":["Data.Set","toList"]},{"package":"purescript-sets","item":["Data.Set","fromList"]},{"package":"purescript-sets","item":["Data.Set","size"]},{"package":"purescript-sets","item":["Data.Set","union"]},{"package":"purescript-sets","item":["Data.Set","unions"]},{"package":"purescript-sets","item":["Data.Set","difference"]},{"package":"purescript-sets","item":["Data.Set","subset"]},{"package":"purescript-sets","item":["Data.Set","properSubset"]},{"package":"purescript-sets","item":["Data.Set","intersection"]},{"package":"purescript-either","item":["Data.Either","Either"]},{"package":"purescript-either","item":["Data.Either","either"]},{"package":"purescript-either","item":["Data.Either","either"]},{"package":"purescript-either","item":["Data.Either","isLeft"]},{"package":"purescript-either","item":["Data.Either","isRight"]},{"package":"purescript-either","item":["Data.Either","functorEither"]},{"package":"purescript-either","item":["Data.Either","bifunctorEither"]},{"package":"purescript-either","item":["Data.Either","applyEither"]},{"package":"purescript-either","item":["Data.Either","applicativeEither"]},{"package":"purescript-either","item":["Data.Either","altEither"]},{"package":"purescript-either","item":["Data.Either","bindEither"]},{"package":"purescript-either","item":["Data.Either","monadEither"]},{"package":"purescript-either","item":["Data.Either","extendEither"]},{"package":"purescript-either","item":["Data.Either","showEither"]},{"package":"purescript-either","item":["Data.Either","eqEither"]},{"package":"purescript-either","item":["Data.Either","ordEither"]},{"package":"purescript-either","item":["Data.Either","boundedEither"]},{"package":"purescript-either","item":["Data.Either","foldableEither"]},{"package":"purescript-either","item":["Data.Either","bifoldableEither"]},{"package":"purescript-either","item":["Data.Either","traversableEither"]},{"package":"purescript-either","item":["Data.Either","bitraversableEither"]},{"package":"purescript-either","item":["Data.Either","semiringEither"]},{"package":"purescript-either","item":["Data.Either","semigroupEither"]},{"package":"purescript-either","item":["Data.Either.Unsafe","fromLeft"]},{"package":"purescript-either","item":["Data.Either.Unsafe","fromLeft"]},{"package":"purescript-either","item":["Data.Either.Unsafe","fromRight"]},{"package":"purescript-either","item":["Data.Either.Unsafe","fromRight"]},{"package":"purescript-either","item":["Data.Either.Nested","Either2"]},{"package":"purescript-either","item":["Data.Either.Nested","Either3"]},{"package":"purescript-either","item":["Data.Either.Nested","Either4"]},{"package":"purescript-either","item":["Data.Either.Nested","Either5"]},{"package":"purescript-either","item":["Data.Either.Nested","Either6"]},{"package":"purescript-either","item":["Data.Either.Nested","Either7"]},{"package":"purescript-either","item":["Data.Either.Nested","Either8"]},{"package":"purescript-either","item":["Data.Either.Nested","Either9"]},{"package":"purescript-either","item":["Data.Either.Nested","Either10"]},{"package":"purescript-either","item":["Data.Either.Nested","either1of2"]},{"package":"purescript-either","item":["Data.Either.Nested","either2of2"]},{"package":"purescript-either","item":["Data.Either.Nested","either1of3"]},{"package":"purescript-either","item":["Data.Either.Nested","either2of3"]},{"package":"purescript-either","item":["Data.Either.Nested","either3of3"]},{"package":"purescript-either","item":["Data.Either.Nested","either1of4"]},{"package":"purescript-either","item":["Data.Either.Nested","either2of4"]},{"package":"purescript-either","item":["Data.Either.Nested","either3of4"]},{"package":"purescript-either","item":["Data.Either.Nested","either4of4"]},{"package":"purescript-either","item":["Data.Either.Nested","either1of5"]},{"package":"purescript-either","item":["Data.Either.Nested","either2of5"]},{"package":"purescript-either","item":["Data.Either.Nested","either3of5"]},{"package":"purescript-either","item":["Data.Either.Nested","either4of5"]},{"package":"purescript-either","item":["Data.Either.Nested","either5of5"]},{"package":"purescript-either","item":["Data.Either.Nested","either1of6"]},{"package":"purescript-either","item":["Data.Either.Nested","either2of6"]},{"package":"purescript-either","item":["Data.Either.Nested","either3of6"]},{"package":"purescript-either","item":["Data.Either.Nested","either4of6"]},{"package":"purescript-either","item":["Data.Either.Nested","either5of6"]},{"package":"purescript-either","item":["Data.Either.Nested","either6of6"]},{"package":"purescript-either","item":["Data.Either.Nested","either1of7"]},{"package":"purescript-either","item":["Data.Either.Nested","either2of7"]},{"package":"purescript-either","item":["Data.Either.Nested","either3of7"]},{"package":"purescript-either","item":["Data.Either.Nested","either4of7"]},{"package":"purescript-either","item":["Data.Either.Nested","either5of7"]},{"package":"purescript-either","item":["Data.Either.Nested","either6of7"]},{"package":"purescript-either","item":["Data.Either.Nested","either7of7"]},{"package":"purescript-either","item":["Data.Either.Nested","either1of8"]},{"package":"purescript-either","item":["Data.Either.Nested","either2of8"]},{"package":"purescript-either","item":["Data.Either.Nested","either3of8"]},{"package":"purescript-either","item":["Data.Either.Nested","either4of8"]},{"package":"purescript-either","item":["Data.Either.Nested","either5of8"]},{"package":"purescript-either","item":["Data.Either.Nested","either6of8"]},{"package":"purescript-either","item":["Data.Either.Nested","either7of8"]},{"package":"purescript-either","item":["Data.Either.Nested","either8of8"]},{"package":"purescript-either","item":["Data.Either.Nested","either1of9"]},{"package":"purescript-either","item":["Data.Either.Nested","either2of9"]},{"package":"purescript-either","item":["Data.Either.Nested","either3of9"]},{"package":"purescript-either","item":["Data.Either.Nested","either4of9"]},{"package":"purescript-either","item":["Data.Either.Nested","either5of9"]},{"package":"purescript-either","item":["Data.Either.Nested","either6of9"]},{"package":"purescript-either","item":["Data.Either.Nested","either7of9"]},{"package":"purescript-either","item":["Data.Either.Nested","either8of9"]},{"package":"purescript-either","item":["Data.Either.Nested","either9of9"]},{"package":"purescript-either","item":["Data.Either.Nested","either1of10"]},{"package":"purescript-either","item":["Data.Either.Nested","either2of10"]},{"package":"purescript-either","item":["Data.Either.Nested","either3of10"]},{"package":"purescript-either","item":["Data.Either.Nested","either4of10"]},{"package":"purescript-either","item":["Data.Either.Nested","either5of10"]},{"package":"purescript-either","item":["Data.Either.Nested","either6of10"]},{"package":"purescript-either","item":["Data.Either.Nested","either7of10"]},{"package":"purescript-either","item":["Data.Either.Nested","either8of10"]},{"package":"purescript-either","item":["Data.Either.Nested","either9of10"]},{"package":"purescript-either","item":["Data.Either.Nested","either10of10"]},{"package":"purescript-either","item":["Data.Either.Nested","either2"]},{"package":"purescript-either","item":["Data.Either.Nested","either3"]},{"package":"purescript-either","item":["Data.Either.Nested","either4"]},{"package":"purescript-either","item":["Data.Either.Nested","either5"]},{"package":"purescript-either","item":["Data.Either.Nested","either6"]},{"package":"purescript-either","item":["Data.Either.Nested","either7"]},{"package":"purescript-either","item":["Data.Either.Nested","either8"]},{"package":"purescript-either","item":["Data.Either.Nested","either9"]},{"package":"purescript-either","item":["Data.Either.Nested","either10"]},{"package":"purescript-integers","item":["Data.Int","fromNumber"]},{"package":"purescript-integers","item":["Data.Int","floor"]},{"package":"purescript-integers","item":["Data.Int","ceil"]},{"package":"purescript-integers","item":["Data.Int","round"]},{"package":"purescript-integers","item":["Data.Int","toNumber"]},{"package":"purescript-integers","item":["Data.Int","fromString"]},{"package":"purescript-integers","item":["Data.Int","even"]},{"package":"purescript-integers","item":["Data.Int","odd"]},{"package":"purescript-integers","item":["Data.Int.Bits","(.&.)"]},{"package":"purescript-integers","item":["Data.Int.Bits","(.|.)"]},{"package":"purescript-integers","item":["Data.Int.Bits","(.^.)"]},{"package":"purescript-integers","item":["Data.Int.Bits","shl"]},{"package":"purescript-integers","item":["Data.Int.Bits","shr"]},{"package":"purescript-integers","item":["Data.Int.Bits","zshr"]},{"package":"purescript-integers","item":["Data.Int.Bits","complement"]},{"package":"purescript-st","item":["Control.Monad.ST","ST"]},{"package":"purescript-st","item":["Control.Monad.ST","STRef"]},{"package":"purescript-st","item":["Control.Monad.ST","newSTRef"]},{"package":"purescript-st","item":["Control.Monad.ST","readSTRef"]},{"package":"purescript-st","item":["Control.Monad.ST","modifySTRef"]},{"package":"purescript-st","item":["Control.Monad.ST","writeSTRef"]},{"package":"purescript-st","item":["Control.Monad.ST","runST"]},{"package":"purescript-st","item":["Control.Monad.ST","pureST"]},{"package":"purescript-exceptions","item":["Control.Monad.Eff.Exception","EXCEPTION"]},{"package":"purescript-exceptions","item":["Control.Monad.Eff.Exception","Error"]},{"package":"purescript-exceptions","item":["Control.Monad.Eff.Exception","error"]},{"package":"purescript-exceptions","item":["Control.Monad.Eff.Exception","message"]},{"package":"purescript-exceptions","item":["Control.Monad.Eff.Exception","stack"]},{"package":"purescript-exceptions","item":["Control.Monad.Eff.Exception","throwException"]},{"package":"purescript-exceptions","item":["Control.Monad.Eff.Exception","catchException"]},{"package":"purescript-exceptions","item":["Control.Monad.Eff.Exception","throw"]},{"package":"purescript-exceptions","item":["Control.Monad.Eff.Exception.Unsafe","unsafeThrowException"]},{"package":"purescript-exceptions","item":["Control.Monad.Eff.Exception.Unsafe","unsafeThrow"]},{"package":"purescript-profunctor","item":["Data.Profunctor","Profunctor"]},{"package":"purescript-profunctor","item":["Data.Profunctor","lmap"]},{"package":"purescript-profunctor","item":["Data.Profunctor","rmap"]},{"package":"purescript-profunctor","item":["Data.Profunctor","arr"]},{"package":"purescript-profunctor","item":["Data.Profunctor","profunctorFn"]},{"package":"purescript-profunctor","item":["Data.Profunctor.Closed","Closed"]},{"package":"purescript-profunctor","item":["Data.Profunctor.Closed","closedFunction"]},{"package":"purescript-profunctor","item":["Data.Profunctor.Choice","Choice"]},{"package":"purescript-profunctor","item":["Data.Profunctor.Choice","choiceFn"]},{"package":"purescript-profunctor","item":["Data.Profunctor.Choice","(+++)"]},{"package":"purescript-profunctor","item":["Data.Profunctor.Choice","(|||)"]},{"package":"purescript-profunctor","item":["Data.Profunctor.Choice","(+++)"]},{"package":"purescript-profunctor","item":["Data.Profunctor.Choice","(|||)"]},{"package":"purescript-profunctor","item":["Data.Profunctor.Star","Star"]},{"package":"purescript-profunctor","item":["Data.Profunctor.Star","runStar"]},{"package":"purescript-profunctor","item":["Data.Profunctor.Star","profunctorStar"]},{"package":"purescript-profunctor","item":["Data.Profunctor.Star","strongStar"]},{"package":"purescript-profunctor","item":["Data.Profunctor.Star","choiceStar"]},{"package":"purescript-profunctor","item":["Data.Profunctor.Strong","Strong"]},{"package":"purescript-profunctor","item":["Data.Profunctor.Strong","strongFn"]},{"package":"purescript-profunctor","item":["Data.Profunctor.Strong","(***)"]},{"package":"purescript-profunctor","item":["Data.Profunctor.Strong","(&&&)"]},{"package":"purescript-profunctor","item":["Data.Profunctor.Strong","(***)"]},{"package":"purescript-profunctor","item":["Data.Profunctor.Strong","(&&&)"]},{"package":"purescript-profunctor","item":["Data.Profunctor.Cochoice","Cochoice"]},{"package":"purescript-profunctor","item":["Data.Profunctor.Costrong","Costrong"]},{"package":"purescript-console","item":["Control.Monad.Eff.Console","CONSOLE"]},{"package":"purescript-console","item":["Control.Monad.Eff.Console","log"]},{"package":"purescript-console","item":["Control.Monad.Eff.Console","error"]},{"package":"purescript-console","item":["Control.Monad.Eff.Console","print"]},{"package":"purescript-console","item":["Control.Monad.Eff.Console.Unsafe","logAny"]},{"package":"purescript-console","item":["Control.Monad.Eff.Console.Unsafe","errorAny"]},{"package":"purescript-invariant","item":["Data.Functor.Invariant","Invariant"]},{"package":"purescript-invariant","item":["Data.Functor.Invariant","imapF"]},{"package":"purescript-invariant","item":["Data.Functor.Invariant","invariantFn"]},{"package":"purescript-invariant","item":["Data.Functor.Invariant","invariantArray"]},{"package":"purescript-foreign","item":["Data.Foreign","Foreign"]},{"package":"purescript-foreign","item":["Data.Foreign","ForeignError"]},{"package":"purescript-foreign","item":["Data.Foreign","F"]},{"package":"purescript-foreign","item":["Data.Foreign","parseJSON"]},{"package":"purescript-foreign","item":["Data.Foreign","toForeign"]},{"package":"purescript-foreign","item":["Data.Foreign","unsafeFromForeign"]},{"package":"purescript-foreign","item":["Data.Foreign","typeOf"]},{"package":"purescript-foreign","item":["Data.Foreign","tagOf"]},{"package":"purescript-foreign","item":["Data.Foreign","unsafeReadTagged"]},{"package":"purescript-foreign","item":["Data.Foreign","unsafeReadTagged"]},{"package":"purescript-foreign","item":["Data.Foreign","isNull"]},{"package":"purescript-foreign","item":["Data.Foreign","isUndefined"]},{"package":"purescript-foreign","item":["Data.Foreign","isArray"]},{"package":"purescript-foreign","item":["Data.Foreign","readString"]},{"package":"purescript-foreign","item":["Data.Foreign","readChar"]},{"package":"purescript-foreign","item":["Data.Foreign","readBoolean"]},{"package":"purescript-foreign","item":["Data.Foreign","readNumber"]},{"package":"purescript-foreign","item":["Data.Foreign","readInt"]},{"package":"purescript-foreign","item":["Data.Foreign","readArray"]},{"package":"purescript-foreign","item":["Data.Foreign","readArray"]},{"package":"purescript-foreign","item":["Data.Foreign.Keys","keys"]},{"package":"purescript-foreign","item":["Data.Foreign.Keys","keys"]},{"package":"purescript-foreign","item":["Data.Foreign.Keys","keys"]},{"package":"purescript-foreign","item":["Data.Foreign.Keys","keys"]},{"package":"purescript-foreign","item":["Data.Foreign.Index","Index"]},{"package":"purescript-foreign","item":["Data.Foreign.Index","(!)"]},{"package":"purescript-foreign","item":["Data.Foreign.Index","prop"]},{"package":"purescript-foreign","item":["Data.Foreign.Index","index"]},{"package":"purescript-foreign","item":["Data.Foreign.Class","IsForeign"]},{"package":"purescript-foreign","item":["Data.Foreign.Class","readJSON"]},{"package":"purescript-foreign","item":["Data.Foreign.Class","readWith"]},{"package":"purescript-foreign","item":["Data.Foreign.Class","readProp"]},{"package":"purescript-foreign","item":["Data.Foreign.NullOrUndefined","NullOrUndefined"]},{"package":"purescript-foreign","item":["Data.Foreign.NullOrUndefined","runNullOrUndefined"]},{"package":"purescript-foreign","item":["Data.Foreign.NullOrUndefined","readNullOrUndefined"]},{"package":"purescript-foreign","item":["Data.Foreign.NullOrUndefined","readNullOrUndefined"]},{"package":"purescript-foreign","item":["Data.Foreign.Undefined","Undefined"]},{"package":"purescript-foreign","item":["Data.Foreign.Undefined","runUndefined"]},{"package":"purescript-foreign","item":["Data.Foreign.Undefined","readUndefined"]},{"package":"purescript-foreign","item":["Data.Foreign.Undefined","readUndefined"]},{"package":"purescript-foreign","item":["Data.Foreign.Null","Null"]},{"package":"purescript-foreign","item":["Data.Foreign.Null","runNull"]},{"package":"purescript-foreign","item":["Data.Foreign.Null","readNull"]},{"package":"purescript-foreign","item":["Data.Foreign.Null","readNull"]},{"package":"purescript-int-53","item":["Data.Int53","Int53"]},{"package":"purescript-int-53","item":["Data.Int53","truncate"]},{"package":"purescript-int-53","item":["Data.Int53","floor"]},{"package":"purescript-int-53","item":["Data.Int53","ceil"]},{"package":"purescript-int-53","item":["Data.Int53","round"]},{"package":"purescript-int-53","item":["Data.Int53","fromNumber"]},{"package":"purescript-int-53","item":["Data.Int53","toNumber"]},{"package":"purescript-int-53","item":["Data.Int53","fromString"]},{"package":"purescript-int-53","item":["Data.Int53","toString"]},{"package":"purescript-int-53","item":["Data.Int53","fromInt"]},{"package":"purescript-int-53","item":["Data.Int53","toInt"]},{"package":"purescript-int-53","item":["Data.Int53","even"]},{"package":"purescript-int-53","item":["Data.Int53","odd"]},{"package":"purescript-int-53","item":["Data.Int53","Int53Value"]},{"package":"purescript-partial","item":["Partial.Unsafe","unsafePartial"]},{"package":"purescript-partial","item":["Partial.Unsafe","unsafeCrashWith"]},{"package":"purescript-partial","item":["Partial","crash"]},{"package":"purescript-partial","item":["Partial","crashWith"]},{"package":"purescript-eff","item":["Control.Monad.Eff","Eff"]},{"package":"purescript-eff","item":["Control.Monad.Eff","Pure"]},{"package":"purescript-eff","item":["Control.Monad.Eff","runPure"]},{"package":"purescript-eff","item":["Control.Monad.Eff","untilE"]},{"package":"purescript-eff","item":["Control.Monad.Eff","whileE"]},{"package":"purescript-eff","item":["Control.Monad.Eff","forE"]},{"package":"purescript-eff","item":["Control.Monad.Eff","foreachE"]},{"package":"purescript-eff","item":["Control.Monad.Eff.Unsafe","unsafeInterleaveEff"]},{"package":"purescript-eff","item":["Control.Monad.Eff.Unsafe","unsafePerformEff"]},{"package":"purescript-eff","item":["Control.Monad.Eff.Class","MonadEff"]},{"package":"purescript-generics","item":["Data.Generic","GenericSpine"]},{"package":"purescript-generics","item":["Data.Generic","DataConstructor"]},{"package":"purescript-generics","item":["Data.Generic","GenericSignature"]},{"package":"purescript-generics","item":["Data.Generic","showSignature"]},{"package":"purescript-generics","item":["Data.Generic","showDataConstructor"]},{"package":"purescript-generics","item":["Data.Generic","Generic"]},{"package":"purescript-generics","item":["Data.Generic","isValidSpine"]},{"package":"purescript-generics","item":["Data.Generic","isValidSpine"]},{"package":"purescript-generics","item":["Data.Generic","isValidSpine"]},{"package":"purescript-generics","item":["Data.Generic","isValidSpine"]},{"package":"purescript-generics","item":["Data.Generic","isValidSpine"]},{"package":"purescript-generics","item":["Data.Generic","isValidSpine"]},{"package":"purescript-generics","item":["Data.Generic","isValidSpine"]},{"package":"purescript-generics","item":["Data.Generic","isValidSpine"]},{"package":"purescript-generics","item":["Data.Generic","isValidSpine"]},{"package":"purescript-generics","item":["Data.Generic","gShow"]},{"package":"purescript-generics","item":["Data.Generic","gEq"]},{"package":"purescript-generics","item":["Data.Generic","gCompare"]},{"package":"purescript-identity","item":["Data.Identity","Identity"]},{"package":"purescript-identity","item":["Data.Identity","runIdentity"]},{"package":"purescript-identity","item":["Data.Identity","eqIdentity"]},{"package":"purescript-identity","item":["Data.Identity","ordIdentity"]},{"package":"purescript-identity","item":["Data.Identity","boundedIdentity"]},{"package":"purescript-identity","item":["Data.Identity","boundedOrdIdentity"]},{"package":"purescript-identity","item":["Data.Identity","booleanAlgebraIdentity"]},{"package":"purescript-identity","item":["Data.Identity","semigroupIdenity"]},{"package":"purescript-identity","item":["Data.Identity","monoidIdentity"]},{"package":"purescript-identity","item":["Data.Identity","semiringIdentity"]},{"package":"purescript-identity","item":["Data.Identity","moduloSemiringIdentity"]},{"package":"purescript-identity","item":["Data.Identity","ringIdentity"]},{"package":"purescript-identity","item":["Data.Identity","divisionRingIdentity"]},{"package":"purescript-identity","item":["Data.Identity","numIdentity"]},{"package":"purescript-identity","item":["Data.Identity","showIdentity"]},{"package":"purescript-identity","item":["Data.Identity","functorIdentity"]},{"package":"purescript-identity","item":["Data.Identity","invariantIdentity"]},{"package":"purescript-identity","item":["Data.Identity","applyIdentity"]},{"package":"purescript-identity","item":["Data.Identity","applicativeIdentity"]},{"package":"purescript-identity","item":["Data.Identity","bindIdentity"]},{"package":"purescript-identity","item":["Data.Identity","monadIdentity"]},{"package":"purescript-identity","item":["Data.Identity","extendIdentity"]},{"package":"purescript-identity","item":["Data.Identity","comonadIdentity"]},{"package":"purescript-identity","item":["Data.Identity","foldableIdentity"]},{"package":"purescript-identity","item":["Data.Identity","traversableIdentity"]},{"package":"purescript-quickcheck-laws","item":["Test.QuickCheck.Laws","A"]},{"package":"purescript-quickcheck-laws","item":["Test.QuickCheck.Laws","eqA"]},{"package":"purescript-quickcheck-laws","item":["Test.QuickCheck.Laws","ordA"]},{"package":"purescript-quickcheck-laws","item":["Test.QuickCheck.Laws","boundedA"]},{"package":"purescript-quickcheck-laws","item":["Test.QuickCheck.Laws","boundedOrdA"]},{"package":"purescript-quickcheck-laws","item":["Test.QuickCheck.Laws","semigroupA"]},{"package":"purescript-quickcheck-laws","item":["Test.QuickCheck.Laws","monoidA"]},{"package":"purescript-quickcheck-laws","item":["Test.QuickCheck.Laws","arbitraryA"]},{"package":"purescript-quickcheck-laws","item":["Test.QuickCheck.Laws","coarbitraryA"]},{"package":"purescript-quickcheck-laws","item":["Test.QuickCheck.Laws","B"]},{"package":"purescript-quickcheck-laws","item":["Test.QuickCheck.Laws","eqB"]},{"package":"purescript-quickcheck-laws","item":["Test.QuickCheck.Laws","ordB"]},{"package":"purescript-quickcheck-laws","item":["Test.QuickCheck.Laws","boundedB"]},{"package":"purescript-quickcheck-laws","item":["Test.QuickCheck.Laws","boundedOrdB"]},{"package":"purescript-quickcheck-laws","item":["Test.QuickCheck.Laws","semigroupB"]},{"package":"purescript-quickcheck-laws","item":["Test.QuickCheck.Laws","monoidB"]},{"package":"purescript-quickcheck-laws","item":["Test.QuickCheck.Laws","arbitraryB"]},{"package":"purescript-quickcheck-laws","item":["Test.QuickCheck.Laws","coarbitraryB"]},{"package":"purescript-quickcheck-laws","item":["Test.QuickCheck.Laws","C"]},{"package":"purescript-quickcheck-laws","item":["Test.QuickCheck.Laws","eqC"]},{"package":"purescript-quickcheck-laws","item":["Test.QuickCheck.Laws","ordC"]},{"package":"purescript-quickcheck-laws","item":["Test.QuickCheck.Laws","boundedC"]},{"package":"purescript-quickcheck-laws","item":["Test.QuickCheck.Laws","boundedOrdC"]},{"package":"purescript-quickcheck-laws","item":["Test.QuickCheck.Laws","semigroupC"]},{"package":"purescript-quickcheck-laws","item":["Test.QuickCheck.Laws","monoidC"]},{"package":"purescript-quickcheck-laws","item":["Test.QuickCheck.Laws","arbitraryC"]},{"package":"purescript-quickcheck-laws","item":["Test.QuickCheck.Laws","coarbitraryC"]},{"package":"purescript-quickcheck-laws","item":["Test.QuickCheck.Laws","D"]},{"package":"purescript-quickcheck-laws","item":["Test.QuickCheck.Laws","eqD"]},{"package":"purescript-quickcheck-laws","item":["Test.QuickCheck.Laws","ordD"]},{"package":"purescript-quickcheck-laws","item":["Test.QuickCheck.Laws","boundedD"]},{"package":"purescript-quickcheck-laws","item":["Test.QuickCheck.Laws","boundedOrdD"]},{"package":"purescript-quickcheck-laws","item":["Test.QuickCheck.Laws","semigroupD"]},{"package":"purescript-quickcheck-laws","item":["Test.QuickCheck.Laws","monoidD"]},{"package":"purescript-quickcheck-laws","item":["Test.QuickCheck.Laws","arbitraryD"]},{"package":"purescript-quickcheck-laws","item":["Test.QuickCheck.Laws","coarbitraryD"]},{"package":"purescript-quickcheck-laws","item":["Test.QuickCheck.Laws","E"]},{"package":"purescript-quickcheck-laws","item":["Test.QuickCheck.Laws","eqE"]},{"package":"purescript-quickcheck-laws","item":["Test.QuickCheck.Laws","ordE"]},{"package":"purescript-quickcheck-laws","item":["Test.QuickCheck.Laws","boundedE"]},{"package":"purescript-quickcheck-laws","item":["Test.QuickCheck.Laws","boundedOrdE"]},{"package":"purescript-quickcheck-laws","item":["Test.QuickCheck.Laws","semigroupE"]},{"package":"purescript-quickcheck-laws","item":["Test.QuickCheck.Laws","arbitraryE"]},{"package":"purescript-quickcheck-laws","item":["Test.QuickCheck.Laws","coarbitraryE"]},{"package":"purescript-quickcheck-laws","item":["Test.QuickCheck.Laws.Data.Semigroup","checkSemigroup"]},{"package":"purescript-quickcheck-laws","item":["Test.QuickCheck.Laws.Data.Eq","checkEq"]},{"package":"purescript-quickcheck-laws","item":["Test.QuickCheck.Laws.Data.Bounded","checkBounded"]},{"package":"purescript-quickcheck-laws","item":["Test.QuickCheck.Laws.Data.ModuloSemiring","checkModuloSemiring"]},{"package":"purescript-quickcheck-laws","item":["Test.QuickCheck.Laws.Data.Ring","checkRing"]},{"package":"purescript-quickcheck-laws","item":["Test.QuickCheck.Laws.Data.Semiring","checkSemiring"]},{"package":"purescript-quickcheck-laws","item":["Test.QuickCheck.Laws.Data.Num","checkNum"]},{"package":"purescript-quickcheck-laws","item":["Test.QuickCheck.Laws.Data.Monoid","checkMonoid"]},{"package":"purescript-quickcheck-laws","item":["Test.QuickCheck.Laws.Data.Ord","checkOrd"]},{"package":"purescript-quickcheck-laws","item":["Test.QuickCheck.Laws.Data.Functor","checkFunctor"]},{"package":"purescript-quickcheck-laws","item":["Test.QuickCheck.Laws.Data.DivisionRing","checkDivisionRing"]},{"package":"purescript-quickcheck-laws","item":["Test.QuickCheck.Laws.Control.Extend","checkExtend"]},{"package":"purescript-quickcheck-laws","item":["Test.QuickCheck.Laws.Control.Alternative","checkAlternative"]},{"package":"purescript-quickcheck-laws","item":["Test.QuickCheck.Laws.Control.Applicative","checkApplicative"]},{"package":"purescript-quickcheck-laws","item":["Test.QuickCheck.Laws.Control.Semigroupoid","checkSemigroupoid"]},{"package":"purescript-quickcheck-laws","item":["Test.QuickCheck.Laws.Control.Comonad","checkComonad"]},{"package":"purescript-quickcheck-laws","item":["Test.QuickCheck.Laws.Control.Category","checkCategory"]},{"package":"purescript-quickcheck-laws","item":["Test.QuickCheck.Laws.Control.Apply","checkApply"]},{"package":"purescript-quickcheck-laws","item":["Test.QuickCheck.Laws.Control.Monad","checkMonad"]},{"package":"purescript-quickcheck-laws","item":["Test.QuickCheck.Laws.Control.Bind","checkBind"]},{"package":"purescript-quickcheck-laws","item":["Test.QuickCheck.Laws.Control.Alt","checkAlt"]},{"package":"purescript-quickcheck-laws","item":["Test.QuickCheck.Laws.Control.MonadPlus","checkMonadPlus"]},{"package":"purescript-quickcheck-laws","item":["Test.QuickCheck.Laws.Control.Plus","checkPlus"]},{"package":"purescript-enums","item":["Data.Enum","Cardinality"]},{"package":"purescript-enums","item":["Data.Enum","runCardinality"]},{"package":"purescript-enums","item":["Data.Enum","Enum"]},{"package":"purescript-enums","item":["Data.Enum","defaultSucc"]},{"package":"purescript-enums","item":["Data.Enum","defaultPred"]},{"package":"purescript-enums","item":["Data.Enum","defaultToEnum"]},{"package":"purescript-enums","item":["Data.Enum","defaultFromEnum"]},{"package":"purescript-enums","item":["Data.Enum","enumFromTo"]},{"package":"purescript-enums","item":["Data.Enum","enumFromThenTo"]},{"package":"purescript-enums","item":["Data.Enum","intFromTo"]},{"package":"purescript-enums","item":["Data.Enum","intStepFromTo"]},{"package":"purescript-proxy","item":["Type.Proxy","Proxy"]},{"package":"purescript-proxy","item":["Type.Proxy","Proxy2"]},{"package":"purescript-proxy","item":["Type.Proxy","Proxy3"]},{"package":"purescript-quickcheck","item":["Test.QuickCheck","QC"]},{"package":"purescript-quickcheck","item":["Test.QuickCheck","quickCheck"]},{"package":"purescript-quickcheck","item":["Test.QuickCheck","quickCheck'"]},{"package":"purescript-quickcheck","item":["Test.QuickCheck","quickCheckPure"]},{"package":"purescript-quickcheck","item":["Test.QuickCheck","Testable"]},{"package":"purescript-quickcheck","item":["Test.QuickCheck","testableResult"]},{"package":"purescript-quickcheck","item":["Test.QuickCheck","testableBoolean"]},{"package":"purescript-quickcheck","item":["Test.QuickCheck","testableFunction"]},{"package":"purescript-quickcheck","item":["Test.QuickCheck","Result"]},{"package":"purescript-quickcheck","item":["Test.QuickCheck","showResult"]},{"package":"purescript-quickcheck","item":["Test.QuickCheck","(<?>)"]},{"package":"purescript-quickcheck","item":["Test.QuickCheck","(<?>)"]},{"package":"purescript-quickcheck","item":["Test.QuickCheck","(===)"]},{"package":"purescript-quickcheck","item":["Test.QuickCheck","(/==)"]},{"package":"purescript-quickcheck","item":["Test.QuickCheck.LCG","lcgM"]},{"package":"purescript-quickcheck","item":["Test.QuickCheck.LCG","lcgC"]},{"package":"purescript-quickcheck","item":["Test.QuickCheck.LCG","lcgN"]},{"package":"purescript-quickcheck","item":["Test.QuickCheck.LCG","lcgPerturb"]},{"package":"purescript-quickcheck","item":["Test.QuickCheck.LCG","lcgNext"]},{"package":"purescript-quickcheck","item":["Test.QuickCheck.LCG","randomSeed"]},{"package":"purescript-quickcheck","item":["Test.QuickCheck.LCG","Seed"]},{"package":"purescript-quickcheck","item":["Test.QuickCheck.LCG","mkSeed"]},{"package":"purescript-quickcheck","item":["Test.QuickCheck.LCG","runSeed"]},{"package":"purescript-quickcheck","item":["Test.QuickCheck.Arbitrary","Arbitrary"]},{"package":"purescript-quickcheck","item":["Test.QuickCheck.Arbitrary","Coarbitrary"]},{"package":"purescript-quickcheck","item":["Test.QuickCheck.Arbitrary","arbBoolean"]},{"package":"purescript-quickcheck","item":["Test.QuickCheck.Arbitrary","coarbBoolean"]},{"package":"purescript-quickcheck","item":["Test.QuickCheck.Arbitrary","arbNumber"]},{"package":"purescript-quickcheck","item":["Test.QuickCheck.Arbitrary","coarbNumber"]},{"package":"purescript-quickcheck","item":["Test.QuickCheck.Arbitrary","arbInt"]},{"package":"purescript-quickcheck","item":["Test.QuickCheck.Arbitrary","coarbInt"]},{"package":"purescript-quickcheck","item":["Test.QuickCheck.Arbitrary","arbString"]},{"package":"purescript-quickcheck","item":["Test.QuickCheck.Arbitrary","coarbString"]},{"package":"purescript-quickcheck","item":["Test.QuickCheck.Arbitrary","arbChar"]},{"package":"purescript-quickcheck","item":["Test.QuickCheck.Arbitrary","coarbChar"]},{"package":"purescript-quickcheck","item":["Test.QuickCheck.Arbitrary","arbUnit"]},{"package":"purescript-quickcheck","item":["Test.QuickCheck.Arbitrary","coarbUnit"]},{"package":"purescript-quickcheck","item":["Test.QuickCheck.Arbitrary","arbOrdering"]},{"package":"purescript-quickcheck","item":["Test.QuickCheck.Arbitrary","coarbOrdering"]},{"package":"purescript-quickcheck","item":["Test.QuickCheck.Arbitrary","arbArray"]},{"package":"purescript-quickcheck","item":["Test.QuickCheck.Arbitrary","coarbArray"]},{"package":"purescript-quickcheck","item":["Test.QuickCheck.Arbitrary","arbFunction"]},{"package":"purescript-quickcheck","item":["Test.QuickCheck.Arbitrary","coarbFunction"]},{"package":"purescript-quickcheck","item":["Test.QuickCheck.Arbitrary","arbTuple"]},{"package":"purescript-quickcheck","item":["Test.QuickCheck.Arbitrary","coarbTuple"]},{"package":"purescript-quickcheck","item":["Test.QuickCheck.Arbitrary","arbMaybe"]},{"package":"purescript-quickcheck","item":["Test.QuickCheck.Arbitrary","coarbMaybe"]},{"package":"purescript-quickcheck","item":["Test.QuickCheck.Arbitrary","arbEither"]},{"package":"purescript-quickcheck","item":["Test.QuickCheck.Arbitrary","coarbEither"]},{"package":"purescript-quickcheck","item":["Test.QuickCheck.Arbitrary","arbitraryList"]},{"package":"purescript-quickcheck","item":["Test.QuickCheck.Arbitrary","coarbList"]},{"package":"purescript-quickcheck","item":["Test.QuickCheck.Arbitrary","arbitraryIdentity"]},{"package":"purescript-quickcheck","item":["Test.QuickCheck.Arbitrary","coarbIdentity"]},{"package":"purescript-quickcheck","item":["Test.QuickCheck.Arbitrary","arbitraryLazy"]},{"package":"purescript-quickcheck","item":["Test.QuickCheck.Arbitrary","coarbLazy"]},{"package":"purescript-quickcheck","item":["Test.QuickCheck.Gen","Size"]},{"package":"purescript-quickcheck","item":["Test.QuickCheck.Gen","GenState"]},{"package":"purescript-quickcheck","item":["Test.QuickCheck.Gen","Gen"]},{"package":"purescript-quickcheck","item":["Test.QuickCheck.Gen","repeatable"]},{"package":"purescript-quickcheck","item":["Test.QuickCheck.Gen","stateful"]},{"package":"purescript-quickcheck","item":["Test.QuickCheck.Gen","variant"]},{"package":"purescript-quickcheck","item":["Test.QuickCheck.Gen","sized"]},{"package":"purescript-quickcheck","item":["Test.QuickCheck.Gen","resize"]},{"package":"purescript-quickcheck","item":["Test.QuickCheck.Gen","choose"]},{"package":"purescript-quickcheck","item":["Test.QuickCheck.Gen","chooseInt"]},{"package":"purescript-quickcheck","item":["Test.QuickCheck.Gen","oneOf"]},{"package":"purescript-quickcheck","item":["Test.QuickCheck.Gen","frequency"]},{"package":"purescript-quickcheck","item":["Test.QuickCheck.Gen","arrayOf"]},{"package":"purescript-quickcheck","item":["Test.QuickCheck.Gen","arrayOf1"]},{"package":"purescript-quickcheck","item":["Test.QuickCheck.Gen","listOf"]},{"package":"purescript-quickcheck","item":["Test.QuickCheck.Gen","vectorOf"]},{"package":"purescript-quickcheck","item":["Test.QuickCheck.Gen","elements"]},{"package":"purescript-quickcheck","item":["Test.QuickCheck.Gen","runGen"]},{"package":"purescript-quickcheck","item":["Test.QuickCheck.Gen","evalGen"]},{"package":"purescript-quickcheck","item":["Test.QuickCheck.Gen","sample"]},{"package":"purescript-quickcheck","item":["Test.QuickCheck.Gen","randomSample'"]},{"package":"purescript-quickcheck","item":["Test.QuickCheck.Gen","randomSample"]},{"package":"purescript-quickcheck","item":["Test.QuickCheck.Gen","uniform"]},{"package":"purescript-quickcheck","item":["Test.QuickCheck.Gen","perturbGen"]},{"package":"purescript-quickcheck","item":["Test.QuickCheck.Data.ApproxNumber","ApproxNumber"]},{"package":"purescript-quickcheck","item":["Test.QuickCheck.Data.ApproxNumber","(=~=)"]},{"package":"purescript-quickcheck","item":["Test.QuickCheck.Data.ApproxNumber","arbitraryApproxNumber"]},{"package":"purescript-quickcheck","item":["Test.QuickCheck.Data.ApproxNumber","coarbitraryApproxNumber"]},{"package":"purescript-quickcheck","item":["Test.QuickCheck.Data.ApproxNumber","eqApproxNumber"]},{"package":"purescript-quickcheck","item":["Test.QuickCheck.Data.ApproxNumber","ordApproxNumber"]},{"package":"purescript-quickcheck","item":["Test.QuickCheck.Data.ApproxNumber","semiringApproxNumber"]},{"package":"purescript-quickcheck","item":["Test.QuickCheck.Data.ApproxNumber","moduloSemiringApproxNumber"]},{"package":"purescript-quickcheck","item":["Test.QuickCheck.Data.ApproxNumber","ringApproxNumber"]},{"package":"purescript-quickcheck","item":["Test.QuickCheck.Data.ApproxNumber","divisionRingApproxNumber"]},{"package":"purescript-quickcheck","item":["Test.QuickCheck.Data.ApproxNumber","numApproxNumber"]},{"package":"purescript-quickcheck","item":["Test.QuickCheck.Data.AlphaNumString","AlphaNumString"]},{"package":"purescript-quickcheck","item":["Test.QuickCheck.Data.AlphaNumString","runAlphaNumString"]},{"package":"purescript-quickcheck","item":["Test.QuickCheck.Data.AlphaNumString","arbAlphaNumString"]},{"package":"purescript-quickcheck","item":["Test.QuickCheck.Data.AlphaNumString","coarbAlphaNumString"]},{"package":"purescript-arrays","item":["Data.Array","singleton"]},{"package":"purescript-arrays","item":["Data.Array","range"]},{"package":"purescript-arrays","item":["Data.Array","(..)"]},{"package":"purescript-arrays","item":["Data.Array","replicate"]},{"package":"purescript-arrays","item":["Data.Array","replicateM"]},{"package":"purescript-arrays","item":["Data.Array","some"]},{"package":"purescript-arrays","item":["Data.Array","many"]},{"package":"purescript-arrays","item":["Data.Array","null"]},{"package":"purescript-arrays","item":["Data.Array","length"]},{"package":"purescript-arrays","item":["Data.Array","cons"]},{"package":"purescript-arrays","item":["Data.Array","(:)"]},{"package":"purescript-arrays","item":["Data.Array","snoc"]},{"package":"purescript-arrays","item":["Data.Array","insert"]},{"package":"purescript-arrays","item":["Data.Array","insertBy"]},{"package":"purescript-arrays","item":["Data.Array","head"]},{"package":"purescript-arrays","item":["Data.Array","last"]},{"package":"purescript-arrays","item":["Data.Array","tail"]},{"package":"purescript-arrays","item":["Data.Array","init"]},{"package":"purescript-arrays","item":["Data.Array","uncons"]},{"package":"purescript-arrays","item":["Data.Array","index"]},{"package":"purescript-arrays","item":["Data.Array","(!!)"]},{"package":"purescript-arrays","item":["Data.Array","elemIndex"]},{"package":"purescript-arrays","item":["Data.Array","elemLastIndex"]},{"package":"purescript-arrays","item":["Data.Array","findIndex"]},{"package":"purescript-arrays","item":["Data.Array","findLastIndex"]},{"package":"purescript-arrays","item":["Data.Array","insertAt"]},{"package":"purescript-arrays","item":["Data.Array","deleteAt"]},{"package":"purescript-arrays","item":["Data.Array","updateAt"]},{"package":"purescript-arrays","item":["Data.Array","modifyAt"]},{"package":"purescript-arrays","item":["Data.Array","alterAt"]},{"package":"purescript-arrays","item":["Data.Array","reverse"]},{"package":"purescript-arrays","item":["Data.Array","concat"]},{"package":"purescript-arrays","item":["Data.Array","concatMap"]},{"package":"purescript-arrays","item":["Data.Array","filter"]},{"package":"purescript-arrays","item":["Data.Array","partition"]},{"package":"purescript-arrays","item":["Data.Array","filterM"]},{"package":"purescript-arrays","item":["Data.Array","mapMaybe"]},{"package":"purescript-arrays","item":["Data.Array","catMaybes"]},{"package":"purescript-arrays","item":["Data.Array","sort"]},{"package":"purescript-arrays","item":["Data.Array","sortBy"]},{"package":"purescript-arrays","item":["Data.Array","slice"]},{"package":"purescript-arrays","item":["Data.Array","take"]},{"package":"purescript-arrays","item":["Data.Array","takeWhile"]},{"package":"purescript-arrays","item":["Data.Array","drop"]},{"package":"purescript-arrays","item":["Data.Array","dropWhile"]},{"package":"purescript-arrays","item":["Data.Array","span"]},{"package":"purescript-arrays","item":["Data.Array","group"]},{"package":"purescript-arrays","item":["Data.Array","group'"]},{"package":"purescript-arrays","item":["Data.Array","groupBy"]},{"package":"purescript-arrays","item":["Data.Array","nub"]},{"package":"purescript-arrays","item":["Data.Array","nubBy"]},{"package":"purescript-arrays","item":["Data.Array","union"]},{"package":"purescript-arrays","item":["Data.Array","unionBy"]},{"package":"purescript-arrays","item":["Data.Array","delete"]},{"package":"purescript-arrays","item":["Data.Array","deleteBy"]},{"package":"purescript-arrays","item":["Data.Array","deleteBy"]},{"package":"purescript-arrays","item":["Data.Array","(\\\\)"]},{"package":"purescript-arrays","item":["Data.Array","intersect"]},{"package":"purescript-arrays","item":["Data.Array","intersectBy"]},{"package":"purescript-arrays","item":["Data.Array","zipWith"]},{"package":"purescript-arrays","item":["Data.Array","zipWithA"]},{"package":"purescript-arrays","item":["Data.Array","zip"]},{"package":"purescript-arrays","item":["Data.Array","unzip"]},{"package":"purescript-arrays","item":["Data.Array","foldM"]},{"package":"purescript-arrays","item":["Data.Array.Unsafe","unsafeIndex"]},{"package":"purescript-arrays","item":["Data.Array.Unsafe","head"]},{"package":"purescript-arrays","item":["Data.Array.Unsafe","tail"]},{"package":"purescript-arrays","item":["Data.Array.Unsafe","last"]},{"package":"purescript-arrays","item":["Data.Array.Unsafe","init"]},{"package":"purescript-arrays","item":["Data.Array.ST","STArray"]},{"package":"purescript-arrays","item":["Data.Array.ST","Assoc"]},{"package":"purescript-arrays","item":["Data.Array.ST","runSTArray"]},{"package":"purescript-arrays","item":["Data.Array.ST","emptySTArray"]},{"package":"purescript-arrays","item":["Data.Array.ST","thaw"]},{"package":"purescript-arrays","item":["Data.Array.ST","freeze"]},{"package":"purescript-arrays","item":["Data.Array.ST","peekSTArray"]},{"package":"purescript-arrays","item":["Data.Array.ST","pokeSTArray"]},{"package":"purescript-arrays","item":["Data.Array.ST","pushSTArray"]},{"package":"purescript-arrays","item":["Data.Array.ST","pushAllSTArray"]},{"package":"purescript-arrays","item":["Data.Array.ST","spliceSTArray"]},{"package":"purescript-arrays","item":["Data.Array.ST","toAssocArray"]},{"package":"purescript-lists","item":["Data.List","List"]},{"package":"purescript-lists","item":["Data.List","toUnfoldable"]},{"package":"purescript-lists","item":["Data.List","fromFoldable"]},{"package":"purescript-lists","item":["Data.List","singleton"]},{"package":"purescript-lists","item":["Data.List","(..)"]},{"package":"purescript-lists","item":["Data.List","range"]},{"package":"purescript-lists","item":["Data.List","replicate"]},{"package":"purescript-lists","item":["Data.List","replicateM"]},{"package":"purescript-lists","item":["Data.List","some"]},{"package":"purescript-lists","item":["Data.List","many"]},{"package":"purescript-lists","item":["Data.List","null"]},{"package":"purescript-lists","item":["Data.List","null"]},{"package":"purescript-lists","item":["Data.List","length"]},{"package":"purescript-lists","item":["Data.List","(:)"]},{"package":"purescript-lists","item":["Data.List","snoc"]},{"package":"purescript-lists","item":["Data.List","insert"]},{"package":"purescript-lists","item":["Data.List","insertBy"]},{"package":"purescript-lists","item":["Data.List","insertBy"]},{"package":"purescript-lists","item":["Data.List","head"]},{"package":"purescript-lists","item":["Data.List","head"]},{"package":"purescript-lists","item":["Data.List","last"]},{"package":"purescript-lists","item":["Data.List","last"]},{"package":"purescript-lists","item":["Data.List","last"]},{"package":"purescript-lists","item":["Data.List","tail"]},{"package":"purescript-lists","item":["Data.List","tail"]},{"package":"purescript-lists","item":["Data.List","init"]},{"package":"purescript-lists","item":["Data.List","init"]},{"package":"purescript-lists","item":["Data.List","uncons"]},{"package":"purescript-lists","item":["Data.List","uncons"]},{"package":"purescript-lists","item":["Data.List","index"]},{"package":"purescript-lists","item":["Data.List","index"]},{"package":"purescript-lists","item":["Data.List","index"]},{"package":"purescript-lists","item":["Data.List","(!!)"]},{"package":"purescript-lists","item":["Data.List","elemIndex"]},{"package":"purescript-lists","item":["Data.List","elemLastIndex"]},{"package":"purescript-lists","item":["Data.List","findIndex"]},{"package":"purescript-lists","item":["Data.List","findLastIndex"]},{"package":"purescript-lists","item":["Data.List","insertAt"]},{"package":"purescript-lists","item":["Data.List","insertAt"]},{"package":"purescript-lists","item":["Data.List","insertAt"]},{"package":"purescript-lists","item":["Data.List","deleteAt"]},{"package":"purescript-lists","item":["Data.List","deleteAt"]},{"package":"purescript-lists","item":["Data.List","deleteAt"]},{"package":"purescript-lists","item":["Data.List","updateAt"]},{"package":"purescript-lists","item":["Data.List","updateAt"]},{"package":"purescript-lists","item":["Data.List","updateAt"]},{"package":"purescript-lists","item":["Data.List","modifyAt"]},{"package":"purescript-lists","item":["Data.List","alterAt"]},{"package":"purescript-lists","item":["Data.List","alterAt"]},{"package":"purescript-lists","item":["Data.List","alterAt"]},{"package":"purescript-lists","item":["Data.List","reverse"]},{"package":"purescript-lists","item":["Data.List","concat"]},{"package":"purescript-lists","item":["Data.List","concatMap"]},{"package":"purescript-lists","item":["Data.List","concatMap"]},{"package":"purescript-lists","item":["Data.List","filter"]},{"package":"purescript-lists","item":["Data.List","filterM"]},{"package":"purescript-lists","item":["Data.List","filterM"]},{"package":"purescript-lists","item":["Data.List","mapMaybe"]},{"package":"purescript-lists","item":["Data.List","catMaybes"]},{"package":"purescript-lists","item":["Data.List","sort"]},{"package":"purescript-lists","item":["Data.List","sortBy"]},{"package":"purescript-lists","item":["Data.List","slice"]},{"package":"purescript-lists","item":["Data.List","take"]},{"package":"purescript-lists","item":["Data.List","takeWhile"]},{"package":"purescript-lists","item":["Data.List","drop"]},{"package":"purescript-lists","item":["Data.List","drop"]},{"package":"purescript-lists","item":["Data.List","drop"]},{"package":"purescript-lists","item":["Data.List","dropWhile"]},{"package":"purescript-lists","item":["Data.List","span"]},{"package":"purescript-lists","item":["Data.List","span"]},{"package":"purescript-lists","item":["Data.List","group"]},{"package":"purescript-lists","item":["Data.List","group'"]},{"package":"purescript-lists","item":["Data.List","groupBy"]},{"package":"purescript-lists","item":["Data.List","groupBy"]},{"package":"purescript-lists","item":["Data.List","nub"]},{"package":"purescript-lists","item":["Data.List","nubBy"]},{"package":"purescript-lists","item":["Data.List","nubBy"]},{"package":"purescript-lists","item":["Data.List","union"]},{"package":"purescript-lists","item":["Data.List","unionBy"]},{"package":"purescript-lists","item":["Data.List","delete"]},{"package":"purescript-lists","item":["Data.List","deleteBy"]},{"package":"purescript-lists","item":["Data.List","deleteBy"]},{"package":"purescript-lists","item":["Data.List","deleteBy"]},{"package":"purescript-lists","item":["Data.List","(\\\\)"]},{"package":"purescript-lists","item":["Data.List","intersect"]},{"package":"purescript-lists","item":["Data.List","intersectBy"]},{"package":"purescript-lists","item":["Data.List","intersectBy"]},{"package":"purescript-lists","item":["Data.List","intersectBy"]},{"package":"purescript-lists","item":["Data.List","zipWith"]},{"package":"purescript-lists","item":["Data.List","zipWithA"]},{"package":"purescript-lists","item":["Data.List","zip"]},{"package":"purescript-lists","item":["Data.List","unzip"]},{"package":"purescript-lists","item":["Data.List","transpose"]},{"package":"purescript-lists","item":["Data.List","transpose"]},{"package":"purescript-lists","item":["Data.List","transpose"]},{"package":"purescript-lists","item":["Data.List","foldM"]},{"package":"purescript-lists","item":["Data.List","foldM"]},{"package":"purescript-lists","item":["Data.List","toList"]},{"package":"purescript-lists","item":["Data.List","fromList"]},{"package":"purescript-lists","item":["Data.List.Unsafe","head"]},{"package":"purescript-lists","item":["Data.List.Unsafe","head"]},{"package":"purescript-lists","item":["Data.List.Unsafe","tail"]},{"package":"purescript-lists","item":["Data.List.Unsafe","tail"]},{"package":"purescript-lists","item":["Data.List.Unsafe","last"]},{"package":"purescript-lists","item":["Data.List.Unsafe","last"]},{"package":"purescript-lists","item":["Data.List.Unsafe","last"]},{"package":"purescript-lists","item":["Data.List.Unsafe","init"]},{"package":"purescript-lists","item":["Data.List.Unsafe","init"]},{"package":"purescript-lists","item":["Data.List.Unsafe","init"]},{"package":"purescript-lists","item":["Data.List.Lazy","List"]},{"package":"purescript-lists","item":["Data.List.Lazy","runList"]},{"package":"purescript-lists","item":["Data.List.Lazy","toUnfoldable"]},{"package":"purescript-lists","item":["Data.List.Lazy","fromFoldable"]},{"package":"purescript-lists","item":["Data.List.Lazy","Step"]},{"package":"purescript-lists","item":["Data.List.Lazy","step"]},{"package":"purescript-lists","item":["Data.List.Lazy","nil"]},{"package":"purescript-lists","item":["Data.List.Lazy","singleton"]},{"package":"purescript-lists","item":["Data.List.Lazy","(..)"]},{"package":"purescript-lists","item":["Data.List.Lazy","range"]},{"package":"purescript-lists","item":["Data.List.Lazy","repeat"]},{"package":"purescript-lists","item":["Data.List.Lazy","iterate"]},{"package":"purescript-lists","item":["Data.List.Lazy","cycle"]},{"package":"purescript-lists","item":["Data.List.Lazy","null"]},{"package":"purescript-lists","item":["Data.List.Lazy","length"]},{"package":"purescript-lists","item":["Data.List.Lazy","cons"]},{"package":"purescript-lists","item":["Data.List.Lazy","(:)"]},{"package":"purescript-lists","item":["Data.List.Lazy","insert"]},{"package":"purescript-lists","item":["Data.List.Lazy","insertBy"]},{"package":"purescript-lists","item":["Data.List.Lazy","head"]},{"package":"purescript-lists","item":["Data.List.Lazy","last"]},{"package":"purescript-lists","item":["Data.List.Lazy","tail"]},{"package":"purescript-lists","item":["Data.List.Lazy","init"]},{"package":"purescript-lists","item":["Data.List.Lazy","uncons"]},{"package":"purescript-lists","item":["Data.List.Lazy","index"]},{"package":"purescript-lists","item":["Data.List.Lazy","(!!)"]},{"package":"purescript-lists","item":["Data.List.Lazy","insertAt"]},{"package":"purescript-lists","item":["Data.List.Lazy","insertAt"]},{"package":"purescript-lists","item":["Data.List.Lazy","deleteAt"]},{"package":"purescript-lists","item":["Data.List.Lazy","updateAt"]},{"package":"purescript-lists","item":["Data.List.Lazy","modifyAt"]},{"package":"purescript-lists","item":["Data.List.Lazy","alterAt"]},{"package":"purescript-lists","item":["Data.List.Lazy","reverse"]},{"package":"purescript-lists","item":["Data.List.Lazy","concat"]},{"package":"purescript-lists","item":["Data.List.Lazy","concatMap"]},{"package":"purescript-lists","item":["Data.List.Lazy","filter"]},{"package":"purescript-lists","item":["Data.List.Lazy","mapMaybe"]},{"package":"purescript-lists","item":["Data.List.Lazy","catMaybes"]},{"package":"purescript-lists","item":["Data.List.Lazy","take"]},{"package":"purescript-lists","item":["Data.List.Lazy","takeWhile"]},{"package":"purescript-lists","item":["Data.List.Lazy","drop"]},{"package":"purescript-lists","item":["Data.List.Lazy","dropWhile"]},{"package":"purescript-lists","item":["Data.List.Lazy","span"]},{"package":"purescript-lists","item":["Data.List.Lazy","group"]},{"package":"purescript-lists","item":["Data.List.Lazy","groupBy"]},{"package":"purescript-lists","item":["Data.List.Lazy","nub"]},{"package":"purescript-lists","item":["Data.List.Lazy","nubBy"]},{"package":"purescript-lists","item":["Data.List.Lazy","union"]},{"package":"purescript-lists","item":["Data.List.Lazy","unionBy"]},{"package":"purescript-lists","item":["Data.List.Lazy","delete"]},{"package":"purescript-lists","item":["Data.List.Lazy","deleteBy"]},{"package":"purescript-lists","item":["Data.List.Lazy","(\\\\)"]},{"package":"purescript-lists","item":["Data.List.Lazy","intersect"]},{"package":"purescript-lists","item":["Data.List.Lazy","intersectBy"]},{"package":"purescript-lists","item":["Data.List.Lazy","zipWith"]},{"package":"purescript-lists","item":["Data.List.Lazy","zip"]},{"package":"purescript-lists","item":["Data.List.Lazy","transpose"]},{"package":"purescript-lists","item":["Data.List.Lazy","toList"]},{"package":"purescript-lists","item":["Data.List.Lazy","fromList"]},{"package":"purescript-lists","item":["Data.List.Lazy","lazyList"]},{"package":"purescript-lists","item":["Data.List.ZipList","ZipList"]},{"package":"purescript-lists","item":["Data.List.ZipList","runZipList"]},{"package":"purescript-sequences","item":["Data.FingerTree","Node"]},{"package":"purescript-sequences","item":["Data.FingerTree","node2"]},{"package":"purescript-sequences","item":["Data.FingerTree","node3"]},{"package":"purescript-sequences","item":["Data.FingerTree","nodeToDigit"]},{"package":"purescript-sequences","item":["Data.FingerTree","nodeToDigit"]},{"package":"purescript-sequences","item":["Data.FingerTree","FingerTree"]},{"package":"purescript-sequences","item":["Data.FingerTree","lazyEmpty"]},{"package":"purescript-sequences","item":["Data.FingerTree","deep"]},{"package":"purescript-sequences","item":["Data.FingerTree","Digit"]},{"package":"purescript-sequences","item":["Data.FingerTree","eqFingerTree"]},{"package":"purescript-sequences","item":["Data.FingerTree","compareFingerTree"]},{"package":"purescript-sequences","item":["Data.FingerTree","cons"]},{"package":"purescript-sequences","item":["Data.FingerTree","cons"]},{"package":"purescript-sequences","item":["Data.FingerTree","cons"]},{"package":"purescript-sequences","item":["Data.FingerTree","cons"]},{"package":"purescript-sequences","item":["Data.FingerTree","snoc"]},{"package":"purescript-sequences","item":["Data.FingerTree","snoc"]},{"package":"purescript-sequences","item":["Data.FingerTree","snoc"]},{"package":"purescript-sequences","item":["Data.FingerTree","snoc"]},{"package":"purescript-sequences","item":["Data.FingerTree","consAll"]},{"package":"purescript-sequences","item":["Data.FingerTree","snocAll"]},{"package":"purescript-sequences","item":["Data.FingerTree","toFingerTree"]},{"package":"purescript-sequences","item":["Data.FingerTree","ViewL"]},{"package":"purescript-sequences","item":["Data.FingerTree","headDigit"]},{"package":"purescript-sequences","item":["Data.FingerTree","tailDigit"]},{"package":"purescript-sequences","item":["Data.FingerTree","viewL"]},{"package":"purescript-sequences","item":["Data.FingerTree","viewL"]},{"package":"purescript-sequences","item":["Data.FingerTree","viewL"]},{"package":"purescript-sequences","item":["Data.FingerTree","deepL"]},{"package":"purescript-sequences","item":["Data.FingerTree","deepL"]},{"package":"purescript-sequences","item":["Data.FingerTree","isEmpty"]},{"package":"purescript-sequences","item":["Data.FingerTree","head"]},{"package":"purescript-sequences","item":["Data.FingerTree","tail"]},{"package":"purescript-sequences","item":["Data.FingerTree","lastDigit"]},{"package":"purescript-sequences","item":["Data.FingerTree","initDigit"]},{"package":"purescript-sequences","item":["Data.FingerTree","ViewR"]},{"package":"purescript-sequences","item":["Data.FingerTree","viewR"]},{"package":"purescript-sequences","item":["Data.FingerTree","viewR"]},{"package":"purescript-sequences","item":["Data.FingerTree","viewR"]},{"package":"purescript-sequences","item":["Data.FingerTree","deepR"]},{"package":"purescript-sequences","item":["Data.FingerTree","deepR"]},{"package":"purescript-sequences","item":["Data.FingerTree","last"]},{"package":"purescript-sequences","item":["Data.FingerTree","init"]},{"package":"purescript-sequences","item":["Data.FingerTree","app3"]},{"package":"purescript-sequences","item":["Data.FingerTree","app3"]},{"package":"purescript-sequences","item":["Data.FingerTree","app3"]},{"package":"purescript-sequences","item":["Data.FingerTree","app3"]},{"package":"purescript-sequences","item":["Data.FingerTree","app3"]},{"package":"purescript-sequences","item":["Data.FingerTree","nodes"]},{"package":"purescript-sequences","item":["Data.FingerTree","nodes"]},{"package":"purescript-sequences","item":["Data.FingerTree","nodes"]},{"package":"purescript-sequences","item":["Data.FingerTree","nodes"]},{"package":"purescript-sequences","item":["Data.FingerTree","append"]},{"package":"purescript-sequences","item":["Data.FingerTree","Split"]},{"package":"purescript-sequences","item":["Data.FingerTree","LazySplit"]},{"package":"purescript-sequences","item":["Data.FingerTree","unsafeSplitDigit"]},{"package":"purescript-sequences","item":["Data.FingerTree","unsafeSplitTree"]},{"package":"purescript-sequences","item":["Data.FingerTree","unsafeSplitTree"]},{"package":"purescript-sequences","item":["Data.FingerTree","unsafeSplitTree"]},{"package":"purescript-sequences","item":["Data.FingerTree","split"]},{"package":"purescript-sequences","item":["Data.FingerTree","split"]},{"package":"purescript-sequences","item":["Data.FingerTree","filter"]},{"package":"purescript-sequences","item":["Data.FingerTree","unfoldLeft"]},{"package":"purescript-sequences","item":["Data.FingerTree","unfoldRight"]},{"package":"purescript-sequences","item":["Data.FingerTree","fullyForce"]},{"package":"purescript-sequences","item":["Data.Sequence","Seq"]},{"package":"purescript-sequences","item":["Data.Sequence","empty"]},{"package":"purescript-sequences","item":["Data.Sequence","singleton"]},{"package":"purescript-sequences","item":["Data.Sequence","cons"]},{"package":"purescript-sequences","item":["Data.Sequence","snoc"]},{"package":"purescript-sequences","item":["Data.Sequence","append"]},{"package":"purescript-sequences","item":["Data.Sequence","concat"]},{"package":"purescript-sequences","item":["Data.Sequence","concatMap"]},{"package":"purescript-sequences","item":["Data.Sequence","length"]},{"package":"purescript-sequences","item":["Data.Sequence","null"]},{"package":"purescript-sequences","item":["Data.Sequence","null"]},{"package":"purescript-sequences","item":["Data.Sequence","uncons"]},{"package":"purescript-sequences","item":["Data.Sequence","unsnoc"]},{"package":"purescript-sequences","item":["Data.Sequence","splitAt"]},{"package":"purescript-sequences","item":["Data.Sequence","take"]},{"package":"purescript-sequences","item":["Data.Sequence","drop"]},{"package":"purescript-sequences","item":["Data.Sequence","inBounds"]},{"package":"purescript-sequences","item":["Data.Sequence","index"]},{"package":"purescript-sequences","item":["Data.Sequence","adjust"]},{"package":"purescript-sequences","item":["Data.Sequence","replace"]},{"package":"purescript-sequences","item":["Data.Sequence","map"]},{"package":"purescript-sequences","item":["Data.Sequence","head"]},{"package":"purescript-sequences","item":["Data.Sequence","tail"]},{"package":"purescript-sequences","item":["Data.Sequence","init"]},{"package":"purescript-sequences","item":["Data.Sequence","last"]},{"package":"purescript-sequences","item":["Data.Sequence","fromFoldable"]},{"package":"purescript-sequences","item":["Data.Sequence","toUnfoldable"]},{"package":"purescript-sequences","item":["Data.Sequence","filter"]},{"package":"purescript-sequences","item":["Data.Sequence","sort"]},{"package":"purescript-sequences","item":["Data.Sequence","fullyForce"]},{"package":"purescript-sequences","item":["Data.Sequence.Ordered","OrdSeq"]},{"package":"purescript-sequences","item":["Data.Sequence.Ordered","empty"]},{"package":"purescript-sequences","item":["Data.Sequence.Ordered","null"]},{"package":"purescript-sequences","item":["Data.Sequence.Ordered","null"]},{"package":"purescript-sequences","item":["Data.Sequence.Ordered","length"]},{"package":"purescript-sequences","item":["Data.Sequence.Ordered","partition"]},{"package":"purescript-sequences","item":["Data.Sequence.Ordered","insert"]},{"package":"purescript-sequences","item":["Data.Sequence.Ordered","deleteAll"]},{"package":"purescript-sequences","item":["Data.Sequence.Ordered","merge"]},{"package":"purescript-sequences","item":["Data.Sequence.Ordered","intersection"]},{"package":"purescript-sequences","item":["Data.Sequence.Ordered","least"]},{"package":"purescript-sequences","item":["Data.Sequence.Ordered","popLeast"]},{"package":"purescript-sequences","item":["Data.Sequence.Ordered","greatest"]},{"package":"purescript-sequences","item":["Data.Sequence.Ordered","popGreatest"]},{"package":"purescript-sequences","item":["Data.Sequence.Ordered","fromFoldable"]},{"package":"purescript-sequences","item":["Data.Sequence.Ordered","toUnfoldable"]},{"package":"purescript-sequences","item":["Data.Sequence.Ordered","toUnfoldableDescending"]},{"package":"purescript-sequences","item":["Data.Sequence.Ordered","sort"]},{"package":"purescript-sequences","item":["Data.Sequence.Internal","(!)"]},{"package":"purescript-sequences","item":["Data.Sequence.Internal","(<$$>)"]},{"package":"purescript-sequences","item":["Data.Sequence.Internal","(<$$$>)"]},{"package":"purescript-sequences","item":["Data.Sequence.Internal","strJoin"]},{"package":"purescript-sequences","item":["Data.Sequence.Internal","Measured"]},{"package":"purescript-sequences","item":["Data.Sequence.Internal","Elem"]},{"package":"purescript-sequences","item":["Data.Sequence.Internal","getElem"]},{"package":"purescript-sequences","item":["Data.Sequence.Internal","mapElem"]},{"package":"purescript-sequences","item":["Data.Sequence.Internal","mapGetElem"]},{"package":"purescript-sequences","item":["Data.Sequence.Internal","lift2Elem"]},{"package":"purescript-sequences","item":["Data.Sequence.Internal","liftElem"]},{"package":"purescript-sequences","item":["Data.Sequence.Internal","Key"]},{"package":"purescript-sequences","item":["Data.Sequence.NonEmpty","Seq"]},{"package":"purescript-sequences","item":["Data.Sequence.NonEmpty","singleton"]},{"package":"purescript-sequences","item":["Data.Sequence.NonEmpty","cons"]},{"package":"purescript-sequences","item":["Data.Sequence.NonEmpty","snoc"]},{"package":"purescript-sequences","item":["Data.Sequence.NonEmpty","append"]},{"package":"purescript-sequences","item":["Data.Sequence.NonEmpty","length"]},{"package":"purescript-sequences","item":["Data.Sequence.NonEmpty","inBounds"]},{"package":"purescript-sequences","item":["Data.Sequence.NonEmpty","inBounds"]},{"package":"purescript-sequences","item":["Data.Sequence.NonEmpty","uncons"]},{"package":"purescript-sequences","item":["Data.Sequence.NonEmpty","unsnoc"]},{"package":"purescript-sequences","item":["Data.Sequence.NonEmpty","head"]},{"package":"purescript-sequences","item":["Data.Sequence.NonEmpty","tail"]},{"package":"purescript-sequences","item":["Data.Sequence.NonEmpty","init"]},{"package":"purescript-sequences","item":["Data.Sequence.NonEmpty","last"]},{"package":"purescript-sequences","item":["Data.Sequence.NonEmpty","toPlain"]},{"package":"purescript-sequences","item":["Data.Sequence.NonEmpty","splitAt"]},{"package":"purescript-sequences","item":["Data.Sequence.NonEmpty","take"]},{"package":"purescript-sequences","item":["Data.Sequence.NonEmpty","drop"]},{"package":"purescript-sequences","item":["Data.Sequence.NonEmpty","filter"]},{"package":"purescript-sequences","item":["Data.Sequence.NonEmpty","index"]},{"package":"purescript-sequences","item":["Data.Sequence.NonEmpty","index"]},{"package":"purescript-sequences","item":["Data.Sequence.NonEmpty","adjust"]},{"package":"purescript-sequences","item":["Data.Sequence.NonEmpty","adjust"]},{"package":"purescript-sequences","item":["Data.Sequence.NonEmpty","replace"]},{"package":"purescript-sequences","item":["Data.Sequence.NonEmpty","toUnfoldable"]},{"package":"purescript-transformers","item":["Control.Monad.State","State"]},{"package":"purescript-transformers","item":["Control.Monad.State","runState"]},{"package":"purescript-transformers","item":["Control.Monad.State","evalState"]},{"package":"purescript-transformers","item":["Control.Monad.State","execState"]},{"package":"purescript-transformers","item":["Control.Monad.State","mapState"]},{"package":"purescript-transformers","item":["Control.Monad.State","withState"]},{"package":"purescript-transformers","item":["Control.Monad.Writer","Writer"]},{"package":"purescript-transformers","item":["Control.Monad.Writer","runWriter"]},{"package":"purescript-transformers","item":["Control.Monad.Writer","execWriter"]},{"package":"purescript-transformers","item":["Control.Monad.Writer","mapWriter"]},{"package":"purescript-transformers","item":["Control.Monad.Except","Except"]},{"package":"purescript-transformers","item":["Control.Monad.Except","except"]},{"package":"purescript-transformers","item":["Control.Monad.Except","runExcept"]},{"package":"purescript-transformers","item":["Control.Monad.Except","mapExcept"]},{"package":"purescript-transformers","item":["Control.Monad.Except","withExcept"]},{"package":"purescript-transformers","item":["Control.Monad.Trans","MonadTrans"]},{"package":"purescript-transformers","item":["Control.Monad.RWS","RWS"]},{"package":"purescript-transformers","item":["Control.Monad.RWS","rws"]},{"package":"purescript-transformers","item":["Control.Monad.RWS","runRWS"]},{"package":"purescript-transformers","item":["Control.Monad.RWS","evalRWS"]},{"package":"purescript-transformers","item":["Control.Monad.RWS","execRWS"]},{"package":"purescript-transformers","item":["Control.Monad.RWS","mapRWS"]},{"package":"purescript-transformers","item":["Control.Monad.RWS","withRWS"]},{"package":"purescript-transformers","item":["Control.Monad.Reader","Reader"]},{"package":"purescript-transformers","item":["Control.Monad.Reader","runReader"]},{"package":"purescript-transformers","item":["Control.Monad.Reader","withReader"]},{"package":"purescript-transformers","item":["Control.Monad.Reader","mapReader"]},{"package":"purescript-transformers","item":["Control.Monad.List.Trans","ListT"]},{"package":"purescript-transformers","item":["Control.Monad.List.Trans","nil"]},{"package":"purescript-transformers","item":["Control.Monad.List.Trans","cons"]},{"package":"purescript-transformers","item":["Control.Monad.List.Trans","prepend'"]},{"package":"purescript-transformers","item":["Control.Monad.List.Trans","prepend"]},{"package":"purescript-transformers","item":["Control.Monad.List.Trans","singleton"]},{"package":"purescript-transformers","item":["Control.Monad.List.Trans","fromEffect"]},{"package":"purescript-transformers","item":["Control.Monad.List.Trans","wrapEffect"]},{"package":"purescript-transformers","item":["Control.Monad.List.Trans","wrapLazy"]},{"package":"purescript-transformers","item":["Control.Monad.List.Trans","unfold"]},{"package":"purescript-transformers","item":["Control.Monad.List.Trans","iterate"]},{"package":"purescript-transformers","item":["Control.Monad.List.Trans","repeat"]},{"package":"purescript-transformers","item":["Control.Monad.List.Trans","take"]},{"package":"purescript-transformers","item":["Control.Monad.List.Trans","take"]},{"package":"purescript-transformers","item":["Control.Monad.List.Trans","takeWhile"]},{"package":"purescript-transformers","item":["Control.Monad.List.Trans","drop"]},{"package":"purescript-transformers","item":["Control.Monad.List.Trans","drop"]},{"package":"purescript-transformers","item":["Control.Monad.List.Trans","dropWhile"]},{"package":"purescript-transformers","item":["Control.Monad.List.Trans","filter"]},{"package":"purescript-transformers","item":["Control.Monad.List.Trans","mapMaybe"]},{"package":"purescript-transformers","item":["Control.Monad.List.Trans","catMaybes"]},{"package":"purescript-transformers","item":["Control.Monad.List.Trans","uncons"]},{"package":"purescript-transformers","item":["Control.Monad.List.Trans","head"]},{"package":"purescript-transformers","item":["Control.Monad.List.Trans","tail"]},{"package":"purescript-transformers","item":["Control.Monad.List.Trans","foldl'"]},{"package":"purescript-transformers","item":["Control.Monad.List.Trans","foldl"]},{"package":"purescript-transformers","item":["Control.Monad.List.Trans","scanl"]},{"package":"purescript-transformers","item":["Control.Monad.List.Trans","zipWith'"]},{"package":"purescript-transformers","item":["Control.Monad.List.Trans","zipWith"]},{"package":"purescript-transformers","item":["Control.Monad.State.Class","MonadState"]},{"package":"purescript-transformers","item":["Control.Monad.State.Class","get"]},{"package":"purescript-transformers","item":["Control.Monad.State.Class","gets"]},{"package":"purescript-transformers","item":["Control.Monad.State.Class","put"]},{"package":"purescript-transformers","item":["Control.Monad.State.Class","modify"]},{"package":"purescript-transformers","item":["Control.Monad.State.Trans","StateT"]},{"package":"purescript-transformers","item":["Control.Monad.State.Trans","runStateT"]},{"package":"purescript-transformers","item":["Control.Monad.State.Trans","evalStateT"]},{"package":"purescript-transformers","item":["Control.Monad.State.Trans","execStateT"]},{"package":"purescript-transformers","item":["Control.Monad.State.Trans","mapStateT"]},{"package":"purescript-transformers","item":["Control.Monad.State.Trans","withStateT"]},{"package":"purescript-transformers","item":["Control.Monad.Except.Trans","ExceptT"]},{"package":"purescript-transformers","item":["Control.Monad.Except.Trans","runExceptT"]},{"package":"purescript-transformers","item":["Control.Monad.Except.Trans","withExceptT"]},{"package":"purescript-transformers","item":["Control.Monad.Except.Trans","mapExceptT"]},{"package":"purescript-transformers","item":["Control.Monad.Cont.Class","MonadCont"]},{"package":"purescript-transformers","item":["Control.Monad.Cont.Trans","ContT"]},{"package":"purescript-transformers","item":["Control.Monad.Cont.Trans","runContT"]},{"package":"purescript-transformers","item":["Control.Monad.Cont.Trans","mapContT"]},{"package":"purescript-transformers","item":["Control.Monad.Cont.Trans","withContT"]},{"package":"purescript-transformers","item":["Control.Monad.RWS.Class","MonadRWS"]},{"package":"purescript-transformers","item":["Control.Monad.RWS.Trans","RWSResult"]},{"package":"purescript-transformers","item":["Control.Monad.RWS.Trans","RWST"]},{"package":"purescript-transformers","item":["Control.Monad.RWS.Trans","runRWST"]},{"package":"purescript-transformers","item":["Control.Monad.RWS.Trans","evalRWST"]},{"package":"purescript-transformers","item":["Control.Monad.RWS.Trans","execRWST"]},{"package":"purescript-transformers","item":["Control.Monad.RWS.Trans","mapRWST"]},{"package":"purescript-transformers","item":["Control.Monad.RWS.Trans","withRWST"]},{"package":"purescript-transformers","item":["Control.Monad.Reader.Class","MonadReader"]},{"package":"purescript-transformers","item":["Control.Monad.Reader.Class","reader"]},{"package":"purescript-transformers","item":["Control.Monad.Reader.Class","monadReaderFun"]},{"package":"purescript-transformers","item":["Control.Monad.Reader.Trans","ReaderT"]},{"package":"purescript-transformers","item":["Control.Monad.Reader.Trans","runReaderT"]},{"package":"purescript-transformers","item":["Control.Monad.Reader.Trans","mapReaderT"]},{"package":"purescript-transformers","item":["Control.Monad.Reader.Trans","withReaderT"]},{"package":"purescript-transformers","item":["Control.Monad.Error.Class","MonadError"]},{"package":"purescript-transformers","item":["Control.Monad.Error.Class","catchJust"]},{"package":"purescript-transformers","item":["Control.Monad.Error.Class","monadErrorEither"]},{"package":"purescript-transformers","item":["Control.Monad.Error.Class","monadErrorMaybe"]},{"package":"purescript-transformers","item":["Control.Monad.Maybe.Trans","MaybeT"]},{"package":"purescript-transformers","item":["Control.Monad.Maybe.Trans","runMaybeT"]},{"package":"purescript-transformers","item":["Control.Monad.Maybe.Trans","mapMaybeT"]},{"package":"purescript-transformers","item":["Control.Monad.Writer.Class","MonadWriter"]},{"package":"purescript-transformers","item":["Control.Monad.Writer.Class","tell"]},{"package":"purescript-transformers","item":["Control.Monad.Writer.Class","listens"]},{"package":"purescript-transformers","item":["Control.Monad.Writer.Class","censor"]},{"package":"purescript-transformers","item":["Control.Monad.Writer.Trans","WriterT"]},{"package":"purescript-transformers","item":["Control.Monad.Writer.Trans","runWriterT"]},{"package":"purescript-transformers","item":["Control.Monad.Writer.Trans","execWriterT"]},{"package":"purescript-transformers","item":["Control.Monad.Writer.Trans","mapWriterT"]},{"package":"purescript-transformers","item":["Control.Comonad.Traced","Traced"]},{"package":"purescript-transformers","item":["Control.Comonad.Traced","runTraced"]},{"package":"purescript-transformers","item":["Control.Comonad.Traced","traced"]},{"package":"purescript-transformers","item":["Control.Comonad.Store","Store"]},{"package":"purescript-transformers","item":["Control.Comonad.Store","runStore"]},{"package":"purescript-transformers","item":["Control.Comonad.Store","store"]},{"package":"purescript-transformers","item":["Control.Comonad.Env","Env"]},{"package":"purescript-transformers","item":["Control.Comonad.Env","runEnv"]},{"package":"purescript-transformers","item":["Control.Comonad.Env","withEnv"]},{"package":"purescript-transformers","item":["Control.Comonad.Env","mapEnv"]},{"package":"purescript-transformers","item":["Control.Comonad.Env","env"]},{"package":"purescript-transformers","item":["Control.Comonad.Trans","ComonadTrans"]},{"package":"purescript-transformers","item":["Control.Comonad.Store.Class","ComonadStore"]},{"package":"purescript-transformers","item":["Control.Comonad.Store.Class","experiment"]},{"package":"purescript-transformers","item":["Control.Comonad.Store.Class","peeks"]},{"package":"purescript-transformers","item":["Control.Comonad.Store.Class","seek"]},{"package":"purescript-transformers","item":["Control.Comonad.Store.Class","seeks"]},{"package":"purescript-transformers","item":["Control.Comonad.Store.Class","comonadStoreStoreT"]},{"package":"purescript-transformers","item":["Control.Comonad.Store.Trans","StoreT"]},{"package":"purescript-transformers","item":["Control.Comonad.Store.Trans","runStoreT"]},{"package":"purescript-transformers","item":["Control.Comonad.Store.Trans","functorStoreT"]},{"package":"purescript-transformers","item":["Control.Comonad.Store.Trans","extendStoreT"]},{"package":"purescript-transformers","item":["Control.Comonad.Store.Trans","comonadStoreT"]},{"package":"purescript-transformers","item":["Control.Comonad.Store.Trans","comonadTransStoreT"]},{"package":"purescript-transformers","item":["Control.Comonad.Traced.Class","ComonadTraced"]},{"package":"purescript-transformers","item":["Control.Comonad.Traced.Class","tracks"]},{"package":"purescript-transformers","item":["Control.Comonad.Traced.Class","listen"]},{"package":"purescript-transformers","item":["Control.Comonad.Traced.Class","listens"]},{"package":"purescript-transformers","item":["Control.Comonad.Traced.Class","censor"]},{"package":"purescript-transformers","item":["Control.Comonad.Traced.Class","comonadTracedTracedT"]},{"package":"purescript-transformers","item":["Control.Comonad.Traced.Trans","TracedT"]},{"package":"purescript-transformers","item":["Control.Comonad.Traced.Trans","runTracedT"]},{"package":"purescript-transformers","item":["Control.Comonad.Traced.Trans","functorTracedT"]},{"package":"purescript-transformers","item":["Control.Comonad.Traced.Trans","extendTracedT"]},{"package":"purescript-transformers","item":["Control.Comonad.Traced.Trans","comonadTracedT"]},{"package":"purescript-transformers","item":["Control.Comonad.Traced.Trans","comonadTransTracedT"]},{"package":"purescript-transformers","item":["Control.Comonad.Env.Class","ComonadEnv"]},{"package":"purescript-transformers","item":["Control.Comonad.Env.Class","asks"]},{"package":"purescript-transformers","item":["Control.Comonad.Env.Class","comonadEnvTuple"]},{"package":"purescript-transformers","item":["Control.Comonad.Env.Class","comonadEnvEnvT"]},{"package":"purescript-transformers","item":["Control.Comonad.Env.Trans","EnvT"]},{"package":"purescript-transformers","item":["Control.Comonad.Env.Trans","runEnvT"]},{"package":"purescript-transformers","item":["Control.Comonad.Env.Trans","withEnvT"]},{"package":"purescript-transformers","item":["Control.Comonad.Env.Trans","mapEnvT"]},{"package":"purescript-transformers","item":["Control.Comonad.Env.Trans","functorEnvT"]},{"package":"purescript-transformers","item":["Control.Comonad.Env.Trans","extendEnvT"]},{"package":"purescript-transformers","item":["Control.Comonad.Env.Trans","comonadEnvT"]},{"package":"purescript-transformers","item":["Control.Comonad.Env.Trans","comonadTransEnvT"]},{"package":"purescript-strings","item":["Data.String","charAt"]},{"package":"purescript-strings","item":["Data.String","fromChar"]},{"package":"purescript-strings","item":["Data.String","singleton"]},{"package":"purescript-strings","item":["Data.String","charCodeAt"]},{"package":"purescript-strings","item":["Data.String","toChar"]},{"package":"purescript-strings","item":["Data.String","null"]},{"package":"purescript-strings","item":["Data.String","uncons"]},{"package":"purescript-strings","item":["Data.String","uncons"]},{"package":"purescript-strings","item":["Data.String","takeWhile"]},{"package":"purescript-strings","item":["Data.String","dropWhile"]},{"package":"purescript-strings","item":["Data.String","stripPrefix"]},{"package":"purescript-strings","item":["Data.String","stripSuffix"]},{"package":"purescript-strings","item":["Data.String","fromCharArray"]},{"package":"purescript-strings","item":["Data.String","contains"]},{"package":"purescript-strings","item":["Data.String","indexOf"]},{"package":"purescript-strings","item":["Data.String","indexOf'"]},{"package":"purescript-strings","item":["Data.String","lastIndexOf"]},{"package":"purescript-strings","item":["Data.String","lastIndexOf'"]},{"package":"purescript-strings","item":["Data.String","length"]},{"package":"purescript-strings","item":["Data.String","localeCompare"]},{"package":"purescript-strings","item":["Data.String","replace"]},{"package":"purescript-strings","item":["Data.String","take"]},{"package":"purescript-strings","item":["Data.String","drop"]},{"package":"purescript-strings","item":["Data.String","count"]},{"package":"purescript-strings","item":["Data.String","split"]},{"package":"purescript-strings","item":["Data.String","toCharArray"]},{"package":"purescript-strings","item":["Data.String","toLower"]},{"package":"purescript-strings","item":["Data.String","toUpper"]},{"package":"purescript-strings","item":["Data.String","trim"]},{"package":"purescript-strings","item":["Data.String","joinWith"]},{"package":"purescript-strings","item":["Data.Char","toString"]},{"package":"purescript-strings","item":["Data.Char","toCharCode"]},{"package":"purescript-strings","item":["Data.Char","fromCharCode"]},{"package":"purescript-strings","item":["Data.Char","toLower"]},{"package":"purescript-strings","item":["Data.Char","toUpper"]},{"package":"purescript-strings","item":["Data.String.Unsafe","charCodeAt"]},{"package":"purescript-strings","item":["Data.String.Unsafe","charAt"]},{"package":"purescript-strings","item":["Data.String.Unsafe","char"]},{"package":"purescript-strings","item":["Data.String.Regex","Regex"]},{"package":"purescript-strings","item":["Data.String.Regex","RegexFlags"]},{"package":"purescript-strings","item":["Data.String.Regex","noFlags"]},{"package":"purescript-strings","item":["Data.String.Regex","regex"]},{"package":"purescript-strings","item":["Data.String.Regex","source"]},{"package":"purescript-strings","item":["Data.String.Regex","flags"]},{"package":"purescript-strings","item":["Data.String.Regex","renderFlags"]},{"package":"purescript-strings","item":["Data.String.Regex","parseFlags"]},{"package":"purescript-strings","item":["Data.String.Regex","test"]},{"package":"purescript-strings","item":["Data.String.Regex","match"]},{"package":"purescript-strings","item":["Data.String.Regex","replace"]},{"package":"purescript-strings","item":["Data.String.Regex","replace'"]},{"package":"purescript-strings","item":["Data.String.Regex","search"]},{"package":"purescript-strings","item":["Data.String.Regex","split"]},{"package":"purescript-tuples","item":["Data.Tuple","Tuple"]},{"package":"purescript-tuples","item":["Data.Tuple","showTuple"]},{"package":"purescript-tuples","item":["Data.Tuple","eqTuple"]},{"package":"purescript-tuples","item":["Data.Tuple","ordTuple"]},{"package":"purescript-tuples","item":["Data.Tuple","boundedTuple"]},{"package":"purescript-tuples","item":["Data.Tuple","boundedOrdTuple"]},{"package":"purescript-tuples","item":["Data.Tuple","semigroupoidTuple"]},{"package":"purescript-tuples","item":["Data.Tuple","semigroupTuple"]},{"package":"purescript-tuples","item":["Data.Tuple","monoidTuple"]},{"package":"purescript-tuples","item":["Data.Tuple","semiringTuple"]},{"package":"purescript-tuples","item":["Data.Tuple","moduloSemiringTuple"]},{"package":"purescript-tuples","item":["Data.Tuple","ringTuple"]},{"package":"purescript-tuples","item":["Data.Tuple","divisionRingTuple"]},{"package":"purescript-tuples","item":["Data.Tuple","numTuple"]},{"package":"purescript-tuples","item":["Data.Tuple","booleanAlgebraTuple"]},{"package":"purescript-tuples","item":["Data.Tuple","functorTuple"]},{"package":"purescript-tuples","item":["Data.Tuple","invariantTuple"]},{"package":"purescript-tuples","item":["Data.Tuple","bifunctorTuple"]},{"package":"purescript-tuples","item":["Data.Tuple","applyTuple"]},{"package":"purescript-tuples","item":["Data.Tuple","biapplyTuple"]},{"package":"purescript-tuples","item":["Data.Tuple","applicativeTuple"]},{"package":"purescript-tuples","item":["Data.Tuple","biapplicativeTuple"]},{"package":"purescript-tuples","item":["Data.Tuple","bindTuple"]},{"package":"purescript-tuples","item":["Data.Tuple","monadTuple"]},{"package":"purescript-tuples","item":["Data.Tuple","extendTuple"]},{"package":"purescript-tuples","item":["Data.Tuple","comonadTuple"]},{"package":"purescript-tuples","item":["Data.Tuple","lazyTuple"]},{"package":"purescript-tuples","item":["Data.Tuple","foldableTuple"]},{"package":"purescript-tuples","item":["Data.Tuple","bifoldableTuple"]},{"package":"purescript-tuples","item":["Data.Tuple","traversableTuple"]},{"package":"purescript-tuples","item":["Data.Tuple","bitraversableTuple"]},{"package":"purescript-tuples","item":["Data.Tuple","fst"]},{"package":"purescript-tuples","item":["Data.Tuple","snd"]},{"package":"purescript-tuples","item":["Data.Tuple","curry"]},{"package":"purescript-tuples","item":["Data.Tuple","uncurry"]},{"package":"purescript-tuples","item":["Data.Tuple","swap"]},{"package":"purescript-tuples","item":["Data.Tuple","lookup"]},{"package":"purescript-tuples","item":["Data.Tuple.Nested","Tuple2"]},{"package":"purescript-tuples","item":["Data.Tuple.Nested","Tuple3"]},{"package":"purescript-tuples","item":["Data.Tuple.Nested","Tuple4"]},{"package":"purescript-tuples","item":["Data.Tuple.Nested","Tuple5"]},{"package":"purescript-tuples","item":["Data.Tuple.Nested","Tuple6"]},{"package":"purescript-tuples","item":["Data.Tuple.Nested","Tuple7"]},{"package":"purescript-tuples","item":["Data.Tuple.Nested","Tuple8"]},{"package":"purescript-tuples","item":["Data.Tuple.Nested","Tuple9"]},{"package":"purescript-tuples","item":["Data.Tuple.Nested","Tuple10"]},{"package":"purescript-tuples","item":["Data.Tuple.Nested","tuple2"]},{"package":"purescript-tuples","item":["Data.Tuple.Nested","tuple3"]},{"package":"purescript-tuples","item":["Data.Tuple.Nested","tuple4"]},{"package":"purescript-tuples","item":["Data.Tuple.Nested","tuple5"]},{"package":"purescript-tuples","item":["Data.Tuple.Nested","tuple6"]},{"package":"purescript-tuples","item":["Data.Tuple.Nested","tuple7"]},{"package":"purescript-tuples","item":["Data.Tuple.Nested","tuple8"]},{"package":"purescript-tuples","item":["Data.Tuple.Nested","tuple9"]},{"package":"purescript-tuples","item":["Data.Tuple.Nested","tuple10"]},{"package":"purescript-tuples","item":["Data.Tuple.Nested","uncurry2"]},{"package":"purescript-tuples","item":["Data.Tuple.Nested","curry2"]},{"package":"purescript-tuples","item":["Data.Tuple.Nested","uncurry3"]},{"package":"purescript-tuples","item":["Data.Tuple.Nested","curry3"]},{"package":"purescript-tuples","item":["Data.Tuple.Nested","uncurry4"]},{"package":"purescript-tuples","item":["Data.Tuple.Nested","curry4"]},{"package":"purescript-tuples","item":["Data.Tuple.Nested","uncurry5"]},{"package":"purescript-tuples","item":["Data.Tuple.Nested","curry5"]},{"package":"purescript-tuples","item":["Data.Tuple.Nested","uncurry6"]},{"package":"purescript-tuples","item":["Data.Tuple.Nested","curry6"]},{"package":"purescript-tuples","item":["Data.Tuple.Nested","uncurry7"]},{"package":"purescript-tuples","item":["Data.Tuple.Nested","curry7"]},{"package":"purescript-tuples","item":["Data.Tuple.Nested","uncurry8"]},{"package":"purescript-tuples","item":["Data.Tuple.Nested","curry8"]},{"package":"purescript-tuples","item":["Data.Tuple.Nested","uncurry9"]},{"package":"purescript-tuples","item":["Data.Tuple.Nested","curry9"]},{"package":"purescript-tuples","item":["Data.Tuple.Nested","uncurry10"]},{"package":"purescript-tuples","item":["Data.Tuple.Nested","curry10"]},{"package":"purescript-tuples","item":["Data.Tuple.Nested","(/\\)"]},{"package":"purescript-tuples","item":["Data.Tuple.Nested","(/\\)"]},{"package":"purescript-datetime","item":["Data.Time","HourOfDay"]},{"package":"purescript-datetime","item":["Data.Time","eqHourOfDay"]},{"package":"purescript-datetime","item":["Data.Time","ordHourOfDay"]},{"package":"purescript-datetime","item":["Data.Time","Hours"]},{"package":"purescript-datetime","item":["Data.Time","eqHours"]},{"package":"purescript-datetime","item":["Data.Time","ordHours"]},{"package":"purescript-datetime","item":["Data.Time","semiringHours"]},{"package":"purescript-datetime","item":["Data.Time","ringHours"]},{"package":"purescript-datetime","item":["Data.Time","moduloSemiringHours"]},{"package":"purescript-datetime","item":["Data.Time","divisionRingHours"]},{"package":"purescript-datetime","item":["Data.Time","numHours"]},{"package":"purescript-datetime","item":["Data.Time","showHours"]},{"package":"purescript-datetime","item":["Data.Time","MinuteOfHour"]},{"package":"purescript-datetime","item":["Data.Time","eqMinuteOfHour"]},{"package":"purescript-datetime","item":["Data.Time","ordMinuteOfHour"]},{"package":"purescript-datetime","item":["Data.Time","Minutes"]},{"package":"purescript-datetime","item":["Data.Time","eqMinutes"]},{"package":"purescript-datetime","item":["Data.Time","ordMinutes"]},{"package":"purescript-datetime","item":["Data.Time","semiringMinutes"]},{"package":"purescript-datetime","item":["Data.Time","ringMinutes"]},{"package":"purescript-datetime","item":["Data.Time","moduloSemiringMinutes"]},{"package":"purescript-datetime","item":["Data.Time","divisionRingMinutes"]},{"package":"purescript-datetime","item":["Data.Time","numMinutes"]},{"package":"purescript-datetime","item":["Data.Time","showMinutes"]},{"package":"purescript-datetime","item":["Data.Time","SecondOfMinute"]},{"package":"purescript-datetime","item":["Data.Time","eqSecondOfMinute"]},{"package":"purescript-datetime","item":["Data.Time","ordSecondOfMinute"]},{"package":"purescript-datetime","item":["Data.Time","Seconds"]},{"package":"purescript-datetime","item":["Data.Time","eqSeconds"]},{"package":"purescript-datetime","item":["Data.Time","ordSeconds"]},{"package":"purescript-datetime","item":["Data.Time","semiringSeconds"]},{"package":"purescript-datetime","item":["Data.Time","ringSeconds"]},{"package":"purescript-datetime","item":["Data.Time","moduloSemiringSeconds"]},{"package":"purescript-datetime","item":["Data.Time","divisionRingSeconds"]},{"package":"purescript-datetime","item":["Data.Time","numSeconds"]},{"package":"purescript-datetime","item":["Data.Time","showSeconds"]},{"package":"purescript-datetime","item":["Data.Time","MillisecondOfSecond"]},{"package":"purescript-datetime","item":["Data.Time","eqMillisecondOfSecond"]},{"package":"purescript-datetime","item":["Data.Time","ordMillisecondOfSecond"]},{"package":"purescript-datetime","item":["Data.Time","Milliseconds"]},{"package":"purescript-datetime","item":["Data.Time","eqMilliseconds"]},{"package":"purescript-datetime","item":["Data.Time","ordMilliseconds"]},{"package":"purescript-datetime","item":["Data.Time","semiringMilliseconds"]},{"package":"purescript-datetime","item":["Data.Time","ringMilliseconds"]},{"package":"purescript-datetime","item":["Data.Time","moduloSemiringMilliseconds"]},{"package":"purescript-datetime","item":["Data.Time","divisionRingMilliseconds"]},{"package":"purescript-datetime","item":["Data.Time","numMilliseconds"]},{"package":"purescript-datetime","item":["Data.Time","showMilliseconds"]},{"package":"purescript-datetime","item":["Data.Time","TimeValue"]},{"package":"purescript-datetime","item":["Data.Time","timeValueHours"]},{"package":"purescript-datetime","item":["Data.Time","timeValueMinutes"]},{"package":"purescript-datetime","item":["Data.Time","timeValueSeconds"]},{"package":"purescript-datetime","item":["Data.Time","timeValueMilliseconds"]},{"package":"purescript-datetime","item":["Data.Date","JSDate"]},{"package":"purescript-datetime","item":["Data.Date","Date"]},{"package":"purescript-datetime","item":["Data.Date","fromJSDate"]},{"package":"purescript-datetime","item":["Data.Date","toJSDate"]},{"package":"purescript-datetime","item":["Data.Date","fromEpochMilliseconds"]},{"package":"purescript-datetime","item":["Data.Date","toEpochMilliseconds"]},{"package":"purescript-datetime","item":["Data.Date","fromString"]},{"package":"purescript-datetime","item":["Data.Date","fromStringStrict"]},{"package":"purescript-datetime","item":["Data.Date","Now"]},{"package":"purescript-datetime","item":["Data.Date","now"]},{"package":"purescript-datetime","item":["Data.Date","nowEpochMilliseconds"]},{"package":"purescript-datetime","item":["Data.Date","LocaleOffset"]},{"package":"purescript-datetime","item":["Data.Date","timezoneOffset"]},{"package":"purescript-datetime","item":["Data.Date","toISOString"]},{"package":"purescript-datetime","item":["Data.Date","Year"]},{"package":"purescript-datetime","item":["Data.Date","Month"]},{"package":"purescript-datetime","item":["Data.Date","DayOfMonth"]},{"package":"purescript-datetime","item":["Data.Date","DayOfWeek"]},{"package":"purescript-datetime","item":["Data.Date.UTC","dateTime"]},{"package":"purescript-datetime","item":["Data.Date.UTC","date"]},{"package":"purescript-datetime","item":["Data.Date.UTC","year"]},{"package":"purescript-datetime","item":["Data.Date.UTC","month"]},{"package":"purescript-datetime","item":["Data.Date.UTC","dayOfMonth"]},{"package":"purescript-datetime","item":["Data.Date.UTC","dayOfWeek"]},{"package":"purescript-datetime","item":["Data.Date.UTC","hourOfDay"]},{"package":"purescript-datetime","item":["Data.Date.UTC","minuteOfHour"]},{"package":"purescript-datetime","item":["Data.Date.UTC","secondOfMinute"]},{"package":"purescript-datetime","item":["Data.Date.UTC","millisecondOfSecond"]},{"package":"purescript-datetime","item":["Data.Date.Locale","Locale"]},{"package":"purescript-datetime","item":["Data.Date.Locale","dateTime"]},{"package":"purescript-datetime","item":["Data.Date.Locale","date"]},{"package":"purescript-datetime","item":["Data.Date.Locale","year"]},{"package":"purescript-datetime","item":["Data.Date.Locale","month"]},{"package":"purescript-datetime","item":["Data.Date.Locale","dayOfMonth"]},{"package":"purescript-datetime","item":["Data.Date.Locale","dayOfWeek"]},{"package":"purescript-datetime","item":["Data.Date.Locale","hourOfDay"]},{"package":"purescript-datetime","item":["Data.Date.Locale","minuteOfHour"]},{"package":"purescript-datetime","item":["Data.Date.Locale","secondOfMinute"]},{"package":"purescript-datetime","item":["Data.Date.Locale","millisecondOfSecond"]},{"package":"purescript-datetime","item":["Data.Date.Locale","toLocaleString"]},{"package":"purescript-datetime","item":["Data.Date.Locale","toLocaleTimeString"]},{"package":"purescript-datetime","item":["Data.Date.Locale","toLocaleDateString"]},{"package":"purescript-functions","item":["Data.Function","on"]},{"package":"purescript-functions","item":["Data.Function","Fn0"]},{"package":"purescript-functions","item":["Data.Function","Fn1"]},{"package":"purescript-functions","item":["Data.Function","Fn2"]},{"package":"purescript-functions","item":["Data.Function","Fn3"]},{"package":"purescript-functions","item":["Data.Function","Fn4"]},{"package":"purescript-functions","item":["Data.Function","Fn5"]},{"package":"purescript-functions","item":["Data.Function","Fn6"]},{"package":"purescript-functions","item":["Data.Function","Fn7"]},{"package":"purescript-functions","item":["Data.Function","Fn8"]},{"package":"purescript-functions","item":["Data.Function","Fn9"]},{"package":"purescript-functions","item":["Data.Function","Fn10"]},{"package":"purescript-functions","item":["Data.Function","mkFn0"]},{"package":"purescript-functions","item":["Data.Function","mkFn1"]},{"package":"purescript-functions","item":["Data.Function","mkFn2"]},{"package":"purescript-functions","item":["Data.Function","mkFn3"]},{"package":"purescript-functions","item":["Data.Function","mkFn4"]},{"package":"purescript-functions","item":["Data.Function","mkFn5"]},{"package":"purescript-functions","item":["Data.Function","mkFn6"]},{"package":"purescript-functions","item":["Data.Function","mkFn7"]},{"package":"purescript-functions","item":["Data.Function","mkFn8"]},{"package":"purescript-functions","item":["Data.Function","mkFn9"]},{"package":"purescript-functions","item":["Data.Function","mkFn10"]},{"package":"purescript-functions","item":["Data.Function","runFn0"]},{"package":"purescript-functions","item":["Data.Function","runFn1"]},{"package":"purescript-functions","item":["Data.Function","runFn2"]},{"package":"purescript-functions","item":["Data.Function","runFn3"]},{"package":"purescript-functions","item":["Data.Function","runFn4"]},{"package":"purescript-functions","item":["Data.Function","runFn5"]},{"package":"purescript-functions","item":["Data.Function","runFn6"]},{"package":"purescript-functions","item":["Data.Function","runFn7"]},{"package":"purescript-functions","item":["Data.Function","runFn8"]},{"package":"purescript-functions","item":["Data.Function","runFn9"]},{"package":"purescript-functions","item":["Data.Function","runFn10"]},{"package":"purescript-globals","item":["Global","nan"]},{"package":"purescript-globals","item":["Global","isNaN"]},{"package":"purescript-globals","item":["Global","infinity"]},{"package":"purescript-globals","item":["Global","isFinite"]},{"package":"purescript-globals","item":["Global","readInt"]},{"package":"purescript-globals","item":["Global","readFloat"]},{"package":"purescript-globals","item":["Global","decodeURI"]},{"package":"purescript-globals","item":["Global","encodeURI"]},{"package":"purescript-globals","item":["Global","decodeURIComponent"]},{"package":"purescript-globals","item":["Global","encodeURIComponent"]},{"package":"purescript-globals","item":["Global.Unsafe","unsafeStringify"]},{"package":"purescript-orders","item":["Data.Ord","invert"]},{"package":"purescript-orders","item":["Data.Ord","invert"]},{"package":"purescript-orders","item":["Data.Ord","invert"]},{"package":"purescript-orders","item":["Data.Ord","comparing"]},{"package":"purescript-orders","item":["Data.Ord","Down"]},{"package":"purescript-orders","item":["Data.Ord","eqDown"]},{"package":"purescript-orders","item":["Data.Ord","showDown"]},{"package":"purescript-orders","item":["Data.Ord","ordDown"]},{"package":"purescript-orders","item":["Data.Ord","clamp"]},{"package":"purescript-orders","item":["Data.Ord","between"]},{"package":"purescript-orders","item":["Data.Ord","min"]},{"package":"purescript-orders","item":["Data.Ord","max"]},{"package":"purescript-orders","item":["Data.Ord","Min"]},{"package":"purescript-orders","item":["Data.Ord","runMin"]},{"package":"purescript-orders","item":["Data.Ord","eqMin"]},{"package":"purescript-orders","item":["Data.Ord","showMin"]},{"package":"purescript-orders","item":["Data.Ord","ordMin"]},{"package":"purescript-orders","item":["Data.Ord","semigroupMin"]},{"package":"purescript-orders","item":["Data.Ord","monoidMin"]},{"package":"purescript-orders","item":["Data.Ord","Max"]},{"package":"purescript-orders","item":["Data.Ord","runMax"]},{"package":"purescript-orders","item":["Data.Ord","eqMax"]},{"package":"purescript-orders","item":["Data.Ord","showMax"]},{"package":"purescript-orders","item":["Data.Ord","ordMax"]},{"package":"purescript-orders","item":["Data.Ord","semigroupMax"]},{"package":"purescript-orders","item":["Data.Ord","monoidMax"]},{"package":"purescript-math","item":["Math","Radians"]},{"package":"purescript-math","item":["Math","abs"]},{"package":"purescript-math","item":["Math","acos"]},{"package":"purescript-math","item":["Math","asin"]},{"package":"purescript-math","item":["Math","atan"]},{"package":"purescript-math","item":["Math","atan2"]},{"package":"purescript-math","item":["Math","ceil"]},{"package":"purescript-math","item":["Math","cos"]},{"package":"purescript-math","item":["Math","exp"]},{"package":"purescript-math","item":["Math","floor"]},{"package":"purescript-math","item":["Math","log"]},{"package":"purescript-math","item":["Math","max"]},{"package":"purescript-math","item":["Math","min"]},{"package":"purescript-math","item":["Math","pow"]},{"package":"purescript-math","item":["Math","round"]},{"package":"purescript-math","item":["Math","sin"]},{"package":"purescript-math","item":["Math","sqrt"]},{"package":"purescript-math","item":["Math","tan"]},{"package":"purescript-math","item":["Math","(%)"]},{"package":"purescript-math","item":["Math","(%)"]},{"package":"purescript-math","item":["Math","e"]},{"package":"purescript-math","item":["Math","ln2"]},{"package":"purescript-math","item":["Math","ln10"]},{"package":"purescript-math","item":["Math","log2e"]},{"package":"purescript-math","item":["Math","log10e"]},{"package":"purescript-math","item":["Math","pi"]},{"package":"purescript-math","item":["Math","sqrt1_2"]},{"package":"purescript-math","item":["Math","sqrt2"]},{"package":"purescript-foldable-traversable","item":["Data.Bifoldable","Bifoldable"]},{"package":"purescript-foldable-traversable","item":["Data.Bifoldable","bifoldrDefault"]},{"package":"purescript-foldable-traversable","item":["Data.Bifoldable","bifoldlDefault"]},{"package":"purescript-foldable-traversable","item":["Data.Bifoldable","bifoldMapDefaultR"]},{"package":"purescript-foldable-traversable","item":["Data.Bifoldable","bifoldMapDefaultL"]},{"package":"purescript-foldable-traversable","item":["Data.Bifoldable","bifold"]},{"package":"purescript-foldable-traversable","item":["Data.Bifoldable","bitraverse_"]},{"package":"purescript-foldable-traversable","item":["Data.Bifoldable","bifor_"]},{"package":"purescript-foldable-traversable","item":["Data.Bifoldable","bisequence_"]},{"package":"purescript-foldable-traversable","item":["Data.Bifoldable","biany"]},{"package":"purescript-foldable-traversable","item":["Data.Bifoldable","biall"]},{"package":"purescript-foldable-traversable","item":["Data.Foldable","Foldable"]},{"package":"purescript-foldable-traversable","item":["Data.Foldable","foldrDefault"]},{"package":"purescript-foldable-traversable","item":["Data.Foldable","foldlDefault"]},{"package":"purescript-foldable-traversable","item":["Data.Foldable","foldMapDefaultR"]},{"package":"purescript-foldable-traversable","item":["Data.Foldable","foldMapDefaultL"]},{"package":"purescript-foldable-traversable","item":["Data.Foldable","fold"]},{"package":"purescript-foldable-traversable","item":["Data.Foldable","traverse_"]},{"package":"purescript-foldable-traversable","item":["Data.Foldable","for_"]},{"package":"purescript-foldable-traversable","item":["Data.Foldable","sequence_"]},{"package":"purescript-foldable-traversable","item":["Data.Foldable","mconcat"]},{"package":"purescript-foldable-traversable","item":["Data.Foldable","intercalate"]},{"package":"purescript-foldable-traversable","item":["Data.Foldable","and"]},{"package":"purescript-foldable-traversable","item":["Data.Foldable","or"]},{"package":"purescript-foldable-traversable","item":["Data.Foldable","any"]},{"package":"purescript-foldable-traversable","item":["Data.Foldable","all"]},{"package":"purescript-foldable-traversable","item":["Data.Foldable","sum"]},{"package":"purescript-foldable-traversable","item":["Data.Foldable","product"]},{"package":"purescript-foldable-traversable","item":["Data.Foldable","elem"]},{"package":"purescript-foldable-traversable","item":["Data.Foldable","notElem"]},{"package":"purescript-foldable-traversable","item":["Data.Foldable","find"]},{"package":"purescript-foldable-traversable","item":["Data.Foldable","maximum"]},{"package":"purescript-foldable-traversable","item":["Data.Foldable","maximumBy"]},{"package":"purescript-foldable-traversable","item":["Data.Foldable","minimum"]},{"package":"purescript-foldable-traversable","item":["Data.Foldable","minimumBy"]},{"package":"purescript-foldable-traversable","item":["Data.Bitraversable","Bitraversable"]},{"package":"purescript-foldable-traversable","item":["Data.Bitraversable","bitraverseDefault"]},{"package":"purescript-foldable-traversable","item":["Data.Bitraversable","bisequenceDefault"]},{"package":"purescript-foldable-traversable","item":["Data.Bitraversable","bifor"]},{"package":"purescript-foldable-traversable","item":["Data.Traversable","Traversable"]},{"package":"purescript-foldable-traversable","item":["Data.Traversable","traverseDefault"]},{"package":"purescript-foldable-traversable","item":["Data.Traversable","sequenceDefault"]},{"package":"purescript-foldable-traversable","item":["Data.Traversable","for"]},{"package":"purescript-foldable-traversable","item":["Data.Traversable","Accum"]},{"package":"purescript-foldable-traversable","item":["Data.Traversable","scanl"]},{"package":"purescript-foldable-traversable","item":["Data.Traversable","mapAccumL"]},{"package":"purescript-foldable-traversable","item":["Data.Traversable","scanr"]},{"package":"purescript-foldable-traversable","item":["Data.Traversable","mapAccumR"]},{"package":"purescript-debug","item":["Debug.Trace","trace"]},{"package":"purescript-debug","item":["Debug.Trace","traceShow"]},{"package":"purescript-debug","item":["Debug.Trace","traceAny"]},{"package":"purescript-debug","item":["Debug.Trace","spy"]},{"package":"purescript-debug","item":["Debug.Trace","traceAnyA"]},{"package":"purescript-debug","item":["Debug.Trace","traceA"]},{"package":"purescript-debug","item":["Debug.Trace","traceShowA"]},{"package":"purescript-debug","item":["Debug.Trace","traceAnyM"]},{"package":"purescript-debug","item":["Debug.Trace","traceShowM"]},{"package":"purescript-bifunctors","item":["Control.Biapply","(<<$>>)"]},{"package":"purescript-bifunctors","item":["Control.Biapply","(<<*>>)"]},{"package":"purescript-bifunctors","item":["Control.Biapply","(<<*)"]},{"package":"purescript-bifunctors","item":["Control.Biapply","(*>>)"]},{"package":"purescript-bifunctors","item":["Control.Biapply","(<<$>>)"]},{"package":"purescript-bifunctors","item":["Control.Biapply","Biapply"]},{"package":"purescript-bifunctors","item":["Control.Biapply","(<<*>>)"]},{"package":"purescript-bifunctors","item":["Control.Biapply","(*>>)"]},{"package":"purescript-bifunctors","item":["Control.Biapply","(<<*)"]},{"package":"purescript-bifunctors","item":["Control.Biapply","bilift2"]},{"package":"purescript-bifunctors","item":["Control.Biapply","bilift3"]},{"package":"purescript-bifunctors","item":["Control.Biapplicative","Biapplicative"]},{"package":"purescript-bifunctors","item":["Data.Bifunctor","Bifunctor"]},{"package":"purescript-bifunctors","item":["Data.Bifunctor","lmap"]},{"package":"purescript-bifunctors","item":["Data.Bifunctor","rmap"]},{"package":"purescript-bifunctors","item":["Data.Bifunctor.Join","Join"]},{"package":"purescript-bifunctors","item":["Data.Bifunctor.Join","runJoin"]},{"package":"purescript-bifunctors","item":["Data.Bifunctor.Join","joinFunctor"]},{"package":"purescript-bifunctors","item":["Data.Bifunctor.Join","joinApply"]},{"package":"purescript-bifunctors","item":["Data.Bifunctor.Join","joinApplicative"]},{"package":"purescript-bifunctors","item":["Data.Bifunctor.Clown","Clown"]},{"package":"purescript-bifunctors","item":["Data.Bifunctor.Clown","runClown"]},{"package":"purescript-bifunctors","item":["Data.Bifunctor.Clown","clownBifunctor"]},{"package":"purescript-bifunctors","item":["Data.Bifunctor.Clown","clownFunctor"]},{"package":"purescript-bifunctors","item":["Data.Bifunctor.Clown","clownBiapply"]},{"package":"purescript-bifunctors","item":["Data.Bifunctor.Clown","clownBiapplicative"]},{"package":"purescript-bifunctors","item":["Data.Bifunctor.Joker","Joker"]},{"package":"purescript-bifunctors","item":["Data.Bifunctor.Joker","runJoker"]},{"package":"purescript-bifunctors","item":["Data.Bifunctor.Joker","jokerBifunctor"]},{"package":"purescript-bifunctors","item":["Data.Bifunctor.Joker","jokerFunctor"]},{"package":"purescript-bifunctors","item":["Data.Bifunctor.Joker","jokerBiapply"]},{"package":"purescript-bifunctors","item":["Data.Bifunctor.Joker","jokerBiapplicative"]},{"package":"purescript-bifunctors","item":["Data.Bifunctor.Product","Product"]},{"package":"purescript-bifunctors","item":["Data.Bifunctor.Product","productBifunctor"]},{"package":"purescript-bifunctors","item":["Data.Bifunctor.Product","productBiapply"]},{"package":"purescript-bifunctors","item":["Data.Bifunctor.Product","productBiapplicative"]},{"package":"purescript-bifunctors","item":["Data.Bifunctor.Flip","Flip"]},{"package":"purescript-bifunctors","item":["Data.Bifunctor.Flip","runFlip"]},{"package":"purescript-bifunctors","item":["Data.Bifunctor.Flip","flipBifunctor"]},{"package":"purescript-bifunctors","item":["Data.Bifunctor.Flip","flipFunctor"]},{"package":"purescript-bifunctors","item":["Data.Bifunctor.Flip","flipBiapply"]},{"package":"purescript-bifunctors","item":["Data.Bifunctor.Flip","flipBiapplicative"]},{"package":"purescript-bifunctors","item":["Data.Bifunctor.Wrap","Wrap"]},{"package":"purescript-bifunctors","item":["Data.Bifunctor.Wrap","unwrap"]},{"package":"purescript-bifunctors","item":["Data.Bifunctor.Wrap","wrapBifunctor"]},{"package":"purescript-bifunctors","item":["Data.Bifunctor.Wrap","wrapFunctor"]},{"package":"purescript-bifunctors","item":["Data.Bifunctor.Wrap","wrapBiapply"]},{"package":"purescript-bifunctors","item":["Data.Bifunctor.Wrap","wrapBiapplicative"]},{"package":"purescript-unfoldable","item":["Data.Unfoldable","Unfoldable"]},{"package":"purescript-unfoldable","item":["Data.Unfoldable","unfoldableArray"]},{"package":"purescript-unfoldable","item":["Data.Unfoldable","replicate"]},{"package":"purescript-unfoldable","item":["Data.Unfoldable","replicateA"]},{"package":"purescript-unfoldable","item":["Data.Unfoldable","none"]},{"package":"purescript-unfoldable","item":["Data.Unfoldable","singleton"]},{"package":"purescript-control","item":["Control.Lazy","Lazy"]},{"package":"purescript-control","item":["Control.Lazy","fix"]},{"package":"purescript-control","item":["Control.Extend","(=>>)"]},{"package":"purescript-control","item":["Control.Extend","(<<=)"]},{"package":"purescript-control","item":["Control.Extend","(=>=)"]},{"package":"purescript-control","item":["Control.Extend","(=<=)"]},{"package":"purescript-control","item":["Control.Extend","Extend"]},{"package":"purescript-control","item":["Control.Extend","extendFn"]},{"package":"purescript-control","item":["Control.Extend","(<<=)"]},{"package":"purescript-control","item":["Control.Extend","(=>>)"]},{"package":"purescript-control","item":["Control.Extend","(=>=)"]},{"package":"purescript-control","item":["Control.Extend","(=<=)"]},{"package":"purescript-control","item":["Control.Extend","duplicate"]},{"package":"purescript-control","item":["Control.Alternative","Alternative"]},{"package":"purescript-control","item":["Control.Alternative","alternativeArray"]},{"package":"purescript-control","item":["Control.Comonad","Comonad"]},{"package":"purescript-control","item":["Control.Apply","(<*)"]},{"package":"purescript-control","item":["Control.Apply","(*>)"]},{"package":"purescript-control","item":["Control.Apply","(<*)"]},{"package":"purescript-control","item":["Control.Apply","(*>)"]},{"package":"purescript-control","item":["Control.Apply","lift2"]},{"package":"purescript-control","item":["Control.Apply","lift3"]},{"package":"purescript-control","item":["Control.Apply","lift4"]},{"package":"purescript-control","item":["Control.Apply","lift5"]},{"package":"purescript-control","item":["Control.Monad","when"]},{"package":"purescript-control","item":["Control.Monad","when"]},{"package":"purescript-control","item":["Control.Monad","unless"]},{"package":"purescript-control","item":["Control.Monad","unless"]},{"package":"purescript-control","item":["Control.Bind","(=<<)"]},{"package":"purescript-control","item":["Control.Bind","(>=>)"]},{"package":"purescript-control","item":["Control.Bind","(<=<)"]},{"package":"purescript-control","item":["Control.Bind","(=<<)"]},{"package":"purescript-control","item":["Control.Bind","(>=>)"]},{"package":"purescript-control","item":["Control.Bind","(<=<)"]},{"package":"purescript-control","item":["Control.Bind","join"]},{"package":"purescript-control","item":["Control.Bind","ifM"]},{"package":"purescript-control","item":["Control.Alt","Alt"]},{"package":"purescript-control","item":["Control.Alt","(<|>)"]},{"package":"purescript-control","item":["Control.Alt","(<|>)"]},{"package":"purescript-control","item":["Control.Alt","altArray"]},{"package":"purescript-control","item":["Control.MonadPlus","MonadPlus"]},{"package":"purescript-control","item":["Control.MonadPlus","guard"]},{"package":"purescript-control","item":["Control.MonadPlus","guard"]},{"package":"purescript-control","item":["Control.MonadPlus","monadPlusArray"]},{"package":"purescript-control","item":["Control.Plus","Plus"]},{"package":"purescript-control","item":["Control.Plus","plusArray"]},{"package":"purescript-control","item":["Data.Functor","(<$)"]},{"package":"purescript-control","item":["Data.Functor","($>)"]},{"package":"purescript-control","item":["Data.Functor","(<$)"]},{"package":"purescript-control","item":["Data.Functor","($>)"]},{"package":"purescript-monoid","item":["Data.Monoid","Monoid"]},{"package":"purescript-monoid","item":["Data.Monoid","monoidUnit"]},{"package":"purescript-monoid","item":["Data.Monoid","monoidFn"]},{"package":"purescript-monoid","item":["Data.Monoid","monoidString"]},{"package":"purescript-monoid","item":["Data.Monoid","monoidArray"]},{"package":"purescript-monoid","item":["Data.Monoid.Conj","Conj"]},{"package":"purescript-monoid","item":["Data.Monoid.Conj","runConj"]},{"package":"purescript-monoid","item":["Data.Monoid.Conj","eqConj"]},{"package":"purescript-monoid","item":["Data.Monoid.Conj","ordConj"]},{"package":"purescript-monoid","item":["Data.Monoid.Conj","boundedConj"]},{"package":"purescript-monoid","item":["Data.Monoid.Conj","functorConj"]},{"package":"purescript-monoid","item":["Data.Monoid.Conj","applyConj"]},{"package":"purescript-monoid","item":["Data.Monoid.Conj","applicativeConj"]},{"package":"purescript-monoid","item":["Data.Monoid.Conj","bindConj"]},{"package":"purescript-monoid","item":["Data.Monoid.Conj","monadConj"]},{"package":"purescript-monoid","item":["Data.Monoid.Conj","extendConj"]},{"package":"purescript-monoid","item":["Data.Monoid.Conj","comonadConj"]},{"package":"purescript-monoid","item":["Data.Monoid.Conj","showConj"]},{"package":"purescript-monoid","item":["Data.Monoid.Conj","semigroupConj"]},{"package":"purescript-monoid","item":["Data.Monoid.Conj","monoidConj"]},{"package":"purescript-monoid","item":["Data.Monoid.Conj","semiringConj"]},{"package":"purescript-monoid","item":["Data.Monoid.Multiplicative","Multiplicative"]},{"package":"purescript-monoid","item":["Data.Monoid.Multiplicative","runMultiplicative"]},{"package":"purescript-monoid","item":["Data.Monoid.Multiplicative","eqMultiplicative"]},{"package":"purescript-monoid","item":["Data.Monoid.Multiplicative","ordMultiplicative"]},{"package":"purescript-monoid","item":["Data.Monoid.Multiplicative","functorMultiplicative"]},{"package":"purescript-monoid","item":["Data.Monoid.Multiplicative","applyMultiplicative"]},{"package":"purescript-monoid","item":["Data.Monoid.Multiplicative","applicativeMultiplicative"]},{"package":"purescript-monoid","item":["Data.Monoid.Multiplicative","bindMultiplicative"]},{"package":"purescript-monoid","item":["Data.Monoid.Multiplicative","monadMultiplicative"]},{"package":"purescript-monoid","item":["Data.Monoid.Multiplicative","extendMultiplicative"]},{"package":"purescript-monoid","item":["Data.Monoid.Multiplicative","comonadMultiplicative"]},{"package":"purescript-monoid","item":["Data.Monoid.Multiplicative","invariantMultiplicative"]},{"package":"purescript-monoid","item":["Data.Monoid.Multiplicative","showMultiplicative"]},{"package":"purescript-monoid","item":["Data.Monoid.Multiplicative","semigroupMultiplicative"]},{"package":"purescript-monoid","item":["Data.Monoid.Multiplicative","monoidMultiplicative"]},{"package":"purescript-monoid","item":["Data.Monoid.Additive","Additive"]},{"package":"purescript-monoid","item":["Data.Monoid.Additive","runAdditive"]},{"package":"purescript-monoid","item":["Data.Monoid.Additive","eqAdditive"]},{"package":"purescript-monoid","item":["Data.Monoid.Additive","ordAdditive"]},{"package":"purescript-monoid","item":["Data.Monoid.Additive","functorAdditive"]},{"package":"purescript-monoid","item":["Data.Monoid.Additive","applyAdditive"]},{"package":"purescript-monoid","item":["Data.Monoid.Additive","applicativeAdditive"]},{"package":"purescript-monoid","item":["Data.Monoid.Additive","bindAdditive"]},{"package":"purescript-monoid","item":["Data.Monoid.Additive","monadAdditive"]},{"package":"purescript-monoid","item":["Data.Monoid.Additive","extendAdditive"]},{"package":"purescript-monoid","item":["Data.Monoid.Additive","comonadAdditive"]},{"package":"purescript-monoid","item":["Data.Monoid.Additive","invariantAdditive"]},{"package":"purescript-monoid","item":["Data.Monoid.Additive","showAdditive"]},{"package":"purescript-monoid","item":["Data.Monoid.Additive","semigroupAdditive"]},{"package":"purescript-monoid","item":["Data.Monoid.Additive","monoidAdditive"]},{"package":"purescript-monoid","item":["Data.Monoid.Endo","Endo"]},{"package":"purescript-monoid","item":["Data.Monoid.Endo","runEndo"]},{"package":"purescript-monoid","item":["Data.Monoid.Endo","invariantEndo"]},{"package":"purescript-monoid","item":["Data.Monoid.Endo","semigroupEndo"]},{"package":"purescript-monoid","item":["Data.Monoid.Endo","monoidEndo"]},{"package":"purescript-monoid","item":["Data.Monoid.Dual","Dual"]},{"package":"purescript-monoid","item":["Data.Monoid.Dual","runDual"]},{"package":"purescript-monoid","item":["Data.Monoid.Dual","eqDual"]},{"package":"purescript-monoid","item":["Data.Monoid.Dual","ordDual"]},{"package":"purescript-monoid","item":["Data.Monoid.Dual","functorDual"]},{"package":"purescript-monoid","item":["Data.Monoid.Dual","applyDual"]},{"package":"purescript-monoid","item":["Data.Monoid.Dual","applicativeDual"]},{"package":"purescript-monoid","item":["Data.Monoid.Dual","bindDual"]},{"package":"purescript-monoid","item":["Data.Monoid.Dual","monadDual"]},{"package":"purescript-monoid","item":["Data.Monoid.Dual","extendDual"]},{"package":"purescript-monoid","item":["Data.Monoid.Dual","comonadDual"]},{"package":"purescript-monoid","item":["Data.Monoid.Dual","invariantDual"]},{"package":"purescript-monoid","item":["Data.Monoid.Dual","showDual"]},{"package":"purescript-monoid","item":["Data.Monoid.Dual","semigroupDual"]},{"package":"purescript-monoid","item":["Data.Monoid.Dual","monoidDual"]},{"package":"purescript-monoid","item":["Data.Monoid.Disj","Disj"]},{"package":"purescript-monoid","item":["Data.Monoid.Disj","runDisj"]},{"package":"purescript-monoid","item":["Data.Monoid.Disj","eqDisj"]},{"package":"purescript-monoid","item":["Data.Monoid.Disj","ordDisj"]},{"package":"purescript-monoid","item":["Data.Monoid.Disj","boundedDisj"]},{"package":"purescript-monoid","item":["Data.Monoid.Disj","functorDisj"]},{"package":"purescript-monoid","item":["Data.Monoid.Disj","applyDisj"]},{"package":"purescript-monoid","item":["Data.Monoid.Disj","applicativeDisj"]},{"package":"purescript-monoid","item":["Data.Monoid.Disj","bindDisj"]},{"package":"purescript-monoid","item":["Data.Monoid.Disj","monadDisj"]},{"package":"purescript-monoid","item":["Data.Monoid.Disj","extendDisj"]},{"package":"purescript-monoid","item":["Data.Monoid.Disj","comonadDisj"]},{"package":"purescript-monoid","item":["Data.Monoid.Disj","showDisj"]},{"package":"purescript-monoid","item":["Data.Monoid.Disj","semigroupDisj"]},{"package":"purescript-monoid","item":["Data.Monoid.Disj","monoidDisj"]},{"package":"purescript-monoid","item":["Data.Monoid.Disj","semiringDisj"]},{"package":"purescript-distributive","item":["Data.Distributive","Distributive"]},{"package":"purescript-distributive","item":["Data.Distributive","cotraverse"]},{"package":"purescript-distributive","item":["Data.Distributive","distributiveIdentity"]},{"package":"purescript-distributive","item":["Data.Distributive","distributiveFunction"]},{"package":"purescript-lazy","item":["Data.Lazy","Lazy"]},{"package":"purescript-lazy","item":["Data.Lazy","defer"]},{"package":"purescript-lazy","item":["Data.Lazy","force"]},{"package":"purescript-lazy","item":["Data.Lazy","semiringLazy"]},{"package":"purescript-lazy","item":["Data.Lazy","ringLazy"]},{"package":"purescript-lazy","item":["Data.Lazy","moduloSemiringLazy"]},{"package":"purescript-lazy","item":["Data.Lazy","divisionRingLazy"]},{"package":"purescript-lazy","item":["Data.Lazy","numLazy"]},{"package":"purescript-lazy","item":["Data.Lazy","eqLazy"]},{"package":"purescript-lazy","item":["Data.Lazy","ordLazy"]},{"package":"purescript-lazy","item":["Data.Lazy","boundedLazy"]},{"package":"purescript-lazy","item":["Data.Lazy","boundedOrdLazy"]},{"package":"purescript-lazy","item":["Data.Lazy","semigroupLazy"]},{"package":"purescript-lazy","item":["Data.Lazy","monoidLazy"]},{"package":"purescript-lazy","item":["Data.Lazy","booleanAlgebraLazy"]},{"package":"purescript-lazy","item":["Data.Lazy","functorLazy"]},{"package":"purescript-lazy","item":["Data.Lazy","applyLazy"]},{"package":"purescript-lazy","item":["Data.Lazy","applicativeLazy"]},{"package":"purescript-lazy","item":["Data.Lazy","bindLazy"]},{"package":"purescript-lazy","item":["Data.Lazy","monadLazy"]},{"package":"purescript-lazy","item":["Data.Lazy","extendLazy"]},{"package":"purescript-lazy","item":["Data.Lazy","comonadLazy"]},{"package":"purescript-lazy","item":["Data.Lazy","showLazy"]},{"package":"purescript-lazy","item":["Data.Lazy","lazyLazy"]},{"package":"purescript-maps","item":["Data.Map","Map"]},{"package":"purescript-maps","item":["Data.Map","showTree"]},{"package":"purescript-maps","item":["Data.Map","showTree"]},{"package":"purescript-maps","item":["Data.Map","showTree"]},{"package":"purescript-maps","item":["Data.Map","empty"]},{"package":"purescript-maps","item":["Data.Map","isEmpty"]},{"package":"purescript-maps","item":["Data.Map","isEmpty"]},{"package":"purescript-maps","item":["Data.Map","singleton"]},{"package":"purescript-maps","item":["Data.Map","checkValid"]},{"package":"purescript-maps","item":["Data.Map","lookup"]},{"package":"purescript-maps","item":["Data.Map","member"]},{"package":"purescript-maps","item":["Data.Map","insert"]},{"package":"purescript-maps","item":["Data.Map","delete"]},{"package":"purescript-maps","item":["Data.Map","alter"]},{"package":"purescript-maps","item":["Data.Map","update"]},{"package":"purescript-maps","item":["Data.Map","fromFoldable"]},{"package":"purescript-maps","item":["Data.Map","fromFoldableWith"]},{"package":"purescript-maps","item":["Data.Map","toList"]},{"package":"purescript-maps","item":["Data.Map","toList"]},{"package":"purescript-maps","item":["Data.Map","toList"]},{"package":"purescript-maps","item":["Data.Map","fromList"]},{"package":"purescript-maps","item":["Data.Map","fromListWith"]},{"package":"purescript-maps","item":["Data.Map","keys"]},{"package":"purescript-maps","item":["Data.Map","keys"]},{"package":"purescript-maps","item":["Data.Map","keys"]},{"package":"purescript-maps","item":["Data.Map","values"]},{"package":"purescript-maps","item":["Data.Map","values"]},{"package":"purescript-maps","item":["Data.Map","values"]},{"package":"purescript-maps","item":["Data.Map","unionWith"]},{"package":"purescript-maps","item":["Data.Map","union"]},{"package":"purescript-maps","item":["Data.Map","unions"]},{"package":"purescript-maps","item":["Data.Map","size"]},{"package":"purescript-maps","item":["Data.StrMap","StrMap"]},{"package":"purescript-maps","item":["Data.StrMap","thawST"]},{"package":"purescript-maps","item":["Data.StrMap","freezeST"]},{"package":"purescript-maps","item":["Data.StrMap","runST"]},{"package":"purescript-maps","item":["Data.StrMap","fold"]},{"package":"purescript-maps","item":["Data.StrMap","foldMap"]},{"package":"purescript-maps","item":["Data.StrMap","foldM"]},{"package":"purescript-maps","item":["Data.StrMap","foldMaybe"]},{"package":"purescript-maps","item":["Data.StrMap","all"]},{"package":"purescript-maps","item":["Data.StrMap","empty"]},{"package":"purescript-maps","item":["Data.StrMap","isSubmap"]},{"package":"purescript-maps","item":["Data.StrMap","isEmpty"]},{"package":"purescript-maps","item":["Data.StrMap","size"]},{"package":"purescript-maps","item":["Data.StrMap","singleton"]},{"package":"purescript-maps","item":["Data.StrMap","lookup"]},{"package":"purescript-maps","item":["Data.StrMap","member"]},{"package":"purescript-maps","item":["Data.StrMap","insert"]},{"package":"purescript-maps","item":["Data.StrMap","delete"]},{"package":"purescript-maps","item":["Data.StrMap","alter"]},{"package":"purescript-maps","item":["Data.StrMap","update"]},{"package":"purescript-maps","item":["Data.StrMap","fromFoldable"]},{"package":"purescript-maps","item":["Data.StrMap","fromFoldableWith"]},{"package":"purescript-maps","item":["Data.StrMap","fromList"]},{"package":"purescript-maps","item":["Data.StrMap","fromListWith"]},{"package":"purescript-maps","item":["Data.StrMap","toList"]},{"package":"purescript-maps","item":["Data.StrMap","keys"]},{"package":"purescript-maps","item":["Data.StrMap","values"]},{"package":"purescript-maps","item":["Data.StrMap","union"]},{"package":"purescript-maps","item":["Data.StrMap","unions"]},{"package":"purescript-maps","item":["Data.StrMap.Unsafe","unsafeIndex"]},{"package":"purescript-maps","item":["Data.StrMap.ST","STStrMap"]},{"package":"purescript-maps","item":["Data.StrMap.ST","new"]},{"package":"purescript-maps","item":["Data.StrMap.ST","peek"]},{"package":"purescript-maps","item":["Data.StrMap.ST","poke"]},{"package":"purescript-maps","item":["Data.StrMap.ST","delete"]},{"package":"purescript-maps","item":["Data.StrMap.ST.Unsafe","unsafeGet"]},{"package":"purescript-maybe","item":["Data.Maybe","Maybe"]},{"package":"purescript-maybe","item":["Data.Maybe","maybe"]},{"package":"purescript-maybe","item":["Data.Maybe","maybe"]},{"package":"purescript-maybe","item":["Data.Maybe","maybe'"]},{"package":"purescript-maybe","item":["Data.Maybe","maybe'"]},{"package":"purescript-maybe","item":["Data.Maybe","fromMaybe"]},{"package":"purescript-maybe","item":["Data.Maybe","fromMaybe'"]},{"package":"purescript-maybe","item":["Data.Maybe","isJust"]},{"package":"purescript-maybe","item":["Data.Maybe","isNothing"]},{"package":"purescript-maybe","item":["Data.Maybe","functorMaybe"]},{"package":"purescript-maybe","item":["Data.Maybe","applyMaybe"]},{"package":"purescript-maybe","item":["Data.Maybe","applicativeMaybe"]},{"package":"purescript-maybe","item":["Data.Maybe","altMaybe"]},{"package":"purescript-maybe","item":["Data.Maybe","plusMaybe"]},{"package":"purescript-maybe","item":["Data.Maybe","alternativeMaybe"]},{"package":"purescript-maybe","item":["Data.Maybe","bindMaybe"]},{"package":"purescript-maybe","item":["Data.Maybe","monadMaybe"]},{"package":"purescript-maybe","item":["Data.Maybe","monadPlusMaybe"]},{"package":"purescript-maybe","item":["Data.Maybe","extendMaybe"]},{"package":"purescript-maybe","item":["Data.Maybe","invariantMaybe"]},{"package":"purescript-maybe","item":["Data.Maybe","semigroupMaybe"]},{"package":"purescript-maybe","item":["Data.Maybe","monoidMaybe"]},{"package":"purescript-maybe","item":["Data.Maybe","semiringMaybe"]},{"package":"purescript-maybe","item":["Data.Maybe","moduloSemiringMaybe"]},{"package":"purescript-maybe","item":["Data.Maybe","ringMaybe"]},{"package":"purescript-maybe","item":["Data.Maybe","divisionRingMaybe"]},{"package":"purescript-maybe","item":["Data.Maybe","numMaybe"]},{"package":"purescript-maybe","item":["Data.Maybe","eqMaybe"]},{"package":"purescript-maybe","item":["Data.Maybe","ordMaybe"]},{"package":"purescript-maybe","item":["Data.Maybe","boundedMaybe"]},{"package":"purescript-maybe","item":["Data.Maybe","boundedOrdMaybe"]},{"package":"purescript-maybe","item":["Data.Maybe","booleanAlgebraMaybe"]},{"package":"purescript-maybe","item":["Data.Maybe","showMaybe"]},{"package":"purescript-maybe","item":["Data.Maybe.Unsafe","fromJust"]},{"package":"purescript-maybe","item":["Data.Maybe.Unsafe","fromJust"]},{"package":"purescript-maybe","item":["Data.Maybe.Unsafe","unsafeThrow"]},{"package":"purescript-maybe","item":["Data.Maybe.First","First"]},{"package":"purescript-maybe","item":["Data.Maybe.First","runFirst"]},{"package":"purescript-maybe","item":["Data.Maybe.First","eqFirst"]},{"package":"purescript-maybe","item":["Data.Maybe.First","ordFirst"]},{"package":"purescript-maybe","item":["Data.Maybe.First","boundedFirst"]},{"package":"purescript-maybe","item":["Data.Maybe.First","functorFirst"]},{"package":"purescript-maybe","item":["Data.Maybe.First","applyFirst"]},{"package":"purescript-maybe","item":["Data.Maybe.First","applicativeFirst"]},{"package":"purescript-maybe","item":["Data.Maybe.First","bindFirst"]},{"package":"purescript-maybe","item":["Data.Maybe.First","monadFirst"]},{"package":"purescript-maybe","item":["Data.Maybe.First","extendFirst"]},{"package":"purescript-maybe","item":["Data.Maybe.First","invariantFirst"]},{"package":"purescript-maybe","item":["Data.Maybe.First","showFirst"]},{"package":"purescript-maybe","item":["Data.Maybe.First","semigroupFirst"]},{"package":"purescript-maybe","item":["Data.Maybe.First","monoidFirst"]},{"package":"purescript-maybe","item":["Data.Maybe.Last","Last"]},{"package":"purescript-maybe","item":["Data.Maybe.Last","runLast"]},{"package":"purescript-maybe","item":["Data.Maybe.Last","eqLast"]},{"package":"purescript-maybe","item":["Data.Maybe.Last","ordLast"]},{"package":"purescript-maybe","item":["Data.Maybe.Last","boundedLast"]},{"package":"purescript-maybe","item":["Data.Maybe.Last","functorLast"]},{"package":"purescript-maybe","item":["Data.Maybe.Last","applyLast"]},{"package":"purescript-maybe","item":["Data.Maybe.Last","applicativeLast"]},{"package":"purescript-maybe","item":["Data.Maybe.Last","bindLast"]},{"package":"purescript-maybe","item":["Data.Maybe.Last","monadLast"]},{"package":"purescript-maybe","item":["Data.Maybe.Last","extendLast"]},{"package":"purescript-maybe","item":["Data.Maybe.Last","invariantLast"]},{"package":"purescript-maybe","item":["Data.Maybe.Last","showLast"]},{"package":"purescript-maybe","item":["Data.Maybe.Last","semigroupLast"]},{"package":"purescript-maybe","item":["Data.Maybe.Last","monoidLast"]},{"package":"purescript-random","item":["Control.Monad.Eff.Random","RANDOM"]},{"package":"purescript-random","item":["Control.Monad.Eff.Random","random"]},{"package":"purescript-random","item":["Control.Monad.Eff.Random","randomInt"]},{"package":"purescript-random","item":["Control.Monad.Eff.Random","randomRange"]},{"package":"purescript-random","item":["Control.Monad.Eff.Random","randomBool"]},{"package":"purescript-test-unit","item":["Test.Unit","TIMER"]},{"package":"purescript-test-unit","item":["Test.Unit","TestUnit"]},{"package":"purescript-test-unit","item":["Test.Unit","Assertion"]},{"package":"purescript-test-unit","item":["Test.Unit","Test"]},{"package":"purescript-test-unit","item":["Test.Unit","success"]},{"package":"purescript-test-unit","item":["Test.Unit","failure"]},{"package":"purescript-test-unit","item":["Test.Unit","timeout"]},{"package":"purescript-test-unit","item":["Test.Unit","test"]},{"package":"purescript-test-unit","item":["Test.Unit","runTest"]},{"package":"purescript-test-unit","item":["Test.Unit.Assert","assert"]},{"package":"purescript-test-unit","item":["Test.Unit.Assert","assert"]},{"package":"purescript-test-unit","item":["Test.Unit.Assert","assertFalse"]},{"package":"purescript-test-unit","item":["Test.Unit.Assert","assertFalse"]},{"package":"purescript-test-unit","item":["Test.Unit.Assert","expectFailure"]},{"package":"purescript-test-unit","item":["Test.Unit.Assert","equal"]},{"package":"purescript-test-unit","item":["Test.Unit.Console","TESTOUTPUT"]},{"package":"purescript-test-unit","item":["Test.Unit.Console","hasStderr"]},{"package":"purescript-test-unit","item":["Test.Unit.Console","consoleLog"]},{"package":"purescript-test-unit","item":["Test.Unit.Console","consoleError"]},{"package":"purescript-test-unit","item":["Test.Unit.Console","savePos"]},{"package":"purescript-test-unit","item":["Test.Unit.Console","restorePos"]},{"package":"purescript-test-unit","item":["Test.Unit.Console","eraseLine"]},{"package":"purescript-test-unit","item":["Test.Unit.Console","print"]},{"package":"purescript-test-unit","item":["Test.Unit.Console","printLabel"]},{"package":"purescript-test-unit","item":["Test.Unit.Console","printFail"]},{"package":"purescript-test-unit","item":["Test.Unit.Console","printPass"]},{"package":"purescript-test-unit","item":["Test.Unit.QuickCheck","quickCheck'"]},{"package":"purescript-test-unit","item":["Test.Unit.QuickCheck","quickCheck"]},{"package":"purescript-tailrec","item":["Control.Monad.Rec.Class","MonadRec"]},{"package":"purescript-tailrec","item":["Control.Monad.Rec.Class","tailRecM2"]},{"package":"purescript-tailrec","item":["Control.Monad.Rec.Class","tailRecM3"]},{"package":"purescript-tailrec","item":["Control.Monad.Rec.Class","tailRec"]},{"package":"purescript-tailrec","item":["Control.Monad.Rec.Class","forever"]}],"version":"0.0.0","github":["rgrempel","purescript-elm-compat"],"versionTag":"v0.0.0","compilerVersion":"0.8.5.0"}