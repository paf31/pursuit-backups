{"uploader":"justinwoo","packageMeta":{"repository":{"url":"git://github.com/justinwoo/purescript-expect-inferred.git","type":"git"},"ignore":["**/.*","node_modules","bower_components","output"],"devDependencies":{"purescript-console":"^4.1.0"},"dependencies":{"purescript-typelevel-prelude":"^3.0.0","purescript-prelude":"^4.1.0"},"name":"purescript-expect-inferred","license":["MIT"]},"tagTime":"2018-08-13T17:46:21+0000","modules":[{"reExports":[],"name":"ExpectInferred","comments":null,"declarations":[{"children":[{"comments":null,"title":"expectInferredAA","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["ExpectInferred"],"ExpectInferred"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"a"}]}},"sourceSpan":{"start":[10,1],"name":"/home/justin/Code/purescript-expect-inferred/src/ExpectTypes.purs","end":[10,48]}},{"comments":null,"title":"expectInferredAB","info":{"declType":"instance","dependencies":[{"constraintClass":[["Prim","TypeError"],"Fail"],"constraintArgs":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim","TypeError"],"Above"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim","TypeError"],"Text"]},{"tag":"TypeLevelString","contents":"The expected (first) and actual (second) types did not match:"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim","TypeError"],"Beside"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim","TypeError"],"Text"]},{"tag":"TypeLevelString","contents":"  "}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim","TypeError"],"Above"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim","TypeError"],"Quote"]},{"tag":"TypeVar","contents":"expected"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim","TypeError"],"Quote"]},{"tag":"TypeVar","contents":"actual"}]}]}]}]}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["ExpectInferred"],"ExpectInferred"]},{"tag":"TypeVar","contents":"expected"}]},{"tag":"TypeVar","contents":"actual"}]}},"sourceSpan":{"start":[12,6],"name":"/home/justin/Code/purescript-expect-inferred/src/ExpectTypes.purs","end":[21,38]}}],"comments":null,"title":"ExpectInferred","info":{"fundeps":[],"arguments":[["expected",null],["actual",null]],"declType":"typeClass","superclasses":[]},"sourceSpan":{"start":[8,1],"name":"/home/justin/Code/purescript-expect-inferred/src/ExpectTypes.purs","end":[8,37]}},{"children":[],"comments":null,"title":"expectInferred","info":{"declType":"value","type":{"tag":"ForAll","contents":["actual",{"tag":"ForAll","contents":["expected",{"tag":"ConstrainedType","contents":[{"constraintClass":[["ExpectInferred"],"ExpectInferred"],"constraintArgs":[{"tag":"TypeVar","contents":"expected"},{"tag":"TypeVar","contents":"actual"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Type","Proxy"],"Proxy"]},{"tag":"TypeVar","contents":"expected"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"actual"}]},{"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}]}]},null]},null]}},"sourceSpan":{"start":[23,1],"name":"/home/justin/Code/purescript-expect-inferred/src/ExpectTypes.purs","end":[28,10]}}]}],"resolvedDependencies":{"purescript-proxy":"3.0.0","purescript-effect":"2.0.0","purescript-console":"4.1.0","purescript-type-equality":"3.0.0","purescript-typelevel-prelude":"3.0.0","purescript-prelude":"4.1.0"},"version":"0.2.0","github":["justinwoo","purescript-expect-inferred"],"versionTag":"v0.2.0","moduleMap":{"Data.BooleanAlgebra":"purescript-prelude","Type.Data.Boolean":"purescript-typelevel-prelude","Data.Ring":"purescript-prelude","Effect.Uncurried":"purescript-effect","Effect":"purescript-effect","Type.Row.Homogeneous":"purescript-typelevel-prelude","Data.Ord":"purescript-prelude","Type.Data.Row":"purescript-prelude","Data.Monoid.Dual":"purescript-prelude","Data.Boolean":"purescript-prelude","Type.Proxy":"purescript-proxy","Data.Bounded":"purescript-prelude","Data.Show":"purescript-prelude","Control.Apply":"purescript-prelude","Control.Monad":"purescript-prelude","Data.Monoid":"purescript-prelude","Control.Bind":"purescript-prelude","Data.Monoid.Additive":"purescript-prelude","Data.Symbol":"purescript-prelude","Data.HeytingAlgebra":"purescript-prelude","Type.Data.RowList":"purescript-prelude","Data.Ord.Unsafe":"purescript-prelude","Data.Semigroup":"purescript-prelude","Effect.Unsafe":"purescript-effect","Type.Data.Ordering":"purescript-typelevel-prelude","Type.Equality":"purescript-type-equality","Data.Semiring":"purescript-prelude","Effect.Console":"purescript-console","Data.CommutativeRing":"purescript-prelude","Data.NaturalTransformation":"purescript-prelude","Data.Monoid.Conj":"purescript-prelude","Data.Functor":"purescript-prelude","Control.Category":"purescript-prelude","Type.Row":"purescript-typelevel-prelude","Data.Function":"purescript-prelude","Data.Field":"purescript-prelude","Data.EuclideanRing":"purescript-prelude","Data.Semigroup.Last":"purescript-prelude","Data.Semigroup.First":"purescript-prelude","Prelude":"purescript-prelude","Effect.Class":"purescript-effect","Data.Eq":"purescript-prelude","Data.Monoid.Disj":"purescript-prelude","Data.Void":"purescript-prelude","Data.DivisionRing":"purescript-prelude","Data.Unit":"purescript-prelude","Data.Ordering":"purescript-prelude","Data.Monoid.Multiplicative":"purescript-prelude","Type.Data.Symbol":"purescript-typelevel-prelude","Control.Semigroupoid":"purescript-prelude","Effect.Class.Console":"purescript-console","Data.Monoid.Endo":"purescript-prelude","Type.Prelude":"purescript-typelevel-prelude","Control.Applicative":"purescript-prelude","Record.Unsafe":"purescript-prelude"},"compilerVersion":"0.12.0"}