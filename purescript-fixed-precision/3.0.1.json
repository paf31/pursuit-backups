{"uploader":"hdgarrood","packageMeta":{"repository":{"url":"https://github.com/lumihq/purescript-fixed-precision.git","type":"git"},"ignore":["**/.*","node_modules","bower_components","output"],"devDependencies":{"purescript-psci-support":"^4.0.0"},"dependencies":{"purescript-bigints":"^4.0.0","purescript-maybe":"^4.0.0","purescript-integers":"^4.0.0"},"name":"purescript-fixed-precision","license":["Apache-2.0"]},"tagTime":"2019-01-30T18:42:35+0000","modules":[{"reExports":[],"name":"Data.Fixed","comments":"This module defines a numeric type `Fixed` for working with\nfixed point numbers in base 10. The precision is tracked in\nthe types.\n","declarations":[{"children":[{"comments":null,"title":"showFixed","info":{"declType":"instance","dependencies":[{"constraintAnn":[],"constraintClass":[["Data","Fixed"],"KnownPrecision"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"precision"}],"constraintData":null}],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Show"],"Show"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Fixed"],"Fixed"]},{"annotation":[],"tag":"TypeVar","contents":"precision"}]}]}},"sourceSpan":{"start":[274,1],"name":"/home/harry-work/Documents/code/purescript-fixed-precision/src/Data/Fixed.purs","end":[274,73]}},{"comments":null,"title":"eqFixed","info":{"declType":"instance","dependencies":[],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Eq"],"Eq"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Fixed"],"Fixed"]},{"annotation":[],"tag":"TypeVar","contents":"precision"}]}]}},"sourceSpan":{"start":[282,1],"name":"/home/harry-work/Documents/code/purescript-fixed-precision/src/Data/Fixed.purs","end":[282,41]}},{"comments":null,"title":"ordFixed","info":{"declType":"instance","dependencies":[],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Ord"],"Ord"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Fixed"],"Fixed"]},{"annotation":[],"tag":"TypeVar","contents":"precision"}]}]}},"sourceSpan":{"start":[285,1],"name":"/home/harry-work/Documents/code/purescript-fixed-precision/src/Data/Fixed.purs","end":[285,43]}},{"comments":null,"title":"semiringFixed","info":{"declType":"instance","dependencies":[{"constraintAnn":[],"constraintClass":[["Data","Fixed"],"KnownPrecision"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"precision"}],"constraintData":null}],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Semiring"],"Semiring"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Fixed"],"Fixed"]},{"annotation":[],"tag":"TypeVar","contents":"precision"}]}]}},"sourceSpan":{"start":[288,1],"name":"/home/harry-work/Documents/code/purescript-fixed-precision/src/Data/Fixed.purs","end":[288,81]}},{"comments":null,"title":"ringFixed","info":{"declType":"instance","dependencies":[{"constraintAnn":[],"constraintClass":[["Data","Fixed"],"KnownPrecision"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"precision"}],"constraintData":null}],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Ring"],"Ring"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Fixed"],"Fixed"]},{"annotation":[],"tag":"TypeVar","contents":"precision"}]}]}},"sourceSpan":{"start":[294,1],"name":"/home/harry-work/Documents/code/purescript-fixed-precision/src/Data/Fixed.purs","end":[294,73]}},{"comments":null,"title":"commutativeRingFixed","info":{"declType":"instance","dependencies":[{"constraintAnn":[],"constraintClass":[["Data","Fixed"],"KnownPrecision"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"precision"}],"constraintData":null}],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","CommutativeRing"],"CommutativeRing"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Fixed"],"Fixed"]},{"annotation":[],"tag":"TypeVar","contents":"precision"}]}]}},"sourceSpan":{"start":[297,1],"name":"/home/harry-work/Documents/code/purescript-fixed-precision/src/Data/Fixed.purs","end":[297,94]}}],"comments":"A fixed point representation of a real number, with the specified precision.\n\nA value is multiplied by the precision, truncated and stored as a big\ninteger. That is, we approximate the number by numerator/10^precision, storing\nonly the numerator, and carrying the precision around as type information.\n\nThe `Semiring` and associated instances allow us to perform basic arithmetic\noperations.\n","title":"Fixed","info":{"declType":"data","dataDeclType":"newtype","typeArguments":[["precision",{"annotation":[],"tag":"NamedKind","contents":[["Data","Fixed"],"Precision"]}]]},"sourceSpan":{"start":[111,1],"name":"/home/harry-work/Documents/code/purescript-fixed-precision/src/Data/Fixed.purs","end":[111,61]}},{"children":[],"comments":"Create a `Fixed` representation of an `Int`.\n","title":"fromInt","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["precision",{"annotation":[],"tag":"ConstrainedType","contents":[{"constraintAnn":[],"constraintClass":[["Data","Fixed"],"KnownPrecision"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"precision"}],"constraintData":null},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Fixed"],"Fixed"]},{"annotation":[],"tag":"TypeVar","contents":"precision"}]}]}]},null]}},"sourceSpan":{"start":[129,1],"name":"/home/harry-work/Documents/code/purescript-fixed-precision/src/Data/Fixed.purs","end":[133,21]}},{"children":[],"comments":"Approximate a `Number` as a `Fixed` value with the specified precision.\n\n```\n> fromNumber 0.1234 :: Maybe (Fixed P10000)\n(Just (fromNumber 0.1234 :: P10000))\n\n> fromNumber 0.1234 :: Maybe (Fixed P100)\n(Just (fromNumber 0.12 :: P100))\n```\n\nWhen given a finite `Number`, this function always succeeds: the number is\ntruncated (rounded towards zero) to the closest possible `Fixed` value.\nThis function only returns `Nothing` if it is given NaN, or positive or\nnegative infinity.\n\n```\n> fromNumber (1.0 / 0.0) :: Maybe (Fixed P100)\nNothing\n```\n","title":"fromNumber","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["precision",{"annotation":[],"tag":"ConstrainedType","contents":[{"constraintAnn":[],"constraintClass":[["Data","Fixed"],"KnownPrecision"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"precision"}],"constraintData":null},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Fixed"],"Fixed"]},{"annotation":[],"tag":"TypeVar","contents":"precision"}]}}]}]}]},null]}},"sourceSpan":{"start":[155,1],"name":"/home/harry-work/Documents/code/purescript-fixed-precision/src/Data/Fixed.purs","end":[159,29]}},{"children":[],"comments":"Convert a `Fixed` value to a `Number`.\n\n_Note_: Overflow is possible here if the numerator is sufficiently large.\n","title":"toNumber","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["precision",{"annotation":[],"tag":"ConstrainedType","contents":[{"constraintAnn":[],"constraintClass":[["Data","Fixed"],"KnownPrecision"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"precision"}],"constraintData":null},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Fixed"],"Fixed"]},{"annotation":[],"tag":"TypeVar","contents":"precision"}]}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]}]},null]}},"sourceSpan":{"start":[165,1],"name":"/home/harry-work/Documents/code/purescript-fixed-precision/src/Data/Fixed.purs","end":[169,12]}},{"children":[],"comments":"Extract the numerator from the representation of the number as a fraction.\n\n```\n> map numerator (fromNumber 0.1234 :: Fixed P1000)\n(Just fromString \"123\")\n\n> map numerator (fromNumber 0.1239 :: Fixed P1000)\n(Just fromString \"123\")\n```\n","title":"numerator","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["precision",{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Fixed"],"Fixed"]},{"annotation":[],"tag":"TypeVar","contents":"precision"}]}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","BigInt"],"BigInt"]}]},null]}},"sourceSpan":{"start":[122,1],"name":"/home/harry-work/Documents/code/purescript-fixed-precision/src/Data/Fixed.purs","end":[122,64]}},{"children":[],"comments":"Calculate the largest whole number smaller than or equal to the provided\nvalue.\n\n```\n> map floor $ fromNumber 0.1 :: Maybe (Fixed P10)\n(Just (fromNumber 0.0 :: P10))\n\n> map floor $ fromNumber 1.0 :: Maybe (Fixed P10)\n(Just (fromNumber 1.0 :: P10))\n\n> floor $ fromNumber (-0.1) :: Maybe (Fixed P10)\n(Just (fromNumber (-1.0) :: P10))\n```\n","title":"floor","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["precision",{"annotation":[],"tag":"ConstrainedType","contents":[{"constraintAnn":[],"constraintClass":[["Data","Fixed"],"KnownPrecision"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"precision"}],"constraintData":null},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Fixed"],"Fixed"]},{"annotation":[],"tag":"TypeVar","contents":"precision"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Fixed"],"Fixed"]},{"annotation":[],"tag":"TypeVar","contents":"precision"}]}]}]},null]}},"sourceSpan":{"start":[185,1],"name":"/home/harry-work/Documents/code/purescript-fixed-precision/src/Data/Fixed.purs","end":[189,21]}},{"children":[],"comments":"Calculate the smallest whole number greater than or equal to the provided\nvalue.\n\n```\n> map ceil $ fromNumber 0.1 :: Maybe (Fixed P10)\n(Just (fromNumber 1.0 :: P10))\n\n> map ceil $ fromNumber 1.0 :: Maybe (Fixed P10)\n(Just (fromNumber 1.0 :: P10))\n\n> map ceil $ fromNumber (-0.1) :: Maybe (Fixed P10)\n(Just (fromNumber 0.0 :: P10))\n```\n","title":"ceil","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["precision",{"annotation":[],"tag":"ConstrainedType","contents":[{"constraintAnn":[],"constraintClass":[["Data","Fixed"],"KnownPrecision"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"precision"}],"constraintData":null},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Fixed"],"Fixed"]},{"annotation":[],"tag":"TypeVar","contents":"precision"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Fixed"],"Fixed"]},{"annotation":[],"tag":"TypeVar","contents":"precision"}]}]}]},null]}},"sourceSpan":{"start":[209,1],"name":"/home/harry-work/Documents/code/purescript-fixed-precision/src/Data/Fixed.purs","end":[213,21]}},{"children":[],"comments":"Round the specified value to the nearest whole number.\n\n```\n> map round $ fromNumber 0.1 :: Maybe (Fixed P10)\n(Just (fromNumber 0.0 :: P10))\n\n> map round $ fromNumber 0.9 :: Maybe (Fixed P10)\n(Just (fromNumber 1.0 :: P10))\n\n> map round $ fromNumber 0.5 :: Maybe (Fixed P10)\n(Just (fromNumber 1.0 :: P10))\n\n> map round $ fromNumber (-0.1) :: Maybe (Fixed P10)\n(Just (fromNumber 0.0 :: P10))\n```\n","title":"round","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["precision",{"annotation":[],"tag":"ConstrainedType","contents":[{"constraintAnn":[],"constraintClass":[["Data","Fixed"],"KnownPrecision"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"precision"}],"constraintData":null},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Fixed"],"Fixed"]},{"annotation":[],"tag":"TypeVar","contents":"precision"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Fixed"],"Fixed"]},{"annotation":[],"tag":"TypeVar","contents":"precision"}]}]}]},null]}},"sourceSpan":{"start":[236,1],"name":"/home/harry-work/Documents/code/purescript-fixed-precision/src/Data/Fixed.purs","end":[240,21]}},{"children":[],"comments":"Approximate division of fixed-precision numbers.\n\n```\n> lift2 approxDiv (fromNumber 22.0) (fromNumber 7.0) :: Maybe (Fixed P100)\n(Just (fromNumber 3.14 :: P100))\n```\n\n_Note_: `Fixed` is not a `EuclideanRing` in general - it is not even\nan integral domain, since it has non-zero zero-divisors:\n\n```\n> lift2 (*) (fromNumber 0.1) (fromNumber 0.1) :: Maybe (Fixed P10)\n(Just (fromNumber 0.0 :: P10))\n```\n","title":"approxDiv","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["precision",{"annotation":[],"tag":"ConstrainedType","contents":[{"constraintAnn":[],"constraintClass":[["Data","Fixed"],"KnownPrecision"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"precision"}],"constraintData":null},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Fixed"],"Fixed"]},{"annotation":[],"tag":"TypeVar","contents":"precision"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Fixed"],"Fixed"]},{"annotation":[],"tag":"TypeVar","contents":"precision"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Fixed"],"Fixed"]},{"annotation":[],"tag":"TypeVar","contents":"precision"}]}]}]}]},null]}},"sourceSpan":{"start":[262,1],"name":"/home/harry-work/Documents/code/purescript-fixed-precision/src/Data/Fixed.purs","end":[267,21]}},{"children":[],"comments":"A kind for type-level precision information\n","title":"Precision","info":{"declType":"kind"},"sourceSpan":{"start":[37,1],"name":"/home/harry-work/Documents/code/purescript-fixed-precision/src/Data/Fixed.purs","end":[37,30]}},{"children":[{"comments":null,"title":"knownPrecisionOne","info":{"declType":"instance","dependencies":[],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Fixed"],"KnownPrecision"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Fixed"],"One"]}]}},"sourceSpan":{"start":[76,1],"name":"/home/harry-work/Documents/code/purescript-fixed-precision/src/Data/Fixed.purs","end":[76,49]}}],"comments":"No decimal places\n","title":"One","info":{"kind":{"annotation":[],"tag":"NamedKind","contents":[["Data","Fixed"],"Precision"]},"declType":"externData"},"sourceSpan":{"start":[40,1],"name":"/home/harry-work/Documents/code/purescript-fixed-precision/src/Data/Fixed.purs","end":[40,37]}},{"children":[{"comments":null,"title":"knownPrecisionTenTimes","info":{"declType":"instance","dependencies":[{"constraintAnn":[],"constraintClass":[["Data","Fixed"],"KnownPrecision"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"p"}],"constraintData":null}],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Fixed"],"KnownPrecision"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Fixed"],"TenTimes"]},{"annotation":[],"tag":"TypeVar","contents":"p"}]}]}},"sourceSpan":{"start":[79,1],"name":"/home/harry-work/Documents/code/purescript-fixed-precision/src/Data/Fixed.purs","end":[79,83]}}],"comments":"One more decimal place\n","title":"TenTimes","info":{"kind":{"annotation":[],"tag":"FunKind","contents":[{"annotation":[],"tag":"NamedKind","contents":[["Data","Fixed"],"Precision"]},{"annotation":[],"tag":"NamedKind","contents":[["Data","Fixed"],"Precision"]}]},"declType":"externData"},"sourceSpan":{"start":[43,1],"name":"/home/harry-work/Documents/code/purescript-fixed-precision/src/Data/Fixed.purs","end":[43,55]}},{"children":[],"comments":null,"title":"P1","info":{"arguments":[],"declType":"typeSynonym","type":{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Fixed"],"One"]}},"sourceSpan":{"start":[45,1],"name":"/home/harry-work/Documents/code/purescript-fixed-precision/src/Data/Fixed.purs","end":[45,14]}},{"children":[],"comments":"One decimal place\n","title":"P10","info":{"arguments":[],"declType":"typeSynonym","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Fixed"],"TenTimes"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Fixed"],"P1"]}]}},"sourceSpan":{"start":[48,1],"name":"/home/harry-work/Documents/code/purescript-fixed-precision/src/Data/Fixed.purs","end":[48,23]}},{"children":[],"comments":"Two decimal places\n","title":"P100","info":{"arguments":[],"declType":"typeSynonym","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Fixed"],"TenTimes"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Fixed"],"P10"]}]}},"sourceSpan":{"start":[51,1],"name":"/home/harry-work/Documents/code/purescript-fixed-precision/src/Data/Fixed.purs","end":[51,25]}},{"children":[],"comments":"Three decimal places\n","title":"P1000","info":{"arguments":[],"declType":"typeSynonym","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Fixed"],"TenTimes"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Fixed"],"P100"]}]}},"sourceSpan":{"start":[54,1],"name":"/home/harry-work/Documents/code/purescript-fixed-precision/src/Data/Fixed.purs","end":[54,27]}},{"children":[],"comments":"Four decimal places\n","title":"P10000","info":{"arguments":[],"declType":"typeSynonym","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Fixed"],"TenTimes"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Fixed"],"P1000"]}]}},"sourceSpan":{"start":[57,1],"name":"/home/harry-work/Documents/code/purescript-fixed-precision/src/Data/Fixed.purs","end":[57,29]}},{"children":[],"comments":"Five decimal places\n","title":"P100000","info":{"arguments":[],"declType":"typeSynonym","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Fixed"],"TenTimes"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Fixed"],"P10000"]}]}},"sourceSpan":{"start":[60,1],"name":"/home/harry-work/Documents/code/purescript-fixed-precision/src/Data/Fixed.purs","end":[60,31]}},{"children":[],"comments":"Six decimal places\n","title":"P1000000","info":{"arguments":[],"declType":"typeSynonym","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Fixed"],"TenTimes"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Fixed"],"P100000"]}]}},"sourceSpan":{"start":[63,1],"name":"/home/harry-work/Documents/code/purescript-fixed-precision/src/Data/Fixed.purs","end":[63,33]}},{"children":[{"comments":null,"title":"PProxy","info":{"arguments":[],"declType":"dataConstructor"},"sourceSpan":null}],"comments":"A value-level proxy for a type-level precision.\n","title":"PProxy","info":{"declType":"data","dataDeclType":"data","typeArguments":[["precision",{"annotation":[],"tag":"NamedKind","contents":[["Data","Fixed"],"Precision"]}]]},"sourceSpan":{"start":[66,1],"name":"/home/harry-work/Documents/code/purescript-fixed-precision/src/Data/Fixed.purs","end":[66,46]}},{"children":[{"comments":null,"title":"reflectPrecision","info":{"declType":"typeClassMember","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Fixed"],"PProxy"]},{"annotation":[],"tag":"TypeVar","contents":"precision"}]}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}},"sourceSpan":{"start":[74,3],"name":"/home/harry-work/Documents/code/purescript-fixed-precision/src/Data/Fixed.purs","end":[74,46]}},{"comments":null,"title":"knownPrecisionOne","info":{"declType":"instance","dependencies":[],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Fixed"],"KnownPrecision"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Fixed"],"One"]}]}},"sourceSpan":{"start":[76,1],"name":"/home/harry-work/Documents/code/purescript-fixed-precision/src/Data/Fixed.purs","end":[76,49]}},{"comments":null,"title":"knownPrecisionTenTimes","info":{"declType":"instance","dependencies":[{"constraintAnn":[],"constraintClass":[["Data","Fixed"],"KnownPrecision"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"p"}],"constraintData":null}],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Fixed"],"KnownPrecision"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Fixed"],"TenTimes"]},{"annotation":[],"tag":"TypeVar","contents":"p"}]}]}},"sourceSpan":{"start":[79,1],"name":"/home/harry-work/Documents/code/purescript-fixed-precision/src/Data/Fixed.purs","end":[79,83]}}],"comments":"Precision which is known, i.e. it can be reflected to a\nvalue at runtime, given a `PProxy`.\n\n`reflectPrecision` returns a multiple of ten, corresponding\nto the maximum number of decimal places which can be stored.\n","title":"KnownPrecision","info":{"fundeps":[],"arguments":[["precision",{"annotation":[],"tag":"NamedKind","contents":[["Data","Fixed"],"Precision"]}]],"declType":"typeClass","superclasses":[]},"sourceSpan":{"start":[73,1],"name":"/home/harry-work/Documents/code/purescript-fixed-precision/src/Data/Fixed.purs","end":[74,46]}},{"children":[],"comments":"Reify an non-negative integer (a power of ten) as a `Precision`.\n\nFor example\n\n```\n> reifyPrecision 0 reflectPrecision\nJust 1\n> reifyPrecision 1 reflectPrecision\nJust 10\n> reifyPrecision 2 reflectPrecision\nJust 100\n> reifyPrecision (-1) reflectPrecision\nNothing\n```\n","title":"reifyPrecision","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["r",{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"ForAll","contents":["precision",{"annotation":[],"tag":"ConstrainedType","contents":[{"constraintAnn":[],"constraintClass":[["Data","Fixed"],"KnownPrecision"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"precision"}],"constraintData":null},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Fixed"],"PProxy"]},{"annotation":[],"tag":"TypeVar","contents":"precision"}]}]},{"annotation":[],"tag":"TypeVar","contents":"r"}]}]},null]}}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"annotation":[],"tag":"TypeVar","contents":"r"}]}]}]},null]}},"sourceSpan":{"start":[96,1],"name":"/home/harry-work/Documents/code/purescript-fixed-precision/src/Data/Fixed.purs","end":[96,116]}}]}],"resolvedDependencies":{"purescript-bigints":"4.0.0","purescript-newtype":"3.0.0","purescript-effect":"2.0.1","purescript-control":"4.1.0","purescript-console":"4.2.0","purescript-either":"4.1.1","purescript-arrays":"5.2.0","purescript-maybe":"4.0.1","purescript-type-equality":"3.0.0","purescript-distributive":"4.0.0","purescript-unfoldable":"4.0.0","purescript-invariant":"4.1.0","purescript-foldable-traversable":"4.1.1","purescript-tailrec":"4.0.0","purescript-gen":"2.1.0","purescript-prelude":"4.1.0","purescript-st":"4.0.0","purescript-bifunctors":"4.0.0","purescript-nonempty":"5.0.0","purescript-unsafe-coerce":"4.0.0","purescript-refs":"4.1.0","purescript-integers":"4.0.0","purescript-orders":"4.0.0","purescript-globals":"4.0.0","purescript-math":"2.1.1","purescript-enums":"4.0.0","purescript-psci-support":"4.0.0","purescript-tuples":"5.1.0","purescript-partial":"2.0.0","purescript-strings":"4.0.1","purescript-identity":"4.1.0"},"version":"3.0.1","github":["lumihq","purescript-fixed-precision"],"versionTag":"v3.0.1","moduleMap":{"Data.BooleanAlgebra":"purescript-prelude","Data.Ring":"purescript-prelude","Data.NonEmpty":"purescript-nonempty","Effect.Uncurried":"purescript-effect","Data.Char.Gen":"purescript-strings","Data.String.NonEmpty":"purescript-strings","Effect":"purescript-effect","Data.Traversable.Accum.Internal":"purescript-foldable-traversable","Data.Enum.Gen":"purescript-enums","Data.Int.Bits":"purescript-integers","Data.Bifunctor.Flip":"purescript-bifunctors","Data.String.CodePoints":"purescript-strings","Data.Ord":"purescript-prelude","Control.Monad.Gen":"purescript-gen","Type.Data.Row":"purescript-prelude","Data.Monoid.Dual":"purescript-prelude","Control.Monad.Rec.Class":"purescript-tailrec","Data.Bitraversable":"purescript-foldable-traversable","Data.Boolean":"purescript-prelude","Control.Biapplicative":"purescript-bifunctors","Data.Array.NonEmpty.Internal":"purescript-arrays","Data.Array.ST.Iterator":"purescript-arrays","Data.String.Pattern":"purescript-strings","Data.Bounded":"purescript-prelude","Data.TraversableWithIndex":"purescript-foldable-traversable","Data.Int":"purescript-integers","Data.Show":"purescript-prelude","Data.Bifunctor.Clown":"purescript-bifunctors","Data.Foldable":"purescript-foldable-traversable","Data.Enum":"purescript-enums","Control.Apply":"purescript-prelude","Data.Tuple.Nested":"purescript-tuples","Control.Monad":"purescript-prelude","Data.Monoid":"purescript-prelude","Data.String.Common":"purescript-strings","Data.Maybe.First":"purescript-maybe","Control.Bind":"purescript-prelude","Data.Monoid.Additive":"purescript-prelude","Data.Symbol":"purescript-prelude","Data.String.Regex":"purescript-strings","Data.HeytingAlgebra":"purescript-prelude","Control.Alt":"purescript-control","Control.Monad.ST.Internal":"purescript-st","Type.Data.RowList":"purescript-prelude","Effect.Ref":"purescript-refs","Data.Either.Inject":"purescript-either","Data.Ord.Min":"purescript-orders","Data.Ord.Unsafe":"purescript-prelude","Data.Semigroup":"purescript-prelude","Data.Array.NonEmpty":"purescript-arrays","Data.Ord.Down":"purescript-orders","Data.Array.ST.Partial":"purescript-arrays","Effect.Unsafe":"purescript-effect","Data.Tuple":"purescript-tuples","Data.Semigroup.Foldable":"purescript-foldable-traversable","Control.Biapply":"purescript-bifunctors","Data.Distributive":"purescript-distributive","Type.Equality":"purescript-type-equality","Control.Alternative":"purescript-control","Data.Semiring":"purescript-prelude","Effect.Console":"purescript-console","Data.Traversable.Accum":"purescript-foldable-traversable","Data.CommutativeRing":"purescript-prelude","Data.NaturalTransformation":"purescript-prelude","Data.Monoid.Conj":"purescript-prelude","Data.Unfoldable":"purescript-unfoldable","Control.Monad.ST":"purescript-st","Data.String.NonEmpty.CodeUnits":"purescript-strings","Data.Functor":"purescript-prelude","Unsafe.Coerce":"purescript-unsafe-coerce","Control.Category":"purescript-prelude","Control.Monad.Gen.Common":"purescript-gen","Data.Maybe":"purescript-maybe","Data.String.Regex.Unsafe":"purescript-strings","Control.Comonad":"purescript-control","Data.Function":"purescript-prelude","Data.Field":"purescript-prelude","Data.EuclideanRing":"purescript-prelude","Data.Semigroup.Last":"purescript-prelude","Data.Semigroup.First":"purescript-prelude","Data.Functor.Invariant":"purescript-invariant","Global.Unsafe":"purescript-globals","Data.String.Unsafe":"purescript-strings","Prelude":"purescript-prelude","Effect.Class":"purescript-effect","Partial.Unsafe":"purescript-partial","Data.Array":"purescript-arrays","Data.Bifunctor.Product":"purescript-bifunctors","Control.Extend":"purescript-control","Data.Unfoldable1":"purescript-unfoldable","Control.Lazy":"purescript-control","Data.Eq":"purescript-prelude","Data.Either.Nested":"purescript-either","Data.Newtype":"purescript-newtype","Data.Semigroup.Traversable":"purescript-foldable-traversable","Data.Bifunctor":"purescript-bifunctors","Data.Monoid.Disj":"purescript-prelude","Control.Monad.Gen.Class":"purescript-gen","Data.Array.Partial":"purescript-arrays","Data.String.CaseInsensitive":"purescript-strings","Control.MonadPlus":"purescript-control","Data.Void":"purescript-prelude","Control.MonadZero":"purescript-control","Data.Ord.Max":"purescript-orders","Data.String.CodeUnits":"purescript-strings","Data.Bifunctor.Joker":"purescript-bifunctors","Data.FunctorWithIndex":"purescript-foldable-traversable","Data.DivisionRing":"purescript-prelude","Data.Bifunctor.Wrap":"purescript-bifunctors","PSCI.Support":"purescript-psci-support","Data.Maybe.Last":"purescript-maybe","Data.Unit":"purescript-prelude","Data.Ordering":"purescript-prelude","Data.Identity":"purescript-identity","Math":"purescript-math","Data.String":"purescript-strings","Control.Plus":"purescript-control","Partial":"purescript-partial","Global":"purescript-globals","Data.String.NonEmpty.CodePoints":"purescript-strings","Data.String.NonEmpty.Internal":"purescript-strings","Data.Monoid.Multiplicative":"purescript-prelude","Data.String.NonEmpty.CaseInsensitive":"purescript-strings","Data.Array.ST":"purescript-arrays","Control.Semigroupoid":"purescript-prelude","Data.Monoid.Alternate":"purescript-control","Data.Char":"purescript-strings","Effect.Class.Console":"purescript-console","Data.Bifunctor.Join":"purescript-bifunctors","Data.Bifoldable":"purescript-foldable-traversable","Control.Monad.ST.Ref":"purescript-st","Data.Monoid.Endo":"purescript-prelude","Data.String.Regex.Flags":"purescript-strings","Data.Either":"purescript-either","Control.Applicative":"purescript-prelude","Data.FoldableWithIndex":"purescript-foldable-traversable","Record.Unsafe":"purescript-prelude","Data.BigInt":"purescript-bigints","Data.Traversable":"purescript-foldable-traversable","Data.String.Gen":"purescript-strings"},"compilerVersion":"0.12.2"}