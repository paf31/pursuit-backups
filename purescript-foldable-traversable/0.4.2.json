{"uploader":"hdgarrood","packageMeta":{"homepage":"https://github.com/purescript/purescript-foldable-traversable","repository":{"url":"git://github.com/purescript/purescript-foldable-traversable.git","type":"git"},"ignore":["**/.*","bower_components","examples","node_modules","output","test","bower.json","package.json"],"devDependencies":{"purescript-console":"^0.1.0","purescript-assert":"^0.1.0","purescript-integers":"~0.2.1","purescript-math":"~0.2.0","purescript-functions":"~0.1.0"},"dependencies":{"purescript-maybe":"^0.3.0","purescript-bifunctors":"^0.4.0"},"name":"purescript-foldable-traversable","keywords":["purescript","foldable","traversable"],"description":"Classes for foldable and traversable data structures"},"modules":[{"reExports":[],"name":"Data.Bifoldable","comments":null,"declarations":[{"children":[{"comments":null,"title":"bifoldr","info":{"declType":"typeClassMember","type":{"tag":"ForAll","contents":["c",{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"c"}]},{"tag":"TypeVar","contents":"c"}]}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"c"}]},{"tag":"TypeVar","contents":"c"}]}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"c"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"p"},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeVar","contents":"c"}]}]}]}]},null]},null]},null]}},"sourceSpan":null},{"comments":null,"title":"bifoldl","info":{"declType":"typeClassMember","type":{"tag":"ForAll","contents":["c",{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"c"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"c"}]}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"c"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeVar","contents":"c"}]}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"c"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"p"},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeVar","contents":"c"}]}]}]}]},null]},null]},null]}},"sourceSpan":null},{"comments":null,"title":"bifoldMap","info":{"declType":"typeClassMember","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["m",{"tag":"ConstrainedType","contents":[[[[["Data","Monoid"],"Monoid"],[{"tag":"TypeVar","contents":"m"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"m"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeVar","contents":"m"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"p"},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeVar","contents":"m"}]}]}]}]},null]},null]},null]}},"sourceSpan":null}],"comments":"`Bifoldable` represents data structures with two type arguments which can be\nfolded.\n\nA fold for such a structure requires two step functions, one for each type\nargument. Type class instances should choose the appropriate step function based\non the type of the element encountered at each point of the fold.\n\nDefault implementations are provided by the following functions:\n\n- `bifoldrDefault`\n- `bifoldlDefault`\n- `bifoldMapDefaultR`\n- `bifoldMapDefaultL`\n\nNote: some combinations of the default implementations are unsafe to\nuse together - causing a non-terminating mutually recursive cycle.\nThese combinations are documented per function.\n","title":"Bifoldable","fixity":null,"info":{"arguments":[["p",null]],"declType":"typeClass","superclasses":[]},"sourceSpan":{"start":[29,1],"name":"src/Data/Bifoldable.purs","end":[39,1]}},{"children":[],"comments":"A default implementation of `bifoldr` using `bifoldMap`.\n\nNote: when defining a `Bifoldable` instance, this function is unsafe to\nuse in combination with `bifoldMapDefaultR`.\n","title":"bifoldrDefault","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["c",{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["p",{"tag":"ConstrainedType","contents":[[[[["Data","Bifoldable"],"Bifoldable"],[{"tag":"TypeVar","contents":"p"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"c"}]},{"tag":"TypeVar","contents":"c"}]}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"c"}]},{"tag":"TypeVar","contents":"c"}]}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"c"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"p"},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeVar","contents":"c"}]}]}]}]}]},null]},null]},null]},null]}},"sourceSpan":{"start":[39,1],"name":"src/Data/Bifoldable.purs","end":[41,1]}},{"children":[],"comments":"A default implementation of `bifoldl` using `bifoldMap`.\n\nNote: when defining a `Bifoldable` instance, this function is unsafe to\nuse in combination with `bifoldMapDefaultL`.\n","title":"bifoldlDefault","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["c",{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["p",{"tag":"ConstrainedType","contents":[[[[["Data","Bifoldable"],"Bifoldable"],[{"tag":"TypeVar","contents":"p"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"c"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"c"}]}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"c"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeVar","contents":"c"}]}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"c"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"p"},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeVar","contents":"c"}]}]}]}]}]},null]},null]},null]},null]}},"sourceSpan":{"start":[48,1],"name":"src/Data/Bifoldable.purs","end":[50,1]}},{"children":[],"comments":"A default implementation of `bifoldMap` using `bifoldr`.\n\nNote: when defining a `Bifoldable` instance, this function is unsafe to\nuse in combination with `bifoldrDefault`.\n","title":"bifoldMapDefaultR","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["m",{"tag":"ForAll","contents":["p",{"tag":"ConstrainedType","contents":[[[[["Data","Bifoldable"],"Bifoldable"],[{"tag":"TypeVar","contents":"p"}]],[[["Data","Monoid"],"Monoid"],[{"tag":"TypeVar","contents":"m"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"m"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeVar","contents":"m"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"p"},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeVar","contents":"m"}]}]}]}]},null]},null]},null]},null]}},"sourceSpan":{"start":[58,1],"name":"src/Data/Bifoldable.purs","end":[60,1]}},{"children":[],"comments":"A default implementation of `bifoldMap` using `bifoldl`.\n\nNote: when defining a `Bifoldable` instance, this function is unsafe to\nuse in combination with `bifoldlDefault`.\n","title":"bifoldMapDefaultL","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["m",{"tag":"ForAll","contents":["p",{"tag":"ConstrainedType","contents":[[[[["Data","Bifoldable"],"Bifoldable"],[{"tag":"TypeVar","contents":"p"}]],[[["Data","Monoid"],"Monoid"],[{"tag":"TypeVar","contents":"m"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"m"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeVar","contents":"m"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"p"},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeVar","contents":"m"}]}]}]}]},null]},null]},null]},null]}},"sourceSpan":{"start":[67,1],"name":"src/Data/Bifoldable.purs","end":[69,1]}},{"children":[],"comments":"Fold a data structure, accumulating values in a monoidal type.\n","title":"bifold","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["m",{"tag":"ForAll","contents":["t",{"tag":"ConstrainedType","contents":[[[[["Data","Bifoldable"],"Bifoldable"],[{"tag":"TypeVar","contents":"t"}]],[[["Data","Monoid"],"Monoid"],[{"tag":"TypeVar","contents":"m"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"t"},{"tag":"TypeVar","contents":"m"}]},{"tag":"TypeVar","contents":"m"}]}]},{"tag":"TypeVar","contents":"m"}]}]},null]},null]}},"sourceSpan":{"start":[74,1],"name":"src/Data/Bifoldable.purs","end":[75,1]}},{"children":[],"comments":"Traverse a data structure, accumulating effects using an `Applicative` functor,\nignoring the final result.\n","title":"bitraverse_","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["d",{"tag":"ForAll","contents":["c",{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["f",{"tag":"ForAll","contents":["t",{"tag":"ConstrainedType","contents":[[[[["Data","Bifoldable"],"Bifoldable"],[{"tag":"TypeVar","contents":"t"}]],[[["Prelude"],"Applicative"],[{"tag":"TypeVar","contents":"f"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"c"}]}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"d"}]}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"t"},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeConstructor","contents":[["Prelude"],"Unit"]}]}]}]}]}]},null]},null]},null]},null]},null]},null]}},"sourceSpan":{"start":[79,1],"name":"src/Data/Bifoldable.purs","end":[80,1]}},{"children":[],"comments":"A version of `bitraverse_` with the data structure as the first argument.\n","title":"bifor_","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["d",{"tag":"ForAll","contents":["c",{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["f",{"tag":"ForAll","contents":["t",{"tag":"ConstrainedType","contents":[[[[["Data","Bifoldable"],"Bifoldable"],[{"tag":"TypeVar","contents":"t"}]],[[["Prelude"],"Applicative"],[{"tag":"TypeVar","contents":"f"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"t"},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"c"}]}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"d"}]}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeConstructor","contents":[["Prelude"],"Unit"]}]}]}]}]}]},null]},null]},null]},null]},null]},null]}},"sourceSpan":{"start":[83,1],"name":"src/Data/Bifoldable.purs","end":[84,1]}},{"children":[],"comments":"Collapse a data structure, collecting effects using an `Applicative` functor,\nignoring the final result.\n","title":"bisequence_","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["f",{"tag":"ForAll","contents":["t",{"tag":"ConstrainedType","contents":[[[[["Data","Bifoldable"],"Bifoldable"],[{"tag":"TypeVar","contents":"t"}]],[[["Prelude"],"Applicative"],[{"tag":"TypeVar","contents":"f"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"t"},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"b"}]}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeConstructor","contents":[["Prelude"],"Unit"]}]}]}]},null]},null]},null]},null]}},"sourceSpan":{"start":[88,1],"name":"src/Data/Bifoldable.purs","end":[89,1]}},{"children":[],"comments":"Test whether a predicate holds at any position in a data structure.\n","title":"biany","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["c",{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["t",{"tag":"ConstrainedType","contents":[[[[["Data","Bifoldable"],"Bifoldable"],[{"tag":"TypeVar","contents":"t"}]],[[["Prelude"],"BooleanAlgebra"],[{"tag":"TypeVar","contents":"c"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"c"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeVar","contents":"c"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"t"},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeVar","contents":"c"}]}]}]}]},null]},null]},null]},null]}},"sourceSpan":{"start":[92,1],"name":"src/Data/Bifoldable.purs","end":[93,1]}},{"children":[],"comments":null,"title":"biall","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["c",{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["t",{"tag":"ConstrainedType","contents":[[[[["Data","Bifoldable"],"Bifoldable"],[{"tag":"TypeVar","contents":"t"}]],[[["Prelude"],"BooleanAlgebra"],[{"tag":"TypeVar","contents":"c"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"c"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeVar","contents":"c"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"t"},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeVar","contents":"c"}]}]}]}]},null]},null]},null]},null]}},"sourceSpan":{"start":[96,1],"name":"src/Data/Bifoldable.purs","end":[97,1]}}]},{"reExports":[],"name":"Data.Bitraversable","comments":null,"declarations":[{"children":[{"comments":null,"title":"bitraverse","info":{"declType":"typeClassMember","type":{"tag":"ForAll","contents":["d",{"tag":"ForAll","contents":["c",{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["f",{"tag":"ConstrainedType","contents":[[[[["Prelude"],"Applicative"],[{"tag":"TypeVar","contents":"f"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"c"}]}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"d"}]}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"t"},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"t"},{"tag":"TypeVar","contents":"c"}]},{"tag":"TypeVar","contents":"d"}]}]}]}]}]}]},null]},null]},null]},null]},null]}},"sourceSpan":null},{"comments":null,"title":"bisequence","info":{"declType":"typeClassMember","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["f",{"tag":"ConstrainedType","contents":[[[[["Prelude"],"Applicative"],[{"tag":"TypeVar","contents":"f"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"t"},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"b"}]}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"t"},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]}]}]},null]},null]},null]}},"sourceSpan":null}],"comments":"`Bitraversable` represents data structures with two type arguments which can be\ntraversed.\n\nA traversal for such a structure requires two functions, one for each type\nargument. Type class instances should choose the appropriate function based\non the type of the element encountered at each point of the traversal.\n\nDefault implementations are provided by the following functions:\n\n- `bitraverseDefault`\n- `bisequenceDefault`\n","title":"Bitraversable","fixity":null,"info":{"arguments":[["t",null]],"declType":"typeClass","superclasses":[[[["Data","Bifunctor"],"Bifunctor"],[{"tag":"TypeVar","contents":"t"}]],[[["Data","Bifoldable"],"Bifoldable"],[{"tag":"TypeVar","contents":"t"}]]]},"sourceSpan":{"start":[19,1],"name":"src/Data/Bitraversable.purs","end":[25,1]}},{"children":[],"comments":"A default implementation of `bitraverse` using `bisequence` and `bimap`.\n","title":"bitraverseDefault","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["d",{"tag":"ForAll","contents":["c",{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["f",{"tag":"ForAll","contents":["t",{"tag":"ConstrainedType","contents":[[[[["Data","Bitraversable"],"Bitraversable"],[{"tag":"TypeVar","contents":"t"}]],[[["Prelude"],"Applicative"],[{"tag":"TypeVar","contents":"f"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"c"}]}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"d"}]}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"t"},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"t"},{"tag":"TypeVar","contents":"c"}]},{"tag":"TypeVar","contents":"d"}]}]}]}]}]}]},null]},null]},null]},null]},null]},null]}},"sourceSpan":{"start":[25,1],"name":"src/Data/Bitraversable.purs","end":[27,1]}},{"children":[],"comments":"A default implementation of `bisequence` using `bitraverse`.\n","title":"bisequenceDefault","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["f",{"tag":"ForAll","contents":["t",{"tag":"ConstrainedType","contents":[[[[["Data","Bitraversable"],"Bitraversable"],[{"tag":"TypeVar","contents":"t"}]],[[["Prelude"],"Applicative"],[{"tag":"TypeVar","contents":"f"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"t"},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"b"}]}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"t"},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]}]}]},null]},null]},null]},null]}},"sourceSpan":{"start":[30,1],"name":"src/Data/Bitraversable.purs","end":[32,1]}},{"children":[],"comments":"Traverse a data structure, accumulating effects and results using an `Applicative` functor.\n","title":"bifor","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["d",{"tag":"ForAll","contents":["c",{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["f",{"tag":"ForAll","contents":["t",{"tag":"ConstrainedType","contents":[[[[["Data","Bitraversable"],"Bitraversable"],[{"tag":"TypeVar","contents":"t"}]],[[["Prelude"],"Applicative"],[{"tag":"TypeVar","contents":"f"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"t"},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"c"}]}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"d"}]}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"t"},{"tag":"TypeVar","contents":"c"}]},{"tag":"TypeVar","contents":"d"}]}]}]}]}]}]},null]},null]},null]},null]},null]},null]}},"sourceSpan":{"start":[36,1],"name":"src/Data/Bitraversable.purs","end":[37,1]}}]},{"reExports":[],"name":"Data.Foldable","comments":null,"declarations":[{"children":[{"comments":null,"title":"foldr","info":{"declType":"typeClassMember","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeVar","contents":"b"}]}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeVar","contents":"b"}]}]}]},null]},null]}},"sourceSpan":null},{"comments":null,"title":"foldl","info":{"declType":"typeClassMember","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeVar","contents":"b"}]}]}]},null]},null]}},"sourceSpan":null},{"comments":null,"title":"foldMap","info":{"declType":"typeClassMember","type":{"tag":"ForAll","contents":["m",{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[[[[["Data","Monoid"],"Monoid"],[{"tag":"TypeVar","contents":"m"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"m"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeVar","contents":"m"}]}]}]},null]},null]}},"sourceSpan":null},{"comments":null,"title":"foldableArray","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Foldable"],"Foldable"]},{"tag":"TypeConstructor","contents":[["Prim"],"Array"]}]}},"sourceSpan":{"start":[95,1],"name":"src/Data/Foldable.purs","end":[100,1]}},{"comments":null,"title":"foldableMaybe","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Foldable"],"Foldable"]},{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]}]}},"sourceSpan":{"start":[103,1],"name":"src/Data/Foldable.purs","end":[111,1]}},{"comments":null,"title":"foldableFirst","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Foldable"],"Foldable"]},{"tag":"TypeConstructor","contents":[["Data","Maybe","First"],"First"]}]}},"sourceSpan":{"start":[111,1],"name":"src/Data/Foldable.purs","end":[116,1]}},{"comments":null,"title":"foldableLast","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Foldable"],"Foldable"]},{"tag":"TypeConstructor","contents":[["Data","Maybe","Last"],"Last"]}]}},"sourceSpan":{"start":[116,1],"name":"src/Data/Foldable.purs","end":[121,1]}},{"comments":null,"title":"foldableAdditive","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Foldable"],"Foldable"]},{"tag":"TypeConstructor","contents":[["Data","Monoid","Additive"],"Additive"]}]}},"sourceSpan":{"start":[121,1],"name":"src/Data/Foldable.purs","end":[126,1]}},{"comments":null,"title":"foldableDual","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Foldable"],"Foldable"]},{"tag":"TypeConstructor","contents":[["Data","Monoid","Dual"],"Dual"]}]}},"sourceSpan":{"start":[126,1],"name":"src/Data/Foldable.purs","end":[131,1]}},{"comments":null,"title":"foldableDisj","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Foldable"],"Foldable"]},{"tag":"TypeConstructor","contents":[["Data","Monoid","Disj"],"Disj"]}]}},"sourceSpan":{"start":[131,1],"name":"src/Data/Foldable.purs","end":[136,1]}},{"comments":null,"title":"foldableConj","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Foldable"],"Foldable"]},{"tag":"TypeConstructor","contents":[["Data","Monoid","Conj"],"Conj"]}]}},"sourceSpan":{"start":[136,1],"name":"src/Data/Foldable.purs","end":[141,1]}},{"comments":null,"title":"foldableMultiplicative","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Foldable"],"Foldable"]},{"tag":"TypeConstructor","contents":[["Data","Monoid","Multiplicative"],"Multiplicative"]}]}},"sourceSpan":{"start":[141,1],"name":"src/Data/Foldable.purs","end":[147,1]}}],"comments":"`Foldable` represents data structures which can be _folded_.\n\n- `foldr` folds a structure from the right\n- `foldl` folds a structure from the left\n- `foldMap` folds a structure by accumulating values in a `Monoid`\n\nDefault implementations are provided by the following functions:\n\n- `foldrDefault`\n- `foldlDefault`\n- `foldMapDefaultR`\n- `foldMapDefaultL`\n\nNote: some combinations of the default implementations are unsafe to\nuse together - causing a non-terminating mutually recursive cycle.\nThese combinations are documented per function.\n","title":"Foldable","fixity":null,"info":{"arguments":[["f",null]],"declType":"typeClass","superclasses":[]},"sourceSpan":{"start":[56,1],"name":"src/Data/Foldable.purs","end":[66,1]}},{"children":[],"comments":"A default implementation of `foldr` using `foldMap`.\n\nNote: when defining a `Foldable` instance, this function is unsafe to use\nin combination with `foldMapDefaultR`.\n","title":"foldrDefault","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["f",{"tag":"ConstrainedType","contents":[[[[["Data","Foldable"],"Foldable"],[{"tag":"TypeVar","contents":"f"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeVar","contents":"b"}]}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeVar","contents":"b"}]}]}]}]},null]},null]},null]}},"sourceSpan":{"start":[66,1],"name":"src/Data/Foldable.purs","end":[68,1]}},{"children":[],"comments":"A default implementation of `foldl` using `foldMap`.\n\nNote: when defining a `Foldable` instance, this function is unsafe to use\nin combination with `foldMapDefaultL`.\n","title":"foldlDefault","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["f",{"tag":"ConstrainedType","contents":[[[[["Data","Foldable"],"Foldable"],[{"tag":"TypeVar","contents":"f"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeVar","contents":"b"}]}]}]}]},null]},null]},null]}},"sourceSpan":{"start":[74,1],"name":"src/Data/Foldable.purs","end":[76,1]}},{"children":[],"comments":"A default implementation of `foldMap` using `foldr`.\n\nNote: when defining a `Foldable` instance, this function is unsafe to use\nin combination with `foldrDefault`.\n","title":"foldMapDefaultR","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["m",{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["f",{"tag":"ConstrainedType","contents":[[[[["Data","Foldable"],"Foldable"],[{"tag":"TypeVar","contents":"f"}]],[[["Data","Monoid"],"Monoid"],[{"tag":"TypeVar","contents":"m"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"m"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeVar","contents":"m"}]}]}]},null]},null]},null]}},"sourceSpan":{"start":[82,1],"name":"src/Data/Foldable.purs","end":[84,1]}},{"children":[],"comments":"A default implementation of `foldMap` using `foldl`.\n\nNote: when defining a `Foldable` instance, this function is unsafe to use\nin combination with `foldlDefault`.\n","title":"foldMapDefaultL","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["m",{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["f",{"tag":"ConstrainedType","contents":[[[[["Data","Foldable"],"Foldable"],[{"tag":"TypeVar","contents":"f"}]],[[["Data","Monoid"],"Monoid"],[{"tag":"TypeVar","contents":"m"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"m"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeVar","contents":"m"}]}]}]},null]},null]},null]}},"sourceSpan":{"start":[90,1],"name":"src/Data/Foldable.purs","end":[92,1]}},{"children":[],"comments":"Fold a data structure, accumulating values in some `Monoid`.\n","title":"fold","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["m",{"tag":"ForAll","contents":["f",{"tag":"ConstrainedType","contents":[[[[["Data","Foldable"],"Foldable"],[{"tag":"TypeVar","contents":"f"}]],[[["Data","Monoid"],"Monoid"],[{"tag":"TypeVar","contents":"m"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"m"}]}]},{"tag":"TypeVar","contents":"m"}]}]},null]},null]}},"sourceSpan":{"start":[147,1],"name":"src/Data/Foldable.purs","end":[148,1]}},{"children":[],"comments":"Traverse a data structure, performing some effects encoded by an\n`Applicative` functor at each value, ignoring the final result.\n\nFor example:\n\n```purescript\ntraverse_ print [1, 2, 3]\n```\n","title":"traverse_","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["m",{"tag":"ForAll","contents":["f",{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[[[[["Prelude"],"Applicative"],[{"tag":"TypeVar","contents":"m"}]],[[["Data","Foldable"],"Foldable"],[{"tag":"TypeVar","contents":"f"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"m"},{"tag":"TypeVar","contents":"b"}]}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"m"},{"tag":"TypeConstructor","contents":[["Prelude"],"Unit"]}]}]}]}]},null]},null]},null]},null]}},"sourceSpan":{"start":[158,1],"name":"src/Data/Foldable.purs","end":[159,1]}},{"children":[],"comments":"A version of `traverse_` with its arguments flipped.\n\nThis can be useful when running an action written using do notation\nfor every element in a data structure:\n\nFor example:\n\n```purescript\nfor_ [1, 2, 3] \\n -> do\n  print n\n  trace \"squared is\"\n  print (n * n)\n```\n","title":"for_","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["m",{"tag":"ForAll","contents":["f",{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[[[[["Prelude"],"Applicative"],[{"tag":"TypeVar","contents":"m"}]],[[["Data","Foldable"],"Foldable"],[{"tag":"TypeVar","contents":"f"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"m"},{"tag":"TypeVar","contents":"b"}]}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"m"},{"tag":"TypeConstructor","contents":[["Prelude"],"Unit"]}]}]}]}]},null]},null]},null]},null]}},"sourceSpan":{"start":[174,1],"name":"src/Data/Foldable.purs","end":[175,1]}},{"children":[],"comments":"Perform all of the effects in some data structure in the order\ngiven by the `Foldable` instance, ignoring the final result.\n\nFor example:\n\n```purescript\nsequence_ [ trace \"Hello, \", trace \" world!\" ]\n```\n","title":"sequence_","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["m",{"tag":"ForAll","contents":["f",{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[[[[["Prelude"],"Applicative"],[{"tag":"TypeVar","contents":"m"}]],[[["Data","Foldable"],"Foldable"],[{"tag":"TypeVar","contents":"f"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"m"},{"tag":"TypeVar","contents":"a"}]}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"m"},{"tag":"TypeConstructor","contents":[["Prelude"],"Unit"]}]}]}]},null]},null]},null]}},"sourceSpan":{"start":[185,1],"name":"src/Data/Foldable.purs","end":[186,1]}},{"children":[],"comments":"Fold a data structure, accumulating values in some `Monoid`.\n","title":"mconcat","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["m",{"tag":"ForAll","contents":["f",{"tag":"ConstrainedType","contents":[[[[["Data","Foldable"],"Foldable"],[{"tag":"TypeVar","contents":"f"}]],[[["Data","Monoid"],"Monoid"],[{"tag":"TypeVar","contents":"m"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"m"}]}]},{"tag":"TypeVar","contents":"m"}]}]},null]},null]}},"sourceSpan":{"start":[189,1],"name":"src/Data/Foldable.purs","end":[190,1]}},{"children":[],"comments":"Fold a data structure, accumulating values in some `Monoid`,\ncombining adjacent elements using the specified separator.\n","title":"intercalate","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["m",{"tag":"ForAll","contents":["f",{"tag":"ConstrainedType","contents":[[[[["Data","Foldable"],"Foldable"],[{"tag":"TypeVar","contents":"f"}]],[[["Data","Monoid"],"Monoid"],[{"tag":"TypeVar","contents":"m"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"m"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"m"}]}]},{"tag":"TypeVar","contents":"m"}]}]}]},null]},null]}},"sourceSpan":{"start":[194,1],"name":"src/Data/Foldable.purs","end":[195,1]}},{"children":[],"comments":"Test whether all `Boolean` values in a data structure are `true`.\n","title":"and","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["f",{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[[[[["Data","Foldable"],"Foldable"],[{"tag":"TypeVar","contents":"f"}]],[[["Prelude"],"BooleanAlgebra"],[{"tag":"TypeVar","contents":"a"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeVar","contents":"a"}]}]},null]},null]}},"sourceSpan":{"start":[201,1],"name":"src/Data/Foldable.purs","end":[202,1]}},{"children":[],"comments":"Test whether any `Boolean` value in a data structure is `true`.\n","title":"or","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["f",{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[[[[["Data","Foldable"],"Foldable"],[{"tag":"TypeVar","contents":"f"}]],[[["Prelude"],"BooleanAlgebra"],[{"tag":"TypeVar","contents":"a"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeVar","contents":"a"}]}]},null]},null]}},"sourceSpan":{"start":[205,1],"name":"src/Data/Foldable.purs","end":[206,1]}},{"children":[],"comments":"Test whether a predicate holds for any element in a data structure.\n","title":"any","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["f",{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[[[[["Data","Foldable"],"Foldable"],[{"tag":"TypeVar","contents":"f"}]],[[["Prelude"],"BooleanAlgebra"],[{"tag":"TypeVar","contents":"b"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeVar","contents":"b"}]}]}]},null]},null]},null]}},"sourceSpan":{"start":[209,1],"name":"src/Data/Foldable.purs","end":[210,1]}},{"children":[],"comments":"Test whether a predicate holds for all elements in a data structure.\n","title":"all","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["f",{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[[[[["Data","Foldable"],"Foldable"],[{"tag":"TypeVar","contents":"f"}]],[[["Prelude"],"BooleanAlgebra"],[{"tag":"TypeVar","contents":"b"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeVar","contents":"b"}]}]}]},null]},null]},null]}},"sourceSpan":{"start":[213,1],"name":"src/Data/Foldable.purs","end":[214,1]}},{"children":[],"comments":"Find the sum of the numeric values in a data structure.\n","title":"sum","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["f",{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[[[[["Data","Foldable"],"Foldable"],[{"tag":"TypeVar","contents":"f"}]],[[["Prelude"],"Semiring"],[{"tag":"TypeVar","contents":"a"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeVar","contents":"a"}]}]},null]},null]}},"sourceSpan":{"start":[217,1],"name":"src/Data/Foldable.purs","end":[218,1]}},{"children":[],"comments":"Find the product of the numeric values in a data structure.\n","title":"product","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["f",{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[[[[["Data","Foldable"],"Foldable"],[{"tag":"TypeVar","contents":"f"}]],[[["Prelude"],"Semiring"],[{"tag":"TypeVar","contents":"a"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeVar","contents":"a"}]}]},null]},null]}},"sourceSpan":{"start":[221,1],"name":"src/Data/Foldable.purs","end":[222,1]}},{"children":[],"comments":"Test whether a value is an element of a data structure.\n","title":"elem","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["f",{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[[[[["Data","Foldable"],"Foldable"],[{"tag":"TypeVar","contents":"f"}]],[[["Prelude"],"Eq"],[{"tag":"TypeVar","contents":"a"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}]}]},null]},null]}},"sourceSpan":{"start":[225,1],"name":"src/Data/Foldable.purs","end":[226,1]}},{"children":[],"comments":"Test whether a value is not an element of a data structure.\n","title":"notElem","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["f",{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[[[[["Data","Foldable"],"Foldable"],[{"tag":"TypeVar","contents":"f"}]],[[["Prelude"],"Eq"],[{"tag":"TypeVar","contents":"a"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}]}]},null]},null]}},"sourceSpan":{"start":[229,1],"name":"src/Data/Foldable.purs","end":[230,1]}},{"children":[],"comments":"Try to find an element in a data structure which satisfies a predicate.\n","title":"find","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["f",{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[[[[["Data","Foldable"],"Foldable"],[{"tag":"TypeVar","contents":"f"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeVar","contents":"a"}]}]}]}]},null]},null]}},"sourceSpan":{"start":[233,1],"name":"src/Data/Foldable.purs","end":[234,1]}},{"children":[],"comments":"Find the largest element of a structure, according to its `Ord` instance.\n","title":"maximum","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["f",{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[[[[["Prelude"],"Ord"],[{"tag":"TypeVar","contents":"a"}]],[[["Data","Foldable"],"Foldable"],[{"tag":"TypeVar","contents":"f"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeVar","contents":"a"}]}]}]},null]},null]}},"sourceSpan":{"start":[237,1],"name":"src/Data/Foldable.purs","end":[238,1]}},{"children":[],"comments":"Find the largest element of a structure, according to a given comparison\nfunction. The comparison function should represent a total ordering (see\nthe `Ord` type class laws); if it does not, the behaviour is undefined.\n","title":"maximumBy","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["f",{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[[[[["Data","Foldable"],"Foldable"],[{"tag":"TypeVar","contents":"f"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeConstructor","contents":[["Prelude"],"Ordering"]}]}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeVar","contents":"a"}]}]}]}]},null]},null]}},"sourceSpan":{"start":[243,1],"name":"src/Data/Foldable.purs","end":[244,1]}},{"children":[],"comments":"Find the smallest element of a structure, according to its `Ord` instance.\n","title":"minimum","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["f",{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[[[[["Prelude"],"Ord"],[{"tag":"TypeVar","contents":"a"}]],[[["Data","Foldable"],"Foldable"],[{"tag":"TypeVar","contents":"f"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeVar","contents":"a"}]}]}]},null]},null]}},"sourceSpan":{"start":[252,1],"name":"src/Data/Foldable.purs","end":[253,1]}},{"children":[],"comments":"Find the smallest element of a structure, according to a given comparison\nfunction. The comparison function should represent a total ordering (see\nthe `Ord` type class laws); if it does not, the behaviour is undefined.\n","title":"minimumBy","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["f",{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[[[[["Data","Foldable"],"Foldable"],[{"tag":"TypeVar","contents":"f"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeConstructor","contents":[["Prelude"],"Ordering"]}]}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeVar","contents":"a"}]}]}]}]},null]},null]}},"sourceSpan":{"start":[258,1],"name":"src/Data/Foldable.purs","end":[259,1]}}]},{"reExports":[],"name":"Data.Traversable","comments":null,"declarations":[{"children":[{"comments":null,"title":"traverse","info":{"declType":"typeClassMember","type":{"tag":"ForAll","contents":["m",{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[[[[["Prelude"],"Applicative"],[{"tag":"TypeVar","contents":"m"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"m"},{"tag":"TypeVar","contents":"b"}]}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"t"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"m"},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"t"},{"tag":"TypeVar","contents":"b"}]}]}]}]}]},null]},null]},null]}},"sourceSpan":null},{"comments":null,"title":"sequence","info":{"declType":"typeClassMember","type":{"tag":"ForAll","contents":["m",{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[[[[["Prelude"],"Applicative"],[{"tag":"TypeVar","contents":"m"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"t"},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"m"},{"tag":"TypeVar","contents":"a"}]}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"m"},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"t"},{"tag":"TypeVar","contents":"a"}]}]}]}]},null]},null]}},"sourceSpan":null},{"comments":null,"title":"traversableArray","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Traversable"],"Traversable"]},{"tag":"TypeConstructor","contents":[["Prim"],"Array"]}]}},"sourceSpan":{"start":[72,1],"name":"src/Data/Traversable.purs","end":[76,1]}},{"comments":null,"title":"traversableMaybe","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Traversable"],"Traversable"]},{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]}]}},"sourceSpan":{"start":[76,1],"name":"src/Data/Traversable.purs","end":[82,1]}},{"comments":null,"title":"traversableFirst","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Traversable"],"Traversable"]},{"tag":"TypeConstructor","contents":[["Data","Maybe","First"],"First"]}]}},"sourceSpan":{"start":[82,1],"name":"src/Data/Traversable.purs","end":[86,1]}},{"comments":null,"title":"traversableLast","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Traversable"],"Traversable"]},{"tag":"TypeConstructor","contents":[["Data","Maybe","Last"],"Last"]}]}},"sourceSpan":{"start":[86,1],"name":"src/Data/Traversable.purs","end":[90,1]}},{"comments":null,"title":"traversableAdditive","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Traversable"],"Traversable"]},{"tag":"TypeConstructor","contents":[["Data","Monoid","Additive"],"Additive"]}]}},"sourceSpan":{"start":[90,1],"name":"src/Data/Traversable.purs","end":[94,1]}},{"comments":null,"title":"traversableDual","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Traversable"],"Traversable"]},{"tag":"TypeConstructor","contents":[["Data","Monoid","Dual"],"Dual"]}]}},"sourceSpan":{"start":[94,1],"name":"src/Data/Traversable.purs","end":[98,1]}},{"comments":null,"title":"traversableConj","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Traversable"],"Traversable"]},{"tag":"TypeConstructor","contents":[["Data","Monoid","Conj"],"Conj"]}]}},"sourceSpan":{"start":[98,1],"name":"src/Data/Traversable.purs","end":[102,1]}},{"comments":null,"title":"traversableDisj","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Traversable"],"Traversable"]},{"tag":"TypeConstructor","contents":[["Data","Monoid","Disj"],"Disj"]}]}},"sourceSpan":{"start":[102,1],"name":"src/Data/Traversable.purs","end":[106,1]}},{"comments":null,"title":"traversableMultiplicative","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Traversable"],"Traversable"]},{"tag":"TypeConstructor","contents":[["Data","Monoid","Multiplicative"],"Multiplicative"]}]}},"sourceSpan":{"start":[106,1],"name":"src/Data/Traversable.purs","end":[123,1]}}],"comments":"`Traversable` represents data structures which can be _traversed_,\naccumulating results and effects in some `Applicative` functor.\n\n- `traverse` runs an action for every element in a data structure,\n  and accumulates the results.\n- `sequence` runs the actions _contained_ in a data structure,\n  and accumulates the results.\n\nThe `traverse` and `sequence` functions should be compatible in the\nfollowing sense:\n\n- `traverse f xs = sequence (f <$> xs)`\n- `sequence = traverse id`\n\n`Traversable` instances should also be compatible with the corresponding\n`Foldable` instances, in the following sense:\n\n- `foldMap f = runConst <<< traverse (Const <<< f)`\n\nDefault implementations are provided by the following functions:\n\n- `traverseDefault`\n- `sequenceDefault`\n","title":"Traversable","fixity":null,"info":{"arguments":[["t",null]],"declType":"typeClass","superclasses":[[[["Prelude"],"Functor"],[{"tag":"TypeVar","contents":"t"}]],[[["Data","Foldable"],"Foldable"],[{"tag":"TypeVar","contents":"t"}]]]},"sourceSpan":{"start":[48,1],"name":"src/Data/Traversable.purs","end":[54,1]}},{"children":[],"comments":"A default implementation of `traverse` using `sequence` and `map`.\n","title":"traverseDefault","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["m",{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["t",{"tag":"ConstrainedType","contents":[[[[["Data","Traversable"],"Traversable"],[{"tag":"TypeVar","contents":"t"}]],[[["Prelude"],"Applicative"],[{"tag":"TypeVar","contents":"m"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"m"},{"tag":"TypeVar","contents":"b"}]}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"t"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"m"},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"t"},{"tag":"TypeVar","contents":"b"}]}]}]}]}]},null]},null]},null]},null]}},"sourceSpan":{"start":[54,1],"name":"src/Data/Traversable.purs","end":[56,1]}},{"children":[],"comments":"A default implementation of `sequence` using `traverse`.\n","title":"sequenceDefault","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["m",{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["t",{"tag":"ConstrainedType","contents":[[[[["Data","Traversable"],"Traversable"],[{"tag":"TypeVar","contents":"t"}]],[[["Prelude"],"Applicative"],[{"tag":"TypeVar","contents":"m"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"t"},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"m"},{"tag":"TypeVar","contents":"a"}]}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"m"},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"t"},{"tag":"TypeVar","contents":"a"}]}]}]}]},null]},null]},null]}},"sourceSpan":{"start":[59,1],"name":"src/Data/Traversable.purs","end":[61,1]}},{"children":[],"comments":"A version of `traverse` with its arguments flipped.\n\n\nThis can be useful when running an action written using do notation\nfor every element in a data structure:\n\nFor example:\n\n```purescript\nfor [1, 2, 3] \\n -> do\n  print n\n  return (n * n)\n```\n","title":"for","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["t",{"tag":"ForAll","contents":["m",{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[[[[["Prelude"],"Applicative"],[{"tag":"TypeVar","contents":"m"}]],[[["Data","Traversable"],"Traversable"],[{"tag":"TypeVar","contents":"t"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"t"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"m"},{"tag":"TypeVar","contents":"b"}]}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"m"},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"t"},{"tag":"TypeVar","contents":"b"}]}]}]}]}]},null]},null]},null]},null]}},"sourceSpan":{"start":[123,1],"name":"src/Data/Traversable.purs","end":[124,1]}},{"children":[],"comments":null,"title":"Accum","fixity":null,"info":{"arguments":[["s",null],["a",null]],"declType":"typeSynonym","type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Object"]},{"tag":"RCons","contents":["accum",{"tag":"TypeVar","contents":"s"},{"tag":"RCons","contents":["value",{"tag":"TypeVar","contents":"a"},{"tag":"REmpty","contents":[]}]}]}]}},"sourceSpan":{"start":[126,1],"name":"src/Data/Traversable.purs","end":[128,1]}},{"children":[],"comments":"Fold a data structure from the left, keeping all intermediate results\ninstead of only the final result.\n","title":"scanl","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["f",{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[[[[["Data","Traversable"],"Traversable"],[{"tag":"TypeVar","contents":"f"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"b"}]}]}]}]}]},null]},null]},null]}},"sourceSpan":{"start":[147,1],"name":"src/Data/Traversable.purs","end":[148,1]}},{"children":[],"comments":"Fold a data structure from the left, keeping all intermediate results\ninstead of only the final result.\n\nUnlike `scanl`, `mapAccumL` allows the type of accumulator to differ\nfrom the element type of the final data structure.\n","title":"mapAccumL","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["f",{"tag":"ForAll","contents":["s",{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[[[[["Data","Traversable"],"Traversable"],[{"tag":"TypeVar","contents":"f"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"s"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Traversable"],"Accum"]},{"tag":"TypeVar","contents":"s"}]},{"tag":"TypeVar","contents":"b"}]}]}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"s"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Traversable"],"Accum"]},{"tag":"TypeVar","contents":"s"}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"b"}]}]}]}]}]}]},null]},null]},null]},null]}},"sourceSpan":{"start":[155,1],"name":"src/Data/Traversable.purs","end":[156,1]}},{"children":[],"comments":"Fold a data structure from the right, keeping all intermediate results\ninstead of only the final result.\n","title":"scanr","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["f",{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[[[[["Data","Traversable"],"Traversable"],[{"tag":"TypeVar","contents":"f"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeVar","contents":"b"}]}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"b"}]}]}]}]}]},null]},null]},null]}},"sourceSpan":{"start":[177,1],"name":"src/Data/Traversable.purs","end":[178,1]}},{"children":[],"comments":"Fold a data structure from the right, keeping all intermediate results\ninstead of only the final result.\n\nUnlike `scanr`, `mapAccumR` allows the type of accumulator to differ\nfrom the element type of the final data structure.\n","title":"mapAccumR","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["f",{"tag":"ForAll","contents":["s",{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[[[[["Data","Traversable"],"Traversable"],[{"tag":"TypeVar","contents":"f"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"s"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Traversable"],"Accum"]},{"tag":"TypeVar","contents":"s"}]},{"tag":"TypeVar","contents":"b"}]}]}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"s"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Traversable"],"Accum"]},{"tag":"TypeVar","contents":"s"}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"b"}]}]}]}]}]}]},null]},null]},null]},null]}},"sourceSpan":{"start":[185,1],"name":"src/Data/Traversable.purs","end":[186,1]}}]}],"resolvedDependencies":{"purescript-control":"0.3.2","purescript-console":"0.1.1","purescript-maybe":"0.3.5","purescript-invariant":"0.3.0","purescript-monoid":"0.3.2","purescript-prelude":"0.1.4","purescript-bifunctors":"0.4.0","purescript-assert":"0.1.1","purescript-integers":"0.2.1","purescript-eff":"0.1.2","purescript-math":"0.2.0","purescript-functions":"0.1.0"},"bookmarks":[{"package":null,"item":["Data.Traversable","Traversable"]},{"package":null,"item":["Data.Traversable","traverseDefault"]},{"package":null,"item":["Data.Traversable","sequenceDefault"]},{"package":null,"item":["Data.Traversable","traversableArray"]},{"package":null,"item":["Data.Traversable","traversableMaybe"]},{"package":null,"item":["Data.Traversable","traversableFirst"]},{"package":null,"item":["Data.Traversable","traversableLast"]},{"package":null,"item":["Data.Traversable","traversableAdditive"]},{"package":null,"item":["Data.Traversable","traversableDual"]},{"package":null,"item":["Data.Traversable","traversableConj"]},{"package":null,"item":["Data.Traversable","traversableDisj"]},{"package":null,"item":["Data.Traversable","traversableMultiplicative"]},{"package":null,"item":["Data.Traversable","for"]},{"package":null,"item":["Data.Traversable","Accum"]},{"package":null,"item":["Data.Traversable","scanl"]},{"package":null,"item":["Data.Traversable","mapAccumL"]},{"package":null,"item":["Data.Traversable","scanr"]},{"package":null,"item":["Data.Traversable","mapAccumR"]},{"package":"purescript-integers","item":["Data.Int","fromNumber"]},{"package":"purescript-integers","item":["Data.Int","floor"]},{"package":"purescript-integers","item":["Data.Int","ceil"]},{"package":"purescript-integers","item":["Data.Int","round"]},{"package":"purescript-integers","item":["Data.Int","toNumber"]},{"package":"purescript-integers","item":["Data.Int","fromString"]},{"package":"purescript-integers","item":["Data.Int","even"]},{"package":"purescript-integers","item":["Data.Int","odd"]},{"package":"purescript-maybe","item":["Data.Maybe.Unsafe","fromJust"]},{"package":"purescript-maybe","item":["Data.Maybe.Unsafe","unsafeThrow"]},{"package":null,"item":["Data.Foldable","Foldable"]},{"package":null,"item":["Data.Foldable","foldrDefault"]},{"package":null,"item":["Data.Foldable","foldlDefault"]},{"package":null,"item":["Data.Foldable","foldMapDefaultR"]},{"package":null,"item":["Data.Foldable","foldMapDefaultL"]},{"package":null,"item":["Data.Foldable","foldableArray"]},{"package":null,"item":["Data.Foldable","foldableMaybe"]},{"package":null,"item":["Data.Foldable","foldableFirst"]},{"package":null,"item":["Data.Foldable","foldableLast"]},{"package":null,"item":["Data.Foldable","foldableAdditive"]},{"package":null,"item":["Data.Foldable","foldableDual"]},{"package":null,"item":["Data.Foldable","foldableDisj"]},{"package":null,"item":["Data.Foldable","foldableConj"]},{"package":null,"item":["Data.Foldable","foldableMultiplicative"]},{"package":null,"item":["Data.Foldable","fold"]},{"package":null,"item":["Data.Foldable","traverse_"]},{"package":null,"item":["Data.Foldable","for_"]},{"package":null,"item":["Data.Foldable","sequence_"]},{"package":null,"item":["Data.Foldable","mconcat"]},{"package":null,"item":["Data.Foldable","intercalate"]},{"package":null,"item":["Data.Foldable","and"]},{"package":null,"item":["Data.Foldable","or"]},{"package":null,"item":["Data.Foldable","any"]},{"package":null,"item":["Data.Foldable","all"]},{"package":null,"item":["Data.Foldable","sum"]},{"package":null,"item":["Data.Foldable","product"]},{"package":null,"item":["Data.Foldable","elem"]},{"package":null,"item":["Data.Foldable","notElem"]},{"package":null,"item":["Data.Foldable","find"]},{"package":null,"item":["Data.Foldable","maximum"]},{"package":null,"item":["Data.Foldable","maximumBy"]},{"package":null,"item":["Data.Foldable","minimum"]},{"package":null,"item":["Data.Foldable","minimumBy"]},{"package":"purescript-maybe","item":["Data.Maybe.Last","Last"]},{"package":"purescript-maybe","item":["Data.Maybe.Last","runLast"]},{"package":"purescript-maybe","item":["Data.Maybe.Last","eqLast"]},{"package":"purescript-maybe","item":["Data.Maybe.Last","ordLast"]},{"package":"purescript-maybe","item":["Data.Maybe.Last","boundedLast"]},{"package":"purescript-maybe","item":["Data.Maybe.Last","functorLast"]},{"package":"purescript-maybe","item":["Data.Maybe.Last","applyLast"]},{"package":"purescript-maybe","item":["Data.Maybe.Last","applicativeLast"]},{"package":"purescript-maybe","item":["Data.Maybe.Last","bindLast"]},{"package":"purescript-maybe","item":["Data.Maybe.Last","monadLast"]},{"package":"purescript-maybe","item":["Data.Maybe.Last","extendLast"]},{"package":"purescript-maybe","item":["Data.Maybe.Last","invariantLast"]},{"package":"purescript-maybe","item":["Data.Maybe.Last","showLast"]},{"package":"purescript-maybe","item":["Data.Maybe.Last","semigroupLast"]},{"package":"purescript-maybe","item":["Data.Maybe.Last","monoidLast"]},{"package":"purescript-maybe","item":["Data.Maybe.First","First"]},{"package":"purescript-maybe","item":["Data.Maybe.First","runFirst"]},{"package":"purescript-maybe","item":["Data.Maybe.First","eqFirst"]},{"package":"purescript-maybe","item":["Data.Maybe.First","ordFirst"]},{"package":"purescript-maybe","item":["Data.Maybe.First","boundedFirst"]},{"package":"purescript-maybe","item":["Data.Maybe.First","functorFirst"]},{"package":"purescript-maybe","item":["Data.Maybe.First","applyFirst"]},{"package":"purescript-maybe","item":["Data.Maybe.First","applicativeFirst"]},{"package":"purescript-maybe","item":["Data.Maybe.First","bindFirst"]},{"package":"purescript-maybe","item":["Data.Maybe.First","monadFirst"]},{"package":"purescript-maybe","item":["Data.Maybe.First","extendFirst"]},{"package":"purescript-maybe","item":["Data.Maybe.First","invariantFirst"]},{"package":"purescript-maybe","item":["Data.Maybe.First","showFirst"]},{"package":"purescript-maybe","item":["Data.Maybe.First","semigroupFirst"]},{"package":"purescript-maybe","item":["Data.Maybe.First","monoidFirst"]},{"package":"purescript-maybe","item":["Data.Maybe","Maybe"]},{"package":"purescript-maybe","item":["Data.Maybe","maybe"]},{"package":"purescript-maybe","item":["Data.Maybe","maybe'"]},{"package":"purescript-maybe","item":["Data.Maybe","fromMaybe"]},{"package":"purescript-maybe","item":["Data.Maybe","fromMaybe'"]},{"package":"purescript-maybe","item":["Data.Maybe","isJust"]},{"package":"purescript-maybe","item":["Data.Maybe","isNothing"]},{"package":"purescript-maybe","item":["Data.Maybe","functorMaybe"]},{"package":"purescript-maybe","item":["Data.Maybe","applyMaybe"]},{"package":"purescript-maybe","item":["Data.Maybe","applicativeMaybe"]},{"package":"purescript-maybe","item":["Data.Maybe","altMaybe"]},{"package":"purescript-maybe","item":["Data.Maybe","plusMaybe"]},{"package":"purescript-maybe","item":["Data.Maybe","alternativeMaybe"]},{"package":"purescript-maybe","item":["Data.Maybe","bindMaybe"]},{"package":"purescript-maybe","item":["Data.Maybe","monadMaybe"]},{"package":"purescript-maybe","item":["Data.Maybe","monadPlusMaybe"]},{"package":"purescript-maybe","item":["Data.Maybe","extendMaybe"]},{"package":"purescript-maybe","item":["Data.Maybe","invariantMaybe"]},{"package":"purescript-maybe","item":["Data.Maybe","semigroupMaybe"]},{"package":"purescript-maybe","item":["Data.Maybe","monoidMaybe"]},{"package":"purescript-maybe","item":["Data.Maybe","semiringMaybe"]},{"package":"purescript-maybe","item":["Data.Maybe","moduloSemiringMaybe"]},{"package":"purescript-maybe","item":["Data.Maybe","ringMaybe"]},{"package":"purescript-maybe","item":["Data.Maybe","divisionRingMaybe"]},{"package":"purescript-maybe","item":["Data.Maybe","numMaybe"]},{"package":"purescript-maybe","item":["Data.Maybe","eqMaybe"]},{"package":"purescript-maybe","item":["Data.Maybe","ordMaybe"]},{"package":"purescript-maybe","item":["Data.Maybe","boundedMaybe"]},{"package":"purescript-maybe","item":["Data.Maybe","boundedOrdMaybe"]},{"package":"purescript-maybe","item":["Data.Maybe","booleanAlgebraMaybe"]},{"package":"purescript-maybe","item":["Data.Maybe","showMaybe"]},{"package":"purescript-control","item":["Control.MonadPlus","MonadPlus"]},{"package":"purescript-control","item":["Control.MonadPlus","guard"]},{"package":"purescript-control","item":["Control.MonadPlus","monadPlusArray"]},{"package":"purescript-control","item":["Control.Alternative","Alternative"]},{"package":"purescript-control","item":["Control.Alternative","alternativeArray"]},{"package":"purescript-control","item":["Control.Plus","Plus"]},{"package":"purescript-control","item":["Control.Plus","plusArray"]},{"package":"purescript-control","item":["Control.Alt","Alt"]},{"package":"purescript-control","item":["Control.Alt","(<|>)"]},{"package":"purescript-control","item":["Control.Alt","(<|>)"]},{"package":"purescript-control","item":["Control.Alt","altArray"]},{"package":null,"item":["Data.Bitraversable","Bitraversable"]},{"package":null,"item":["Data.Bitraversable","bitraverseDefault"]},{"package":null,"item":["Data.Bitraversable","bisequenceDefault"]},{"package":null,"item":["Data.Bitraversable","bifor"]},{"package":null,"item":["Data.Bifoldable","Bifoldable"]},{"package":null,"item":["Data.Bifoldable","bifoldrDefault"]},{"package":null,"item":["Data.Bifoldable","bifoldlDefault"]},{"package":null,"item":["Data.Bifoldable","bifoldMapDefaultR"]},{"package":null,"item":["Data.Bifoldable","bifoldMapDefaultL"]},{"package":null,"item":["Data.Bifoldable","bifold"]},{"package":null,"item":["Data.Bifoldable","bitraverse_"]},{"package":null,"item":["Data.Bifoldable","bifor_"]},{"package":null,"item":["Data.Bifoldable","bisequence_"]},{"package":null,"item":["Data.Bifoldable","biany"]},{"package":null,"item":["Data.Bifoldable","biall"]},{"package":"purescript-control","item":["Control.Apply","(<*)"]},{"package":"purescript-control","item":["Control.Apply","(*>)"]},{"package":"purescript-control","item":["Control.Apply","(<*)"]},{"package":"purescript-control","item":["Control.Apply","(*>)"]},{"package":"purescript-control","item":["Control.Apply","lift2"]},{"package":"purescript-control","item":["Control.Apply","lift3"]},{"package":"purescript-control","item":["Control.Apply","lift4"]},{"package":"purescript-control","item":["Control.Apply","lift5"]},{"package":"purescript-bifunctors","item":["Data.Bifunctor.Wrap","Wrap"]},{"package":"purescript-bifunctors","item":["Data.Bifunctor.Wrap","unwrap"]},{"package":"purescript-bifunctors","item":["Data.Bifunctor.Wrap","wrapBifunctor"]},{"package":"purescript-bifunctors","item":["Data.Bifunctor.Wrap","wrapFunctor"]},{"package":"purescript-bifunctors","item":["Data.Bifunctor.Wrap","wrapBiapply"]},{"package":"purescript-bifunctors","item":["Data.Bifunctor.Wrap","wrapBiapplicative"]},{"package":"purescript-bifunctors","item":["Data.Bifunctor.Product","Product"]},{"package":"purescript-bifunctors","item":["Data.Bifunctor.Product","productBifunctor"]},{"package":"purescript-bifunctors","item":["Data.Bifunctor.Product","productBiapply"]},{"package":"purescript-bifunctors","item":["Data.Bifunctor.Product","productBiapplicative"]},{"package":"purescript-bifunctors","item":["Data.Bifunctor.Joker","Joker"]},{"package":"purescript-bifunctors","item":["Data.Bifunctor.Joker","runJoker"]},{"package":"purescript-bifunctors","item":["Data.Bifunctor.Joker","jokerBifunctor"]},{"package":"purescript-bifunctors","item":["Data.Bifunctor.Joker","jokerFunctor"]},{"package":"purescript-bifunctors","item":["Data.Bifunctor.Joker","jokerBiapply"]},{"package":"purescript-bifunctors","item":["Data.Bifunctor.Joker","jokerBiapplicative"]},{"package":"purescript-bifunctors","item":["Data.Bifunctor.Join","Join"]},{"package":"purescript-bifunctors","item":["Data.Bifunctor.Join","runJoin"]},{"package":"purescript-bifunctors","item":["Data.Bifunctor.Join","joinFunctor"]},{"package":"purescript-bifunctors","item":["Data.Bifunctor.Join","joinApply"]},{"package":"purescript-bifunctors","item":["Data.Bifunctor.Join","joinApplicative"]},{"package":"purescript-bifunctors","item":["Data.Bifunctor.Flip","Flip"]},{"package":"purescript-bifunctors","item":["Data.Bifunctor.Flip","runFlip"]},{"package":"purescript-bifunctors","item":["Data.Bifunctor.Flip","flipBifunctor"]},{"package":"purescript-bifunctors","item":["Data.Bifunctor.Flip","flipFunctor"]},{"package":"purescript-bifunctors","item":["Data.Bifunctor.Flip","flipBiapply"]},{"package":"purescript-bifunctors","item":["Data.Bifunctor.Flip","flipBiapplicative"]},{"package":"purescript-bifunctors","item":["Data.Bifunctor.Clown","Clown"]},{"package":"purescript-bifunctors","item":["Data.Bifunctor.Clown","runClown"]},{"package":"purescript-bifunctors","item":["Data.Bifunctor.Clown","clownBifunctor"]},{"package":"purescript-bifunctors","item":["Data.Bifunctor.Clown","clownFunctor"]},{"package":"purescript-bifunctors","item":["Data.Bifunctor.Clown","clownBiapply"]},{"package":"purescript-bifunctors","item":["Data.Bifunctor.Clown","clownBiapplicative"]},{"package":"purescript-bifunctors","item":["Control.Biapplicative","Biapplicative"]},{"package":"purescript-bifunctors","item":["Control.Biapply","(<<$>>)"]},{"package":"purescript-bifunctors","item":["Control.Biapply","(<<*>>)"]},{"package":"purescript-bifunctors","item":["Control.Biapply","(<<*)"]},{"package":"purescript-bifunctors","item":["Control.Biapply","(*>>)"]},{"package":"purescript-bifunctors","item":["Control.Biapply","(<<$>>)"]},{"package":"purescript-bifunctors","item":["Control.Biapply","Biapply"]},{"package":"purescript-bifunctors","item":["Control.Biapply","(<<*>>)"]},{"package":"purescript-bifunctors","item":["Control.Biapply","(*>>)"]},{"package":"purescript-bifunctors","item":["Control.Biapply","(<<*)"]},{"package":"purescript-bifunctors","item":["Control.Biapply","bilift2"]},{"package":"purescript-bifunctors","item":["Control.Biapply","bilift3"]},{"package":"purescript-control","item":["Control.Bind","(=<<)"]},{"package":"purescript-control","item":["Control.Bind","(>=>)"]},{"package":"purescript-control","item":["Control.Bind","(<=<)"]},{"package":"purescript-control","item":["Control.Bind","(=<<)"]},{"package":"purescript-control","item":["Control.Bind","(>=>)"]},{"package":"purescript-control","item":["Control.Bind","(<=<)"]},{"package":"purescript-control","item":["Control.Bind","join"]},{"package":"purescript-control","item":["Control.Bind","ifM"]},{"package":"purescript-monoid","item":["Data.Monoid.Multiplicative","Multiplicative"]},{"package":"purescript-monoid","item":["Data.Monoid.Multiplicative","runMultiplicative"]},{"package":"purescript-monoid","item":["Data.Monoid.Multiplicative","eqMultiplicative"]},{"package":"purescript-monoid","item":["Data.Monoid.Multiplicative","ordMultiplicative"]},{"package":"purescript-monoid","item":["Data.Monoid.Multiplicative","functorMultiplicative"]},{"package":"purescript-monoid","item":["Data.Monoid.Multiplicative","applyMultiplicative"]},{"package":"purescript-monoid","item":["Data.Monoid.Multiplicative","applicativeMultiplicative"]},{"package":"purescript-monoid","item":["Data.Monoid.Multiplicative","bindMultiplicative"]},{"package":"purescript-monoid","item":["Data.Monoid.Multiplicative","monadMultiplicative"]},{"package":"purescript-monoid","item":["Data.Monoid.Multiplicative","extendMultiplicative"]},{"package":"purescript-monoid","item":["Data.Monoid.Multiplicative","comonadMultiplicative"]},{"package":"purescript-monoid","item":["Data.Monoid.Multiplicative","invariantMultiplicative"]},{"package":"purescript-monoid","item":["Data.Monoid.Multiplicative","showMultiplicative"]},{"package":"purescript-monoid","item":["Data.Monoid.Multiplicative","semigroupMultiplicative"]},{"package":"purescript-monoid","item":["Data.Monoid.Multiplicative","monoidMultiplicative"]},{"package":"purescript-monoid","item":["Data.Monoid.Dual","Dual"]},{"package":"purescript-monoid","item":["Data.Monoid.Dual","runDual"]},{"package":"purescript-monoid","item":["Data.Monoid.Dual","eqDual"]},{"package":"purescript-monoid","item":["Data.Monoid.Dual","ordDual"]},{"package":"purescript-monoid","item":["Data.Monoid.Dual","functorDual"]},{"package":"purescript-monoid","item":["Data.Monoid.Dual","applyDual"]},{"package":"purescript-monoid","item":["Data.Monoid.Dual","applicativeDual"]},{"package":"purescript-monoid","item":["Data.Monoid.Dual","bindDual"]},{"package":"purescript-monoid","item":["Data.Monoid.Dual","monadDual"]},{"package":"purescript-monoid","item":["Data.Monoid.Dual","extendDual"]},{"package":"purescript-monoid","item":["Data.Monoid.Dual","comonadDual"]},{"package":"purescript-monoid","item":["Data.Monoid.Dual","invariantDual"]},{"package":"purescript-monoid","item":["Data.Monoid.Dual","showDual"]},{"package":"purescript-monoid","item":["Data.Monoid.Dual","semigroupDual"]},{"package":"purescript-monoid","item":["Data.Monoid.Dual","monoidDual"]},{"package":"purescript-monoid","item":["Data.Monoid.Disj","Disj"]},{"package":"purescript-monoid","item":["Data.Monoid.Disj","runDisj"]},{"package":"purescript-monoid","item":["Data.Monoid.Disj","eqDisj"]},{"package":"purescript-monoid","item":["Data.Monoid.Disj","ordDisj"]},{"package":"purescript-monoid","item":["Data.Monoid.Disj","boundedDisj"]},{"package":"purescript-monoid","item":["Data.Monoid.Disj","functorDisj"]},{"package":"purescript-monoid","item":["Data.Monoid.Disj","applyDisj"]},{"package":"purescript-monoid","item":["Data.Monoid.Disj","applicativeDisj"]},{"package":"purescript-monoid","item":["Data.Monoid.Disj","bindDisj"]},{"package":"purescript-monoid","item":["Data.Monoid.Disj","monadDisj"]},{"package":"purescript-monoid","item":["Data.Monoid.Disj","extendDisj"]},{"package":"purescript-monoid","item":["Data.Monoid.Disj","comonadDisj"]},{"package":"purescript-monoid","item":["Data.Monoid.Disj","showDisj"]},{"package":"purescript-monoid","item":["Data.Monoid.Disj","semigroupDisj"]},{"package":"purescript-monoid","item":["Data.Monoid.Disj","monoidDisj"]},{"package":"purescript-monoid","item":["Data.Monoid.Disj","semiringDisj"]},{"package":"purescript-monoid","item":["Data.Monoid.Conj","Conj"]},{"package":"purescript-monoid","item":["Data.Monoid.Conj","runConj"]},{"package":"purescript-monoid","item":["Data.Monoid.Conj","eqConj"]},{"package":"purescript-monoid","item":["Data.Monoid.Conj","ordConj"]},{"package":"purescript-monoid","item":["Data.Monoid.Conj","boundedConj"]},{"package":"purescript-monoid","item":["Data.Monoid.Conj","functorConj"]},{"package":"purescript-monoid","item":["Data.Monoid.Conj","applyConj"]},{"package":"purescript-monoid","item":["Data.Monoid.Conj","applicativeConj"]},{"package":"purescript-monoid","item":["Data.Monoid.Conj","bindConj"]},{"package":"purescript-monoid","item":["Data.Monoid.Conj","monadConj"]},{"package":"purescript-monoid","item":["Data.Monoid.Conj","extendConj"]},{"package":"purescript-monoid","item":["Data.Monoid.Conj","comonadConj"]},{"package":"purescript-monoid","item":["Data.Monoid.Conj","showConj"]},{"package":"purescript-monoid","item":["Data.Monoid.Conj","semigroupConj"]},{"package":"purescript-monoid","item":["Data.Monoid.Conj","monoidConj"]},{"package":"purescript-monoid","item":["Data.Monoid.Conj","semiringConj"]},{"package":"purescript-monoid","item":["Data.Monoid.Additive","Additive"]},{"package":"purescript-monoid","item":["Data.Monoid.Additive","runAdditive"]},{"package":"purescript-monoid","item":["Data.Monoid.Additive","eqAdditive"]},{"package":"purescript-monoid","item":["Data.Monoid.Additive","ordAdditive"]},{"package":"purescript-monoid","item":["Data.Monoid.Additive","functorAdditive"]},{"package":"purescript-monoid","item":["Data.Monoid.Additive","applyAdditive"]},{"package":"purescript-monoid","item":["Data.Monoid.Additive","applicativeAdditive"]},{"package":"purescript-monoid","item":["Data.Monoid.Additive","bindAdditive"]},{"package":"purescript-monoid","item":["Data.Monoid.Additive","monadAdditive"]},{"package":"purescript-monoid","item":["Data.Monoid.Additive","extendAdditive"]},{"package":"purescript-monoid","item":["Data.Monoid.Additive","comonadAdditive"]},{"package":"purescript-monoid","item":["Data.Monoid.Additive","invariantAdditive"]},{"package":"purescript-monoid","item":["Data.Monoid.Additive","showAdditive"]},{"package":"purescript-monoid","item":["Data.Monoid.Additive","semigroupAdditive"]},{"package":"purescript-monoid","item":["Data.Monoid.Additive","monoidAdditive"]},{"package":"purescript-control","item":["Control.Comonad","Comonad"]},{"package":"purescript-control","item":["Control.Extend","(=>>)"]},{"package":"purescript-control","item":["Control.Extend","(<<=)"]},{"package":"purescript-control","item":["Control.Extend","(=>=)"]},{"package":"purescript-control","item":["Control.Extend","(=<=)"]},{"package":"purescript-control","item":["Control.Extend","Extend"]},{"package":"purescript-control","item":["Control.Extend","extendFn"]},{"package":"purescript-control","item":["Control.Extend","(<<=)"]},{"package":"purescript-control","item":["Control.Extend","(=>>)"]},{"package":"purescript-control","item":["Control.Extend","(=>=)"]},{"package":"purescript-control","item":["Control.Extend","(=<=)"]},{"package":"purescript-control","item":["Control.Extend","duplicate"]},{"package":"purescript-control","item":["Control.Lazy","Lazy"]},{"package":"purescript-control","item":["Control.Lazy","fix"]},{"package":"purescript-control","item":["Control.Monad","when"]},{"package":"purescript-control","item":["Control.Monad","unless"]},{"package":"purescript-assert","item":["Test.Assert","ASSERT"]},{"package":"purescript-assert","item":["Test.Assert","assert"]},{"package":"purescript-assert","item":["Test.Assert","assert'"]},{"package":"purescript-assert","item":["Test.Assert","assertThrows"]},{"package":"purescript-assert","item":["Test.Assert","assertThrows'"]},{"package":"purescript-eff","item":["Control.Monad.Eff.Unsafe","unsafeInterleaveEff"]},{"package":"purescript-eff","item":["Control.Monad.Eff.Unsafe","unsafePerformEff"]},{"package":"purescript-console","item":["Control.Monad.Eff.Console.Unsafe","logAny"]},{"package":"purescript-console","item":["Control.Monad.Eff.Console.Unsafe","errorAny"]},{"package":"purescript-console","item":["Control.Monad.Eff.Console","CONSOLE"]},{"package":"purescript-console","item":["Control.Monad.Eff.Console","log"]},{"package":"purescript-console","item":["Control.Monad.Eff.Console","error"]},{"package":"purescript-console","item":["Control.Monad.Eff.Console","print"]},{"package":"purescript-eff","item":["Control.Monad.Eff.Class","MonadEff"]},{"package":"purescript-eff","item":["Control.Monad.Eff.Class","monadEffEff"]},{"package":"purescript-eff","item":["Control.Monad.Eff","Eff"]},{"package":"purescript-eff","item":["Control.Monad.Eff","Pure"]},{"package":"purescript-eff","item":["Control.Monad.Eff","runPure"]},{"package":"purescript-eff","item":["Control.Monad.Eff","functorEff"]},{"package":"purescript-eff","item":["Control.Monad.Eff","applyEff"]},{"package":"purescript-eff","item":["Control.Monad.Eff","applicativeEff"]},{"package":"purescript-eff","item":["Control.Monad.Eff","bindEff"]},{"package":"purescript-eff","item":["Control.Monad.Eff","monadEff"]},{"package":"purescript-eff","item":["Control.Monad.Eff","untilE"]},{"package":"purescript-eff","item":["Control.Monad.Eff","whileE"]},{"package":"purescript-eff","item":["Control.Monad.Eff","forE"]},{"package":"purescript-eff","item":["Control.Monad.Eff","foreachE"]},{"package":"purescript-bifunctors","item":["Data.Bifunctor","Bifunctor"]},{"package":"purescript-bifunctors","item":["Data.Bifunctor","lmap"]},{"package":"purescript-bifunctors","item":["Data.Bifunctor","rmap"]},{"package":"purescript-functions","item":["Data.Function","on"]},{"package":"purescript-functions","item":["Data.Function","Fn0"]},{"package":"purescript-functions","item":["Data.Function","Fn1"]},{"package":"purescript-functions","item":["Data.Function","Fn2"]},{"package":"purescript-functions","item":["Data.Function","Fn3"]},{"package":"purescript-functions","item":["Data.Function","Fn4"]},{"package":"purescript-functions","item":["Data.Function","Fn5"]},{"package":"purescript-functions","item":["Data.Function","Fn6"]},{"package":"purescript-functions","item":["Data.Function","Fn7"]},{"package":"purescript-functions","item":["Data.Function","Fn8"]},{"package":"purescript-functions","item":["Data.Function","Fn9"]},{"package":"purescript-functions","item":["Data.Function","Fn10"]},{"package":"purescript-functions","item":["Data.Function","mkFn0"]},{"package":"purescript-functions","item":["Data.Function","mkFn1"]},{"package":"purescript-functions","item":["Data.Function","mkFn2"]},{"package":"purescript-functions","item":["Data.Function","mkFn3"]},{"package":"purescript-functions","item":["Data.Function","mkFn4"]},{"package":"purescript-functions","item":["Data.Function","mkFn5"]},{"package":"purescript-functions","item":["Data.Function","mkFn6"]},{"package":"purescript-functions","item":["Data.Function","mkFn7"]},{"package":"purescript-functions","item":["Data.Function","mkFn8"]},{"package":"purescript-functions","item":["Data.Function","mkFn9"]},{"package":"purescript-functions","item":["Data.Function","mkFn10"]},{"package":"purescript-functions","item":["Data.Function","runFn0"]},{"package":"purescript-functions","item":["Data.Function","runFn1"]},{"package":"purescript-functions","item":["Data.Function","runFn2"]},{"package":"purescript-functions","item":["Data.Function","runFn3"]},{"package":"purescript-functions","item":["Data.Function","runFn4"]},{"package":"purescript-functions","item":["Data.Function","runFn5"]},{"package":"purescript-functions","item":["Data.Function","runFn6"]},{"package":"purescript-functions","item":["Data.Function","runFn7"]},{"package":"purescript-functions","item":["Data.Function","runFn8"]},{"package":"purescript-functions","item":["Data.Function","runFn9"]},{"package":"purescript-functions","item":["Data.Function","runFn10"]},{"package":"purescript-control","item":["Data.Functor","(<$)"]},{"package":"purescript-control","item":["Data.Functor","($>)"]},{"package":"purescript-control","item":["Data.Functor","(<$)"]},{"package":"purescript-control","item":["Data.Functor","($>)"]},{"package":"purescript-monoid","item":["Data.Monoid.Endo","Endo"]},{"package":"purescript-monoid","item":["Data.Monoid.Endo","runEndo"]},{"package":"purescript-monoid","item":["Data.Monoid.Endo","invariantEndo"]},{"package":"purescript-monoid","item":["Data.Monoid.Endo","semigroupEndo"]},{"package":"purescript-monoid","item":["Data.Monoid.Endo","monoidEndo"]},{"package":"purescript-invariant","item":["Data.Functor.Invariant","Invariant"]},{"package":"purescript-invariant","item":["Data.Functor.Invariant","imapF"]},{"package":"purescript-invariant","item":["Data.Functor.Invariant","invariantFn"]},{"package":"purescript-invariant","item":["Data.Functor.Invariant","invariantArray"]},{"package":"purescript-integers","item":["Data.Int.Bits","(.&.)"]},{"package":"purescript-integers","item":["Data.Int.Bits","(.|.)"]},{"package":"purescript-integers","item":["Data.Int.Bits","(.^.)"]},{"package":"purescript-integers","item":["Data.Int.Bits","(.&.)"]},{"package":"purescript-integers","item":["Data.Int.Bits","(.|.)"]},{"package":"purescript-integers","item":["Data.Int.Bits","(.^.)"]},{"package":"purescript-integers","item":["Data.Int.Bits","shl"]},{"package":"purescript-integers","item":["Data.Int.Bits","shr"]},{"package":"purescript-integers","item":["Data.Int.Bits","zshr"]},{"package":"purescript-integers","item":["Data.Int.Bits","complement"]},{"package":"purescript-monoid","item":["Data.Monoid","Monoid"]},{"package":"purescript-monoid","item":["Data.Monoid","monoidUnit"]},{"package":"purescript-monoid","item":["Data.Monoid","monoidFn"]},{"package":"purescript-monoid","item":["Data.Monoid","monoidString"]},{"package":"purescript-monoid","item":["Data.Monoid","monoidArray"]},{"package":"purescript-math","item":["Math","Radians"]},{"package":"purescript-math","item":["Math","abs"]},{"package":"purescript-math","item":["Math","acos"]},{"package":"purescript-math","item":["Math","asin"]},{"package":"purescript-math","item":["Math","atan"]},{"package":"purescript-math","item":["Math","atan2"]},{"package":"purescript-math","item":["Math","ceil"]},{"package":"purescript-math","item":["Math","cos"]},{"package":"purescript-math","item":["Math","exp"]},{"package":"purescript-math","item":["Math","floor"]},{"package":"purescript-math","item":["Math","log"]},{"package":"purescript-math","item":["Math","max"]},{"package":"purescript-math","item":["Math","min"]},{"package":"purescript-math","item":["Math","pow"]},{"package":"purescript-math","item":["Math","round"]},{"package":"purescript-math","item":["Math","sin"]},{"package":"purescript-math","item":["Math","sqrt"]},{"package":"purescript-math","item":["Math","tan"]},{"package":"purescript-math","item":["Math","(%)"]},{"package":"purescript-math","item":["Math","(%)"]},{"package":"purescript-math","item":["Math","e"]},{"package":"purescript-math","item":["Math","ln2"]},{"package":"purescript-math","item":["Math","ln10"]},{"package":"purescript-math","item":["Math","log2e"]},{"package":"purescript-math","item":["Math","log10e"]},{"package":"purescript-math","item":["Math","pi"]},{"package":"purescript-math","item":["Math","sqrt1_2"]},{"package":"purescript-math","item":["Math","sqrt2"]},{"package":"purescript-prelude","item":["Prelude","Unit"]},{"package":"purescript-prelude","item":["Prelude","unit"]},{"package":"purescript-prelude","item":["Prelude","($)"]},{"package":"purescript-prelude","item":["Prelude","(#)"]},{"package":"purescript-prelude","item":["Prelude","($)"]},{"package":"purescript-prelude","item":["Prelude","(#)"]},{"package":"purescript-prelude","item":["Prelude","flip"]},{"package":"purescript-prelude","item":["Prelude","const"]},{"package":"purescript-prelude","item":["Prelude","asTypeOf"]},{"package":"purescript-prelude","item":["Prelude","otherwise"]},{"package":"purescript-prelude","item":["Prelude","Semigroupoid"]},{"package":"purescript-prelude","item":["Prelude","semigroupoidFn"]},{"package":"purescript-prelude","item":["Prelude","(>>>)"]},{"package":"purescript-prelude","item":["Prelude","(<<<)"]},{"package":"purescript-prelude","item":["Prelude","(<<<)"]},{"package":"purescript-prelude","item":["Prelude","(>>>)"]},{"package":"purescript-prelude","item":["Prelude","Category"]},{"package":"purescript-prelude","item":["Prelude","categoryFn"]},{"package":"purescript-prelude","item":["Prelude","Functor"]},{"package":"purescript-prelude","item":["Prelude","functorFn"]},{"package":"purescript-prelude","item":["Prelude","functorArray"]},{"package":"purescript-prelude","item":["Prelude","(<$>)"]},{"package":"purescript-prelude","item":["Prelude","(<#>)"]},{"package":"purescript-prelude","item":["Prelude","(<$>)"]},{"package":"purescript-prelude","item":["Prelude","(<#>)"]},{"package":"purescript-prelude","item":["Prelude","void"]},{"package":"purescript-prelude","item":["Prelude","Apply"]},{"package":"purescript-prelude","item":["Prelude","applyFn"]},{"package":"purescript-prelude","item":["Prelude","applyArray"]},{"package":"purescript-prelude","item":["Prelude","(<*>)"]},{"package":"purescript-prelude","item":["Prelude","(<*>)"]},{"package":"purescript-prelude","item":["Prelude","Applicative"]},{"package":"purescript-prelude","item":["Prelude","applicativeFn"]},{"package":"purescript-prelude","item":["Prelude","applicativeArray"]},{"package":"purescript-prelude","item":["Prelude","return"]},{"package":"purescript-prelude","item":["Prelude","liftA1"]},{"package":"purescript-prelude","item":["Prelude","Bind"]},{"package":"purescript-prelude","item":["Prelude","bindFn"]},{"package":"purescript-prelude","item":["Prelude","bindArray"]},{"package":"purescript-prelude","item":["Prelude","(>>=)"]},{"package":"purescript-prelude","item":["Prelude","(>>=)"]},{"package":"purescript-prelude","item":["Prelude","Monad"]},{"package":"purescript-prelude","item":["Prelude","monadFn"]},{"package":"purescript-prelude","item":["Prelude","monadArray"]},{"package":"purescript-prelude","item":["Prelude","liftM1"]},{"package":"purescript-prelude","item":["Prelude","ap"]},{"package":"purescript-prelude","item":["Prelude","Semigroup"]},{"package":"purescript-prelude","item":["Prelude","(<>)"]},{"package":"purescript-prelude","item":["Prelude","(++)"]},{"package":"purescript-prelude","item":["Prelude","(<>)"]},{"package":"purescript-prelude","item":["Prelude","(++)"]},{"package":"purescript-prelude","item":["Prelude","semigroupString"]},{"package":"purescript-prelude","item":["Prelude","semigroupUnit"]},{"package":"purescript-prelude","item":["Prelude","semigroupFn"]},{"package":"purescript-prelude","item":["Prelude","semigroupOrdering"]},{"package":"purescript-prelude","item":["Prelude","semigroupArray"]},{"package":"purescript-prelude","item":["Prelude","Semiring"]},{"package":"purescript-prelude","item":["Prelude","semiringInt"]},{"package":"purescript-prelude","item":["Prelude","semiringNumber"]},{"package":"purescript-prelude","item":["Prelude","semiringUnit"]},{"package":"purescript-prelude","item":["Prelude","(+)"]},{"package":"purescript-prelude","item":["Prelude","(*)"]},{"package":"purescript-prelude","item":["Prelude","(+)"]},{"package":"purescript-prelude","item":["Prelude","(*)"]},{"package":"purescript-prelude","item":["Prelude","Ring"]},{"package":"purescript-prelude","item":["Prelude","ringInt"]},{"package":"purescript-prelude","item":["Prelude","ringNumber"]},{"package":"purescript-prelude","item":["Prelude","ringUnit"]},{"package":"purescript-prelude","item":["Prelude","(-)"]},{"package":"purescript-prelude","item":["Prelude","(-)"]},{"package":"purescript-prelude","item":["Prelude","negate"]},{"package":"purescript-prelude","item":["Prelude","ModuloSemiring"]},{"package":"purescript-prelude","item":["Prelude","moduloSemiringInt"]},{"package":"purescript-prelude","item":["Prelude","moduloSemiringNumber"]},{"package":"purescript-prelude","item":["Prelude","moduloSemiringUnit"]},{"package":"purescript-prelude","item":["Prelude","(/)"]},{"package":"purescript-prelude","item":["Prelude","(/)"]},{"package":"purescript-prelude","item":["Prelude","DivisionRing"]},{"package":"purescript-prelude","item":["Prelude","divisionRingNumber"]},{"package":"purescript-prelude","item":["Prelude","divisionRingUnit"]},{"package":"purescript-prelude","item":["Prelude","Num"]},{"package":"purescript-prelude","item":["Prelude","numNumber"]},{"package":"purescript-prelude","item":["Prelude","numUnit"]},{"package":"purescript-prelude","item":["Prelude","Eq"]},{"package":"purescript-prelude","item":["Prelude","(==)"]},{"package":"purescript-prelude","item":["Prelude","(/=)"]},{"package":"purescript-prelude","item":["Prelude","(==)"]},{"package":"purescript-prelude","item":["Prelude","(/=)"]},{"package":"purescript-prelude","item":["Prelude","eqBoolean"]},{"package":"purescript-prelude","item":["Prelude","eqInt"]},{"package":"purescript-prelude","item":["Prelude","eqNumber"]},{"package":"purescript-prelude","item":["Prelude","eqChar"]},{"package":"purescript-prelude","item":["Prelude","eqString"]},{"package":"purescript-prelude","item":["Prelude","eqUnit"]},{"package":"purescript-prelude","item":["Prelude","eqArray"]},{"package":"purescript-prelude","item":["Prelude","eqOrdering"]},{"package":"purescript-prelude","item":["Prelude","Ordering"]},{"package":"purescript-prelude","item":["Prelude","Ord"]},{"package":"purescript-prelude","item":["Prelude","ordBoolean"]},{"package":"purescript-prelude","item":["Prelude","ordInt"]},{"package":"purescript-prelude","item":["Prelude","ordNumber"]},{"package":"purescript-prelude","item":["Prelude","ordString"]},{"package":"purescript-prelude","item":["Prelude","ordChar"]},{"package":"purescript-prelude","item":["Prelude","ordUnit"]},{"package":"purescript-prelude","item":["Prelude","ordArray"]},{"package":"purescript-prelude","item":["Prelude","ordOrdering"]},{"package":"purescript-prelude","item":["Prelude","(<)"]},{"package":"purescript-prelude","item":["Prelude","(>)"]},{"package":"purescript-prelude","item":["Prelude","(<=)"]},{"package":"purescript-prelude","item":["Prelude","(>=)"]},{"package":"purescript-prelude","item":["Prelude","(<)"]},{"package":"purescript-prelude","item":["Prelude","(>)"]},{"package":"purescript-prelude","item":["Prelude","(<=)"]},{"package":"purescript-prelude","item":["Prelude","(>=)"]},{"package":"purescript-prelude","item":["Prelude","unsafeCompare"]},{"package":"purescript-prelude","item":["Prelude","Bounded"]},{"package":"purescript-prelude","item":["Prelude","boundedBoolean"]},{"package":"purescript-prelude","item":["Prelude","boundedUnit"]},{"package":"purescript-prelude","item":["Prelude","boundedOrdering"]},{"package":"purescript-prelude","item":["Prelude","boundedInt"]},{"package":"purescript-prelude","item":["Prelude","boundedChar"]},{"package":"purescript-prelude","item":["Prelude","boundedFn"]},{"package":"purescript-prelude","item":["Prelude","BoundedOrd"]},{"package":"purescript-prelude","item":["Prelude","boundedOrdBoolean"]},{"package":"purescript-prelude","item":["Prelude","boundedOrdUnit"]},{"package":"purescript-prelude","item":["Prelude","boundedOrdOrdering"]},{"package":"purescript-prelude","item":["Prelude","boundedOrdInt"]},{"package":"purescript-prelude","item":["Prelude","boundedOrdChar"]},{"package":"purescript-prelude","item":["Prelude","BooleanAlgebra"]},{"package":"purescript-prelude","item":["Prelude","booleanAlgebraBoolean"]},{"package":"purescript-prelude","item":["Prelude","booleanAlgebraUnit"]},{"package":"purescript-prelude","item":["Prelude","booleanAlgebraFn"]},{"package":"purescript-prelude","item":["Prelude","(&&)"]},{"package":"purescript-prelude","item":["Prelude","(||)"]},{"package":"purescript-prelude","item":["Prelude","(&&)"]},{"package":"purescript-prelude","item":["Prelude","(||)"]},{"package":"purescript-prelude","item":["Prelude","Show"]},{"package":"purescript-prelude","item":["Prelude","showBoolean"]},{"package":"purescript-prelude","item":["Prelude","showInt"]},{"package":"purescript-prelude","item":["Prelude","showNumber"]},{"package":"purescript-prelude","item":["Prelude","showChar"]},{"package":"purescript-prelude","item":["Prelude","showString"]},{"package":"purescript-prelude","item":["Prelude","showUnit"]},{"package":"purescript-prelude","item":["Prelude","showArray"]},{"package":"purescript-prelude","item":["Prelude","showOrdering"]}],"version":"0.4.2","github":["purescript","purescript-foldable-traversable"],"versionTag":"v0.4.2","compilerVersion":"0.8.0.0"}