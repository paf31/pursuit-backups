{"uploader":"paf31","packageMeta":{"repository":{"url":"git://github.com/paf31/purescript-folds.git","type":"git"},"ignore":["**/.*","node_modules","bower_components","output"],"devDependencies":{"purescript-console":"^3.0.0","purescript-psci-support":"^3.0.0"},"dependencies":{"purescript-control":"^3.0.0","purescript-profunctor":"^3.0.0"},"name":"purescript-folds","license":["MIT"]},"tagTime":"2017-04-07T02:11:18+0000","modules":[{"reExports":[],"name":"Control.Fold","comments":"This module provides a type `Fold` for lefts folds, which can be combined\nusing the `Applicative` class:\n\n```purescript\naverage :: Fold Number Number\naverage = (/) <$> sum <*> length\n```\n\n`Fold` can be used to fold a `Foldable` structure (`foldl`), or scan a\n`Traversable` structure (`scanl`):\n\n```purescript\nfinalAverage = foldl average [1.0, 2.0, 3.0] :: Number\nmovingAverage = scanl average [1.0, 2.0, 3.0] :: Array Number\n```\n\nThis library is based on the `foldl` library by Gabriel Gonzalez:\n<http://hackage.haskell.org/package/foldl>\n","declarations":[{"children":[{"comments":null,"title":"profunctorFold","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Profunctor"],"Profunctor"]},{"tag":"TypeConstructor","contents":[["Control","Fold"],"Fold"]}]}},"sourceSpan":{"start":[160,1],"name":"/private/tmp/pursuit-staging/.psc-package/psc-0.11.3/folds/v3.0.0/src/Control/Fold.purs","end":[164,30]}},{"comments":null,"title":"functorFold","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Functor"],"Functor"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Fold"],"Fold"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[166,1],"name":"/private/tmp/pursuit-staging/.psc-package/psc-0.11.3/folds/v3.0.0/src/Control/Fold.purs","end":[170,30]}},{"comments":null,"title":"applyFold","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Apply"],"Apply"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Fold"],"Fold"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[172,1],"name":"/private/tmp/pursuit-staging/.psc-package/psc-0.11.3/folds/v3.0.0/src/Control/Fold.purs","end":[176,43]}},{"comments":null,"title":"applicativeFold","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Applicative"],"Applicative"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Fold"],"Fold"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[178,1],"name":"/private/tmp/pursuit-staging/.psc-package/psc-0.11.3/folds/v3.0.0/src/Control/Fold.purs","end":[181,56]}},{"comments":null,"title":"extendFold","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Extend"],"Extend"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Fold"],"Fold"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[183,1],"name":"/private/tmp/pursuit-staging/.psc-package/psc-0.11.3/folds/v3.0.0/src/Control/Fold.purs","end":[189,26]}},{"comments":null,"title":"comonadFold","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Comonad"],"Comonad"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Fold"],"Fold"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[191,1],"name":"/private/tmp/pursuit-staging/.psc-package/psc-0.11.3/folds/v3.0.0/src/Control/Fold.purs","end":[192,35]}},{"comments":null,"title":"semigroupFold","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","Semigroup"],"Semigroup"],"constraintArgs":[{"tag":"TypeVar","contents":"b"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Semigroup"],"Semigroup"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Fold"],"Fold"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}},"sourceSpan":{"start":[194,1],"name":"/private/tmp/pursuit-staging/.psc-package/psc-0.11.3/folds/v3.0.0/src/Control/Fold.purs","end":[195,24]}},{"comments":null,"title":"monoidFold","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","Monoid"],"Monoid"],"constraintArgs":[{"tag":"TypeVar","contents":"b"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Monoid"],"Monoid"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Fold"],"Fold"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}},"sourceSpan":{"start":[197,1],"name":"/private/tmp/pursuit-staging/.psc-package/psc-0.11.3/folds/v3.0.0/src/Control/Fold.purs","end":[198,17]}}],"comments":"A left fold, which takes zero or more values of type `a` as input\nand produces output of type `b`.\n","title":"Fold","info":{"declType":"data","dataDeclType":"newtype","typeArguments":[["a",null],["b",null]]},"sourceSpan":{"start":[60,1],"name":"/private/tmp/pursuit-staging/.psc-package/psc-0.11.3/folds/v3.0.0/src/Control/Fold.purs","end":[60,71]}},{"children":[],"comments":"Step a fold by providing a single input.\n","title":"stepFold","info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Fold"],"Fold"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Fold"],"Fold"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]}]},null]},null]}},"sourceSpan":{"start":[63,1],"name":"/private/tmp/pursuit-staging/.psc-package/psc-0.11.3/folds/v3.0.0/src/Control/Fold.purs","end":[63,50]}},{"children":[],"comments":"Create a `Fold` by providing an initial state, a function which updates\nthat state, and a function which produces output from a state.\n","title":"unfoldFold","info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["s",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"s"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"s"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"s"}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"s"}]},{"tag":"TypeVar","contents":"b"}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Fold"],"Fold"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]}]}]},null]},null]},null]}},"sourceSpan":{"start":[68,1],"name":"/private/tmp/pursuit-staging/.psc-package/psc-0.11.3/folds/v3.0.0/src/Control/Fold.purs","end":[68,71]}},{"children":[],"comments":"Create a `Fold` by providing an initial state and a function which updates\nthat state. This is a variant of `unfoldFold` where the output is the state\nitself.\n","title":"unfoldFold_","info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Fold"],"Fold"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]}]},null]},null]}},"sourceSpan":{"start":[77,1],"name":"/private/tmp/pursuit-staging/.psc-package/psc-0.11.3/folds/v3.0.0/src/Control/Fold.purs","end":[77,58]}},{"children":[],"comments":"Run a `Fold` by providing a `Foldable` container of inputs, and then\ngenerating a single output. This is analogous to the `foldl` function from\n`Data.Foldable`.\n","title":"foldl","info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["f",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Foldable"],"Foldable"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Fold"],"Fold"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeVar","contents":"b"}]}]}]},null]},null]},null]}},"sourceSpan":{"start":[83,1],"name":"/private/tmp/pursuit-staging/.psc-package/psc-0.11.3/folds/v3.0.0/src/Control/Fold.purs","end":[83,58]}},{"children":[],"comments":"Run a `Fold` by providing a `Traversable` container of inputs, and\ngenerating an output for each input. This is analogous to the `scanl` function from\n`Data.Traversable`.\n","title":"scanl","info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["f",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Traversable"],"Traversable"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Fold"],"Fold"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"b"}]}]}]}]},null]},null]},null]}},"sourceSpan":{"start":[89,1],"name":"/private/tmp/pursuit-staging/.psc-package/psc-0.11.3/folds/v3.0.0/src/Control/Fold.purs","end":[89,63]}},{"children":[],"comments":"`Fold` values in some `Monoid`.\n","title":"mconcat","info":{"declType":"value","type":{"tag":"ForAll","contents":["m",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Monoid"],"Monoid"],"constraintArgs":[{"tag":"TypeVar","contents":"m"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Fold"],"Fold"]},{"tag":"TypeVar","contents":"m"}]},{"tag":"TypeVar","contents":"m"}]}]},null]}},"sourceSpan":{"start":[93,1],"name":"/private/tmp/pursuit-staging/.psc-package/psc-0.11.3/folds/v3.0.0/src/Control/Fold.purs","end":[93,42]}},{"children":[],"comments":"A `Fold` which remembers the first input.\n","title":"head","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Fold"],"Fold"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeVar","contents":"a"}]}}]},null]}},"sourceSpan":{"start":[97,1],"name":"/private/tmp/pursuit-staging/.psc-package/psc-0.11.3/folds/v3.0.0/src/Control/Fold.purs","end":[97,35]}},{"children":[],"comments":"A `Fold` which keeps the last input.\n","title":"last","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Fold"],"Fold"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeVar","contents":"a"}]}}]},null]}},"sourceSpan":{"start":[101,1],"name":"/private/tmp/pursuit-staging/.psc-package/psc-0.11.3/folds/v3.0.0/src/Control/Fold.purs","end":[101,35]}},{"children":[],"comments":"A `Fold` which tests whether any inputs were seen.\n","title":"null","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Fold"],"Fold"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]},null]}},"sourceSpan":{"start":[105,1],"name":"/private/tmp/pursuit-staging/.psc-package/psc-0.11.3/folds/v3.0.0/src/Control/Fold.purs","end":[105,33]}},{"children":[],"comments":"A `Fold` which counts its inputs.\n","title":"length","info":{"declType":"value","type":{"tag":"ForAll","contents":["s",{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Semiring"],"Semiring"],"constraintArgs":[{"tag":"TypeVar","contents":"s"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Fold"],"Fold"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"s"}]}]},null]},null]}},"sourceSpan":{"start":[109,1],"name":"/private/tmp/pursuit-staging/.psc-package/psc-0.11.3/folds/v3.0.0/src/Control/Fold.purs","end":[109,45]}},{"children":[],"comments":"A `Fold` which tests if _all_ of its inputs were true\n(generalized to work with an arbitrary `HeytingAlgebra`).\n","title":"and","info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","HeytingAlgebra"],"HeytingAlgebra"],"constraintArgs":[{"tag":"TypeVar","contents":"b"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Fold"],"Fold"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeVar","contents":"b"}]}]},null]}},"sourceSpan":{"start":[114,1],"name":"/private/tmp/pursuit-staging/.psc-package/psc-0.11.3/folds/v3.0.0/src/Control/Fold.purs","end":[114,46]}},{"children":[],"comments":"A `Fold` which tests if _any_ of its inputs were true\n(generalized to work with an arbitrary `HeytingAlgebra`).\n","title":"or","info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","HeytingAlgebra"],"HeytingAlgebra"],"constraintArgs":[{"tag":"TypeVar","contents":"b"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Fold"],"Fold"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeVar","contents":"b"}]}]},null]}},"sourceSpan":{"start":[119,1],"name":"/private/tmp/pursuit-staging/.psc-package/psc-0.11.3/folds/v3.0.0/src/Control/Fold.purs","end":[119,45]}},{"children":[],"comments":"A `Fold` which tests if _all_ of its inputs satisfy some predicate\n(generalized to work with an arbitrary `HeytingAlgebra`).\n","title":"all","info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","HeytingAlgebra"],"HeytingAlgebra"],"constraintArgs":[{"tag":"TypeVar","contents":"b"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Fold"],"Fold"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]}]},null]},null]}},"sourceSpan":{"start":[124,1],"name":"/private/tmp/pursuit-staging/.psc-package/psc-0.11.3/folds/v3.0.0/src/Control/Fold.purs","end":[124,60]}},{"children":[],"comments":"A `Fold` which tests if _any_ of its inputs satisfy some predicate\n(generalized to work with an arbitrary `HeytingAlgebra`).\n","title":"any","info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","HeytingAlgebra"],"HeytingAlgebra"],"constraintArgs":[{"tag":"TypeVar","contents":"b"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Fold"],"Fold"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]}]},null]},null]}},"sourceSpan":{"start":[129,1],"name":"/private/tmp/pursuit-staging/.psc-package/psc-0.11.3/folds/v3.0.0/src/Control/Fold.purs","end":[129,60]}},{"children":[],"comments":"A `Fold` which computes the sum of its inputs\n(generalized to work with an arbitrary `Semiring`).\n","title":"sum","info":{"declType":"value","type":{"tag":"ForAll","contents":["s",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Semiring"],"Semiring"],"constraintArgs":[{"tag":"TypeVar","contents":"s"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Fold"],"Fold"]},{"tag":"TypeVar","contents":"s"}]},{"tag":"TypeVar","contents":"s"}]}]},null]}},"sourceSpan":{"start":[134,1],"name":"/private/tmp/pursuit-staging/.psc-package/psc-0.11.3/folds/v3.0.0/src/Control/Fold.purs","end":[134,40]}},{"children":[],"comments":"A `Fold` which computes the product of its inputs\n(generalized to work with an arbitrary `Semiring`).\n","title":"product","info":{"declType":"value","type":{"tag":"ForAll","contents":["s",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Semiring"],"Semiring"],"constraintArgs":[{"tag":"TypeVar","contents":"s"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Fold"],"Fold"]},{"tag":"TypeVar","contents":"s"}]},{"tag":"TypeVar","contents":"s"}]}]},null]}},"sourceSpan":{"start":[139,1],"name":"/private/tmp/pursuit-staging/.psc-package/psc-0.11.3/folds/v3.0.0/src/Control/Fold.purs","end":[139,44]}},{"children":[],"comments":"A `Fold` which computes the maximum of its inputs\n(generalized to work with an arbitrary `Bounded` type).\n","title":"maximum","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Bounded"],"Bounded"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Fold"],"Fold"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"a"}]}]},null]}},"sourceSpan":{"start":[144,1],"name":"/private/tmp/pursuit-staging/.psc-package/psc-0.11.3/folds/v3.0.0/src/Control/Fold.purs","end":[144,43]}},{"children":[],"comments":"A `Fold` which computes the minimum of its inputs\n(generalized to work with an arbitrary `Bounded` type).\n","title":"minimum","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Bounded"],"Bounded"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Fold"],"Fold"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"a"}]}]},null]}},"sourceSpan":{"start":[149,1],"name":"/private/tmp/pursuit-staging/.psc-package/psc-0.11.3/folds/v3.0.0/src/Control/Fold.purs","end":[149,43]}},{"children":[],"comments":"A `Fold` which tests if a specific value appeared as an input.\n","title":"elem","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Eq"],"Eq"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Fold"],"Fold"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}]}]},null]}},"sourceSpan":{"start":[153,1],"name":"/private/tmp/pursuit-staging/.psc-package/psc-0.11.3/folds/v3.0.0/src/Control/Fold.purs","end":[153,46]}},{"children":[],"comments":"A `Fold` which tests if a specific value did not appear as an input.\n","title":"notElem","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Eq"],"Eq"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Fold"],"Fold"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}]}]},null]}},"sourceSpan":{"start":[157,1],"name":"/private/tmp/pursuit-staging/.psc-package/psc-0.11.3/folds/v3.0.0/src/Control/Fold.purs","end":[157,49]}}]}],"resolvedDependencies":{"purescript-newtype":"2.0.0","purescript-control":"3.0.0","purescript-either":"3.0.0","purescript-profunctor":"3.0.0","purescript-maybe":"3.0.0","purescript-distributive":"3.0.0","purescript-invariant":"3.0.0","purescript-monoid":"3.0.0","purescript-foldable-traversable":"3.0.0","purescript-prelude":"3.0.0","purescript-bifunctors":"3.0.0","purescript-tuples":"4.0.0","purescript-identity":"3.0.0"},"version":"3.0.0","github":["paf31","purescript-folds"],"versionTag":"v3.0.0","moduleMap":{"Data.BooleanAlgebra":"purescript-prelude","Data.Ring":"purescript-prelude","Data.Bifunctor.Flip":"purescript-bifunctors","Data.Ord":"purescript-prelude","Data.Monoid.Dual":"purescript-monoid","Data.Bitraversable":"purescript-foldable-traversable","Data.Profunctor.Costar":"purescript-profunctor","Data.Boolean":"purescript-prelude","Control.Biapplicative":"purescript-bifunctors","Data.Bounded":"purescript-prelude","Data.Profunctor.Cochoice":"purescript-profunctor","Data.Show":"purescript-prelude","Data.Bifunctor.Clown":"purescript-bifunctors","Data.Foldable":"purescript-foldable-traversable","Control.Apply":"purescript-prelude","Data.Tuple.Nested":"purescript-tuples","Control.Monad":"purescript-prelude","Data.Monoid":"purescript-monoid","Data.Profunctor.Closed":"purescript-profunctor","Data.Maybe.First":"purescript-maybe","Control.Bind":"purescript-prelude","Data.Monoid.Additive":"purescript-monoid","Data.HeytingAlgebra":"purescript-prelude","Control.Alt":"purescript-control","Data.Ord.Unsafe":"purescript-prelude","Data.Semigroup":"purescript-prelude","Data.Tuple":"purescript-tuples","Control.Biapply":"purescript-bifunctors","Data.Distributive":"purescript-distributive","Control.Alternative":"purescript-control","Data.Semiring":"purescript-prelude","Data.CommutativeRing":"purescript-prelude","Data.NaturalTransformation":"purescript-prelude","Data.Monoid.Conj":"purescript-monoid","Data.Profunctor.Star":"purescript-profunctor","Data.Functor":"purescript-prelude","Data.Profunctor.Strong":"purescript-profunctor","Control.Category":"purescript-prelude","Data.Maybe":"purescript-maybe","Data.Profunctor":"purescript-profunctor","Control.Comonad":"purescript-control","Data.Function":"purescript-prelude","Data.Field":"purescript-prelude","Data.EuclideanRing":"purescript-prelude","Data.Functor.Invariant":"purescript-invariant","Prelude":"purescript-prelude","Data.Bifunctor.Product":"purescript-bifunctors","Control.Extend":"purescript-control","Control.Lazy":"purescript-control","Data.Eq":"purescript-prelude","Data.Either.Nested":"purescript-either","Data.Newtype":"purescript-newtype","Data.Bifunctor":"purescript-bifunctors","Data.Monoid.Disj":"purescript-monoid","Control.MonadPlus":"purescript-control","Data.Void":"purescript-prelude","Control.MonadZero":"purescript-control","Data.Profunctor.Costrong":"purescript-profunctor","Data.Bifunctor.Joker":"purescript-bifunctors","Data.Bifunctor.Wrap":"purescript-bifunctors","Data.Maybe.Last":"purescript-maybe","Data.Unit":"purescript-prelude","Data.Ordering":"purescript-prelude","Data.Identity":"purescript-identity","Control.Plus":"purescript-control","Data.Monoid.Multiplicative":"purescript-monoid","Control.Semigroupoid":"purescript-prelude","Data.Monoid.Alternate":"purescript-monoid","Data.Bifunctor.Join":"purescript-bifunctors","Data.Bifoldable":"purescript-foldable-traversable","Data.Monoid.Endo":"purescript-monoid","Data.Either":"purescript-either","Control.Applicative":"purescript-prelude","Data.Profunctor.Choice":"purescript-profunctor","Data.Traversable":"purescript-foldable-traversable"},"compilerVersion":"0.11.3"}