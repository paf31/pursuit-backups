{"uploader":"hendrikniemann","packageMeta":{"repository":{"url":"https://github.com/hendrikniemann/purescript-graphql.git","type":"git"},"ignore":["**/.*","node_modules","bower_components","output"],"devDependencies":{"purescript-psci-support":"^4.0.0"},"dependencies":{"purescript-effect":"^2.0.0","purescript-console":"^4.1.0","purescript-maybe":"^4.0.0","purescript-argonaut-core":"^4.0.1","purescript-aff-promise":"^2.0.0","purescript-aff":"^5.0.1","purescript-typelevel-prelude":"^3.0.0","purescript-prelude":"^4.1.0","purescript-nullable":"^4.0.0"},"name":"purescript-graphql","license":["MIT"]},"tagTime":"2018-12-01T14:18:54+0000","modules":[{"reExports":[],"name":"GraphQL","comments":null,"declarations":[{"children":[],"comments":null,"title":"graphql","info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["GraphQL","Type"],"Schema"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeConstructor","contents":[["Data","Argonaut","Core"],"Json"]}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Effect","Aff"],"Aff"]},{"tag":"TypeConstructor","contents":[["Data","Argonaut","Core"],"Json"]}]}]}]}]}]}]}]},null]},null]}},"sourceSpan":{"start":[14,1],"name":"/Users/hendrikniemann/Documents/opensource/purescript-graphql/src/GraphQL.purs","end":[15,75]}}]},{"reExports":[],"name":"GraphQL.Document","comments":null,"declarations":[{"children":[{"comments":null,"title":"documentShow","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Show"],"Show"]},{"tag":"TypeConstructor","contents":[["GraphQL","Document"],"Document"]}]}},"sourceSpan":{"start":[9,1],"name":"/Users/hendrikniemann/Documents/opensource/purescript-graphql/src/GraphQL/Document.purs","end":[9,39]}}],"comments":null,"title":"Document","info":{"kind":{"tag":"NamedKind","contents":[["Prim"],"Type"]},"declType":"externData"},"sourceSpan":{"start":[5,1],"name":"/Users/hendrikniemann/Documents/opensource/purescript-graphql/src/GraphQL/Document.purs","end":[5,37]}}]},{"reExports":[],"name":"GraphQL.Execution","comments":null,"declarations":[{"children":[],"comments":"Asyncroniously executes a query given the GraphQL document and a schema.\n","title":"execute","info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["GraphQL","Type"],"Schema"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["GraphQL","Document"],"Document"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Effect","Aff"],"Aff"]},{"tag":"TypeConstructor","contents":[["Data","Argonaut","Core"],"Json"]}]}]}]}]},null]},null]}},"sourceSpan":{"start":[13,1],"name":"/Users/hendrikniemann/Documents/opensource/purescript-graphql/src/GraphQL/Execution.purs","end":[13,58]}}]},{"reExports":[],"name":"GraphQL.Language","comments":null,"declarations":[{"children":[],"comments":"Parse a query string and return a parsed GraphQL document or an error.\n","title":"parse","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Either"],"Either"]},{"tag":"TypeConstructor","contents":[["Effect","Exception"],"Error"]}]},{"tag":"TypeConstructor","contents":[["GraphQL","Document"],"Document"]}]}]}},"sourceSpan":{"start":[10,1],"name":"/Users/hendrikniemann/Documents/opensource/purescript-graphql/src/GraphQL/Language.purs","end":[10,41]}}]},{"reExports":[],"name":"GraphQL.Type","comments":null,"declarations":[{"children":[],"comments":"A GraphQL schema with types for context and root\n","title":"Schema","info":{"kind":{"tag":"FunKind","contents":[{"tag":"NamedKind","contents":[["Prim"],"Type"]},{"tag":"FunKind","contents":[{"tag":"NamedKind","contents":[["Prim"],"Type"]},{"tag":"NamedKind","contents":[["Prim"],"Type"]}]}]},"declType":"externData"},"sourceSpan":{"start":[53,1],"name":"/Users/hendrikniemann/Documents/opensource/purescript-graphql/src/GraphQL/Type.purs","end":[53,51]}},{"children":[{"comments":null,"title":"enumTypeGraphQLType","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["GraphQL","Type"],"GraphQLType"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["GraphQL","Type"],"EnumType"]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[84,1],"name":"/Users/hendrikniemann/Documents/opensource/purescript-graphql/src/GraphQL/Type.purs","end":[84,57]}},{"comments":null,"title":"enumTypeOutputType","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["GraphQL","Type"],"OutputType"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["GraphQL","Type"],"EnumType"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeVar","contents":"ctx"}]}},"sourceSpan":{"start":[98,1],"name":"/Users/hendrikniemann/Documents/opensource/purescript-graphql/src/GraphQL/Type.purs","end":[98,59]}},{"comments":null,"title":"enumTypeInputType","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["GraphQL","Type"],"InputType"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["GraphQL","Type"],"EnumType"]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[127,1],"name":"/Users/hendrikniemann/Documents/opensource/purescript-graphql/src/GraphQL/Type.purs","end":[127,53]}}],"comments":"A GraphQL enum type\n","title":"EnumType","info":{"kind":{"tag":"FunKind","contents":[{"tag":"NamedKind","contents":[["Prim"],"Type"]},{"tag":"NamedKind","contents":[["Prim"],"Type"]}]},"declType":"externData"},"sourceSpan":{"start":[62,1],"name":"/Users/hendrikniemann/Documents/opensource/purescript-graphql/src/GraphQL/Type.purs","end":[62,45]}},{"children":[],"comments":"A type to store enum value configurations. Create new values using the\n`enumValue` function.\n","title":"EnumValue","info":{"declType":"data","dataDeclType":"newtype","typeArguments":[["a",null]]},"sourceSpan":{"start":[183,1],"name":"/Users/hendrikniemann/Documents/opensource/purescript-graphql/src/GraphQL/Type.purs","end":[187,6]}},{"children":[{"comments":null,"title":"objectTypeGraphQLType","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["GraphQL","Type"],"GraphQLType"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["GraphQL","Type"],"ObjectType"]},{"tag":"TypeVar","contents":"ctx"}]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[86,1],"name":"/Users/hendrikniemann/Documents/opensource/purescript-graphql/src/GraphQL/Type.purs","end":[86,65]}},{"comments":null,"title":"objectTypeOutputType","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["GraphQL","Type"],"OutputType"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["GraphQL","Type"],"ObjectType"]},{"tag":"TypeVar","contents":"ctx"}]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeVar","contents":"ctx"}]}},"sourceSpan":{"start":[100,1],"name":"/Users/hendrikniemann/Documents/opensource/purescript-graphql/src/GraphQL/Type.purs","end":[100,67]}},{"comments":null,"title":"objectTypeOutputTypeFail","info":{"declType":"instance","dependencies":[{"constraintClass":[["Prim","TypeError"],"Fail"],"constraintArgs":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim","TypeError"],"Above"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim","TypeError"],"Text"]},{"tag":"TypeLevelString","contents":"Cannot use object type with different context as field result."}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim","TypeError"],"Above"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim","TypeError"],"Beside"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim","TypeError"],"Text"]},{"tag":"TypeLevelString","contents":"Expected context type: "}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim","TypeError"],"Quote"]},{"tag":"TypeVar","contents":"expected"}]}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim","TypeError"],"Beside"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim","TypeError"],"Text"]},{"tag":"TypeLevelString","contents":"But received constext type: "}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim","TypeError"],"Quote"]},{"tag":"TypeVar","contents":"actual"}]}]}]}]}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["GraphQL","Type"],"OutputType"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["GraphQL","Type"],"ObjectType"]},{"tag":"TypeVar","contents":"actual"}]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeVar","contents":"expected"}]}},"sourceSpan":{"start":[101,6],"name":"/Users/hendrikniemann/Documents/opensource/purescript-graphql/src/GraphQL/Type.purs","end":[107,47]}}],"comments":"A GraphQL object type\n","title":"ObjectType","info":{"kind":{"tag":"FunKind","contents":[{"tag":"NamedKind","contents":[["Prim"],"Type"]},{"tag":"FunKind","contents":[{"tag":"NamedKind","contents":[["Prim"],"Type"]},{"tag":"NamedKind","contents":[["Prim"],"Type"]}]}]},"declType":"externData"},"sourceSpan":{"start":[56,1],"name":"/Users/hendrikniemann/Documents/opensource/purescript-graphql/src/GraphQL/Type.purs","end":[56,55]}},{"children":[],"comments":"The configuration of a field represented in native JavaScript\n","title":"ObjectTypeField","info":{"kind":{"tag":"FunKind","contents":[{"tag":"NamedKind","contents":[["Prim"],"Type"]},{"tag":"FunKind","contents":[{"tag":"NamedKind","contents":[["Prim"],"Type"]},{"tag":"NamedKind","contents":[["Prim"],"Type"]}]}]},"declType":"externData"},"sourceSpan":{"start":[65,1],"name":"/Users/hendrikniemann/Documents/opensource/purescript-graphql/src/GraphQL/Type.purs","end":[65,60]}},{"children":[{"comments":null,"title":"convertDeclArgsCons","info":{"declType":"instance","dependencies":[{"constraintClass":[["GraphQL","Type"],"ConvertDeclArgs"],"constraintArgs":[{"tag":"TypeVar","contents":"ldecl"},{"tag":"TypeVar","contents":"largs"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["GraphQL","Type"],"ConvertDeclArgs"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim","RowList"],"Cons"]},{"tag":"TypeVar","contents":"k"}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["GraphQL","Type"],"ObjectTypeFieldArg"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeVar","contents":"ldecl"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim","RowList"],"Cons"]},{"tag":"TypeVar","contents":"k"}]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"largs"}]}]}},"sourceSpan":{"start":[354,1],"name":"/Users/hendrikniemann/Documents/opensource/purescript-graphql/src/GraphQL/Type.purs","end":[355,76]}}],"comments":"The configuration of a field argument represented in native JavaScript\n","title":"ObjectTypeFieldArg","info":{"kind":{"tag":"FunKind","contents":[{"tag":"NamedKind","contents":[["Prim"],"Type"]},{"tag":"NamedKind","contents":[["Prim"],"Type"]}]},"declType":"externData"},"sourceSpan":{"start":[68,1],"name":"/Users/hendrikniemann/Documents/opensource/purescript-graphql/src/GraphQL/Type.purs","end":[68,55]}},{"children":[{"comments":null,"title":"scalarTypeGraphQLType","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["GraphQL","Type"],"GraphQLType"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["GraphQL","Type"],"ScalarType"]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[82,1],"name":"/Users/hendrikniemann/Documents/opensource/purescript-graphql/src/GraphQL/Type.purs","end":[82,61]}},{"comments":null,"title":"scalarTypeOutputType","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["GraphQL","Type"],"OutputType"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["GraphQL","Type"],"ScalarType"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeVar","contents":"ctx"}]}},"sourceSpan":{"start":[96,1],"name":"/Users/hendrikniemann/Documents/opensource/purescript-graphql/src/GraphQL/Type.purs","end":[96,63]}},{"comments":null,"title":"scalarTypeInputType","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["GraphQL","Type"],"InputType"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["GraphQL","Type"],"ScalarType"]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[120,1],"name":"/Users/hendrikniemann/Documents/opensource/purescript-graphql/src/GraphQL/Type.purs","end":[120,57]}}],"comments":"A GraphQL scalar type\n","title":"ScalarType","info":{"kind":{"tag":"FunKind","contents":[{"tag":"NamedKind","contents":[["Prim"],"Type"]},{"tag":"NamedKind","contents":[["Prim"],"Type"]}]},"declType":"externData"},"sourceSpan":{"start":[59,1],"name":"/Users/hendrikniemann/Documents/opensource/purescript-graphql/src/GraphQL/Type.purs","end":[59,47]}},{"children":[{"comments":null,"title":"listTypeGraphQLType","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["GraphQL","Type"],"GraphQLType"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["GraphQL","Type"],"ListType"]},{"tag":"TypeVar","contents":"t"}]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[88,1],"name":"/Users/hendrikniemann/Documents/opensource/purescript-graphql/src/GraphQL/Type.purs","end":[88,59]}},{"comments":null,"title":"listTypeMaybeOutputType","info":{"declType":"instance","dependencies":[{"constraintClass":[["GraphQL","Type"],"OutputType"],"constraintArgs":[{"tag":"TypeVar","contents":"t"},{"tag":"TypeVar","contents":"ctx"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["GraphQL","Type"],"OutputType"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["GraphQL","Type"],"ListType"]},{"tag":"TypeVar","contents":"t"}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]}]}]}]},{"tag":"TypeVar","contents":"ctx"}]}},"sourceSpan":{"start":[109,1],"name":"/Users/hendrikniemann/Documents/opensource/purescript-graphql/src/GraphQL/Type.purs","end":[111,51]}},{"comments":null,"title":"listTypeOutputType","info":{"declType":"instance","dependencies":[{"constraintClass":[["GraphQL","Type"],"OutputType"],"constraintArgs":[{"tag":"TypeVar","contents":"t"},{"tag":"TypeVar","contents":"ctx"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["GraphQL","Type"],"OutputType"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["GraphQL","Type"],"ListType"]},{"tag":"TypeVar","contents":"t"}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]}]}]},{"tag":"TypeVar","contents":"ctx"}]}},"sourceSpan":{"start":[113,1],"name":"/Users/hendrikniemann/Documents/opensource/purescript-graphql/src/GraphQL/Type.purs","end":[115,43]}},{"comments":null,"title":"listTypeInputType","info":{"declType":"instance","dependencies":[{"constraintClass":[["GraphQL","Type"],"InputType"],"constraintArgs":[{"tag":"TypeVar","contents":"t"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["GraphQL","Type"],"InputType"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["GraphQL","Type"],"ListType"]},{"tag":"TypeVar","contents":"t"}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]}]}]}},"sourceSpan":{"start":[122,1],"name":"/Users/hendrikniemann/Documents/opensource/purescript-graphql/src/GraphQL/Type.purs","end":[122,80]}},{"comments":null,"title":"listTypeMaybeInputType","info":{"declType":"instance","dependencies":[{"constraintClass":[["GraphQL","Type"],"InputType"],"constraintArgs":[{"tag":"TypeVar","contents":"t"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["GraphQL","Type"],"InputType"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["GraphQL","Type"],"ListType"]},{"tag":"TypeVar","contents":"t"}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]}]}]}]}},"sourceSpan":{"start":[124,1],"name":"/Users/hendrikniemann/Documents/opensource/purescript-graphql/src/GraphQL/Type.purs","end":[125,63]}}],"comments":"A GraphQL list type\n","title":"ListType","info":{"kind":{"tag":"FunKind","contents":[{"tag":"NamedKind","contents":[["Prim"],"Type"]},{"tag":"FunKind","contents":[{"tag":"NamedKind","contents":[["Prim"],"Type"]},{"tag":"NamedKind","contents":[["Prim"],"Type"]}]}]},"declType":"externData"},"sourceSpan":{"start":[71,1],"name":"/Users/hendrikniemann/Documents/opensource/purescript-graphql/src/GraphQL/Type.purs","end":[71,53]}},{"children":[{"comments":null,"title":"inputObjectTypeGraphQLType","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["GraphQL","Type"],"GraphQLType"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["GraphQL","Type"],"InputObjectType"]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[90,1],"name":"/Users/hendrikniemann/Documents/opensource/purescript-graphql/src/GraphQL/Type.purs","end":[90,71]}},{"comments":null,"title":"inputObjectTypeInputType","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["GraphQL","Type"],"InputType"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["GraphQL","Type"],"InputObjectType"]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[129,1],"name":"/Users/hendrikniemann/Documents/opensource/purescript-graphql/src/GraphQL/Type.purs","end":[129,67]}}],"comments":"An input object type to create complex input objects\n","title":"InputObjectType","info":{"kind":{"tag":"FunKind","contents":[{"tag":"NamedKind","contents":[["Prim"],"Type"]},{"tag":"NamedKind","contents":[["Prim"],"Type"]}]},"declType":"externData"},"sourceSpan":{"start":[74,1],"name":"/Users/hendrikniemann/Documents/opensource/purescript-graphql/src/GraphQL/Type.purs","end":[74,52]}},{"children":[{"comments":null,"title":"convertInputReturnCons","info":{"declType":"instance","dependencies":[{"constraintClass":[["GraphQL","Type"],"ConvertInputReturn"],"constraintArgs":[{"tag":"TypeVar","contents":"linput"},{"tag":"TypeVar","contents":"lreturn"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["GraphQL","Type"],"ConvertInputReturn"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim","RowList"],"Cons"]},{"tag":"TypeVar","contents":"k"}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["GraphQL","Type"],"InputObjectTypeField"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeVar","contents":"linput"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim","RowList"],"Cons"]},{"tag":"TypeVar","contents":"k"}]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"lreturn"}]}]}},"sourceSpan":{"start":[329,1],"name":"/Users/hendrikniemann/Documents/opensource/purescript-graphql/src/GraphQL/Type.purs","end":[330,84]}}],"comments":"The configuration of a field represented in native JavaScript\n","title":"InputObjectTypeField","info":{"kind":{"tag":"FunKind","contents":[{"tag":"NamedKind","contents":[["Prim"],"Type"]},{"tag":"NamedKind","contents":[["Prim"],"Type"]}]},"declType":"externData"},"sourceSpan":{"start":[77,1],"name":"/Users/hendrikniemann/Documents/opensource/purescript-graphql/src/GraphQL/Type.purs","end":[77,57]}},{"children":[{"comments":null,"title":"scalarTypeGraphQLType","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["GraphQL","Type"],"GraphQLType"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["GraphQL","Type"],"ScalarType"]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[82,1],"name":"/Users/hendrikniemann/Documents/opensource/purescript-graphql/src/GraphQL/Type.purs","end":[82,61]}},{"comments":null,"title":"enumTypeGraphQLType","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["GraphQL","Type"],"GraphQLType"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["GraphQL","Type"],"EnumType"]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[84,1],"name":"/Users/hendrikniemann/Documents/opensource/purescript-graphql/src/GraphQL/Type.purs","end":[84,57]}},{"comments":null,"title":"objectTypeGraphQLType","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["GraphQL","Type"],"GraphQLType"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["GraphQL","Type"],"ObjectType"]},{"tag":"TypeVar","contents":"ctx"}]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[86,1],"name":"/Users/hendrikniemann/Documents/opensource/purescript-graphql/src/GraphQL/Type.purs","end":[86,65]}},{"comments":null,"title":"listTypeGraphQLType","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["GraphQL","Type"],"GraphQLType"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["GraphQL","Type"],"ListType"]},{"tag":"TypeVar","contents":"t"}]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[88,1],"name":"/Users/hendrikniemann/Documents/opensource/purescript-graphql/src/GraphQL/Type.purs","end":[88,59]}},{"comments":null,"title":"inputObjectTypeGraphQLType","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["GraphQL","Type"],"GraphQLType"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["GraphQL","Type"],"InputObjectType"]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[90,1],"name":"/Users/hendrikniemann/Documents/opensource/purescript-graphql/src/GraphQL/Type.purs","end":[90,71]}}],"comments":"A type class for all GraphQL types.\n","title":"GraphQLType","info":{"fundeps":[],"arguments":[["a",null]],"declType":"typeClass","superclasses":[]},"sourceSpan":{"start":[80,1],"name":"/Users/hendrikniemann/Documents/opensource/purescript-graphql/src/GraphQL/Type.purs","end":[80,20]}},{"children":[{"comments":null,"title":"scalarTypeOutputType","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["GraphQL","Type"],"OutputType"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["GraphQL","Type"],"ScalarType"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeVar","contents":"ctx"}]}},"sourceSpan":{"start":[96,1],"name":"/Users/hendrikniemann/Documents/opensource/purescript-graphql/src/GraphQL/Type.purs","end":[96,63]}},{"comments":null,"title":"enumTypeOutputType","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["GraphQL","Type"],"OutputType"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["GraphQL","Type"],"EnumType"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeVar","contents":"ctx"}]}},"sourceSpan":{"start":[98,1],"name":"/Users/hendrikniemann/Documents/opensource/purescript-graphql/src/GraphQL/Type.purs","end":[98,59]}},{"comments":null,"title":"objectTypeOutputType","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["GraphQL","Type"],"OutputType"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["GraphQL","Type"],"ObjectType"]},{"tag":"TypeVar","contents":"ctx"}]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeVar","contents":"ctx"}]}},"sourceSpan":{"start":[100,1],"name":"/Users/hendrikniemann/Documents/opensource/purescript-graphql/src/GraphQL/Type.purs","end":[100,67]}},{"comments":null,"title":"objectTypeOutputTypeFail","info":{"declType":"instance","dependencies":[{"constraintClass":[["Prim","TypeError"],"Fail"],"constraintArgs":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim","TypeError"],"Above"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim","TypeError"],"Text"]},{"tag":"TypeLevelString","contents":"Cannot use object type with different context as field result."}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim","TypeError"],"Above"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim","TypeError"],"Beside"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim","TypeError"],"Text"]},{"tag":"TypeLevelString","contents":"Expected context type: "}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim","TypeError"],"Quote"]},{"tag":"TypeVar","contents":"expected"}]}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim","TypeError"],"Beside"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim","TypeError"],"Text"]},{"tag":"TypeLevelString","contents":"But received constext type: "}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim","TypeError"],"Quote"]},{"tag":"TypeVar","contents":"actual"}]}]}]}]}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["GraphQL","Type"],"OutputType"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["GraphQL","Type"],"ObjectType"]},{"tag":"TypeVar","contents":"actual"}]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeVar","contents":"expected"}]}},"sourceSpan":{"start":[101,6],"name":"/Users/hendrikniemann/Documents/opensource/purescript-graphql/src/GraphQL/Type.purs","end":[107,47]}},{"comments":null,"title":"listTypeMaybeOutputType","info":{"declType":"instance","dependencies":[{"constraintClass":[["GraphQL","Type"],"OutputType"],"constraintArgs":[{"tag":"TypeVar","contents":"t"},{"tag":"TypeVar","contents":"ctx"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["GraphQL","Type"],"OutputType"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["GraphQL","Type"],"ListType"]},{"tag":"TypeVar","contents":"t"}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]}]}]}]},{"tag":"TypeVar","contents":"ctx"}]}},"sourceSpan":{"start":[109,1],"name":"/Users/hendrikniemann/Documents/opensource/purescript-graphql/src/GraphQL/Type.purs","end":[111,51]}},{"comments":null,"title":"listTypeOutputType","info":{"declType":"instance","dependencies":[{"constraintClass":[["GraphQL","Type"],"OutputType"],"constraintArgs":[{"tag":"TypeVar","contents":"t"},{"tag":"TypeVar","contents":"ctx"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["GraphQL","Type"],"OutputType"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["GraphQL","Type"],"ListType"]},{"tag":"TypeVar","contents":"t"}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]}]}]},{"tag":"TypeVar","contents":"ctx"}]}},"sourceSpan":{"start":[113,1],"name":"/Users/hendrikniemann/Documents/opensource/purescript-graphql/src/GraphQL/Type.purs","end":[115,43]}}],"comments":"A type class defining which types are output types and at the same time\nensuring that the specific output type is bound to a certain context type.\n","title":"OutputType","info":{"fundeps":[],"arguments":[["a",null],["ctx",null]],"declType":"typeClass","superclasses":[{"constraintClass":[["GraphQL","Type"],"GraphQLType"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}]},"sourceSpan":{"start":[94,1],"name":"/Users/hendrikniemann/Documents/opensource/purescript-graphql/src/GraphQL/Type.purs","end":[94,42]}},{"children":[{"comments":null,"title":"scalarTypeInputType","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["GraphQL","Type"],"InputType"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["GraphQL","Type"],"ScalarType"]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[120,1],"name":"/Users/hendrikniemann/Documents/opensource/purescript-graphql/src/GraphQL/Type.purs","end":[120,57]}},{"comments":null,"title":"listTypeInputType","info":{"declType":"instance","dependencies":[{"constraintClass":[["GraphQL","Type"],"InputType"],"constraintArgs":[{"tag":"TypeVar","contents":"t"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["GraphQL","Type"],"InputType"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["GraphQL","Type"],"ListType"]},{"tag":"TypeVar","contents":"t"}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]}]}]}},"sourceSpan":{"start":[122,1],"name":"/Users/hendrikniemann/Documents/opensource/purescript-graphql/src/GraphQL/Type.purs","end":[122,80]}},{"comments":null,"title":"listTypeMaybeInputType","info":{"declType":"instance","dependencies":[{"constraintClass":[["GraphQL","Type"],"InputType"],"constraintArgs":[{"tag":"TypeVar","contents":"t"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["GraphQL","Type"],"InputType"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["GraphQL","Type"],"ListType"]},{"tag":"TypeVar","contents":"t"}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]}]}]}]}},"sourceSpan":{"start":[124,1],"name":"/Users/hendrikniemann/Documents/opensource/purescript-graphql/src/GraphQL/Type.purs","end":[125,63]}},{"comments":null,"title":"enumTypeInputType","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["GraphQL","Type"],"InputType"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["GraphQL","Type"],"EnumType"]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[127,1],"name":"/Users/hendrikniemann/Documents/opensource/purescript-graphql/src/GraphQL/Type.purs","end":[127,53]}},{"comments":null,"title":"inputObjectTypeInputType","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["GraphQL","Type"],"InputType"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["GraphQL","Type"],"InputObjectType"]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[129,1],"name":"/Users/hendrikniemann/Documents/opensource/purescript-graphql/src/GraphQL/Type.purs","end":[129,67]}}],"comments":"A type class defining which types are input types\n","title":"InputType","info":{"fundeps":[],"arguments":[["a",null]],"declType":"typeClass","superclasses":[{"constraintClass":[["GraphQL","Type"],"GraphQLType"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}]},"sourceSpan":{"start":[118,1],"name":"/Users/hendrikniemann/Documents/opensource/purescript-graphql/src/GraphQL/Type.purs","end":[118,37]}},{"children":[],"comments":"The GraphQL scalar for floating point numbers.\n\nEquivalent to JavaScript's `GraphQLFloat`\n","title":"float","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["GraphQL","Type"],"ScalarType"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]}}]}},"sourceSpan":{"start":[134,1],"name":"/Users/hendrikniemann/Documents/opensource/purescript-graphql/src/GraphQL/Type.purs","end":[134,50]}},{"children":[],"comments":"The GraphQL scalar for IDs. IDs are represented and persisted as strings\nbut can also be parsed from a number in the GraphQL document.\n\nEquivalent to JavaScript's `GraphQLID`\n","title":"id","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["GraphQL","Type"],"ScalarType"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}}]}},"sourceSpan":{"start":[150,1],"name":"/Users/hendrikniemann/Documents/opensource/purescript-graphql/src/GraphQL/Type.purs","end":[150,47]}},{"children":[],"comments":"The GraphQL scalar for integer values.\n\nEquivalent to JavaScript's `GraphQLInt`\n","title":"int","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["GraphQL","Type"],"ScalarType"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}}]}},"sourceSpan":{"start":[139,1],"name":"/Users/hendrikniemann/Documents/opensource/purescript-graphql/src/GraphQL/Type.purs","end":[139,45]}},{"children":[],"comments":"The GraphQL scalar for strings.\n\nEquivalent to JavaScript's `GraphQLString`\n","title":"string","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["GraphQL","Type"],"ScalarType"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}}]}},"sourceSpan":{"start":[144,1],"name":"/Users/hendrikniemann/Documents/opensource/purescript-graphql/src/GraphQL/Type.purs","end":[144,51]}},{"children":[],"comments":"The GraphQL scalar for boolean values.\n\nEquivalent to JavaScript's `GraphQLBoolean`\n","title":"boolean","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["GraphQL","Type"],"ScalarType"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}}]}},"sourceSpan":{"start":[155,1],"name":"/Users/hendrikniemann/Documents/opensource/purescript-graphql/src/GraphQL/Type.purs","end":[155,53]}},{"children":[],"comments":"This function is used to create list types. A list type accepts an array of\nvalues and returns them as a JSON array in the response.\n\nEquivalent to JavaScript's `new GraphQLList(...)`\n","title":"list","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["t",{"tag":"ConstrainedType","contents":[{"constraintClass":[["GraphQL","Type"],"GraphQLType"],"constraintArgs":[{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"t"},{"tag":"TypeVar","contents":"a"}]}}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"t"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["GraphQL","Type"],"ListType"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"t"},{"tag":"TypeVar","contents":"a"}]}}]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]}}]}}]}]}]},null]},null]}},"sourceSpan":{"start":[161,1],"name":"/Users/hendrikniemann/Documents/opensource/purescript-graphql/src/GraphQL/Type.purs","end":[162,70]}},{"children":[],"comments":"This function transforms any nullable type into a non-nullable type\nDoing so also influences the types accepted root value\n\n```purescript\nnonNullableString :: ScalarType String\nnonNullableString = nonNull string\n```\n\nEquivalent to JavaScript's `new GraphQLNonNull(...)`\n","title":"nonNull","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["t",{"tag":"ConstrainedType","contents":[{"constraintClass":[["GraphQL","Type"],"GraphQLType"],"constraintArgs":[{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"t"},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeVar","contents":"a"}]}}]}}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"t"},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeVar","contents":"a"}]}}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"t"},{"tag":"TypeVar","contents":"a"}]}]}]},null]},null]}},"sourceSpan":{"start":[173,1],"name":"/Users/hendrikniemann/Documents/opensource/purescript-graphql/src/GraphQL/Type.purs","end":[173,81]}},{"children":[],"comments":"Create a schema given a root query object type and a root mutation type.\nSchemas don't need a mutation type therefore it is optional.\n","title":"schema","info":{"declType":"value","type":{"tag":"ForAll","contents":["ctx",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["GraphQL","Type"],"ObjectType"]},{"tag":"TypeVar","contents":"ctx"}]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeVar","contents":"a"}]}}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["GraphQL","Type"],"ObjectType"]},{"tag":"TypeVar","contents":"ctx"}]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeVar","contents":"a"}]}}]}}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["GraphQL","Type"],"Schema"]},{"tag":"TypeVar","contents":"ctx"}]},{"tag":"TypeVar","contents":"a"}]}]}]},null]},null]}},"sourceSpan":{"start":[177,1],"name":"/Users/hendrikniemann/Documents/opensource/purescript-graphql/src/GraphQL/Type.purs","end":[178,79]}},{"children":[],"comments":"Create a new enum type. The enum type takes a name, an optional description\nand a Folable of enum values.\n_Example:_\n```purescript\ndata Status = Processing | Ready\n\nstatusType :: EnumType Status\nstatusType = enumType\n  \"Status\"\n  (Just \"This type indicates the status of a request.\")\n  [ enumValue \"PROCESSING\" (Just \"In the process.\") Processing\n  , enumValue \"READY\" (Just \"Completed and ready.\") Ready\n  ]\n```\n","title":"enumType","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["f",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Foldable"],"Foldable"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["GraphQL","Type"],"EnumValue"]},{"tag":"TypeVar","contents":"a"}]}}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["GraphQL","Type"],"EnumType"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeVar","contents":"a"}]}}]}]}]}]}]},null]},null]}},"sourceSpan":{"start":[203,1],"name":"/Users/hendrikniemann/Documents/opensource/purescript-graphql/src/GraphQL/Type.purs","end":[204,69]}},{"children":[],"comments":"Create a new enum value to use in an enum type definition. See `enumType` \nfor an example.\n","title":"enumValue","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["GraphQL","Type"],"EnumValue"]},{"tag":"TypeVar","contents":"a"}]}]}]}]},null]}},"sourceSpan":{"start":[210,1],"name":"/Users/hendrikniemann/Documents/opensource/purescript-graphql/src/GraphQL/Type.purs","end":[210,61]}},{"children":[],"comments":"Create a new object type with the following properties:\n- `name` is the name of the object in the schema\n- `description` is the description of the type\n- `fields` is a record of field definitions\n","title":"objectType","info":{"declType":"value","type":{"tag":"ForAll","contents":["fields",{"tag":"ForAll","contents":["ctx",{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Type","Row","Homogeneous"],"Homogeneous"],"constraintArgs":[{"tag":"TypeVar","contents":"fields"},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["GraphQL","Type"],"ObjectTypeField"]},{"tag":"TypeVar","contents":"ctx"}]},{"tag":"TypeVar","contents":"a"}]}}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Record"]},{"tag":"TypeVar","contents":"fields"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["GraphQL","Type"],"ObjectType"]},{"tag":"TypeVar","contents":"ctx"}]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeVar","contents":"a"}]}}]}]}]}]}]},null]},null]},null]}},"sourceSpan":{"start":[218,1],"name":"/Users/hendrikniemann/Documents/opensource/purescript-graphql/src/GraphQL/Type.purs","end":[222,30]}},{"children":[],"comments":"Create a field with the specified arguments using\n- `type`: The type of the field, must be an output type\n- `description`: The description of the field shown during introspection\n- `args`: The arguments definition that this field takes. For fields\n  without arguments use the `field'` function.\n- `resolve`: The resolver function\n\nThe resolver function's arguments must be in a specific relationship with\nthe `args` argument. This relationship is ensured by the \n`ArgDeclarationToArgs` type class.\n","title":"field","info":{"declType":"value","type":{"tag":"ForAll","contents":["args",{"tag":"ForAll","contents":["decl",{"tag":"ForAll","contents":["ctx",{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["t",{"tag":"ConstrainedType","contents":[{"constraintClass":[["GraphQL","Type"],"OutputType"],"constraintArgs":[{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"t"},{"tag":"TypeVar","contents":"b"}]}},{"tag":"TypeVar","contents":"ctx"}],"constraintData":null},{"tag":"ConstrainedType","contents":[{"constraintClass":[["GraphQL","Type"],"ArgDeclarationToArgs"],"constraintArgs":[{"tag":"TypeVar","contents":"decl"},{"tag":"TypeVar","contents":"args"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"t"},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Record"]},{"tag":"TypeVar","contents":"decl"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Record"]},{"tag":"TypeVar","contents":"args"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"ctx"}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Effect","Aff"],"Aff"]},{"tag":"TypeVar","contents":"b"}]}]}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["GraphQL","Type"],"ObjectTypeField"]},{"tag":"TypeVar","contents":"ctx"}]},{"tag":"TypeVar","contents":"a"}]}]}]}]}]}]}]},null]},null]},null]},null]},null]},null]}},"sourceSpan":{"start":[261,1],"name":"/Users/hendrikniemann/Documents/opensource/purescript-graphql/src/GraphQL/Type.purs","end":[267,27]}},{"children":[],"comments":"Create a simple field without arguments using\n- `type` the type of the field\n- `description` the description of the field\n- `resolve` a function resolving the value of the field\n\n*Examples*\n``` purescript\nhello :: Field Unit Context\nhello = field' string Nothing \\_ _ -> pure \"Hello World\"\n\ntype User = { name :: String, age :: Int }\nage :: Field User Context\nage = field' intScalar (Just \"Age of the user\") resolve\n  where\n    resolve user _ = pure user.age\n```\n","title":"field'","info":{"declType":"value","type":{"tag":"ForAll","contents":["ctx",{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["t",{"tag":"ConstrainedType","contents":[{"constraintClass":[["GraphQL","Type"],"OutputType"],"constraintArgs":[{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"t"},{"tag":"TypeVar","contents":"b"}]}},{"tag":"TypeVar","contents":"ctx"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"t"},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"ctx"}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Effect","Aff"],"Aff"]},{"tag":"TypeVar","contents":"b"}]}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["GraphQL","Type"],"ObjectTypeField"]},{"tag":"TypeVar","contents":"ctx"}]},{"tag":"TypeVar","contents":"a"}]}]}]}]}]},null]},null]},null]},null]}},"sourceSpan":{"start":[242,1],"name":"/Users/hendrikniemann/Documents/opensource/purescript-graphql/src/GraphQL/Type.purs","end":[246,27]}},{"children":[],"comments":"Create a single argument that can be used inside an argument declaration.\nFind a complete example in the documentation of the `field` function.\n\n```purescript\nargument (nonNull string) (Just \"Some description.\")\n```\n","title":"argument","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["t",{"tag":"ConstrainedType","contents":[{"constraintClass":[["GraphQL","Type"],"InputType"],"constraintArgs":[{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"t"},{"tag":"TypeVar","contents":"a"}]}}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"t"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["GraphQL","Type"],"ObjectTypeFieldArg"]},{"tag":"TypeVar","contents":"a"}]}]}]}]},null]},null]}},"sourceSpan":{"start":[278,1],"name":"/Users/hendrikniemann/Documents/opensource/purescript-graphql/src/GraphQL/Type.purs","end":[281,26]}},{"children":[],"comments":"Create a new input object type. Input object types three arguments\n- `name`: The name of the input type that will show up to the consumer\n- `description`: An optional description that shows during introspection\n- `fields`: A homogenious record of `InputObjectTypeField`s\n\nFrom the fields it is possible to determine the resulting type of the input\nusing a type class contraint.\n","title":"inputObjectType","info":{"declType":"value","type":{"tag":"ForAll","contents":["r",{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["GraphQL","Type"],"InputFieldsToReturnType"],"constraintArgs":[{"tag":"TypeVar","contents":"r"},{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Record"]},{"tag":"TypeVar","contents":"r"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["GraphQL","Type"],"InputObjectType"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Record"]},{"tag":"TypeVar","contents":"a"}]}}]}}]}]}]}]}]},null]},null]}},"sourceSpan":{"start":[291,1],"name":"/Users/hendrikniemann/Documents/opensource/purescript-graphql/src/GraphQL/Type.purs","end":[295,40]}},{"children":[],"comments":"Create a simple input field with\n- `type`: The type of this field\n- `description`: A description that will show up for this field during\n  introspection\n","title":"inputField","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["t",{"tag":"ConstrainedType","contents":[{"constraintClass":[["GraphQL","Type"],"InputType"],"constraintArgs":[{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"t"},{"tag":"TypeVar","contents":"a"}]}}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"t"},{"tag":"TypeVar","contents":"a"}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}}]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["GraphQL","Type"],"InputObjectTypeField"]},{"tag":"TypeVar","contents":"a"}]}}]}]}]},null]},null]}},"sourceSpan":{"start":[303,1],"name":"/Users/hendrikniemann/Documents/opensource/purescript-graphql/src/GraphQL/Type.purs","end":[306,30]}},{"children":[{"comments":null,"title":"argDeclarationToArgsImpl","info":{"declType":"instance","dependencies":[{"constraintClass":[["Prim","RowList"],"RowToList"],"constraintArgs":[{"tag":"TypeVar","contents":"decl"},{"tag":"TypeVar","contents":"ldecl"}],"constraintData":null},{"constraintClass":[["GraphQL","Type"],"ConvertDeclArgs"],"constraintArgs":[{"tag":"TypeVar","contents":"ldecl"},{"tag":"TypeVar","contents":"largs"}],"constraintData":null},{"constraintClass":[["Type","Row"],"ListToRow"],"constraintArgs":[{"tag":"TypeVar","contents":"largs"},{"tag":"TypeVar","contents":"args"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["GraphQL","Type"],"ArgDeclarationToArgs"]},{"tag":"TypeVar","contents":"decl"}]},{"tag":"TypeVar","contents":"args"}]}},"sourceSpan":{"start":[341,1],"name":"/Users/hendrikniemann/Documents/opensource/purescript-graphql/src/GraphQL/Type.purs","end":[345,36]}}],"comments":"A type class constraining the resolver arguments parameter to the supplied\narguments declaration.\nE.g. if the provided args are of type `{ name: Argument String }` the\nresolvers second argument needs to be of type `{ name: String }`.\n","title":"ArgDeclarationToArgs","info":{"fundeps":[[["decl"],["args"]],[["args"],["decl"]]],"arguments":[["decl",{"tag":"Row","contents":{"tag":"NamedKind","contents":[["Prim"],"Type"]}}],["args",{"tag":"Row","contents":{"tag":"NamedKind","contents":[["Prim"],"Type"]}}]],"declType":"typeClass","superclasses":[]},"sourceSpan":{"start":[336,1],"name":"/Users/hendrikniemann/Documents/opensource/purescript-graphql/src/GraphQL/Type.purs","end":[339,31]}},{"children":[{"comments":null,"title":"convertDeclArgsNil","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["GraphQL","Type"],"ConvertDeclArgs"]},{"tag":"TypeConstructor","contents":[["Prim","RowList"],"Nil"]}]},{"tag":"TypeConstructor","contents":[["Prim","RowList"],"Nil"]}]}},"sourceSpan":{"start":[352,1],"name":"/Users/hendrikniemann/Documents/opensource/purescript-graphql/src/GraphQL/Type.purs","end":[352,55]}},{"comments":null,"title":"convertDeclArgsCons","info":{"declType":"instance","dependencies":[{"constraintClass":[["GraphQL","Type"],"ConvertDeclArgs"],"constraintArgs":[{"tag":"TypeVar","contents":"ldecl"},{"tag":"TypeVar","contents":"largs"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["GraphQL","Type"],"ConvertDeclArgs"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim","RowList"],"Cons"]},{"tag":"TypeVar","contents":"k"}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["GraphQL","Type"],"ObjectTypeFieldArg"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeVar","contents":"ldecl"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim","RowList"],"Cons"]},{"tag":"TypeVar","contents":"k"}]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"largs"}]}]}},"sourceSpan":{"start":[354,1],"name":"/Users/hendrikniemann/Documents/opensource/purescript-graphql/src/GraphQL/Type.purs","end":[355,76]}}],"comments":null,"title":"ConvertDeclArgs","info":{"fundeps":[[["ldecl"],["largs"]],[["largs"],["ldecl"]]],"arguments":[["ldecl",{"tag":"NamedKind","contents":[["Prim","RowList"],"RowList"]}],["largs",{"tag":"NamedKind","contents":[["Prim","RowList"],"RowList"]}]],"declType":"typeClass","superclasses":[]},"sourceSpan":{"start":[347,1],"name":"/Users/hendrikniemann/Documents/opensource/purescript-graphql/src/GraphQL/Type.purs","end":[350,35]}},{"children":[{"comments":null,"title":"inputFieldToReturnTypeImpl","info":{"declType":"instance","dependencies":[{"constraintClass":[["Prim","RowList"],"RowToList"],"constraintArgs":[{"tag":"TypeVar","contents":"input"},{"tag":"TypeVar","contents":"linput"}],"constraintData":null},{"constraintClass":[["Prim","RowList"],"RowToList"],"constraintArgs":[{"tag":"TypeVar","contents":"return"},{"tag":"TypeVar","contents":"lreturn"}],"constraintData":null},{"constraintClass":[["GraphQL","Type"],"ConvertInputReturn"],"constraintArgs":[{"tag":"TypeVar","contents":"linput"},{"tag":"TypeVar","contents":"lreturn"}],"constraintData":null},{"constraintClass":[["Type","Row"],"ListToRow"],"constraintArgs":[{"tag":"TypeVar","contents":"linput"},{"tag":"TypeVar","contents":"input"}],"constraintData":null},{"constraintClass":[["Type","Row"],"ListToRow"],"constraintArgs":[{"tag":"TypeVar","contents":"lreturn"},{"tag":"TypeVar","contents":"return"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["GraphQL","Type"],"InputFieldsToReturnType"]},{"tag":"TypeVar","contents":"input"}]},{"tag":"TypeVar","contents":"return"}]}},"sourceSpan":{"start":[314,1],"name":"/Users/hendrikniemann/Documents/opensource/purescript-graphql/src/GraphQL/Type.purs","end":[320,42]}}],"comments":null,"title":"InputFieldsToReturnType","info":{"fundeps":[[["input"],["return"]]],"arguments":[["input",{"tag":"Row","contents":{"tag":"NamedKind","contents":[["Prim"],"Type"]}}],["return",{"tag":"Row","contents":{"tag":"NamedKind","contents":[["Prim"],"Type"]}}]],"declType":"typeClass","superclasses":[]},"sourceSpan":{"start":[309,1],"name":"/Users/hendrikniemann/Documents/opensource/purescript-graphql/src/GraphQL/Type.purs","end":[312,20]}},{"children":[{"comments":null,"title":"convertInputReturnNil","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["GraphQL","Type"],"ConvertInputReturn"]},{"tag":"TypeConstructor","contents":[["Prim","RowList"],"Nil"]}]},{"tag":"TypeConstructor","contents":[["Prim","RowList"],"Nil"]}]}},"sourceSpan":{"start":[327,1],"name":"/Users/hendrikniemann/Documents/opensource/purescript-graphql/src/GraphQL/Type.purs","end":[327,61]}},{"comments":null,"title":"convertInputReturnCons","info":{"declType":"instance","dependencies":[{"constraintClass":[["GraphQL","Type"],"ConvertInputReturn"],"constraintArgs":[{"tag":"TypeVar","contents":"linput"},{"tag":"TypeVar","contents":"lreturn"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["GraphQL","Type"],"ConvertInputReturn"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim","RowList"],"Cons"]},{"tag":"TypeVar","contents":"k"}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["GraphQL","Type"],"InputObjectTypeField"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeVar","contents":"linput"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim","RowList"],"Cons"]},{"tag":"TypeVar","contents":"k"}]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"lreturn"}]}]}},"sourceSpan":{"start":[329,1],"name":"/Users/hendrikniemann/Documents/opensource/purescript-graphql/src/GraphQL/Type.purs","end":[330,84]}}],"comments":null,"title":"ConvertInputReturn","info":{"fundeps":[[["linput"],["lreturn"]]],"arguments":[["linput",{"tag":"NamedKind","contents":[["Prim","RowList"],"RowList"]}],["lreturn",{"tag":"NamedKind","contents":[["Prim","RowList"],"RowList"]}]],"declType":"typeClass","superclasses":[]},"sourceSpan":{"start":[322,1],"name":"/Users/hendrikniemann/Documents/opensource/purescript-graphql/src/GraphQL/Type.purs","end":[325,22]}}]},{"reExports":[],"name":"GraphQL.Validation","comments":null,"declarations":[{"children":[],"comments":"Validate the AST of a query against a given schema. Returns an array of\nerrors. The array is empty if all validation pass. Currently only supports\nthe default validations from `graphql-js`.\n","title":"validate","info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["GraphQL","Type"],"Schema"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["GraphQL","Document"],"Document"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeConstructor","contents":[["Effect","Exception"],"Error"]}]}]}]},null]},null]}},"sourceSpan":{"start":[11,1],"name":"/Users/hendrikniemann/Documents/opensource/purescript-graphql/src/GraphQL/Validation.purs","end":[11,57]}}]}],"resolvedDependencies":{"purescript-proxy":"3.0.0","purescript-exceptions":"4.0.0","purescript-newtype":"3.0.0","purescript-effect":"2.0.0","purescript-ordered-collections":"1.0.0","purescript-control":"4.1.0","purescript-console":"4.1.0","purescript-either":"4.0.0","purescript-arrays":"5.0.0","purescript-maybe":"4.0.0","purescript-type-equality":"3.0.0","purescript-distributive":"4.0.0","purescript-unfoldable":"4.0.0","purescript-invariant":"4.1.0","purescript-argonaut-core":"4.0.1","purescript-aff-promise":"2.0.0","purescript-lazy":"4.0.0","purescript-foreign-object":"1.0.0","purescript-aff":"5.0.1","purescript-foldable-traversable":"4.0.0","purescript-tailrec":"4.0.0","purescript-gen":"2.1.0","purescript-typelevel-prelude":"3.0.0","purescript-functors":"3.0.1","purescript-prelude":"4.1.0","purescript-st":"4.0.0","purescript-bifunctors":"4.0.0","purescript-nonempty":"5.0.0","purescript-contravariant":"4.0.0","purescript-unsafe-coerce":"4.0.0","purescript-refs":"4.1.0","purescript-integers":"4.0.0","purescript-orders":"4.0.0","purescript-const":"4.0.0","purescript-transformers":"4.1.0","purescript-globals":"4.0.0","purescript-math":"2.1.1","purescript-enums":"4.0.0","purescript-psci-support":"4.0.0","purescript-parallel":"4.0.0","purescript-tuples":"5.0.0","purescript-partial":"2.0.0","purescript-strings":"4.0.0","purescript-identity":"4.0.0","purescript-foreign":"5.0.0","purescript-lists":"5.0.0","purescript-nullable":"4.0.0","purescript-datetime":"4.0.0","purescript-functions":"4.0.0"},"version":"1.0.1","github":["hendrikniemann","purescript-graphql"],"versionTag":"v1.0.1","moduleMap":{"Data.BooleanAlgebra":"purescript-prelude","Data.Decide":"purescript-contravariant","Type.Data.Boolean":"purescript-typelevel-prelude","Data.Ring":"purescript-prelude","Control.Monad.Trans.Class":"purescript-transformers","Data.Functor.Product":"purescript-functors","Foreign.Keys":"purescript-foreign","Data.NonEmpty":"purescript-nonempty","Effect.Uncurried":"purescript-effect","Data.Char.Gen":"purescript-strings","Data.String.NonEmpty":"purescript-strings","Effect":"purescript-effect","Data.Traversable.Accum.Internal":"purescript-foldable-traversable","Data.Enum.Gen":"purescript-enums","Data.Nullable":"purescript-nullable","Control.Comonad.Env":"purescript-transformers","Control.Comonad.Traced.Class":"purescript-transformers","Data.Functor.Compose":"purescript-functors","Foreign.Object.Gen":"purescript-foreign-object","Type.Row.Homogeneous":"purescript-typelevel-prelude","Data.Int.Bits":"purescript-integers","Data.DateTime":"purescript-datetime","Data.Bifunctor.Flip":"purescript-bifunctors","Data.String.CodePoints":"purescript-strings","Data.Ord":"purescript-prelude","Control.Monad.Gen":"purescript-gen","Type.Data.Row":"purescript-prelude","Data.Date":"purescript-datetime","Data.Argonaut.Parser":"purescript-argonaut-core","Data.Monoid.Dual":"purescript-prelude","Control.Monad.Rec.Class":"purescript-tailrec","Data.Time.Component":"purescript-datetime","Data.Bitraversable":"purescript-foldable-traversable","Data.Boolean":"purescript-prelude","Data.Map":"purescript-ordered-collections","Control.Biapplicative":"purescript-bifunctors","Effect.Exception.Unsafe":"purescript-exceptions","Control.Parallel.Class":"purescript-parallel","Data.Array.NonEmpty.Internal":"purescript-arrays","Type.Proxy":"purescript-proxy","Effect.Aff.Compat":"purescript-aff","Data.Array.ST.Iterator":"purescript-arrays","Data.DateTime.Gen":"purescript-datetime","Data.String.Pattern":"purescript-strings","Data.Bounded":"purescript-prelude","Control.Monad.State.Trans":"purescript-transformers","Data.TraversableWithIndex":"purescript-foldable-traversable","Data.Int":"purescript-integers","Data.Show":"purescript-prelude","Data.Bifunctor.Clown":"purescript-bifunctors","Control.Monad.Writer.Trans":"purescript-transformers","Data.Foldable":"purescript-foldable-traversable","Data.Divide":"purescript-contravariant","Control.Comonad.Store.Class":"purescript-transformers","Data.Enum":"purescript-enums","Foreign.Object":"purescript-foreign-object","Control.Apply":"purescript-prelude","Data.Functor.Contravariant":"purescript-contravariant","Data.Tuple.Nested":"purescript-tuples","Control.Monad":"purescript-prelude","Data.Lazy":"purescript-lazy","Data.Monoid":"purescript-prelude","Control.Monad.List.Trans":"purescript-transformers","Control.Monad.RWS":"purescript-transformers","Data.String.Common":"purescript-strings","Data.Maybe.First":"purescript-maybe","Control.Bind":"purescript-prelude","Effect.Aff.Class":"purescript-aff","Data.Monoid.Additive":"purescript-prelude","Data.Symbol":"purescript-prelude","Data.Map.Gen":"purescript-ordered-collections","Data.String.Regex":"purescript-strings","Data.HeytingAlgebra":"purescript-prelude","Control.Alt":"purescript-control","Data.Date.Gen":"purescript-datetime","Control.Monad.Maybe.Trans":"purescript-transformers","Control.Monad.Cont":"purescript-transformers","Control.Monad.ST.Internal":"purescript-st","Type.Data.RowList":"purescript-prelude","Data.Time.Component.Gen":"purescript-datetime","Effect.Ref":"purescript-refs","Data.Either.Inject":"purescript-either","Foreign.Object.ST.Unsafe":"purescript-foreign-object","Data.List.ZipList":"purescript-lists","Data.Ord.Min":"purescript-orders","Data.Functor.Coproduct.Nested":"purescript-functors","Data.Ord.Unsafe":"purescript-prelude","Data.Semigroup":"purescript-prelude","Data.Array.NonEmpty":"purescript-arrays","Control.Monad.Reader":"purescript-transformers","Data.Const":"purescript-const","Control.Comonad.Traced.Trans":"purescript-transformers","Data.Ord.Down":"purescript-orders","Data.Array.ST.Partial":"purescript-arrays","Effect.Unsafe":"purescript-effect","Type.Data.Ordering":"purescript-typelevel-prelude","Data.Tuple":"purescript-tuples","Data.Semigroup.Foldable":"purescript-foldable-traversable","Control.Biapply":"purescript-bifunctors","Data.Distributive":"purescript-distributive","Effect.Exception":"purescript-exceptions","Type.Equality":"purescript-type-equality","Foreign.Index":"purescript-foreign","Control.Alternative":"purescript-control","Data.Semiring":"purescript-prelude","Effect.Console":"purescript-console","Data.Traversable.Accum":"purescript-foldable-traversable","Data.CommutativeRing":"purescript-prelude","Data.NaturalTransformation":"purescript-prelude","Data.Monoid.Conj":"purescript-prelude","Data.Functor.App":"purescript-functors","Data.Unfoldable":"purescript-unfoldable","Control.Comonad.Store.Trans":"purescript-transformers","Foreign.Object.Unsafe":"purescript-foreign-object","Control.Monad.ST":"purescript-st","Control.Monad.State.Class":"purescript-transformers","Data.List.Types":"purescript-lists","Data.String.NonEmpty.CodeUnits":"purescript-strings","Data.Functor":"purescript-prelude","Unsafe.Coerce":"purescript-unsafe-coerce","Control.Monad.Writer.Class":"purescript-transformers","Control.Monad.Except":"purescript-transformers","Data.Interval":"purescript-datetime","Data.List.Lazy.Types":"purescript-lists","Control.Category":"purescript-prelude","Data.Interval.Duration":"purescript-datetime","Control.Monad.Gen.Common":"purescript-gen","Control.Monad.RWS.Trans":"purescript-transformers","Control.Monad.Cont.Trans":"purescript-transformers","Data.Maybe":"purescript-maybe","Type.Row":"purescript-typelevel-prelude","Data.String.Regex.Unsafe":"purescript-strings","Foreign.Object.ST":"purescript-foreign-object","Data.Set":"purescript-ordered-collections","Control.Comonad":"purescript-control","Data.Function":"purescript-prelude","Data.List":"purescript-lists","Data.Field":"purescript-prelude","Data.List.Lazy":"purescript-lists","Data.EuclideanRing":"purescript-prelude","Data.Semigroup.Last":"purescript-prelude","Data.Semigroup.First":"purescript-prelude","Data.Functor.Invariant":"purescript-invariant","Control.Comonad.Traced":"purescript-transformers","Global.Unsafe":"purescript-globals","Data.Comparison":"purescript-contravariant","Data.String.Unsafe":"purescript-strings","Prelude":"purescript-prelude","Effect.Class":"purescript-effect","Data.Predicate":"purescript-contravariant","Partial.Unsafe":"purescript-partial","Data.Array":"purescript-arrays","Data.Bifunctor.Product":"purescript-bifunctors","Control.Extend":"purescript-control","Data.Unfoldable1":"purescript-unfoldable","Control.Lazy":"purescript-control","Data.Function.Uncurried":"purescript-functions","Control.Monad.Reader.Trans":"purescript-transformers","Data.Functor.Product.Nested":"purescript-functors","Control.Comonad.Env.Class":"purescript-transformers","Data.Interval.Duration.Iso":"purescript-datetime","Data.Eq":"purescript-prelude","Data.Either.Nested":"purescript-either","Data.Newtype":"purescript-newtype","Data.Semigroup.Traversable":"purescript-foldable-traversable","Data.Bifunctor":"purescript-bifunctors","Data.Monoid.Disj":"purescript-prelude","Control.Monad.Gen.Class":"purescript-gen","Data.Array.Partial":"purescript-arrays","Data.String.CaseInsensitive":"purescript-strings","Control.Parallel":"purescript-parallel","Control.MonadPlus":"purescript-control","Data.Void":"purescript-prelude","Control.MonadZero":"purescript-control","Data.DateTime.Instant":"purescript-datetime","Data.Ord.Max":"purescript-orders","Control.Comonad.Store":"purescript-transformers","Control.Monad.Except.Trans":"purescript-transformers","Data.String.CodeUnits":"purescript-strings","Data.Bifunctor.Joker":"purescript-bifunctors","Data.FunctorWithIndex":"purescript-foldable-traversable","Data.Divisible":"purescript-contravariant","Data.DivisionRing":"purescript-prelude","Data.Bifunctor.Wrap":"purescript-bifunctors","PSCI.Support":"purescript-psci-support","Data.Equivalence":"purescript-contravariant","Data.Maybe.Last":"purescript-maybe","Data.Unit":"purescript-prelude","Data.List.NonEmpty":"purescript-lists","Data.List.Lazy.NonEmpty":"purescript-lists","Data.Ordering":"purescript-prelude","Data.Functor.Coproduct":"purescript-functors","Control.Monad.Cont.Class":"purescript-transformers","Effect.Aff":"purescript-aff","Data.Identity":"purescript-identity","Math":"purescript-math","Control.Comonad.Trans.Class":"purescript-transformers","Data.String":"purescript-strings","Control.Plus":"purescript-control","Data.Map.Internal":"purescript-ordered-collections","Data.Time":"purescript-datetime","Data.Time.Duration":"purescript-datetime","Data.Date.Component":"purescript-datetime","Partial":"purescript-partial","Control.Comonad.Env.Trans":"purescript-transformers","Global":"purescript-globals","Control.Monad.Reader.Class":"purescript-transformers","Data.String.NonEmpty.CodePoints":"purescript-strings","Data.Decidable":"purescript-contravariant","Data.String.NonEmpty.Internal":"purescript-strings","Data.Monoid.Multiplicative":"purescript-prelude","Data.String.NonEmpty.CaseInsensitive":"purescript-strings","Type.Data.Symbol":"purescript-typelevel-prelude","Data.Array.ST":"purescript-arrays","Foreign":"purescript-foreign","Control.Monad.Error.Class":"purescript-transformers","Data.Argonaut.Core":"purescript-argonaut-core","Control.Semigroupoid":"purescript-prelude","Data.Monoid.Alternate":"purescript-control","Data.Char":"purescript-strings","Control.Promise":"purescript-aff-promise","Effect.Class.Console":"purescript-console","Data.Bifunctor.Join":"purescript-bifunctors","Data.Bifoldable":"purescript-foldable-traversable","Control.Monad.ST.Ref":"purescript-st","Data.Monoid.Endo":"purescript-prelude","Control.Monad.State":"purescript-transformers","Data.List.Partial":"purescript-lists","Data.String.Regex.Flags":"purescript-strings","Data.Either":"purescript-either","Data.Time.Duration.Gen":"purescript-datetime","Data.Date.Component.Gen":"purescript-datetime","Type.Prelude":"purescript-typelevel-prelude","Control.Applicative":"purescript-prelude","Data.FoldableWithIndex":"purescript-foldable-traversable","Data.Op":"purescript-contravariant","Record.Unsafe":"purescript-prelude","Control.Monad.Writer":"purescript-transformers","Data.Argonaut.Gen":"purescript-argonaut-core","Data.Functor.Coproduct.Inject":"purescript-functors","Data.Time.Gen":"purescript-datetime","Data.Traversable":"purescript-foldable-traversable","Data.String.Gen":"purescript-strings"},"compilerVersion":"0.12.0"}