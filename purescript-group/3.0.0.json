{"uploader":"rightfold","packageMeta":{"homepage":"https://github.com/morganthomas/purescript-group","repository":{"url":"git://github.com/morganthomas/purescript-group.git","type":"git"},"ignore":["**/.*","bower_components","node_modules","output","test","bower.json","package.json"],"devDependencies":{"purescript-psci-support":"^3.0.0"},"dependencies":{"purescript-monoid":"^3.0.0"},"name":"purescript-group","license":["Apache-2.0"],"description":"Group algebraic structure for PureScript"},"tagTime":"2017-06-15T16:24:41+0000","modules":[{"reExports":[],"name":"Data.Group","comments":null,"declarations":[{"children":[{"comments":null,"title":"ginverse","info":{"declType":"typeClassMember","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"g"}]},{"tag":"TypeVar","contents":"g"}]}},"sourceSpan":null},{"comments":null,"title":"groupUnit","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Group"],"Group"]},{"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}},"sourceSpan":{"start":[30,1],"name":"/home/r/purescript-group/src/Data/Group.purs","end":[31,20]}},{"comments":null,"title":"groupDual","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","Group"],"Group"],"constraintArgs":[{"tag":"TypeVar","contents":"g"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Group"],"Group"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Monoid","Dual"],"Dual"]},{"tag":"TypeVar","contents":"g"}]}}]}},"sourceSpan":{"start":[33,1],"name":"/home/r/purescript-group/src/Data/Group.purs","end":[34,40]}},{"comments":null,"title":"groupAdditive","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","Ring"],"Ring"],"constraintArgs":[{"tag":"TypeVar","contents":"r"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Group"],"Group"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Monoid","Additive"],"Additive"]},{"tag":"TypeVar","contents":"r"}]}}]}},"sourceSpan":{"start":[36,1],"name":"/home/r/purescript-group/src/Data/Group.purs","end":[37,46]}}],"comments":"A `Group` is a `Monoid` with inverses. Instances\nmust satisfy the following law in addition to the monoid laws:\n\n- Inverse: `forall x. ginverse x <> x = mempty = x <> ginverse x`\n","title":"Group","info":{"fundeps":[],"arguments":[["g",null]],"declType":"typeClass","superclasses":[{"constraintClass":[["Data","Monoid"],"Monoid"],"constraintArgs":[{"tag":"TypeVar","contents":"g"}],"constraintData":null}]},"sourceSpan":{"start":[27,1],"name":"/home/r/purescript-group/src/Data/Group.purs","end":[28,21]}},{"children":[],"comments":"An Abelian group is a group with a commutative operation.\n","title":"Abelian","info":{"arguments":[["a",null],["b",null]],"declType":"typeSynonym","type":{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Group"],"Group"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Semigroup","Commutative"],"Commutative"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"tag":"TypeVar","contents":"b"}]}]}},"sourceSpan":{"start":[40,1],"name":"/home/r/purescript-group/src/Data/Group.purs","end":[40,48]}}]},{"reExports":[],"name":"Data.Group.Action","comments":null,"declarations":[{"children":[{"comments":null,"title":"lact","info":{"declType":"typeClassMember","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"g"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"s"}]},{"tag":"TypeVar","contents":"s"}]}]}},"sourceSpan":null}],"comments":"A group `g` acting on a space `s`. Instances must satisfy the following\nlaws in addition to the `Group` laws:\n\n- Identity: `forall s. lact mempty s = s`\n- Compatibility: `forall g h s. lact (g <> h) s = lact g (lact h s)`\n","title":"LeftAction","info":{"fundeps":[],"arguments":[["g",null],["s",null]],"declType":"typeClass","superclasses":[{"constraintClass":[["Data","Group"],"Group"],"constraintArgs":[{"tag":"TypeVar","contents":"g"}],"constraintData":null}]},"sourceSpan":{"start":[15,1],"name":"/home/r/purescript-group/src/Data/Group/Action.purs","end":[16,22]}},{"children":[{"comments":null,"title":"ract","info":{"declType":"typeClassMember","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"s"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"g"}]},{"tag":"TypeVar","contents":"s"}]}]}},"sourceSpan":null}],"comments":"A group `g` acting on a space `s`. Instances must satisfy the following\nlaws in addition to the `Group` laws:\n\n- Identity: `forall s. ract s mempty = s`\n- Compatibility: `forall g h s. ract s (g <> h) = ract (ract s g) h`\n","title":"RightAction","info":{"fundeps":[],"arguments":[["g",null],["s",null]],"declType":"typeClass","superclasses":[{"constraintClass":[["Data","Group"],"Group"],"constraintArgs":[{"tag":"TypeVar","contents":"g"}],"constraintData":null}]},"sourceSpan":{"start":[23,1],"name":"/home/r/purescript-group/src/Data/Group/Action.purs","end":[24,21]}}]},{"reExports":[],"name":"Data.Semigroup.Commutative","comments":null,"declarations":[{"children":[{"comments":null,"title":"commutativeVoid","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Semigroup","Commutative"],"Commutative"]},{"tag":"TypeConstructor","contents":[["Data","Void"],"Void"]}]}},"sourceSpan":{"start":[28,1],"name":"/home/r/purescript-group/src/Data/Semigroup/Commutative.purs","end":[28,45]}},{"comments":null,"title":"commutativeUnit","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Semigroup","Commutative"],"Commutative"]},{"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}},"sourceSpan":{"start":[30,1],"name":"/home/r/purescript-group/src/Data/Semigroup/Commutative.purs","end":[30,45]}},{"comments":null,"title":"commutativeDual","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","Semigroup","Commutative"],"Commutative"],"constraintArgs":[{"tag":"TypeVar","contents":"g"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Semigroup","Commutative"],"Commutative"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Monoid","Dual"],"Dual"]},{"tag":"TypeVar","contents":"g"}]}}]}},"sourceSpan":{"start":[32,1],"name":"/home/r/purescript-group/src/Data/Semigroup/Commutative.purs","end":[32,68]}},{"comments":null,"title":"commutativeAdditive","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","Ring"],"Ring"],"constraintArgs":[{"tag":"TypeVar","contents":"r"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Semigroup","Commutative"],"Commutative"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Monoid","Additive"],"Additive"]},{"tag":"TypeVar","contents":"r"}]}}]}},"sourceSpan":{"start":[34,1],"name":"/home/r/purescript-group/src/Data/Semigroup/Commutative.purs","end":[34,68]}}],"comments":"A `Commutative` is a `Semigroup` with a commutative operation. Instances\nmust satisfy the following law in addition to the group laws:\n\n- Commutativity: `forall x, y. x <> y = y <> x`\n","title":"Commutative","info":{"fundeps":[],"arguments":[["g",null]],"declType":"typeClass","superclasses":[{"constraintClass":[["Data","Semigroup"],"Semigroup"],"constraintArgs":[{"tag":"TypeVar","contents":"g"}],"constraintData":null}]},"sourceSpan":{"start":[26,1],"name":"/home/r/purescript-group/src/Data/Semigroup/Commutative.purs","end":[26,35]}}]}],"resolvedDependencies":{"purescript-newtype":"2.0.0","purescript-control":"3.3.0","purescript-console":"3.0.0","purescript-invariant":"3.0.0","purescript-monoid":"3.0.0","purescript-prelude":"3.0.0","purescript-eff":"3.1.0","purescript-psci-support":"3.0.0"},"version":"3.0.0","github":["morganthomas","purescript-group"],"versionTag":"v3.0.0","moduleMap":{"Data.BooleanAlgebra":"purescript-prelude","Data.Ring":"purescript-prelude","Control.Monad.Eff.Unsafe":"purescript-eff","Data.Ord":"purescript-prelude","Data.Monoid.Dual":"purescript-monoid","Data.Boolean":"purescript-prelude","Data.Bounded":"purescript-prelude","Data.Show":"purescript-prelude","Control.Apply":"purescript-prelude","Control.Monad":"purescript-prelude","Data.Monoid":"purescript-monoid","Control.Monad.Eff.Uncurried":"purescript-eff","Control.Bind":"purescript-prelude","Data.Monoid.Additive":"purescript-monoid","Data.HeytingAlgebra":"purescript-prelude","Control.Alt":"purescript-control","Data.Ord.Unsafe":"purescript-prelude","Data.Semigroup":"purescript-prelude","Control.Monad.Eff":"purescript-eff","Control.Alternative":"purescript-control","Data.Semiring":"purescript-prelude","Data.CommutativeRing":"purescript-prelude","Data.NaturalTransformation":"purescript-prelude","Data.Monoid.Conj":"purescript-monoid","Data.Functor":"purescript-prelude","Control.Category":"purescript-prelude","Control.Comonad":"purescript-control","Data.Function":"purescript-prelude","Data.Field":"purescript-prelude","Data.EuclideanRing":"purescript-prelude","Data.Functor.Invariant":"purescript-invariant","Prelude":"purescript-prelude","Control.Extend":"purescript-control","Control.Lazy":"purescript-control","Data.Eq":"purescript-prelude","Data.Newtype":"purescript-newtype","Control.Monad.Eff.Console":"purescript-console","Data.Monoid.Disj":"purescript-monoid","Control.MonadPlus":"purescript-control","Data.Void":"purescript-prelude","Control.MonadZero":"purescript-control","PSCI.Support":"purescript-psci-support","Data.Unit":"purescript-prelude","Data.Ordering":"purescript-prelude","Control.Plus":"purescript-control","Control.Monad.Eff.Class":"purescript-eff","Data.Monoid.Multiplicative":"purescript-monoid","Control.Semigroupoid":"purescript-prelude","Data.Monoid.Alternate":"purescript-monoid","Data.Monoid.Endo":"purescript-monoid","Control.Applicative":"purescript-prelude"},"compilerVersion":"0.11.4"}