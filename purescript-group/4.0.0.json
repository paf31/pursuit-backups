{"uploader":"jhrcek","packageMeta":{"homepage":"https://github.com/morganthomas/purescript-group","repository":{"url":"git://github.com/morganthomas/purescript-group.git","type":"git"},"ignore":["**/.*","bower_components","node_modules","output","test","bower.json","package.json"],"devDependencies":{"purescript-psci-support":"^4.0.0"},"dependencies":{"purescript-lists":"^5.0.0"},"name":"purescript-group","license":["Apache-2.0"],"description":"Group algebraic structure for PureScript"},"tagTime":"2018-06-15T03:34:19+0000","modules":[{"reExports":[],"name":"Data.Group","comments":null,"declarations":[{"children":[{"comments":null,"title":"ginverse","info":{"declType":"typeClassMember","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeVar","contents":"g"}]},{"annotation":[],"tag":"TypeVar","contents":"g"}]}},"sourceSpan":{"start":[29,3],"name":"/home/jhrcek/Devel/github.com/morganthomas/purescript-group/src/Data/Group.purs","end":[29,21]}},{"comments":null,"title":"groupUnit","info":{"declType":"instance","dependencies":[],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Group"],"Group"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}},"sourceSpan":{"start":[31,1],"name":"/home/jhrcek/Devel/github.com/morganthomas/purescript-group/src/Data/Group.purs","end":[31,33]}},{"comments":null,"title":"groupDual","info":{"declType":"instance","dependencies":[{"constraintAnn":[],"constraintClass":[["Data","Group"],"Group"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"g"}],"constraintData":null}],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Group"],"Group"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Monoid","Dual"],"Dual"]},{"annotation":[],"tag":"TypeVar","contents":"g"}]}]}},"sourceSpan":{"start":[34,1],"name":"/home/jhrcek/Devel/github.com/morganthomas/purescript-group/src/Data/Group.purs","end":[34,50]}},{"comments":null,"title":"groupAdditive","info":{"declType":"instance","dependencies":[{"constraintAnn":[],"constraintClass":[["Data","Ring"],"Ring"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"r"}],"constraintData":null}],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Group"],"Group"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Monoid","Additive"],"Additive"]},{"annotation":[],"tag":"TypeVar","contents":"r"}]}]}},"sourceSpan":{"start":[37,1],"name":"/home/jhrcek/Devel/github.com/morganthomas/purescript-group/src/Data/Group.purs","end":[37,57]}}],"comments":"A `Group` is a `Monoid` with inverses. Instances\nmust satisfy the following law in addition to the monoid laws:\n\n- Inverse: `forall x. ginverse x <> x = mempty = x <> ginverse x`\n","title":"Group","info":{"fundeps":[],"arguments":[["g",null]],"declType":"typeClass","superclasses":[{"constraintAnn":[],"constraintClass":[["Data","Monoid"],"Monoid"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"g"}],"constraintData":null}]},"sourceSpan":{"start":[28,1],"name":"/home/jhrcek/Devel/github.com/morganthomas/purescript-group/src/Data/Group.purs","end":[29,21]}},{"children":[],"comments":"An Abelian group is a group with a commutative operation.\n","title":"Abelian","info":{"arguments":[["a",null],["b",null]],"declType":"typeSynonym","type":{"annotation":[],"tag":"ConstrainedType","contents":[{"constraintAnn":[],"constraintClass":[["Data","Group"],"Group"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"a"}],"constraintData":null},{"annotation":[],"tag":"ConstrainedType","contents":[{"constraintAnn":[],"constraintClass":[["Data","Semigroup","Commutative"],"Commutative"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"a"}],"constraintData":null},{"annotation":[],"tag":"TypeVar","contents":"b"}]}]}},"sourceSpan":{"start":[41,1],"name":"/home/jhrcek/Devel/github.com/morganthomas/purescript-group/src/Data/Group.purs","end":[41,49]}},{"children":[],"comments":"Append a value (or its inverse) to itself a certain number of times.\n\nFor the `Additive Int` type, this is the same as multiplication.\n","title":"power","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["g",{"annotation":[],"tag":"ConstrainedType","contents":[{"constraintAnn":[],"constraintClass":[["Data","Group"],"Group"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"g"}],"constraintData":null},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeVar","contents":"g"}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"annotation":[],"tag":"TypeVar","contents":"g"}]}]}]},null]}},"sourceSpan":{"start":[46,1],"name":"/home/jhrcek/Devel/github.com/morganthomas/purescript-group/src/Data/Group.purs","end":[46,44]}}]},{"reExports":[],"name":"Data.Group.Action","comments":null,"declarations":[{"children":[{"comments":null,"title":"lact","info":{"declType":"typeClassMember","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeVar","contents":"g"}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeVar","contents":"s"}]},{"annotation":[],"tag":"TypeVar","contents":"s"}]}]}},"sourceSpan":{"start":[18,3],"name":"/home/jhrcek/Devel/github.com/morganthomas/purescript-group/src/Data/Group/Action.purs","end":[18,22]}}],"comments":"A group `g` acting on a space `s`. Instances must satisfy the following\nlaws in addition to the `Group` laws:\n\n- Identity: `forall s. lact mempty s = s`\n- Compatibility: `forall g h s. lact (g <> h) s = lact g (lact h s)`\n","title":"LeftAction","info":{"fundeps":[],"arguments":[["g",null],["s",null]],"declType":"typeClass","superclasses":[{"constraintAnn":[],"constraintClass":[["Data","Group"],"Group"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"g"}],"constraintData":null}]},"sourceSpan":{"start":[17,1],"name":"/home/jhrcek/Devel/github.com/morganthomas/purescript-group/src/Data/Group/Action.purs","end":[18,22]}},{"children":[{"comments":null,"title":"ract","info":{"declType":"typeClassMember","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeVar","contents":"s"}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeVar","contents":"g"}]},{"annotation":[],"tag":"TypeVar","contents":"s"}]}]}},"sourceSpan":{"start":[26,3],"name":"/home/jhrcek/Devel/github.com/morganthomas/purescript-group/src/Data/Group/Action.purs","end":[26,22]}}],"comments":"A group `g` acting on a space `s`. Instances must satisfy the following\nlaws in addition to the `Group` laws:\n\n- Identity: `forall s. ract s mempty = s`\n- Compatibility: `forall g h s. ract s (g <> h) = ract (ract s g) h`\n","title":"RightAction","info":{"fundeps":[],"arguments":[["g",null],["s",null]],"declType":"typeClass","superclasses":[{"constraintAnn":[],"constraintClass":[["Data","Group"],"Group"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"g"}],"constraintData":null}]},"sourceSpan":{"start":[25,1],"name":"/home/jhrcek/Devel/github.com/morganthomas/purescript-group/src/Data/Group/Action.purs","end":[26,22]}},{"children":[],"comments":null,"title":"(<+)","info":{"declType":"alias","alias":[["Data","Group","Action"],{"Right":{"Left":{"Ident":"lact"}}}],"fixity":{"associativity":"infixl","precedence":6}},"sourceSpan":{"start":[28,1],"name":"/home/jhrcek/Devel/github.com/morganthomas/purescript-group/src/Data/Group/Action.purs","end":[28,20]}},{"children":[],"comments":null,"title":"(+>)","info":{"declType":"alias","alias":[["Data","Group","Action"],{"Right":{"Left":{"Ident":"ract"}}}],"fixity":{"associativity":"infixl","precedence":6}},"sourceSpan":{"start":[29,1],"name":"/home/jhrcek/Devel/github.com/morganthomas/purescript-group/src/Data/Group/Action.purs","end":[29,18]}}]},{"reExports":[],"name":"Data.Group.Free","comments":null,"declarations":[{"children":[{"comments":null,"title":"FreeGrp","info":{"arguments":[{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","List","Types"],"List"]},{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Group","Free"],"Signed"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]}}]}}],"declType":"dataConstructor"},"sourceSpan":null},{"comments":null,"title":"eqFreeGrp","info":{"declType":"instance","dependencies":[{"constraintAnn":[],"constraintClass":[["Data","Eq"],"Eq"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"a"}],"constraintData":null}],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Eq"],"Eq"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Group","Free"],"FreeGroup"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[33,1],"name":"/home/jhrcek/Devel/github.com/morganthomas/purescript-group/src/Data/Group/Free.purs","end":[33,47]}},{"comments":null,"title":"showFreeGrp","info":{"declType":"instance","dependencies":[{"constraintAnn":[],"constraintClass":[["Data","Show"],"Show"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"a"}],"constraintData":null}],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Show"],"Show"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Group","Free"],"FreeGroup"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[36,1],"name":"/home/jhrcek/Devel/github.com/morganthomas/purescript-group/src/Data/Group/Free.purs","end":[36,53]}},{"comments":null,"title":"semigrpFreeGrp","info":{"declType":"instance","dependencies":[{"constraintAnn":[],"constraintClass":[["Data","Eq"],"Eq"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"a"}],"constraintData":null}],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Semigroup"],"Semigroup"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Group","Free"],"FreeGroup"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[39,1],"name":"/home/jhrcek/Devel/github.com/morganthomas/purescript-group/src/Data/Group/Free.purs","end":[39,59]}},{"comments":null,"title":"monoidFreeGrp","info":{"declType":"instance","dependencies":[{"constraintAnn":[],"constraintClass":[["Data","Eq"],"Eq"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"a"}],"constraintData":null}],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Monoid"],"Monoid"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Group","Free"],"FreeGroup"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[42,1],"name":"/home/jhrcek/Devel/github.com/morganthomas/purescript-group/src/Data/Group/Free.purs","end":[42,55]}},{"comments":null,"title":"groupFreeGrp","info":{"declType":"instance","dependencies":[{"constraintAnn":[],"constraintClass":[["Data","Eq"],"Eq"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"a"}],"constraintData":null}],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Group"],"Group"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Group","Free"],"FreeGroup"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[45,1],"name":"/home/jhrcek/Devel/github.com/morganthomas/purescript-group/src/Data/Group/Free.purs","end":[45,53]}}],"comments":"The free group generated by elements of `a`, up to equality.\nNote that the `Eq` and `Monoid` instances differ from the standard such instances for `List (Signed a)`; two elements of the free group are equal iff they are equal after being reduced to \"canonical form\", i.e., cancelling adjacent inverses.\n","title":"FreeGroup","info":{"declType":"data","dataDeclType":"newtype","typeArguments":[["a",null]]},"sourceSpan":{"start":[27,1],"name":"/home/jhrcek/Devel/github.com/morganthomas/purescript-group/src/Data/Group/Free.purs","end":[27,48]}},{"children":[],"comments":"Lift a value of type `a` to a value of type `FreeGroup a`\n","title":"free","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["a",{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Group","Free"],"FreeGroup"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]}]},null]}},"sourceSpan":{"start":[30,1],"name":"/home/jhrcek/Devel/github.com/morganthomas/purescript-group/src/Data/Group/Free.purs","end":[30,35]}},{"children":[{"comments":null,"title":"Positive","info":{"arguments":[{"annotation":[],"tag":"TypeVar","contents":"a"}],"declType":"dataConstructor"},"sourceSpan":null},{"comments":null,"title":"Negative","info":{"arguments":[{"annotation":[],"tag":"TypeVar","contents":"a"}],"declType":"dataConstructor"},"sourceSpan":null},{"comments":null,"title":"eqSigned","info":{"declType":"instance","dependencies":[{"constraintAnn":[],"constraintClass":[["Data","Eq"],"Eq"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"a"}],"constraintData":null}],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Eq"],"Eq"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Group","Free"],"Signed"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[12,8],"name":"/home/jhrcek/Devel/github.com/morganthomas/purescript-group/src/Data/Group/Free.purs","end":[12,50]}},{"comments":null,"title":"showSigned","info":{"declType":"instance","dependencies":[{"constraintAnn":[],"constraintClass":[["Data","Show"],"Show"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"a"}],"constraintData":null}],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Show"],"Show"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Group","Free"],"Signed"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[14,1],"name":"/home/jhrcek/Devel/github.com/morganthomas/purescript-group/src/Data/Group/Free.purs","end":[14,49]}}],"comments":"A data type indicating the sign of one of the generators of the free group.\n","title":"Signed","info":{"declType":"data","dataDeclType":"data","typeArguments":[["a",null]]},"sourceSpan":{"start":[10,1],"name":"/home/jhrcek/Devel/github.com/morganthomas/purescript-group/src/Data/Group/Free.purs","end":[10,40]}}]},{"reExports":[],"name":"Data.Semigroup.Commutative","comments":null,"declarations":[{"children":[{"comments":null,"title":"commutativeVoid","info":{"declType":"instance","dependencies":[],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Semigroup","Commutative"],"Commutative"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Void"],"Void"]}]}},"sourceSpan":{"start":[28,1],"name":"/home/jhrcek/Devel/github.com/morganthomas/purescript-group/src/Data/Semigroup/Commutative.purs","end":[28,45]}},{"comments":null,"title":"commutativeUnit","info":{"declType":"instance","dependencies":[],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Semigroup","Commutative"],"Commutative"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}},"sourceSpan":{"start":[30,1],"name":"/home/jhrcek/Devel/github.com/morganthomas/purescript-group/src/Data/Semigroup/Commutative.purs","end":[30,45]}},{"comments":null,"title":"commutativeDual","info":{"declType":"instance","dependencies":[{"constraintAnn":[],"constraintClass":[["Data","Semigroup","Commutative"],"Commutative"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"g"}],"constraintData":null}],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Semigroup","Commutative"],"Commutative"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Monoid","Dual"],"Dual"]},{"annotation":[],"tag":"TypeVar","contents":"g"}]}]}},"sourceSpan":{"start":[32,1],"name":"/home/jhrcek/Devel/github.com/morganthomas/purescript-group/src/Data/Semigroup/Commutative.purs","end":[32,68]}},{"comments":"Addition commutes for any `Semiring`\n","title":"commutativeAdditive","info":{"declType":"instance","dependencies":[{"constraintAnn":[],"constraintClass":[["Data","Semiring"],"Semiring"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"r"}],"constraintData":null}],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Semigroup","Commutative"],"Commutative"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Monoid","Additive"],"Additive"]},{"annotation":[],"tag":"TypeVar","contents":"r"}]}]}},"sourceSpan":{"start":[35,1],"name":"/home/jhrcek/Devel/github.com/morganthomas/purescript-group/src/Data/Semigroup/Commutative.purs","end":[35,73]}},{"comments":"Multiplication commutes only for a `CommutativeRing`.\n","title":"commutativeMultiplicative","info":{"declType":"instance","dependencies":[{"constraintAnn":[],"constraintClass":[["Data","CommutativeRing"],"CommutativeRing"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"r"}],"constraintData":null}],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Semigroup","Commutative"],"Commutative"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Monoid","Multiplicative"],"Multiplicative"]},{"annotation":[],"tag":"TypeVar","contents":"r"}]}]}},"sourceSpan":{"start":[38,1],"name":"/home/jhrcek/Devel/github.com/morganthomas/purescript-group/src/Data/Semigroup/Commutative.purs","end":[38,91]}}],"comments":"A `Commutative` is a `Semigroup` with a commutative operation. Instances\nmust satisfy the following law in addition to the semigroup laws:\n\n- Commutativity: `forall x, y. x <> y = y <> x`\n","title":"Commutative","info":{"fundeps":[],"arguments":[["g",null]],"declType":"typeClass","superclasses":[{"constraintAnn":[],"constraintClass":[["Data","Semigroup"],"Semigroup"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"g"}],"constraintData":null}]},"sourceSpan":{"start":[26,1],"name":"/home/jhrcek/Devel/github.com/morganthomas/purescript-group/src/Data/Semigroup/Commutative.purs","end":[26,35]}}]}],"resolvedDependencies":{"purescript-newtype":"3.0.0","purescript-effect":"2.0.1","purescript-control":"4.1.0","purescript-console":"4.2.0","purescript-either":"4.1.1","purescript-maybe":"4.0.1","purescript-type-equality":"3.0.0","purescript-distributive":"4.0.0","purescript-unfoldable":"4.0.0","purescript-invariant":"4.1.0","purescript-lazy":"4.0.0","purescript-foldable-traversable":"4.1.1","purescript-tailrec":"4.0.0","purescript-prelude":"4.1.0","purescript-bifunctors":"4.0.0","purescript-nonempty":"5.0.0","purescript-refs":"4.1.0","purescript-orders":"4.0.0","purescript-psci-support":"4.0.0","purescript-tuples":"5.1.0","purescript-partial":"2.0.0","purescript-identity":"4.1.0","purescript-lists":"5.3.0"},"version":"4.0.0","github":["morganthomas","purescript-group"],"versionTag":"v4.0.0","moduleMap":{"Data.BooleanAlgebra":"purescript-prelude","Data.Ring":"purescript-prelude","Data.NonEmpty":"purescript-nonempty","Effect.Uncurried":"purescript-effect","Effect":"purescript-effect","Data.Traversable.Accum.Internal":"purescript-foldable-traversable","Data.Bifunctor.Flip":"purescript-bifunctors","Data.Ord":"purescript-prelude","Type.Data.Row":"purescript-prelude","Data.Monoid.Dual":"purescript-prelude","Control.Monad.Rec.Class":"purescript-tailrec","Data.Bitraversable":"purescript-foldable-traversable","Data.Boolean":"purescript-prelude","Control.Biapplicative":"purescript-bifunctors","Data.Bounded":"purescript-prelude","Data.TraversableWithIndex":"purescript-foldable-traversable","Data.Show":"purescript-prelude","Data.Bifunctor.Clown":"purescript-bifunctors","Data.Foldable":"purescript-foldable-traversable","Control.Apply":"purescript-prelude","Data.Tuple.Nested":"purescript-tuples","Control.Monad":"purescript-prelude","Data.Lazy":"purescript-lazy","Data.Monoid":"purescript-prelude","Data.Maybe.First":"purescript-maybe","Control.Bind":"purescript-prelude","Data.Monoid.Additive":"purescript-prelude","Data.Symbol":"purescript-prelude","Data.HeytingAlgebra":"purescript-prelude","Control.Alt":"purescript-control","Type.Data.RowList":"purescript-prelude","Effect.Ref":"purescript-refs","Data.Either.Inject":"purescript-either","Data.List.ZipList":"purescript-lists","Data.Ord.Min":"purescript-orders","Data.Ord.Unsafe":"purescript-prelude","Data.Semigroup":"purescript-prelude","Data.Ord.Down":"purescript-orders","Effect.Unsafe":"purescript-effect","Data.Tuple":"purescript-tuples","Data.Semigroup.Foldable":"purescript-foldable-traversable","Control.Biapply":"purescript-bifunctors","Data.Distributive":"purescript-distributive","Type.Equality":"purescript-type-equality","Control.Alternative":"purescript-control","Data.Semiring":"purescript-prelude","Effect.Console":"purescript-console","Data.Traversable.Accum":"purescript-foldable-traversable","Data.CommutativeRing":"purescript-prelude","Data.NaturalTransformation":"purescript-prelude","Data.Monoid.Conj":"purescript-prelude","Data.Unfoldable":"purescript-unfoldable","Data.List.Types":"purescript-lists","Data.Functor":"purescript-prelude","Data.List.Lazy.Types":"purescript-lists","Control.Category":"purescript-prelude","Data.Maybe":"purescript-maybe","Control.Comonad":"purescript-control","Data.Function":"purescript-prelude","Data.List":"purescript-lists","Data.Field":"purescript-prelude","Data.List.Lazy":"purescript-lists","Data.EuclideanRing":"purescript-prelude","Data.Semigroup.Last":"purescript-prelude","Data.Semigroup.First":"purescript-prelude","Data.Functor.Invariant":"purescript-invariant","Prelude":"purescript-prelude","Effect.Class":"purescript-effect","Partial.Unsafe":"purescript-partial","Data.Bifunctor.Product":"purescript-bifunctors","Control.Extend":"purescript-control","Data.Unfoldable1":"purescript-unfoldable","Control.Lazy":"purescript-control","Data.Eq":"purescript-prelude","Data.Either.Nested":"purescript-either","Data.Newtype":"purescript-newtype","Data.Semigroup.Traversable":"purescript-foldable-traversable","Data.Bifunctor":"purescript-bifunctors","Data.Monoid.Disj":"purescript-prelude","Control.MonadPlus":"purescript-control","Data.Void":"purescript-prelude","Control.MonadZero":"purescript-control","Data.Ord.Max":"purescript-orders","Data.Bifunctor.Joker":"purescript-bifunctors","Data.FunctorWithIndex":"purescript-foldable-traversable","Data.DivisionRing":"purescript-prelude","Data.Bifunctor.Wrap":"purescript-bifunctors","PSCI.Support":"purescript-psci-support","Data.Maybe.Last":"purescript-maybe","Data.Unit":"purescript-prelude","Data.List.NonEmpty":"purescript-lists","Data.List.Lazy.NonEmpty":"purescript-lists","Data.Ordering":"purescript-prelude","Data.Identity":"purescript-identity","Control.Plus":"purescript-control","Partial":"purescript-partial","Data.Monoid.Multiplicative":"purescript-prelude","Control.Semigroupoid":"purescript-prelude","Data.Monoid.Alternate":"purescript-control","Effect.Class.Console":"purescript-console","Data.Bifunctor.Join":"purescript-bifunctors","Data.Bifoldable":"purescript-foldable-traversable","Data.Monoid.Endo":"purescript-prelude","Data.List.Partial":"purescript-lists","Data.Either":"purescript-either","Control.Applicative":"purescript-prelude","Data.FoldableWithIndex":"purescript-foldable-traversable","Record.Unsafe":"purescript-prelude","Data.Traversable":"purescript-foldable-traversable"},"compilerVersion":"0.12.2"}