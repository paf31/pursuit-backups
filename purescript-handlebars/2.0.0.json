{"uploader":"paf31","packageMeta":{"homepage":"https://github.com/purescript-contrib/purescript-handlebars","repository":{"url":"git://github.com/purescript-contrib/purescript-handlebars.git","type":"git"},"ignore":["**/.*","bower_components","node_modules","output","tests","tmp","bower.json","Gruntfile.js","package.json"],"devDependencies":{"purescript-console":"^2.0.0"},"name":"purescript-handlebars","keywords":["purescript"],"license":["MIT"],"description":"purescript-handlebars"},"tagTime":"2016-10-24T01:46:17+0000","modules":[{"reExports":[],"name":"Text.Handlebars","comments":"Low-level, unsafe bindings to the Handlebars templating library.\n","declarations":[{"children":[],"comments":"Compile a string into a template which can be applied to a context.\n\nThis function should be partially applyied, resulting in a compiled function\nwhich can be reused, instead of compiling the template on each\napplication.\n\n_Note_: This function performs no verification on the template string,\nso it is recommended that an appropriate type signature be given to the\nresulting function. For example:\n\n```purescript\nhello :: { name :: String } -> String\nhello = compile \"Hello, {{name}}!\"\n```\n","title":"compile","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}]},null]}},"sourceSpan":{"start":[21,1],"name":"/private/tmp/pursuit-staging/.psc-package/psc-0.11.3/handlebars/v2.0.0/src/Text/Handlebars.purs","end":[21,52]}}]}],"resolvedDependencies":{},"version":"2.0.0","github":["purescript-contrib","purescript-handlebars"],"versionTag":"v2.0.0","moduleMap":{},"compilerVersion":"0.11.3"}