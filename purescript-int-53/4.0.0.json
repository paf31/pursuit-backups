{"uploader":"rgrempel","packageMeta":{"homepage":"https://github.com/rgrempel/purescript-int-53","repository":{"url":"git://github.com/rgrempel/purescript-int-53.git","type":"git"},"ignore":["**/.*","node_modules","bower_components","output"],"devDependencies":{"purescript-quickcheck-laws":"^4.0.0","purescript-console":"^4.1.0","purescript-aff":"^5.0.1","purescript-test-unit":"^14.0.0","purescript-random":"^4.0.0"},"authors":[{"email":"rgrempel@gmail.com","name":"Ryan Rempel"}],"dependencies":{"purescript-integers":"^4.0.0","purescript-math":"^2.0.0"},"name":"purescript-int-53","keywords":["purescript"],"license":["MIT"],"description":"Purescript 53-bit integer type"},"tagTime":"2018-12-04T19:48:45+0000","modules":[{"reExports":[],"name":"Data.Int53","comments":"Purescript's built-in `Int` type is restricted to 32-bit integers. However, the\nJavascript runtime is capable of working with 53-bit integers. So, this module\nprovides an `Int53` type, for cases where you want all 53 bits\n(from -9,007,199,254,740,991 to 9,007,199,254,740,991).\n\nFor even larger numbers, consider\n[purescript-bigints](https://pursuit.purescript.org/packages/purescript-bigints), or\n[purescript-hugenums](https://github.com/Thimoteus/purescript-hugenums).\nThe advantage of purescript-int-53 over those is that purescript-int-53 is likely\nto be faster, since it provides a \"thinner\" wrapper over the underlying Javascript\noperations.\n\n### Making an `Int53`\n\nTo create an `Int53` from a `Number`, use [`fromNumber`](#v:fromNumber) or, more often,\n[`ceil`](#v:ceil), [`floor`](#v:floor), [`round`](#v:round) or [`truncate`](#v:truncate).\n\nTo create an `Int53` from an `Int`, use [`fromInt`](#v:fromInt).\n\nIf you're starting from a `String`, then there is [`fromString`](#:v:fromString).\n\n### Using an `Int53`\n\nOnce you have an `Int53`, you can do things like add, subtract, multiply,\netc., in the usual way, since the ordinary classes for arithmetic are\nimplemented. It should feel pretty much like using an ordinary integer.\n\nThere are also functions for [`even`](#v:even), [`odd`](#v:odd), [`pow`](#v:pow),\nand [`abs`](#v:abs).\n\n### Converting an `Int53` to something else\n\nWhen you need a `Number` again, you can use [`toNumber`](#v:toNumber) -- and when you need\nan `Int`, there is [`toInt`](#v:toInt).\n\nTo get back to a `String`, there is a `Show` instance, so you can use `show`.\nHowever, that includes the `Int53` tag in the resulting string, so you might\nsometimes want [`toString`](#v:toString) instead.\n\n### The `Int53Value` class\n\nThere is also a class for [`Int53Value`](#t:Int53Value), which might sometimes be useful if you\nhave a function where you'd like to accept either an `Int` or an `Int53`.\nOften you won't need this.\n","declarations":[{"children":[{"comments":"Addition is saturating:\n\n```\n>>> top + fromInt 1 == top\ntrue\n```\n\nNOTE: Due to this, Int53 doesn't actually satisfy the associativity law\nfor addition:\n\n```\n>>> top + (fromInt 1 + fromInt (-1))\n(Int53 9007199254740991.0)\n>>> (top + fromInt 1) + fromInt (-1)\n(Int53 9007199254740990.0)\n```\n\nMultiplication is also saturating:\n\n```\n>>> top * fromInt 2 == top\ntrue\n```\n","title":"semiringInt53","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Semiring"],"Semiring"]},{"tag":"TypeConstructor","contents":[["Data","Int53"],"Int53"]}]}},"sourceSpan":{"start":[120,1],"name":"/Users/rgrempel/projects/purescript/purescript-int-53/src/Data/Int53.purs","end":[120,41]}},{"comments":null,"title":"ringInt53","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Ring"],"Ring"]},{"tag":"TypeConstructor","contents":[["Data","Int53"],"Int53"]}]}},"sourceSpan":{"start":[127,1],"name":"/Users/rgrempel/projects/purescript/purescript-int-53/src/Data/Int53.purs","end":[127,33]}},{"comments":null,"title":"commutativeRingInt53","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","CommutativeRing"],"CommutativeRing"]},{"tag":"TypeConstructor","contents":[["Data","Int53"],"Int53"]}]}},"sourceSpan":{"start":[131,1],"name":"/Users/rgrempel/projects/purescript/purescript-int-53/src/Data/Int53.purs","end":[131,55]}},{"comments":null,"title":"euclideanRingInt53","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","EuclideanRing"],"EuclideanRing"]},{"tag":"TypeConstructor","contents":[["Data","Int53"],"Int53"]}]}},"sourceSpan":{"start":[134,1],"name":"/Users/rgrempel/projects/purescript/purescript-int-53/src/Data/Int53.purs","end":[134,51]}},{"comments":null,"title":"eqInt53","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Eq"],"Eq"]},{"tag":"TypeConstructor","contents":[["Data","Int53"],"Int53"]}]}},"sourceSpan":{"start":[142,8],"name":"/Users/rgrempel/projects/purescript/purescript-int-53/src/Data/Int53.purs","end":[142,36]}},{"comments":null,"title":"ordInt53","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Ord"],"Ord"]},{"tag":"TypeConstructor","contents":[["Data","Int53"],"Int53"]}]}},"sourceSpan":{"start":[143,8],"name":"/Users/rgrempel/projects/purescript/purescript-int-53/src/Data/Int53.purs","end":[143,38]}},{"comments":null,"title":"boundedInt53","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Bounded"],"Bounded"]},{"tag":"TypeConstructor","contents":[["Data","Int53"],"Int53"]}]}},"sourceSpan":{"start":[146,1],"name":"/Users/rgrempel/projects/purescript/purescript-int-53/src/Data/Int53.purs","end":[146,39]}},{"comments":null,"title":"showInt53","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Show"],"Show"]},{"tag":"TypeConstructor","contents":[["Data","Int53"],"Int53"]}]}},"sourceSpan":{"start":[166,1],"name":"/Users/rgrempel/projects/purescript/purescript-int-53/src/Data/Int53.purs","end":[166,33]}},{"comments":null,"title":"int53Int53Value","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Int53"],"Int53Value"]},{"tag":"TypeConstructor","contents":[["Data","Int53"],"Int53"]}]}},"sourceSpan":{"start":[366,1],"name":"/Users/rgrempel/projects/purescript/purescript-int-53/src/Data/Int53.purs","end":[366,45]}}],"comments":"A 53-bit signed integer.\n\nIt is implemented a newtype over a `Number` (that is, a Javascript number),\nwith matters arranged so that it will always be an integer.\n\nIn case you've forgotten what all the instances mean, you've got:\n\n    Semiring: add, zero, mul, one, (+), (*)\n    Ring: sub, (-), negate\n    EuclideanRing: div, mod, (/), degree\n\n... plus the usual `Eq`, `Ord` and `Show`.\n\nThere's also `top` and `bottom` from `Bounded`, which indicate the maximum\nand minimum values available for an `Int53`.\n","title":"Int53","info":{"declType":"data","dataDeclType":"newtype","typeArguments":[]},"sourceSpan":{"start":[95,1],"name":"/Users/rgrempel/projects/purescript/purescript-int-53/src/Data/Int53.purs","end":[95,29]}},{"children":[{"comments":null,"title":"toInt53","info":{"declType":"typeClassMember","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeConstructor","contents":[["Data","Int53"],"Int53"]}]}},"sourceSpan":{"start":[362,5],"name":"/Users/rgrempel/projects/purescript/purescript-int-53/src/Data/Int53.purs","end":[362,26]}},{"comments":null,"title":"fromInt53","info":{"declType":"typeClassMember","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Int53"],"Int53"]}]},{"tag":"TypeVar","contents":"a"}]}},"sourceSpan":{"start":[363,5],"name":"/Users/rgrempel/projects/purescript/purescript-int-53/src/Data/Int53.purs","end":[363,28]}},{"comments":null,"title":"int53Int53Value","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Int53"],"Int53Value"]},{"tag":"TypeConstructor","contents":[["Data","Int53"],"Int53"]}]}},"sourceSpan":{"start":[366,1],"name":"/Users/rgrempel/projects/purescript/purescript-int-53/src/Data/Int53.purs","end":[366,45]}},{"comments":null,"title":"intInt53Value","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Int53"],"Int53Value"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}},"sourceSpan":{"start":[371,1],"name":"/Users/rgrempel/projects/purescript/purescript-int-53/src/Data/Int53.purs","end":[371,41]}}],"comments":"A class which allows a function to accept eitner an `Int` or an `Int53`,\nwork with `Int53` internally, and then return whatever type was provided.\n\nFor instance, you can do something like:\n\n    doSomethingWithIntOrInt53 :: âˆ€ a. (Int53Value a) => a -> a\n    doSomethingWithIntOrInt53 =\n        fromInt53 <<< doSometingWithInt53 <<< toInt53\n\n    doSomethingWithInt53 :: Int53 -> Int53\n    doSomethingWithInt53 = ...\n\nThis is basically for cases where only some **intermediate** steps need the\n`Int53` range -- that is, where an input in the `Int` range will produce an\noutput in the `Int` range, but one needs an `Int53` in the middle.\n\nSo, you won't need this very often ... it's just a convenience in some cases.\n","title":"Int53Value","info":{"fundeps":[],"arguments":[["a",null]],"declType":"typeClass","superclasses":[]},"sourceSpan":{"start":[361,1],"name":"/Users/rgrempel/projects/purescript/purescript-int-53/src/Data/Int53.purs","end":[363,28]}},{"children":[],"comments":"Creates an `Int53` from a `Number` value. The number must already be an\ninteger and fall within the valid range of values for the `Int53` type.\nOtherwise, `Nothing` is returned.\n\n    fromNumber Global.nan == Nothing\n    fromNumber 2.5 == Nothing\n    fromNumber 1.0e65 == Nothing\n    fromNumber (-1.0e65) == Nothing\n    fromNumber 27.0 == Just (fromInt 27)\n","title":"fromNumber","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeConstructor","contents":[["Data","Int53"],"Int53"]}]}]}},"sourceSpan":{"start":[243,1],"name":"/Users/rgrempel/projects/purescript/purescript-int-53/src/Data/Int53.purs","end":[243,36]}},{"children":[],"comments":"Converts an `Int53` value back into a `Number`. Any `Int53` is a valid `Number`\nso there is no loss of precision with this function.\n","title":"toNumber","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Int53"],"Int53"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]}},"sourceSpan":{"start":[255,1],"name":"/Users/rgrempel/projects/purescript/purescript-int-53/src/Data/Int53.purs","end":[255,28]}},{"children":[],"comments":"Converts an `Int` to an `Int53`.\n","title":"fromInt","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeConstructor","contents":[["Data","Int53"],"Int53"]}]}},"sourceSpan":{"start":[289,1],"name":"/Users/rgrempel/projects/purescript/purescript-int-53/src/Data/Int53.purs","end":[289,24]}},{"children":[],"comments":"Converts an `Int53` to an `Int`. Values outside the `Int` range are clamped.\n\n    toInt (fromInt 27) ==> 27\n    toInt (floor (1.0e52)) ==> 2147483647\n    toInt (floor (-1.0e52)) ==> (-2147483648)\n","title":"toInt","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Int53"],"Int53"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}},"sourceSpan":{"start":[298,1],"name":"/Users/rgrempel/projects/purescript/purescript-int-53/src/Data/Int53.purs","end":[298,22]}},{"children":[],"comments":"Reads an `Int53` from a `String` value. The number must parse as an integer\nand fall within the valid range of values for the `Int53` type, otherwise\n`Nothing` is returned.\n\n    fromString \"not a number\" == Nothing\n    fromString \"2.5\" == Nothing\n    fromString \"1.0e65\" == Nothing\n    fromString \"-1.0e65\" == Nothing\n    fromString \"27.0\" == Just (fromInt 27)\n    fromString \"27\" == Just (fromInt 27)\n","title":"fromString","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeConstructor","contents":[["Data","Int53"],"Int53"]}]}]}},"sourceSpan":{"start":[269,1],"name":"/Users/rgrempel/projects/purescript/purescript-int-53/src/Data/Int53.purs","end":[269,36]}},{"children":[],"comments":"Converts an `Int53` to a `String`.\n\nThere is also a `Show` instance (so you can use `show`), but that includes\nthe `Int53` tag in the string, which isn't always what you'll want.\n\n     toString (fromInt 27) == \"27\"\n     show (fromInt 27) == \"(Int53 27.0)\"\n","title":"toString","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Int53"],"Int53"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}},"sourceSpan":{"start":[280,1],"name":"/Users/rgrempel/projects/purescript/purescript-int-53/src/Data/Int53.purs","end":[280,28]}},{"children":[],"comments":"Convert a `Number` to an `Int53`, by taking the closest integer equal to or\ngreater than the argument. Values outside the `Int53` range are clamped.\n\n    ceil 27.1 == fromInt 28\n    ceil 27.9 == fromInt 28\n    ceil (-27.1) == fromInt (-27)\n    ceil (-27.9) == fromInt (-27)\n    ceil (1.0e65) == top\n    ceil (-1.0e65) == bottom\n","title":"ceil","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]},{"tag":"TypeConstructor","contents":[["Data","Int53"],"Int53"]}]}},"sourceSpan":{"start":[217,1],"name":"/Users/rgrempel/projects/purescript/purescript-int-53/src/Data/Int53.purs","end":[217,24]}},{"children":[],"comments":"Convert a `Number` to an `Int53`, by taking the closest integer equal to or\nless than the argument. Values outside the `Int53` range are clamped.\n\n    floor 27.1 == fromInt 27\n    floor 27.9 == fromInt 27\n    floor (-27.1) == fromInt (-28)\n    floor (-27.9) == fromInt (-28)\n    floor (1.0e65) == top\n    floor (-1.0e65) == bottom\n","title":"floor","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]},{"tag":"TypeConstructor","contents":[["Data","Int53"],"Int53"]}]}},"sourceSpan":{"start":[204,1],"name":"/Users/rgrempel/projects/purescript/purescript-int-53/src/Data/Int53.purs","end":[204,25]}},{"children":[],"comments":"Convert a `Number` to an `Int53`, by taking the nearest integer to the\nargument. Values outside the `Int53` range are clamped.\n\n    round 27.1 == fromInt 27\n    round 27.9 == fromInt 28\n    round (-27.1) == fromInt (-27)\n    round (-27.9) == fromInt (-28)\n    round (1.0e65) == top\n    round (-1.0e65) == bottom\n","title":"round","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]},{"tag":"TypeConstructor","contents":[["Data","Int53"],"Int53"]}]}},"sourceSpan":{"start":[230,1],"name":"/Users/rgrempel/projects/purescript/purescript-int-53/src/Data/Int53.purs","end":[230,25]}},{"children":[],"comments":"Convert a `Number` to an `Int53`, by rounding towards zero.\nValues outside the `Int53` range are clamped.\n\n    truncate 27.1 == fromInt 27\n    truncate 27.9 == fromInt 27\n    truncate (-27.1) == fromInt (-27)\n    truncate (-27.9) == fromInt (-27)\n    truncate (1.0e65) == top\n    truncate (-1.0e65) == bottom\n","title":"truncate","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]},{"tag":"TypeConstructor","contents":[["Data","Int53"],"Int53"]}]}},"sourceSpan":{"start":[191,1],"name":"/Users/rgrempel/projects/purescript/purescript-int-53/src/Data/Int53.purs","end":[191,28]}},{"children":[],"comments":"Returns whether an `Int53` is an even number.\n\n    even (fromInt 0) == true\n    even (fromInt 1) == false\n","title":"even","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Int53"],"Int53"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}},"sourceSpan":{"start":[308,1],"name":"/Users/rgrempel/projects/purescript/purescript-int-53/src/Data/Int53.purs","end":[308,25]}},{"children":[],"comments":"The negation of `even`.\n\n    odd (fromInt 0) == false\n    odd (fromInt 1) == true\n","title":"odd","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Int53"],"Int53"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}},"sourceSpan":{"start":[316,1],"name":"/Users/rgrempel/projects/purescript/purescript-int-53/src/Data/Int53.purs","end":[316,24]}},{"children":[],"comments":"Raises the first argument to the power of the second argument (the exponent).\n\nIf the exponent is less than 0, then `pow` returns 0.\n\n    pow (fromInt 2) (fromInt 3) == (fromInt 8)\n    pow (fromInt 2) (fromInt 0) == (fromInt 1)\n    pow (fromInt 0) (fromInt 0) == (fromInt 1)\n    pow (fromInt 2) (fromInt (-2)) == (fromInt 0)\n","title":"pow","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Int53"],"Int53"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Int53"],"Int53"]}]},{"tag":"TypeConstructor","contents":[["Data","Int53"],"Int53"]}]}]}},"sourceSpan":{"start":[328,1],"name":"/Users/rgrempel/projects/purescript/purescript-int-53/src/Data/Int53.purs","end":[328,31]}},{"children":[],"comments":"Takes the absolute value.\n\n    abs (fromInt 2) == (fromInt 2)\n    abs (fromInt (-2)) == (fromInt 2)\n    abs (fromInt 0) == (fromInt 0)\n","title":"abs","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Int53"],"Int53"]}]},{"tag":"TypeConstructor","contents":[["Data","Int53"],"Int53"]}]}},"sourceSpan":{"start":[340,1],"name":"/Users/rgrempel/projects/purescript/purescript-int-53/src/Data/Int53.purs","end":[340,22]}}]}],"resolvedDependencies":{"purescript-free":"5.1.0","purescript-proxy":"3.0.0","purescript-exceptions":"4.0.0","purescript-newtype":"3.0.0","purescript-effect":"2.0.0","purescript-ordered-collections":"1.4.0","purescript-quickcheck-laws":"4.0.0","purescript-control":"4.1.0","purescript-console":"4.1.0","purescript-either":"4.0.0","purescript-arrays":"5.1.0","purescript-maybe":"4.0.0","purescript-type-equality":"3.0.0","purescript-js-timers":"4.0.1","purescript-exists":"4.0.0","purescript-distributive":"4.0.0","purescript-unfoldable":"4.0.0","purescript-invariant":"4.1.0","purescript-lcg":"2.0.0","purescript-lazy":"4.0.0","purescript-aff":"5.0.2","purescript-foldable-traversable":"4.1.0","purescript-tailrec":"4.0.0","purescript-avar":"3.0.0","purescript-gen":"2.1.0","purescript-typelevel-prelude":"3.0.0","purescript-functors":"3.1.0","purescript-prelude":"4.1.0","purescript-st":"4.0.0","purescript-bifunctors":"4.0.0","purescript-nonempty":"5.0.0","purescript-contravariant":"4.0.0","purescript-unsafe-coerce":"4.0.0","purescript-refs":"4.1.0","purescript-integers":"4.0.0","purescript-test-unit":"14.0.0","purescript-orders":"4.0.0","purescript-const":"4.0.0","purescript-record":"1.0.0","purescript-transformers":"4.1.0","purescript-globals":"4.0.0","purescript-generics-rep":"6.1.0","purescript-math":"2.1.1","purescript-enums":"4.0.0","purescript-catenable-lists":"5.0.0","purescript-random":"4.0.0","purescript-parallel":"4.0.0","purescript-tuples":"5.0.0","purescript-partial":"2.0.0","purescript-quickcheck":"5.0.0","purescript-strings":"4.0.0","purescript-identity":"4.0.0","purescript-lists":"5.3.0","purescript-datetime":"4.0.0","purescript-functions":"4.0.0"},"version":"4.0.0","github":["rgrempel","purescript-int-53"],"versionTag":"v4.0.0","moduleMap":{"Data.BooleanAlgebra":"purescript-prelude","Test.QuickCheck.Laws.Control.Semigroupoid":"purescript-quickcheck-laws","Data.Decide":"purescript-contravariant","Type.Data.Boolean":"purescript-typelevel-prelude","Data.Ring":"purescript-prelude","Record.ST":"purescript-record","Control.Monad.Trans.Class":"purescript-transformers","Record.Unsafe.Union":"purescript-record","Data.Functor.Product":"purescript-functors","Data.NonEmpty":"purescript-nonempty","Effect.Uncurried":"purescript-effect","Data.Char.Gen":"purescript-strings","Data.String.NonEmpty":"purescript-strings","Effect":"purescript-effect","Test.QuickCheck.Laws.Data.Foldable":"purescript-quickcheck-laws","Data.Traversable.Accum.Internal":"purescript-foldable-traversable","Test.QuickCheck.Laws.Data.Bounded":"purescript-quickcheck-laws","Data.Enum.Gen":"purescript-enums","Control.Comonad.Env":"purescript-transformers","Control.Comonad.Traced.Class":"purescript-transformers","Data.Functor.Compose":"purescript-functors","Type.Row.Homogeneous":"purescript-typelevel-prelude","Data.Int.Bits":"purescript-integers","Data.DateTime":"purescript-datetime","Data.Bifunctor.Flip":"purescript-bifunctors","Data.String.CodePoints":"purescript-strings","Data.Ord":"purescript-prelude","Test.QuickCheck.Laws.Control.Apply":"purescript-quickcheck-laws","Control.Monad.Gen":"purescript-gen","Control.Monad.Free.Class":"purescript-free","Test.QuickCheck.Laws.Control.Alt":"purescript-quickcheck-laws","Test.QuickCheck.Laws.Data.Monoid":"purescript-quickcheck-laws","Type.Data.Row":"purescript-prelude","Data.Date":"purescript-datetime","Control.Comonad.Cofree.Class":"purescript-free","Test.QuickCheck.Laws.Data.HeytingAlgebra":"purescript-quickcheck-laws","Test.QuickCheck.Laws.Data":"purescript-quickcheck-laws","Data.Monoid.Dual":"purescript-prelude","Data.Generic.Rep.Ring":"purescript-generics-rep","Control.Monad.Rec.Class":"purescript-tailrec","Test.QuickCheck.Laws.Control.Bind":"purescript-quickcheck-laws","Data.Time.Component":"purescript-datetime","Data.Bitraversable":"purescript-foldable-traversable","Record.Builder":"purescript-record","Test.Unit.Assert":"purescript-test-unit","Data.Boolean":"purescript-prelude","Data.Map":"purescript-ordered-collections","Control.Biapplicative":"purescript-bifunctors","Test.QuickCheck.Laws.Control.Monad":"purescript-quickcheck-laws","Data.CatList":"purescript-catenable-lists","Effect.Exception.Unsafe":"purescript-exceptions","Control.Parallel.Class":"purescript-parallel","Data.Array.NonEmpty.Internal":"purescript-arrays","Type.Proxy":"purescript-proxy","Test.Unit.Output.Fancy":"purescript-test-unit","Data.Coyoneda":"purescript-free","Effect.Aff.Compat":"purescript-aff","Data.Array.ST.Iterator":"purescript-arrays","Data.DateTime.Gen":"purescript-datetime","Test.QuickCheck.Laws.Data.Ord":"purescript-quickcheck-laws","Data.String.Pattern":"purescript-strings","Data.Bounded":"purescript-prelude","Test.QuickCheck.Laws.Control":"purescript-quickcheck-laws","Control.Monad.State.Trans":"purescript-transformers","Data.TraversableWithIndex":"purescript-foldable-traversable","Data.Int":"purescript-integers","Data.Show":"purescript-prelude","Random.LCG":"purescript-lcg","Data.Bifunctor.Clown":"purescript-bifunctors","Control.Monad.Writer.Trans":"purescript-transformers","Data.Foldable":"purescript-foldable-traversable","Data.Divide":"purescript-contravariant","Control.Comonad.Store.Class":"purescript-transformers","Data.Enum":"purescript-enums","Control.Monad.Trampoline":"purescript-free","Control.Apply":"purescript-prelude","Data.Functor.Contravariant":"purescript-contravariant","Data.Tuple.Nested":"purescript-tuples","Data.Generic.Rep.Semigroup":"purescript-generics-rep","Control.Monad":"purescript-prelude","Data.Lazy":"purescript-lazy","Data.Monoid":"purescript-prelude","Control.Monad.List.Trans":"purescript-transformers","Control.Monad.RWS":"purescript-transformers","Data.String.Common":"purescript-strings","Data.Maybe.First":"purescript-maybe","Control.Bind":"purescript-prelude","Effect.Aff.Class":"purescript-aff","Data.Monoid.Additive":"purescript-prelude","Data.Symbol":"purescript-prelude","Data.Map.Gen":"purescript-ordered-collections","Data.String.Regex":"purescript-strings","Data.HeytingAlgebra":"purescript-prelude","Control.Alt":"purescript-control","Data.Date.Gen":"purescript-datetime","Control.Monad.Maybe.Trans":"purescript-transformers","Control.Monad.Cont":"purescript-transformers","Control.Monad.ST.Internal":"purescript-st","Type.Data.RowList":"purescript-prelude","Data.Time.Component.Gen":"purescript-datetime","Effect.Ref":"purescript-refs","Data.Either.Inject":"purescript-either","Data.List.ZipList":"purescript-lists","Data.Ord.Min":"purescript-orders","Data.Functor.Coproduct.Nested":"purescript-functors","Data.Ord.Unsafe":"purescript-prelude","Data.Semigroup":"purescript-prelude","Test.QuickCheck.Laws.Data.Functor":"purescript-quickcheck-laws","Test.QuickCheck.Laws.Control.Category":"purescript-quickcheck-laws","Data.Array.NonEmpty":"purescript-arrays","Control.Monad.Reader":"purescript-transformers","Test.Unit.QuickCheck":"purescript-test-unit","Data.Const":"purescript-const","Data.Generic.Rep.Enum":"purescript-generics-rep","Data.Generic.Rep.Bounded":"purescript-generics-rep","Control.Comonad.Traced.Trans":"purescript-transformers","Data.Ord.Down":"purescript-orders","Data.Array.ST.Partial":"purescript-arrays","Data.Generic.Rep.Show":"purescript-generics-rep","Effect.Unsafe":"purescript-effect","Type.Data.Ordering":"purescript-typelevel-prelude","Data.Tuple":"purescript-tuples","Data.Semigroup.Foldable":"purescript-foldable-traversable","Control.Biapply":"purescript-bifunctors","Data.Distributive":"purescript-distributive","Effect.Exception":"purescript-exceptions","Type.Equality":"purescript-type-equality","Control.Alternative":"purescript-control","Data.Semiring":"purescript-prelude","Data.Exists":"purescript-exists","Effect.Console":"purescript-console","Data.Traversable.Accum":"purescript-foldable-traversable","Data.CommutativeRing":"purescript-prelude","Data.NaturalTransformation":"purescript-prelude","Data.Monoid.Conj":"purescript-prelude","Test.QuickCheck.Laws.Data.EuclideanRing":"purescript-quickcheck-laws","Data.Yoneda":"purescript-free","Test.QuickCheck.Laws.Data.Field":"purescript-quickcheck-laws","Data.Functor.App":"purescript-functors","Effect.Timer":"purescript-js-timers","Data.Unfoldable":"purescript-unfoldable","Test.QuickCheck.Laws.Control.Comonad":"purescript-quickcheck-laws","Control.Comonad.Store.Trans":"purescript-transformers","Control.Monad.ST":"purescript-st","Control.Monad.State.Class":"purescript-transformers","Data.List.Types":"purescript-lists","Data.String.NonEmpty.CodeUnits":"purescript-strings","Data.Functor":"purescript-prelude","Unsafe.Coerce":"purescript-unsafe-coerce","Control.Monad.Writer.Class":"purescript-transformers","Data.Generic.Rep.Ord":"purescript-generics-rep","Test.QuickCheck.Laws.Data.Semigroup":"purescript-quickcheck-laws","Data.CatQueue":"purescript-catenable-lists","Control.Monad.Except":"purescript-transformers","Data.Interval":"purescript-datetime","Data.List.Lazy.Types":"purescript-lists","Control.Category":"purescript-prelude","Test.QuickCheck.Arbitrary":"purescript-quickcheck","Data.Interval.Duration":"purescript-datetime","Control.Monad.Gen.Common":"purescript-gen","Control.Monad.RWS.Trans":"purescript-transformers","Test.QuickCheck.Laws":"purescript-quickcheck-laws","Test.QuickCheck.Laws.Data.CommutativeRing":"purescript-quickcheck-laws","Control.Monad.Cont.Trans":"purescript-transformers","Data.Maybe":"purescript-maybe","Type.Row":"purescript-typelevel-prelude","Data.String.Regex.Unsafe":"purescript-strings","Test.QuickCheck.Laws.Control.Alternative":"purescript-quickcheck-laws","Data.Set":"purescript-ordered-collections","Control.Comonad":"purescript-control","Data.Function":"purescript-prelude","Data.List":"purescript-lists","Test.QuickCheck.Laws.Data.Semiring":"purescript-quickcheck-laws","Data.Field":"purescript-prelude","Test.QuickCheck.Laws.Data.BoundedEnum":"purescript-quickcheck-laws","Data.List.Lazy":"purescript-lists","Data.Generic.Rep.Eq":"purescript-generics-rep","Test.Unit.Output.TAP":"purescript-test-unit","Data.EuclideanRing":"purescript-prelude","Data.Semigroup.Last":"purescript-prelude","Data.Semigroup.First":"purescript-prelude","Data.Functor.Invariant":"purescript-invariant","Control.Comonad.Traced":"purescript-transformers","Global.Unsafe":"purescript-globals","Data.Comparison":"purescript-contravariant","Data.String.Unsafe":"purescript-strings","Test.QuickCheck.Laws.Data.DivisionRing":"purescript-quickcheck-laws","Prelude":"purescript-prelude","Effect.Class":"purescript-effect","Data.Predicate":"purescript-contravariant","Partial.Unsafe":"purescript-partial","Data.Array":"purescript-arrays","Data.Bifunctor.Product":"purescript-bifunctors","Control.Extend":"purescript-control","Data.Unfoldable1":"purescript-unfoldable","Test.Unit.Console":"purescript-test-unit","Control.Lazy":"purescript-control","Data.Function.Uncurried":"purescript-functions","Control.Monad.Reader.Trans":"purescript-transformers","Data.Functor.Product.Nested":"purescript-functors","Test.Unit.Output.Simple":"purescript-test-unit","Control.Comonad.Env.Class":"purescript-transformers","Effect.Aff.AVar":"purescript-avar","Data.Interval.Duration.Iso":"purescript-datetime","Data.Eq":"purescript-prelude","Data.Either.Nested":"purescript-either","Control.Comonad.Cofree":"purescript-free","Data.Newtype":"purescript-newtype","Data.Semigroup.Traversable":"purescript-foldable-traversable","Data.Bifunctor":"purescript-bifunctors","Effect.Random":"purescript-random","Data.Monoid.Disj":"purescript-prelude","Control.Monad.Gen.Class":"purescript-gen","Data.Array.Partial":"purescript-arrays","Data.String.CaseInsensitive":"purescript-strings","Control.Monad.Free":"purescript-free","Control.Parallel":"purescript-parallel","Control.MonadPlus":"purescript-control","Data.Void":"purescript-prelude","Control.MonadZero":"purescript-control","Data.DateTime.Instant":"purescript-datetime","Data.Ord.Max":"purescript-orders","Effect.AVar":"purescript-avar","Control.Comonad.Store":"purescript-transformers","Control.Monad.Except.Trans":"purescript-transformers","Data.String.CodeUnits":"purescript-strings","Test.QuickCheck.Laws.Control.Extend":"purescript-quickcheck-laws","Data.Bifunctor.Joker":"purescript-bifunctors","Data.FunctorWithIndex":"purescript-foldable-traversable","Data.Divisible":"purescript-contravariant","Data.DivisionRing":"purescript-prelude","Record":"purescript-record","Data.Bifunctor.Wrap":"purescript-bifunctors","Test.QuickCheck.Laws.Control.MonadPlus":"purescript-quickcheck-laws","Data.Equivalence":"purescript-contravariant","Data.Maybe.Last":"purescript-maybe","Data.Unit":"purescript-prelude","Test.QuickCheck.Laws.Control.MonadZero":"purescript-quickcheck-laws","Data.List.NonEmpty":"purescript-lists","Data.Generic.Rep.Semiring":"purescript-generics-rep","Data.List.Lazy.NonEmpty":"purescript-lists","Data.Ordering":"purescript-prelude","Data.Functor.Coproduct":"purescript-functors","Control.Monad.Cont.Class":"purescript-transformers","Effect.Aff":"purescript-aff","Data.Identity":"purescript-identity","Test.QuickCheck.Laws.Data.Eq":"purescript-quickcheck-laws","Math":"purescript-math","Data.Set.NonEmpty":"purescript-ordered-collections","Control.Comonad.Trans.Class":"purescript-transformers","Data.String":"purescript-strings","Control.Plus":"purescript-control","Test.QuickCheck":"purescript-quickcheck","Test.Unit.Main":"purescript-test-unit","Data.Map.Internal":"purescript-ordered-collections","Data.Time":"purescript-datetime","Data.Time.Duration":"purescript-datetime","Data.Date.Component":"purescript-datetime","Partial":"purescript-partial","Control.Comonad.Env.Trans":"purescript-transformers","Test.QuickCheck.Laws.Control.Applicative":"purescript-quickcheck-laws","Global":"purescript-globals","Control.Monad.Reader.Class":"purescript-transformers","Data.String.NonEmpty.CodePoints":"purescript-strings","Data.Decidable":"purescript-contravariant","Test.QuickCheck.Laws.Data.BooleanAlgebra":"purescript-quickcheck-laws","Data.String.NonEmpty.Internal":"purescript-strings","Data.Monoid.Multiplicative":"purescript-prelude","Data.String.NonEmpty.CaseInsensitive":"purescript-strings","Type.Data.Symbol":"purescript-typelevel-prelude","Data.Array.ST":"purescript-arrays","Test.QuickCheck.Laws.Data.Ring":"purescript-quickcheck-laws","Control.Monad.Error.Class":"purescript-transformers","Test.Unit":"purescript-test-unit","Data.Generic.Rep.HeytingAlgebra":"purescript-generics-rep","Data.Generic.Rep.Monoid":"purescript-generics-rep","Control.Semigroupoid":"purescript-prelude","Data.Monoid.Alternate":"purescript-control","Data.Char":"purescript-strings","Data.Generic.Rep":"purescript-generics-rep","Effect.Class.Console":"purescript-console","Data.Bifunctor.Join":"purescript-bifunctors","Data.Bifoldable":"purescript-foldable-traversable","Control.Monad.ST.Ref":"purescript-st","Data.Monoid.Endo":"purescript-prelude","Control.Monad.State":"purescript-transformers","Data.List.Partial":"purescript-lists","Data.String.Regex.Flags":"purescript-strings","Test.QuickCheck.Laws.Control.Plus":"purescript-quickcheck-laws","Data.Either":"purescript-either","Data.Time.Duration.Gen":"purescript-datetime","Data.Date.Component.Gen":"purescript-datetime","Type.Prelude":"purescript-typelevel-prelude","Control.Applicative":"purescript-prelude","Data.FoldableWithIndex":"purescript-foldable-traversable","Data.Op":"purescript-contravariant","Record.Unsafe":"purescript-prelude","Test.QuickCheck.Gen":"purescript-quickcheck","Control.Monad.Writer":"purescript-transformers","Data.Functor.Coproduct.Inject":"purescript-functors","Data.Time.Gen":"purescript-datetime","Data.Traversable":"purescript-foldable-traversable","Data.String.Gen":"purescript-strings"},"compilerVersion":"0.12.0"}