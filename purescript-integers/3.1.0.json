{"uploader":"garyb","packageMeta":{"homepage":"https://github.com/purescript/purescript-integers","repository":{"url":"git://github.com/purescript/purescript-integers.git","type":"git"},"ignore":["**/.*","bower_components","node_modules","output","test","bower.json","package.json"],"devDependencies":{"purescript-console":"^3.0.0","purescript-assert":"^3.0.0"},"dependencies":{"purescript-maybe":"^3.0.0","purescript-globals":"^3.0.0","purescript-math":"^2.0.0","purescript-partial":"^1.2.0"},"name":"purescript-integers","license":["MIT"],"description":"Functions and bitwise operators for the Int numeric type"},"tagTime":"2017-06-30T14:58:57+0000","modules":[{"reExports":[],"name":"Data.Int","comments":null,"declarations":[{"children":[],"comments":"Creates an `Int` from a `Number` value. The number must already be an\ninteger and fall within the valid range of values for the `Int` type\notherwise `Nothing` is returned.\n","title":"fromNumber","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}]}},"sourceSpan":{"start":[35,1],"name":"D:\\Home\\GitHub\\purescript-integers\\src\\Data\\Int.purs","end":[35,34]}},{"children":[],"comments":"Convert a `Number` to an `Int`, by taking the closest integer equal to or\nless than the argument. Values outside the `Int` range are clamped, `NaN`\nand `Infinity` values return 0.\n","title":"floor","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}},"sourceSpan":{"start":[47,1],"name":"D:\\Home\\GitHub\\purescript-integers\\src\\Data\\Int.purs","end":[47,23]}},{"children":[],"comments":"Convert a `Number` to an `Int`, by taking the closest integer equal to or\ngreater than the argument. Values outside the `Int` range are clamped,\n`NaN` and `Infinity` values return 0.\n","title":"ceil","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}},"sourceSpan":{"start":[53,1],"name":"D:\\Home\\GitHub\\purescript-integers\\src\\Data\\Int.purs","end":[53,22]}},{"children":[],"comments":"Convert a `Number` to an `Int`, by taking the nearest integer to the\nargument. Values outside the `Int` range are clamped, `NaN` and `Infinity`\nvalues return 0.\n","title":"round","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}},"sourceSpan":{"start":[59,1],"name":"D:\\Home\\GitHub\\purescript-integers\\src\\Data\\Int.purs","end":[59,23]}},{"children":[],"comments":"Converts an `Int` value back into a `Number`. Any `Int` is a valid `Number`\nso there is no loss of precision with this function.\n","title":"toNumber","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]}},"sourceSpan":{"start":[74,1],"name":"D:\\Home\\GitHub\\purescript-integers\\src\\Data\\Int.purs","end":[74,41]}},{"children":[],"comments":"Reads an `Int` from a `String` value. The number must parse as an integer\nand fall within the valid range of values for the `Int` type, otherwise\n`Nothing` is returned.\n","title":"fromString","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}]}},"sourceSpan":{"start":[79,1],"name":"D:\\Home\\GitHub\\purescript-integers\\src\\Data\\Int.purs","end":[79,34]}},{"children":[{"comments":null,"title":"Even","info":{"arguments":[],"declType":"dataConstructor"},"sourceSpan":null},{"comments":null,"title":"Odd","info":{"arguments":[],"declType":"dataConstructor"},"sourceSpan":null},{"comments":null,"title":"eqParity","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Eq"],"Eq"]},{"tag":"TypeConstructor","contents":[["Data","Int"],"Parity"]}]}},"sourceSpan":{"start":[85,1],"name":"D:\\Home\\GitHub\\purescript-integers\\src\\Data\\Int.purs","end":[85,38]}},{"comments":null,"title":"ordParity","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Ord"],"Ord"]},{"tag":"TypeConstructor","contents":[["Data","Int"],"Parity"]}]}},"sourceSpan":{"start":[86,1],"name":"D:\\Home\\GitHub\\purescript-integers\\src\\Data\\Int.purs","end":[86,40]}},{"comments":null,"title":"showParity","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Show"],"Show"]},{"tag":"TypeConstructor","contents":[["Data","Int"],"Parity"]}]}},"sourceSpan":{"start":[88,1],"name":"D:\\Home\\GitHub\\purescript-integers\\src\\Data\\Int.purs","end":[92,1]}},{"comments":null,"title":"boundedParity","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Bounded"],"Bounded"]},{"tag":"TypeConstructor","contents":[["Data","Int"],"Parity"]}]}},"sourceSpan":{"start":[92,1],"name":"D:\\Home\\GitHub\\purescript-integers\\src\\Data\\Int.purs","end":[94,12]}}],"comments":"A type for describing whether an integer is even or odd.\n","title":"Parity","info":{"declType":"data","dataDeclType":"data","typeArguments":[]},"sourceSpan":{"start":[83,1],"name":"D:\\Home\\GitHub\\purescript-integers\\src\\Data\\Int.purs","end":[83,25]}},{"children":[],"comments":"Returns whether an `Int` is `Even` or `Odd`.\n\n``` purescript\nparity 0 == Even\nparity 1 == Odd\n```\n","title":"parity","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeConstructor","contents":[["Data","Int"],"Parity"]}]}},"sourceSpan":{"start":[102,1],"name":"D:\\Home\\GitHub\\purescript-integers\\src\\Data\\Int.purs","end":[102,24]}},{"children":[],"comments":"Returns whether an `Int` is an even number.\n\n``` purescript\neven 0 == true\neven 1 == false\n```\n","title":"even","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}},"sourceSpan":{"start":[111,1],"name":"D:\\Home\\GitHub\\purescript-integers\\src\\Data\\Int.purs","end":[111,23]}},{"children":[],"comments":"The negation of `even`.\n\n``` purescript\nodd 0 == false\nodd 1 == true\n```\n","title":"odd","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}},"sourceSpan":{"start":[120,1],"name":"D:\\Home\\GitHub\\purescript-integers\\src\\Data\\Int.purs","end":[120,22]}},{"children":[],"comments":"The number of unique digits (including zero) used to represent integers in\na specific base.\n","title":"Radix","info":{"declType":"data","dataDeclType":"newtype","typeArguments":[]},"sourceSpan":{"start":[125,1],"name":"D:\\Home\\GitHub\\purescript-integers\\src\\Data\\Int.purs","end":[125,26]}},{"children":[],"comments":"The base-2 system.\n","title":"binary","info":{"declType":"value","type":{"tag":"TypeConstructor","contents":[["Data","Int"],"Radix"]}},"sourceSpan":{"start":[128,1],"name":"D:\\Home\\GitHub\\purescript-integers\\src\\Data\\Int.purs","end":[128,16]}},{"children":[],"comments":"The base-8 system.\n","title":"octal","info":{"declType":"value","type":{"tag":"TypeConstructor","contents":[["Data","Int"],"Radix"]}},"sourceSpan":{"start":[132,1],"name":"D:\\Home\\GitHub\\purescript-integers\\src\\Data\\Int.purs","end":[132,15]}},{"children":[],"comments":"The base-10 system.\n","title":"decimal","info":{"declType":"value","type":{"tag":"TypeConstructor","contents":[["Data","Int"],"Radix"]}},"sourceSpan":{"start":[136,1],"name":"D:\\Home\\GitHub\\purescript-integers\\src\\Data\\Int.purs","end":[136,17]}},{"children":[],"comments":"The base-16 system.\n","title":"hexadecimal","info":{"declType":"value","type":{"tag":"TypeConstructor","contents":[["Data","Int"],"Radix"]}},"sourceSpan":{"start":[140,1],"name":"D:\\Home\\GitHub\\purescript-integers\\src\\Data\\Int.purs","end":[140,21]}},{"children":[],"comments":"The base-36 system.\n","title":"base36","info":{"declType":"value","type":{"tag":"TypeConstructor","contents":[["Data","Int"],"Radix"]}},"sourceSpan":{"start":[144,1],"name":"D:\\Home\\GitHub\\purescript-integers\\src\\Data\\Int.purs","end":[144,16]}},{"children":[],"comments":"Create a `Radix` from a number between 2 and 36.\n","title":"radix","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeConstructor","contents":[["Data","Int"],"Radix"]}]}]}},"sourceSpan":{"start":[148,1],"name":"D:\\Home\\GitHub\\purescript-integers\\src\\Data\\Int.purs","end":[148,28]}},{"children":[],"comments":"Like `fromString`, but the integer can be specified in a different base.\n\nExample:\n``` purs\nfromStringAs binary      \"100\" == Just 4\nfromStringAs hexadecimal \"ff\"  == Just 255\n```\n","title":"fromStringAs","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Int"],"Radix"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}]}]}},"sourceSpan":{"start":[159,1],"name":"D:\\Home\\GitHub\\purescript-integers\\src\\Data\\Int.purs","end":[159,45]}},{"children":[],"comments":"Raise an Int to the power of another Int.\n","title":"pow","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}]}},"sourceSpan":{"start":[163,1],"name":"D:\\Home\\GitHub\\purescript-integers\\src\\Data\\Int.purs","end":[163,40]}},{"children":[],"comments":null,"title":"toStringAs","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Int"],"Radix"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}]}},"sourceSpan":{"start":[172,1],"name":"D:\\Home\\GitHub\\purescript-integers\\src\\Data\\Int.purs","end":[172,46]}}]},{"reExports":[],"name":"Data.Int.Bits","comments":"This module defines bitwise operations for the `Int` type.\n","declarations":[{"children":[],"comments":"Bitwise AND.\n","title":"and","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}]}},"sourceSpan":{"start":[13,1],"name":"D:\\Home\\GitHub\\purescript-integers\\src\\Data\\Int\\Bits.purs","end":[13,40]}},{"children":[],"comments":null,"title":"(.&.)","info":{"declType":"alias","alias":[["Data","Int","Bits"],{"Right":{"Left":{"Ident":"and"}}}],"fixity":{"associativity":"infixl","precedence":10}},"sourceSpan":{"start":[15,1],"name":"D:\\Home\\GitHub\\purescript-integers\\src\\Data\\Int\\Bits.purs","end":[15,21]}},{"children":[],"comments":"Bitwise OR.\n","title":"or","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}]}},"sourceSpan":{"start":[18,1],"name":"D:\\Home\\GitHub\\purescript-integers\\src\\Data\\Int\\Bits.purs","end":[18,39]}},{"children":[],"comments":null,"title":"(.|.)","info":{"declType":"alias","alias":[["Data","Int","Bits"],{"Right":{"Left":{"Ident":"or"}}}],"fixity":{"associativity":"infixl","precedence":10}},"sourceSpan":{"start":[20,1],"name":"D:\\Home\\GitHub\\purescript-integers\\src\\Data\\Int\\Bits.purs","end":[20,20]}},{"children":[],"comments":"Bitwise XOR.\n","title":"xor","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}]}},"sourceSpan":{"start":[23,1],"name":"D:\\Home\\GitHub\\purescript-integers\\src\\Data\\Int\\Bits.purs","end":[23,40]}},{"children":[],"comments":null,"title":"(.^.)","info":{"declType":"alias","alias":[["Data","Int","Bits"],{"Right":{"Left":{"Ident":"xor"}}}],"fixity":{"associativity":"infixl","precedence":10}},"sourceSpan":{"start":[25,1],"name":"D:\\Home\\GitHub\\purescript-integers\\src\\Data\\Int\\Bits.purs","end":[25,21]}},{"children":[],"comments":"Bitwise shift left.\n","title":"shl","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}]}},"sourceSpan":{"start":[28,1],"name":"D:\\Home\\GitHub\\purescript-integers\\src\\Data\\Int\\Bits.purs","end":[28,40]}},{"children":[],"comments":"Bitwise shift right.\n","title":"shr","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}]}},"sourceSpan":{"start":[31,1],"name":"D:\\Home\\GitHub\\purescript-integers\\src\\Data\\Int\\Bits.purs","end":[31,40]}},{"children":[],"comments":"Bitwise zero-fill shift right.\n","title":"zshr","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}]}},"sourceSpan":{"start":[34,1],"name":"D:\\Home\\GitHub\\purescript-integers\\src\\Data\\Int\\Bits.purs","end":[34,41]}},{"children":[],"comments":"Bitwise NOT.\n","title":"complement","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}},"sourceSpan":{"start":[37,1],"name":"D:\\Home\\GitHub\\purescript-integers\\src\\Data\\Int\\Bits.purs","end":[37,37]}}]}],"resolvedDependencies":{"purescript-newtype":"2.0.0","purescript-control":"3.3.0","purescript-console":"3.0.0","purescript-maybe":"3.0.0","purescript-invariant":"3.0.0","purescript-monoid":"3.0.0","purescript-prelude":"3.1.0","purescript-assert":"3.0.0","purescript-eff":"3.1.0","purescript-globals":"3.0.0","purescript-math":"2.1.0","purescript-partial":"1.2.1"},"version":"3.1.0","github":["purescript","purescript-integers"],"versionTag":"v3.1.0","moduleMap":{"Data.BooleanAlgebra":"purescript-prelude","Data.Ring":"purescript-prelude","Control.Monad.Eff.Unsafe":"purescript-eff","Data.Ord":"purescript-prelude","Data.Monoid.Dual":"purescript-monoid","Data.Boolean":"purescript-prelude","Data.Bounded":"purescript-prelude","Data.Show":"purescript-prelude","Control.Apply":"purescript-prelude","Control.Monad":"purescript-prelude","Data.Monoid":"purescript-monoid","Control.Monad.Eff.Uncurried":"purescript-eff","Data.Maybe.First":"purescript-maybe","Control.Bind":"purescript-prelude","Data.Monoid.Additive":"purescript-monoid","Data.HeytingAlgebra":"purescript-prelude","Control.Alt":"purescript-control","Data.Ord.Unsafe":"purescript-prelude","Data.Semigroup":"purescript-prelude","Control.Monad.Eff":"purescript-eff","Control.Alternative":"purescript-control","Data.Semiring":"purescript-prelude","Data.CommutativeRing":"purescript-prelude","Data.NaturalTransformation":"purescript-prelude","Data.Monoid.Conj":"purescript-monoid","Data.Functor":"purescript-prelude","Control.Category":"purescript-prelude","Data.Maybe":"purescript-maybe","Control.Comonad":"purescript-control","Data.Function":"purescript-prelude","Data.Field":"purescript-prelude","Data.EuclideanRing":"purescript-prelude","Data.Functor.Invariant":"purescript-invariant","Global.Unsafe":"purescript-globals","Prelude":"purescript-prelude","Partial.Unsafe":"purescript-partial","Control.Extend":"purescript-control","Control.Lazy":"purescript-control","Data.Eq":"purescript-prelude","Data.Newtype":"purescript-newtype","Control.Monad.Eff.Console":"purescript-console","Test.Assert":"purescript-assert","Data.Monoid.Disj":"purescript-monoid","Control.MonadPlus":"purescript-control","Data.Void":"purescript-prelude","Control.MonadZero":"purescript-control","Data.DivisionRing":"purescript-prelude","Data.Maybe.Last":"purescript-maybe","Data.Unit":"purescript-prelude","Data.Ordering":"purescript-prelude","Math":"purescript-math","Control.Plus":"purescript-control","Control.Monad.Eff.Class":"purescript-eff","Partial":"purescript-partial","Global":"purescript-globals","Data.Monoid.Multiplicative":"purescript-monoid","Control.Semigroupoid":"purescript-prelude","Data.Monoid.Alternate":"purescript-monoid","Data.Monoid.Endo":"purescript-monoid","Control.Applicative":"purescript-prelude"},"compilerVersion":"0.11.4"}