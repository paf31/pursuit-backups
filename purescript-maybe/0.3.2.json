{"uploader":"hdgarrood","packageMeta":{"homepage":"https://github.com/purescript/purescript-maybe","repository":{"url":"git://github.com/purescript/purescript-maybe.git","type":"git"},"ignore":["**/.*","bower_components","node_modules","output","test","bower.json","gulpfile.js","package.json"],"dependencies":{"purescript-monoid":"^0.3.0"},"name":"purescript-maybe","keywords":["purescript"],"license":["MIT"],"description":"Optional values"},"modules":[{"reExports":[],"name":"Data.Maybe","comments":null,"declarations":[{"children":[{"comments":null,"title":"Nothing","info":{"arguments":[],"declType":"dataConstructor"},"sourceSpan":null},{"comments":null,"title":"Just","info":{"arguments":[{"tag":"TypeVar","contents":"a"}],"declType":"dataConstructor"},"sourceSpan":null},{"comments":"The `Functor` instance allows functions to transform the contents of a\n`Just` with the `<$>` operator:\n\n``` purescript\nf <$> Just x == Just (f x)\n```\n\n`Nothing` values are left untouched:\n\n``` purescript\nf <$> Nothing == Nothing\n```\n","title":"functorMaybe","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prelude"],"Functor"]},{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]}]}},"sourceSpan":{"start":[61,1],"name":"src/Data/Maybe.purs","end":[96,1]}},{"comments":"The `Apply` instance allows functions contained within a `Just` to\ntransform a value contained within a `Just` using the `apply` operator:\n\n``` purescript\nJust f <*> Just x == Just (f x)\n```\n\n`Nothing` values are left untouched:\n\n``` purescript\nJust f <*> Nothing == Nothing\nNothing <*> Just x == Nothing\n```\n\nCombining `Functor`'s `<$>` with `Apply`'s `<*>` can be used transform a\npure function to take `Maybe`-typed arguments so `f :: a -> b -> c`\nbecomes `f :: Maybe a -> Maybe b -> Maybe c`:\n\n``` purescript\nf <$> Just x <*> Just y == Just (f x y)\n```\n\nThe `Nothing`-preserving behaviour of both operators means the result of\nan expression like the above but where any one of the values is `Nothing`\nmeans the whole result becomes `Nothing` also:\n\n``` purescript\nf <$> Nothing <*> Just y == Nothing\nf <$> Just x <*> Nothing == Nothing\nf <$> Nothing <*> Nothing == Nothing\n```\n","title":"applyMaybe","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prelude"],"Apply"]},{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]}]}},"sourceSpan":{"start":[96,1],"name":"src/Data/Maybe.purs","end":[120,1]}},{"comments":"The `Applicative` instance enables lifting of values into `Maybe` with the\n`pure` or `return` function (`return` is an alias for `pure`):\n\n``` purescript\npure x :: Maybe _ == Just x\nreturn x :: Maybe _ == Just x\n```\n\nCombining `Functor`'s `<$>` with `Apply`'s `<*>` and `Applicative`'s\n`pure` can be used to pass a mixture of `Maybe` and non-`Maybe` typed\nvalues to a function that does not usually expect them, by using `pure`\nfor any value that is not already `Maybe` typed:\n\n``` purescript\nf <$> Just x <*> pure y == Just (f x y)\n```\n\nEven though `pure = Just` it is recommended to use `pure` in situations\nlike this as it allows the choice of `Applicative` to be changed later\nwithout having to go through and replace `Just` with a new constructor.\n","title":"applicativeMaybe","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prelude"],"Applicative"]},{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]}]}},"sourceSpan":{"start":[120,1],"name":"src/Data/Maybe.purs","end":[132,1]}},{"comments":"The `Alt` instance allows for a choice to be made between two `Maybe`\nvalues with the `<|>` operator, where the first `Just` encountered\nis taken.\n\n``` purescript\nJust x <|> Just y == Just x\nNothing <|> Just y == Just y\nNothing <|> Nothing == Nothing\n```\n","title":"altMaybe","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Alt"],"Alt"]},{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]}]}},"sourceSpan":{"start":[132,1],"name":"src/Data/Maybe.purs","end":[141,1]}},{"comments":"The `Plus` instance provides a default `Maybe` value:\n\n``` purescript\nempty :: Maybe _ == Nothing\n```\n","title":"plusMaybe","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Plus"],"Plus"]},{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]}]}},"sourceSpan":{"start":[141,1],"name":"src/Data/Maybe.purs","end":[146,1]}},{"comments":"The `Alternative` instance guarantees that there are both `Applicative` and\n`Plus` instances for `Maybe`.\n","title":"alternativeMaybe","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Alternative"],"Alternative"]},{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]}]}},"sourceSpan":{"start":[146,1],"name":"src/Data/Maybe.purs","end":[155,1]}},{"comments":"The `Bind` instance allows sequencing of `Maybe` values and functions that\nreturn a `Maybe` by using the `>>=` operator:\n\n``` purescript\nJust x >>= f = f x\nNothing >>= f = Nothing\n```\n","title":"bindMaybe","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prelude"],"Bind"]},{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]}]}},"sourceSpan":{"start":[155,1],"name":"src/Data/Maybe.purs","end":[174,1]}},{"comments":"The `Monad` instance guarantees that there are both `Applicative` and\n`Bind` instances for `Maybe`. This also enables the `do` syntactic sugar:\n\n``` purescript\ndo\n  x' <- x\n  y' <- y\n  pure (f x' y')\n```\n\nWhich is equivalent to:\n\n``` purescript\nx >>= (\\x' -> y >>= (\\y' -> pure (f x' y')))\n```\n","title":"monadMaybe","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prelude"],"Monad"]},{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]}]}},"sourceSpan":{"start":[174,1],"name":"src/Data/Maybe.purs","end":[178,1]}},{"comments":"The `MonadPlus` instance guarantees that there are both `Monad` and\n`Alternative` instances for `Maybe`.\n","title":"monadPlusMaybe","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","MonadPlus"],"MonadPlus"]},{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]}]}},"sourceSpan":{"start":[178,1],"name":"src/Data/Maybe.purs","end":[188,1]}},{"comments":"The `Extend` instance allows sequencing of `Maybe` values and functions\nthat accept a `Maybe a` and return a non-`Maybe` result using the\n`<<=` operator.\n\n``` purescript\nf <<= Nothing = Nothing\nf <<= Just x = Just (f x)\n```\n","title":"extendMaybe","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Extend"],"Extend"]},{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]}]}},"sourceSpan":{"start":[188,1],"name":"src/Data/Maybe.purs","end":[192,1]}},{"comments":null,"title":"invariantMaybe","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Functor","Invariant"],"Invariant"]},{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]}]}},"sourceSpan":{"start":[192,1],"name":"src/Data/Maybe.purs","end":[206,1]}},{"comments":"The `Semigroup` instance enables use of the operator `<>` on `Maybe` values\nwhenever there is a `Semigroup` instance for the type the `Maybe` contains.\nThe exact behaviour of `<>` depends on the \"inner\" `Semigroup` instance,\nbut generally captures the notion of appending or combining things.\n\n``` purescript\nJust x <> Just y = Just (x <> y)\nJust x <> Nothing = Just x\nNothing <> Just y = Just y\nNothing <> Nothing = Nothing\n```\n","title":"semigroupMaybe","info":{"declType":"instance","dependencies":[[[["Prelude"],"Semigroup"],[{"tag":"TypeVar","contents":"a"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prelude"],"Semigroup"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[206,1],"name":"src/Data/Maybe.purs","end":[211,1]}},{"comments":null,"title":"monoidMaybe","info":{"declType":"instance","dependencies":[[[["Prelude"],"Semigroup"],[{"tag":"TypeVar","contents":"a"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Monoid"],"Monoid"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[211,1],"name":"src/Data/Maybe.purs","end":[214,1]}},{"comments":null,"title":"semiringMaybe","info":{"declType":"instance","dependencies":[[[["Prelude"],"Semiring"],[{"tag":"TypeVar","contents":"a"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prelude"],"Semiring"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[214,1],"name":"src/Data/Maybe.purs","end":[220,1]}},{"comments":null,"title":"moduloSemiringMaybe","info":{"declType":"instance","dependencies":[[[["Prelude"],"ModuloSemiring"],[{"tag":"TypeVar","contents":"a"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prelude"],"ModuloSemiring"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[220,1],"name":"src/Data/Maybe.purs","end":[224,1]}},{"comments":null,"title":"ringMaybe","info":{"declType":"instance","dependencies":[[[["Prelude"],"Ring"],[{"tag":"TypeVar","contents":"a"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prelude"],"Ring"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[224,1],"name":"src/Data/Maybe.purs","end":[227,1]}},{"comments":null,"title":"divisionRingMaybe","info":{"declType":"instance","dependencies":[[[["Prelude"],"DivisionRing"],[{"tag":"TypeVar","contents":"a"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prelude"],"DivisionRing"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[227,1],"name":"src/Data/Maybe.purs","end":[229,1]}},{"comments":null,"title":"numMaybe","info":{"declType":"instance","dependencies":[[[["Prelude"],"Num"],[{"tag":"TypeVar","contents":"a"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prelude"],"Num"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[229,1],"name":"src/Data/Maybe.purs","end":[234,1]}},{"comments":"The `Eq` instance allows `Maybe` values to be checked for equality with\n`==` and inequality with `/=` whenever there is an `Eq` instance for the\ntype the `Maybe` contains.\n","title":"eqMaybe","info":{"declType":"instance","dependencies":[[[["Prelude"],"Eq"],[{"tag":"TypeVar","contents":"a"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prelude"],"Eq"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[234,1],"name":"src/Data/Maybe.purs","end":[244,1]}},{"comments":"The `Ord` instance allows `Maybe` values to be compared with\n`compare`, `>`, `>=`, `<` and `<=` whenever there is an `Ord` instance for\nthe type the `Maybe` contains.\n\n`Nothing` is considered to be less than any `Just` value.\n","title":"ordMaybe","info":{"declType":"instance","dependencies":[[[["Prelude"],"Ord"],[{"tag":"TypeVar","contents":"a"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prelude"],"Ord"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[244,1],"name":"src/Data/Maybe.purs","end":[250,1]}},{"comments":null,"title":"boundedMaybe","info":{"declType":"instance","dependencies":[[[["Prelude"],"Bounded"],[{"tag":"TypeVar","contents":"a"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prelude"],"Bounded"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[250,1],"name":"src/Data/Maybe.purs","end":[254,1]}},{"comments":null,"title":"boundedOrdMaybe","info":{"declType":"instance","dependencies":[[[["Prelude"],"BoundedOrd"],[{"tag":"TypeVar","contents":"a"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prelude"],"BoundedOrd"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[254,1],"name":"src/Data/Maybe.purs","end":[256,1]}},{"comments":null,"title":"booleanAlgebraMaybe","info":{"declType":"instance","dependencies":[[[["Prelude"],"BooleanAlgebra"],[{"tag":"TypeVar","contents":"a"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prelude"],"BooleanAlgebra"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[256,1],"name":"src/Data/Maybe.purs","end":[264,1]}},{"comments":"The `Show` instance allows `Maybe` values to be rendered as a string with\n`show` whenever there is an `Show` instance for the type the `Maybe`\ncontains.\n","title":"showMaybe","info":{"declType":"instance","dependencies":[[[["Prelude"],"Show"],[{"tag":"TypeVar","contents":"a"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prelude"],"Show"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[264,1],"name":"src/Data/Maybe.purs","end":[266,19]}}],"comments":"The `Maybe` type is used to represent optional values and can be seen as\nsomething like a type-safe `null`, where `Nothing` is `null` and `Just x`\nis the non-null value `x`.\n","title":"Maybe","fixity":null,"info":{"declType":"data","dataDeclType":"data","typeArguments":[["a",null]]},"sourceSpan":{"start":[16,1],"name":"src/Data/Maybe.purs","end":[26,1]}},{"children":[],"comments":"Takes a default value, a function, and a `Maybe` value. If the `Maybe`\nvalue is `Nothing` the default value is returned, otherwise the function\nis applied to the value inside the `Just` and the result is returned.\n\n``` purescript\nmaybe x f Nothing == x\nmaybe x f (Just y) == f y\n```\n","title":"maybe","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeVar","contents":"b"}]}]}]},null]},null]}},"sourceSpan":{"start":[26,1],"name":"src/Data/Maybe.purs","end":[27,1]}},{"children":[],"comments":"Takes a default value, and a `Maybe` value. If the `Maybe` value is\n`Nothing` the default value is returned, otherwise the value inside the\n`Just` is returned.\n\n``` purescript\nfromMaybe x Nothing == x\nfromMaybe x (Just y) == y\n```\n","title":"fromMaybe","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeVar","contents":"a"}]}]},null]}},"sourceSpan":{"start":[38,1],"name":"src/Data/Maybe.purs","end":[39,1]}},{"children":[],"comments":"Returns `true` when the `Maybe` value was constructed with `Just`.\n","title":"isJust","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]},null]}},"sourceSpan":{"start":[42,1],"name":"src/Data/Maybe.purs","end":[43,1]}},{"children":[],"comments":"Returns `true` when the `Maybe` value is `Nothing`.\n","title":"isNothing","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]},null]}},"sourceSpan":{"start":[46,1],"name":"src/Data/Maybe.purs","end":[47,1]}}]},{"reExports":[],"name":"Data.Maybe.First","comments":null,"declarations":[{"children":[{"comments":null,"title":"First","info":{"arguments":[{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeVar","contents":"a"}]}}],"declType":"dataConstructor"},"sourceSpan":null},{"comments":null,"title":"eqFirst","info":{"declType":"instance","dependencies":[[[["Prelude"],"Eq"],[{"tag":"TypeVar","contents":"a"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prelude"],"Eq"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe","First"],"First"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[24,1],"name":"src/Data/Maybe/First.purs","end":[27,1]}},{"comments":null,"title":"ordFirst","info":{"declType":"instance","dependencies":[[[["Prelude"],"Ord"],[{"tag":"TypeVar","contents":"a"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prelude"],"Ord"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe","First"],"First"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[27,1],"name":"src/Data/Maybe/First.purs","end":[30,1]}},{"comments":null,"title":"boundedFirst","info":{"declType":"instance","dependencies":[[[["Prelude"],"Bounded"],[{"tag":"TypeVar","contents":"a"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prelude"],"Bounded"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe","First"],"First"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[30,1],"name":"src/Data/Maybe/First.purs","end":[34,1]}},{"comments":null,"title":"functorFirst","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prelude"],"Functor"]},{"tag":"TypeConstructor","contents":[["Data","Maybe","First"],"First"]}]}},"sourceSpan":{"start":[34,1],"name":"src/Data/Maybe/First.purs","end":[37,1]}},{"comments":null,"title":"applyFirst","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prelude"],"Apply"]},{"tag":"TypeConstructor","contents":[["Data","Maybe","First"],"First"]}]}},"sourceSpan":{"start":[37,1],"name":"src/Data/Maybe/First.purs","end":[40,1]}},{"comments":null,"title":"applicativeFirst","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prelude"],"Applicative"]},{"tag":"TypeConstructor","contents":[["Data","Maybe","First"],"First"]}]}},"sourceSpan":{"start":[40,1],"name":"src/Data/Maybe/First.purs","end":[43,1]}},{"comments":null,"title":"bindFirst","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prelude"],"Bind"]},{"tag":"TypeConstructor","contents":[["Data","Maybe","First"],"First"]}]}},"sourceSpan":{"start":[43,1],"name":"src/Data/Maybe/First.purs","end":[46,1]}},{"comments":null,"title":"monadFirst","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prelude"],"Monad"]},{"tag":"TypeConstructor","contents":[["Data","Maybe","First"],"First"]}]}},"sourceSpan":{"start":[46,1],"name":"src/Data/Maybe/First.purs","end":[48,1]}},{"comments":null,"title":"extendFirst","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Extend"],"Extend"]},{"tag":"TypeConstructor","contents":[["Data","Maybe","First"],"First"]}]}},"sourceSpan":{"start":[48,1],"name":"src/Data/Maybe/First.purs","end":[51,1]}},{"comments":null,"title":"invariantFirst","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Functor","Invariant"],"Invariant"]},{"tag":"TypeConstructor","contents":[["Data","Maybe","First"],"First"]}]}},"sourceSpan":{"start":[51,1],"name":"src/Data/Maybe/First.purs","end":[54,1]}},{"comments":null,"title":"showFirst","info":{"declType":"instance","dependencies":[[[["Prelude"],"Show"],[{"tag":"TypeVar","contents":"a"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prelude"],"Show"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe","First"],"First"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[54,1],"name":"src/Data/Maybe/First.purs","end":[57,1]}},{"comments":null,"title":"semigroupFirst","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prelude"],"Semigroup"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe","First"],"First"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[57,1],"name":"src/Data/Maybe/First.purs","end":[61,1]}},{"comments":null,"title":"monoidFirst","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Monoid"],"Monoid"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe","First"],"First"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[61,1],"name":"src/Data/Maybe/First.purs","end":[62,18]}}],"comments":"Monoid returning the first (left-most) non-`Nothing` value.\n\n``` purescript\nFirst (Just x) <> First (Just y) == First (Just x)\nFirst Nothing <> First (Just y) == First (Just y)\nFirst Nothing <> Nothing == First Nothing\nmempty :: First _ == First Nothing\n```\n","title":"First","fixity":null,"info":{"declType":"data","dataDeclType":"newtype","typeArguments":[["a",null]]},"sourceSpan":{"start":[19,1],"name":"src/Data/Maybe/First.purs","end":[21,1]}},{"children":[],"comments":null,"title":"runFirst","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe","First"],"First"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeVar","contents":"a"}]}]},null]}},"sourceSpan":{"start":[21,1],"name":"src/Data/Maybe/First.purs","end":[22,1]}}]},{"reExports":[],"name":"Data.Maybe.Last","comments":null,"declarations":[{"children":[{"comments":null,"title":"Last","info":{"arguments":[{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeVar","contents":"a"}]}}],"declType":"dataConstructor"},"sourceSpan":null},{"comments":null,"title":"eqLast","info":{"declType":"instance","dependencies":[[[["Prelude"],"Eq"],[{"tag":"TypeVar","contents":"a"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prelude"],"Eq"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe","Last"],"Last"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[24,1],"name":"src/Data/Maybe/Last.purs","end":[27,1]}},{"comments":null,"title":"ordLast","info":{"declType":"instance","dependencies":[[[["Prelude"],"Ord"],[{"tag":"TypeVar","contents":"a"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prelude"],"Ord"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe","Last"],"Last"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[27,1],"name":"src/Data/Maybe/Last.purs","end":[30,1]}},{"comments":null,"title":"boundedLast","info":{"declType":"instance","dependencies":[[[["Prelude"],"Bounded"],[{"tag":"TypeVar","contents":"a"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prelude"],"Bounded"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe","Last"],"Last"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[30,1],"name":"src/Data/Maybe/Last.purs","end":[34,1]}},{"comments":null,"title":"functorLast","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prelude"],"Functor"]},{"tag":"TypeConstructor","contents":[["Data","Maybe","Last"],"Last"]}]}},"sourceSpan":{"start":[34,1],"name":"src/Data/Maybe/Last.purs","end":[37,1]}},{"comments":null,"title":"applyLast","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prelude"],"Apply"]},{"tag":"TypeConstructor","contents":[["Data","Maybe","Last"],"Last"]}]}},"sourceSpan":{"start":[37,1],"name":"src/Data/Maybe/Last.purs","end":[40,1]}},{"comments":null,"title":"applicativeLast","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prelude"],"Applicative"]},{"tag":"TypeConstructor","contents":[["Data","Maybe","Last"],"Last"]}]}},"sourceSpan":{"start":[40,1],"name":"src/Data/Maybe/Last.purs","end":[43,1]}},{"comments":null,"title":"bindLast","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prelude"],"Bind"]},{"tag":"TypeConstructor","contents":[["Data","Maybe","Last"],"Last"]}]}},"sourceSpan":{"start":[43,1],"name":"src/Data/Maybe/Last.purs","end":[46,1]}},{"comments":null,"title":"monadLast","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prelude"],"Monad"]},{"tag":"TypeConstructor","contents":[["Data","Maybe","Last"],"Last"]}]}},"sourceSpan":{"start":[46,1],"name":"src/Data/Maybe/Last.purs","end":[48,1]}},{"comments":null,"title":"extendLast","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Extend"],"Extend"]},{"tag":"TypeConstructor","contents":[["Data","Maybe","Last"],"Last"]}]}},"sourceSpan":{"start":[48,1],"name":"src/Data/Maybe/Last.purs","end":[51,1]}},{"comments":null,"title":"invariantLast","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Functor","Invariant"],"Invariant"]},{"tag":"TypeConstructor","contents":[["Data","Maybe","Last"],"Last"]}]}},"sourceSpan":{"start":[51,1],"name":"src/Data/Maybe/Last.purs","end":[54,1]}},{"comments":null,"title":"showLast","info":{"declType":"instance","dependencies":[[[["Prelude"],"Show"],[{"tag":"TypeVar","contents":"a"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prelude"],"Show"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe","Last"],"Last"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[54,1],"name":"src/Data/Maybe/Last.purs","end":[57,1]}},{"comments":null,"title":"semigroupLast","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prelude"],"Semigroup"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe","Last"],"Last"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[57,1],"name":"src/Data/Maybe/Last.purs","end":[61,1]}},{"comments":null,"title":"monoidLast","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Monoid"],"Monoid"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe","Last"],"Last"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[61,1],"name":"src/Data/Maybe/Last.purs","end":[62,17]}}],"comments":"Monoid returning the last (right-most) non-`Nothing` value.\n\n``` purescript\nLast (Just x) <> Last (Just y) == Last (Just y)\nLast (Just x) <> Nothing == Last (Just x)\nLast Nothing <> Nothing == Last Nothing\nmempty :: Last _ == Last Nothing\n```\n","title":"Last","fixity":null,"info":{"declType":"data","dataDeclType":"newtype","typeArguments":[["a",null]]},"sourceSpan":{"start":[19,1],"name":"src/Data/Maybe/Last.purs","end":[21,1]}},{"children":[],"comments":null,"title":"runLast","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe","Last"],"Last"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeVar","contents":"a"}]}]},null]}},"sourceSpan":{"start":[21,1],"name":"src/Data/Maybe/Last.purs","end":[22,1]}}]},{"reExports":[],"name":"Data.Maybe.Unsafe","comments":null,"declarations":[{"children":[],"comments":"A partial function that extracts the value from the `Just` data\nconstructor. Passing `Nothing` to `fromJust` will throw an error at\nruntime.\n","title":"fromJust","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeVar","contents":"a"}]},null]}},"sourceSpan":{"start":[10,1],"name":"src/Data/Maybe/Unsafe.purs","end":[11,1]}}]}],"resolvedDependencies":{"purescript-control":"0.3.2","purescript-invariant":"0.3.0","purescript-monoid":"0.3.2","purescript-prelude":"0.1.5"},"bookmarks":[{"package":null,"item":["Data.Maybe","Maybe"]},{"package":null,"item":["Data.Maybe","maybe"]},{"package":null,"item":["Data.Maybe","maybe"]},{"package":null,"item":["Data.Maybe","fromMaybe"]},{"package":null,"item":["Data.Maybe","isJust"]},{"package":null,"item":["Data.Maybe","isNothing"]},{"package":null,"item":["Data.Maybe","functorMaybe"]},{"package":null,"item":["Data.Maybe","applyMaybe"]},{"package":null,"item":["Data.Maybe","applicativeMaybe"]},{"package":null,"item":["Data.Maybe","altMaybe"]},{"package":null,"item":["Data.Maybe","plusMaybe"]},{"package":null,"item":["Data.Maybe","alternativeMaybe"]},{"package":null,"item":["Data.Maybe","bindMaybe"]},{"package":null,"item":["Data.Maybe","monadMaybe"]},{"package":null,"item":["Data.Maybe","monadPlusMaybe"]},{"package":null,"item":["Data.Maybe","extendMaybe"]},{"package":null,"item":["Data.Maybe","invariantMaybe"]},{"package":null,"item":["Data.Maybe","semigroupMaybe"]},{"package":null,"item":["Data.Maybe","monoidMaybe"]},{"package":null,"item":["Data.Maybe","semiringMaybe"]},{"package":null,"item":["Data.Maybe","moduloSemiringMaybe"]},{"package":null,"item":["Data.Maybe","ringMaybe"]},{"package":null,"item":["Data.Maybe","divisionRingMaybe"]},{"package":null,"item":["Data.Maybe","numMaybe"]},{"package":null,"item":["Data.Maybe","eqMaybe"]},{"package":null,"item":["Data.Maybe","ordMaybe"]},{"package":null,"item":["Data.Maybe","boundedMaybe"]},{"package":null,"item":["Data.Maybe","boundedOrdMaybe"]},{"package":null,"item":["Data.Maybe","booleanAlgebraMaybe"]},{"package":null,"item":["Data.Maybe","showMaybe"]},{"package":null,"item":["Data.Maybe.Unsafe","fromJust"]},{"package":null,"item":["Data.Maybe.First","First"]},{"package":null,"item":["Data.Maybe.First","runFirst"]},{"package":null,"item":["Data.Maybe.First","eqFirst"]},{"package":null,"item":["Data.Maybe.First","ordFirst"]},{"package":null,"item":["Data.Maybe.First","boundedFirst"]},{"package":null,"item":["Data.Maybe.First","functorFirst"]},{"package":null,"item":["Data.Maybe.First","applyFirst"]},{"package":null,"item":["Data.Maybe.First","applicativeFirst"]},{"package":null,"item":["Data.Maybe.First","bindFirst"]},{"package":null,"item":["Data.Maybe.First","monadFirst"]},{"package":null,"item":["Data.Maybe.First","extendFirst"]},{"package":null,"item":["Data.Maybe.First","invariantFirst"]},{"package":null,"item":["Data.Maybe.First","showFirst"]},{"package":null,"item":["Data.Maybe.First","semigroupFirst"]},{"package":null,"item":["Data.Maybe.First","monoidFirst"]},{"package":null,"item":["Data.Maybe.Last","Last"]},{"package":null,"item":["Data.Maybe.Last","runLast"]},{"package":null,"item":["Data.Maybe.Last","eqLast"]},{"package":null,"item":["Data.Maybe.Last","ordLast"]},{"package":null,"item":["Data.Maybe.Last","boundedLast"]},{"package":null,"item":["Data.Maybe.Last","functorLast"]},{"package":null,"item":["Data.Maybe.Last","applyLast"]},{"package":null,"item":["Data.Maybe.Last","applicativeLast"]},{"package":null,"item":["Data.Maybe.Last","bindLast"]},{"package":null,"item":["Data.Maybe.Last","monadLast"]},{"package":null,"item":["Data.Maybe.Last","extendLast"]},{"package":null,"item":["Data.Maybe.Last","invariantLast"]},{"package":null,"item":["Data.Maybe.Last","showLast"]},{"package":null,"item":["Data.Maybe.Last","semigroupLast"]},{"package":null,"item":["Data.Maybe.Last","monoidLast"]},{"package":"purescript-prelude","item":["Prelude","Unit"]},{"package":"purescript-prelude","item":["Prelude","unit"]},{"package":"purescript-prelude","item":["Prelude","($)"]},{"package":"purescript-prelude","item":["Prelude","(#)"]},{"package":"purescript-prelude","item":["Prelude","flip"]},{"package":"purescript-prelude","item":["Prelude","const"]},{"package":"purescript-prelude","item":["Prelude","asTypeOf"]},{"package":"purescript-prelude","item":["Prelude","otherwise"]},{"package":"purescript-prelude","item":["Prelude","Semigroupoid"]},{"package":"purescript-prelude","item":["Prelude","(<<<)"]},{"package":"purescript-prelude","item":["Prelude","(>>>)"]},{"package":"purescript-prelude","item":["Prelude","Category"]},{"package":"purescript-prelude","item":["Prelude","Functor"]},{"package":"purescript-prelude","item":["Prelude","(<$>)"]},{"package":"purescript-prelude","item":["Prelude","(<#>)"]},{"package":"purescript-prelude","item":["Prelude","void"]},{"package":"purescript-prelude","item":["Prelude","Apply"]},{"package":"purescript-prelude","item":["Prelude","(<*>)"]},{"package":"purescript-prelude","item":["Prelude","Applicative"]},{"package":"purescript-prelude","item":["Prelude","return"]},{"package":"purescript-prelude","item":["Prelude","liftA1"]},{"package":"purescript-prelude","item":["Prelude","Bind"]},{"package":"purescript-prelude","item":["Prelude","(>>=)"]},{"package":"purescript-prelude","item":["Prelude","Monad"]},{"package":"purescript-prelude","item":["Prelude","liftM1"]},{"package":"purescript-prelude","item":["Prelude","ap"]},{"package":"purescript-prelude","item":["Prelude","Semigroup"]},{"package":"purescript-prelude","item":["Prelude","(<>)"]},{"package":"purescript-prelude","item":["Prelude","(++)"]},{"package":"purescript-prelude","item":["Prelude","Semiring"]},{"package":"purescript-prelude","item":["Prelude","(+)"]},{"package":"purescript-prelude","item":["Prelude","(*)"]},{"package":"purescript-prelude","item":["Prelude","Ring"]},{"package":"purescript-prelude","item":["Prelude","(-)"]},{"package":"purescript-prelude","item":["Prelude","negate"]},{"package":"purescript-prelude","item":["Prelude","ModuloSemiring"]},{"package":"purescript-prelude","item":["Prelude","(/)"]},{"package":"purescript-prelude","item":["Prelude","DivisionRing"]},{"package":"purescript-prelude","item":["Prelude","Num"]},{"package":"purescript-prelude","item":["Prelude","Eq"]},{"package":"purescript-prelude","item":["Prelude","(==)"]},{"package":"purescript-prelude","item":["Prelude","(/=)"]},{"package":"purescript-prelude","item":["Prelude","Ordering"]},{"package":"purescript-prelude","item":["Prelude","Ord"]},{"package":"purescript-prelude","item":["Prelude","(<)"]},{"package":"purescript-prelude","item":["Prelude","(>)"]},{"package":"purescript-prelude","item":["Prelude","(<=)"]},{"package":"purescript-prelude","item":["Prelude","(>=)"]},{"package":"purescript-prelude","item":["Prelude","unsafeCompare"]},{"package":"purescript-prelude","item":["Prelude","Bounded"]},{"package":"purescript-prelude","item":["Prelude","BoundedOrd"]},{"package":"purescript-prelude","item":["Prelude","BooleanAlgebra"]},{"package":"purescript-prelude","item":["Prelude","(&&)"]},{"package":"purescript-prelude","item":["Prelude","(||)"]},{"package":"purescript-prelude","item":["Prelude","Show"]},{"package":"purescript-invariant","item":["Data.Functor.Invariant","Invariant"]},{"package":"purescript-invariant","item":["Data.Functor.Invariant","imapF"]},{"package":"purescript-invariant","item":["Data.Functor.Invariant","invariantFn"]},{"package":"purescript-invariant","item":["Data.Functor.Invariant","invariantArray"]},{"package":"purescript-control","item":["Control.Lazy","Lazy"]},{"package":"purescript-control","item":["Control.Lazy","fix"]},{"package":"purescript-control","item":["Control.Extend","(=>>)"]},{"package":"purescript-control","item":["Control.Extend","(<<=)"]},{"package":"purescript-control","item":["Control.Extend","(=>=)"]},{"package":"purescript-control","item":["Control.Extend","(=<=)"]},{"package":"purescript-control","item":["Control.Extend","Extend"]},{"package":"purescript-control","item":["Control.Extend","extendFn"]},{"package":"purescript-control","item":["Control.Extend","(<<=)"]},{"package":"purescript-control","item":["Control.Extend","(=>>)"]},{"package":"purescript-control","item":["Control.Extend","(=>=)"]},{"package":"purescript-control","item":["Control.Extend","(=<=)"]},{"package":"purescript-control","item":["Control.Extend","duplicate"]},{"package":"purescript-control","item":["Control.Alternative","Alternative"]},{"package":"purescript-control","item":["Control.Alternative","alternativeArray"]},{"package":"purescript-control","item":["Control.Comonad","Comonad"]},{"package":"purescript-control","item":["Control.Apply","(<*)"]},{"package":"purescript-control","item":["Control.Apply","(*>)"]},{"package":"purescript-control","item":["Control.Apply","(<*)"]},{"package":"purescript-control","item":["Control.Apply","(*>)"]},{"package":"purescript-control","item":["Control.Apply","lift2"]},{"package":"purescript-control","item":["Control.Apply","lift3"]},{"package":"purescript-control","item":["Control.Apply","lift4"]},{"package":"purescript-control","item":["Control.Apply","lift5"]},{"package":"purescript-control","item":["Control.Monad","when"]},{"package":"purescript-control","item":["Control.Monad","when"]},{"package":"purescript-control","item":["Control.Monad","unless"]},{"package":"purescript-control","item":["Control.Monad","unless"]},{"package":"purescript-control","item":["Control.Bind","(=<<)"]},{"package":"purescript-control","item":["Control.Bind","(>=>)"]},{"package":"purescript-control","item":["Control.Bind","(<=<)"]},{"package":"purescript-control","item":["Control.Bind","(=<<)"]},{"package":"purescript-control","item":["Control.Bind","(>=>)"]},{"package":"purescript-control","item":["Control.Bind","(<=<)"]},{"package":"purescript-control","item":["Control.Bind","join"]},{"package":"purescript-control","item":["Control.Bind","ifM"]},{"package":"purescript-control","item":["Control.Alt","Alt"]},{"package":"purescript-control","item":["Control.Alt","(<|>)"]},{"package":"purescript-control","item":["Control.Alt","(<|>)"]},{"package":"purescript-control","item":["Control.Alt","altArray"]},{"package":"purescript-control","item":["Control.MonadPlus","MonadPlus"]},{"package":"purescript-control","item":["Control.MonadPlus","guard"]},{"package":"purescript-control","item":["Control.MonadPlus","guard"]},{"package":"purescript-control","item":["Control.MonadPlus","monadPlusArray"]},{"package":"purescript-control","item":["Control.Plus","Plus"]},{"package":"purescript-control","item":["Control.Plus","plusArray"]},{"package":"purescript-control","item":["Data.Functor","(<$)"]},{"package":"purescript-control","item":["Data.Functor","($>)"]},{"package":"purescript-control","item":["Data.Functor","(<$)"]},{"package":"purescript-control","item":["Data.Functor","($>)"]},{"package":"purescript-monoid","item":["Data.Monoid","Monoid"]},{"package":"purescript-monoid","item":["Data.Monoid","monoidUnit"]},{"package":"purescript-monoid","item":["Data.Monoid","monoidFn"]},{"package":"purescript-monoid","item":["Data.Monoid","monoidString"]},{"package":"purescript-monoid","item":["Data.Monoid","monoidArray"]},{"package":"purescript-monoid","item":["Data.Monoid.Conj","Conj"]},{"package":"purescript-monoid","item":["Data.Monoid.Conj","runConj"]},{"package":"purescript-monoid","item":["Data.Monoid.Conj","eqConj"]},{"package":"purescript-monoid","item":["Data.Monoid.Conj","ordConj"]},{"package":"purescript-monoid","item":["Data.Monoid.Conj","boundedConj"]},{"package":"purescript-monoid","item":["Data.Monoid.Conj","functorConj"]},{"package":"purescript-monoid","item":["Data.Monoid.Conj","applyConj"]},{"package":"purescript-monoid","item":["Data.Monoid.Conj","applicativeConj"]},{"package":"purescript-monoid","item":["Data.Monoid.Conj","bindConj"]},{"package":"purescript-monoid","item":["Data.Monoid.Conj","monadConj"]},{"package":"purescript-monoid","item":["Data.Monoid.Conj","extendConj"]},{"package":"purescript-monoid","item":["Data.Monoid.Conj","comonadConj"]},{"package":"purescript-monoid","item":["Data.Monoid.Conj","showConj"]},{"package":"purescript-monoid","item":["Data.Monoid.Conj","semigroupConj"]},{"package":"purescript-monoid","item":["Data.Monoid.Conj","monoidConj"]},{"package":"purescript-monoid","item":["Data.Monoid.Conj","semiringConj"]},{"package":"purescript-monoid","item":["Data.Monoid.Multiplicative","Multiplicative"]},{"package":"purescript-monoid","item":["Data.Monoid.Multiplicative","runMultiplicative"]},{"package":"purescript-monoid","item":["Data.Monoid.Multiplicative","eqMultiplicative"]},{"package":"purescript-monoid","item":["Data.Monoid.Multiplicative","ordMultiplicative"]},{"package":"purescript-monoid","item":["Data.Monoid.Multiplicative","functorMultiplicative"]},{"package":"purescript-monoid","item":["Data.Monoid.Multiplicative","applyMultiplicative"]},{"package":"purescript-monoid","item":["Data.Monoid.Multiplicative","applicativeMultiplicative"]},{"package":"purescript-monoid","item":["Data.Monoid.Multiplicative","bindMultiplicative"]},{"package":"purescript-monoid","item":["Data.Monoid.Multiplicative","monadMultiplicative"]},{"package":"purescript-monoid","item":["Data.Monoid.Multiplicative","extendMultiplicative"]},{"package":"purescript-monoid","item":["Data.Monoid.Multiplicative","comonadMultiplicative"]},{"package":"purescript-monoid","item":["Data.Monoid.Multiplicative","invariantMultiplicative"]},{"package":"purescript-monoid","item":["Data.Monoid.Multiplicative","showMultiplicative"]},{"package":"purescript-monoid","item":["Data.Monoid.Multiplicative","semigroupMultiplicative"]},{"package":"purescript-monoid","item":["Data.Monoid.Multiplicative","monoidMultiplicative"]},{"package":"purescript-monoid","item":["Data.Monoid.Additive","Additive"]},{"package":"purescript-monoid","item":["Data.Monoid.Additive","runAdditive"]},{"package":"purescript-monoid","item":["Data.Monoid.Additive","eqAdditive"]},{"package":"purescript-monoid","item":["Data.Monoid.Additive","ordAdditive"]},{"package":"purescript-monoid","item":["Data.Monoid.Additive","functorAdditive"]},{"package":"purescript-monoid","item":["Data.Monoid.Additive","applyAdditive"]},{"package":"purescript-monoid","item":["Data.Monoid.Additive","applicativeAdditive"]},{"package":"purescript-monoid","item":["Data.Monoid.Additive","bindAdditive"]},{"package":"purescript-monoid","item":["Data.Monoid.Additive","monadAdditive"]},{"package":"purescript-monoid","item":["Data.Monoid.Additive","extendAdditive"]},{"package":"purescript-monoid","item":["Data.Monoid.Additive","comonadAdditive"]},{"package":"purescript-monoid","item":["Data.Monoid.Additive","invariantAdditive"]},{"package":"purescript-monoid","item":["Data.Monoid.Additive","showAdditive"]},{"package":"purescript-monoid","item":["Data.Monoid.Additive","semigroupAdditive"]},{"package":"purescript-monoid","item":["Data.Monoid.Additive","monoidAdditive"]},{"package":"purescript-monoid","item":["Data.Monoid.Endo","Endo"]},{"package":"purescript-monoid","item":["Data.Monoid.Endo","runEndo"]},{"package":"purescript-monoid","item":["Data.Monoid.Endo","invariantEndo"]},{"package":"purescript-monoid","item":["Data.Monoid.Endo","semigroupEndo"]},{"package":"purescript-monoid","item":["Data.Monoid.Endo","monoidEndo"]},{"package":"purescript-monoid","item":["Data.Monoid.Dual","Dual"]},{"package":"purescript-monoid","item":["Data.Monoid.Dual","runDual"]},{"package":"purescript-monoid","item":["Data.Monoid.Dual","eqDual"]},{"package":"purescript-monoid","item":["Data.Monoid.Dual","ordDual"]},{"package":"purescript-monoid","item":["Data.Monoid.Dual","functorDual"]},{"package":"purescript-monoid","item":["Data.Monoid.Dual","applyDual"]},{"package":"purescript-monoid","item":["Data.Monoid.Dual","applicativeDual"]},{"package":"purescript-monoid","item":["Data.Monoid.Dual","bindDual"]},{"package":"purescript-monoid","item":["Data.Monoid.Dual","monadDual"]},{"package":"purescript-monoid","item":["Data.Monoid.Dual","extendDual"]},{"package":"purescript-monoid","item":["Data.Monoid.Dual","comonadDual"]},{"package":"purescript-monoid","item":["Data.Monoid.Dual","invariantDual"]},{"package":"purescript-monoid","item":["Data.Monoid.Dual","showDual"]},{"package":"purescript-monoid","item":["Data.Monoid.Dual","semigroupDual"]},{"package":"purescript-monoid","item":["Data.Monoid.Dual","monoidDual"]},{"package":"purescript-monoid","item":["Data.Monoid.Disj","Disj"]},{"package":"purescript-monoid","item":["Data.Monoid.Disj","runDisj"]},{"package":"purescript-monoid","item":["Data.Monoid.Disj","eqDisj"]},{"package":"purescript-monoid","item":["Data.Monoid.Disj","ordDisj"]},{"package":"purescript-monoid","item":["Data.Monoid.Disj","boundedDisj"]},{"package":"purescript-monoid","item":["Data.Monoid.Disj","functorDisj"]},{"package":"purescript-monoid","item":["Data.Monoid.Disj","applyDisj"]},{"package":"purescript-monoid","item":["Data.Monoid.Disj","applicativeDisj"]},{"package":"purescript-monoid","item":["Data.Monoid.Disj","bindDisj"]},{"package":"purescript-monoid","item":["Data.Monoid.Disj","monadDisj"]},{"package":"purescript-monoid","item":["Data.Monoid.Disj","extendDisj"]},{"package":"purescript-monoid","item":["Data.Monoid.Disj","comonadDisj"]},{"package":"purescript-monoid","item":["Data.Monoid.Disj","showDisj"]},{"package":"purescript-monoid","item":["Data.Monoid.Disj","semigroupDisj"]},{"package":"purescript-monoid","item":["Data.Monoid.Disj","monoidDisj"]},{"package":"purescript-monoid","item":["Data.Monoid.Disj","semiringDisj"]}],"version":"0.3.2","github":["purescript","purescript-maybe"],"versionTag":"v0.3.2","compilerVersion":"0.8.5.0"}