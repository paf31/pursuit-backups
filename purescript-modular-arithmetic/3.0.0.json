{"uploader":"hdgarrood","packageMeta":{"moduleType":["node"],"repository":{"url":"https://github.com/hdgarrood/purescript-modular-arithmetic","type":"git"},"ignore":["**/.*","node_modules","bower_components","output"],"devDependencies":{"purescript-quickcheck-laws":"^3.0.0","purescript-psci-support":"^3.0.0"},"dependencies":{"purescript-console":"^3.0.0","purescript-arrays":"^4.0.1","purescript-typelevel":"^3.0.0","purescript-nonempty":"^4.0.0","purescript-quickcheck":"^4.0.0"},"name":"purescript-modular-arithmetic","license":["MIT"]},"tagTime":"2018-04-11T17:02:04+0000","modules":[{"reExports":[],"name":"Data.ModularArithmetic","comments":null,"declarations":[{"children":[{"comments":null,"title":"eqZ","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Eq"],"Eq"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","ModularArithmetic"],"Z"]},{"tag":"TypeVar","contents":"m"}]}]}},"sourceSpan":{"start":[38,16],"name":"/home/harry/code/purescript-modular-arithmetic/src/Data/ModularArithmetic.purs","end":[38,40]}},{"comments":null,"title":"ordZ","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Ord"],"Ord"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","ModularArithmetic"],"Z"]},{"tag":"TypeVar","contents":"m"}]}]}},"sourceSpan":{"start":[39,16],"name":"/home/harry/code/purescript-modular-arithmetic/src/Data/ModularArithmetic.purs","end":[39,42]}},{"comments":null,"title":"showZ","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Show"],"Show"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","ModularArithmetic"],"Z"]},{"tag":"TypeVar","contents":"m"}]}]}},"sourceSpan":{"start":[40,16],"name":"/home/harry/code/purescript-modular-arithmetic/src/Data/ModularArithmetic.purs","end":[40,44]}},{"comments":null,"title":"boundedZ","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","Typelevel","Num","Sets"],"Pos"],"constraintArgs":[{"tag":"TypeVar","contents":"m"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Bounded"],"Bounded"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","ModularArithmetic"],"Z"]},{"tag":"TypeVar","contents":"m"}]}]}},"sourceSpan":{"start":[42,1],"name":"/home/harry/code/purescript-modular-arithmetic/src/Data/ModularArithmetic.purs","end":[42,44]}},{"comments":null,"title":"enumZ","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","Typelevel","Num","Sets"],"Pos"],"constraintArgs":[{"tag":"TypeVar","contents":"m"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Enum"],"Enum"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","ModularArithmetic"],"Z"]},{"tag":"TypeVar","contents":"m"}]}]}},"sourceSpan":{"start":[46,1],"name":"/home/harry/code/purescript-modular-arithmetic/src/Data/ModularArithmetic.purs","end":[46,38]}},{"comments":null,"title":"boundedEnumZ","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","Typelevel","Num","Sets"],"Pos"],"constraintArgs":[{"tag":"TypeVar","contents":"m"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Enum"],"BoundedEnum"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","ModularArithmetic"],"Z"]},{"tag":"TypeVar","contents":"m"}]}]}},"sourceSpan":{"start":[52,1],"name":"/home/harry/code/purescript-modular-arithmetic/src/Data/ModularArithmetic.purs","end":[52,52]}},{"comments":null,"title":"semiringZ","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","Typelevel","Num","Sets"],"Pos"],"constraintArgs":[{"tag":"TypeVar","contents":"m"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Semiring"],"Semiring"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","ModularArithmetic"],"Z"]},{"tag":"TypeVar","contents":"m"}]}]}},"sourceSpan":{"start":[85,1],"name":"/home/harry/code/purescript-modular-arithmetic/src/Data/ModularArithmetic.purs","end":[85,46]}},{"comments":null,"title":"ringZ","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","Typelevel","Num","Sets"],"Pos"],"constraintArgs":[{"tag":"TypeVar","contents":"m"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Ring"],"Ring"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","ModularArithmetic"],"Z"]},{"tag":"TypeVar","contents":"m"}]}]}},"sourceSpan":{"start":[91,1],"name":"/home/harry/code/purescript-modular-arithmetic/src/Data/ModularArithmetic.purs","end":[91,38]}},{"comments":null,"title":"commutativeRingZ","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","Typelevel","Num","Sets"],"Pos"],"constraintArgs":[{"tag":"TypeVar","contents":"m"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","CommutativeRing"],"CommutativeRing"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","ModularArithmetic"],"Z"]},{"tag":"TypeVar","contents":"m"}]}]}},"sourceSpan":{"start":[94,1],"name":"/home/harry/code/purescript-modular-arithmetic/src/Data/ModularArithmetic.purs","end":[94,60]}},{"comments":null,"title":"divisionRingZ","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","ModularArithmetic"],"Prime"],"constraintArgs":[{"tag":"TypeVar","contents":"m"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","DivisionRing"],"DivisionRing"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","ModularArithmetic"],"Z"]},{"tag":"TypeVar","contents":"m"}]}]}},"sourceSpan":{"start":[96,1],"name":"/home/harry/code/purescript-modular-arithmetic/src/Data/ModularArithmetic.purs","end":[96,56]}},{"comments":null,"title":"euclideanRingZ","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","ModularArithmetic"],"Prime"],"constraintArgs":[{"tag":"TypeVar","contents":"m"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","EuclideanRing"],"EuclideanRing"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","ModularArithmetic"],"Z"]},{"tag":"TypeVar","contents":"m"}]}]}},"sourceSpan":{"start":[102,1],"name":"/home/harry/code/purescript-modular-arithmetic/src/Data/ModularArithmetic.purs","end":[102,58]}},{"comments":null,"title":"fieldZ","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","ModularArithmetic"],"Prime"],"constraintArgs":[{"tag":"TypeVar","contents":"m"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Field"],"Field"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","ModularArithmetic"],"Z"]},{"tag":"TypeVar","contents":"m"}]}]}},"sourceSpan":{"start":[107,1],"name":"/home/harry/code/purescript-modular-arithmetic/src/Data/ModularArithmetic.purs","end":[107,42]}},{"comments":null,"title":"arbitraryZ","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","Typelevel","Num","Sets"],"Pos"],"constraintArgs":[{"tag":"TypeVar","contents":"m"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Test","QuickCheck","Arbitrary"],"Arbitrary"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","ModularArithmetic"],"Z"]},{"tag":"TypeVar","contents":"m"}]}]}},"sourceSpan":{"start":[139,1],"name":"/home/harry/code/purescript-modular-arithmetic/src/Data/ModularArithmetic.purs","end":[139,48]}}],"comments":"Integers modulo some positive integer m.\n\nThe type argument should be a positive integer of the kind defined by [purescript-typelevel](https://pursuit.purescript.org/packages/purescript-typelevel).\nThis way, the modulus that you're working with is specified in the type. Note\nthat even though the modulus is captured at the type level, you can still use\nmodulus values which are not known at compile time, with the [`reifyIntP`](https://pursuit.purescript.org/packages/purescript-typelevel/2.0.0/docs/Data.Typelevel.Num.Sets#v:reifyIntP) function.\n\nThis type forms a commutative ring for any positive integer m, and\nadditionally a field when m is prime. Unlike `Int` and `Number`, though,\nall of these instances are *fully law-abiding*.\n\nThe runtime representation is identical to that of `Int`, except that\nvalues are guaranteed to be between 0 and m-1.\n","title":"Z","info":{"declType":"data","dataDeclType":"newtype","typeArguments":[["m",null]]},"sourceSpan":{"start":[36,1],"name":"/home/harry/code/purescript-modular-arithmetic/src/Data/ModularArithmetic.purs","end":[36,20]}},{"children":[],"comments":"Smart constructor for `Z` values.\n","title":"mkZ","info":{"declType":"value","type":{"tag":"ForAll","contents":["m",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Typelevel","Num","Sets"],"Pos"],"constraintArgs":[{"tag":"TypeVar","contents":"m"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","ModularArithmetic"],"Z"]},{"tag":"TypeVar","contents":"m"}]}]}]},null]}},"sourceSpan":{"start":[59,1],"name":"/home/harry/code/purescript-modular-arithmetic/src/Data/ModularArithmetic.purs","end":[59,37]}},{"children":[],"comments":"Get at the underlying `Int`.\n","title":"runZ","info":{"declType":"value","type":{"tag":"ForAll","contents":["m",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","ModularArithmetic"],"Z"]},{"tag":"TypeVar","contents":"m"}]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},null]}},"sourceSpan":{"start":[68,1],"name":"/home/harry/code/purescript-modular-arithmetic/src/Data/ModularArithmetic.purs","end":[68,29]}},{"children":[],"comments":"Convenience function for accessing `m` at the value level.\n","title":"modulus","info":{"declType":"value","type":{"tag":"ForAll","contents":["m",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Typelevel","Num","Sets"],"Pos"],"constraintArgs":[{"tag":"TypeVar","contents":"m"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","ModularArithmetic"],"Z"]},{"tag":"TypeVar","contents":"m"}]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}]},null]}},"sourceSpan":{"start":[110,1],"name":"/home/harry/code/purescript-modular-arithmetic/src/Data/ModularArithmetic.purs","end":[110,41]}},{"children":[],"comments":"Compute a multiplicative inverse of some nonzero number in Z_m. Note that\nan inverse exists if and only if the input and `m` are coprime. If this is\nnot the case, this function returns `Nothing`.\n","title":"inverse","info":{"declType":"value","type":{"tag":"ForAll","contents":["m",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Typelevel","Num","Sets"],"Pos"],"constraintArgs":[{"tag":"TypeVar","contents":"m"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","ModularArithmetic"],"Z"]},{"tag":"TypeVar","contents":"m"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","ModularArithmetic"],"Z"]},{"tag":"TypeVar","contents":"m"}]}}]}]}]},null]}},"sourceSpan":{"start":[116,1],"name":"/home/harry/code/purescript-modular-arithmetic/src/Data/ModularArithmetic.purs","end":[116,49]}},{"children":[],"comments":"List all members of Z_m.\n","title":"enumerate","info":{"declType":"value","type":{"tag":"ForAll","contents":["m",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Typelevel","Num","Sets"],"Pos"],"constraintArgs":[{"tag":"TypeVar","contents":"m"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","NonEmpty"],"NonEmpty"]},{"tag":"TypeConstructor","contents":[["Prim"],"Array"]}]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","ModularArithmetic"],"Z"]},{"tag":"TypeVar","contents":"m"}]}}]}]},null]}},"sourceSpan":{"start":[132,1],"name":"/home/harry/code/purescript-modular-arithmetic/src/Data/ModularArithmetic.purs","end":[132,53]}},{"children":[{"comments":null,"title":"prime2","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","ModularArithmetic"],"Prime"]},{"tag":"TypeConstructor","contents":[["Data","Typelevel","Num","Reps"],"D2"]}]}},"sourceSpan":{"start":[79,1],"name":"/home/harry/code/purescript-modular-arithmetic/src/Data/ModularArithmetic.purs","end":[79,28]}},{"comments":null,"title":"prime3","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","ModularArithmetic"],"Prime"]},{"tag":"TypeConstructor","contents":[["Data","Typelevel","Num","Reps"],"D3"]}]}},"sourceSpan":{"start":[80,1],"name":"/home/harry/code/purescript-modular-arithmetic/src/Data/ModularArithmetic.purs","end":[80,28]}},{"comments":null,"title":"prime5","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","ModularArithmetic"],"Prime"]},{"tag":"TypeConstructor","contents":[["Data","Typelevel","Num","Reps"],"D5"]}]}},"sourceSpan":{"start":[81,1],"name":"/home/harry/code/purescript-modular-arithmetic/src/Data/ModularArithmetic.purs","end":[81,28]}},{"comments":null,"title":"prime7","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","ModularArithmetic"],"Prime"]},{"tag":"TypeConstructor","contents":[["Data","Typelevel","Num","Reps"],"D7"]}]}},"sourceSpan":{"start":[82,1],"name":"/home/harry/code/purescript-modular-arithmetic/src/Data/ModularArithmetic.purs","end":[82,28]}},{"comments":null,"title":"prime11","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","ModularArithmetic"],"Prime"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Typelevel","Num","Reps"],"NumCons"]},{"tag":"TypeConstructor","contents":[["Data","Typelevel","Num","Reps"],"D1"]}]},{"tag":"TypeConstructor","contents":[["Data","Typelevel","Num","Reps"],"D1"]}]}]}},"sourceSpan":{"start":[83,1],"name":"/home/harry/code/purescript-modular-arithmetic/src/Data/ModularArithmetic.purs","end":[83,37]}}],"comments":"This class specifies that a type-level integer is *prime*; that is, it\nhas exactly 2 divisors: itself, and 1.\n\nSadly, only a small number of primes have instances right now. Hopefully\nthis will change in the future.\n","title":"Prime","info":{"fundeps":[],"arguments":[["m",null]],"declType":"typeClass","superclasses":[{"constraintClass":[["Data","Typelevel","Num","Sets"],"Pos"],"constraintArgs":[{"tag":"TypeVar","contents":"m"}],"constraintData":null}]},"sourceSpan":{"start":[76,1],"name":"/home/harry/code/purescript-modular-arithmetic/src/Data/ModularArithmetic.purs","end":[76,23]}}]}],"resolvedDependencies":{"purescript-proxy":"2.1.0","purescript-exceptions":"3.1.0","purescript-newtype":"2.0.0","purescript-quickcheck-laws":"3.0.1","purescript-control":"3.3.1","purescript-console":"3.0.0","purescript-either":"3.1.0","purescript-arrays":"4.3.0","purescript-maybe":"3.1.0","purescript-symbols":"3.0.0","purescript-type-equality":"2.1.0","purescript-distributive":"3.0.0","purescript-unfoldable":"3.2.0","purescript-invariant":"3.0.0","purescript-typelevel":"3.0.0","purescript-lazy":"3.0.0","purescript-monoid":"3.3.0","purescript-foldable-traversable":"3.7.1","purescript-tailrec":"3.3.0","purescript-gen":"1.3.1","purescript-typelevel-prelude":"2.6.0","purescript-prelude":"3.2.0","purescript-st":"3.0.0","purescript-bifunctors":"3.0.0","purescript-nonempty":"4.2.0","purescript-unsafe-coerce":"3.0.0","purescript-integers":"3.2.0","purescript-eff":"3.2.1","purescript-record":"0.2.6","purescript-transformers":"3.6.0","purescript-globals":"3.0.0","purescript-generics-rep":"5.4.0","purescript-math":"2.1.0","purescript-enums":"3.2.1","purescript-psci-support":"3.0.0","purescript-random":"3.0.0","purescript-tuples":"4.1.0","purescript-partial":"1.2.1","purescript-quickcheck":"4.7.0","purescript-strings":"3.5.0","purescript-identity":"3.1.0","purescript-lists":"4.12.0","purescript-functions":"3.0.0"},"version":"3.0.0","github":["hdgarrood","purescript-modular-arithmetic"],"versionTag":"v3.0.0","moduleMap":{"Data.BooleanAlgebra":"purescript-prelude","Test.QuickCheck.Laws.Control.Semigroupoid":"purescript-quickcheck-laws","Type.Data.Boolean":"purescript-typelevel-prelude","Data.Ring":"purescript-prelude","Control.Monad.Trans.Class":"purescript-transformers","Data.NonEmpty":"purescript-nonempty","Data.Char.Gen":"purescript-strings","Data.Typelevel.Undefined":"purescript-typelevel","Data.String.NonEmpty":"purescript-strings","Test.QuickCheck.Laws.Data.Foldable":"purescript-quickcheck-laws","Data.Traversable.Accum.Internal":"purescript-foldable-traversable","Test.QuickCheck.Laws.Data.Bounded":"purescript-quickcheck-laws","Data.Enum.Gen":"purescript-enums","Control.Comonad.Env":"purescript-transformers","Control.Comonad.Traced.Class":"purescript-transformers","Control.Monad.Eff.Unsafe":"purescript-eff","Data.Typelevel.Num.Sets":"purescript-typelevel","Type.Row.Homogeneous":"purescript-typelevel-prelude","Data.Int.Bits":"purescript-integers","Data.Record.Unsafe":"purescript-record","Data.Bifunctor.Flip":"purescript-bifunctors","Data.String.CodePoints":"purescript-strings","Data.Ord":"purescript-prelude","Test.QuickCheck.Laws.Control.Apply":"purescript-quickcheck-laws","Control.Monad.Gen":"purescript-gen","Data.Typelevel.Num.Reps":"purescript-typelevel","Test.QuickCheck.Laws.Control.Alt":"purescript-quickcheck-laws","Test.QuickCheck.Laws.Data.Monoid":"purescript-quickcheck-laws","Test.QuickCheck.Laws.Data.HeytingAlgebra":"purescript-quickcheck-laws","Test.QuickCheck.Laws.Data":"purescript-quickcheck-laws","Data.Monoid.Dual":"purescript-monoid","Control.Monad.Rec.Class":"purescript-tailrec","Test.QuickCheck.Laws.Control.Bind":"purescript-quickcheck-laws","Data.Bitraversable":"purescript-foldable-traversable","Data.Boolean":"purescript-prelude","Control.Biapplicative":"purescript-bifunctors","Test.QuickCheck.Laws.Control.Monad":"purescript-quickcheck-laws","Type.Proxy":"purescript-proxy","Data.Array.ST.Iterator":"purescript-arrays","Test.QuickCheck.Laws.Data.Ord":"purescript-quickcheck-laws","Data.Bounded":"purescript-prelude","Test.QuickCheck.Laws.Control":"purescript-quickcheck-laws","Control.Monad.State.Trans":"purescript-transformers","Data.TraversableWithIndex":"purescript-foldable-traversable","Data.Int":"purescript-integers","Data.Show":"purescript-prelude","Data.Bifunctor.Clown":"purescript-bifunctors","Control.Monad.Writer.Trans":"purescript-transformers","Data.Foldable":"purescript-foldable-traversable","Control.Comonad.Store.Class":"purescript-transformers","Data.Enum":"purescript-enums","Control.Apply":"purescript-prelude","Data.Tuple.Nested":"purescript-tuples","Data.Generic.Rep.Semigroup":"purescript-generics-rep","Test.QuickCheck.LCG":"purescript-quickcheck","Control.Monad":"purescript-prelude","Data.Typelevel.Num":"purescript-typelevel","Data.Lazy":"purescript-lazy","Data.Monoid":"purescript-monoid","Control.Monad.Eff.Uncurried":"purescript-eff","Control.Monad.List.Trans":"purescript-transformers","Control.Monad.RWS":"purescript-transformers","Data.Maybe.First":"purescript-maybe","Control.Bind":"purescript-prelude","Data.Monoid.Additive":"purescript-monoid","Data.Symbol":"purescript-symbols","Data.String.Regex":"purescript-strings","Data.HeytingAlgebra":"purescript-prelude","Control.Alt":"purescript-control","Control.Monad.Maybe.Trans":"purescript-transformers","Control.Monad.Cont":"purescript-transformers","Data.List.ZipList":"purescript-lists","Data.Ord.Unsafe":"purescript-prelude","Data.Semigroup":"purescript-prelude","Test.QuickCheck.Laws.Data.Functor":"purescript-quickcheck-laws","Data.Record":"purescript-record","Test.QuickCheck.Laws.Control.Category":"purescript-quickcheck-laws","Data.Array.NonEmpty":"purescript-arrays","Control.Monad.Reader":"purescript-transformers","Data.Generic.Rep.Enum":"purescript-generics-rep","Data.Generic.Rep.Bounded":"purescript-generics-rep","Control.Monad.Eff":"purescript-eff","Control.Comonad.Traced.Trans":"purescript-transformers","Data.Array.ST.Partial":"purescript-arrays","Data.Generic.Rep.Show":"purescript-generics-rep","Type.Data.Ordering":"purescript-typelevel-prelude","Data.Tuple":"purescript-tuples","Data.Semigroup.Foldable":"purescript-foldable-traversable","Control.Biapply":"purescript-bifunctors","Data.Distributive":"purescript-distributive","Type.Equality":"purescript-type-equality","Control.Alternative":"purescript-control","Data.Semiring":"purescript-prelude","Data.Traversable.Accum":"purescript-foldable-traversable","Data.CommutativeRing":"purescript-prelude","Data.NaturalTransformation":"purescript-prelude","Data.Monoid.Conj":"purescript-monoid","Test.QuickCheck.Laws.Data.EuclideanRing":"purescript-quickcheck-laws","Test.QuickCheck.Laws.Data.Field":"purescript-quickcheck-laws","Data.Unfoldable":"purescript-unfoldable","Control.Monad.Eff.Random":"purescript-random","Data.Typelevel.Num.Aliases":"purescript-typelevel","Test.QuickCheck.Laws.Control.Comonad":"purescript-quickcheck-laws","Control.Comonad.Store.Trans":"purescript-transformers","Control.Monad.ST":"purescript-st","Control.Monad.State.Class":"purescript-transformers","Data.List.Types":"purescript-lists","Data.Functor":"purescript-prelude","Unsafe.Coerce":"purescript-unsafe-coerce","Control.Monad.Writer.Class":"purescript-transformers","Data.Generic.Rep.Ord":"purescript-generics-rep","Test.QuickCheck.Laws.Data.Semigroup":"purescript-quickcheck-laws","Control.Monad.Except":"purescript-transformers","Data.List.Lazy.Types":"purescript-lists","Control.Category":"purescript-prelude","Test.QuickCheck.Arbitrary":"purescript-quickcheck","Control.Monad.Gen.Common":"purescript-gen","Control.Monad.RWS.Trans":"purescript-transformers","Test.QuickCheck.Laws":"purescript-quickcheck-laws","Test.QuickCheck.Data.AlphaNumString":"purescript-quickcheck","Test.QuickCheck.Laws.Data.CommutativeRing":"purescript-quickcheck-laws","Control.Monad.Cont.Trans":"purescript-transformers","Data.Maybe":"purescript-maybe","Type.Row":"purescript-typelevel-prelude","Data.String.Regex.Unsafe":"purescript-strings","Test.QuickCheck.Laws.Control.Alternative":"purescript-quickcheck-laws","Control.Comonad":"purescript-control","Data.Function":"purescript-prelude","Data.List":"purescript-lists","Data.Record.Builder":"purescript-record","Test.QuickCheck.Laws.Data.Semiring":"purescript-quickcheck-laws","Data.Field":"purescript-prelude","Test.QuickCheck.Laws.Data.BoundedEnum":"purescript-quickcheck-laws","Data.List.Lazy":"purescript-lists","Data.Generic.Rep.Eq":"purescript-generics-rep","Data.EuclideanRing":"purescript-prelude","Data.Functor.Invariant":"purescript-invariant","Control.Comonad.Traced":"purescript-transformers","Global.Unsafe":"purescript-globals","Data.String.Unsafe":"purescript-strings","Prelude":"purescript-prelude","Partial.Unsafe":"purescript-partial","Data.Array":"purescript-arrays","Data.Bifunctor.Product":"purescript-bifunctors","Control.Extend":"purescript-control","Data.Unfoldable1":"purescript-unfoldable","Control.Lazy":"purescript-control","Data.Function.Uncurried":"purescript-functions","Control.Monad.Reader.Trans":"purescript-transformers","Control.Comonad.Env.Class":"purescript-transformers","Data.Eq":"purescript-prelude","Data.Either.Nested":"purescript-either","Data.Newtype":"purescript-newtype","Control.Monad.Eff.Console":"purescript-console","Data.Semigroup.Traversable":"purescript-foldable-traversable","Data.Typelevel.Num.Ops":"purescript-typelevel","Data.Bifunctor":"purescript-bifunctors","Data.Monoid.Disj":"purescript-monoid","Control.Monad.Eff.Exception":"purescript-exceptions","Control.Monad.Gen.Class":"purescript-gen","Data.Array.Partial":"purescript-arrays","Data.String.CaseInsensitive":"purescript-strings","Data.Record.ST":"purescript-record","Control.MonadPlus":"purescript-control","Data.Void":"purescript-prelude","Control.MonadZero":"purescript-control","Control.Comonad.Store":"purescript-transformers","Control.Monad.Except.Trans":"purescript-transformers","Test.QuickCheck.Laws.Control.Extend":"purescript-quickcheck-laws","Data.Bifunctor.Joker":"purescript-bifunctors","Data.FunctorWithIndex":"purescript-foldable-traversable","Data.DivisionRing":"purescript-prelude","Data.Bifunctor.Wrap":"purescript-bifunctors","Test.QuickCheck.Laws.Control.MonadPlus":"purescript-quickcheck-laws","PSCI.Support":"purescript-psci-support","Data.Maybe.Last":"purescript-maybe","Data.Unit":"purescript-prelude","Test.QuickCheck.Laws.Control.MonadZero":"purescript-quickcheck-laws","Data.List.NonEmpty":"purescript-lists","Data.List.Lazy.NonEmpty":"purescript-lists","Data.Ordering":"purescript-prelude","Control.Monad.Cont.Class":"purescript-transformers","Data.Typelevel.Bool":"purescript-typelevel","Data.Identity":"purescript-identity","Test.QuickCheck.Laws.Data.Eq":"purescript-quickcheck-laws","Math":"purescript-math","Control.Comonad.Trans.Class":"purescript-transformers","Data.String":"purescript-strings","Control.Plus":"purescript-control","Control.Monad.Eff.Class":"purescript-eff","Test.QuickCheck":"purescript-quickcheck","Type.Row.Effect.Equality":"purescript-type-equality","Partial":"purescript-partial","Control.Comonad.Env.Trans":"purescript-transformers","Test.QuickCheck.Laws.Control.Applicative":"purescript-quickcheck-laws","Global":"purescript-globals","Control.Monad.Reader.Class":"purescript-transformers","Test.QuickCheck.Laws.Data.BooleanAlgebra":"purescript-quickcheck-laws","Data.Monoid.Multiplicative":"purescript-monoid","Type.Data.Symbol":"purescript-typelevel-prelude","Data.Array.ST":"purescript-arrays","Test.QuickCheck.Laws.Data.Ring":"purescript-quickcheck-laws","Control.Monad.Error.Class":"purescript-transformers","Data.Generic.Rep.Monoid":"purescript-generics-rep","Control.Semigroupoid":"purescript-prelude","Data.Monoid.Alternate":"purescript-monoid","Data.Char":"purescript-strings","Data.Generic.Rep":"purescript-generics-rep","Data.Bifunctor.Join":"purescript-bifunctors","Control.Monad.Eff.Exception.Unsafe":"purescript-exceptions","Data.Bifoldable":"purescript-foldable-traversable","Data.Monoid.Endo":"purescript-monoid","Control.Monad.State":"purescript-transformers","Data.List.Partial":"purescript-lists","Data.String.Regex.Flags":"purescript-strings","Test.QuickCheck.Laws.Control.Plus":"purescript-quickcheck-laws","Data.Either":"purescript-either","Type.Prelude":"purescript-typelevel-prelude","Control.Applicative":"purescript-prelude","Data.FoldableWithIndex":"purescript-foldable-traversable","Test.QuickCheck.Gen":"purescript-quickcheck","Control.Monad.Writer":"purescript-transformers","Data.Traversable":"purescript-foldable-traversable","Data.String.Gen":"purescript-strings"},"compilerVersion":"0.11.7"}