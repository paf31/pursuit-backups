{"uploader":"garyb","packageMeta":{"homepage":"https://github.com/garyb/purescript-mote","repository":{"url":"git://github.com/garyb/purescript-mote.git","type":"git"},"ignore":["**/.*","bower_components","node_modules","output","test","bower.json","package.json"],"devDependencies":{"purescript-console":"^4.1.0","purescript-test-unit":"^14.0.0","purescript-spec":"^3.0.0"},"dependencies":{"purescript-these":"^4.0.0","purescript-arrays":"^5.1.1","purescript-transformers":"^4.1.0"},"name":"purescript-mote","license":["MIT"]},"tagTime":"2019-01-09T14:19:19+0000","modules":[{"reExports":[{"moduleName":{"package":null,"item":["Mote","Monad"]},"declarations":[{"children":[{"comments":null,"title":"newtypeMoteT","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Newtype"],"Newtype"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Mote","Monad"],"MoteT"]},{"tag":"TypeVar","contents":"bracket"}]},{"tag":"TypeVar","contents":"test"}]},{"tag":"TypeVar","contents":"m"}]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeWildcard","contents":{"start":[49,66],"name":"/home/travis/build/garyb/purescript-mote/src/Mote/Monad.purs","end":[49,67]}}]}},"sourceSpan":{"start":[49,8],"name":"/home/travis/build/garyb/purescript-mote/src/Mote/Monad.purs","end":[49,67]}},{"comments":null,"title":"functorMoteT","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","Functor"],"Functor"],"constraintArgs":[{"tag":"TypeVar","contents":"m"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Functor"],"Functor"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Mote","Monad"],"MoteT"]},{"tag":"TypeVar","contents":"bracket"}]},{"tag":"TypeVar","contents":"test"}]},{"tag":"TypeVar","contents":"m"}]}]}},"sourceSpan":{"start":[50,16],"name":"/home/travis/build/garyb/purescript-mote/src/Mote/Monad.purs","end":[50,84]}},{"comments":null,"title":"applyMoteT","info":{"declType":"instance","dependencies":[{"constraintClass":[["Control","Apply"],"Apply"],"constraintArgs":[{"tag":"TypeVar","contents":"m"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Apply"],"Apply"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Mote","Monad"],"MoteT"]},{"tag":"TypeVar","contents":"bracket"}]},{"tag":"TypeVar","contents":"test"}]},{"tag":"TypeVar","contents":"m"}]}]}},"sourceSpan":{"start":[51,16],"name":"/home/travis/build/garyb/purescript-mote/src/Mote/Monad.purs","end":[51,78]}},{"comments":null,"title":"applicativeMoteT","info":{"declType":"instance","dependencies":[{"constraintClass":[["Control","Applicative"],"Applicative"],"constraintArgs":[{"tag":"TypeVar","contents":"m"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Applicative"],"Applicative"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Mote","Monad"],"MoteT"]},{"tag":"TypeVar","contents":"bracket"}]},{"tag":"TypeVar","contents":"test"}]},{"tag":"TypeVar","contents":"m"}]}]}},"sourceSpan":{"start":[52,16],"name":"/home/travis/build/garyb/purescript-mote/src/Mote/Monad.purs","end":[52,96]}},{"comments":null,"title":"bindMoteT","info":{"declType":"instance","dependencies":[{"constraintClass":[["Control","Bind"],"Bind"],"constraintArgs":[{"tag":"TypeVar","contents":"m"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Bind"],"Bind"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Mote","Monad"],"MoteT"]},{"tag":"TypeVar","contents":"bracket"}]},{"tag":"TypeVar","contents":"test"}]},{"tag":"TypeVar","contents":"m"}]}]}},"sourceSpan":{"start":[53,16],"name":"/home/travis/build/garyb/purescript-mote/src/Mote/Monad.purs","end":[53,75]}},{"comments":null,"title":"monadMoteT","info":{"declType":"instance","dependencies":[{"constraintClass":[["Control","Monad"],"Monad"],"constraintArgs":[{"tag":"TypeVar","contents":"m"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad"],"Monad"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Mote","Monad"],"MoteT"]},{"tag":"TypeVar","contents":"bracket"}]},{"tag":"TypeVar","contents":"test"}]},{"tag":"TypeVar","contents":"m"}]}]}},"sourceSpan":{"start":[54,16],"name":"/home/travis/build/garyb/purescript-mote/src/Mote/Monad.purs","end":[54,78]}},{"comments":null,"title":"monadTransMoteT","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad","Trans","Class"],"MonadTrans"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Mote","Monad"],"MoteT"]},{"tag":"TypeVar","contents":"bracket"}]},{"tag":"TypeVar","contents":"test"}]}]}},"sourceSpan":{"start":[55,16],"name":"/home/travis/build/garyb/purescript-mote/src/Mote/Monad.purs","end":[55,75]}},{"comments":null,"title":"monadAskMoteT","info":{"declType":"instance","dependencies":[{"constraintClass":[["Control","Monad","Reader","Class"],"MonadAsk"],"constraintArgs":[{"tag":"TypeVar","contents":"r"},{"tag":"TypeVar","contents":"m"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad","Reader","Class"],"MonadAsk"]},{"tag":"TypeVar","contents":"r"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Mote","Monad"],"MoteT"]},{"tag":"TypeVar","contents":"bracket"}]},{"tag":"TypeVar","contents":"test"}]},{"tag":"TypeVar","contents":"m"}]}]}},"sourceSpan":{"start":[56,16],"name":"/home/travis/build/garyb/purescript-mote/src/Mote/Monad.purs","end":[56,91]}},{"comments":null,"title":"monadReaderMoteT","info":{"declType":"instance","dependencies":[{"constraintClass":[["Control","Monad","Reader","Class"],"MonadReader"],"constraintArgs":[{"tag":"TypeVar","contents":"r"},{"tag":"TypeVar","contents":"m"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad","Reader","Class"],"MonadReader"]},{"tag":"TypeVar","contents":"r"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Mote","Monad"],"MoteT"]},{"tag":"TypeVar","contents":"bracket"}]},{"tag":"TypeVar","contents":"test"}]},{"tag":"TypeVar","contents":"m"}]}]}},"sourceSpan":{"start":[57,16],"name":"/home/travis/build/garyb/purescript-mote/src/Mote/Monad.purs","end":[57,100]}},{"comments":null,"title":"monadEffectMoteT","info":{"declType":"instance","dependencies":[{"constraintClass":[["Effect","Class"],"MonadEffect"],"constraintArgs":[{"tag":"TypeVar","contents":"m"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Effect","Class"],"MonadEffect"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Mote","Monad"],"MoteT"]},{"tag":"TypeVar","contents":"bracket"}]},{"tag":"TypeVar","contents":"test"}]},{"tag":"TypeVar","contents":"m"}]}]}},"sourceSpan":{"start":[58,16],"name":"/home/travis/build/garyb/purescript-mote/src/Mote/Monad.purs","end":[58,96]}}],"comments":"The main `MoteT` / `Mote` monadic DSL used to describe tests and groups of\ntests.\n\nAfter description via this DSL a `Plan` can be generated, that can then\nfinally be interpreted into some target monad.\n\n- The `bracket` type represents a type of kind `Type -> Type` kind in which\n  bracketing can be dealt with. This type is higher kinded as the \"before\"\n  part of a bracket is expressed by a type like `bracket r`, so that the\n  \"after\" part can consume it as `r -> bracket Unit` later. If bracketing\n  is not required, setting this to `Const Void` is a good way to\n  communicate that it is unused/unusable.\n- The `test` type represents the type of tests. The kind here is only\n  required to be `Type` but will usually be something like `m Unit` (where\n  `m` here is some monad to run the tests in, not the `m` of `MoteT`).\n- The `m` is an underlying monad that can be used to perform effects while\n  constructing the test suite. This allows for tests to be generated from\n  the filesystem, reading from a `Reader`-based environment, etc.\n\nThe `bracket` and `test` types are separated to allow for tests and\nbracketing to have different constraints and capabilities. In some cases\nit might be desirable to run tests with an alternative `Reader`, or\nrestrict the kind of effects tests are allowed to perform compared with\nthe bracketing code.\n","title":"MoteT","info":{"declType":"data","dataDeclType":"newtype","typeArguments":[["bracket",null],["test",null],["m",null],["a",null]]},"sourceSpan":{"start":[43,1],"name":"/home/travis/build/garyb/purescript-mote/src/Mote/Monad.purs","end":[43,88]}},{"children":[],"comments":"A non-effectful version of `MoteT`. This is for cases where groups and\ntests can be described purely.\n","title":"Mote","info":{"arguments":[["bracket",null],["test",null]],"declType":"typeSynonym","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Mote","Monad"],"MoteT"]},{"tag":"TypeVar","contents":"bracket"}]},{"tag":"TypeVar","contents":"test"}]},{"tag":"TypeConstructor","contents":[["Data","Identity"],"Identity"]}]}},"sourceSpan":{"start":[47,1],"name":"/home/travis/build/garyb/purescript-mote/src/Mote/Monad.purs","end":[47,53]}},{"children":[],"comments":"Describes a new test.\n","title":"test","info":{"declType":"value","type":{"tag":"ForAll","contents":["m",{"tag":"ForAll","contents":["test",{"tag":"ForAll","contents":["bracket",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Control","Monad"],"Monad"],"constraintArgs":[{"tag":"TypeVar","contents":"m"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"test"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Mote","Monad"],"MoteT"]},{"tag":"TypeVar","contents":"bracket"}]},{"tag":"TypeVar","contents":"test"}]},{"tag":"TypeVar","contents":"m"}]},{"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}]}]}]},null]},null]},null]}},"sourceSpan":{"start":[87,1],"name":"/home/travis/build/garyb/purescript-mote/src/Mote/Monad.purs","end":[92,31]}},{"children":[],"comments":"Marks the following group(s) and/or test(s) to be skipped when generating\na plan.\n","title":"skip","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["m",{"tag":"ForAll","contents":["test",{"tag":"ForAll","contents":["bracket",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Control","Monad"],"Monad"],"constraintArgs":[{"tag":"TypeVar","contents":"m"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Mote","Monad"],"MoteT"]},{"tag":"TypeVar","contents":"bracket"}]},{"tag":"TypeVar","contents":"test"}]},{"tag":"TypeVar","contents":"m"}]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Mote","Monad"],"MoteT"]},{"tag":"TypeVar","contents":"bracket"}]},{"tag":"TypeVar","contents":"test"}]},{"tag":"TypeVar","contents":"m"}]},{"tag":"TypeVar","contents":"a"}]}]}]},null]},null]},null]},null]}},"sourceSpan":{"start":[97,1],"name":"/home/travis/build/garyb/purescript-mote/src/Mote/Monad.purs","end":[101,28]}},{"children":[],"comments":"Generate a `Plan` from a `MoteT`, running effects as necessary. The result\nof this can then be interpreted to actually run the suites and tests\ndescribed in the `MoteT`.\n","title":"planT","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["m",{"tag":"ForAll","contents":["test",{"tag":"ForAll","contents":["bracket",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Control","Monad"],"Monad"],"constraintArgs":[{"tag":"TypeVar","contents":"m"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Mote","Monad"],"MoteT"]},{"tag":"TypeVar","contents":"bracket"}]},{"tag":"TypeVar","contents":"test"}]},{"tag":"TypeVar","contents":"m"}]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"m"},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Mote","Plan"],"Plan"]},{"tag":"TypeVar","contents":"bracket"}]},{"tag":"TypeVar","contents":"test"}]}}]}]}]},null]},null]},null]},null]}},"sourceSpan":{"start":[134,1],"name":"/home/travis/build/garyb/purescript-mote/src/Mote/Monad.purs","end":[138,32]}},{"children":[],"comments":"Generate a `Plan` from a `Mote`. The result of this can then be\ninterpreted to actually run the suites and tests described in the `Mote`.\n","title":"plan","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["test",{"tag":"ForAll","contents":["bracket",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Mote","Monad"],"Mote"]},{"tag":"TypeVar","contents":"bracket"}]},{"tag":"TypeVar","contents":"test"}]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Mote","Plan"],"Plan"]},{"tag":"TypeVar","contents":"bracket"}]},{"tag":"TypeVar","contents":"test"}]}]},null]},null]},null]}},"sourceSpan":{"start":[128,1],"name":"/home/travis/build/garyb/purescript-mote/src/Mote/Monad.purs","end":[128,77]}},{"children":[],"comments":"Marks the following group(s) and/or test(s) to be added to a plan while\nskipping any other siblings that are not also tagged with `only`.\n","title":"only","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["m",{"tag":"ForAll","contents":["test",{"tag":"ForAll","contents":["bracket",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Control","Monad"],"Monad"],"constraintArgs":[{"tag":"TypeVar","contents":"m"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Mote","Monad"],"MoteT"]},{"tag":"TypeVar","contents":"bracket"}]},{"tag":"TypeVar","contents":"test"}]},{"tag":"TypeVar","contents":"m"}]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Mote","Monad"],"MoteT"]},{"tag":"TypeVar","contents":"bracket"}]},{"tag":"TypeVar","contents":"test"}]},{"tag":"TypeVar","contents":"m"}]},{"tag":"TypeVar","contents":"a"}]}]}]},null]},null]},null]},null]}},"sourceSpan":{"start":[106,1],"name":"/home/travis/build/garyb/purescript-mote/src/Mote/Monad.purs","end":[110,28]}},{"children":[],"comments":"Describes a new group. Groups can contain further groups or tests, or a\ncombination of both.\n","title":"group","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["m",{"tag":"ForAll","contents":["test",{"tag":"ForAll","contents":["bracket",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Control","Monad"],"Monad"],"constraintArgs":[{"tag":"TypeVar","contents":"m"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Mote","Monad"],"MoteT"]},{"tag":"TypeVar","contents":"bracket"}]},{"tag":"TypeVar","contents":"test"}]},{"tag":"TypeVar","contents":"m"}]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Mote","Monad"],"MoteT"]},{"tag":"TypeVar","contents":"bracket"}]},{"tag":"TypeVar","contents":"test"}]},{"tag":"TypeVar","contents":"m"}]},{"tag":"TypeVar","contents":"a"}]}]}]}]},null]},null]},null]},null]}},"sourceSpan":{"start":[78,1],"name":"/home/travis/build/garyb/purescript-mote/src/Mote/Monad.purs","end":[83,28]}},{"children":[],"comments":"Specifies actions to run before and after the following group(s) and/or\ntest(s).\n\nThe bracketing is applied to every following group or test individually;\nit will be repeated when each group or test is run.\n","title":"bracket","info":{"declType":"value","type":{"tag":"ForAll","contents":["resource",{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["m",{"tag":"ForAll","contents":["test",{"tag":"ForAll","contents":["bracket",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Control","Monad"],"Monad"],"constraintArgs":[{"tag":"TypeVar","contents":"m"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Record"]},{"tag":"RCons","contents":["before",{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"bracket"},{"tag":"TypeVar","contents":"resource"}]},{"tag":"RCons","contents":["after",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"resource"}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"bracket"},{"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}]},{"tag":"REmpty"}]}]}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Mote","Monad"],"MoteT"]},{"tag":"TypeVar","contents":"bracket"}]},{"tag":"TypeVar","contents":"test"}]},{"tag":"TypeVar","contents":"m"}]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Mote","Monad"],"MoteT"]},{"tag":"TypeVar","contents":"bracket"}]},{"tag":"TypeVar","contents":"test"}]},{"tag":"TypeVar","contents":"m"}]},{"tag":"TypeVar","contents":"a"}]}]}]}]},null]},null]},null]},null]},null]}},"sourceSpan":{"start":[118,1],"name":"/home/travis/build/garyb/purescript-mote/src/Mote/Monad.purs","end":[123,28]}}]},{"moduleName":{"package":null,"item":["Mote","Plan"]},"declarations":[{"children":[],"comments":"The plan for running a test suite.\n","title":"Plan","info":{"declType":"data","dataDeclType":"newtype","typeArguments":[["b",null],["t",null]]},"sourceSpan":{"start":[8,1],"name":"/home/travis/build/garyb/purescript-mote/src/Mote/Plan.purs","end":[8,47]}},{"children":[],"comments":"Eliminates each `PlanItem` constructor and sequences actions within a\n`Plan`.\n\nThis function can be used to inspect the plan, or build derivatives of it,\nor to define an interpreter for the plan that will actually run the tests\nwithin.\n\n- The first function handles tests.\n- The second function handles skipped tests.\n- The third function handles groups of tests.\n- The fourth function deals with sequencing the resulting values from the\n  previous handlers.\n\nThis fold only applies one layer at a time, so when building an interpreter\nit will need to be called recursively within the group handler.\n","title":"foldPlan","info":{"declType":"value","type":{"tag":"ForAll","contents":["r",{"tag":"ForAll","contents":["i",{"tag":"ForAll","contents":["t",{"tag":"ForAll","contents":["b",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Mote","Entry"],"Entry"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeVar","contents":"t"}]}]},{"tag":"TypeVar","contents":"i"}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeVar","contents":"i"}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Mote","Entry"],"Entry"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Mote","Plan"],"Plan"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeVar","contents":"t"}]}}]}]},{"tag":"TypeVar","contents":"i"}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"i"}]}]},{"tag":"TypeVar","contents":"r"}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Mote","Plan"],"Plan"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeVar","contents":"t"}]}]},{"tag":"TypeVar","contents":"r"}]}]}]}]}]},null]},null]},null]},null]}},"sourceSpan":{"start":[31,1],"name":"/home/travis/build/garyb/purescript-mote/src/Mote/Plan.purs","end":[38,7]}}]}],"name":"Mote","comments":null,"declarations":[]},{"reExports":[],"name":"Mote.Description","comments":null,"declarations":[{"children":[{"comments":null,"title":"Test","info":{"arguments":[{"tag":"TypeConstructor","contents":[["Mote","Description"],"RunMode"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Mote","Entry"],"Entry"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeVar","contents":"t"}]}}],"declType":"dataConstructor"},"sourceSpan":null},{"comments":null,"title":"Group","info":{"arguments":[{"tag":"TypeConstructor","contents":[["Mote","Description"],"RunMode"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Mote","Entry"],"Entry"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Mote","Description"],"Description"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeVar","contents":"t"}]}}]}}]}}],"declType":"dataConstructor"},"sourceSpan":null},{"comments":null,"title":"functorDescription","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Functor"],"Functor"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Mote","Description"],"Description"]},{"tag":"TypeVar","contents":"b"}]}]}},"sourceSpan":{"start":[14,8],"name":"/home/travis/build/garyb/purescript-mote/src/Mote/Description.purs","end":[14,62]}}],"comments":"The data structure backing the `MoteT` DSL.\n","title":"Description","info":{"declType":"data","dataDeclType":"data","typeArguments":[["b",null],["t",null]]},"sourceSpan":{"start":[10,1],"name":"/home/travis/build/garyb/purescript-mote/src/Mote/Description.purs","end":[12,54]}},{"children":[],"comments":"Basic constructor for `Test` with a label and value.\n","title":"test","info":{"declType":"value","type":{"tag":"ForAll","contents":["t",{"tag":"ForAll","contents":["b",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"t"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Mote","Description"],"Description"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeVar","contents":"t"}]}]}]},null]},null]}},"sourceSpan":{"start":[17,1],"name":"/home/travis/build/garyb/purescript-mote/src/Mote/Description.purs","end":[17,51]}},{"children":[],"comments":"Basic constructor for `Group` with a label and inner entries.\n","title":"group","info":{"declType":"value","type":{"tag":"ForAll","contents":["t",{"tag":"ForAll","contents":["b",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Mote","Description"],"Description"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeVar","contents":"t"}]}}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Mote","Description"],"Description"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeVar","contents":"t"}]}]}]},null]},null]}},"sourceSpan":{"start":[21,1],"name":"/home/travis/build/garyb/purescript-mote/src/Mote/Description.purs","end":[25,21]}},{"children":[{"comments":null,"title":"Normal","info":{"arguments":[],"declType":"dataConstructor"},"sourceSpan":null},{"comments":null,"title":"Only","info":{"arguments":[],"declType":"dataConstructor"},"sourceSpan":null},{"comments":null,"title":"Skip","info":{"arguments":[],"declType":"dataConstructor"},"sourceSpan":null}],"comments":"The run mode option for a `Description` item. Used when building a `Plan`\nfrom a `Description`, this directs which tests should be skipped.\n","title":"RunMode","info":{"declType":"data","dataDeclType":"data","typeArguments":[]},"sourceSpan":{"start":[30,1],"name":"/home/travis/build/garyb/purescript-mote/src/Mote/Description.purs","end":[30,36]}},{"children":[],"comments":"Sets the `RunMode` of a `Description`.\n","title":"setRunMode","info":{"declType":"value","type":{"tag":"ForAll","contents":["t",{"tag":"ForAll","contents":["b",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Mote","Description"],"RunMode"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Mote","Description"],"Description"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeVar","contents":"t"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Mote","Description"],"Description"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeVar","contents":"t"}]}]}]},null]},null]}},"sourceSpan":{"start":[33,1],"name":"/home/travis/build/garyb/purescript-mote/src/Mote/Description.purs","end":[37,21]}},{"children":[],"comments":"Sets the `bracket` value of a `Description`.\n","title":"setBracket","info":{"declType":"value","type":{"tag":"ForAll","contents":["r",{"tag":"ForAll","contents":["t",{"tag":"ForAll","contents":["b",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Record"]},{"tag":"RCons","contents":["before",{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"b"},{"tag":"TypeVar","contents":"r"}]},{"tag":"RCons","contents":["after",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"r"}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"b"},{"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}]},{"tag":"REmpty"}]}]}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Mote","Description"],"Description"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeVar","contents":"t"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Mote","Description"],"Description"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeVar","contents":"t"}]}]}]},null]},null]},null]}},"sourceSpan":{"start":[45,1],"name":"/home/travis/build/garyb/purescript-mote/src/Mote/Description.purs","end":[49,21]}}]},{"reExports":[],"name":"Mote.Entry","comments":null,"declarations":[{"children":[],"comments":"Generic entry type used in the description of groups and items in both\n`Description` and `Plan` representations.\n","title":"Entry","info":{"arguments":[["b",null],["v",null]],"declType":"typeSynonym","type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Record"]},{"tag":"RCons","contents":["label",{"tag":"TypeConstructor","contents":[["Prim"],"String"]},{"tag":"RCons","contents":["bracket",{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Mote","Entry"],"Bracket"]},{"tag":"TypeVar","contents":"b"}]}}]},{"tag":"RCons","contents":["value",{"tag":"TypeVar","contents":"v"},{"tag":"REmpty"}]}]}]}]}},"sourceSpan":{"start":[9,1],"name":"/home/travis/build/garyb/purescript-mote/src/Mote/Entry.purs","end":[13,4]}},{"children":[],"comments":"Creates an entry with the specifed label and no bracket action.\n","title":"entry","info":{"declType":"value","type":{"tag":"ForAll","contents":["v",{"tag":"ForAll","contents":["b",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"v"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Mote","Entry"],"Entry"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeVar","contents":"v"}]}]}]},null]},null]}},"sourceSpan":{"start":[16,1],"name":"/home/travis/build/garyb/purescript-mote/src/Mote/Entry.purs","end":[16,46]}},{"children":[{"comments":null,"title":"Bracket","info":{"arguments":[{"tag":"ParensInType","contents":{"tag":"ForAll","contents":["x",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"ForAll","contents":["r",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"b"},{"tag":"TypeVar","contents":"r"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"r"}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"b"},{"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}]}}]},{"tag":"TypeVar","contents":"x"}]}]},null]}}]},{"tag":"TypeVar","contents":"x"}]},null]}}],"declType":"dataConstructor"},"sourceSpan":null}],"comments":"A data type used to carry bracketing for an entry. The `r` type is\nexistentially hidden so that the resources created and freed within\nan entry can vary between items in a suite or plan.\n","title":"Bracket","info":{"declType":"data","dataDeclType":"newtype","typeArguments":[["b",null]]},"sourceSpan":{"start":[22,1],"name":"/home/travis/build/garyb/purescript-mote/src/Mote/Entry.purs","end":[22,83]}},{"children":[],"comments":"Creates a bracket value for the `Entry` record. The first argument runs\nbefore the group/item, possibly generating some kind of resource r. The\nsecond argument runs on test completion, accepting the `r` generated in\nallocation to allow it to de-allocate/clean up.\n","title":"bracket","info":{"declType":"value","type":{"tag":"ForAll","contents":["r",{"tag":"ForAll","contents":["b",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"b"},{"tag":"TypeVar","contents":"r"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"r"}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"b"},{"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Mote","Entry"],"Bracket"]},{"tag":"TypeVar","contents":"b"}]}]}]},null]},null]}},"sourceSpan":{"start":[28,1],"name":"/home/travis/build/garyb/purescript-mote/src/Mote/Entry.purs","end":[28,57]}},{"children":[],"comments":"Unwraps an existentially hidden `Bracket` value.\n","title":"unBracket","info":{"declType":"value","type":{"tag":"ForAll","contents":["o",{"tag":"ForAll","contents":["b",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"ForAll","contents":["r",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"b"},{"tag":"TypeVar","contents":"r"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"r"}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"b"},{"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}]}}]},{"tag":"TypeVar","contents":"o"}]}]},null]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Mote","Entry"],"Bracket"]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeVar","contents":"o"}]}]},null]},null]}},"sourceSpan":{"start":[32,1],"name":"/home/travis/build/garyb/purescript-mote/src/Mote/Entry.purs","end":[36,7]}}]},{"reExports":[],"name":"Mote.Monad","comments":null,"declarations":[{"children":[{"comments":null,"title":"MoteT","info":{"arguments":[{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad","Writer","Trans"],"WriterT"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Mote","Description"],"Description"]},{"tag":"TypeVar","contents":"bracket"}]},{"tag":"TypeVar","contents":"test"}]}}]}}]},{"tag":"TypeVar","contents":"m"}]},{"tag":"TypeVar","contents":"a"}]}}],"declType":"dataConstructor"},"sourceSpan":null},{"comments":null,"title":"newtypeMoteT","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Newtype"],"Newtype"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Mote","Monad"],"MoteT"]},{"tag":"TypeVar","contents":"bracket"}]},{"tag":"TypeVar","contents":"test"}]},{"tag":"TypeVar","contents":"m"}]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeWildcard","contents":{"start":[49,66],"name":"/home/travis/build/garyb/purescript-mote/src/Mote/Monad.purs","end":[49,67]}}]}},"sourceSpan":{"start":[49,8],"name":"/home/travis/build/garyb/purescript-mote/src/Mote/Monad.purs","end":[49,67]}},{"comments":null,"title":"functorMoteT","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","Functor"],"Functor"],"constraintArgs":[{"tag":"TypeVar","contents":"m"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Functor"],"Functor"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Mote","Monad"],"MoteT"]},{"tag":"TypeVar","contents":"bracket"}]},{"tag":"TypeVar","contents":"test"}]},{"tag":"TypeVar","contents":"m"}]}]}},"sourceSpan":{"start":[50,16],"name":"/home/travis/build/garyb/purescript-mote/src/Mote/Monad.purs","end":[50,84]}},{"comments":null,"title":"applyMoteT","info":{"declType":"instance","dependencies":[{"constraintClass":[["Control","Apply"],"Apply"],"constraintArgs":[{"tag":"TypeVar","contents":"m"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Apply"],"Apply"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Mote","Monad"],"MoteT"]},{"tag":"TypeVar","contents":"bracket"}]},{"tag":"TypeVar","contents":"test"}]},{"tag":"TypeVar","contents":"m"}]}]}},"sourceSpan":{"start":[51,16],"name":"/home/travis/build/garyb/purescript-mote/src/Mote/Monad.purs","end":[51,78]}},{"comments":null,"title":"applicativeMoteT","info":{"declType":"instance","dependencies":[{"constraintClass":[["Control","Applicative"],"Applicative"],"constraintArgs":[{"tag":"TypeVar","contents":"m"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Applicative"],"Applicative"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Mote","Monad"],"MoteT"]},{"tag":"TypeVar","contents":"bracket"}]},{"tag":"TypeVar","contents":"test"}]},{"tag":"TypeVar","contents":"m"}]}]}},"sourceSpan":{"start":[52,16],"name":"/home/travis/build/garyb/purescript-mote/src/Mote/Monad.purs","end":[52,96]}},{"comments":null,"title":"bindMoteT","info":{"declType":"instance","dependencies":[{"constraintClass":[["Control","Bind"],"Bind"],"constraintArgs":[{"tag":"TypeVar","contents":"m"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Bind"],"Bind"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Mote","Monad"],"MoteT"]},{"tag":"TypeVar","contents":"bracket"}]},{"tag":"TypeVar","contents":"test"}]},{"tag":"TypeVar","contents":"m"}]}]}},"sourceSpan":{"start":[53,16],"name":"/home/travis/build/garyb/purescript-mote/src/Mote/Monad.purs","end":[53,75]}},{"comments":null,"title":"monadMoteT","info":{"declType":"instance","dependencies":[{"constraintClass":[["Control","Monad"],"Monad"],"constraintArgs":[{"tag":"TypeVar","contents":"m"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad"],"Monad"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Mote","Monad"],"MoteT"]},{"tag":"TypeVar","contents":"bracket"}]},{"tag":"TypeVar","contents":"test"}]},{"tag":"TypeVar","contents":"m"}]}]}},"sourceSpan":{"start":[54,16],"name":"/home/travis/build/garyb/purescript-mote/src/Mote/Monad.purs","end":[54,78]}},{"comments":null,"title":"monadTransMoteT","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad","Trans","Class"],"MonadTrans"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Mote","Monad"],"MoteT"]},{"tag":"TypeVar","contents":"bracket"}]},{"tag":"TypeVar","contents":"test"}]}]}},"sourceSpan":{"start":[55,16],"name":"/home/travis/build/garyb/purescript-mote/src/Mote/Monad.purs","end":[55,75]}},{"comments":null,"title":"monadAskMoteT","info":{"declType":"instance","dependencies":[{"constraintClass":[["Control","Monad","Reader","Class"],"MonadAsk"],"constraintArgs":[{"tag":"TypeVar","contents":"r"},{"tag":"TypeVar","contents":"m"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad","Reader","Class"],"MonadAsk"]},{"tag":"TypeVar","contents":"r"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Mote","Monad"],"MoteT"]},{"tag":"TypeVar","contents":"bracket"}]},{"tag":"TypeVar","contents":"test"}]},{"tag":"TypeVar","contents":"m"}]}]}},"sourceSpan":{"start":[56,16],"name":"/home/travis/build/garyb/purescript-mote/src/Mote/Monad.purs","end":[56,91]}},{"comments":null,"title":"monadReaderMoteT","info":{"declType":"instance","dependencies":[{"constraintClass":[["Control","Monad","Reader","Class"],"MonadReader"],"constraintArgs":[{"tag":"TypeVar","contents":"r"},{"tag":"TypeVar","contents":"m"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad","Reader","Class"],"MonadReader"]},{"tag":"TypeVar","contents":"r"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Mote","Monad"],"MoteT"]},{"tag":"TypeVar","contents":"bracket"}]},{"tag":"TypeVar","contents":"test"}]},{"tag":"TypeVar","contents":"m"}]}]}},"sourceSpan":{"start":[57,16],"name":"/home/travis/build/garyb/purescript-mote/src/Mote/Monad.purs","end":[57,100]}},{"comments":null,"title":"monadEffectMoteT","info":{"declType":"instance","dependencies":[{"constraintClass":[["Effect","Class"],"MonadEffect"],"constraintArgs":[{"tag":"TypeVar","contents":"m"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Effect","Class"],"MonadEffect"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Mote","Monad"],"MoteT"]},{"tag":"TypeVar","contents":"bracket"}]},{"tag":"TypeVar","contents":"test"}]},{"tag":"TypeVar","contents":"m"}]}]}},"sourceSpan":{"start":[58,16],"name":"/home/travis/build/garyb/purescript-mote/src/Mote/Monad.purs","end":[58,96]}}],"comments":"The main `MoteT` / `Mote` monadic DSL used to describe tests and groups of\ntests.\n\nAfter description via this DSL a `Plan` can be generated, that can then\nfinally be interpreted into some target monad.\n\n- The `bracket` type represents a type of kind `Type -> Type` kind in which\n  bracketing can be dealt with. This type is higher kinded as the \"before\"\n  part of a bracket is expressed by a type like `bracket r`, so that the\n  \"after\" part can consume it as `r -> bracket Unit` later. If bracketing\n  is not required, setting this to `Const Void` is a good way to\n  communicate that it is unused/unusable.\n- The `test` type represents the type of tests. The kind here is only\n  required to be `Type` but will usually be something like `m Unit` (where\n  `m` here is some monad to run the tests in, not the `m` of `MoteT`).\n- The `m` is an underlying monad that can be used to perform effects while\n  constructing the test suite. This allows for tests to be generated from\n  the filesystem, reading from a `Reader`-based environment, etc.\n\nThe `bracket` and `test` types are separated to allow for tests and\nbracketing to have different constraints and capabilities. In some cases\nit might be desirable to run tests with an alternative `Reader`, or\nrestrict the kind of effects tests are allowed to perform compared with\nthe bracketing code.\n","title":"MoteT","info":{"declType":"data","dataDeclType":"newtype","typeArguments":[["bracket",null],["test",null],["m",null],["a",null]]},"sourceSpan":{"start":[43,1],"name":"/home/travis/build/garyb/purescript-mote/src/Mote/Monad.purs","end":[43,88]}},{"children":[],"comments":"A non-effectful version of `MoteT`. This is for cases where groups and\ntests can be described purely.\n","title":"Mote","info":{"arguments":[["bracket",null],["test",null]],"declType":"typeSynonym","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Mote","Monad"],"MoteT"]},{"tag":"TypeVar","contents":"bracket"}]},{"tag":"TypeVar","contents":"test"}]},{"tag":"TypeConstructor","contents":[["Data","Identity"],"Identity"]}]}},"sourceSpan":{"start":[47,1],"name":"/home/travis/build/garyb/purescript-mote/src/Mote/Monad.purs","end":[47,53]}},{"children":[],"comments":"Changes the `m` effect monad used during test suite construction.\n","title":"hoist","info":{"declType":"value","type":{"tag":"ForAll","contents":["n",{"tag":"ForAll","contents":["m",{"tag":"ForAll","contents":["test",{"tag":"ForAll","contents":["bracket",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"BinaryNoParensType","contents":[{"tag":"TypeOp","contents":[["Data","NaturalTransformation"],"~>"]},{"tag":"TypeVar","contents":"m"},{"tag":"TypeVar","contents":"n"}]}}]},{"tag":"BinaryNoParensType","contents":[{"tag":"TypeOp","contents":[["Data","NaturalTransformation"],"~>"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Mote","Monad"],"MoteT"]},{"tag":"TypeVar","contents":"bracket"}]},{"tag":"TypeVar","contents":"test"}]},{"tag":"TypeVar","contents":"m"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Mote","Monad"],"MoteT"]},{"tag":"TypeVar","contents":"bracket"}]},{"tag":"TypeVar","contents":"test"}]},{"tag":"TypeVar","contents":"n"}]}]}]},null]},null]},null]},null]}},"sourceSpan":{"start":[61,1],"name":"/home/travis/build/garyb/purescript-mote/src/Mote/Monad.purs","end":[65,26]}},{"children":[],"comments":null,"title":"mapTest","info":{"declType":"value","type":{"tag":"ForAll","contents":["m",{"tag":"ForAll","contents":["test'",{"tag":"ForAll","contents":["test",{"tag":"ForAll","contents":["bracket",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Functor"],"Functor"],"constraintArgs":[{"tag":"TypeVar","contents":"m"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"test"}]},{"tag":"TypeVar","contents":"test'"}]}}]},{"tag":"BinaryNoParensType","contents":[{"tag":"TypeOp","contents":[["Data","NaturalTransformation"],"~>"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Mote","Monad"],"MoteT"]},{"tag":"TypeVar","contents":"bracket"}]},{"tag":"TypeVar","contents":"test"}]},{"tag":"TypeVar","contents":"m"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Mote","Monad"],"MoteT"]},{"tag":"TypeVar","contents":"bracket"}]},{"tag":"TypeVar","contents":"test'"}]},{"tag":"TypeVar","contents":"m"}]}]}]}]},null]},null]},null]},null]}},"sourceSpan":{"start":[68,1],"name":"/home/travis/build/garyb/purescript-mote/src/Mote/Monad.purs","end":[73,27]}},{"children":[],"comments":"Describes a new group. Groups can contain further groups or tests, or a\ncombination of both.\n","title":"group","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["m",{"tag":"ForAll","contents":["test",{"tag":"ForAll","contents":["bracket",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Control","Monad"],"Monad"],"constraintArgs":[{"tag":"TypeVar","contents":"m"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Mote","Monad"],"MoteT"]},{"tag":"TypeVar","contents":"bracket"}]},{"tag":"TypeVar","contents":"test"}]},{"tag":"TypeVar","contents":"m"}]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Mote","Monad"],"MoteT"]},{"tag":"TypeVar","contents":"bracket"}]},{"tag":"TypeVar","contents":"test"}]},{"tag":"TypeVar","contents":"m"}]},{"tag":"TypeVar","contents":"a"}]}]}]}]},null]},null]},null]},null]}},"sourceSpan":{"start":[78,1],"name":"/home/travis/build/garyb/purescript-mote/src/Mote/Monad.purs","end":[83,28]}},{"children":[],"comments":"Describes a new test.\n","title":"test","info":{"declType":"value","type":{"tag":"ForAll","contents":["m",{"tag":"ForAll","contents":["test",{"tag":"ForAll","contents":["bracket",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Control","Monad"],"Monad"],"constraintArgs":[{"tag":"TypeVar","contents":"m"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"test"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Mote","Monad"],"MoteT"]},{"tag":"TypeVar","contents":"bracket"}]},{"tag":"TypeVar","contents":"test"}]},{"tag":"TypeVar","contents":"m"}]},{"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}]}]}]},null]},null]},null]}},"sourceSpan":{"start":[87,1],"name":"/home/travis/build/garyb/purescript-mote/src/Mote/Monad.purs","end":[92,31]}},{"children":[],"comments":"Marks the following group(s) and/or test(s) to be skipped when generating\na plan.\n","title":"skip","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["m",{"tag":"ForAll","contents":["test",{"tag":"ForAll","contents":["bracket",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Control","Monad"],"Monad"],"constraintArgs":[{"tag":"TypeVar","contents":"m"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Mote","Monad"],"MoteT"]},{"tag":"TypeVar","contents":"bracket"}]},{"tag":"TypeVar","contents":"test"}]},{"tag":"TypeVar","contents":"m"}]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Mote","Monad"],"MoteT"]},{"tag":"TypeVar","contents":"bracket"}]},{"tag":"TypeVar","contents":"test"}]},{"tag":"TypeVar","contents":"m"}]},{"tag":"TypeVar","contents":"a"}]}]}]},null]},null]},null]},null]}},"sourceSpan":{"start":[97,1],"name":"/home/travis/build/garyb/purescript-mote/src/Mote/Monad.purs","end":[101,28]}},{"children":[],"comments":"Marks the following group(s) and/or test(s) to be added to a plan while\nskipping any other siblings that are not also tagged with `only`.\n","title":"only","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["m",{"tag":"ForAll","contents":["test",{"tag":"ForAll","contents":["bracket",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Control","Monad"],"Monad"],"constraintArgs":[{"tag":"TypeVar","contents":"m"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Mote","Monad"],"MoteT"]},{"tag":"TypeVar","contents":"bracket"}]},{"tag":"TypeVar","contents":"test"}]},{"tag":"TypeVar","contents":"m"}]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Mote","Monad"],"MoteT"]},{"tag":"TypeVar","contents":"bracket"}]},{"tag":"TypeVar","contents":"test"}]},{"tag":"TypeVar","contents":"m"}]},{"tag":"TypeVar","contents":"a"}]}]}]},null]},null]},null]},null]}},"sourceSpan":{"start":[106,1],"name":"/home/travis/build/garyb/purescript-mote/src/Mote/Monad.purs","end":[110,28]}},{"children":[],"comments":"Specifies actions to run before and after the following group(s) and/or\ntest(s).\n\nThe bracketing is applied to every following group or test individually;\nit will be repeated when each group or test is run.\n","title":"bracket","info":{"declType":"value","type":{"tag":"ForAll","contents":["resource",{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["m",{"tag":"ForAll","contents":["test",{"tag":"ForAll","contents":["bracket",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Control","Monad"],"Monad"],"constraintArgs":[{"tag":"TypeVar","contents":"m"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Record"]},{"tag":"RCons","contents":["before",{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"bracket"},{"tag":"TypeVar","contents":"resource"}]},{"tag":"RCons","contents":["after",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"resource"}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"bracket"},{"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}]},{"tag":"REmpty"}]}]}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Mote","Monad"],"MoteT"]},{"tag":"TypeVar","contents":"bracket"}]},{"tag":"TypeVar","contents":"test"}]},{"tag":"TypeVar","contents":"m"}]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Mote","Monad"],"MoteT"]},{"tag":"TypeVar","contents":"bracket"}]},{"tag":"TypeVar","contents":"test"}]},{"tag":"TypeVar","contents":"m"}]},{"tag":"TypeVar","contents":"a"}]}]}]}]},null]},null]},null]},null]},null]}},"sourceSpan":{"start":[118,1],"name":"/home/travis/build/garyb/purescript-mote/src/Mote/Monad.purs","end":[123,28]}},{"children":[],"comments":"Generate a `Plan` from a `Mote`. The result of this can then be\ninterpreted to actually run the suites and tests described in the `Mote`.\n","title":"plan","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["test",{"tag":"ForAll","contents":["bracket",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Mote","Monad"],"Mote"]},{"tag":"TypeVar","contents":"bracket"}]},{"tag":"TypeVar","contents":"test"}]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Mote","Plan"],"Plan"]},{"tag":"TypeVar","contents":"bracket"}]},{"tag":"TypeVar","contents":"test"}]}]},null]},null]},null]}},"sourceSpan":{"start":[128,1],"name":"/home/travis/build/garyb/purescript-mote/src/Mote/Monad.purs","end":[128,77]}},{"children":[],"comments":"Generate a `Plan` from a `MoteT`, running effects as necessary. The result\nof this can then be interpreted to actually run the suites and tests\ndescribed in the `MoteT`.\n","title":"planT","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["m",{"tag":"ForAll","contents":["test",{"tag":"ForAll","contents":["bracket",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Control","Monad"],"Monad"],"constraintArgs":[{"tag":"TypeVar","contents":"m"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Mote","Monad"],"MoteT"]},{"tag":"TypeVar","contents":"bracket"}]},{"tag":"TypeVar","contents":"test"}]},{"tag":"TypeVar","contents":"m"}]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"m"},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Mote","Plan"],"Plan"]},{"tag":"TypeVar","contents":"bracket"}]},{"tag":"TypeVar","contents":"test"}]}}]}]}]},null]},null]},null]},null]}},"sourceSpan":{"start":[134,1],"name":"/home/travis/build/garyb/purescript-mote/src/Mote/Monad.purs","end":[138,32]}}]},{"reExports":[],"name":"Mote.Plan","comments":null,"declarations":[{"children":[{"comments":null,"title":"Plan","info":{"arguments":[{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Mote","Plan"],"PlanItem"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeVar","contents":"t"}]}}]}}],"declType":"dataConstructor"},"sourceSpan":null}],"comments":"The plan for running a test suite.\n","title":"Plan","info":{"declType":"data","dataDeclType":"newtype","typeArguments":[["b",null],["t",null]]},"sourceSpan":{"start":[8,1],"name":"/home/travis/build/garyb/purescript-mote/src/Mote/Plan.purs","end":[8,47]}},{"children":[{"comments":null,"title":"Test","info":{"arguments":[{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Mote","Entry"],"Entry"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeVar","contents":"t"}]}}],"declType":"dataConstructor"},"sourceSpan":null},{"comments":null,"title":"Skip","info":{"arguments":[{"tag":"TypeConstructor","contents":[["Prim"],"String"]}],"declType":"dataConstructor"},"sourceSpan":null},{"comments":null,"title":"Group","info":{"arguments":[{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Mote","Entry"],"Entry"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Mote","Plan"],"Plan"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeVar","contents":"t"}]}}]}}],"declType":"dataConstructor"},"sourceSpan":null}],"comments":"An item in a `Plan`.\n","title":"PlanItem","info":{"declType":"data","dataDeclType":"data","typeArguments":[["b",null],["t",null]]},"sourceSpan":{"start":[11,1],"name":"/home/travis/build/garyb/purescript-mote/src/Mote/Plan.purs","end":[14,31]}},{"children":[],"comments":"Eliminates each `PlanItem` constructor and sequences actions within a\n`Plan`.\n\nThis function can be used to inspect the plan, or build derivatives of it,\nor to define an interpreter for the plan that will actually run the tests\nwithin.\n\n- The first function handles tests.\n- The second function handles skipped tests.\n- The third function handles groups of tests.\n- The fourth function deals with sequencing the resulting values from the\n  previous handlers.\n\nThis fold only applies one layer at a time, so when building an interpreter\nit will need to be called recursively within the group handler.\n","title":"foldPlan","info":{"declType":"value","type":{"tag":"ForAll","contents":["r",{"tag":"ForAll","contents":["i",{"tag":"ForAll","contents":["t",{"tag":"ForAll","contents":["b",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Mote","Entry"],"Entry"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeVar","contents":"t"}]}]},{"tag":"TypeVar","contents":"i"}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeVar","contents":"i"}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Mote","Entry"],"Entry"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Mote","Plan"],"Plan"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeVar","contents":"t"}]}}]}]},{"tag":"TypeVar","contents":"i"}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"i"}]}]},{"tag":"TypeVar","contents":"r"}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Mote","Plan"],"Plan"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeVar","contents":"t"}]}]},{"tag":"TypeVar","contents":"r"}]}]}]}]}]},null]},null]},null]},null]}},"sourceSpan":{"start":[31,1],"name":"/home/travis/build/garyb/purescript-mote/src/Mote/Plan.purs","end":[38,7]}}]}],"resolvedDependencies":{"purescript-free":"5.1.0","purescript-proxy":"3.0.0","purescript-exceptions":"4.0.0","purescript-newtype":"3.0.0","purescript-effect":"2.0.0","purescript-ordered-collections":"1.4.0","purescript-these":"4.0.0","purescript-control":"4.1.0","purescript-console":"4.2.0","purescript-either":"4.1.1","purescript-arrays":"5.2.0","purescript-maybe":"4.0.1","purescript-type-equality":"3.0.0","purescript-js-timers":"4.0.1","purescript-exists":"4.0.0","purescript-distributive":"4.0.0","purescript-unfoldable":"4.0.0","purescript-invariant":"4.1.0","purescript-lcg":"2.0.0","purescript-lazy":"4.0.0","purescript-aff":"5.1.0","purescript-foldable-traversable":"4.1.1","purescript-tailrec":"4.0.0","purescript-avar":"3.0.0","purescript-gen":"2.1.0","purescript-typelevel-prelude":"3.0.0","purescript-functors":"3.1.1","purescript-prelude":"4.1.0","purescript-st":"4.0.0","purescript-bifunctors":"4.0.0","purescript-pipes":"6.0.0","purescript-nonempty":"5.0.0","purescript-contravariant":"4.0.0","purescript-unsafe-coerce":"4.0.0","purescript-refs":"4.1.0","purescript-integers":"4.0.0","purescript-test-unit":"14.0.0","purescript-mmorph":"5.1.0","purescript-ansi":"5.0.0","purescript-orders":"4.0.0","purescript-const":"4.1.0","purescript-spec":"3.1.0","purescript-record":"1.0.0","purescript-transformers":"4.1.0","purescript-globals":"4.0.0","purescript-generics-rep":"6.1.0","purescript-math":"2.1.1","purescript-enums":"4.0.0","purescript-catenable-lists":"5.0.0","purescript-random":"4.0.0","purescript-parallel":"4.0.0","purescript-tuples":"5.1.0","purescript-partial":"2.0.0","purescript-quickcheck":"5.0.0","purescript-strings":"4.0.1","purescript-identity":"4.1.0","purescript-lists":"5.3.0","purescript-datetime":"4.1.0","purescript-functions":"4.0.0"},"version":"1.1.0","github":["garyb","purescript-mote"],"versionTag":"v1.1.0","moduleMap":{"Data.BooleanAlgebra":"purescript-prelude","Ansi.Output":"purescript-ansi","Data.Decide":"purescript-contravariant","Type.Data.Boolean":"purescript-typelevel-prelude","Data.Ring":"purescript-prelude","Record.ST":"purescript-record","Control.Monad.Trans.Class":"purescript-transformers","Record.Unsafe.Union":"purescript-record","Data.Functor.Product":"purescript-functors","Data.NonEmpty":"purescript-nonempty","Test.Spec.Console":"purescript-spec","Effect.Uncurried":"purescript-effect","Data.Char.Gen":"purescript-strings","Data.String.NonEmpty":"purescript-strings","Effect":"purescript-effect","Data.Traversable.Accum.Internal":"purescript-foldable-traversable","Data.Enum.Gen":"purescript-enums","Control.Comonad.Env":"purescript-transformers","Control.Comonad.Traced.Class":"purescript-transformers","Test.Spec.Summary":"purescript-spec","Data.Functor.Compose":"purescript-functors","Type.Row.Homogeneous":"purescript-typelevel-prelude","Data.Int.Bits":"purescript-integers","Data.DateTime":"purescript-datetime","Data.Bifunctor.Flip":"purescript-bifunctors","Data.String.CodePoints":"purescript-strings","Data.Ord":"purescript-prelude","Control.Monad.Gen":"purescript-gen","Control.Monad.Free.Class":"purescript-free","Type.Data.Row":"purescript-prelude","Data.Date":"purescript-datetime","Control.Comonad.Cofree.Class":"purescript-free","Data.Monoid.Dual":"purescript-prelude","Data.Generic.Rep.Ring":"purescript-generics-rep","Control.Monad.Rec.Class":"purescript-tailrec","Data.Time.Component":"purescript-datetime","Data.Bitraversable":"purescript-foldable-traversable","Record.Builder":"purescript-record","Test.Unit.Assert":"purescript-test-unit","Data.Boolean":"purescript-prelude","Data.Map":"purescript-ordered-collections","Control.Biapplicative":"purescript-bifunctors","Data.CatList":"purescript-catenable-lists","Effect.Exception.Unsafe":"purescript-exceptions","Control.Parallel.Class":"purescript-parallel","Data.Array.NonEmpty.Internal":"purescript-arrays","Type.Proxy":"purescript-proxy","Test.Unit.Output.Fancy":"purescript-test-unit","Pipes.Core":"purescript-pipes","Data.Coyoneda":"purescript-free","Effect.Aff.Compat":"purescript-aff","Data.Array.ST.Iterator":"purescript-arrays","Data.DateTime.Gen":"purescript-datetime","Test.Spec.Assertions.Aff":"purescript-spec","Data.String.Pattern":"purescript-strings","Data.Bounded":"purescript-prelude","Control.Monad.State.Trans":"purescript-transformers","Data.TraversableWithIndex":"purescript-foldable-traversable","Data.Int":"purescript-integers","Data.Show":"purescript-prelude","Random.LCG":"purescript-lcg","Data.Bifunctor.Clown":"purescript-bifunctors","Control.Monad.Writer.Trans":"purescript-transformers","Data.Foldable":"purescript-foldable-traversable","Data.Divide":"purescript-contravariant","Control.Comonad.Store.Class":"purescript-transformers","Data.Enum":"purescript-enums","Control.Monad.Trampoline":"purescript-free","Control.Apply":"purescript-prelude","Data.Functor.Contravariant":"purescript-contravariant","Data.Tuple.Nested":"purescript-tuples","Data.Generic.Rep.Semigroup":"purescript-generics-rep","Control.Monad":"purescript-prelude","Data.Lazy":"purescript-lazy","Data.Monoid":"purescript-prelude","Control.Monad.List.Trans":"purescript-transformers","Control.Monad.RWS":"purescript-transformers","Data.String.Common":"purescript-strings","Data.Maybe.First":"purescript-maybe","Control.Bind":"purescript-prelude","Effect.Aff.Class":"purescript-aff","Data.Monoid.Additive":"purescript-prelude","Data.Symbol":"purescript-prelude","Data.Map.Gen":"purescript-ordered-collections","Data.String.Regex":"purescript-strings","Data.HeytingAlgebra":"purescript-prelude","Control.Alt":"purescript-control","Data.Date.Gen":"purescript-datetime","Control.Monad.Maybe.Trans":"purescript-transformers","Control.Monad.Cont":"purescript-transformers","Control.Monad.ST.Internal":"purescript-st","Type.Data.RowList":"purescript-prelude","Data.Time.Component.Gen":"purescript-datetime","Effect.Ref":"purescript-refs","Data.Either.Inject":"purescript-either","Data.List.ZipList":"purescript-lists","Data.Ord.Min":"purescript-orders","Test.Spec.Runner":"purescript-spec","Data.Functor.Coproduct.Nested":"purescript-functors","Data.Ord.Unsafe":"purescript-prelude","Data.Semigroup":"purescript-prelude","Data.Array.NonEmpty":"purescript-arrays","Control.Monad.Reader":"purescript-transformers","Test.Unit.QuickCheck":"purescript-test-unit","Data.Const":"purescript-const","Data.Generic.Rep.Enum":"purescript-generics-rep","Data.Generic.Rep.Bounded":"purescript-generics-rep","Test.Spec.Reporter.Console":"purescript-spec","Control.Comonad.Traced.Trans":"purescript-transformers","Test.Spec.Reporter.Dot":"purescript-spec","Data.Ord.Down":"purescript-orders","Data.Array.ST.Partial":"purescript-arrays","Data.Generic.Rep.Show":"purescript-generics-rep","Effect.Unsafe":"purescript-effect","Pipes.Internal":"purescript-pipes","Control.Monad.Morph":"purescript-mmorph","Type.Data.Ordering":"purescript-typelevel-prelude","Data.Tuple":"purescript-tuples","Data.Semigroup.Foldable":"purescript-foldable-traversable","Control.Biapply":"purescript-bifunctors","Data.Distributive":"purescript-distributive","Effect.Exception":"purescript-exceptions","Type.Equality":"purescript-type-equality","Control.Alternative":"purescript-control","Data.Semiring":"purescript-prelude","Pipes.Prelude":"purescript-pipes","Data.Exists":"purescript-exists","Effect.Console":"purescript-console","Data.Traversable.Accum":"purescript-foldable-traversable","Data.CommutativeRing":"purescript-prelude","Data.NaturalTransformation":"purescript-prelude","Data.Monoid.Conj":"purescript-prelude","Data.Yoneda":"purescript-free","Data.Functor.App":"purescript-functors","Effect.Timer":"purescript-js-timers","Data.Unfoldable":"purescript-unfoldable","Control.Comonad.Store.Trans":"purescript-transformers","Test.Spec.Assertions.String":"purescript-spec","Control.Monad.ST":"purescript-st","Control.Monad.State.Class":"purescript-transformers","Data.List.Types":"purescript-lists","Data.String.NonEmpty.CodeUnits":"purescript-strings","Data.Functor":"purescript-prelude","Unsafe.Coerce":"purescript-unsafe-coerce","Control.Monad.Writer.Class":"purescript-transformers","Data.Generic.Rep.Ord":"purescript-generics-rep","Test.Spec.Reporter.Base":"purescript-spec","Data.CatQueue":"purescript-catenable-lists","Control.Monad.Except":"purescript-transformers","Data.Interval":"purescript-datetime","Data.List.Lazy.Types":"purescript-lists","Control.Category":"purescript-prelude","Test.Spec.Reporter.Tap":"purescript-spec","Test.QuickCheck.Arbitrary":"purescript-quickcheck","Data.Interval.Duration":"purescript-datetime","Control.Monad.Gen.Common":"purescript-gen","Control.Monad.RWS.Trans":"purescript-transformers","Test.Spec.Speed":"purescript-spec","Control.Monad.Cont.Trans":"purescript-transformers","Data.Maybe":"purescript-maybe","Type.Row":"purescript-typelevel-prelude","Data.String.Regex.Unsafe":"purescript-strings","Data.Set":"purescript-ordered-collections","Control.Comonad":"purescript-control","Data.Function":"purescript-prelude","Data.List":"purescript-lists","Data.Field":"purescript-prelude","Data.List.Lazy":"purescript-lists","Data.Generic.Rep.Eq":"purescript-generics-rep","Test.Unit.Output.TAP":"purescript-test-unit","Data.EuclideanRing":"purescript-prelude","Data.Semigroup.Last":"purescript-prelude","Data.Semigroup.First":"purescript-prelude","Data.Functor.Invariant":"purescript-invariant","Control.Comonad.Traced":"purescript-transformers","Global.Unsafe":"purescript-globals","Data.Comparison":"purescript-contravariant","Data.String.Unsafe":"purescript-strings","Prelude":"purescript-prelude","Effect.Class":"purescript-effect","Data.Predicate":"purescript-contravariant","Partial.Unsafe":"purescript-partial","Data.Array":"purescript-arrays","Data.Bifunctor.Product":"purescript-bifunctors","Control.Extend":"purescript-control","Pipes":"purescript-pipes","Data.Unfoldable1":"purescript-unfoldable","Test.Unit.Console":"purescript-test-unit","Control.Lazy":"purescript-control","Data.Function.Uncurried":"purescript-functions","Control.Monad.Reader.Trans":"purescript-transformers","Data.Functor.Product.Nested":"purescript-functors","Test.Unit.Output.Simple":"purescript-test-unit","Pipes.ListT":"purescript-pipes","Control.Comonad.Env.Class":"purescript-transformers","Effect.Aff.AVar":"purescript-avar","Data.Interval.Duration.Iso":"purescript-datetime","Data.Eq":"purescript-prelude","Data.Either.Nested":"purescript-either","Control.Comonad.Cofree":"purescript-free","Data.Newtype":"purescript-newtype","Data.Semigroup.Traversable":"purescript-foldable-traversable","Test.Spec.Assertions":"purescript-spec","Data.Bifunctor":"purescript-bifunctors","Effect.Random":"purescript-random","Test.Spec.Reporter":"purescript-spec","Data.Monoid.Disj":"purescript-prelude","Control.Monad.Gen.Class":"purescript-gen","Data.Array.Partial":"purescript-arrays","Data.String.CaseInsensitive":"purescript-strings","Control.Monad.Free":"purescript-free","Control.Parallel":"purescript-parallel","Control.MonadPlus":"purescript-control","Data.Void":"purescript-prelude","Control.MonadZero":"purescript-control","Data.DateTime.Instant":"purescript-datetime","Data.Ord.Max":"purescript-orders","Effect.AVar":"purescript-avar","Control.Comonad.Store":"purescript-transformers","Control.Monad.Except.Trans":"purescript-transformers","Data.String.CodeUnits":"purescript-strings","Ansi.Codes":"purescript-ansi","Test.Spec":"purescript-spec","Data.Bifunctor.Joker":"purescript-bifunctors","Data.FunctorWithIndex":"purescript-foldable-traversable","Data.Divisible":"purescript-contravariant","Data.DivisionRing":"purescript-prelude","Record":"purescript-record","Data.Bifunctor.Wrap":"purescript-bifunctors","Data.Equivalence":"purescript-contravariant","Data.Maybe.Last":"purescript-maybe","Data.Unit":"purescript-prelude","Data.List.NonEmpty":"purescript-lists","Data.Generic.Rep.Semiring":"purescript-generics-rep","Data.List.Lazy.NonEmpty":"purescript-lists","Data.Ordering":"purescript-prelude","Data.Functor.Coproduct":"purescript-functors","Control.Monad.Cont.Class":"purescript-transformers","Effect.Aff":"purescript-aff","Data.Identity":"purescript-identity","Math":"purescript-math","Data.Set.NonEmpty":"purescript-ordered-collections","Control.Comonad.Trans.Class":"purescript-transformers","Data.String":"purescript-strings","Control.Plus":"purescript-control","Test.QuickCheck":"purescript-quickcheck","Test.Unit.Main":"purescript-test-unit","Data.Map.Internal":"purescript-ordered-collections","Data.These.Gen":"purescript-these","Data.Time":"purescript-datetime","Data.Time.Duration":"purescript-datetime","Data.Date.Component":"purescript-datetime","Partial":"purescript-partial","Control.Comonad.Env.Trans":"purescript-transformers","Global":"purescript-globals","Control.Monad.Reader.Class":"purescript-transformers","Data.String.NonEmpty.CodePoints":"purescript-strings","Data.Decidable":"purescript-contravariant","Data.String.NonEmpty.Internal":"purescript-strings","Data.Monoid.Multiplicative":"purescript-prelude","Data.String.NonEmpty.CaseInsensitive":"purescript-strings","Type.Data.Symbol":"purescript-typelevel-prelude","Data.Array.ST":"purescript-arrays","Control.Monad.Error.Class":"purescript-transformers","Test.Unit":"purescript-test-unit","Data.Generic.Rep.HeytingAlgebra":"purescript-generics-rep","Data.Generic.Rep.Monoid":"purescript-generics-rep","Control.Semigroupoid":"purescript-prelude","Data.Monoid.Alternate":"purescript-control","Data.Char":"purescript-strings","Data.Generic.Rep":"purescript-generics-rep","Effect.Class.Console":"purescript-console","Data.Bifunctor.Join":"purescript-bifunctors","Data.Bifoldable":"purescript-foldable-traversable","Control.Monad.ST.Ref":"purescript-st","Data.Monoid.Endo":"purescript-prelude","Test.Spec.Color":"purescript-spec","Control.Monad.State":"purescript-transformers","Data.List.Partial":"purescript-lists","Test.Spec.Runner.Event":"purescript-spec","Data.String.Regex.Flags":"purescript-strings","Data.Either":"purescript-either","Data.Time.Duration.Gen":"purescript-datetime","Data.Date.Component.Gen":"purescript-datetime","Type.Prelude":"purescript-typelevel-prelude","Control.Applicative":"purescript-prelude","Data.FoldableWithIndex":"purescript-foldable-traversable","Data.Op":"purescript-contravariant","Record.Unsafe":"purescript-prelude","Data.These":"purescript-these","Test.QuickCheck.Gen":"purescript-quickcheck","Control.Monad.Writer":"purescript-transformers","Test.Spec.Reporter.Spec":"purescript-spec","Data.Functor.Coproduct.Inject":"purescript-functors","Data.Time.Gen":"purescript-datetime","Data.Traversable":"purescript-foldable-traversable","Data.String.Gen":"purescript-strings"},"compilerVersion":"0.12.0"}