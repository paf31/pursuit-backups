{"uploader":"hdgarrood","packageMeta":{"homepage":"https://github.com/tfausak/purescript-neon","repository":{"url":"git://github.com/tfausak/purescript-neon.git","type":"git"},"ignore":["/.psci","/.psci_modules/","/.pulp-cache/","/bower_components/","/docs/","/node_modules/","/npm-debug.log","/output/"],"main":["src/Neon.purs"],"authors":[{"homepage":"http://taylor.fausak.me","email":"taylor@fausak.me","name":"Taylor Fausak"}],"name":"purescript-neon","keywords":["neon","prelude","purescript"],"license":["MIT"],"description":"An experimental PureScript prelude."},"modules":[{"reExports":[{"moduleName":["Neon","Effects"],"declarations":[{"children":[],"comments":"Represents effects that can write to the console.\n","title":"CONSOLE","fixity":null,"info":{"kind":{"tag":"Bang","contents":[]},"declType":"externData"},"sourceSpan":{"start":[15,1],"name":"src/Neon/Effects/Console.purs","end":[23,1]}},{"children":[],"comments":"Represents effects that can throw exceptions.\n","title":"EXCEPTION","fixity":null,"info":{"kind":{"tag":"Bang","contents":[]},"declType":"externData"},"sourceSpan":{"start":[13,1],"name":"src/Neon/Effects/Exception.purs","end":[14,1]}},{"children":[{"comments":null,"title":"effectHasApply","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasApply"],"HasApply"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Effects","Effect"],"Effect"]},{"tag":"TypeVar","contents":"e"}]}}]}},"sourceSpan":{"start":[28,1],"name":"src/Neon/Effects/Effect.purs","end":[31,1]}},{"comments":null,"title":"effectHasBind","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasBind"],"HasBind"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Effects","Effect"],"Effect"]},{"tag":"TypeVar","contents":"e"}]}}]}},"sourceSpan":{"start":[31,1],"name":"src/Neon/Effects/Effect.purs","end":[34,1]}},{"comments":null,"title":"effectHasMap","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasMap"],"HasMap"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Effects","Effect"],"Effect"]},{"tag":"TypeVar","contents":"e"}]}}]}},"sourceSpan":{"start":[34,1],"name":"src/Neon/Effects/Effect.purs","end":[37,1]}},{"comments":null,"title":"effectHasPure","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasPure"],"HasPure"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Effects","Effect"],"Effect"]},{"tag":"TypeVar","contents":"e"}]}}]}},"sourceSpan":{"start":[37,1],"name":"src/Neon/Effects/Effect.purs","end":[46,1]}}],"comments":"Represents native effects. This type constructor takes two arguments: a\nrow of effects and a return type. The row of effects gives the native\ncapabilities of the effect.\n\n``` purescript\n-- This effect can use the console (like `console.log()` in JavaScript).\nforall e. Effect (console :: CONSOLE | e) Unit\n```\n","title":"Effect","fixity":null,"info":{"kind":{"tag":"FunKind","contents":[{"tag":"Row","contents":{"tag":"Bang","contents":[]}},{"tag":"FunKind","contents":[{"tag":"Star","contents":[]},{"tag":"Star","contents":[]}]}]},"declType":"externData"},"sourceSpan":{"start":[20,1],"name":"src/Neon/Effects/Effect.purs","end":[22,1]}},{"children":[{"comments":null,"title":"exceptionHasShow","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasShow"],"HasShow"]},{"tag":"TypeConstructor","contents":[["Neon","Effects","Exception"],"Exception"]}]}},"sourceSpan":{"start":[44,1],"name":"src/Neon/Effects/Exception.purs","end":[45,10]}}],"comments":"An alias for `Error` from JavaScript.\n","title":"Exception","fixity":null,"info":{"kind":{"tag":"Star","contents":[]},"declType":"externData"},"sourceSpan":{"start":[17,1],"name":"src/Neon/Effects/Exception.purs","end":[25,1]}},{"children":[],"comments":"Represents effects that can have local mutation.\n","title":"Mutable","fixity":null,"info":{"kind":{"tag":"FunKind","contents":[{"tag":"Star","contents":[]},{"tag":"Bang","contents":[]}]},"declType":"externData"},"sourceSpan":{"start":[13,1],"name":"src/Neon/Effects/Mutable.purs","end":[24,1]}},{"children":[],"comments":"Represents a mutable reference that can be run in a `Mutable` effect. The\ntype `MutableReference s a` can be run with the `Mutable s` effect and\nreturns a value of type `a`.\n","title":"MutableReference","fixity":null,"info":{"kind":{"tag":"FunKind","contents":[{"tag":"Star","contents":[]},{"tag":"FunKind","contents":[{"tag":"Star","contents":[]},{"tag":"Star","contents":[]}]}]},"declType":"externData"},"sourceSpan":{"start":[29,1],"name":"src/Neon/Effects/Mutable.purs","end":[32,1]}},{"children":[],"comments":"Represents effects that can generate random numbers.\n","title":"RANDOM","fixity":null,"info":{"kind":{"tag":"Bang","contents":[]},"declType":"externData"},"sourceSpan":{"start":[9,1],"name":"src/Neon/Effects/Random.purs","end":[18,1]}},{"children":[],"comments":"Catches an exception.\n\n``` purescript\ncatch\n  (throw (exception \"Boink!\"))\n  (\\ e -> error (show e))\n--\n```\n","title":"catch","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["e",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Effects","Effect"],"Effect"]},{"tag":"RCons","contents":["exception",{"tag":"TypeConstructor","contents":[["Neon","Effects","Exception"],"EXCEPTION"]},{"tag":"TypeVar","contents":"e"}]}]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Neon","Effects","Exception"],"Exception"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Effects","Effect"],"Effect"]},{"tag":"TypeVar","contents":"e"}]},{"tag":"TypeVar","contents":"a"}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Effects","Effect"],"Effect"]},{"tag":"TypeVar","contents":"e"}]},{"tag":"TypeVar","contents":"a"}]}]}]},null]},null]}},"sourceSpan":{"start":[42,1],"name":"src/Neon/Effects/Exception.purs","end":[44,1]}},{"children":[],"comments":"Writes an error-level message to the console.\n\n``` purescript\nerror \"Exploded!\"\n-- prints \"Exploded!\" to standard error\n```\n","title":"error","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["e",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Effects","Effect"],"Effect"]},{"tag":"RCons","contents":["console",{"tag":"TypeConstructor","contents":[["Neon","Effects","Console"],"CONSOLE"]},{"tag":"TypeVar","contents":"e"}]}]},{"tag":"TypeConstructor","contents":[["Neon","Values","Unit"],"Unit"]}]}]},null]}},"sourceSpan":{"start":[47,1],"name":"src/Neon/Effects/Console.purs","end":[56,1]}},{"children":[],"comments":"Creates an exception with the given message.\n\n``` purescript\nshow (exception \"Boink!\")\n-- \"Error: Boink!\"\n```\n","title":"exception","fixity":null,"info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeConstructor","contents":[["Neon","Effects","Exception"],"Exception"]}]}},"sourceSpan":{"start":[25,1],"name":"src/Neon/Effects/Exception.purs","end":[32,1]}},{"children":[],"comments":"Gets the current value of a mutable reference. See `runMutable` for an\nexample.\n","title":"getMutableReference","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["e",{"tag":"ForAll","contents":["s",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Effects","Mutable"],"MutableReference"]},{"tag":"TypeVar","contents":"s"}]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Effects","Effect"],"Effect"]},{"tag":"RCons","contents":["mutable",{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Effects","Mutable"],"Mutable"]},{"tag":"TypeVar","contents":"s"}]},{"tag":"TypeVar","contents":"e"}]}]},{"tag":"TypeVar","contents":"a"}]}]},null]},null]},null]}},"sourceSpan":{"start":[36,1],"name":"src/Neon/Effects/Mutable.purs","end":[39,1]}},{"children":[],"comments":"Writes an info-level message to the console.\n\n``` purescript\ninfo \"Starting...\"\n-- prints \"Starting...\" to standard out\n```\n","title":"info","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["e",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Effects","Effect"],"Effect"]},{"tag":"RCons","contents":["console",{"tag":"TypeConstructor","contents":[["Neon","Effects","Console"],"CONSOLE"]},{"tag":"TypeVar","contents":"e"}]}]},{"tag":"TypeConstructor","contents":[["Neon","Values","Unit"],"Unit"]}]}]},null]}},"sourceSpan":{"start":[23,1],"name":"src/Neon/Effects/Console.purs","end":[31,1]}},{"children":[],"comments":"Writes a log-level message to the console.\n\n``` purescript\nlog \"Listening..\"\n-- prints \"Listening...\" to standard out\n```\n","title":"log","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["e",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Effects","Effect"],"Effect"]},{"tag":"RCons","contents":["console",{"tag":"TypeConstructor","contents":[["Neon","Effects","Console"],"CONSOLE"]},{"tag":"TypeVar","contents":"e"}]}]},{"tag":"TypeConstructor","contents":[["Neon","Values","Unit"],"Unit"]}]}]},null]}},"sourceSpan":{"start":[31,1],"name":"src/Neon/Effects/Console.purs","end":[39,1]}},{"children":[],"comments":"Creates a new mutable reference. See `runMutable` for an example.\n","title":"newMutableReference","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["e",{"tag":"ForAll","contents":["s",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Effects","Effect"],"Effect"]},{"tag":"RCons","contents":["mutable",{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Effects","Mutable"],"Mutable"]},{"tag":"TypeVar","contents":"s"}]},{"tag":"TypeVar","contents":"e"}]}]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Effects","Mutable"],"MutableReference"]},{"tag":"TypeVar","contents":"s"}]},{"tag":"TypeVar","contents":"a"}]}}]}]},null]},null]},null]}},"sourceSpan":{"start":[32,1],"name":"src/Neon/Effects/Mutable.purs","end":[36,1]}},{"children":[],"comments":"Converts a value to a string and writes a log-level message to the\nconsole.\n\n``` purescript\nprint 1\n-- print \"1\" to standard out\n```\n","title":"print","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["e",{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[[[[["Neon","Types","HasShow"],"HasShow"],[{"tag":"TypeVar","contents":"a"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Effects","Effect"],"Effect"]},{"tag":"RCons","contents":["console",{"tag":"TypeConstructor","contents":[["Neon","Effects","Console"],"CONSOLE"]},{"tag":"TypeVar","contents":"e"}]}]},{"tag":"TypeConstructor","contents":[["Neon","Values","Unit"],"Unit"]}]}]}]},null]},null]}},"sourceSpan":{"start":[56,1],"name":"src/Neon/Effects/Console.purs","end":[57,1]}},{"children":[],"comments":"Generates a random number. The number will be in the range [0, 1). That\nis, `0 <= x < 1`.\n\n``` purescript\nrandomNumber\n-- 0.123\n```\n","title":"randomNumber","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["e",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Effects","Effect"],"Effect"]},{"tag":"RCons","contents":["random",{"tag":"TypeConstructor","contents":[["Neon","Effects","Random"],"RANDOM"]},{"tag":"TypeVar","contents":"e"}]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]},null]}},"sourceSpan":{"start":[18,1],"name":"src/Neon/Effects/Random.purs","end":[18,72]}},{"children":[],"comments":"Runs a mutable effect.\n\n``` purescript\nrunPure (runMutable do\n  r <- newMutableReference false\n  setMutableReference r true\n  getMutableReference r)\n-- true\n```\n","title":"runMutable","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["e",{"tag":"ForAll","contents":["s",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Effects","Effect"],"Effect"]},{"tag":"RCons","contents":["mutable",{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Effects","Mutable"],"Mutable"]},{"tag":"TypeVar","contents":"s"}]},{"tag":"TypeVar","contents":"e"}]}]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Effects","Effect"],"Effect"]},{"tag":"TypeVar","contents":"e"}]},{"tag":"TypeVar","contents":"a"}]}]},null]},null]},null]}},"sourceSpan":{"start":[24,1],"name":"src/Neon/Effects/Mutable.purs","end":[29,1]}},{"children":[],"comments":"Runs a pure effect.\n\n``` purescript\nrunPure (pure 1)\n-- 1\n```\n","title":"runPure","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Effects","Effect"],"Effect"]},{"tag":"REmpty","contents":[]}]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeVar","contents":"a"}]},null]}},"sourceSpan":{"start":[46,1],"name":"src/Neon/Effects/Effect.purs","end":[47,1]}},{"children":[],"comments":"Sets the mutable reference to a value. See `runMutable` for an example.\n","title":"setMutableReference","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["e",{"tag":"ForAll","contents":["s",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Effects","Mutable"],"MutableReference"]},{"tag":"TypeVar","contents":"s"}]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Effects","Effect"],"Effect"]},{"tag":"RCons","contents":["mutable",{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Effects","Mutable"],"Mutable"]},{"tag":"TypeVar","contents":"s"}]},{"tag":"TypeVar","contents":"e"}]}]},{"tag":"TypeVar","contents":"a"}]}]}]},null]},null]},null]}},"sourceSpan":{"start":[39,1],"name":"src/Neon/Effects/Mutable.purs","end":[39,116]}},{"children":[],"comments":"Throws an exception.\n\n``` purescript\nthrow (exception \"Boink!\")\n```\n","title":"throw","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["e",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Neon","Effects","Exception"],"Exception"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Effects","Effect"],"Effect"]},{"tag":"RCons","contents":["exception",{"tag":"TypeConstructor","contents":[["Neon","Effects","Exception"],"EXCEPTION"]},{"tag":"TypeVar","contents":"e"}]}]},{"tag":"TypeVar","contents":"a"}]}]},null]},null]}},"sourceSpan":{"start":[32,1],"name":"src/Neon/Effects/Exception.purs","end":[42,1]}},{"children":[],"comments":"Dangerously runs an effect. In general, you should not use this function.\nSometimes it is necessary to subvert the type system. This can also be\nuseful for debugging pure functions.\n\n``` purescript\nunsafeRunEffect (do { log \"...\"; pure 1 }) :: Int\n-- logs \"...\" and returns `1`\n```\n","title":"unsafeRunEffect","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["e",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Effects","Effect"],"Effect"]},{"tag":"TypeVar","contents":"e"}]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeVar","contents":"a"}]},null]},null]}},"sourceSpan":{"start":[57,1],"name":"src/Neon/Effects/Effect.purs","end":[58,1]}},{"children":[],"comments":"Writes a warn-level message to the console.\n\n``` purescript\nwarn \"Stopping...\"\n-- prints \"Stopping...\" to standard error\n```\n","title":"warn","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["e",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Effects","Effect"],"Effect"]},{"tag":"RCons","contents":["console",{"tag":"TypeConstructor","contents":[["Neon","Effects","Console"],"CONSOLE"]},{"tag":"TypeVar","contents":"e"}]}]},{"tag":"TypeConstructor","contents":[["Neon","Values","Unit"],"Unit"]}]}]},null]}},"sourceSpan":{"start":[39,1],"name":"src/Neon/Effects/Console.purs","end":[47,1]}}]},{"moduleName":["Neon","Primitives"],"declarations":[{"children":[],"comments":"The constant function. Always returns the first argument.\n\n``` purescript\nalways 1 2\n-- 1\n```\n","title":"always","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeVar","contents":"a"}]}}]},null]},null]}},"sourceSpan":{"start":[15,1],"name":"src/Neon/Primitives/Function.purs","end":[16,1]}},{"children":[],"comments":"A functional alternative to the `if _ then _ else _` syntax. This is\nuseful in higher-order functions.\n\n``` purescript\nmap (boolean 1 2) [false, true]\n-- [2, 1]\n```\n","title":"boolean","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]},{"tag":"TypeVar","contents":"a"}]}]}]},null]}},"sourceSpan":{"start":[23,1],"name":"src/Neon/Primitives/Boolean.purs","end":[24,1]}},{"children":[],"comments":"Rounds a number up.\n\n``` purescript\nceiling 1.1\n-- 2\n```\n","title":"ceiling","fixity":null,"info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}},"sourceSpan":{"start":[53,1],"name":"src/Neon/Primitives/Number.purs","end":[61,1]}},{"children":[],"comments":"Flips the order of the first two arguments.\n\n``` purescript\nflip always 1 2\n-- 2\n```\n","title":"flip","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["c",{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeVar","contents":"c"}]}]}}]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"c"}]}]}}]},null]},null]},null]}},"sourceSpan":{"start":[24,1],"name":"src/Neon/Primitives/Function.purs","end":[25,1]}},{"children":[],"comments":"Rounds a number down.\n\n``` purescript\nfloor 1.9\n-- 1\n```\n","title":"floor","fixity":null,"info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}},"sourceSpan":{"start":[61,1],"name":"src/Neon/Primitives/Number.purs","end":[71,1]}},{"children":[],"comments":"An alias for `Infinity` from JavaScript.\n","title":"infinity","fixity":null,"info":{"declType":"value","type":{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}},"sourceSpan":{"start":[27,1],"name":"src/Neon/Primitives/Number.purs","end":[37,1]}},{"children":[],"comments":"Tests whether a number is finite or not.\n\n``` purescript\nisFinite 1.0\n-- true\nisFinite infinity\n-- false\n```\n","title":"isFinite","fixity":null,"info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}},"sourceSpan":{"start":[37,1],"name":"src/Neon/Primitives/Number.purs","end":[45,1]}},{"children":[],"comments":"Tests whether a number is `nan` or not. This is necessary because `nan`\ndoes not equal `nan`.\n\n``` purescript\nisNaN nan\n-- true\nisNaN 1.0\n-- false\n```\n","title":"isNaN","fixity":null,"info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}},"sourceSpan":{"start":[24,1],"name":"src/Neon/Primitives/Number.purs","end":[27,1]}},{"children":[],"comments":"An alias for `NaN` from JavaScript.\n","title":"nan","fixity":null,"info":{"declType":"value","type":{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}},"sourceSpan":{"start":[13,1],"name":"src/Neon/Primitives/Number.purs","end":[24,1]}},{"children":[],"comments":"Applies the second function to both arguments before applying the first\nfunction.\n\n``` purescript\n((*) `on` (+ 1)) 2 3\n-- 12\n```\n","title":"on","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["c",{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeVar","contents":"c"}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"c"}]}]}}]}]},null]},null]},null]}},"sourceSpan":{"start":[34,1],"name":"src/Neon/Primitives/Function.purs","end":[35,1]}},{"children":[],"comments":"An alias for `true`. This is useful in guard clauses.\n\n``` purescript\nmax x y\n  | y > x = y\n  | otherwise = x\n```\n","title":"otherwise","fixity":null,"info":{"declType":"value","type":{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}},"sourceSpan":{"start":[13,1],"name":"src/Neon/Primitives/Boolean.purs","end":[14,1]}},{"children":[],"comments":"Rounds a number to the nearest integer.\n\n``` purescript\nround 1.4\n-- 1\n```\n","title":"round","fixity":null,"info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}},"sourceSpan":{"start":[45,1],"name":"src/Neon/Primitives/Number.purs","end":[53,1]}},{"children":[],"comments":"Convert a character to lower case.\n\n``` purescript\ntoLower 'A'\n-- 'a'\n```\n","title":"toLower","fixity":null,"info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Char"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Char"]}]}},"sourceSpan":{"start":[12,1],"name":"src/Neon/Primitives/Char.purs","end":[20,1]}},{"children":[],"comments":"Converts an integer into a number.\n\n``` purescript\ntoNumber 1\n-- 1.0\n```\n","title":"toNumber","fixity":null,"info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]}},"sourceSpan":{"start":[11,1],"name":"src/Neon/Primitives/Int.purs","end":[11,35]}},{"children":[],"comments":"Convert a character to upper case.\n\n``` purescript\ntoUpper 'a'\n-- 'A'\n```\n","title":"toUpper","fixity":null,"info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Char"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Char"]}]}},"sourceSpan":{"start":[20,1],"name":"src/Neon/Primitives/Char.purs","end":[20,35]}},{"children":[],"comments":"Removes the non-integral component of a number.\n\n``` purescript\ntruncate 1.5\n-- 1\ntruncate (-1.5)\n-- -1\n```\n","title":"truncate","fixity":null,"info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}},"sourceSpan":{"start":[71,1],"name":"src/Neon/Primitives/Number.purs","end":[71,38]}},{"children":[],"comments":"Applies a function to an argument. This is useful to avoid parentheses.\n\n``` purescript\ntoLower <| 'A'\n-- 'a'\n```\n","title":"(<|)","fixity":{"associativity":"infixl","precedence":-1},"info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]},null]},null]}},"sourceSpan":{"start":[53,1],"name":"src/Neon/Primitives/Function.purs","end":[54,1]}},{"children":[],"comments":"Applies an argument to a function. This is useful to avoid parentheses.\n\n``` purescript\n'A' |> toLower\n-- 'a'\n```\n","title":"(|>)","fixity":{"associativity":"infixl","precedence":-1},"info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]},{"tag":"TypeVar","contents":"b"}]}]},null]},null]}},"sourceSpan":{"start":[43,1],"name":"src/Neon/Primitives/Function.purs","end":[44,1]}}]},{"moduleName":["Neon","Transformers"],"declarations":[{"children":[{"comments":null,"title":"MaybeT","info":{"arguments":[{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"m"},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Maybe"],"Maybe"]},{"tag":"TypeVar","contents":"a"}]}}]}}],"declType":"dataConstructor"},"sourceSpan":null},{"comments":null,"title":"maybeTHasAlternative","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasBind"],"HasBind"],[{"tag":"TypeVar","contents":"m"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasAlternative"],"HasAlternative"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Transformers","MaybeT"],"MaybeT"]},{"tag":"TypeVar","contents":"m"}]}}]}},"sourceSpan":{"start":[20,1],"name":"src/Neon/Transformers/MaybeT.purs","end":[24,1]}},{"comments":null,"title":"maybeTHasApply","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasBind"],"HasBind"],[{"tag":"TypeVar","contents":"m"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasApply"],"HasApply"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Transformers","MaybeT"],"MaybeT"]},{"tag":"TypeVar","contents":"m"}]}}]}},"sourceSpan":{"start":[24,1],"name":"src/Neon/Transformers/MaybeT.purs","end":[30,1]}},{"comments":null,"title":"maybeTHasBind","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasBind"],"HasBind"],[{"tag":"TypeVar","contents":"m"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasBind"],"HasBind"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Transformers","MaybeT"],"MaybeT"]},{"tag":"TypeVar","contents":"m"}]}}]}},"sourceSpan":{"start":[30,1],"name":"src/Neon/Transformers/MaybeT.purs","end":[37,1]}},{"comments":null,"title":"maybeTHasEmpty","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasBind"],"HasBind"],[{"tag":"TypeVar","contents":"m"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasEmpty"],"HasEmpty"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Transformers","MaybeT"],"MaybeT"]},{"tag":"TypeVar","contents":"m"}]}}]}},"sourceSpan":{"start":[37,1],"name":"src/Neon/Transformers/MaybeT.purs","end":[40,1]}},{"comments":null,"title":"maybeTHasLift","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasLift"],"HasLift"]},{"tag":"TypeConstructor","contents":[["Neon","Transformers","MaybeT"],"MaybeT"]}]}},"sourceSpan":{"start":[40,1],"name":"src/Neon/Transformers/MaybeT.purs","end":[43,1]}},{"comments":null,"title":"maybeTHasMap","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasMap"],"HasMap"],[{"tag":"TypeVar","contents":"m"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasMap"],"HasMap"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Transformers","MaybeT"],"MaybeT"]},{"tag":"TypeVar","contents":"m"}]}}]}},"sourceSpan":{"start":[43,1],"name":"src/Neon/Transformers/MaybeT.purs","end":[47,1]}},{"comments":null,"title":"maybeTHasPure","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasBind"],"HasBind"],[{"tag":"TypeVar","contents":"m"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasPure"],"HasPure"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Transformers","MaybeT"],"MaybeT"]},{"tag":"TypeVar","contents":"m"}]}}]}},"sourceSpan":{"start":[47,1],"name":"src/Neon/Transformers/MaybeT.purs","end":[60,1]}}],"comments":"The \"maybe\" monad transformer. Extends any monad with failure via the\n`Maybe` type.\n","title":"MaybeT","fixity":null,"info":{"declType":"data","dataDeclType":"newtype","typeArguments":[["m",null],["a",null]]},"sourceSpan":{"start":[18,1],"name":"src/Neon/Transformers/MaybeT.purs","end":[20,1]}},{"children":[{"comments":null,"title":"StateT","info":{"arguments":[{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"s"}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"m"},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Pair"],"Pair"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"s"}]}}]}]}}],"declType":"dataConstructor"},"sourceSpan":null},{"comments":null,"title":"stateTHasAlternative","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasAlternative"],"HasAlternative"],[{"tag":"TypeVar","contents":"m"}]],[[["Neon","Types","HasBind"],"HasBind"],[{"tag":"TypeVar","contents":"m"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasAlternative"],"HasAlternative"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Transformers","StateT"],"StateT"]},{"tag":"TypeVar","contents":"s"}]},{"tag":"TypeVar","contents":"m"}]}}]}},"sourceSpan":{"start":[21,1],"name":"src/Neon/Transformers/StateT.purs","end":[25,1]}},{"comments":null,"title":"stateTHasApply","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasBind"],"HasBind"],[{"tag":"TypeVar","contents":"m"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasApply"],"HasApply"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Transformers","StateT"],"StateT"]},{"tag":"TypeVar","contents":"s"}]},{"tag":"TypeVar","contents":"m"}]}}]}},"sourceSpan":{"start":[25,1],"name":"src/Neon/Transformers/StateT.purs","end":[31,1]}},{"comments":null,"title":"stateTHasBind","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasBind"],"HasBind"],[{"tag":"TypeVar","contents":"m"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasBind"],"HasBind"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Transformers","StateT"],"StateT"]},{"tag":"TypeVar","contents":"s"}]},{"tag":"TypeVar","contents":"m"}]}}]}},"sourceSpan":{"start":[31,1],"name":"src/Neon/Transformers/StateT.purs","end":[36,1]}},{"comments":null,"title":"stateTHasEmpty","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasBind"],"HasBind"],[{"tag":"TypeVar","contents":"m"}]],[[["Neon","Types","HasEmpty"],"HasEmpty"],[{"tag":"TypeVar","contents":"m"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasEmpty"],"HasEmpty"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Transformers","StateT"],"StateT"]},{"tag":"TypeVar","contents":"s"}]},{"tag":"TypeVar","contents":"m"}]}}]}},"sourceSpan":{"start":[36,1],"name":"src/Neon/Transformers/StateT.purs","end":[39,1]}},{"comments":null,"title":"stateTHasLift","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasLift"],"HasLift"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Transformers","StateT"],"StateT"]},{"tag":"TypeVar","contents":"s"}]}}]}},"sourceSpan":{"start":[39,1],"name":"src/Neon/Transformers/StateT.purs","end":[42,1]}},{"comments":null,"title":"stateTHasMap","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasMap"],"HasMap"],[{"tag":"TypeVar","contents":"m"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasMap"],"HasMap"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Transformers","StateT"],"StateT"]},{"tag":"TypeVar","contents":"s"}]},{"tag":"TypeVar","contents":"m"}]}}]}},"sourceSpan":{"start":[42,1],"name":"src/Neon/Transformers/StateT.purs","end":[47,1]}},{"comments":null,"title":"stateTHasPure","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasBind"],"HasBind"],[{"tag":"TypeVar","contents":"m"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasPure"],"HasPure"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Transformers","StateT"],"StateT"]},{"tag":"TypeVar","contents":"s"}]},{"tag":"TypeVar","contents":"m"}]}}]}},"sourceSpan":{"start":[47,1],"name":"src/Neon/Transformers/StateT.purs","end":[50,1]}},{"comments":null,"title":"stateTHasState","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasBind"],"HasBind"],[{"tag":"TypeVar","contents":"m"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasState"],"HasState"]},{"tag":"TypeVar","contents":"s"}]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Transformers","StateT"],"StateT"]},{"tag":"TypeVar","contents":"s"}]},{"tag":"TypeVar","contents":"m"}]}}]}},"sourceSpan":{"start":[50,1],"name":"src/Neon/Transformers/StateT.purs","end":[61,1]}}],"comments":"The \"state\" monad transformer. Extends any monad with state via the `Pair`\ntype.\n","title":"StateT","fixity":null,"info":{"declType":"data","dataDeclType":"newtype","typeArguments":[["s",null],["m",null],["a",null]]},"sourceSpan":{"start":[19,1],"name":"src/Neon/Transformers/StateT.purs","end":[21,1]}},{"children":[],"comments":"Runs a \"maybe\" monad transformer, returning the `Maybe` value in the\nwrapped monad.\n\n``` purescript\nrunMaybeT do\n  Just 1\n  Nothing\n  Just 1\n-- Identity Nothing\n```\n","title":"runMaybeT","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["m",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Transformers","MaybeT"],"MaybeT"]},{"tag":"TypeVar","contents":"m"}]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"m"},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Maybe"],"Maybe"]},{"tag":"TypeVar","contents":"a"}]}}]}]},null]},null]}},"sourceSpan":{"start":[60,1],"name":"src/Neon/Transformers/MaybeT.purs","end":[61,1]}},{"children":[],"comments":"Runs a \"state\" monad transformer, returning the stateful value and the\nresult in the wrapped monad.\n\n``` purescript\nflip runStateT \"world\"\" do\n  pure \"hello\"\n-- Identity (pair \"hello\" \"world\")\n```\n","title":"runStateT","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["m",{"tag":"ForAll","contents":["s",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Transformers","StateT"],"StateT"]},{"tag":"TypeVar","contents":"s"}]},{"tag":"TypeVar","contents":"m"}]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"s"}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"m"},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Pair"],"Pair"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"s"}]}}]}]}]},null]},null]},null]}},"sourceSpan":{"start":[61,1],"name":"src/Neon/Transformers/StateT.purs","end":[62,1]}}]},{"moduleName":["Neon","Types"],"declarations":[{"children":[{"comments":null,"title":"add","info":{"declType":"typeClassMember","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":null},{"comments":null,"title":"arrayHasAdd","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasAdd"],"HasAdd"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[27,1],"name":"src/Neon/Types/HasAdd.purs","end":[30,1]}},{"comments":null,"title":"booleanHasAdd","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasAdd"],"HasAdd"]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}},"sourceSpan":{"start":[30,1],"name":"src/Neon/Types/HasAdd.purs","end":[33,1]}},{"comments":null,"title":"functionHasAdd","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasAdd"],"HasAdd"],[{"tag":"TypeVar","contents":"b"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasAdd"],"HasAdd"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}},"sourceSpan":{"start":[33,1],"name":"src/Neon/Types/HasAdd.purs","end":[36,1]}},{"comments":null,"title":"intHasAdd","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasAdd"],"HasAdd"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}},"sourceSpan":{"start":[36,1],"name":"src/Neon/Types/HasAdd.purs","end":[39,1]}},{"comments":null,"title":"numberHasAdd","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasAdd"],"HasAdd"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]}},"sourceSpan":{"start":[39,1],"name":"src/Neon/Types/HasAdd.purs","end":[42,1]}},{"comments":null,"title":"stringHasAdd","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasAdd"],"HasAdd"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}},"sourceSpan":{"start":[42,1],"name":"src/Neon/Types/HasAdd.purs","end":[51,1]}}],"comments":"Represents types that can be added together. This is also known as a\n[semigroup](https://en.wikipedia.org/wiki/Semigroup).\n\nLaws:\n- Associativity: `x + (y + z) = (x + y) + z`\n","title":"HasAdd","fixity":null,"info":{"arguments":[["a",null]],"declType":"typeClass","superclasses":[]},"sourceSpan":{"start":[18,1],"name":"src/Neon/Types/HasAdd.purs","end":[27,1]}},{"children":[{"comments":null,"title":"alternative","info":{"declType":"typeClassMember","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}]}]},null]}},"sourceSpan":null},{"comments":null,"title":"arrayHasAlternative","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasAlternative"],"HasAlternative"]},{"tag":"TypeConstructor","contents":[["Prim"],"Array"]}]}},"sourceSpan":{"start":[25,1],"name":"src/Neon/Types/HasAlternative.purs","end":[26,28]}}],"comments":"Represents types that can express alternatives. This is like `HasAdd` but\nfor types of kind `* -> *` instead of `*`.\n\nLaws:\n- Associativity: `alternative (alternative x y) z == alternative x (alternative y z)`\n- Distributivity: `map f (alternative x y) == alternative (map f x) (map f y)`\n","title":"HasAlternative","fixity":null,"info":{"arguments":[["f",null]],"declType":"typeClass","superclasses":[[[["Neon","Types","HasMap"],"HasMap"],[{"tag":"TypeVar","contents":"f"}]]]},"sourceSpan":{"start":[15,1],"name":"src/Neon/Types/HasAlternative.purs","end":[25,1]}},{"children":[{"comments":null,"title":"and","info":{"declType":"typeClassMember","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":null},{"comments":null,"title":"booleanHasAnd","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasAnd"],"HasAnd"]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}},"sourceSpan":{"start":[28,1],"name":"src/Neon/Types/HasAnd.purs","end":[31,1]}},{"comments":null,"title":"functionHasAnd","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasAnd"],"HasAnd"],[{"tag":"TypeVar","contents":"b"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasAnd"],"HasAnd"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}},"sourceSpan":{"start":[31,1],"name":"src/Neon/Types/HasAnd.purs","end":[40,1]}}],"comments":"Represents types than can be \"and\"ed together. This is also known as a\n[logical conjunction](https://en.wikipedia.org/wiki/Logical_conjunction).\n\nLaws:\n- Associativity: `x && (y && z) = (x && y) && z`\n- Commutativity: `x && y = y && x`\n- Identity: `x && top = x`\n- Annihiliation: `x && bottom = bottom`\n- Idempotence: `x && x = x`\n","title":"HasAnd","fixity":null,"info":{"arguments":[["a",null]],"declType":"typeClass","superclasses":[[[["Neon","Types","HasBottom"],"HasBottom"],[{"tag":"TypeVar","contents":"a"}]],[[["Neon","Types","HasTop"],"HasTop"],[{"tag":"TypeVar","contents":"a"}]]]},"sourceSpan":{"start":[19,1],"name":"src/Neon/Types/HasAnd.purs","end":[28,1]}},{"children":[{"comments":null,"title":"apply","info":{"declType":"typeClassMember","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"b"}]}]}]},null]},null]}},"sourceSpan":null},{"comments":null,"title":"arrayHasApply","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasApply"],"HasApply"]},{"tag":"TypeConstructor","contents":[["Prim"],"Array"]}]}},"sourceSpan":{"start":[26,1],"name":"src/Neon/Types/HasApply.purs","end":[29,1]}},{"comments":null,"title":"functionHasApply","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasApply"],"HasApply"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[29,1],"name":"src/Neon/Types/HasApply.purs","end":[30,30]}}],"comments":"Represents types that can be applied from within a container. In other\nwords, given both a function and a value in a container, apply the\nfunction to the value and return the result in a container. This is also\nknown as an applicative functor.\n\nLaws:\n- Associative composition: `apply (apply (map (<<) f) g) h = apply f (apply g h)`\n","title":"HasApply","fixity":null,"info":{"arguments":[["f",null]],"declType":"typeClass","superclasses":[[[["Neon","Types","HasMap"],"HasMap"],[{"tag":"TypeVar","contents":"f"}]]]},"sourceSpan":{"start":[17,1],"name":"src/Neon/Types/HasApply.purs","end":[26,1]}},{"children":[{"comments":null,"title":"bind","info":{"declType":"typeClassMember","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"b"}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"b"}]}]}]},null]},null]}},"sourceSpan":null},{"comments":null,"title":"arrayHasBind","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasBind"],"HasBind"]},{"tag":"TypeConstructor","contents":[["Prim"],"Array"]}]}},"sourceSpan":{"start":[26,1],"name":"src/Neon/Types/HasBind.purs","end":[29,1]}},{"comments":null,"title":"functionHasbind","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasBind"],"HasBind"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[29,1],"name":"src/Neon/Types/HasBind.purs","end":[38,1]}}],"comments":"Represents types that can express sequential actions. This is also known\nas a [monad](https://en.wikipedia.org/wiki/Monad_(functional_programming)).\n\nLaws:\n- Associativity: `bind (bind x f) g = bind x (\\ k -> bind (f k) g)`\n","title":"HasBind","fixity":null,"info":{"arguments":[["f",null]],"declType":"typeClass","superclasses":[[[["Neon","Types","HasPure"],"HasPure"],[{"tag":"TypeVar","contents":"f"}]]]},"sourceSpan":{"start":[17,1],"name":"src/Neon/Types/HasBind.purs","end":[26,1]}},{"children":[{"comments":null,"title":"bottom","info":{"declType":"typeClassMember","type":{"tag":"TypeVar","contents":"a"}},"sourceSpan":null},{"comments":null,"title":"booleanHasBottom","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasBottom"],"HasBottom"]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}},"sourceSpan":{"start":[28,1],"name":"src/Neon/Types/HasBottom.purs","end":[31,1]}},{"comments":null,"title":"charHasBottom","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasBottom"],"HasBottom"]},{"tag":"TypeConstructor","contents":[["Prim"],"Char"]}]}},"sourceSpan":{"start":[31,1],"name":"src/Neon/Types/HasBottom.purs","end":[34,1]}},{"comments":null,"title":"functionHasBottom","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasBottom"],"HasBottom"],[{"tag":"TypeVar","contents":"b"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasBottom"],"HasBottom"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}},"sourceSpan":{"start":[34,1],"name":"src/Neon/Types/HasBottom.purs","end":[37,1]}},{"comments":null,"title":"intHasBottom","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasBottom"],"HasBottom"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}},"sourceSpan":{"start":[37,1],"name":"src/Neon/Types/HasBottom.purs","end":[40,1]}},{"comments":null,"title":"numberHasBottom","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasBottom"],"HasBottom"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]}},"sourceSpan":{"start":[40,1],"name":"src/Neon/Types/HasBottom.purs","end":[43,1]}},{"comments":null,"title":"orderingHasBottom","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasBottom"],"HasBottom"]},{"tag":"TypeConstructor","contents":[["Neon","Values","Ordering"],"Ordering"]}]}},"sourceSpan":{"start":[43,1],"name":"src/Neon/Types/HasBottom.purs","end":[44,12]}}],"comments":"Represents types that have a lower bound.\n\nLaws:\n- `bottom <= x`\n","title":"HasBottom","fixity":null,"info":{"arguments":[["a",null]],"declType":"typeClass","superclasses":[[[["Neon","Types","HasCompare"],"HasCompare"],[{"tag":"TypeVar","contents":"a"}]]]},"sourceSpan":{"start":[19,1],"name":"src/Neon/Types/HasBottom.purs","end":[28,1]}},{"children":[{"comments":null,"title":"compare","info":{"declType":"typeClassMember","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeConstructor","contents":[["Neon","Values","Ordering"],"Ordering"]}]}]}},"sourceSpan":null},{"comments":null,"title":"arrayHasCompare","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasCompare"],"HasCompare"],[{"tag":"TypeVar","contents":"a"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasCompare"],"HasCompare"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[45,1],"name":"src/Neon/Types/HasCompare.purs","end":[48,1]}},{"comments":null,"title":"booleanHasCompare","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasCompare"],"HasCompare"]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}},"sourceSpan":{"start":[48,1],"name":"src/Neon/Types/HasCompare.purs","end":[55,1]}},{"comments":null,"title":"charHasCompare","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasCompare"],"HasCompare"]},{"tag":"TypeConstructor","contents":[["Prim"],"Char"]}]}},"sourceSpan":{"start":[55,1],"name":"src/Neon/Types/HasCompare.purs","end":[58,1]}},{"comments":null,"title":"functionHasCompare","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasCompare"],"HasCompare"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}},"sourceSpan":{"start":[58,1],"name":"src/Neon/Types/HasCompare.purs","end":[61,1]}},{"comments":null,"title":"intHasCompare","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasCompare"],"HasCompare"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}},"sourceSpan":{"start":[61,1],"name":"src/Neon/Types/HasCompare.purs","end":[64,1]}},{"comments":null,"title":"numberHasCompare","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasCompare"],"HasCompare"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]}},"sourceSpan":{"start":[64,1],"name":"src/Neon/Types/HasCompare.purs","end":[67,1]}},{"comments":null,"title":"orderingHasCompare","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasCompare"],"HasCompare"]},{"tag":"TypeConstructor","contents":[["Neon","Values","Ordering"],"Ordering"]}]}},"sourceSpan":{"start":[67,1],"name":"src/Neon/Types/HasCompare.purs","end":[80,1]}},{"comments":null,"title":"stringHasCompare","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasCompare"],"HasCompare"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}},"sourceSpan":{"start":[80,1],"name":"src/Neon/Types/HasCompare.purs","end":[90,1]}}],"comments":"Represents types that can be compared to each other. This is also known as\na [total order](https://en.wikipedia.org/wiki/Total_order).\n\nLaws:\n- Reflexivity: `a <= a`\n- Antisymmetry: if `a <= b` and `b <= a` then `a = b`\n- Transitivity: if `a <= b` and `b <= c` then `a <= c`\n","title":"HasCompare","fixity":null,"info":{"arguments":[["a",null]],"declType":"typeClass","superclasses":[[[["Neon","Types","HasEqual"],"HasEqual"],[{"tag":"TypeVar","contents":"a"}]]]},"sourceSpan":{"start":[35,1],"name":"src/Neon/Types/HasCompare.purs","end":[45,1]}},{"children":[{"comments":null,"title":"compose","info":{"declType":"typeClassMember","type":{"tag":"ForAll","contents":["c",{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeVar","contents":"c"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"c"}]}]}]},null]},null]},null]}},"sourceSpan":null},{"comments":null,"title":"functionHasCompose","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasCompose"],"HasCompose"]},{"tag":"TypeConstructor","contents":[["Prim"],"Function"]}]}},"sourceSpan":{"start":[24,1],"name":"src/Neon/Types/HasCompose.purs","end":[33,1]}}],"comments":"Represents types that have a composition morphism.\n\nLaws:\n- Associativity: `f >> (g >> h) = (f >> g) >> h`\n","title":"HasCompose","fixity":null,"info":{"arguments":[["f",null]],"declType":"typeClass","superclasses":[]},"sourceSpan":{"start":[14,1],"name":"src/Neon/Types/HasCompose.purs","end":[24,1]}},{"children":[{"comments":null,"title":"divide","info":{"declType":"typeClassMember","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":null},{"comments":null,"title":"modulo","info":{"declType":"typeClassMember","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":null},{"comments":null,"title":"functionHasDivide","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasDivide"],"HasDivide"],[{"tag":"TypeVar","contents":"b"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasDivide"],"HasDivide"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}},"sourceSpan":{"start":[38,1],"name":"src/Neon/Types/HasDivide.purs","end":[42,1]}},{"comments":null,"title":"intHasDivide","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasDivide"],"HasDivide"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}},"sourceSpan":{"start":[42,1],"name":"src/Neon/Types/HasDivide.purs","end":[46,1]}},{"comments":null,"title":"numberHasDivide","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasDivide"],"HasDivide"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]}},"sourceSpan":{"start":[46,1],"name":"src/Neon/Types/HasDivide.purs","end":[56,1]}}],"comments":"Represents types that are divisible.\n\nLaws:\n- Remainder: `(x / y) * y + (x % y) = x`\n- Identity: `x / one = x`\n","title":"HasDivide","fixity":null,"info":{"arguments":[["a",null]],"declType":"typeClass","superclasses":[[[["Neon","Types","HasOne"],"HasOne"],[{"tag":"TypeVar","contents":"a"}]]]},"sourceSpan":{"start":[21,1],"name":"src/Neon/Types/HasDivide.purs","end":[38,1]}},{"children":[{"comments":null,"title":"empty","info":{"declType":"typeClassMember","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]},null]}},"sourceSpan":null},{"comments":null,"title":"arrayHasEmpty","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasEmpty"],"HasEmpty"]},{"tag":"TypeConstructor","contents":[["Prim"],"Array"]}]}},"sourceSpan":{"start":[27,1],"name":"src/Neon/Types/HasEmpty.purs","end":[39,1]}}],"comments":"Represents types that can be empty. This is like `HasZero` but for types\nof kind `* -> *` instead of `*`.\n\nLaws:\n- Left identity: `alternative empty x == x`\n- Right identity: `alternative x empty == x`\n- Annihilation: `map f empty == empty`\n","title":"HasEmpty","fixity":null,"info":{"arguments":[["f",null]],"declType":"typeClass","superclasses":[[[["Neon","Types","HasAlternative"],"HasAlternative"],[{"tag":"TypeVar","contents":"f"}]]]},"sourceSpan":{"start":[18,1],"name":"src/Neon/Types/HasEmpty.purs","end":[27,1]}},{"children":[{"comments":null,"title":"equal","info":{"declType":"typeClassMember","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}]}},"sourceSpan":null},{"comments":null,"title":"arrayHasEqual","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasEqual"],"HasEqual"],[{"tag":"TypeVar","contents":"a"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasEqual"],"HasEqual"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[30,1],"name":"src/Neon/Types/HasEqual.purs","end":[33,1]}},{"comments":null,"title":"booleanHasEqual","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasEqual"],"HasEqual"]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}},"sourceSpan":{"start":[33,1],"name":"src/Neon/Types/HasEqual.purs","end":[36,1]}},{"comments":null,"title":"charHasEqual","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasEqual"],"HasEqual"]},{"tag":"TypeConstructor","contents":[["Prim"],"Char"]}]}},"sourceSpan":{"start":[36,1],"name":"src/Neon/Types/HasEqual.purs","end":[39,1]}},{"comments":null,"title":"functionHasEqual","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasEqual"],"HasEqual"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}},"sourceSpan":{"start":[39,1],"name":"src/Neon/Types/HasEqual.purs","end":[42,1]}},{"comments":null,"title":"intHasEqual","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasEqual"],"HasEqual"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}},"sourceSpan":{"start":[42,1],"name":"src/Neon/Types/HasEqual.purs","end":[45,1]}},{"comments":null,"title":"numberHasEqual","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasEqual"],"HasEqual"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]}},"sourceSpan":{"start":[45,1],"name":"src/Neon/Types/HasEqual.purs","end":[48,1]}},{"comments":null,"title":"stringHasEqual","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasEqual"],"HasEqual"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}},"sourceSpan":{"start":[48,1],"name":"src/Neon/Types/HasEqual.purs","end":[57,1]}}],"comments":"Represents types that can be equal to each other.\n\nLaws:\n- Reflexivity: `x == x = true`\n- Symmetry: `x == y = y == x`\n- Transitivity: `x == y` and `y == z` implies `x == z`\n","title":"HasEqual","fixity":null,"info":{"arguments":[["a",null]],"declType":"typeClass","superclasses":[]},"sourceSpan":{"start":[21,1],"name":"src/Neon/Types/HasEqual.purs","end":[30,1]}},{"children":[{"comments":null,"title":"foldl","info":{"declType":"typeClassMember","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeVar","contents":"b"}]}]}]},null]},null]}},"sourceSpan":null},{"comments":null,"title":"foldr","info":{"declType":"typeClassMember","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeVar","contents":"b"}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeVar","contents":"b"}]}]}]},null]},null]}},"sourceSpan":null},{"comments":null,"title":"arrayHasFold","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasFold"],"HasFold"]},{"tag":"TypeConstructor","contents":[["Prim"],"Array"]}]}},"sourceSpan":{"start":[45,1],"name":"src/Neon/Types/HasFold.purs","end":[56,1]}}],"comments":"Represents types that can be reduced to a single value. This is also known\nas a [fold](https://en.wikipedia.org/wiki/Fold_(higher-order_function)).\n","title":"HasFold","fixity":null,"info":{"arguments":[["f",null]],"declType":"typeClass","superclasses":[]},"sourceSpan":{"start":[28,1],"name":"src/Neon/Types/HasFold.purs","end":[45,1]}},{"children":[{"comments":null,"title":"fromArray","info":{"declType":"typeClassMember","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeVar","contents":"b"}]}},"sourceSpan":null},{"comments":null,"title":"stringHasFromArray","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasFromArray"],"HasFromArray"]},{"tag":"TypeConstructor","contents":[["Prim"],"Char"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}},"sourceSpan":{"start":[11,1],"name":"src/Neon/Types/HasFromArray.purs","end":[12,40]}}],"comments":null,"title":"HasFromArray","fixity":null,"info":{"arguments":[["a",null],["b",null]],"declType":"typeClass","superclasses":[]},"sourceSpan":{"start":[8,1],"name":"src/Neon/Types/HasFromArray.purs","end":[11,1]}},{"children":[{"comments":null,"title":"identity","info":{"declType":"typeClassMember","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"a"}]},null]}},"sourceSpan":null},{"comments":null,"title":"functionHasIdentity","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasIdentity"],"HasIdentity"]},{"tag":"TypeConstructor","contents":[["Prim"],"Function"]}]}},"sourceSpan":{"start":[23,1],"name":"src/Neon/Types/HasIdentity.purs","end":[24,21]}}],"comments":"Represents types that have an identity morphism. This is also known as a\n[category](https://en.wikipedia.org/wiki/Category_(mathematics)).\n\nLaws:\n- Identity: `f >> identity = identity >> f = f`\n","title":"HasIdentity","fixity":null,"info":{"arguments":[["f",null]],"declType":"typeClass","superclasses":[[[["Neon","Types","HasCompose"],"HasCompose"],[{"tag":"TypeVar","contents":"f"}]]]},"sourceSpan":{"start":[13,1],"name":"src/Neon/Types/HasIdentity.purs","end":[23,1]}},{"children":[{"comments":null,"title":"lift","info":{"declType":"typeClassMember","type":{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["m",{"tag":"ConstrainedType","contents":[[[[["Neon","Types","HasBind"],"HasBind"],[{"tag":"TypeVar","contents":"m"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"m"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"t"},{"tag":"TypeVar","contents":"m"}]},{"tag":"TypeVar","contents":"a"}]}]}]},null]},null]}},"sourceSpan":null}],"comments":"Represents types that support being lifted into a stack of\n[monad transformers](https://en.wikipedia.org/wiki/Monad_transformer).\n\nLaws:\n- `lift (pure x) = pure x`\n- `lift (bind m (\\ x -> y)) = bind (lift m) (\\ x -> lift y)`\n","title":"HasLift","fixity":null,"info":{"arguments":[["t",null]],"declType":"typeClass","superclasses":[]},"sourceSpan":{"start":[14,1],"name":"src/Neon/Types/HasLift.purs","end":[21,49]}},{"children":[{"comments":null,"title":"logarithm","info":{"declType":"typeClassMember","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":null},{"comments":null,"title":"intHasLogarithm","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasLogarithm"],"HasLogarithm"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}},"sourceSpan":{"start":[27,1],"name":"src/Neon/Types/HasLogarithm.purs","end":[30,1]}},{"comments":null,"title":"numberHasLogarithm","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasLogarithm"],"HasLogarithm"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]}},"sourceSpan":{"start":[30,1],"name":"src/Neon/Types/HasLogarithm.purs","end":[31,43]}}],"comments":"Represents types that support logarithms.\n\nLaws:\n- `logarithm b (x * y) = logarithm b x + logarithm b y`\n- `logarithm b (x / y) = logarithm b x - logarithm b y`\n- `logarithm b (x ^ y) = y * logarithm b x`\n","title":"HasLogarithm","fixity":null,"info":{"arguments":[["a",null]],"declType":"typeClass","superclasses":[[[["Neon","Types","HasDivide"],"HasDivide"],[{"tag":"TypeVar","contents":"a"}]],[[["Neon","Types","HasPower"],"HasPower"],[{"tag":"TypeVar","contents":"a"}]]]},"sourceSpan":{"start":[18,1],"name":"src/Neon/Types/HasLogarithm.purs","end":[27,1]}},{"children":[{"comments":null,"title":"map","info":{"declType":"typeClassMember","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"b"}]}]}]},null]},null]}},"sourceSpan":null},{"comments":null,"title":"arrayHasMap","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasMap"],"HasMap"]},{"tag":"TypeConstructor","contents":[["Prim"],"Array"]}]}},"sourceSpan":{"start":[29,1],"name":"src/Neon/Types/HasMap.purs","end":[32,1]}},{"comments":null,"title":"functionHasMap","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasMap"],"HasMap"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[32,1],"name":"src/Neon/Types/HasMap.purs","end":[41,1]}}],"comments":"Represents types that can be mapped over. This is also know as a\n[functor](https://en.wikipedia.org/wiki/Functor).\n\nLaws:\n- Identity: `map identity = identity`\n- Composition: `map (f >> g) = map f >> map g`\n","title":"HasMap","fixity":null,"info":{"arguments":[["f",null]],"declType":"typeClass","superclasses":[]},"sourceSpan":{"start":[20,1],"name":"src/Neon/Types/HasMap.purs","end":[29,1]}},{"children":[{"comments":null,"title":"multiply","info":{"declType":"typeClassMember","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":null},{"comments":null,"title":"booleanHasMultiply","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasMultiply"],"HasMultiply"]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}},"sourceSpan":{"start":[29,1],"name":"src/Neon/Types/HasMultiply.purs","end":[32,1]}},{"comments":null,"title":"functionHasMultiply","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasMultiply"],"HasMultiply"],[{"tag":"TypeVar","contents":"b"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasMultiply"],"HasMultiply"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}},"sourceSpan":{"start":[32,1],"name":"src/Neon/Types/HasMultiply.purs","end":[35,1]}},{"comments":null,"title":"intHasMultiply","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasMultiply"],"HasMultiply"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}},"sourceSpan":{"start":[35,1],"name":"src/Neon/Types/HasMultiply.purs","end":[38,1]}},{"comments":null,"title":"numberHasMultiply","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasMultiply"],"HasMultiply"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]}},"sourceSpan":{"start":[38,1],"name":"src/Neon/Types/HasMultiply.purs","end":[47,1]}}],"comments":"Represents values that can be multiplied together. This is also known as\na [near-ring](https://en.wikipedia.org/wiki/Near-ring).\n\nLaws:\n- Associativity: `x * (y * z) = (x * y) * z`\n- Distributivity: `x * (y + z) = (x * y) + (x * z)`\n- Annihilation: `x * zero = zero * x = zero`\n","title":"HasMultiply","fixity":null,"info":{"arguments":[["a",null]],"declType":"typeClass","superclasses":[[[["Neon","Types","HasZero"],"HasZero"],[{"tag":"TypeVar","contents":"a"}]]]},"sourceSpan":{"start":[20,1],"name":"src/Neon/Types/HasMultiply.purs","end":[29,1]}},{"children":[{"comments":null,"title":"not","info":{"declType":"typeClassMember","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"a"}]}},"sourceSpan":null},{"comments":null,"title":"booleanHasNot","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasNot"],"HasNot"]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}},"sourceSpan":{"start":[29,1],"name":"src/Neon/Types/HasNot.purs","end":[32,1]}},{"comments":null,"title":"functionHasNot","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasNot"],"HasNot"],[{"tag":"TypeVar","contents":"b"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasNot"],"HasNot"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}},"sourceSpan":{"start":[32,1],"name":"src/Neon/Types/HasNot.purs","end":[43,1]}}],"comments":"Represents types can be \"not\"ed. This is also know as\n[negation](https://en.wikipedia.org/wiki/Negation).\n\nLaws:\n- `not top = bottom`\n- `not bottom = top`\n","title":"HasNot","fixity":null,"info":{"arguments":[["a",null]],"declType":"typeClass","superclasses":[[[["Neon","Types","HasBottom"],"HasBottom"],[{"tag":"TypeVar","contents":"a"}]],[[["Neon","Types","HasTop"],"HasTop"],[{"tag":"TypeVar","contents":"a"}]]]},"sourceSpan":{"start":[20,1],"name":"src/Neon/Types/HasNot.purs","end":[29,1]}},{"children":[{"comments":null,"title":"one","info":{"declType":"typeClassMember","type":{"tag":"TypeVar","contents":"a"}},"sourceSpan":null},{"comments":null,"title":"booleanHasOne","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasOne"],"HasOne"]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}},"sourceSpan":{"start":[28,1],"name":"src/Neon/Types/HasOne.purs","end":[31,1]}},{"comments":null,"title":"functionHasOne","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasOne"],"HasOne"],[{"tag":"TypeVar","contents":"b"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasOne"],"HasOne"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}},"sourceSpan":{"start":[31,1],"name":"src/Neon/Types/HasOne.purs","end":[34,1]}},{"comments":null,"title":"intHasOne","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasOne"],"HasOne"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}},"sourceSpan":{"start":[34,1],"name":"src/Neon/Types/HasOne.purs","end":[37,1]}},{"comments":null,"title":"numberHasOne","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasOne"],"HasOne"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]}},"sourceSpan":{"start":[37,1],"name":"src/Neon/Types/HasOne.purs","end":[50,1]}}],"comments":"Represents types that have an multiplicative identity. This is also known\nas a [semiring](https://en.wikipedia.org/wiki/Semiring).\n\nLaws:\n- Identity: `one * x = x * one = x`\n","title":"HasOne","fixity":null,"info":{"arguments":[["a",null]],"declType":"typeClass","superclasses":[[[["Neon","Types","HasMultiply"],"HasMultiply"],[{"tag":"TypeVar","contents":"a"}]]]},"sourceSpan":{"start":[19,1],"name":"src/Neon/Types/HasOne.purs","end":[28,1]}},{"children":[{"comments":null,"title":"or","info":{"declType":"typeClassMember","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":null},{"comments":null,"title":"booleanHasOr","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasOr"],"HasOr"]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}},"sourceSpan":{"start":[28,1],"name":"src/Neon/Types/HasOr.purs","end":[31,1]}},{"comments":null,"title":"functionHasOr","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasOr"],"HasOr"],[{"tag":"TypeVar","contents":"b"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasOr"],"HasOr"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}},"sourceSpan":{"start":[31,1],"name":"src/Neon/Types/HasOr.purs","end":[40,1]}}],"comments":"Represents types than can be \"or\"ed together. This is also known as a\n[logical disjunction](https://en.wikipedia.org/wiki/Logical_disjunction).\n\nLaws:\n- Associativity: `x || (y || z) = (x || y) || z`\n- Commutativity: `x || y = y || x`\n- Identity: `x || bottom = x`\n- Annihiliation: `x || top = top`\n- Idempotence: `x || x = x`\n","title":"HasOr","fixity":null,"info":{"arguments":[["a",null]],"declType":"typeClass","superclasses":[[[["Neon","Types","HasBottom"],"HasBottom"],[{"tag":"TypeVar","contents":"a"}]],[[["Neon","Types","HasTop"],"HasTop"],[{"tag":"TypeVar","contents":"a"}]]]},"sourceSpan":{"start":[19,1],"name":"src/Neon/Types/HasOr.purs","end":[28,1]}},{"children":[{"comments":null,"title":"power","info":{"declType":"typeClassMember","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":null},{"comments":null,"title":"intHasPower","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasPower"],"HasPower"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}},"sourceSpan":{"start":[28,1],"name":"src/Neon/Types/HasPower.purs","end":[31,1]}},{"comments":null,"title":"numberHasPower","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasPower"],"HasPower"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]}},"sourceSpan":{"start":[31,1],"name":"src/Neon/Types/HasPower.purs","end":[40,1]}}],"comments":"Represents types that can be exponentiated.\n\nLaws:\n- `(b ^ n) * (b ^ m) = b ^ (n + m)`\n- `(b ^ n) ^ m = b ^ (n * m)`\n- `(b * y) ^ n = (b ^ n) * (y ^ n)`\n","title":"HasPower","fixity":null,"info":{"arguments":[["a",null]],"declType":"typeClass","superclasses":[[[["Neon","Types","HasOne"],"HasOne"],[{"tag":"TypeVar","contents":"a"}]]]},"sourceSpan":{"start":[18,1],"name":"src/Neon/Types/HasPower.purs","end":[28,1]}},{"children":[{"comments":null,"title":"pure","info":{"declType":"typeClassMember","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}]},null]}},"sourceSpan":null},{"comments":null,"title":"arrayHasPure","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasPure"],"HasPure"]},{"tag":"TypeConstructor","contents":[["Prim"],"Array"]}]}},"sourceSpan":{"start":[31,1],"name":"src/Neon/Types/HasPure.purs","end":[34,1]}},{"comments":null,"title":"functionHasPure","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasPure"],"HasPure"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[34,1],"name":"src/Neon/Types/HasPure.purs","end":[46,1]}}],"comments":"Represents types that allow injecting values into a container.\n\nLaws:\n- Identity: `apply (pure id) v = v`\n- Composition: `apply (apply (apply (pure <<) f) g) h = apply f (apply g h)`\n- Homomorphism: `apply (pure f) (pure x) = pure (f x)`\n- Interchange: `apply u (pure y) = apply (pure \\ f -> f y) u`\n","title":"HasPure","fixity":null,"info":{"arguments":[["f",null]],"declType":"typeClass","superclasses":[[[["Neon","Types","HasApply"],"HasApply"],[{"tag":"TypeVar","contents":"f"}]]]},"sourceSpan":{"start":[20,1],"name":"src/Neon/Types/HasPure.purs","end":[31,1]}},{"children":[{"comments":null,"title":"root","info":{"declType":"typeClassMember","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":null},{"comments":null,"title":"intHasRoot","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasRoot"],"HasRoot"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}},"sourceSpan":{"start":[25,1],"name":"src/Neon/Types/HasRoot.purs","end":[28,1]}},{"comments":null,"title":"numberHasRoot","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasRoot"],"HasRoot"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]}},"sourceSpan":{"start":[28,1],"name":"src/Neon/Types/HasRoot.purs","end":[29,33]}}],"comments":"Represents types that support roots.\n\nLaws:\n- `root n x = x ^ (1 / n)`\n","title":"HasRoot","fixity":null,"info":{"arguments":[["a",null]],"declType":"typeClass","superclasses":[[[["Neon","Types","HasDivide"],"HasDivide"],[{"tag":"TypeVar","contents":"a"}]],[[["Neon","Types","HasPower"],"HasPower"],[{"tag":"TypeVar","contents":"a"}]]]},"sourceSpan":{"start":[16,1],"name":"src/Neon/Types/HasRoot.purs","end":[25,1]}},{"children":[{"comments":null,"title":"show","info":{"declType":"typeClassMember","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}},"sourceSpan":null},{"comments":null,"title":"arrayHasShow","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasShow"],"HasShow"],[{"tag":"TypeVar","contents":"a"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasShow"],"HasShow"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[24,1],"name":"src/Neon/Types/HasShow.purs","end":[27,1]}},{"comments":null,"title":"booleanHasShow","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasShow"],"HasShow"]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}},"sourceSpan":{"start":[27,1],"name":"src/Neon/Types/HasShow.purs","end":[30,1]}},{"comments":null,"title":"charHasShow","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasShow"],"HasShow"]},{"tag":"TypeConstructor","contents":[["Prim"],"Char"]}]}},"sourceSpan":{"start":[30,1],"name":"src/Neon/Types/HasShow.purs","end":[33,1]}},{"comments":null,"title":"intHasShow","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasShow"],"HasShow"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}},"sourceSpan":{"start":[33,1],"name":"src/Neon/Types/HasShow.purs","end":[36,1]}},{"comments":null,"title":"numberHasShow","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasShow"],"HasShow"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]}},"sourceSpan":{"start":[36,1],"name":"src/Neon/Types/HasShow.purs","end":[39,1]}},{"comments":null,"title":"stringHasShow","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasShow"],"HasShow"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}},"sourceSpan":{"start":[39,1],"name":"src/Neon/Types/HasShow.purs","end":[40,29]}}],"comments":"Represents types that can be converting to a string.\n\nThis class does not have any laws.\n","title":"HasShow","fixity":null,"info":{"arguments":[["a",null]],"declType":"typeClass","superclasses":[]},"sourceSpan":{"start":[15,1],"name":"src/Neon/Types/HasShow.purs","end":[24,1]}},{"children":[{"comments":null,"title":"state","info":{"declType":"typeClassMember","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"s"}]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Pair"],"Pair"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"s"}]}}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"m"},{"tag":"TypeVar","contents":"a"}]}]},null]}},"sourceSpan":null}],"comments":"Represents monads that contain \"mutable\" state.\n\nLaws:\n- `do { getState ; getState } = getState`\n- `do { setState x ; setState y } = setState y`\n- `do { setState x ; getState } = map (always x) (setState x)`\n- `do { s <- getState ; setState s } = pure unit`\n","title":"HasState","fixity":null,"info":{"arguments":[["s",null],["m",null]],"declType":"typeClass","superclasses":[[[["Neon","Types","HasBind"],"HasBind"],[{"tag":"TypeVar","contents":"m"}]]]},"sourceSpan":{"start":[20,1],"name":"src/Neon/Types/HasState.purs","end":[35,1]}},{"children":[{"comments":null,"title":"subtract","info":{"declType":"typeClassMember","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":null},{"comments":null,"title":"functionHasSubtract","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasSubtract"],"HasSubtract"],[{"tag":"TypeVar","contents":"b"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasSubtract"],"HasSubtract"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}},"sourceSpan":{"start":[28,1],"name":"src/Neon/Types/HasSubtract.purs","end":[31,1]}},{"comments":null,"title":"intHasSubtract","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasSubtract"],"HasSubtract"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}},"sourceSpan":{"start":[31,1],"name":"src/Neon/Types/HasSubtract.purs","end":[34,1]}},{"comments":null,"title":"numberHasSubtract","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasSubtract"],"HasSubtract"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]}},"sourceSpan":{"start":[34,1],"name":"src/Neon/Types/HasSubtract.purs","end":[43,1]}}],"comments":"Represents types that can be subtracted from each other.\n\nLaws:\n- Inverse: `a - a = a + (zero - a) = zero`\n","title":"HasSubtract","fixity":null,"info":{"arguments":[["a",null]],"declType":"typeClass","superclasses":[[[["Neon","Types","HasZero"],"HasZero"],[{"tag":"TypeVar","contents":"a"}]]]},"sourceSpan":{"start":[19,1],"name":"src/Neon/Types/HasSubtract.purs","end":[28,1]}},{"children":[{"comments":null,"title":"toArray","info":{"declType":"typeClassMember","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"b"}]}]}},"sourceSpan":null},{"comments":null,"title":"stringHasToArray","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasToArray"],"HasToArray"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Char"]}]}},"sourceSpan":{"start":[11,1],"name":"src/Neon/Types/HasToArray.purs","end":[12,35]}}],"comments":null,"title":"HasToArray","fixity":null,"info":{"arguments":[["a",null],["b",null]],"declType":"typeClass","superclasses":[]},"sourceSpan":{"start":[8,1],"name":"src/Neon/Types/HasToArray.purs","end":[11,1]}},{"children":[{"comments":null,"title":"top","info":{"declType":"typeClassMember","type":{"tag":"TypeVar","contents":"a"}},"sourceSpan":null},{"comments":null,"title":"booleanHasTop","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasTop"],"HasTop"]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}},"sourceSpan":{"start":[27,1],"name":"src/Neon/Types/HasTop.purs","end":[30,1]}},{"comments":null,"title":"charHasTop","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasTop"],"HasTop"]},{"tag":"TypeConstructor","contents":[["Prim"],"Char"]}]}},"sourceSpan":{"start":[30,1],"name":"src/Neon/Types/HasTop.purs","end":[33,1]}},{"comments":null,"title":"functionHasTop","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasTop"],"HasTop"],[{"tag":"TypeVar","contents":"b"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasTop"],"HasTop"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}},"sourceSpan":{"start":[33,1],"name":"src/Neon/Types/HasTop.purs","end":[36,1]}},{"comments":null,"title":"intHasTop","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasTop"],"HasTop"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}},"sourceSpan":{"start":[36,1],"name":"src/Neon/Types/HasTop.purs","end":[39,1]}},{"comments":null,"title":"numberHasTop","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasTop"],"HasTop"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]}},"sourceSpan":{"start":[39,1],"name":"src/Neon/Types/HasTop.purs","end":[42,1]}},{"comments":null,"title":"orderingHasTop","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasTop"],"HasTop"]},{"tag":"TypeConstructor","contents":[["Neon","Values","Ordering"],"Ordering"]}]}},"sourceSpan":{"start":[42,1],"name":"src/Neon/Types/HasTop.purs","end":[43,9]}}],"comments":"Represents types that have an upper bound.\n\nLaws:\n- `top >= x`\n","title":"HasTop","fixity":null,"info":{"arguments":[["a",null]],"declType":"typeClass","superclasses":[[[["Neon","Types","HasCompare"],"HasCompare"],[{"tag":"TypeVar","contents":"a"}]]]},"sourceSpan":{"start":[18,1],"name":"src/Neon/Types/HasTop.purs","end":[27,1]}},{"children":[{"comments":null,"title":"traverse","info":{"declType":"typeClassMember","type":{"tag":"ForAll","contents":["m",{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[[[[["Neon","Types","HasPure"],"HasPure"],[{"tag":"TypeVar","contents":"m"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"m"},{"tag":"TypeVar","contents":"b"}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"t"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"m"},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"t"},{"tag":"TypeVar","contents":"b"}]}}]}]}]}]},null]},null]},null]}},"sourceSpan":null},{"comments":null,"title":"arrayHasTraverse","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasTraverse"],"HasTraverse"]},{"tag":"TypeConstructor","contents":[["Prim"],"Array"]}]}},"sourceSpan":{"start":[35,1],"name":"src/Neon/Types/HasTraverse.purs","end":[38,1]}},{"comments":null,"title":"listHasTraverse","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasTraverse"],"HasTraverse"]},{"tag":"TypeConstructor","contents":[["Neon","Values","List"],"List"]}]}},"sourceSpan":{"start":[38,1],"name":"src/Neon/Types/HasTraverse.purs","end":[43,1]}},{"comments":null,"title":"maybeHasTraverse","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasTraverse"],"HasTraverse"]},{"tag":"TypeConstructor","contents":[["Neon","Values","Maybe"],"Maybe"]}]}},"sourceSpan":{"start":[43,1],"name":"src/Neon/Types/HasTraverse.purs","end":[54,1]}}],"comments":"Represents data structures that can be traversed from left to right.\nUnlike `HasFold`, these structures can be traversed while keeping their\nshape.\n\nLaws:\n- Naturality: `t >> traverse f = traverse (t >> f)`\n- Identity: `traverse Identity = Identity`\n- Composition: TODO\n","title":"HasTraverse","fixity":null,"info":{"arguments":[["t",null]],"declType":"typeClass","superclasses":[[[["Neon","Types","HasFold"],"HasFold"],[{"tag":"TypeVar","contents":"t"}]],[[["Neon","Types","HasMap"],"HasMap"],[{"tag":"TypeVar","contents":"t"}]]]},"sourceSpan":{"start":[25,1],"name":"src/Neon/Types/HasTraverse.purs","end":[35,1]}},{"children":[{"comments":null,"title":"zero","info":{"declType":"typeClassMember","type":{"tag":"TypeVar","contents":"a"}},"sourceSpan":null},{"comments":null,"title":"arrayHasZero","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasZero"],"HasZero"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[23,1],"name":"src/Neon/Types/HasZero.purs","end":[26,1]}},{"comments":null,"title":"booleanHasZero","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasZero"],"HasZero"]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}},"sourceSpan":{"start":[26,1],"name":"src/Neon/Types/HasZero.purs","end":[29,1]}},{"comments":null,"title":"functionHasZero","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasZero"],"HasZero"],[{"tag":"TypeVar","contents":"b"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasZero"],"HasZero"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}},"sourceSpan":{"start":[29,1],"name":"src/Neon/Types/HasZero.purs","end":[32,1]}},{"comments":null,"title":"intHasZero","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasZero"],"HasZero"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}},"sourceSpan":{"start":[32,1],"name":"src/Neon/Types/HasZero.purs","end":[35,1]}},{"comments":null,"title":"numberHasZero","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasZero"],"HasZero"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]}},"sourceSpan":{"start":[35,1],"name":"src/Neon/Types/HasZero.purs","end":[38,1]}},{"comments":null,"title":"stringHasZero","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasZero"],"HasZero"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}},"sourceSpan":{"start":[38,1],"name":"src/Neon/Types/HasZero.purs","end":[39,10]}}],"comments":"Represents types that have an additive identity. This is also known as a\n[monoid](https://en.wikipedia.org/wiki/Monoid).\n\nLaws:\n- Identity: `zero + x = x + zero = x`\n","title":"HasZero","fixity":null,"info":{"arguments":[["a",null]],"declType":"typeClass","superclasses":[[[["Neon","Types","HasAdd"],"HasAdd"],[{"tag":"TypeVar","contents":"a"}]]]},"sourceSpan":{"start":[14,1],"name":"src/Neon/Types/HasZero.purs","end":[23,1]}},{"children":[{"comments":null,"title":"fromEnum","info":{"declType":"typeClassMember","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}},"sourceSpan":null},{"comments":null,"title":"toEnum","info":{"declType":"typeClassMember","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Maybe"],"Maybe"]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":null},{"comments":null,"title":"succ","info":{"declType":"typeClassMember","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Maybe"],"Maybe"]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":null},{"comments":null,"title":"pred","info":{"declType":"typeClassMember","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Maybe"],"Maybe"]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":null},{"comments":null,"title":"booleanIsEnumerable","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","IsEnumerable"],"IsEnumerable"]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}},"sourceSpan":{"start":[72,1],"name":"src/Neon/Types/IsEnumerable.purs","end":[87,1]}},{"comments":null,"title":"charIsEnumerable","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","IsEnumerable"],"IsEnumerable"]},{"tag":"TypeConstructor","contents":[["Prim"],"Char"]}]}},"sourceSpan":{"start":[87,1],"name":"src/Neon/Types/IsEnumerable.purs","end":[95,1]}},{"comments":null,"title":"intIsEnumerable","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","IsEnumerable"],"IsEnumerable"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}},"sourceSpan":{"start":[95,1],"name":"src/Neon/Types/IsEnumerable.purs","end":[101,1]}},{"comments":null,"title":"maybeIsEnumerable","info":{"declType":"instance","dependencies":[[[["Neon","Types","IsEnumerable"],"IsEnumerable"],[{"tag":"TypeVar","contents":"a"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","IsEnumerable"],"IsEnumerable"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Maybe"],"Maybe"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[101,1],"name":"src/Neon/Types/IsEnumerable.purs","end":[119,1]}},{"comments":null,"title":"orderingIsEnumerable","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","IsEnumerable"],"IsEnumerable"]},{"tag":"TypeConstructor","contents":[["Neon","Values","Ordering"],"Ordering"]}]}},"sourceSpan":{"start":[119,1],"name":"src/Neon/Types/IsEnumerable.purs","end":[138,1]}},{"comments":null,"title":"unitIsEnumerable","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","IsEnumerable"],"IsEnumerable"]},{"tag":"TypeConstructor","contents":[["Neon","Values","Unit"],"Unit"]}]}},"sourceSpan":{"start":[138,1],"name":"src/Neon/Types/IsEnumerable.purs","end":[150,1]}}],"comments":"Represents types that can be converted to and from integers.\n\nLaws:\n- `pred bottom = Nothing`\n- `succ top = Nothing`\n- `toEnum (fromEnum x) = Just x`\n- `compare x y = compare (fromEnum x) (fromEnum y)`\n","title":"IsEnumerable","fixity":null,"info":{"arguments":[["a",null]],"declType":"typeClass","superclasses":[[[["Neon","Types","HasBottom"],"HasBottom"],[{"tag":"TypeVar","contents":"a"}]],[[["Neon","Types","HasTop"],"HasTop"],[{"tag":"TypeVar","contents":"a"}]]]},"sourceSpan":{"start":[31,1],"name":"src/Neon/Types/IsEnumerable.purs","end":[72,1]}},{"children":[],"comments":"Returns the absolute value of a value. If the value is negative, this\nreturns it negated. Otherwise it returns the value.\n\n``` purescript\nabs 1\n-- 1\nabs (-1)\n-- 1\n```\n","title":"abs","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[[[[["Neon","Types","HasCompare"],"HasCompare"],[{"tag":"TypeVar","contents":"a"}]],[[["Neon","Types","HasSubtract"],"HasSubtract"],[{"tag":"TypeVar","contents":"a"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"a"}]}]},null]}},"sourceSpan":{"start":[65,1],"name":"src/Neon/Types/HasSubtract.purs","end":[66,1]}},{"children":[],"comments":"Clamps the value to the given range.\n\n``` purescript\nclamp 2 4 1\n-- 2\nclamp 2 4 3\n-- 3\nclamp 2 4 5\n-- 4\n```\n","title":"clamp","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[[[[["Neon","Types","HasCompare"],"HasCompare"],[{"tag":"TypeVar","contents":"a"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"a"}]}]}]}]},null]}},"sourceSpan":{"start":[199,1],"name":"src/Neon/Types/HasCompare.purs","end":[200,1]}},{"children":[],"comments":"Applies a function to both values and compares the results.\n\n``` purescript\ncomparing (/ 2) 4 5\n-- EqualTo\n```\n","title":"comparing","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[[[[["Neon","Types","HasCompare"],"HasCompare"],[{"tag":"TypeVar","contents":"a"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeVar","contents":"a"}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeConstructor","contents":[["Neon","Values","Ordering"],"Ordering"]}]}]}]}]},null]},null]}},"sourceSpan":{"start":[211,1],"name":"src/Neon/Types/HasCompare.purs","end":[212,1]}},{"children":[],"comments":"Returns `true` if the container contains the given value, `false`\notherwise.\n\n``` purescript\ncontains 1 [0, 1]\n-- true\ncontains 2 [0, 1]\n-- false\n```\n","title":"contains","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["f",{"tag":"ConstrainedType","contents":[[[[["Neon","Types","HasFold"],"HasFold"],[{"tag":"TypeVar","contents":"f"}]],[[["Neon","Types","HasEqual"],"HasEqual"],[{"tag":"TypeVar","contents":"a"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}]}]},null]},null]}},"sourceSpan":{"start":[111,1],"name":"src/Neon/Types/HasFold.purs","end":[112,1]}},{"children":[],"comments":"Reduces the container into a value that supports addition and has an\nadditive identity (that is, a monoid).\n\n``` purescript\nfold [\"ne\", \"on\"]\n-- \"neon\"\n```\n","title":"fold","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["m",{"tag":"ForAll","contents":["f",{"tag":"ConstrainedType","contents":[[[[["Neon","Types","HasFold"],"HasFold"],[{"tag":"TypeVar","contents":"f"}]],[[["Neon","Types","HasZero"],"HasZero"],[{"tag":"TypeVar","contents":"m"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"m"}]}]},{"tag":"TypeVar","contents":"m"}]}]},null]},null]}},"sourceSpan":{"start":[56,1],"name":"src/Neon/Types/HasFold.purs","end":[57,1]}},{"children":[],"comments":"Maps the function over the values in the container and then reduces the\ncontainer into a value that supports addition and has an additive identity\n(that is, a monoid).\n\n``` purescript\nfoldMap (+ \"!\") [\"ne\", \"on\"]\n-- \"ne!on!\"\n```\n","title":"foldMap","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["m",{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["f",{"tag":"ConstrainedType","contents":[[[[["Neon","Types","HasFold"],"HasFold"],[{"tag":"TypeVar","contents":"f"}]],[[["Neon","Types","HasZero"],"HasZero"],[{"tag":"TypeVar","contents":"m"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"m"}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeVar","contents":"m"}]}]}]},null]},null]},null]}},"sourceSpan":{"start":[67,1],"name":"src/Neon/Types/HasFold.purs","end":[68,1]}},{"children":[],"comments":"`map` with the arguments flipped.\n\n``` purescript\nfor [1, 2, 3] (+ 1)\n-- [2, 3, 4]\n```\n","title":"for","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["f",{"tag":"ConstrainedType","contents":[[[[["Neon","Types","HasMap"],"HasMap"],[{"tag":"TypeVar","contents":"f"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"b"}]}]}]}]},null]},null]},null]}},"sourceSpan":{"start":[50,1],"name":"src/Neon/Types/HasMap.purs","end":[51,1]}},{"children":[],"comments":"Gets the state.\n\n``` purescript\nrunStateT getState 1\n-- Identity (pair 1 1)\n```\n","title":"getState","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["s",{"tag":"ForAll","contents":["m",{"tag":"ConstrainedType","contents":[[[[["Neon","Types","HasState"],"HasState"],[{"tag":"TypeVar","contents":"s"},{"tag":"TypeVar","contents":"m"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"m"},{"tag":"TypeVar","contents":"s"}]}]},null]},null]}},"sourceSpan":{"start":[35,1],"name":"src/Neon/Types/HasState.purs","end":[36,1]}},{"children":[],"comments":"Returns `true` if the first value is greater than the second value,\n`false` otherwise.\n\n``` purescript\ngt \"b\" \"a\"\n-- true\n```\n","title":"gt","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[[[[["Neon","Types","HasCompare"],"HasCompare"],[{"tag":"TypeVar","contents":"a"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}]}]},null]}},"sourceSpan":{"start":[156,1],"name":"src/Neon/Types/HasCompare.purs","end":[157,1]}},{"children":[],"comments":"Returns `true` if the first value is greater than or equal to the second\nvalue, `false` otherwise.\n\n``` purescript\ngte \"a\" \"a\"\n-- true\n```\n","title":"gte","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[[[[["Neon","Types","HasCompare"],"HasCompare"],[{"tag":"TypeVar","contents":"a"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}]}]},null]}},"sourceSpan":{"start":[134,1],"name":"src/Neon/Types/HasCompare.purs","end":[135,1]}},{"children":[],"comments":"If the condition is `false`, returns `empty`. Otherwise returns\n`pure unit`. This is useful for stopping some action part-way through.\n\n``` purescript\nguard false\n-- []\nguard true\n-- [unit]\n```\n","title":"guard","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["f",{"tag":"ConstrainedType","contents":[[[[["Neon","Types","HasEmpty"],"HasEmpty"],[{"tag":"TypeVar","contents":"f"}]],[[["Neon","Types","HasPure"],"HasPure"],[{"tag":"TypeVar","contents":"f"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeConstructor","contents":[["Neon","Values","Unit"],"Unit"]}]}]}]},null]}},"sourceSpan":{"start":[39,1],"name":"src/Neon/Types/HasEmpty.purs","end":[40,1]}},{"children":[],"comments":"Returns `true` if the length of the container is 0, `false` otherwise.\n\n``` purescript\nisBlank []\n-- true\nisBlank [1, 2, 3]\n-- false\n```\n","title":"isBlank","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["f",{"tag":"ConstrainedType","contents":[[[[["Neon","Types","HasFold"],"HasFold"],[{"tag":"TypeVar","contents":"f"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}]},null]},null]}},"sourceSpan":{"start":[99,1],"name":"src/Neon/Types/HasFold.purs","end":[100,1]}},{"children":[],"comments":"Tests whether a number is finite or not.\n\n``` purescript\nisInfinite infinity\n-- true\nisInfinite 1.0\n-- false\n```\n","title":"isInfinite","fixity":null,"info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}},"sourceSpan":{"start":[43,1],"name":"src/Neon/Types/HasNot.purs","end":[44,1]}},{"children":[],"comments":"Returns `true` if the length of the container is greater than 0,\n`false` otherwise.\n\n``` purescript\nisPresent []\n-- false\nisPresent [1, 2, 3]\n-- true\n```\n","title":"isPresent","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["f",{"tag":"ConstrainedType","contents":[[[[["Neon","Types","HasFold"],"HasFold"],[{"tag":"TypeVar","contents":"f"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}]},null]},null]}},"sourceSpan":{"start":[88,1],"name":"src/Neon/Types/HasFold.purs","end":[89,1]}},{"children":[],"comments":"Collapses two wrappers into one.\n\n``` purescript\njoin [[1, 2], [3, 4]]\n-- [1, 2, 3, 4]\n```\n","title":"join","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["f",{"tag":"ConstrainedType","contents":[[[[["Neon","Types","HasBind"],"HasBind"],[{"tag":"TypeVar","contents":"f"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}]}]},null]},null]}},"sourceSpan":{"start":[38,1],"name":"src/Neon/Types/HasBind.purs","end":[39,1]}},{"children":[],"comments":"Returns the length of the container.\n\n``` purescript\nlength [1, 2, 3]\n-- 3\n```\n","title":"length","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["f",{"tag":"ConstrainedType","contents":[[[[["Neon","Types","HasFold"],"HasFold"],[{"tag":"TypeVar","contents":"f"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}]},null]},null]}},"sourceSpan":{"start":[76,1],"name":"src/Neon/Types/HasFold.purs","end":[77,1]}},{"children":[],"comments":"Returns `true` if the first value is less than the second value, `false`\notherwise.\n\n``` purescript\nlt \"a\" \"b\"\n-- true\n```\n","title":"lt","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[[[[["Neon","Types","HasCompare"],"HasCompare"],[{"tag":"TypeVar","contents":"a"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}]}]},null]}},"sourceSpan":{"start":[90,1],"name":"src/Neon/Types/HasCompare.purs","end":[91,1]}},{"children":[],"comments":"Returns `true` if the first value is less than or equal to the second\nvalue, `false` otherwise.\n\n``` purescript\nlte \"a\" \"a\"\n-- true\n```\n","title":"lte","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[[[[["Neon","Types","HasCompare"],"HasCompare"],[{"tag":"TypeVar","contents":"a"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}]}]},null]}},"sourceSpan":{"start":[112,1],"name":"src/Neon/Types/HasCompare.purs","end":[113,1]}},{"children":[],"comments":"Returns the greater of two values.\n\n``` purescript\nmax \"a\" \"b\"\n-- \"b\"\n```\n","title":"max","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[[[[["Neon","Types","HasCompare"],"HasCompare"],[{"tag":"TypeVar","contents":"a"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"a"}]}]}]},null]}},"sourceSpan":{"start":[186,1],"name":"src/Neon/Types/HasCompare.purs","end":[187,1]}},{"children":[],"comments":"Returns the lesser of two values.\n\n``` purescript\nmin \"a\" \"b\"\n-- \"a\"\n```\n","title":"min","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[[[[["Neon","Types","HasCompare"],"HasCompare"],[{"tag":"TypeVar","contents":"a"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"a"}]}]}]},null]}},"sourceSpan":{"start":[177,1],"name":"src/Neon/Types/HasCompare.purs","end":[178,1]}},{"children":[],"comments":"Negates a value. This is the same as subtracting the value from zero.\n\n``` purescript\nnegate 1\n-- -1\n```\n","title":"negate","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[[[[["Neon","Types","HasSubtract"],"HasSubtract"],[{"tag":"TypeVar","contents":"a"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"a"}]}]},null]}},"sourceSpan":{"start":[53,1],"name":"src/Neon/Types/HasSubtract.purs","end":[54,1]}},{"children":[],"comments":"Returns `true` if two values are not equal, `false` otherwise.\n\n``` purescript\nnotEqual \"a\" \"b\"\n-- true\n```\n","title":"notEqual","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[[[[["Neon","Types","HasEqual"],"HasEqual"],[{"tag":"TypeVar","contents":"a"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}]}]},null]}},"sourceSpan":{"start":[52,1],"name":"src/Neon/Types/HasNot.purs","end":[53,1]}},{"children":[],"comments":"Returns the product of all the values in the container.\n\n``` purescript\nproduct [3, 4, 5]\n-- 60\n```\n","title":"product","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["f",{"tag":"ConstrainedType","contents":[[[[["Neon","Types","HasFold"],"HasFold"],[{"tag":"TypeVar","contents":"f"}]],[[["Neon","Types","HasOne"],"HasOne"],[{"tag":"TypeVar","contents":"a"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeVar","contents":"a"}]}]},null]},null]}},"sourceSpan":{"start":[129,1],"name":"src/Neon/Types/HasFold.purs","end":[130,1]}},{"children":[],"comments":"Returns a range of values.\n\n``` purescript\nrange 1 4\n-- [1, 2, 3, 4]\n```\n","title":"range","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[[[[["Neon","Types","IsEnumerable"],"IsEnumerable"],[{"tag":"TypeVar","contents":"a"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]}]}]}]},null]}},"sourceSpan":{"start":[150,1],"name":"src/Neon/Types/IsEnumerable.purs","end":[151,1]}},{"children":[],"comments":"Returns the multiplicative inverse.\n\n``` purescript\nreciprocal 2\n-- 0.5\n```\n","title":"reciprocal","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[[[[["Neon","Types","HasDivide"],"HasDivide"],[{"tag":"TypeVar","contents":"a"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"a"}]}]},null]}},"sourceSpan":{"start":[76,1],"name":"src/Neon/Types/HasDivide.purs","end":[77,1]}},{"children":[],"comments":"Evaluates actions from left to right and collects the results.\n\n``` purescript\nsequence [Just 1, Just 2]\n-- Just [1, 2]\n```\n","title":"sequence","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["m",{"tag":"ForAll","contents":["t",{"tag":"ConstrainedType","contents":[[[[["Neon","Types","HasPure"],"HasPure"],[{"tag":"TypeVar","contents":"m"}]],[[["Neon","Types","HasTraverse"],"HasTraverse"],[{"tag":"TypeVar","contents":"t"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"t"},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"m"},{"tag":"TypeVar","contents":"a"}]}}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"m"},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"t"},{"tag":"TypeVar","contents":"a"}]}}]}]}]},null]},null]},null]}},"sourceSpan":{"start":[54,1],"name":"src/Neon/Types/HasTraverse.purs","end":[55,1]}},{"children":[],"comments":"Sets the state.\n\n``` purescript\nrunStateT (setState 2) 1\n-- Identity (pair unit 2)\n```\n","title":"setState","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["s",{"tag":"ForAll","contents":["m",{"tag":"ConstrainedType","contents":[[[[["Neon","Types","HasState"],"HasState"],[{"tag":"TypeVar","contents":"s"},{"tag":"TypeVar","contents":"m"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"s"}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"m"},{"tag":"TypeConstructor","contents":[["Neon","Values","Unit"],"Unit"]}]}]}]},null]},null]}},"sourceSpan":{"start":[44,1],"name":"src/Neon/Types/HasState.purs","end":[45,1]}},{"children":[],"comments":"Returns the sign of a value. For any value `x`, `sign x * abs x = x`.\n\n``` purescript\nsign (-2)\n-- -1\nsign 0\n-- 0\nsign 2\n-- 1\n```\n","title":"sign","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[[[[["Neon","Types","HasCompare"],"HasCompare"],[{"tag":"TypeVar","contents":"a"}]],[[["Neon","Types","HasOne"],"HasOne"],[{"tag":"TypeVar","contents":"a"}]],[[["Neon","Types","HasSubtract"],"HasSubtract"],[{"tag":"TypeVar","contents":"a"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"a"}]}]},null]}},"sourceSpan":{"start":[50,1],"name":"src/Neon/Types/HasOne.purs","end":[51,1]}},{"children":[],"comments":"Returns the sum of all the values in the container.\n\n``` purescript\nsum [3, 4, 5]\n-- 12\n```\n","title":"sum","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["f",{"tag":"ConstrainedType","contents":[[[[["Neon","Types","HasFold"],"HasFold"],[{"tag":"TypeVar","contents":"f"}]],[[["Neon","Types","HasZero"],"HasZero"],[{"tag":"TypeVar","contents":"a"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeVar","contents":"a"}]}]},null]},null]}},"sourceSpan":{"start":[120,1],"name":"src/Neon/Types/HasFold.purs","end":[121,1]}},{"children":[],"comments":"If the condition is `false`, returns the value. Otherwise returns\n`pure unit`.\n\n``` purescript\nunless true [unit, unit]\n-- [unit]\nunless false [unit, unit]\n-- [unit, unit]\n```\n","title":"unless","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["f",{"tag":"ConstrainedType","contents":[[[[["Neon","Types","HasPure"],"HasPure"],[{"tag":"TypeVar","contents":"f"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeConstructor","contents":[["Neon","Values","Unit"],"Unit"]}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeConstructor","contents":[["Neon","Values","Unit"],"Unit"]}]}]}]}]},null]}},"sourceSpan":{"start":[58,1],"name":"src/Neon/Types/HasPure.purs","end":[59,1]}},{"children":[],"comments":"Discards the result. This is useful for `Effect`s.\n\n``` purescript\nvoid [1, 2, 3]\n-- [unit, unit, unit]\n```\n","title":"void","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["f",{"tag":"ConstrainedType","contents":[[[[["Neon","Types","HasMap"],"HasMap"],[{"tag":"TypeVar","contents":"f"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeConstructor","contents":[["Neon","Values","Unit"],"Unit"]}]}]}]},null]},null]}},"sourceSpan":{"start":[41,1],"name":"src/Neon/Types/HasMap.purs","end":[42,1]}},{"children":[],"comments":"If the condition is `true`, returns the value. Otherwise returns\n`pure unit`.\n\n``` purescript\nwhen false [unit, unit]\n-- [unit]\nwhen true [unit, unit]\n-- [unit, unit]\n```\n","title":"when","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["f",{"tag":"ConstrainedType","contents":[[[[["Neon","Types","HasPure"],"HasPure"],[{"tag":"TypeVar","contents":"f"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeConstructor","contents":[["Neon","Values","Unit"],"Unit"]}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeConstructor","contents":[["Neon","Values","Unit"],"Unit"]}]}]}]}]},null]}},"sourceSpan":{"start":[46,1],"name":"src/Neon/Types/HasPure.purs","end":[47,1]}},{"children":[],"comments":"Alias for `notEqual`.\n\n``` purescript\n\"a\" != \"b\"\n-- true\n```\n","title":"(!=)","fixity":{"associativity":"infixl","precedence":-1},"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[[[[["Neon","Types","HasEqual"],"HasEqual"],[{"tag":"TypeVar","contents":"a"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}]}]},null]}},"sourceSpan":{"start":[61,1],"name":"src/Neon/Types/HasNot.purs","end":[62,1]}},{"children":[],"comments":"Alias for `modulo`.\n\n``` purescript\n5 % 2\n-- 1\n```\n","title":"(%)","fixity":{"associativity":"infixl","precedence":-1},"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[[[[["Neon","Types","HasDivide"],"HasDivide"],[{"tag":"TypeVar","contents":"a"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"a"}]}]}]},null]}},"sourceSpan":{"start":[66,1],"name":"src/Neon/Types/HasDivide.purs","end":[67,1]}},{"children":[],"comments":"Alias for `and`.\n\n``` purescript\ntrue && true\n-- true\n```\n","title":"(&&)","fixity":{"associativity":"infixl","precedence":-1},"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[[[[["Neon","Types","HasAnd"],"HasAnd"],[{"tag":"TypeVar","contents":"a"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"a"}]}]}]},null]}},"sourceSpan":{"start":[40,1],"name":"src/Neon/Types/HasAnd.purs","end":[41,1]}},{"children":[],"comments":"Alias for `multiply`.\n\n``` purescript\n3 * 2\n-- 6\n```\n","title":"(*)","fixity":{"associativity":"infixl","precedence":-1},"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[[[[["Neon","Types","HasMultiply"],"HasMultiply"],[{"tag":"TypeVar","contents":"a"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"a"}]}]}]},null]}},"sourceSpan":{"start":[47,1],"name":"src/Neon/Types/HasMultiply.purs","end":[48,1]}},{"children":[],"comments":"Alias for `add`.\n\n``` purescript\n\"a\" + \"b\"\n-- \"ab\"\n```\n","title":"(+)","fixity":{"associativity":"infixl","precedence":-1},"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[[[[["Neon","Types","HasAdd"],"HasAdd"],[{"tag":"TypeVar","contents":"a"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"a"}]}]}]},null]}},"sourceSpan":{"start":[51,1],"name":"src/Neon/Types/HasAdd.purs","end":[52,1]}},{"children":[],"comments":"Alias for `subtract`.\n\n``` purescript\n3 - 2\n-- 1\n```\n","title":"(-)","fixity":{"associativity":"infixl","precedence":-1},"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[[[[["Neon","Types","HasSubtract"],"HasSubtract"],[{"tag":"TypeVar","contents":"a"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"a"}]}]}]},null]}},"sourceSpan":{"start":[43,1],"name":"src/Neon/Types/HasSubtract.purs","end":[44,1]}},{"children":[],"comments":"Alias for `divide`.\n\n``` purescript\n5 / 2\n-- 2\n```\n","title":"(/)","fixity":{"associativity":"infixl","precedence":-1},"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[[[[["Neon","Types","HasDivide"],"HasDivide"],[{"tag":"TypeVar","contents":"a"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"a"}]}]}]},null]}},"sourceSpan":{"start":[56,1],"name":"src/Neon/Types/HasDivide.purs","end":[57,1]}},{"children":[],"comments":"Alias for `lt`.\n\n``` purescript\n\"a\" < \"b\"\n-- true\n```\n","title":"(<)","fixity":{"associativity":"infixl","precedence":-1},"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[[[[["Neon","Types","HasCompare"],"HasCompare"],[{"tag":"TypeVar","contents":"a"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}]}]},null]}},"sourceSpan":{"start":[101,1],"name":"src/Neon/Types/HasCompare.purs","end":[102,1]}},{"children":[],"comments":"`(>>)` with the arguments flipped.\n\n``` purescript\n((* 2) << (+ 2)) 3\n-- 10\n```\n","title":"(<<)","fixity":{"associativity":"infixl","precedence":-1},"info":{"declType":"value","type":{"tag":"ForAll","contents":["c",{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["f",{"tag":"ConstrainedType","contents":[[[[["Neon","Types","HasCompose"],"HasCompose"],[{"tag":"TypeVar","contents":"f"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeVar","contents":"c"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"c"}]}]}]}]},null]},null]},null]},null]}},"sourceSpan":{"start":[43,1],"name":"src/Neon/Types/HasCompose.purs","end":[44,1]}},{"children":[],"comments":"Alias for `lte`.\n\n``` purescript\n\"a\" < \"a\"\n-- true\n```\n","title":"(<=)","fixity":{"associativity":"infixl","precedence":-1},"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[[[[["Neon","Types","HasCompare"],"HasCompare"],[{"tag":"TypeVar","contents":"a"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}]}]},null]}},"sourceSpan":{"start":[123,1],"name":"src/Neon/Types/HasCompare.purs","end":[124,1]}},{"children":[],"comments":"Alias for `equal`.\n\n``` purescript\n\"a\" == \"a\"\n-- true\n```\n","title":"(==)","fixity":{"associativity":"infixl","precedence":-1},"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[[[[["Neon","Types","HasEqual"],"HasEqual"],[{"tag":"TypeVar","contents":"a"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}]}]},null]}},"sourceSpan":{"start":[57,1],"name":"src/Neon/Types/HasEqual.purs","end":[58,1]}},{"children":[],"comments":"Alias for `gt`.\n\n``` purescript\n\"b\" > \"a\"\n-- true\n```\n","title":"(>)","fixity":{"associativity":"infixl","precedence":-1},"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[[[[["Neon","Types","HasCompare"],"HasCompare"],[{"tag":"TypeVar","contents":"a"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}]}]},null]}},"sourceSpan":{"start":[167,1],"name":"src/Neon/Types/HasCompare.purs","end":[168,1]}},{"children":[],"comments":"Alias for `gte`.\n\n``` purescript\n \"a\" >= \"a\"\n-- true\n```\n","title":"(>=)","fixity":{"associativity":"infixl","precedence":-1},"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[[[[["Neon","Types","HasCompare"],"HasCompare"],[{"tag":"TypeVar","contents":"a"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}]}]},null]}},"sourceSpan":{"start":[145,1],"name":"src/Neon/Types/HasCompare.purs","end":[146,1]}},{"children":[],"comments":"Alias for `compose`.\n\n``` purescript\n((+ 2) >> (* 2)) 3\n-- 10\n```\n","title":"(>>)","fixity":{"associativity":"infixl","precedence":-1},"info":{"declType":"value","type":{"tag":"ForAll","contents":["c",{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["f",{"tag":"ConstrainedType","contents":[[[[["Neon","Types","HasCompose"],"HasCompose"],[{"tag":"TypeVar","contents":"f"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeVar","contents":"c"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"c"}]}]}]}]},null]},null]},null]},null]}},"sourceSpan":{"start":[33,1],"name":"src/Neon/Types/HasCompose.purs","end":[34,1]}},{"children":[],"comments":"Alias for `power`.\n\n``` purescript\n2 ^ 3\n-- 8\n```\n","title":"(^)","fixity":{"associativity":"infixl","precedence":-1},"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[[[[["Neon","Types","HasPower"],"HasPower"],[{"tag":"TypeVar","contents":"a"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"a"}]}]}]},null]}},"sourceSpan":{"start":[40,1],"name":"src/Neon/Types/HasPower.purs","end":[41,1]}},{"children":[],"comments":"Alias for `or`.\n\n``` purescript\nfalse || true\n-- true\n```\n","title":"(||)","fixity":{"associativity":"infixl","precedence":-1},"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[[[[["Neon","Types","HasOr"],"HasOr"],[{"tag":"TypeVar","contents":"a"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"a"}]}]}]},null]}},"sourceSpan":{"start":[40,1],"name":"src/Neon/Types/HasOr.purs","end":[41,1]}}]},{"moduleName":["Neon","Values"],"declarations":[{"children":[{"comments":null,"title":"Constant","info":{"arguments":[{"tag":"TypeVar","contents":"a"}],"declType":"dataConstructor"},"sourceSpan":null},{"comments":null,"title":"constantHasAdd","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasAdd"],"HasAdd"],[{"tag":"TypeVar","contents":"a"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasAdd"],"HasAdd"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Constant"],"Constant"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}},"sourceSpan":{"start":[33,1],"name":"src/Neon/Values/Constant.purs","end":[36,1]}},{"comments":null,"title":"constantHasAlternative","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasAdd"],"HasAdd"],[{"tag":"TypeVar","contents":"a"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasAlternative"],"HasAlternative"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Constant"],"Constant"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[36,1],"name":"src/Neon/Values/Constant.purs","end":[39,1]}},{"comments":null,"title":"constantHasAnd","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasAnd"],"HasAnd"],[{"tag":"TypeVar","contents":"a"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasAnd"],"HasAnd"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Constant"],"Constant"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}},"sourceSpan":{"start":[39,1],"name":"src/Neon/Values/Constant.purs","end":[42,1]}},{"comments":null,"title":"constantHasApply","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasAdd"],"HasAdd"],[{"tag":"TypeVar","contents":"a"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasApply"],"HasApply"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Constant"],"Constant"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[42,1],"name":"src/Neon/Values/Constant.purs","end":[45,1]}},{"comments":null,"title":"constantHasBind","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasZero"],"HasZero"],[{"tag":"TypeVar","contents":"a"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasBind"],"HasBind"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Constant"],"Constant"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[45,1],"name":"src/Neon/Values/Constant.purs","end":[48,1]}},{"comments":null,"title":"constantHasBottom","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasBottom"],"HasBottom"],[{"tag":"TypeVar","contents":"a"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasBottom"],"HasBottom"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Constant"],"Constant"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}},"sourceSpan":{"start":[48,1],"name":"src/Neon/Values/Constant.purs","end":[51,1]}},{"comments":null,"title":"constantHasCompare","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasCompare"],"HasCompare"],[{"tag":"TypeVar","contents":"a"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasCompare"],"HasCompare"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Constant"],"Constant"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}},"sourceSpan":{"start":[51,1],"name":"src/Neon/Values/Constant.purs","end":[54,1]}},{"comments":null,"title":"constantHasDivide","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasDivide"],"HasDivide"],[{"tag":"TypeVar","contents":"a"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasDivide"],"HasDivide"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Constant"],"Constant"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}},"sourceSpan":{"start":[54,1],"name":"src/Neon/Values/Constant.purs","end":[58,1]}},{"comments":null,"title":"constantHasEmpty","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasZero"],"HasZero"],[{"tag":"TypeVar","contents":"a"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasEmpty"],"HasEmpty"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Constant"],"Constant"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[58,1],"name":"src/Neon/Values/Constant.purs","end":[61,1]}},{"comments":null,"title":"constantHasEqual","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasEqual"],"HasEqual"],[{"tag":"TypeVar","contents":"a"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasEqual"],"HasEqual"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Constant"],"Constant"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}},"sourceSpan":{"start":[61,1],"name":"src/Neon/Values/Constant.purs","end":[64,1]}},{"comments":null,"title":"constantHasFold","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasFold"],"HasFold"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Constant"],"Constant"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[64,1],"name":"src/Neon/Values/Constant.purs","end":[68,1]}},{"comments":null,"title":"constantHasMap","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasMap"],"HasMap"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Constant"],"Constant"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[68,1],"name":"src/Neon/Values/Constant.purs","end":[71,1]}},{"comments":null,"title":"constantHasMultiply","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasMultiply"],"HasMultiply"],[{"tag":"TypeVar","contents":"a"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasMultiply"],"HasMultiply"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Constant"],"Constant"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}},"sourceSpan":{"start":[71,1],"name":"src/Neon/Values/Constant.purs","end":[74,1]}},{"comments":null,"title":"constantHasNot","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasNot"],"HasNot"],[{"tag":"TypeVar","contents":"a"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasNot"],"HasNot"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Constant"],"Constant"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}},"sourceSpan":{"start":[74,1],"name":"src/Neon/Values/Constant.purs","end":[77,1]}},{"comments":null,"title":"constantHasOne","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasOne"],"HasOne"],[{"tag":"TypeVar","contents":"a"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasOne"],"HasOne"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Constant"],"Constant"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}},"sourceSpan":{"start":[77,1],"name":"src/Neon/Values/Constant.purs","end":[80,1]}},{"comments":null,"title":"constantHasOr","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasOr"],"HasOr"],[{"tag":"TypeVar","contents":"a"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasOr"],"HasOr"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Constant"],"Constant"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}},"sourceSpan":{"start":[80,1],"name":"src/Neon/Values/Constant.purs","end":[83,1]}},{"comments":null,"title":"constantHasPower","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasPower"],"HasPower"],[{"tag":"TypeVar","contents":"a"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasPower"],"HasPower"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Constant"],"Constant"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}},"sourceSpan":{"start":[83,1],"name":"src/Neon/Values/Constant.purs","end":[86,1]}},{"comments":null,"title":"constantHasPure","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasZero"],"HasZero"],[{"tag":"TypeVar","contents":"a"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasPure"],"HasPure"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Constant"],"Constant"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[86,1],"name":"src/Neon/Values/Constant.purs","end":[89,1]}},{"comments":null,"title":"constantHasShow","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasShow"],"HasShow"],[{"tag":"TypeVar","contents":"a"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasShow"],"HasShow"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Constant"],"Constant"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}},"sourceSpan":{"start":[89,1],"name":"src/Neon/Values/Constant.purs","end":[92,1]}},{"comments":null,"title":"constantHasSubtract","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasSubtract"],"HasSubtract"],[{"tag":"TypeVar","contents":"a"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasSubtract"],"HasSubtract"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Constant"],"Constant"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}},"sourceSpan":{"start":[92,1],"name":"src/Neon/Values/Constant.purs","end":[95,1]}},{"comments":null,"title":"constantHasTop","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasTop"],"HasTop"],[{"tag":"TypeVar","contents":"a"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasTop"],"HasTop"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Constant"],"Constant"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}},"sourceSpan":{"start":[95,1],"name":"src/Neon/Values/Constant.purs","end":[98,1]}},{"comments":null,"title":"constantHasZero","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasZero"],"HasZero"],[{"tag":"TypeVar","contents":"a"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasZero"],"HasZero"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Constant"],"Constant"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}},"sourceSpan":{"start":[98,1],"name":"src/Neon/Values/Constant.purs","end":[101,1]}},{"comments":null,"title":"constantIsEnumerable","info":{"declType":"instance","dependencies":[[[["Neon","Types","IsEnumerable"],"IsEnumerable"],[{"tag":"TypeVar","contents":"a"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","IsEnumerable"],"IsEnumerable"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Constant"],"Constant"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}},"sourceSpan":{"start":[101,1],"name":"src/Neon/Values/Constant.purs","end":[113,1]}}],"comments":"A wrapper that ignores its second type argument.\n","title":"Constant","fixity":null,"info":{"declType":"data","dataDeclType":"newtype","typeArguments":[["a",null],["b",null]]},"sourceSpan":{"start":[31,1],"name":"src/Neon/Values/Constant.purs","end":[33,1]}},{"children":[{"comments":null,"title":"dictionaryHasAdd","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasAdd"],"HasAdd"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Dictionary"],"Dictionary"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[30,1],"name":"src/Neon/Values/Dictionary.purs","end":[33,1]}},{"comments":null,"title":"dictionaryHasAlternative","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasAlternative"],"HasAlternative"]},{"tag":"TypeConstructor","contents":[["Neon","Values","Dictionary"],"Dictionary"]}]}},"sourceSpan":{"start":[33,1],"name":"src/Neon/Values/Dictionary.purs","end":[36,1]}},{"comments":null,"title":"dictionaryHasApply","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasApply"],"HasApply"]},{"tag":"TypeConstructor","contents":[["Neon","Values","Dictionary"],"Dictionary"]}]}},"sourceSpan":{"start":[36,1],"name":"src/Neon/Values/Dictionary.purs","end":[39,1]}},{"comments":null,"title":"dictionaryHasEmpty","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasEmpty"],"HasEmpty"]},{"tag":"TypeConstructor","contents":[["Neon","Values","Dictionary"],"Dictionary"]}]}},"sourceSpan":{"start":[39,1],"name":"src/Neon/Values/Dictionary.purs","end":[42,1]}},{"comments":null,"title":"dictionaryHasEqual","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasEqual"],"HasEqual"],[{"tag":"TypeVar","contents":"a"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasEqual"],"HasEqual"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Dictionary"],"Dictionary"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[42,1],"name":"src/Neon/Values/Dictionary.purs","end":[45,1]}},{"comments":null,"title":"dictionaryHasFold","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasFold"],"HasFold"]},{"tag":"TypeConstructor","contents":[["Neon","Values","Dictionary"],"Dictionary"]}]}},"sourceSpan":{"start":[45,1],"name":"src/Neon/Values/Dictionary.purs","end":[49,1]}},{"comments":null,"title":"dictionaryHasFromArray","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasFromArray"],"HasFromArray"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Pair"],"Pair"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeVar","contents":"a"}]}}]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Dictionary"],"Dictionary"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[49,1],"name":"src/Neon/Values/Dictionary.purs","end":[52,1]}},{"comments":null,"title":"dictionaryHasMap","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasMap"],"HasMap"]},{"tag":"TypeConstructor","contents":[["Neon","Values","Dictionary"],"Dictionary"]}]}},"sourceSpan":{"start":[52,1],"name":"src/Neon/Values/Dictionary.purs","end":[55,1]}},{"comments":null,"title":"dictionaryHasShow","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasShow"],"HasShow"],[{"tag":"TypeVar","contents":"a"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasShow"],"HasShow"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Dictionary"],"Dictionary"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[55,1],"name":"src/Neon/Values/Dictionary.purs","end":[58,1]}},{"comments":null,"title":"dictionaryHasZero","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasZero"],"HasZero"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Dictionary"],"Dictionary"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[58,1],"name":"src/Neon/Values/Dictionary.purs","end":[59,10]}}],"comments":"Represents a mapping between strings and values.\n","title":"Dictionary","fixity":null,"info":{"kind":{"tag":"FunKind","contents":[{"tag":"Star","contents":[]},{"tag":"Star","contents":[]}]},"declType":"externData"},"sourceSpan":{"start":[18,1],"name":"src/Neon/Values/Dictionary.purs","end":[20,1]}},{"children":[{"comments":null,"title":"Left","info":{"arguments":[{"tag":"TypeVar","contents":"a"}],"declType":"dataConstructor"},"sourceSpan":null},{"comments":null,"title":"Right","info":{"arguments":[{"tag":"TypeVar","contents":"b"}],"declType":"dataConstructor"},"sourceSpan":null},{"comments":null,"title":"eitherHasAdd","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasAdd"],"HasAdd"],[{"tag":"TypeVar","contents":"b"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasAdd"],"HasAdd"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Either"],"Either"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}},"sourceSpan":{"start":[42,1],"name":"src/Neon/Values/Either.purs","end":[45,1]}},{"comments":null,"title":"eitherHasAlternative","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasAlternative"],"HasAlternative"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Either"],"Either"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[45,1],"name":"src/Neon/Values/Either.purs","end":[49,1]}},{"comments":null,"title":"eitherHasAnd","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasBottom"],"HasBottom"],[{"tag":"TypeVar","contents":"a"}]],[[["Neon","Types","HasTop"],"HasTop"],[{"tag":"TypeVar","contents":"a"}]],[[["Neon","Types","HasAnd"],"HasAnd"],[{"tag":"TypeVar","contents":"b"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasAnd"],"HasAnd"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Either"],"Either"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}},"sourceSpan":{"start":[49,1],"name":"src/Neon/Values/Either.purs","end":[52,1]}},{"comments":null,"title":"eitherHasApply","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasApply"],"HasApply"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Either"],"Either"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[52,1],"name":"src/Neon/Values/Either.purs","end":[56,1]}},{"comments":null,"title":"eitherHasBind","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasBind"],"HasBind"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Either"],"Either"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[56,1],"name":"src/Neon/Values/Either.purs","end":[60,1]}},{"comments":null,"title":"eitherHasBottom","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasBottom"],"HasBottom"],[{"tag":"TypeVar","contents":"a"}]],[[["Neon","Types","HasBottom"],"HasBottom"],[{"tag":"TypeVar","contents":"b"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasBottom"],"HasBottom"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Either"],"Either"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}},"sourceSpan":{"start":[60,1],"name":"src/Neon/Values/Either.purs","end":[63,1]}},{"comments":null,"title":"eitherHasCompare","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasCompare"],"HasCompare"],[{"tag":"TypeVar","contents":"a"}]],[[["Neon","Types","HasCompare"],"HasCompare"],[{"tag":"TypeVar","contents":"b"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasCompare"],"HasCompare"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Either"],"Either"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}},"sourceSpan":{"start":[63,1],"name":"src/Neon/Values/Either.purs","end":[69,1]}},{"comments":null,"title":"eitherHasDivide","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasDivide"],"HasDivide"],[{"tag":"TypeVar","contents":"b"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasDivide"],"HasDivide"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Either"],"Either"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}},"sourceSpan":{"start":[69,1],"name":"src/Neon/Values/Either.purs","end":[73,1]}},{"comments":null,"title":"eitherHasEqual","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasEqual"],"HasEqual"],[{"tag":"TypeVar","contents":"a"}]],[[["Neon","Types","HasEqual"],"HasEqual"],[{"tag":"TypeVar","contents":"b"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasEqual"],"HasEqual"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Either"],"Either"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}},"sourceSpan":{"start":[73,1],"name":"src/Neon/Values/Either.purs","end":[78,1]}},{"comments":null,"title":"eitherHasFold","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasFold"],"HasFold"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Either"],"Either"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[78,1],"name":"src/Neon/Values/Either.purs","end":[86,1]}},{"comments":null,"title":"eitherHasMap","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasMap"],"HasMap"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Either"],"Either"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[86,1],"name":"src/Neon/Values/Either.purs","end":[90,1]}},{"comments":null,"title":"eitherHasMultiply","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasMultiply"],"HasMultiply"],[{"tag":"TypeVar","contents":"b"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasMultiply"],"HasMultiply"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Either"],"Either"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}},"sourceSpan":{"start":[90,1],"name":"src/Neon/Values/Either.purs","end":[93,1]}},{"comments":null,"title":"eitherHasNot","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasBottom"],"HasBottom"],[{"tag":"TypeVar","contents":"a"}]],[[["Neon","Types","HasTop"],"HasTop"],[{"tag":"TypeVar","contents":"a"}]],[[["Neon","Types","HasNot"],"HasNot"],[{"tag":"TypeVar","contents":"b"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasNot"],"HasNot"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Either"],"Either"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}},"sourceSpan":{"start":[93,1],"name":"src/Neon/Values/Either.purs","end":[96,1]}},{"comments":null,"title":"eitherHasOne","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasOne"],"HasOne"],[{"tag":"TypeVar","contents":"b"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasOne"],"HasOne"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Either"],"Either"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}},"sourceSpan":{"start":[96,1],"name":"src/Neon/Values/Either.purs","end":[99,1]}},{"comments":null,"title":"eitherHasOr","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasBottom"],"HasBottom"],[{"tag":"TypeVar","contents":"a"}]],[[["Neon","Types","HasTop"],"HasTop"],[{"tag":"TypeVar","contents":"a"}]],[[["Neon","Types","HasOr"],"HasOr"],[{"tag":"TypeVar","contents":"b"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasOr"],"HasOr"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Either"],"Either"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}},"sourceSpan":{"start":[99,1],"name":"src/Neon/Values/Either.purs","end":[102,1]}},{"comments":null,"title":"eitherHasPure","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasPure"],"HasPure"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Either"],"Either"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[102,1],"name":"src/Neon/Values/Either.purs","end":[105,1]}},{"comments":null,"title":"eitherHasShow","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasShow"],"HasShow"],[{"tag":"TypeVar","contents":"a"}]],[[["Neon","Types","HasShow"],"HasShow"],[{"tag":"TypeVar","contents":"b"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasShow"],"HasShow"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Either"],"Either"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}},"sourceSpan":{"start":[105,1],"name":"src/Neon/Values/Either.purs","end":[109,1]}},{"comments":null,"title":"eitherHasSubtract","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasSubtract"],"HasSubtract"],[{"tag":"TypeVar","contents":"b"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasSubtract"],"HasSubtract"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Either"],"Either"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}},"sourceSpan":{"start":[109,1],"name":"src/Neon/Values/Either.purs","end":[112,1]}},{"comments":null,"title":"eitherHasTop","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasTop"],"HasTop"],[{"tag":"TypeVar","contents":"a"}]],[[["Neon","Types","HasTop"],"HasTop"],[{"tag":"TypeVar","contents":"b"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasTop"],"HasTop"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Either"],"Either"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}},"sourceSpan":{"start":[112,1],"name":"src/Neon/Values/Either.purs","end":[115,1]}},{"comments":null,"title":"eitherHasZero","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasZero"],"HasZero"],[{"tag":"TypeVar","contents":"b"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasZero"],"HasZero"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Either"],"Either"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}},"sourceSpan":{"start":[115,1],"name":"src/Neon/Values/Either.purs","end":[127,1]}}],"comments":"Represents a choice between two values. `Either` is conventially used for\nerror handling where `Left` represents failure and `Right` represents\nsuccess.\n","title":"Either","fixity":null,"info":{"declType":"data","dataDeclType":"data","typeArguments":[["a",null],["b",null]]},"sourceSpan":{"start":[38,1],"name":"src/Neon/Values/Either.purs","end":[42,1]}},{"children":[{"comments":null,"title":"Identity","info":{"arguments":[{"tag":"TypeVar","contents":"a"}],"declType":"dataConstructor"},"sourceSpan":null},{"comments":null,"title":"identityHasAdd","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasAdd"],"HasAdd"],[{"tag":"TypeVar","contents":"a"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasAdd"],"HasAdd"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Identity"],"Identity"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[32,1],"name":"src/Neon/Values/Identity.purs","end":[35,1]}},{"comments":null,"title":"identityHasAnd","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasAnd"],"HasAnd"],[{"tag":"TypeVar","contents":"a"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasAnd"],"HasAnd"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Identity"],"Identity"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[35,1],"name":"src/Neon/Values/Identity.purs","end":[38,1]}},{"comments":null,"title":"identityHasApply","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasApply"],"HasApply"]},{"tag":"TypeConstructor","contents":[["Neon","Values","Identity"],"Identity"]}]}},"sourceSpan":{"start":[38,1],"name":"src/Neon/Values/Identity.purs","end":[41,1]}},{"comments":null,"title":"identityHasBind","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasBind"],"HasBind"]},{"tag":"TypeConstructor","contents":[["Neon","Values","Identity"],"Identity"]}]}},"sourceSpan":{"start":[41,1],"name":"src/Neon/Values/Identity.purs","end":[44,1]}},{"comments":null,"title":"identityHasBottom","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasBottom"],"HasBottom"],[{"tag":"TypeVar","contents":"a"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasBottom"],"HasBottom"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Identity"],"Identity"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[44,1],"name":"src/Neon/Values/Identity.purs","end":[47,1]}},{"comments":null,"title":"identityHasCompare","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasCompare"],"HasCompare"],[{"tag":"TypeVar","contents":"a"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasCompare"],"HasCompare"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Identity"],"Identity"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[47,1],"name":"src/Neon/Values/Identity.purs","end":[50,1]}},{"comments":null,"title":"identityHasDivide","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasDivide"],"HasDivide"],[{"tag":"TypeVar","contents":"a"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasDivide"],"HasDivide"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Identity"],"Identity"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[50,1],"name":"src/Neon/Values/Identity.purs","end":[54,1]}},{"comments":null,"title":"identityHasEqual","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasEqual"],"HasEqual"],[{"tag":"TypeVar","contents":"a"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasEqual"],"HasEqual"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Identity"],"Identity"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[54,1],"name":"src/Neon/Values/Identity.purs","end":[57,1]}},{"comments":null,"title":"identityHasFold","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasFold"],"HasFold"]},{"tag":"TypeConstructor","contents":[["Neon","Values","Identity"],"Identity"]}]}},"sourceSpan":{"start":[57,1],"name":"src/Neon/Values/Identity.purs","end":[61,1]}},{"comments":null,"title":"identityHasMap","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasMap"],"HasMap"]},{"tag":"TypeConstructor","contents":[["Neon","Values","Identity"],"Identity"]}]}},"sourceSpan":{"start":[61,1],"name":"src/Neon/Values/Identity.purs","end":[64,1]}},{"comments":null,"title":"identityHasMultiply","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasMultiply"],"HasMultiply"],[{"tag":"TypeVar","contents":"a"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasMultiply"],"HasMultiply"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Identity"],"Identity"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[64,1],"name":"src/Neon/Values/Identity.purs","end":[67,1]}},{"comments":null,"title":"identityHasNot","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasNot"],"HasNot"],[{"tag":"TypeVar","contents":"a"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasNot"],"HasNot"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Identity"],"Identity"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[67,1],"name":"src/Neon/Values/Identity.purs","end":[70,1]}},{"comments":null,"title":"identityHasOne","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasOne"],"HasOne"],[{"tag":"TypeVar","contents":"a"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasOne"],"HasOne"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Identity"],"Identity"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[70,1],"name":"src/Neon/Values/Identity.purs","end":[73,1]}},{"comments":null,"title":"identityHasOr","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasOr"],"HasOr"],[{"tag":"TypeVar","contents":"a"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasOr"],"HasOr"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Identity"],"Identity"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[73,1],"name":"src/Neon/Values/Identity.purs","end":[76,1]}},{"comments":null,"title":"identityHasPure","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasPure"],"HasPure"]},{"tag":"TypeConstructor","contents":[["Neon","Values","Identity"],"Identity"]}]}},"sourceSpan":{"start":[76,1],"name":"src/Neon/Values/Identity.purs","end":[79,1]}},{"comments":null,"title":"identityHasShow","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasShow"],"HasShow"],[{"tag":"TypeVar","contents":"a"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasShow"],"HasShow"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Identity"],"Identity"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[79,1],"name":"src/Neon/Values/Identity.purs","end":[82,1]}},{"comments":null,"title":"identityHasSubtract","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasSubtract"],"HasSubtract"],[{"tag":"TypeVar","contents":"a"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasSubtract"],"HasSubtract"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Identity"],"Identity"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[82,1],"name":"src/Neon/Values/Identity.purs","end":[85,1]}},{"comments":null,"title":"identityHasTop","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasTop"],"HasTop"],[{"tag":"TypeVar","contents":"a"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasTop"],"HasTop"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Identity"],"Identity"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[85,1],"name":"src/Neon/Values/Identity.purs","end":[88,1]}},{"comments":null,"title":"identityHasZero","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasZero"],"HasZero"],[{"tag":"TypeVar","contents":"a"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasZero"],"HasZero"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Identity"],"Identity"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[88,1],"name":"src/Neon/Values/Identity.purs","end":[91,1]}},{"comments":null,"title":"identityIsEnumerable","info":{"declType":"instance","dependencies":[[[["Neon","Types","IsEnumerable"],"IsEnumerable"],[{"tag":"TypeVar","contents":"a"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","IsEnumerable"],"IsEnumerable"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Identity"],"Identity"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[91,1],"name":"src/Neon/Values/Identity.purs","end":[103,1]}}],"comments":"A simple wrapper. This is most useful as the base of a monad transformer\nstack. That means you can use this as an \"empty\" monad and layer others on\ntop of it.\n","title":"Identity","fixity":null,"info":{"declType":"data","dataDeclType":"newtype","typeArguments":[["a",null]]},"sourceSpan":{"start":[30,1],"name":"src/Neon/Values/Identity.purs","end":[32,1]}},{"children":[{"comments":null,"title":"Nil","info":{"arguments":[],"declType":"dataConstructor"},"sourceSpan":null},{"comments":null,"title":"Cons","info":{"arguments":[{"tag":"TypeVar","contents":"a"},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","List"],"List"]},{"tag":"TypeVar","contents":"a"}]}}],"declType":"dataConstructor"},"sourceSpan":null},{"comments":null,"title":"listHasEqual","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasEqual"],"HasEqual"],[{"tag":"TypeVar","contents":"a"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasEqual"],"HasEqual"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","List"],"List"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[19,1],"name":"src/Neon/Values/List.purs","end":[24,1]}},{"comments":null,"title":"listHasFold","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasFold"],"HasFold"]},{"tag":"TypeConstructor","contents":[["Neon","Values","List"],"List"]}]}},"sourceSpan":{"start":[24,1],"name":"src/Neon/Values/List.purs","end":[32,1]}},{"comments":null,"title":"listHasFromArray","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasFromArray"],"HasFromArray"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","List"],"List"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[32,1],"name":"src/Neon/Values/List.purs","end":[35,1]}},{"comments":null,"title":"listHasMap","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasMap"],"HasMap"]},{"tag":"TypeConstructor","contents":[["Neon","Values","List"],"List"]}]}},"sourceSpan":{"start":[35,1],"name":"src/Neon/Values/List.purs","end":[40,1]}},{"comments":null,"title":"listHasShow","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasShow"],"HasShow"],[{"tag":"TypeVar","contents":"a"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasShow"],"HasShow"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","List"],"List"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[40,1],"name":"src/Neon/Values/List.purs","end":[45,1]}},{"comments":null,"title":"listHasToArray","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasToArray"],"HasToArray"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","List"],"List"]},{"tag":"TypeVar","contents":"a"}]}}]},{"tag":"TypeVar","contents":"a"}]}},"sourceSpan":{"start":[45,1],"name":"src/Neon/Values/List.purs","end":[46,37]}}],"comments":"Represents a linked list of values.\n","title":"List","fixity":null,"info":{"declType":"data","dataDeclType":"data","typeArguments":[["a",null]]},"sourceSpan":{"start":[15,1],"name":"src/Neon/Values/List.purs","end":[19,1]}},{"children":[{"comments":null,"title":"Nothing","info":{"arguments":[],"declType":"dataConstructor"},"sourceSpan":null},{"comments":null,"title":"Just","info":{"arguments":[{"tag":"TypeVar","contents":"a"}],"declType":"dataConstructor"},"sourceSpan":null},{"comments":null,"title":"maybeHasAdd","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasAdd"],"HasAdd"],[{"tag":"TypeVar","contents":"a"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasAdd"],"HasAdd"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Maybe"],"Maybe"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[40,1],"name":"src/Neon/Values/Maybe.purs","end":[43,1]}},{"comments":null,"title":"maybeHasAlternative","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasAlternative"],"HasAlternative"]},{"tag":"TypeConstructor","contents":[["Neon","Values","Maybe"],"Maybe"]}]}},"sourceSpan":{"start":[43,1],"name":"src/Neon/Values/Maybe.purs","end":[47,1]}},{"comments":null,"title":"maybeHasAnd","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasAnd"],"HasAnd"],[{"tag":"TypeVar","contents":"a"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasAnd"],"HasAnd"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Maybe"],"Maybe"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[47,1],"name":"src/Neon/Values/Maybe.purs","end":[50,1]}},{"comments":null,"title":"maybeHasApply","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasApply"],"HasApply"]},{"tag":"TypeConstructor","contents":[["Neon","Values","Maybe"],"Maybe"]}]}},"sourceSpan":{"start":[50,1],"name":"src/Neon/Values/Maybe.purs","end":[54,1]}},{"comments":null,"title":"maybeHasBind","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasBind"],"HasBind"]},{"tag":"TypeConstructor","contents":[["Neon","Values","Maybe"],"Maybe"]}]}},"sourceSpan":{"start":[54,1],"name":"src/Neon/Values/Maybe.purs","end":[58,1]}},{"comments":null,"title":"maybeHasBottom","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasBottom"],"HasBottom"],[{"tag":"TypeVar","contents":"a"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasBottom"],"HasBottom"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Maybe"],"Maybe"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[58,1],"name":"src/Neon/Values/Maybe.purs","end":[61,1]}},{"comments":null,"title":"maybeHasCompare","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasCompare"],"HasCompare"],[{"tag":"TypeVar","contents":"a"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasCompare"],"HasCompare"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Maybe"],"Maybe"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[61,1],"name":"src/Neon/Values/Maybe.purs","end":[67,1]}},{"comments":null,"title":"maybeHasDivide","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasDivide"],"HasDivide"],[{"tag":"TypeVar","contents":"a"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasDivide"],"HasDivide"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Maybe"],"Maybe"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[67,1],"name":"src/Neon/Values/Maybe.purs","end":[71,1]}},{"comments":null,"title":"maybeHasEmpty","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasEmpty"],"HasEmpty"]},{"tag":"TypeConstructor","contents":[["Neon","Values","Maybe"],"Maybe"]}]}},"sourceSpan":{"start":[71,1],"name":"src/Neon/Values/Maybe.purs","end":[74,1]}},{"comments":null,"title":"maybeHasEqual","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasEqual"],"HasEqual"],[{"tag":"TypeVar","contents":"a"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasEqual"],"HasEqual"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Maybe"],"Maybe"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[74,1],"name":"src/Neon/Values/Maybe.purs","end":[79,1]}},{"comments":null,"title":"maybeHasFold","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasFold"],"HasFold"]},{"tag":"TypeConstructor","contents":[["Neon","Values","Maybe"],"Maybe"]}]}},"sourceSpan":{"start":[79,1],"name":"src/Neon/Values/Maybe.purs","end":[87,1]}},{"comments":null,"title":"maybeHasMap","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasMap"],"HasMap"]},{"tag":"TypeConstructor","contents":[["Neon","Values","Maybe"],"Maybe"]}]}},"sourceSpan":{"start":[87,1],"name":"src/Neon/Values/Maybe.purs","end":[91,1]}},{"comments":null,"title":"maybeHasMultiply","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasMultiply"],"HasMultiply"],[{"tag":"TypeVar","contents":"a"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasMultiply"],"HasMultiply"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Maybe"],"Maybe"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[91,1],"name":"src/Neon/Values/Maybe.purs","end":[94,1]}},{"comments":null,"title":"maybeHasNot","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasNot"],"HasNot"],[{"tag":"TypeVar","contents":"a"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasNot"],"HasNot"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Maybe"],"Maybe"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[94,1],"name":"src/Neon/Values/Maybe.purs","end":[97,1]}},{"comments":null,"title":"maybeHasOne","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasOne"],"HasOne"],[{"tag":"TypeVar","contents":"a"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasOne"],"HasOne"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Maybe"],"Maybe"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[97,1],"name":"src/Neon/Values/Maybe.purs","end":[100,1]}},{"comments":null,"title":"maybeHasOr","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasOr"],"HasOr"],[{"tag":"TypeVar","contents":"a"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasOr"],"HasOr"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Maybe"],"Maybe"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[100,1],"name":"src/Neon/Values/Maybe.purs","end":[103,1]}},{"comments":null,"title":"maybeHasPure","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasPure"],"HasPure"]},{"tag":"TypeConstructor","contents":[["Neon","Values","Maybe"],"Maybe"]}]}},"sourceSpan":{"start":[103,1],"name":"src/Neon/Values/Maybe.purs","end":[106,1]}},{"comments":null,"title":"maybeHasShow","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasShow"],"HasShow"],[{"tag":"TypeVar","contents":"a"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasShow"],"HasShow"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Maybe"],"Maybe"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[106,1],"name":"src/Neon/Values/Maybe.purs","end":[110,1]}},{"comments":null,"title":"maybeHasSubtract","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasSubtract"],"HasSubtract"],[{"tag":"TypeVar","contents":"a"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasSubtract"],"HasSubtract"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Maybe"],"Maybe"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[110,1],"name":"src/Neon/Values/Maybe.purs","end":[113,1]}},{"comments":null,"title":"maybeHasTop","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasTop"],"HasTop"],[{"tag":"TypeVar","contents":"a"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasTop"],"HasTop"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Maybe"],"Maybe"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[113,1],"name":"src/Neon/Values/Maybe.purs","end":[116,1]}},{"comments":null,"title":"maybeHasZero","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasZero"],"HasZero"],[{"tag":"TypeVar","contents":"a"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasZero"],"HasZero"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Maybe"],"Maybe"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[116,1],"name":"src/Neon/Values/Maybe.purs","end":[128,1]}}],"comments":"Represents an optional value. This is similar to `null` in other\nlanguages, where `Nothing` is `null` and `Just x` is `x`.\n","title":"Maybe","fixity":null,"info":{"declType":"data","dataDeclType":"data","typeArguments":[["a",null]]},"sourceSpan":{"start":[36,1],"name":"src/Neon/Values/Maybe.purs","end":[40,1]}},{"children":[{"comments":null,"title":"nullableHasEqual","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasEqual"],"HasEqual"],[{"tag":"TypeVar","contents":"a"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasEqual"],"HasEqual"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Nullable"],"Nullable"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[30,1],"name":"src/Neon/Values/Nullable.purs","end":[35,1]}},{"comments":null,"title":"nullableHasShow","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasShow"],"HasShow"],[{"tag":"TypeVar","contents":"a"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasShow"],"HasShow"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Nullable"],"Nullable"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[35,1],"name":"src/Neon/Values/Nullable.purs","end":[44,1]}}],"comments":"Represents values that can be null. This is different than `Maybe` because\nit has no runtime overhead.\n","title":"Nullable","fixity":null,"info":{"kind":{"tag":"FunKind","contents":[{"tag":"Star","contents":[]},{"tag":"Star","contents":[]}]},"declType":"externData"},"sourceSpan":{"start":[15,1],"name":"src/Neon/Values/Nullable.purs","end":[17,1]}},{"children":[{"comments":null,"title":"LessThan","info":{"arguments":[],"declType":"dataConstructor"},"sourceSpan":null},{"comments":null,"title":"EqualTo","info":{"arguments":[],"declType":"dataConstructor"},"sourceSpan":null},{"comments":null,"title":"GreaterThan","info":{"arguments":[],"declType":"dataConstructor"},"sourceSpan":null},{"comments":null,"title":"orderingHasEqual","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasEqual"],"HasEqual"]},{"tag":"TypeConstructor","contents":[["Neon","Values","Ordering"],"Ordering"]}]}},"sourceSpan":{"start":[14,1],"name":"src/Neon/Values/Ordering.purs","end":[26,1]}},{"comments":null,"title":"orderingHasShow","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasShow"],"HasShow"]},{"tag":"TypeConstructor","contents":[["Neon","Values","Ordering"],"Ordering"]}]}},"sourceSpan":{"start":[26,1],"name":"src/Neon/Values/Ordering.purs","end":[30,20]}}],"comments":"Represents the possible outcomes from comparing two values.\n","title":"Ordering","fixity":null,"info":{"declType":"data","dataDeclType":"data","typeArguments":[]},"sourceSpan":{"start":[9,1],"name":"src/Neon/Values/Ordering.purs","end":[14,1]}},{"children":[{"comments":null,"title":"Pair","info":{"arguments":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Object"]},{"tag":"RCons","contents":["first",{"tag":"TypeVar","contents":"a"},{"tag":"RCons","contents":["second",{"tag":"TypeVar","contents":"b"},{"tag":"REmpty","contents":[]}]}]}]}],"declType":"dataConstructor"},"sourceSpan":null},{"comments":null,"title":"pairHasAdd","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasAdd"],"HasAdd"],[{"tag":"TypeVar","contents":"a"}]],[[["Neon","Types","HasAdd"],"HasAdd"],[{"tag":"TypeVar","contents":"b"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasAdd"],"HasAdd"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Pair"],"Pair"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}},"sourceSpan":{"start":[36,1],"name":"src/Neon/Values/Pair.purs","end":[39,1]}},{"comments":null,"title":"pairHasAnd","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasAnd"],"HasAnd"],[{"tag":"TypeVar","contents":"a"}]],[[["Neon","Types","HasAnd"],"HasAnd"],[{"tag":"TypeVar","contents":"b"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasAnd"],"HasAnd"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Pair"],"Pair"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}},"sourceSpan":{"start":[39,1],"name":"src/Neon/Values/Pair.purs","end":[42,1]}},{"comments":null,"title":"pairHasApply","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasAdd"],"HasAdd"],[{"tag":"TypeVar","contents":"a"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasApply"],"HasApply"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Pair"],"Pair"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[42,1],"name":"src/Neon/Values/Pair.purs","end":[45,1]}},{"comments":null,"title":"pairHasBind","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasZero"],"HasZero"],[{"tag":"TypeVar","contents":"a"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasBind"],"HasBind"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Pair"],"Pair"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[45,1],"name":"src/Neon/Values/Pair.purs","end":[49,1]}},{"comments":null,"title":"pairHasBottom","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasBottom"],"HasBottom"],[{"tag":"TypeVar","contents":"a"}]],[[["Neon","Types","HasBottom"],"HasBottom"],[{"tag":"TypeVar","contents":"b"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasBottom"],"HasBottom"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Pair"],"Pair"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}},"sourceSpan":{"start":[49,1],"name":"src/Neon/Values/Pair.purs","end":[52,1]}},{"comments":null,"title":"pairHasCompare","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasCompare"],"HasCompare"],[{"tag":"TypeVar","contents":"a"}]],[[["Neon","Types","HasCompare"],"HasCompare"],[{"tag":"TypeVar","contents":"b"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasCompare"],"HasCompare"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Pair"],"Pair"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}},"sourceSpan":{"start":[52,1],"name":"src/Neon/Values/Pair.purs","end":[57,1]}},{"comments":null,"title":"pairHasCompose","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasCompose"],"HasCompose"]},{"tag":"TypeConstructor","contents":[["Neon","Values","Pair"],"Pair"]}]}},"sourceSpan":{"start":[57,1],"name":"src/Neon/Values/Pair.purs","end":[60,1]}},{"comments":null,"title":"pairHasDivide","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasDivide"],"HasDivide"],[{"tag":"TypeVar","contents":"a"}]],[[["Neon","Types","HasDivide"],"HasDivide"],[{"tag":"TypeVar","contents":"b"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasDivide"],"HasDivide"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Pair"],"Pair"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}},"sourceSpan":{"start":[60,1],"name":"src/Neon/Values/Pair.purs","end":[64,1]}},{"comments":null,"title":"pairHasEqual","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasEqual"],"HasEqual"],[{"tag":"TypeVar","contents":"a"}]],[[["Neon","Types","HasEqual"],"HasEqual"],[{"tag":"TypeVar","contents":"b"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasEqual"],"HasEqual"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Pair"],"Pair"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}},"sourceSpan":{"start":[64,1],"name":"src/Neon/Values/Pair.purs","end":[67,1]}},{"comments":null,"title":"pairHasFold","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasFold"],"HasFold"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Pair"],"Pair"]},{"tag":"TypeVar","contents":"x"}]}}]}},"sourceSpan":{"start":[67,1],"name":"src/Neon/Values/Pair.purs","end":[71,1]}},{"comments":null,"title":"pairHasMap","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasMap"],"HasMap"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Pair"],"Pair"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[71,1],"name":"src/Neon/Values/Pair.purs","end":[74,1]}},{"comments":null,"title":"pairHasMultiply","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasMultiply"],"HasMultiply"],[{"tag":"TypeVar","contents":"a"}]],[[["Neon","Types","HasMultiply"],"HasMultiply"],[{"tag":"TypeVar","contents":"b"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasMultiply"],"HasMultiply"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Pair"],"Pair"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}},"sourceSpan":{"start":[74,1],"name":"src/Neon/Values/Pair.purs","end":[77,1]}},{"comments":null,"title":"pairHasNot","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasNot"],"HasNot"],[{"tag":"TypeVar","contents":"a"}]],[[["Neon","Types","HasNot"],"HasNot"],[{"tag":"TypeVar","contents":"b"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasNot"],"HasNot"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Pair"],"Pair"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}},"sourceSpan":{"start":[77,1],"name":"src/Neon/Values/Pair.purs","end":[80,1]}},{"comments":null,"title":"pairHasOne","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasOne"],"HasOne"],[{"tag":"TypeVar","contents":"a"}]],[[["Neon","Types","HasOne"],"HasOne"],[{"tag":"TypeVar","contents":"b"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasOne"],"HasOne"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Pair"],"Pair"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}},"sourceSpan":{"start":[80,1],"name":"src/Neon/Values/Pair.purs","end":[83,1]}},{"comments":null,"title":"pairHasOr","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasOr"],"HasOr"],[{"tag":"TypeVar","contents":"a"}]],[[["Neon","Types","HasOr"],"HasOr"],[{"tag":"TypeVar","contents":"b"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasOr"],"HasOr"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Pair"],"Pair"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}},"sourceSpan":{"start":[83,1],"name":"src/Neon/Values/Pair.purs","end":[86,1]}},{"comments":null,"title":"pairHasPure","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasZero"],"HasZero"],[{"tag":"TypeVar","contents":"a"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasPure"],"HasPure"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Pair"],"Pair"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[86,1],"name":"src/Neon/Values/Pair.purs","end":[89,1]}},{"comments":null,"title":"pairHasShow","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasShow"],"HasShow"],[{"tag":"TypeVar","contents":"a"}]],[[["Neon","Types","HasShow"],"HasShow"],[{"tag":"TypeVar","contents":"b"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasShow"],"HasShow"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Pair"],"Pair"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}},"sourceSpan":{"start":[89,1],"name":"src/Neon/Values/Pair.purs","end":[96,1]}},{"comments":null,"title":"pairHasSubtract","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasSubtract"],"HasSubtract"],[{"tag":"TypeVar","contents":"a"}]],[[["Neon","Types","HasSubtract"],"HasSubtract"],[{"tag":"TypeVar","contents":"b"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasSubtract"],"HasSubtract"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Pair"],"Pair"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}},"sourceSpan":{"start":[96,1],"name":"src/Neon/Values/Pair.purs","end":[99,1]}},{"comments":null,"title":"pairHasTop","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasTop"],"HasTop"],[{"tag":"TypeVar","contents":"a"}]],[[["Neon","Types","HasTop"],"HasTop"],[{"tag":"TypeVar","contents":"b"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasTop"],"HasTop"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Pair"],"Pair"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}},"sourceSpan":{"start":[99,1],"name":"src/Neon/Values/Pair.purs","end":[102,1]}},{"comments":null,"title":"pairHasZero","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasZero"],"HasZero"],[{"tag":"TypeVar","contents":"a"}]],[[["Neon","Types","HasZero"],"HasZero"],[{"tag":"TypeVar","contents":"b"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasZero"],"HasZero"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Pair"],"Pair"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}},"sourceSpan":{"start":[102,1],"name":"src/Neon/Values/Pair.purs","end":[112,1]}}],"comments":"Represents a pair of values. That is, a pair contains both values at the\nsame time, unlike `Either` which only has one. Pairs are also known as\ntuples.\n","title":"Pair","fixity":null,"info":{"declType":"data","dataDeclType":"newtype","typeArguments":[["a",null],["b",null]]},"sourceSpan":{"start":[34,1],"name":"src/Neon/Values/Pair.purs","end":[36,1]}},{"children":[{"comments":null,"title":"Proxy","info":{"arguments":[],"declType":"dataConstructor"},"sourceSpan":null},{"comments":null,"title":"proxyHasEqual","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasEqual"],"HasEqual"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Proxy"],"Proxy"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[11,1],"name":"src/Neon/Values/Proxy.purs","end":[14,1]}},{"comments":null,"title":"proxyHasShow","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasShow"],"HasShow"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Proxy"],"Proxy"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[14,1],"name":"src/Neon/Values/Proxy.purs","end":[15,12]}}],"comments":"A value that represents a type.\n","title":"Proxy","fixity":null,"info":{"declType":"data","dataDeclType":"data","typeArguments":[["a",null]]},"sourceSpan":{"start":[9,1],"name":"src/Neon/Values/Proxy.purs","end":[11,1]}},{"children":[{"comments":null,"title":"regexHasEqual","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasEqual"],"HasEqual"]},{"tag":"TypeConstructor","contents":[["Neon","Values","Regex"],"Regex"]}]}},"sourceSpan":{"start":[20,1],"name":"src/Neon/Values/Regex.purs","end":[23,1]}},{"comments":null,"title":"regexHasShow","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasShow"],"HasShow"]},{"tag":"TypeConstructor","contents":[["Neon","Values","Regex"],"Regex"]}]}},"sourceSpan":{"start":[23,1],"name":"src/Neon/Values/Regex.purs","end":[27,1]}}],"comments":"Represents regular expressions. A wrapper around `RegExp` from JavaScript.\n","title":"Regex","fixity":null,"info":{"kind":{"tag":"Star","contents":[]},"declType":"externData"},"sourceSpan":{"start":[18,1],"name":"src/Neon/Values/Regex.purs","end":[20,1]}},{"children":[],"comments":"Represents the flags that a regex can have.\n","title":"RegexFlags","fixity":null,"info":{"arguments":[],"declType":"typeSynonym","type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Object"]},{"tag":"RCons","contents":["ignoreCase",{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]},{"tag":"RCons","contents":["global",{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]},{"tag":"RCons","contents":["multiline",{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]},{"tag":"REmpty","contents":[]}]}]}]}]}},"sourceSpan":{"start":[27,1],"name":"src/Neon/Values/Regex.purs","end":[39,1]}},{"children":[{"comments":null,"title":"This","info":{"arguments":[{"tag":"TypeVar","contents":"a"}],"declType":"dataConstructor"},"sourceSpan":null},{"comments":null,"title":"That","info":{"arguments":[{"tag":"TypeVar","contents":"b"}],"declType":"dataConstructor"},"sourceSpan":null},{"comments":null,"title":"Both","info":{"arguments":[{"tag":"TypeVar","contents":"a"},{"tag":"TypeVar","contents":"b"}],"declType":"dataConstructor"},"sourceSpan":null},{"comments":null,"title":"theseHasAdd","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasAdd"],"HasAdd"],[{"tag":"TypeVar","contents":"a"}]],[[["Neon","Types","HasAdd"],"HasAdd"],[{"tag":"TypeVar","contents":"b"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasAdd"],"HasAdd"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","These"],"These"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}},"sourceSpan":{"start":[27,1],"name":"src/Neon/Values/These.purs","end":[38,1]}},{"comments":null,"title":"theseHasApply","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasAdd"],"HasAdd"],[{"tag":"TypeVar","contents":"a"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasApply"],"HasApply"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","These"],"These"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[38,1],"name":"src/Neon/Values/These.purs","end":[47,1]}},{"comments":null,"title":"theseHasBind","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasAdd"],"HasAdd"],[{"tag":"TypeVar","contents":"a"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasBind"],"HasBind"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","These"],"These"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[47,1],"name":"src/Neon/Values/These.purs","end":[56,1]}},{"comments":null,"title":"theseHasEqual","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasEqual"],"HasEqual"],[{"tag":"TypeVar","contents":"a"}]],[[["Neon","Types","HasEqual"],"HasEqual"],[{"tag":"TypeVar","contents":"b"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasEqual"],"HasEqual"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","These"],"These"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}},"sourceSpan":{"start":[56,1],"name":"src/Neon/Values/These.purs","end":[62,1]}},{"comments":null,"title":"theseHasFold","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasFold"],"HasFold"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","These"],"These"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[62,1],"name":"src/Neon/Values/These.purs","end":[72,1]}},{"comments":null,"title":"theseHasMap","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasMap"],"HasMap"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","These"],"These"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[72,1],"name":"src/Neon/Values/These.purs","end":[78,1]}},{"comments":null,"title":"theseHasPure","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasAdd"],"HasAdd"],[{"tag":"TypeVar","contents":"a"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasPure"],"HasPure"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","These"],"These"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[78,1],"name":"src/Neon/Values/These.purs","end":[81,1]}},{"comments":null,"title":"theseHasShow","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasShow"],"HasShow"],[{"tag":"TypeVar","contents":"a"}]],[[["Neon","Types","HasShow"],"HasShow"],[{"tag":"TypeVar","contents":"b"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasShow"],"HasShow"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","These"],"These"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}},"sourceSpan":{"start":[81,1],"name":"src/Neon/Values/These.purs","end":[98,1]}}],"comments":"Represents either one value or another, or both. This is different than\n`Either`, which only represents one or the other. And `Pair` only\nrepresents both values.\n","title":"These","fixity":null,"info":{"declType":"data","dataDeclType":"data","typeArguments":[["a",null],["b",null]]},"sourceSpan":{"start":[22,1],"name":"src/Neon/Values/These.purs","end":[27,1]}},{"children":[{"comments":null,"title":"unitHasAdd","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasAdd"],"HasAdd"]},{"tag":"TypeConstructor","contents":[["Neon","Values","Unit"],"Unit"]}]}},"sourceSpan":{"start":[26,1],"name":"src/Neon/Values/Unit.purs","end":[29,1]}},{"comments":null,"title":"unitHasAnd","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasAnd"],"HasAnd"]},{"tag":"TypeConstructor","contents":[["Neon","Values","Unit"],"Unit"]}]}},"sourceSpan":{"start":[29,1],"name":"src/Neon/Values/Unit.purs","end":[32,1]}},{"comments":null,"title":"unitHasBottom","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasBottom"],"HasBottom"]},{"tag":"TypeConstructor","contents":[["Neon","Values","Unit"],"Unit"]}]}},"sourceSpan":{"start":[32,1],"name":"src/Neon/Values/Unit.purs","end":[35,1]}},{"comments":null,"title":"unitHasCompare","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasCompare"],"HasCompare"]},{"tag":"TypeConstructor","contents":[["Neon","Values","Unit"],"Unit"]}]}},"sourceSpan":{"start":[35,1],"name":"src/Neon/Values/Unit.purs","end":[38,1]}},{"comments":null,"title":"unitHasDivide","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasDivide"],"HasDivide"]},{"tag":"TypeConstructor","contents":[["Neon","Values","Unit"],"Unit"]}]}},"sourceSpan":{"start":[38,1],"name":"src/Neon/Values/Unit.purs","end":[42,1]}},{"comments":null,"title":"unitHasEqual","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasEqual"],"HasEqual"]},{"tag":"TypeConstructor","contents":[["Neon","Values","Unit"],"Unit"]}]}},"sourceSpan":{"start":[42,1],"name":"src/Neon/Values/Unit.purs","end":[45,1]}},{"comments":null,"title":"unitHasMultiply","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasMultiply"],"HasMultiply"]},{"tag":"TypeConstructor","contents":[["Neon","Values","Unit"],"Unit"]}]}},"sourceSpan":{"start":[45,1],"name":"src/Neon/Values/Unit.purs","end":[48,1]}},{"comments":null,"title":"unitHasNot","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasNot"],"HasNot"]},{"tag":"TypeConstructor","contents":[["Neon","Values","Unit"],"Unit"]}]}},"sourceSpan":{"start":[48,1],"name":"src/Neon/Values/Unit.purs","end":[51,1]}},{"comments":null,"title":"unitHasOne","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasOne"],"HasOne"]},{"tag":"TypeConstructor","contents":[["Neon","Values","Unit"],"Unit"]}]}},"sourceSpan":{"start":[51,1],"name":"src/Neon/Values/Unit.purs","end":[54,1]}},{"comments":null,"title":"unitHasOr","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasOr"],"HasOr"]},{"tag":"TypeConstructor","contents":[["Neon","Values","Unit"],"Unit"]}]}},"sourceSpan":{"start":[54,1],"name":"src/Neon/Values/Unit.purs","end":[57,1]}},{"comments":null,"title":"unitHasShow","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasShow"],"HasShow"]},{"tag":"TypeConstructor","contents":[["Neon","Values","Unit"],"Unit"]}]}},"sourceSpan":{"start":[57,1],"name":"src/Neon/Values/Unit.purs","end":[60,1]}},{"comments":null,"title":"unitHasSubtract","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasSubtract"],"HasSubtract"]},{"tag":"TypeConstructor","contents":[["Neon","Values","Unit"],"Unit"]}]}},"sourceSpan":{"start":[60,1],"name":"src/Neon/Values/Unit.purs","end":[63,1]}},{"comments":null,"title":"unitHasTop","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasTop"],"HasTop"]},{"tag":"TypeConstructor","contents":[["Neon","Values","Unit"],"Unit"]}]}},"sourceSpan":{"start":[63,1],"name":"src/Neon/Values/Unit.purs","end":[66,1]}},{"comments":null,"title":"unitHasZero","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasZero"],"HasZero"]},{"tag":"TypeConstructor","contents":[["Neon","Values","Unit"],"Unit"]}]}},"sourceSpan":{"start":[66,1],"name":"src/Neon/Values/Unit.purs","end":[70,1]}}],"comments":"Represents nothing. The unit type is often used to show that only the\neffects of a given function are important.\n","title":"Unit","fixity":null,"info":{"declType":"data","dataDeclType":"newtype","typeArguments":[]},"sourceSpan":{"start":[24,1],"name":"src/Neon/Values/Unit.purs","end":[26,1]}},{"children":[],"comments":"Converts a function that takes a pair into one that takes two arguments.\n\n``` purescript\nlet f (Pair x) = x.first + x.second\nuncurry f \"race\" \"car\"\n-- \"racecar\"\n```\n","title":"curry","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["c",{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Pair"],"Pair"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeVar","contents":"c"}]}}]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeVar","contents":"c"}]}]}}]},null]},null]},null]}},"sourceSpan":{"start":[122,1],"name":"src/Neon/Values/Pair.purs","end":[123,1]}},{"children":[],"comments":"Applies the first function to `Left` values and the second function to\n`Right` values.\n\n``` purescript\neither (+ 2) (* 2) (Left 3)\n-- Left 5\neither (+ 2) (* 2) (Right 3)\n-- Right 6\n```\n","title":"either","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["c",{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"c"}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeVar","contents":"c"}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Either"],"Either"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeVar","contents":"c"}]}]}]},null]},null]},null]}},"sourceSpan":{"start":[127,1],"name":"src/Neon/Values/Either.purs","end":[128,1]}},{"children":[],"comments":"Converts an `Either` into a `Maybe`.\n\n``` purescript\nfromEither (Left unit)\n-- Nothing\nfromEither (Right unit)\n-- Just unit\n```\n","title":"fromEither","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["m",{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[[[[["Neon","Types","HasEmpty"],"HasEmpty"],[{"tag":"TypeVar","contents":"m"}]],[[["Neon","Types","HasPure"],"HasPure"],[{"tag":"TypeVar","contents":"m"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Either"],"Either"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"m"},{"tag":"TypeVar","contents":"b"}]}]}]},null]},null]},null]}},"sourceSpan":{"start":[166,1],"name":"src/Neon/Values/Either.purs","end":[167,1]}},{"children":[],"comments":"Converts a `Nullable` value into some other container. Typically this is\n`Maybe`.\n\n``` purescript\nfromNullable (toNullable (Just unit))\n-- Just unit\n```\n","title":"fromNullable","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["m",{"tag":"ConstrainedType","contents":[[[[["Neon","Types","HasEmpty"],"HasEmpty"],[{"tag":"TypeVar","contents":"m"}]],[[["Neon","Types","HasPure"],"HasPure"],[{"tag":"TypeVar","contents":"m"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Nullable"],"Nullable"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"m"},{"tag":"TypeVar","contents":"a"}]}]}]},null]},null]}},"sourceSpan":{"start":[28,1],"name":"src/Neon/Values/Nullable.purs","end":[30,1]}},{"children":[],"comments":"Returns `true` if the `These` is a `Both` value. Returns `false`\notherwise.\n\n``` purescript\nisBith (Both unit unit)\n-- true\n```\n","title":"isBoth","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","These"],"These"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]},null]},null]}},"sourceSpan":{"start":[135,1],"name":"src/Neon/Values/These.purs","end":[136,1]}},{"children":[],"comments":"Returns `true` if the `Maybe` is `Just x`. Returns `false` otherwise.\n\n``` purescript\nisJust (Just 1)\n-- true\nisJust Nothing\n-- false\n```\n","title":"isJust","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Maybe"],"Maybe"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]},null]}},"sourceSpan":{"start":[141,1],"name":"src/Neon/Values/Maybe.purs","end":[142,1]}},{"children":[],"comments":"Returns `true` if the `Either` is a `Left` value. Returns `false`\notherwise.\n\n``` purescript\nisLeft (Left unit)\n-- true\nisLeft (Right unit)\n-- false\n```\n","title":"isLeft","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Either"],"Either"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]},null]},null]}},"sourceSpan":{"start":[141,1],"name":"src/Neon/Values/Either.purs","end":[142,1]}},{"children":[],"comments":"Returns `true` if the `Maybe` is `Nothing`. Returns `false` otherwise.\n\n``` purescript\nisNothing Nothing\n-- true\nisNothing (Just 1)\n-- false\n```\n","title":"isNothing","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Maybe"],"Maybe"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]},null]}},"sourceSpan":{"start":[152,1],"name":"src/Neon/Values/Maybe.purs","end":[153,1]}},{"children":[],"comments":"Returns `true` if the `Either` is a `Right` value. Returns `false`\notherwise.\n\n``` purescript\nisRight (Right unit)\n-- true\nisRight (Left unit)\n-- false\n```\n","title":"isRight","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Either"],"Either"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]},null]},null]}},"sourceSpan":{"start":[155,1],"name":"src/Neon/Values/Either.purs","end":[156,1]}},{"children":[],"comments":"Returns `true` if the `These` is a `That` value. Returns `false`\notherwise.\n\n``` purescript\nisThat (That unit)\n-- true\n```\n","title":"isThat","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","These"],"These"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]},null]},null]}},"sourceSpan":{"start":[123,1],"name":"src/Neon/Values/These.purs","end":[124,1]}},{"children":[],"comments":"Returns `true` if the `These` is a `This` value. Returns `false`\notherwise.\n\n``` purescript\nisThis (This unit)\n-- true\n```\n","title":"isThis","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","These"],"These"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]},null]},null]}},"sourceSpan":{"start":[111,1],"name":"src/Neon/Values/These.purs","end":[112,1]}},{"children":[],"comments":"Returns the default value if the `Maybe` is `Nothing`. If instead the\n`Maybe` is `Just x`, call the function with `x`.\n\n``` purescript\nmaybe 0 (+ 1) Nothing\n-- 0\nmaybe 0 (+ 1) (Just 2)\n-- 3\n```\n","title":"maybe","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Maybe"],"Maybe"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeVar","contents":"b"}]}]}]},null]},null]}},"sourceSpan":{"start":[128,1],"name":"src/Neon/Values/Maybe.purs","end":[129,1]}},{"children":[],"comments":"Creates a pair. This is useful to avoid the `Pair` constructor and record\nboilerplate.\n\n``` purescript\npair 'x' 1 == Pair { first: 'x', second: 1 }\n-- true\n```\n","title":"pair","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Pair"],"Pair"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]}]},null]},null]}},"sourceSpan":{"start":[112,1],"name":"src/Neon/Values/Pair.purs","end":[113,1]}},{"children":[],"comments":"Creates a regular expression.\n\n``` purescript\nshow (regex \"a\" { ignoreCase: true, global: false, multiline: false })\n-- \"regex \\\"a\\\" { ignoreCase: true, global: false, multiline: false }\"\n```\n","title":"regex","fixity":null,"info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Neon","Values","Regex"],"RegexFlags"]}]},{"tag":"TypeConstructor","contents":[["Neon","Values","Regex"],"Regex"]}]}]}},"sourceSpan":{"start":[39,1],"name":"src/Neon/Values/Regex.purs","end":[40,1]}},{"children":[],"comments":"Returns the default regular expression flags.\n\n``` purescript\nshow regexFlags\n-- \"{ ignoreCase: false, global: false, multiline: false }\"\n```\n","title":"regexFlags","fixity":null,"info":{"declType":"value","type":{"tag":"TypeConstructor","contents":[["Neon","Values","Regex"],"RegexFlags"]}},"sourceSpan":{"start":[48,1],"name":"src/Neon/Values/Regex.purs","end":[49,1]}},{"children":[],"comments":"Extracts the value from its wrapper.\n\n``` purescript\nrunConstant (Constant unit)\n-- unit\n```\n","title":"runConstant","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Constant"],"Constant"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeVar","contents":"a"}]},null]},null]}},"sourceSpan":{"start":[113,1],"name":"src/Neon/Values/Constant.purs","end":[114,1]}},{"children":[],"comments":"Extracts the value from its wrapper.\n\n``` purescript\nrunIdentity (Identity unit)\n-- unit\n```\n","title":"runIdentity","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Identity"],"Identity"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeVar","contents":"a"}]},null]}},"sourceSpan":{"start":[103,1],"name":"src/Neon/Values/Identity.purs","end":[104,1]}},{"children":[],"comments":"Swaps the elements of the pair.\n\n``` purescript\nswap (pair 1 2)\n-- pair 2 1\n```\n","title":"swap","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Pair"],"Pair"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Pair"],"Pair"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeVar","contents":"a"}]}]},null]},null]}},"sourceSpan":{"start":[140,1],"name":"src/Neon/Values/Pair.purs","end":[141,1]}},{"children":[],"comments":"Tests if a regular expression matches a string.\n\n``` purescript\ntest \"a\" (regex \"a\" regexFlags)\n-- true\n```\n","title":"test","fixity":null,"info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Neon","Values","Regex"],"Regex"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}]}},"sourceSpan":{"start":[61,1],"name":"src/Neon/Values/Regex.purs","end":[62,1]}},{"children":[],"comments":"Applies the first function to `This` values, the second function to `That`\nvalues, and the third function to `Both` values.\n\n``` purescript\nthese (+ 2) (* 2) (+) (This 3)\n-- 5\nthese (+ 2) (* 2) (+) (That 3)\n-- 6\nthese (+ 2) (* 2) (+) (Both 3 4)\n-- 7\n```\n","title":"these","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["c",{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"c"}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeVar","contents":"c"}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeVar","contents":"c"}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","These"],"These"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeVar","contents":"c"}]}]}]}]},null]},null]},null]}},"sourceSpan":{"start":[98,1],"name":"src/Neon/Values/These.purs","end":[99,1]}},{"children":[],"comments":"Converts a `Maybe` into an `Either`.\n\n``` purescript\ntoEither unit Nothing\n-- Left unit\ntoEither unit (Just true)\n-- Right true\n```\n","title":"toEither","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Maybe"],"Maybe"]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Either"],"Either"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]}]},null]},null]}},"sourceSpan":{"start":[177,1],"name":"src/Neon/Values/Either.purs","end":[178,1]}},{"children":[],"comments":"Converts a `Maybe` value into a `Nullable` value.\n\n``` purescript\nshow (toNullable (Just unit))\n-- \"unit\"\n```\n","title":"toNullable","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Maybe"],"Maybe"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Nullable"],"Nullable"]},{"tag":"TypeVar","contents":"a"}]}]},null]}},"sourceSpan":{"start":[44,1],"name":"src/Neon/Values/Nullable.purs","end":[45,1]}},{"children":[],"comments":"Converts a function that takes two arguments into one that takes a pair.\n\n``` purescript\ncurry (+) (pair \"race\" \"car\")\n-- \"racecar\"\n```\n","title":"uncurry","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["c",{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeVar","contents":"c"}]}]}}]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Pair"],"Pair"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeVar","contents":"c"}]}}]},null]},null]},null]}},"sourceSpan":{"start":[131,1],"name":"src/Neon/Values/Pair.purs","end":[132,1]}},{"children":[],"comments":"The only inhabitant of the `Unit` type.\n","title":"unit","fixity":null,"info":{"declType":"value","type":{"tag":"TypeConstructor","contents":[["Neon","Values","Unit"],"Unit"]}},"sourceSpan":{"start":[70,1],"name":"src/Neon/Values/Unit.purs","end":[71,1]}},{"children":[],"comments":"Returns the default value if the `Maybe` is `Nothing`. If instead the\n`Maybe` is `Just x`, return `x`.\n\n``` purescript\nwithDefault 0 Nothing\n-- 0\nwithDefault 0 (Just 2)\n-- 2\n```\n","title":"withDefault","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Maybe"],"Maybe"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeVar","contents":"a"}]}]},null]}},"sourceSpan":{"start":[164,1],"name":"src/Neon/Values/Maybe.purs","end":[165,1]}}]}],"name":"Neon","comments":null,"declarations":[]},{"reExports":[{"moduleName":["Neon","Effects","Console"],"declarations":[{"children":[],"comments":"Represents effects that can write to the console.\n","title":"CONSOLE","fixity":null,"info":{"kind":{"tag":"Bang","contents":[]},"declType":"externData"},"sourceSpan":{"start":[15,1],"name":"src/Neon/Effects/Console.purs","end":[23,1]}},{"children":[],"comments":"Writes an error-level message to the console.\n\n``` purescript\nerror \"Exploded!\"\n-- prints \"Exploded!\" to standard error\n```\n","title":"error","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["e",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Effects","Effect"],"Effect"]},{"tag":"RCons","contents":["console",{"tag":"TypeConstructor","contents":[["Neon","Effects","Console"],"CONSOLE"]},{"tag":"TypeVar","contents":"e"}]}]},{"tag":"TypeConstructor","contents":[["Neon","Values","Unit"],"Unit"]}]}]},null]}},"sourceSpan":{"start":[47,1],"name":"src/Neon/Effects/Console.purs","end":[56,1]}},{"children":[],"comments":"Writes an info-level message to the console.\n\n``` purescript\ninfo \"Starting...\"\n-- prints \"Starting...\" to standard out\n```\n","title":"info","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["e",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Effects","Effect"],"Effect"]},{"tag":"RCons","contents":["console",{"tag":"TypeConstructor","contents":[["Neon","Effects","Console"],"CONSOLE"]},{"tag":"TypeVar","contents":"e"}]}]},{"tag":"TypeConstructor","contents":[["Neon","Values","Unit"],"Unit"]}]}]},null]}},"sourceSpan":{"start":[23,1],"name":"src/Neon/Effects/Console.purs","end":[31,1]}},{"children":[],"comments":"Writes a log-level message to the console.\n\n``` purescript\nlog \"Listening..\"\n-- prints \"Listening...\" to standard out\n```\n","title":"log","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["e",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Effects","Effect"],"Effect"]},{"tag":"RCons","contents":["console",{"tag":"TypeConstructor","contents":[["Neon","Effects","Console"],"CONSOLE"]},{"tag":"TypeVar","contents":"e"}]}]},{"tag":"TypeConstructor","contents":[["Neon","Values","Unit"],"Unit"]}]}]},null]}},"sourceSpan":{"start":[31,1],"name":"src/Neon/Effects/Console.purs","end":[39,1]}},{"children":[],"comments":"Converts a value to a string and writes a log-level message to the\nconsole.\n\n``` purescript\nprint 1\n-- print \"1\" to standard out\n```\n","title":"print","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["e",{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[[[[["Neon","Types","HasShow"],"HasShow"],[{"tag":"TypeVar","contents":"a"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Effects","Effect"],"Effect"]},{"tag":"RCons","contents":["console",{"tag":"TypeConstructor","contents":[["Neon","Effects","Console"],"CONSOLE"]},{"tag":"TypeVar","contents":"e"}]}]},{"tag":"TypeConstructor","contents":[["Neon","Values","Unit"],"Unit"]}]}]}]},null]},null]}},"sourceSpan":{"start":[56,1],"name":"src/Neon/Effects/Console.purs","end":[57,1]}},{"children":[],"comments":"Writes a warn-level message to the console.\n\n``` purescript\nwarn \"Stopping...\"\n-- prints \"Stopping...\" to standard error\n```\n","title":"warn","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["e",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Effects","Effect"],"Effect"]},{"tag":"RCons","contents":["console",{"tag":"TypeConstructor","contents":[["Neon","Effects","Console"],"CONSOLE"]},{"tag":"TypeVar","contents":"e"}]}]},{"tag":"TypeConstructor","contents":[["Neon","Values","Unit"],"Unit"]}]}]},null]}},"sourceSpan":{"start":[39,1],"name":"src/Neon/Effects/Console.purs","end":[47,1]}}]},{"moduleName":["Neon","Effects","Effect"],"declarations":[{"children":[{"comments":null,"title":"effectHasApply","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasApply"],"HasApply"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Effects","Effect"],"Effect"]},{"tag":"TypeVar","contents":"e"}]}}]}},"sourceSpan":{"start":[28,1],"name":"src/Neon/Effects/Effect.purs","end":[31,1]}},{"comments":null,"title":"effectHasBind","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasBind"],"HasBind"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Effects","Effect"],"Effect"]},{"tag":"TypeVar","contents":"e"}]}}]}},"sourceSpan":{"start":[31,1],"name":"src/Neon/Effects/Effect.purs","end":[34,1]}},{"comments":null,"title":"effectHasMap","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasMap"],"HasMap"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Effects","Effect"],"Effect"]},{"tag":"TypeVar","contents":"e"}]}}]}},"sourceSpan":{"start":[34,1],"name":"src/Neon/Effects/Effect.purs","end":[37,1]}},{"comments":null,"title":"effectHasPure","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasPure"],"HasPure"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Effects","Effect"],"Effect"]},{"tag":"TypeVar","contents":"e"}]}}]}},"sourceSpan":{"start":[37,1],"name":"src/Neon/Effects/Effect.purs","end":[46,1]}}],"comments":"Represents native effects. This type constructor takes two arguments: a\nrow of effects and a return type. The row of effects gives the native\ncapabilities of the effect.\n\n``` purescript\n-- This effect can use the console (like `console.log()` in JavaScript).\nforall e. Effect (console :: CONSOLE | e) Unit\n```\n","title":"Effect","fixity":null,"info":{"kind":{"tag":"FunKind","contents":[{"tag":"Row","contents":{"tag":"Bang","contents":[]}},{"tag":"FunKind","contents":[{"tag":"Star","contents":[]},{"tag":"Star","contents":[]}]}]},"declType":"externData"},"sourceSpan":{"start":[20,1],"name":"src/Neon/Effects/Effect.purs","end":[22,1]}},{"children":[],"comments":"Runs a pure effect.\n\n``` purescript\nrunPure (pure 1)\n-- 1\n```\n","title":"runPure","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Effects","Effect"],"Effect"]},{"tag":"REmpty","contents":[]}]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeVar","contents":"a"}]},null]}},"sourceSpan":{"start":[46,1],"name":"src/Neon/Effects/Effect.purs","end":[47,1]}},{"children":[],"comments":"Dangerously runs an effect. In general, you should not use this function.\nSometimes it is necessary to subvert the type system. This can also be\nuseful for debugging pure functions.\n\n``` purescript\nunsafeRunEffect (do { log \"...\"; pure 1 }) :: Int\n-- logs \"...\" and returns `1`\n```\n","title":"unsafeRunEffect","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["e",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Effects","Effect"],"Effect"]},{"tag":"TypeVar","contents":"e"}]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeVar","contents":"a"}]},null]},null]}},"sourceSpan":{"start":[57,1],"name":"src/Neon/Effects/Effect.purs","end":[58,1]}}]},{"moduleName":["Neon","Effects","Exception"],"declarations":[{"children":[],"comments":"Represents effects that can throw exceptions.\n","title":"EXCEPTION","fixity":null,"info":{"kind":{"tag":"Bang","contents":[]},"declType":"externData"},"sourceSpan":{"start":[13,1],"name":"src/Neon/Effects/Exception.purs","end":[14,1]}},{"children":[{"comments":null,"title":"exceptionHasShow","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasShow"],"HasShow"]},{"tag":"TypeConstructor","contents":[["Neon","Effects","Exception"],"Exception"]}]}},"sourceSpan":{"start":[44,1],"name":"src/Neon/Effects/Exception.purs","end":[45,10]}}],"comments":"An alias for `Error` from JavaScript.\n","title":"Exception","fixity":null,"info":{"kind":{"tag":"Star","contents":[]},"declType":"externData"},"sourceSpan":{"start":[17,1],"name":"src/Neon/Effects/Exception.purs","end":[25,1]}},{"children":[],"comments":"Catches an exception.\n\n``` purescript\ncatch\n  (throw (exception \"Boink!\"))\n  (\\ e -> error (show e))\n--\n```\n","title":"catch","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["e",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Effects","Effect"],"Effect"]},{"tag":"RCons","contents":["exception",{"tag":"TypeConstructor","contents":[["Neon","Effects","Exception"],"EXCEPTION"]},{"tag":"TypeVar","contents":"e"}]}]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Neon","Effects","Exception"],"Exception"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Effects","Effect"],"Effect"]},{"tag":"TypeVar","contents":"e"}]},{"tag":"TypeVar","contents":"a"}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Effects","Effect"],"Effect"]},{"tag":"TypeVar","contents":"e"}]},{"tag":"TypeVar","contents":"a"}]}]}]},null]},null]}},"sourceSpan":{"start":[42,1],"name":"src/Neon/Effects/Exception.purs","end":[44,1]}},{"children":[],"comments":"Creates an exception with the given message.\n\n``` purescript\nshow (exception \"Boink!\")\n-- \"Error: Boink!\"\n```\n","title":"exception","fixity":null,"info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeConstructor","contents":[["Neon","Effects","Exception"],"Exception"]}]}},"sourceSpan":{"start":[25,1],"name":"src/Neon/Effects/Exception.purs","end":[32,1]}},{"children":[],"comments":"Throws an exception.\n\n``` purescript\nthrow (exception \"Boink!\")\n```\n","title":"throw","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["e",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Neon","Effects","Exception"],"Exception"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Effects","Effect"],"Effect"]},{"tag":"RCons","contents":["exception",{"tag":"TypeConstructor","contents":[["Neon","Effects","Exception"],"EXCEPTION"]},{"tag":"TypeVar","contents":"e"}]}]},{"tag":"TypeVar","contents":"a"}]}]},null]},null]}},"sourceSpan":{"start":[32,1],"name":"src/Neon/Effects/Exception.purs","end":[42,1]}}]},{"moduleName":["Neon","Effects","Mutable"],"declarations":[{"children":[],"comments":"Represents effects that can have local mutation.\n","title":"Mutable","fixity":null,"info":{"kind":{"tag":"FunKind","contents":[{"tag":"Star","contents":[]},{"tag":"Bang","contents":[]}]},"declType":"externData"},"sourceSpan":{"start":[13,1],"name":"src/Neon/Effects/Mutable.purs","end":[24,1]}},{"children":[],"comments":"Represents a mutable reference that can be run in a `Mutable` effect. The\ntype `MutableReference s a` can be run with the `Mutable s` effect and\nreturns a value of type `a`.\n","title":"MutableReference","fixity":null,"info":{"kind":{"tag":"FunKind","contents":[{"tag":"Star","contents":[]},{"tag":"FunKind","contents":[{"tag":"Star","contents":[]},{"tag":"Star","contents":[]}]}]},"declType":"externData"},"sourceSpan":{"start":[29,1],"name":"src/Neon/Effects/Mutable.purs","end":[32,1]}},{"children":[],"comments":"Gets the current value of a mutable reference. See `runMutable` for an\nexample.\n","title":"getMutableReference","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["e",{"tag":"ForAll","contents":["s",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Effects","Mutable"],"MutableReference"]},{"tag":"TypeVar","contents":"s"}]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Effects","Effect"],"Effect"]},{"tag":"RCons","contents":["mutable",{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Effects","Mutable"],"Mutable"]},{"tag":"TypeVar","contents":"s"}]},{"tag":"TypeVar","contents":"e"}]}]},{"tag":"TypeVar","contents":"a"}]}]},null]},null]},null]}},"sourceSpan":{"start":[36,1],"name":"src/Neon/Effects/Mutable.purs","end":[39,1]}},{"children":[],"comments":"Creates a new mutable reference. See `runMutable` for an example.\n","title":"newMutableReference","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["e",{"tag":"ForAll","contents":["s",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Effects","Effect"],"Effect"]},{"tag":"RCons","contents":["mutable",{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Effects","Mutable"],"Mutable"]},{"tag":"TypeVar","contents":"s"}]},{"tag":"TypeVar","contents":"e"}]}]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Effects","Mutable"],"MutableReference"]},{"tag":"TypeVar","contents":"s"}]},{"tag":"TypeVar","contents":"a"}]}}]}]},null]},null]},null]}},"sourceSpan":{"start":[32,1],"name":"src/Neon/Effects/Mutable.purs","end":[36,1]}},{"children":[],"comments":"Runs a mutable effect.\n\n``` purescript\nrunPure (runMutable do\n  r <- newMutableReference false\n  setMutableReference r true\n  getMutableReference r)\n-- true\n```\n","title":"runMutable","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["e",{"tag":"ForAll","contents":["s",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Effects","Effect"],"Effect"]},{"tag":"RCons","contents":["mutable",{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Effects","Mutable"],"Mutable"]},{"tag":"TypeVar","contents":"s"}]},{"tag":"TypeVar","contents":"e"}]}]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Effects","Effect"],"Effect"]},{"tag":"TypeVar","contents":"e"}]},{"tag":"TypeVar","contents":"a"}]}]},null]},null]},null]}},"sourceSpan":{"start":[24,1],"name":"src/Neon/Effects/Mutable.purs","end":[29,1]}},{"children":[],"comments":"Sets the mutable reference to a value. See `runMutable` for an example.\n","title":"setMutableReference","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["e",{"tag":"ForAll","contents":["s",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Effects","Mutable"],"MutableReference"]},{"tag":"TypeVar","contents":"s"}]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Effects","Effect"],"Effect"]},{"tag":"RCons","contents":["mutable",{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Effects","Mutable"],"Mutable"]},{"tag":"TypeVar","contents":"s"}]},{"tag":"TypeVar","contents":"e"}]}]},{"tag":"TypeVar","contents":"a"}]}]}]},null]},null]},null]}},"sourceSpan":{"start":[39,1],"name":"src/Neon/Effects/Mutable.purs","end":[39,116]}}]},{"moduleName":["Neon","Effects","Random"],"declarations":[{"children":[],"comments":"Represents effects that can generate random numbers.\n","title":"RANDOM","fixity":null,"info":{"kind":{"tag":"Bang","contents":[]},"declType":"externData"},"sourceSpan":{"start":[9,1],"name":"src/Neon/Effects/Random.purs","end":[18,1]}},{"children":[],"comments":"Generates a random number. The number will be in the range [0, 1). That\nis, `0 <= x < 1`.\n\n``` purescript\nrandomNumber\n-- 0.123\n```\n","title":"randomNumber","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["e",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Effects","Effect"],"Effect"]},{"tag":"RCons","contents":["random",{"tag":"TypeConstructor","contents":[["Neon","Effects","Random"],"RANDOM"]},{"tag":"TypeVar","contents":"e"}]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]},null]}},"sourceSpan":{"start":[18,1],"name":"src/Neon/Effects/Random.purs","end":[18,72]}}]}],"name":"Neon.Effects","comments":null,"declarations":[]},{"reExports":[],"name":"Neon.Effects.Console","comments":null,"declarations":[{"children":[],"comments":"Represents effects that can write to the console.\n","title":"CONSOLE","fixity":null,"info":{"kind":{"tag":"Bang","contents":[]},"declType":"externData"},"sourceSpan":{"start":[15,1],"name":"src/Neon/Effects/Console.purs","end":[23,1]}},{"children":[],"comments":"Writes an info-level message to the console.\n\n``` purescript\ninfo \"Starting...\"\n-- prints \"Starting...\" to standard out\n```\n","title":"info","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["e",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Effects","Effect"],"Effect"]},{"tag":"RCons","contents":["console",{"tag":"TypeConstructor","contents":[["Neon","Effects","Console"],"CONSOLE"]},{"tag":"TypeVar","contents":"e"}]}]},{"tag":"TypeConstructor","contents":[["Neon","Values","Unit"],"Unit"]}]}]},null]}},"sourceSpan":{"start":[23,1],"name":"src/Neon/Effects/Console.purs","end":[31,1]}},{"children":[],"comments":"Writes a log-level message to the console.\n\n``` purescript\nlog \"Listening..\"\n-- prints \"Listening...\" to standard out\n```\n","title":"log","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["e",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Effects","Effect"],"Effect"]},{"tag":"RCons","contents":["console",{"tag":"TypeConstructor","contents":[["Neon","Effects","Console"],"CONSOLE"]},{"tag":"TypeVar","contents":"e"}]}]},{"tag":"TypeConstructor","contents":[["Neon","Values","Unit"],"Unit"]}]}]},null]}},"sourceSpan":{"start":[31,1],"name":"src/Neon/Effects/Console.purs","end":[39,1]}},{"children":[],"comments":"Writes a warn-level message to the console.\n\n``` purescript\nwarn \"Stopping...\"\n-- prints \"Stopping...\" to standard error\n```\n","title":"warn","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["e",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Effects","Effect"],"Effect"]},{"tag":"RCons","contents":["console",{"tag":"TypeConstructor","contents":[["Neon","Effects","Console"],"CONSOLE"]},{"tag":"TypeVar","contents":"e"}]}]},{"tag":"TypeConstructor","contents":[["Neon","Values","Unit"],"Unit"]}]}]},null]}},"sourceSpan":{"start":[39,1],"name":"src/Neon/Effects/Console.purs","end":[47,1]}},{"children":[],"comments":"Writes an error-level message to the console.\n\n``` purescript\nerror \"Exploded!\"\n-- prints \"Exploded!\" to standard error\n```\n","title":"error","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["e",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Effects","Effect"],"Effect"]},{"tag":"RCons","contents":["console",{"tag":"TypeConstructor","contents":[["Neon","Effects","Console"],"CONSOLE"]},{"tag":"TypeVar","contents":"e"}]}]},{"tag":"TypeConstructor","contents":[["Neon","Values","Unit"],"Unit"]}]}]},null]}},"sourceSpan":{"start":[47,1],"name":"src/Neon/Effects/Console.purs","end":[56,1]}},{"children":[],"comments":"Converts a value to a string and writes a log-level message to the\nconsole.\n\n``` purescript\nprint 1\n-- print \"1\" to standard out\n```\n","title":"print","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["e",{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[[[[["Neon","Types","HasShow"],"HasShow"],[{"tag":"TypeVar","contents":"a"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Effects","Effect"],"Effect"]},{"tag":"RCons","contents":["console",{"tag":"TypeConstructor","contents":[["Neon","Effects","Console"],"CONSOLE"]},{"tag":"TypeVar","contents":"e"}]}]},{"tag":"TypeConstructor","contents":[["Neon","Values","Unit"],"Unit"]}]}]}]},null]},null]}},"sourceSpan":{"start":[56,1],"name":"src/Neon/Effects/Console.purs","end":[57,1]}}]},{"reExports":[],"name":"Neon.Effects.Effect","comments":null,"declarations":[{"children":[{"comments":null,"title":"effectHasApply","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasApply"],"HasApply"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Effects","Effect"],"Effect"]},{"tag":"TypeVar","contents":"e"}]}}]}},"sourceSpan":{"start":[28,1],"name":"src/Neon/Effects/Effect.purs","end":[31,1]}},{"comments":null,"title":"effectHasBind","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasBind"],"HasBind"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Effects","Effect"],"Effect"]},{"tag":"TypeVar","contents":"e"}]}}]}},"sourceSpan":{"start":[31,1],"name":"src/Neon/Effects/Effect.purs","end":[34,1]}},{"comments":null,"title":"effectHasMap","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasMap"],"HasMap"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Effects","Effect"],"Effect"]},{"tag":"TypeVar","contents":"e"}]}}]}},"sourceSpan":{"start":[34,1],"name":"src/Neon/Effects/Effect.purs","end":[37,1]}},{"comments":null,"title":"effectHasPure","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasPure"],"HasPure"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Effects","Effect"],"Effect"]},{"tag":"TypeVar","contents":"e"}]}}]}},"sourceSpan":{"start":[37,1],"name":"src/Neon/Effects/Effect.purs","end":[46,1]}}],"comments":"Represents native effects. This type constructor takes two arguments: a\nrow of effects and a return type. The row of effects gives the native\ncapabilities of the effect.\n\n``` purescript\n-- This effect can use the console (like `console.log()` in JavaScript).\nforall e. Effect (console :: CONSOLE | e) Unit\n```\n","title":"Effect","fixity":null,"info":{"kind":{"tag":"FunKind","contents":[{"tag":"Row","contents":{"tag":"Bang","contents":[]}},{"tag":"FunKind","contents":[{"tag":"Star","contents":[]},{"tag":"Star","contents":[]}]}]},"declType":"externData"},"sourceSpan":{"start":[20,1],"name":"src/Neon/Effects/Effect.purs","end":[22,1]}},{"children":[],"comments":"Runs a pure effect.\n\n``` purescript\nrunPure (pure 1)\n-- 1\n```\n","title":"runPure","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Effects","Effect"],"Effect"]},{"tag":"REmpty","contents":[]}]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeVar","contents":"a"}]},null]}},"sourceSpan":{"start":[46,1],"name":"src/Neon/Effects/Effect.purs","end":[47,1]}},{"children":[],"comments":"Dangerously runs an effect. In general, you should not use this function.\nSometimes it is necessary to subvert the type system. This can also be\nuseful for debugging pure functions.\n\n``` purescript\nunsafeRunEffect (do { log \"...\"; pure 1 }) :: Int\n-- logs \"...\" and returns `1`\n```\n","title":"unsafeRunEffect","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["e",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Effects","Effect"],"Effect"]},{"tag":"TypeVar","contents":"e"}]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeVar","contents":"a"}]},null]},null]}},"sourceSpan":{"start":[57,1],"name":"src/Neon/Effects/Effect.purs","end":[58,1]}}]},{"reExports":[],"name":"Neon.Effects.Exception","comments":null,"declarations":[{"children":[],"comments":"Represents effects that can throw exceptions.\n","title":"EXCEPTION","fixity":null,"info":{"kind":{"tag":"Bang","contents":[]},"declType":"externData"},"sourceSpan":{"start":[13,1],"name":"src/Neon/Effects/Exception.purs","end":[14,1]}},{"children":[{"comments":null,"title":"exceptionHasShow","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasShow"],"HasShow"]},{"tag":"TypeConstructor","contents":[["Neon","Effects","Exception"],"Exception"]}]}},"sourceSpan":{"start":[44,1],"name":"src/Neon/Effects/Exception.purs","end":[45,10]}}],"comments":"An alias for `Error` from JavaScript.\n","title":"Exception","fixity":null,"info":{"kind":{"tag":"Star","contents":[]},"declType":"externData"},"sourceSpan":{"start":[17,1],"name":"src/Neon/Effects/Exception.purs","end":[25,1]}},{"children":[],"comments":"Creates an exception with the given message.\n\n``` purescript\nshow (exception \"Boink!\")\n-- \"Error: Boink!\"\n```\n","title":"exception","fixity":null,"info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeConstructor","contents":[["Neon","Effects","Exception"],"Exception"]}]}},"sourceSpan":{"start":[25,1],"name":"src/Neon/Effects/Exception.purs","end":[32,1]}},{"children":[],"comments":"Throws an exception.\n\n``` purescript\nthrow (exception \"Boink!\")\n```\n","title":"throw","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["e",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Neon","Effects","Exception"],"Exception"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Effects","Effect"],"Effect"]},{"tag":"RCons","contents":["exception",{"tag":"TypeConstructor","contents":[["Neon","Effects","Exception"],"EXCEPTION"]},{"tag":"TypeVar","contents":"e"}]}]},{"tag":"TypeVar","contents":"a"}]}]},null]},null]}},"sourceSpan":{"start":[32,1],"name":"src/Neon/Effects/Exception.purs","end":[42,1]}},{"children":[],"comments":"Catches an exception.\n\n``` purescript\ncatch\n  (throw (exception \"Boink!\"))\n  (\\ e -> error (show e))\n--\n```\n","title":"catch","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["e",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Effects","Effect"],"Effect"]},{"tag":"RCons","contents":["exception",{"tag":"TypeConstructor","contents":[["Neon","Effects","Exception"],"EXCEPTION"]},{"tag":"TypeVar","contents":"e"}]}]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Neon","Effects","Exception"],"Exception"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Effects","Effect"],"Effect"]},{"tag":"TypeVar","contents":"e"}]},{"tag":"TypeVar","contents":"a"}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Effects","Effect"],"Effect"]},{"tag":"TypeVar","contents":"e"}]},{"tag":"TypeVar","contents":"a"}]}]}]},null]},null]}},"sourceSpan":{"start":[42,1],"name":"src/Neon/Effects/Exception.purs","end":[44,1]}}]},{"reExports":[],"name":"Neon.Effects.Mutable","comments":null,"declarations":[{"children":[],"comments":"Represents effects that can have local mutation.\n","title":"Mutable","fixity":null,"info":{"kind":{"tag":"FunKind","contents":[{"tag":"Star","contents":[]},{"tag":"Bang","contents":[]}]},"declType":"externData"},"sourceSpan":{"start":[13,1],"name":"src/Neon/Effects/Mutable.purs","end":[24,1]}},{"children":[],"comments":"Runs a mutable effect.\n\n``` purescript\nrunPure (runMutable do\n  r <- newMutableReference false\n  setMutableReference r true\n  getMutableReference r)\n-- true\n```\n","title":"runMutable","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["e",{"tag":"ForAll","contents":["s",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Effects","Effect"],"Effect"]},{"tag":"RCons","contents":["mutable",{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Effects","Mutable"],"Mutable"]},{"tag":"TypeVar","contents":"s"}]},{"tag":"TypeVar","contents":"e"}]}]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Effects","Effect"],"Effect"]},{"tag":"TypeVar","contents":"e"}]},{"tag":"TypeVar","contents":"a"}]}]},null]},null]},null]}},"sourceSpan":{"start":[24,1],"name":"src/Neon/Effects/Mutable.purs","end":[29,1]}},{"children":[],"comments":"Represents a mutable reference that can be run in a `Mutable` effect. The\ntype `MutableReference s a` can be run with the `Mutable s` effect and\nreturns a value of type `a`.\n","title":"MutableReference","fixity":null,"info":{"kind":{"tag":"FunKind","contents":[{"tag":"Star","contents":[]},{"tag":"FunKind","contents":[{"tag":"Star","contents":[]},{"tag":"Star","contents":[]}]}]},"declType":"externData"},"sourceSpan":{"start":[29,1],"name":"src/Neon/Effects/Mutable.purs","end":[32,1]}},{"children":[],"comments":"Creates a new mutable reference. See `runMutable` for an example.\n","title":"newMutableReference","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["e",{"tag":"ForAll","contents":["s",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Effects","Effect"],"Effect"]},{"tag":"RCons","contents":["mutable",{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Effects","Mutable"],"Mutable"]},{"tag":"TypeVar","contents":"s"}]},{"tag":"TypeVar","contents":"e"}]}]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Effects","Mutable"],"MutableReference"]},{"tag":"TypeVar","contents":"s"}]},{"tag":"TypeVar","contents":"a"}]}}]}]},null]},null]},null]}},"sourceSpan":{"start":[32,1],"name":"src/Neon/Effects/Mutable.purs","end":[36,1]}},{"children":[],"comments":"Gets the current value of a mutable reference. See `runMutable` for an\nexample.\n","title":"getMutableReference","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["e",{"tag":"ForAll","contents":["s",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Effects","Mutable"],"MutableReference"]},{"tag":"TypeVar","contents":"s"}]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Effects","Effect"],"Effect"]},{"tag":"RCons","contents":["mutable",{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Effects","Mutable"],"Mutable"]},{"tag":"TypeVar","contents":"s"}]},{"tag":"TypeVar","contents":"e"}]}]},{"tag":"TypeVar","contents":"a"}]}]},null]},null]},null]}},"sourceSpan":{"start":[36,1],"name":"src/Neon/Effects/Mutable.purs","end":[39,1]}},{"children":[],"comments":"Sets the mutable reference to a value. See `runMutable` for an example.\n","title":"setMutableReference","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["e",{"tag":"ForAll","contents":["s",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Effects","Mutable"],"MutableReference"]},{"tag":"TypeVar","contents":"s"}]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Effects","Effect"],"Effect"]},{"tag":"RCons","contents":["mutable",{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Effects","Mutable"],"Mutable"]},{"tag":"TypeVar","contents":"s"}]},{"tag":"TypeVar","contents":"e"}]}]},{"tag":"TypeVar","contents":"a"}]}]}]},null]},null]},null]}},"sourceSpan":{"start":[39,1],"name":"src/Neon/Effects/Mutable.purs","end":[39,116]}}]},{"reExports":[],"name":"Neon.Effects.Random","comments":null,"declarations":[{"children":[],"comments":"Represents effects that can generate random numbers.\n","title":"RANDOM","fixity":null,"info":{"kind":{"tag":"Bang","contents":[]},"declType":"externData"},"sourceSpan":{"start":[9,1],"name":"src/Neon/Effects/Random.purs","end":[18,1]}},{"children":[],"comments":"Generates a random number. The number will be in the range [0, 1). That\nis, `0 <= x < 1`.\n\n``` purescript\nrandomNumber\n-- 0.123\n```\n","title":"randomNumber","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["e",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Effects","Effect"],"Effect"]},{"tag":"RCons","contents":["random",{"tag":"TypeConstructor","contents":[["Neon","Effects","Random"],"RANDOM"]},{"tag":"TypeVar","contents":"e"}]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]},null]}},"sourceSpan":{"start":[18,1],"name":"src/Neon/Effects/Random.purs","end":[18,72]}}]},{"reExports":[{"moduleName":["Neon","Primitives","Boolean"],"declarations":[{"children":[],"comments":"A functional alternative to the `if _ then _ else _` syntax. This is\nuseful in higher-order functions.\n\n``` purescript\nmap (boolean 1 2) [false, true]\n-- [2, 1]\n```\n","title":"boolean","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]},{"tag":"TypeVar","contents":"a"}]}]}]},null]}},"sourceSpan":{"start":[23,1],"name":"src/Neon/Primitives/Boolean.purs","end":[24,1]}},{"children":[],"comments":"An alias for `true`. This is useful in guard clauses.\n\n``` purescript\nmax x y\n  | y > x = y\n  | otherwise = x\n```\n","title":"otherwise","fixity":null,"info":{"declType":"value","type":{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}},"sourceSpan":{"start":[13,1],"name":"src/Neon/Primitives/Boolean.purs","end":[14,1]}}]},{"moduleName":["Neon","Primitives","Char"],"declarations":[{"children":[],"comments":"Convert a character to lower case.\n\n``` purescript\ntoLower 'A'\n-- 'a'\n```\n","title":"toLower","fixity":null,"info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Char"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Char"]}]}},"sourceSpan":{"start":[12,1],"name":"src/Neon/Primitives/Char.purs","end":[20,1]}},{"children":[],"comments":"Convert a character to upper case.\n\n``` purescript\ntoUpper 'a'\n-- 'A'\n```\n","title":"toUpper","fixity":null,"info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Char"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Char"]}]}},"sourceSpan":{"start":[20,1],"name":"src/Neon/Primitives/Char.purs","end":[20,35]}}]},{"moduleName":["Neon","Primitives","Function"],"declarations":[{"children":[],"comments":"The constant function. Always returns the first argument.\n\n``` purescript\nalways 1 2\n-- 1\n```\n","title":"always","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeVar","contents":"a"}]}}]},null]},null]}},"sourceSpan":{"start":[15,1],"name":"src/Neon/Primitives/Function.purs","end":[16,1]}},{"children":[],"comments":"Flips the order of the first two arguments.\n\n``` purescript\nflip always 1 2\n-- 2\n```\n","title":"flip","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["c",{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeVar","contents":"c"}]}]}}]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"c"}]}]}}]},null]},null]},null]}},"sourceSpan":{"start":[24,1],"name":"src/Neon/Primitives/Function.purs","end":[25,1]}},{"children":[],"comments":"Applies the second function to both arguments before applying the first\nfunction.\n\n``` purescript\n((*) `on` (+ 1)) 2 3\n-- 12\n```\n","title":"on","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["c",{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeVar","contents":"c"}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"c"}]}]}}]}]},null]},null]},null]}},"sourceSpan":{"start":[34,1],"name":"src/Neon/Primitives/Function.purs","end":[35,1]}},{"children":[],"comments":"Applies a function to an argument. This is useful to avoid parentheses.\n\n``` purescript\ntoLower <| 'A'\n-- 'a'\n```\n","title":"(<|)","fixity":{"associativity":"infixl","precedence":-1},"info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]},null]},null]}},"sourceSpan":{"start":[53,1],"name":"src/Neon/Primitives/Function.purs","end":[54,1]}},{"children":[],"comments":"Applies an argument to a function. This is useful to avoid parentheses.\n\n``` purescript\n'A' |> toLower\n-- 'a'\n```\n","title":"(|>)","fixity":{"associativity":"infixl","precedence":-1},"info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]},{"tag":"TypeVar","contents":"b"}]}]},null]},null]}},"sourceSpan":{"start":[43,1],"name":"src/Neon/Primitives/Function.purs","end":[44,1]}}]},{"moduleName":["Neon","Primitives","Int"],"declarations":[{"children":[],"comments":"Converts an integer into a number.\n\n``` purescript\ntoNumber 1\n-- 1.0\n```\n","title":"toNumber","fixity":null,"info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]}},"sourceSpan":{"start":[11,1],"name":"src/Neon/Primitives/Int.purs","end":[11,35]}}]},{"moduleName":["Neon","Primitives","Number"],"declarations":[{"children":[],"comments":"Rounds a number up.\n\n``` purescript\nceiling 1.1\n-- 2\n```\n","title":"ceiling","fixity":null,"info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}},"sourceSpan":{"start":[53,1],"name":"src/Neon/Primitives/Number.purs","end":[61,1]}},{"children":[],"comments":"Rounds a number down.\n\n``` purescript\nfloor 1.9\n-- 1\n```\n","title":"floor","fixity":null,"info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}},"sourceSpan":{"start":[61,1],"name":"src/Neon/Primitives/Number.purs","end":[71,1]}},{"children":[],"comments":"An alias for `Infinity` from JavaScript.\n","title":"infinity","fixity":null,"info":{"declType":"value","type":{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}},"sourceSpan":{"start":[27,1],"name":"src/Neon/Primitives/Number.purs","end":[37,1]}},{"children":[],"comments":"Tests whether a number is finite or not.\n\n``` purescript\nisFinite 1.0\n-- true\nisFinite infinity\n-- false\n```\n","title":"isFinite","fixity":null,"info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}},"sourceSpan":{"start":[37,1],"name":"src/Neon/Primitives/Number.purs","end":[45,1]}},{"children":[],"comments":"Tests whether a number is `nan` or not. This is necessary because `nan`\ndoes not equal `nan`.\n\n``` purescript\nisNaN nan\n-- true\nisNaN 1.0\n-- false\n```\n","title":"isNaN","fixity":null,"info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}},"sourceSpan":{"start":[24,1],"name":"src/Neon/Primitives/Number.purs","end":[27,1]}},{"children":[],"comments":"An alias for `NaN` from JavaScript.\n","title":"nan","fixity":null,"info":{"declType":"value","type":{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}},"sourceSpan":{"start":[13,1],"name":"src/Neon/Primitives/Number.purs","end":[24,1]}},{"children":[],"comments":"Rounds a number to the nearest integer.\n\n``` purescript\nround 1.4\n-- 1\n```\n","title":"round","fixity":null,"info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}},"sourceSpan":{"start":[45,1],"name":"src/Neon/Primitives/Number.purs","end":[53,1]}},{"children":[],"comments":"Removes the non-integral component of a number.\n\n``` purescript\ntruncate 1.5\n-- 1\ntruncate (-1.5)\n-- -1\n```\n","title":"truncate","fixity":null,"info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}},"sourceSpan":{"start":[71,1],"name":"src/Neon/Primitives/Number.purs","end":[71,38]}}]}],"name":"Neon.Primitives","comments":null,"declarations":[]},{"reExports":[],"name":"Neon.Primitives.Array","comments":null,"declarations":[]},{"reExports":[],"name":"Neon.Primitives.Boolean","comments":null,"declarations":[{"children":[],"comments":"An alias for `true`. This is useful in guard clauses.\n\n``` purescript\nmax x y\n  | y > x = y\n  | otherwise = x\n```\n","title":"otherwise","fixity":null,"info":{"declType":"value","type":{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}},"sourceSpan":{"start":[13,1],"name":"src/Neon/Primitives/Boolean.purs","end":[14,1]}},{"children":[],"comments":"A functional alternative to the `if _ then _ else _` syntax. This is\nuseful in higher-order functions.\n\n``` purescript\nmap (boolean 1 2) [false, true]\n-- [2, 1]\n```\n","title":"boolean","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]},{"tag":"TypeVar","contents":"a"}]}]}]},null]}},"sourceSpan":{"start":[23,1],"name":"src/Neon/Primitives/Boolean.purs","end":[24,1]}}]},{"reExports":[],"name":"Neon.Primitives.Char","comments":null,"declarations":[{"children":[],"comments":"Convert a character to lower case.\n\n``` purescript\ntoLower 'A'\n-- 'a'\n```\n","title":"toLower","fixity":null,"info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Char"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Char"]}]}},"sourceSpan":{"start":[12,1],"name":"src/Neon/Primitives/Char.purs","end":[20,1]}},{"children":[],"comments":"Convert a character to upper case.\n\n``` purescript\ntoUpper 'a'\n-- 'A'\n```\n","title":"toUpper","fixity":null,"info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Char"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Char"]}]}},"sourceSpan":{"start":[20,1],"name":"src/Neon/Primitives/Char.purs","end":[20,35]}}]},{"reExports":[],"name":"Neon.Primitives.Function","comments":null,"declarations":[{"children":[],"comments":"The constant function. Always returns the first argument.\n\n``` purescript\nalways 1 2\n-- 1\n```\n","title":"always","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeVar","contents":"a"}]}}]},null]},null]}},"sourceSpan":{"start":[15,1],"name":"src/Neon/Primitives/Function.purs","end":[16,1]}},{"children":[],"comments":"Flips the order of the first two arguments.\n\n``` purescript\nflip always 1 2\n-- 2\n```\n","title":"flip","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["c",{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeVar","contents":"c"}]}]}}]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"c"}]}]}}]},null]},null]},null]}},"sourceSpan":{"start":[24,1],"name":"src/Neon/Primitives/Function.purs","end":[25,1]}},{"children":[],"comments":"Applies the second function to both arguments before applying the first\nfunction.\n\n``` purescript\n((*) `on` (+ 1)) 2 3\n-- 12\n```\n","title":"on","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["c",{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeVar","contents":"c"}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"c"}]}]}}]}]},null]},null]},null]}},"sourceSpan":{"start":[34,1],"name":"src/Neon/Primitives/Function.purs","end":[35,1]}},{"children":[],"comments":"Applies an argument to a function. This is useful to avoid parentheses.\n\n``` purescript\n'A' |> toLower\n-- 'a'\n```\n","title":"(|>)","fixity":{"associativity":"infixl","precedence":-1},"info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]},{"tag":"TypeVar","contents":"b"}]}]},null]},null]}},"sourceSpan":{"start":[43,1],"name":"src/Neon/Primitives/Function.purs","end":[44,1]}},{"children":[],"comments":"Applies a function to an argument. This is useful to avoid parentheses.\n\n``` purescript\ntoLower <| 'A'\n-- 'a'\n```\n","title":"(<|)","fixity":{"associativity":"infixl","precedence":-1},"info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]},null]},null]}},"sourceSpan":{"start":[53,1],"name":"src/Neon/Primitives/Function.purs","end":[54,1]}}]},{"reExports":[],"name":"Neon.Primitives.Int","comments":null,"declarations":[{"children":[],"comments":"Converts an integer into a number.\n\n``` purescript\ntoNumber 1\n-- 1.0\n```\n","title":"toNumber","fixity":null,"info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]}},"sourceSpan":{"start":[11,1],"name":"src/Neon/Primitives/Int.purs","end":[11,35]}}]},{"reExports":[],"name":"Neon.Primitives.Number","comments":null,"declarations":[{"children":[],"comments":"An alias for `NaN` from JavaScript.\n","title":"nan","fixity":null,"info":{"declType":"value","type":{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}},"sourceSpan":{"start":[13,1],"name":"src/Neon/Primitives/Number.purs","end":[24,1]}},{"children":[],"comments":"Tests whether a number is `nan` or not. This is necessary because `nan`\ndoes not equal `nan`.\n\n``` purescript\nisNaN nan\n-- true\nisNaN 1.0\n-- false\n```\n","title":"isNaN","fixity":null,"info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}},"sourceSpan":{"start":[24,1],"name":"src/Neon/Primitives/Number.purs","end":[27,1]}},{"children":[],"comments":"An alias for `Infinity` from JavaScript.\n","title":"infinity","fixity":null,"info":{"declType":"value","type":{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}},"sourceSpan":{"start":[27,1],"name":"src/Neon/Primitives/Number.purs","end":[37,1]}},{"children":[],"comments":"Tests whether a number is finite or not.\n\n``` purescript\nisFinite 1.0\n-- true\nisFinite infinity\n-- false\n```\n","title":"isFinite","fixity":null,"info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}},"sourceSpan":{"start":[37,1],"name":"src/Neon/Primitives/Number.purs","end":[45,1]}},{"children":[],"comments":"Rounds a number to the nearest integer.\n\n``` purescript\nround 1.4\n-- 1\n```\n","title":"round","fixity":null,"info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}},"sourceSpan":{"start":[45,1],"name":"src/Neon/Primitives/Number.purs","end":[53,1]}},{"children":[],"comments":"Rounds a number up.\n\n``` purescript\nceiling 1.1\n-- 2\n```\n","title":"ceiling","fixity":null,"info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}},"sourceSpan":{"start":[53,1],"name":"src/Neon/Primitives/Number.purs","end":[61,1]}},{"children":[],"comments":"Rounds a number down.\n\n``` purescript\nfloor 1.9\n-- 1\n```\n","title":"floor","fixity":null,"info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}},"sourceSpan":{"start":[61,1],"name":"src/Neon/Primitives/Number.purs","end":[71,1]}},{"children":[],"comments":"Removes the non-integral component of a number.\n\n``` purescript\ntruncate 1.5\n-- 1\ntruncate (-1.5)\n-- -1\n```\n","title":"truncate","fixity":null,"info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}},"sourceSpan":{"start":[71,1],"name":"src/Neon/Primitives/Number.purs","end":[71,38]}}]},{"reExports":[],"name":"Neon.Primitives.Object","comments":null,"declarations":[]},{"reExports":[],"name":"Neon.Primitives.String","comments":null,"declarations":[]},{"reExports":[{"moduleName":["Neon","Transformers","MaybeT"],"declarations":[{"children":[{"comments":null,"title":"MaybeT","info":{"arguments":[{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"m"},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Maybe"],"Maybe"]},{"tag":"TypeVar","contents":"a"}]}}]}}],"declType":"dataConstructor"},"sourceSpan":null},{"comments":null,"title":"maybeTHasAlternative","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasBind"],"HasBind"],[{"tag":"TypeVar","contents":"m"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasAlternative"],"HasAlternative"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Transformers","MaybeT"],"MaybeT"]},{"tag":"TypeVar","contents":"m"}]}}]}},"sourceSpan":{"start":[20,1],"name":"src/Neon/Transformers/MaybeT.purs","end":[24,1]}},{"comments":null,"title":"maybeTHasApply","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasBind"],"HasBind"],[{"tag":"TypeVar","contents":"m"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasApply"],"HasApply"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Transformers","MaybeT"],"MaybeT"]},{"tag":"TypeVar","contents":"m"}]}}]}},"sourceSpan":{"start":[24,1],"name":"src/Neon/Transformers/MaybeT.purs","end":[30,1]}},{"comments":null,"title":"maybeTHasBind","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasBind"],"HasBind"],[{"tag":"TypeVar","contents":"m"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasBind"],"HasBind"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Transformers","MaybeT"],"MaybeT"]},{"tag":"TypeVar","contents":"m"}]}}]}},"sourceSpan":{"start":[30,1],"name":"src/Neon/Transformers/MaybeT.purs","end":[37,1]}},{"comments":null,"title":"maybeTHasEmpty","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasBind"],"HasBind"],[{"tag":"TypeVar","contents":"m"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasEmpty"],"HasEmpty"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Transformers","MaybeT"],"MaybeT"]},{"tag":"TypeVar","contents":"m"}]}}]}},"sourceSpan":{"start":[37,1],"name":"src/Neon/Transformers/MaybeT.purs","end":[40,1]}},{"comments":null,"title":"maybeTHasLift","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasLift"],"HasLift"]},{"tag":"TypeConstructor","contents":[["Neon","Transformers","MaybeT"],"MaybeT"]}]}},"sourceSpan":{"start":[40,1],"name":"src/Neon/Transformers/MaybeT.purs","end":[43,1]}},{"comments":null,"title":"maybeTHasMap","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasMap"],"HasMap"],[{"tag":"TypeVar","contents":"m"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasMap"],"HasMap"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Transformers","MaybeT"],"MaybeT"]},{"tag":"TypeVar","contents":"m"}]}}]}},"sourceSpan":{"start":[43,1],"name":"src/Neon/Transformers/MaybeT.purs","end":[47,1]}},{"comments":null,"title":"maybeTHasPure","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasBind"],"HasBind"],[{"tag":"TypeVar","contents":"m"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasPure"],"HasPure"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Transformers","MaybeT"],"MaybeT"]},{"tag":"TypeVar","contents":"m"}]}}]}},"sourceSpan":{"start":[47,1],"name":"src/Neon/Transformers/MaybeT.purs","end":[60,1]}}],"comments":"The \"maybe\" monad transformer. Extends any monad with failure via the\n`Maybe` type.\n","title":"MaybeT","fixity":null,"info":{"declType":"data","dataDeclType":"newtype","typeArguments":[["m",null],["a",null]]},"sourceSpan":{"start":[18,1],"name":"src/Neon/Transformers/MaybeT.purs","end":[20,1]}},{"children":[],"comments":"Runs a \"maybe\" monad transformer, returning the `Maybe` value in the\nwrapped monad.\n\n``` purescript\nrunMaybeT do\n  Just 1\n  Nothing\n  Just 1\n-- Identity Nothing\n```\n","title":"runMaybeT","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["m",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Transformers","MaybeT"],"MaybeT"]},{"tag":"TypeVar","contents":"m"}]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"m"},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Maybe"],"Maybe"]},{"tag":"TypeVar","contents":"a"}]}}]}]},null]},null]}},"sourceSpan":{"start":[60,1],"name":"src/Neon/Transformers/MaybeT.purs","end":[61,1]}}]},{"moduleName":["Neon","Transformers","StateT"],"declarations":[{"children":[{"comments":null,"title":"StateT","info":{"arguments":[{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"s"}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"m"},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Pair"],"Pair"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"s"}]}}]}]}}],"declType":"dataConstructor"},"sourceSpan":null},{"comments":null,"title":"stateTHasAlternative","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasAlternative"],"HasAlternative"],[{"tag":"TypeVar","contents":"m"}]],[[["Neon","Types","HasBind"],"HasBind"],[{"tag":"TypeVar","contents":"m"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasAlternative"],"HasAlternative"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Transformers","StateT"],"StateT"]},{"tag":"TypeVar","contents":"s"}]},{"tag":"TypeVar","contents":"m"}]}}]}},"sourceSpan":{"start":[21,1],"name":"src/Neon/Transformers/StateT.purs","end":[25,1]}},{"comments":null,"title":"stateTHasApply","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasBind"],"HasBind"],[{"tag":"TypeVar","contents":"m"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasApply"],"HasApply"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Transformers","StateT"],"StateT"]},{"tag":"TypeVar","contents":"s"}]},{"tag":"TypeVar","contents":"m"}]}}]}},"sourceSpan":{"start":[25,1],"name":"src/Neon/Transformers/StateT.purs","end":[31,1]}},{"comments":null,"title":"stateTHasBind","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasBind"],"HasBind"],[{"tag":"TypeVar","contents":"m"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasBind"],"HasBind"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Transformers","StateT"],"StateT"]},{"tag":"TypeVar","contents":"s"}]},{"tag":"TypeVar","contents":"m"}]}}]}},"sourceSpan":{"start":[31,1],"name":"src/Neon/Transformers/StateT.purs","end":[36,1]}},{"comments":null,"title":"stateTHasEmpty","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasBind"],"HasBind"],[{"tag":"TypeVar","contents":"m"}]],[[["Neon","Types","HasEmpty"],"HasEmpty"],[{"tag":"TypeVar","contents":"m"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasEmpty"],"HasEmpty"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Transformers","StateT"],"StateT"]},{"tag":"TypeVar","contents":"s"}]},{"tag":"TypeVar","contents":"m"}]}}]}},"sourceSpan":{"start":[36,1],"name":"src/Neon/Transformers/StateT.purs","end":[39,1]}},{"comments":null,"title":"stateTHasLift","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasLift"],"HasLift"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Transformers","StateT"],"StateT"]},{"tag":"TypeVar","contents":"s"}]}}]}},"sourceSpan":{"start":[39,1],"name":"src/Neon/Transformers/StateT.purs","end":[42,1]}},{"comments":null,"title":"stateTHasMap","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasMap"],"HasMap"],[{"tag":"TypeVar","contents":"m"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasMap"],"HasMap"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Transformers","StateT"],"StateT"]},{"tag":"TypeVar","contents":"s"}]},{"tag":"TypeVar","contents":"m"}]}}]}},"sourceSpan":{"start":[42,1],"name":"src/Neon/Transformers/StateT.purs","end":[47,1]}},{"comments":null,"title":"stateTHasPure","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasBind"],"HasBind"],[{"tag":"TypeVar","contents":"m"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasPure"],"HasPure"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Transformers","StateT"],"StateT"]},{"tag":"TypeVar","contents":"s"}]},{"tag":"TypeVar","contents":"m"}]}}]}},"sourceSpan":{"start":[47,1],"name":"src/Neon/Transformers/StateT.purs","end":[50,1]}},{"comments":null,"title":"stateTHasState","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasBind"],"HasBind"],[{"tag":"TypeVar","contents":"m"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasState"],"HasState"]},{"tag":"TypeVar","contents":"s"}]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Transformers","StateT"],"StateT"]},{"tag":"TypeVar","contents":"s"}]},{"tag":"TypeVar","contents":"m"}]}}]}},"sourceSpan":{"start":[50,1],"name":"src/Neon/Transformers/StateT.purs","end":[61,1]}}],"comments":"The \"state\" monad transformer. Extends any monad with state via the `Pair`\ntype.\n","title":"StateT","fixity":null,"info":{"declType":"data","dataDeclType":"newtype","typeArguments":[["s",null],["m",null],["a",null]]},"sourceSpan":{"start":[19,1],"name":"src/Neon/Transformers/StateT.purs","end":[21,1]}},{"children":[],"comments":"Runs a \"state\" monad transformer, returning the stateful value and the\nresult in the wrapped monad.\n\n``` purescript\nflip runStateT \"world\"\" do\n  pure \"hello\"\n-- Identity (pair \"hello\" \"world\")\n```\n","title":"runStateT","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["m",{"tag":"ForAll","contents":["s",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Transformers","StateT"],"StateT"]},{"tag":"TypeVar","contents":"s"}]},{"tag":"TypeVar","contents":"m"}]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"s"}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"m"},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Pair"],"Pair"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"s"}]}}]}]}]},null]},null]},null]}},"sourceSpan":{"start":[61,1],"name":"src/Neon/Transformers/StateT.purs","end":[62,1]}}]}],"name":"Neon.Transformers","comments":null,"declarations":[]},{"reExports":[],"name":"Neon.Transformers.MaybeT","comments":null,"declarations":[{"children":[{"comments":null,"title":"MaybeT","info":{"arguments":[{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"m"},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Maybe"],"Maybe"]},{"tag":"TypeVar","contents":"a"}]}}]}}],"declType":"dataConstructor"},"sourceSpan":null},{"comments":null,"title":"maybeTHasAlternative","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasBind"],"HasBind"],[{"tag":"TypeVar","contents":"m"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasAlternative"],"HasAlternative"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Transformers","MaybeT"],"MaybeT"]},{"tag":"TypeVar","contents":"m"}]}}]}},"sourceSpan":{"start":[20,1],"name":"src/Neon/Transformers/MaybeT.purs","end":[24,1]}},{"comments":null,"title":"maybeTHasApply","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasBind"],"HasBind"],[{"tag":"TypeVar","contents":"m"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasApply"],"HasApply"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Transformers","MaybeT"],"MaybeT"]},{"tag":"TypeVar","contents":"m"}]}}]}},"sourceSpan":{"start":[24,1],"name":"src/Neon/Transformers/MaybeT.purs","end":[30,1]}},{"comments":null,"title":"maybeTHasBind","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasBind"],"HasBind"],[{"tag":"TypeVar","contents":"m"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasBind"],"HasBind"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Transformers","MaybeT"],"MaybeT"]},{"tag":"TypeVar","contents":"m"}]}}]}},"sourceSpan":{"start":[30,1],"name":"src/Neon/Transformers/MaybeT.purs","end":[37,1]}},{"comments":null,"title":"maybeTHasEmpty","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasBind"],"HasBind"],[{"tag":"TypeVar","contents":"m"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasEmpty"],"HasEmpty"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Transformers","MaybeT"],"MaybeT"]},{"tag":"TypeVar","contents":"m"}]}}]}},"sourceSpan":{"start":[37,1],"name":"src/Neon/Transformers/MaybeT.purs","end":[40,1]}},{"comments":null,"title":"maybeTHasLift","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasLift"],"HasLift"]},{"tag":"TypeConstructor","contents":[["Neon","Transformers","MaybeT"],"MaybeT"]}]}},"sourceSpan":{"start":[40,1],"name":"src/Neon/Transformers/MaybeT.purs","end":[43,1]}},{"comments":null,"title":"maybeTHasMap","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasMap"],"HasMap"],[{"tag":"TypeVar","contents":"m"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasMap"],"HasMap"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Transformers","MaybeT"],"MaybeT"]},{"tag":"TypeVar","contents":"m"}]}}]}},"sourceSpan":{"start":[43,1],"name":"src/Neon/Transformers/MaybeT.purs","end":[47,1]}},{"comments":null,"title":"maybeTHasPure","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasBind"],"HasBind"],[{"tag":"TypeVar","contents":"m"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasPure"],"HasPure"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Transformers","MaybeT"],"MaybeT"]},{"tag":"TypeVar","contents":"m"}]}}]}},"sourceSpan":{"start":[47,1],"name":"src/Neon/Transformers/MaybeT.purs","end":[60,1]}}],"comments":"The \"maybe\" monad transformer. Extends any monad with failure via the\n`Maybe` type.\n","title":"MaybeT","fixity":null,"info":{"declType":"data","dataDeclType":"newtype","typeArguments":[["m",null],["a",null]]},"sourceSpan":{"start":[18,1],"name":"src/Neon/Transformers/MaybeT.purs","end":[20,1]}},{"children":[],"comments":"Runs a \"maybe\" monad transformer, returning the `Maybe` value in the\nwrapped monad.\n\n``` purescript\nrunMaybeT do\n  Just 1\n  Nothing\n  Just 1\n-- Identity Nothing\n```\n","title":"runMaybeT","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["m",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Transformers","MaybeT"],"MaybeT"]},{"tag":"TypeVar","contents":"m"}]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"m"},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Maybe"],"Maybe"]},{"tag":"TypeVar","contents":"a"}]}}]}]},null]},null]}},"sourceSpan":{"start":[60,1],"name":"src/Neon/Transformers/MaybeT.purs","end":[61,1]}}]},{"reExports":[],"name":"Neon.Transformers.StateT","comments":null,"declarations":[{"children":[{"comments":null,"title":"StateT","info":{"arguments":[{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"s"}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"m"},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Pair"],"Pair"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"s"}]}}]}]}}],"declType":"dataConstructor"},"sourceSpan":null},{"comments":null,"title":"stateTHasAlternative","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasAlternative"],"HasAlternative"],[{"tag":"TypeVar","contents":"m"}]],[[["Neon","Types","HasBind"],"HasBind"],[{"tag":"TypeVar","contents":"m"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasAlternative"],"HasAlternative"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Transformers","StateT"],"StateT"]},{"tag":"TypeVar","contents":"s"}]},{"tag":"TypeVar","contents":"m"}]}}]}},"sourceSpan":{"start":[21,1],"name":"src/Neon/Transformers/StateT.purs","end":[25,1]}},{"comments":null,"title":"stateTHasApply","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasBind"],"HasBind"],[{"tag":"TypeVar","contents":"m"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasApply"],"HasApply"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Transformers","StateT"],"StateT"]},{"tag":"TypeVar","contents":"s"}]},{"tag":"TypeVar","contents":"m"}]}}]}},"sourceSpan":{"start":[25,1],"name":"src/Neon/Transformers/StateT.purs","end":[31,1]}},{"comments":null,"title":"stateTHasBind","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasBind"],"HasBind"],[{"tag":"TypeVar","contents":"m"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasBind"],"HasBind"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Transformers","StateT"],"StateT"]},{"tag":"TypeVar","contents":"s"}]},{"tag":"TypeVar","contents":"m"}]}}]}},"sourceSpan":{"start":[31,1],"name":"src/Neon/Transformers/StateT.purs","end":[36,1]}},{"comments":null,"title":"stateTHasEmpty","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasBind"],"HasBind"],[{"tag":"TypeVar","contents":"m"}]],[[["Neon","Types","HasEmpty"],"HasEmpty"],[{"tag":"TypeVar","contents":"m"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasEmpty"],"HasEmpty"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Transformers","StateT"],"StateT"]},{"tag":"TypeVar","contents":"s"}]},{"tag":"TypeVar","contents":"m"}]}}]}},"sourceSpan":{"start":[36,1],"name":"src/Neon/Transformers/StateT.purs","end":[39,1]}},{"comments":null,"title":"stateTHasLift","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasLift"],"HasLift"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Transformers","StateT"],"StateT"]},{"tag":"TypeVar","contents":"s"}]}}]}},"sourceSpan":{"start":[39,1],"name":"src/Neon/Transformers/StateT.purs","end":[42,1]}},{"comments":null,"title":"stateTHasMap","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasMap"],"HasMap"],[{"tag":"TypeVar","contents":"m"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasMap"],"HasMap"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Transformers","StateT"],"StateT"]},{"tag":"TypeVar","contents":"s"}]},{"tag":"TypeVar","contents":"m"}]}}]}},"sourceSpan":{"start":[42,1],"name":"src/Neon/Transformers/StateT.purs","end":[47,1]}},{"comments":null,"title":"stateTHasPure","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasBind"],"HasBind"],[{"tag":"TypeVar","contents":"m"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasPure"],"HasPure"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Transformers","StateT"],"StateT"]},{"tag":"TypeVar","contents":"s"}]},{"tag":"TypeVar","contents":"m"}]}}]}},"sourceSpan":{"start":[47,1],"name":"src/Neon/Transformers/StateT.purs","end":[50,1]}},{"comments":null,"title":"stateTHasState","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasBind"],"HasBind"],[{"tag":"TypeVar","contents":"m"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasState"],"HasState"]},{"tag":"TypeVar","contents":"s"}]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Transformers","StateT"],"StateT"]},{"tag":"TypeVar","contents":"s"}]},{"tag":"TypeVar","contents":"m"}]}}]}},"sourceSpan":{"start":[50,1],"name":"src/Neon/Transformers/StateT.purs","end":[61,1]}}],"comments":"The \"state\" monad transformer. Extends any monad with state via the `Pair`\ntype.\n","title":"StateT","fixity":null,"info":{"declType":"data","dataDeclType":"newtype","typeArguments":[["s",null],["m",null],["a",null]]},"sourceSpan":{"start":[19,1],"name":"src/Neon/Transformers/StateT.purs","end":[21,1]}},{"children":[],"comments":"Runs a \"state\" monad transformer, returning the stateful value and the\nresult in the wrapped monad.\n\n``` purescript\nflip runStateT \"world\"\" do\n  pure \"hello\"\n-- Identity (pair \"hello\" \"world\")\n```\n","title":"runStateT","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["m",{"tag":"ForAll","contents":["s",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Transformers","StateT"],"StateT"]},{"tag":"TypeVar","contents":"s"}]},{"tag":"TypeVar","contents":"m"}]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"s"}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"m"},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Pair"],"Pair"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"s"}]}}]}]}]},null]},null]},null]}},"sourceSpan":{"start":[61,1],"name":"src/Neon/Transformers/StateT.purs","end":[62,1]}}]},{"reExports":[{"moduleName":["Neon","Types","HasAdd"],"declarations":[{"children":[{"comments":null,"title":"add","info":{"declType":"typeClassMember","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":null},{"comments":null,"title":"arrayHasAdd","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasAdd"],"HasAdd"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[27,1],"name":"src/Neon/Types/HasAdd.purs","end":[30,1]}},{"comments":null,"title":"booleanHasAdd","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasAdd"],"HasAdd"]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}},"sourceSpan":{"start":[30,1],"name":"src/Neon/Types/HasAdd.purs","end":[33,1]}},{"comments":null,"title":"functionHasAdd","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasAdd"],"HasAdd"],[{"tag":"TypeVar","contents":"b"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasAdd"],"HasAdd"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}},"sourceSpan":{"start":[33,1],"name":"src/Neon/Types/HasAdd.purs","end":[36,1]}},{"comments":null,"title":"intHasAdd","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasAdd"],"HasAdd"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}},"sourceSpan":{"start":[36,1],"name":"src/Neon/Types/HasAdd.purs","end":[39,1]}},{"comments":null,"title":"numberHasAdd","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasAdd"],"HasAdd"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]}},"sourceSpan":{"start":[39,1],"name":"src/Neon/Types/HasAdd.purs","end":[42,1]}},{"comments":null,"title":"stringHasAdd","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasAdd"],"HasAdd"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}},"sourceSpan":{"start":[42,1],"name":"src/Neon/Types/HasAdd.purs","end":[51,1]}}],"comments":"Represents types that can be added together. This is also known as a\n[semigroup](https://en.wikipedia.org/wiki/Semigroup).\n\nLaws:\n- Associativity: `x + (y + z) = (x + y) + z`\n","title":"HasAdd","fixity":null,"info":{"arguments":[["a",null]],"declType":"typeClass","superclasses":[]},"sourceSpan":{"start":[18,1],"name":"src/Neon/Types/HasAdd.purs","end":[27,1]}},{"children":[],"comments":"Alias for `add`.\n\n``` purescript\n\"a\" + \"b\"\n-- \"ab\"\n```\n","title":"(+)","fixity":{"associativity":"infixl","precedence":-1},"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[[[[["Neon","Types","HasAdd"],"HasAdd"],[{"tag":"TypeVar","contents":"a"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"a"}]}]}]},null]}},"sourceSpan":{"start":[51,1],"name":"src/Neon/Types/HasAdd.purs","end":[52,1]}}]},{"moduleName":["Neon","Types","HasAlternative"],"declarations":[{"children":[{"comments":null,"title":"alternative","info":{"declType":"typeClassMember","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}]}]},null]}},"sourceSpan":null},{"comments":null,"title":"arrayHasAlternative","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasAlternative"],"HasAlternative"]},{"tag":"TypeConstructor","contents":[["Prim"],"Array"]}]}},"sourceSpan":{"start":[25,1],"name":"src/Neon/Types/HasAlternative.purs","end":[26,28]}}],"comments":"Represents types that can express alternatives. This is like `HasAdd` but\nfor types of kind `* -> *` instead of `*`.\n\nLaws:\n- Associativity: `alternative (alternative x y) z == alternative x (alternative y z)`\n- Distributivity: `map f (alternative x y) == alternative (map f x) (map f y)`\n","title":"HasAlternative","fixity":null,"info":{"arguments":[["f",null]],"declType":"typeClass","superclasses":[[[["Neon","Types","HasMap"],"HasMap"],[{"tag":"TypeVar","contents":"f"}]]]},"sourceSpan":{"start":[15,1],"name":"src/Neon/Types/HasAlternative.purs","end":[25,1]}}]},{"moduleName":["Neon","Types","HasAnd"],"declarations":[{"children":[{"comments":null,"title":"and","info":{"declType":"typeClassMember","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":null},{"comments":null,"title":"booleanHasAnd","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasAnd"],"HasAnd"]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}},"sourceSpan":{"start":[28,1],"name":"src/Neon/Types/HasAnd.purs","end":[31,1]}},{"comments":null,"title":"functionHasAnd","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasAnd"],"HasAnd"],[{"tag":"TypeVar","contents":"b"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasAnd"],"HasAnd"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}},"sourceSpan":{"start":[31,1],"name":"src/Neon/Types/HasAnd.purs","end":[40,1]}}],"comments":"Represents types than can be \"and\"ed together. This is also known as a\n[logical conjunction](https://en.wikipedia.org/wiki/Logical_conjunction).\n\nLaws:\n- Associativity: `x && (y && z) = (x && y) && z`\n- Commutativity: `x && y = y && x`\n- Identity: `x && top = x`\n- Annihiliation: `x && bottom = bottom`\n- Idempotence: `x && x = x`\n","title":"HasAnd","fixity":null,"info":{"arguments":[["a",null]],"declType":"typeClass","superclasses":[[[["Neon","Types","HasBottom"],"HasBottom"],[{"tag":"TypeVar","contents":"a"}]],[[["Neon","Types","HasTop"],"HasTop"],[{"tag":"TypeVar","contents":"a"}]]]},"sourceSpan":{"start":[19,1],"name":"src/Neon/Types/HasAnd.purs","end":[28,1]}},{"children":[],"comments":"Alias for `and`.\n\n``` purescript\ntrue && true\n-- true\n```\n","title":"(&&)","fixity":{"associativity":"infixl","precedence":-1},"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[[[[["Neon","Types","HasAnd"],"HasAnd"],[{"tag":"TypeVar","contents":"a"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"a"}]}]}]},null]}},"sourceSpan":{"start":[40,1],"name":"src/Neon/Types/HasAnd.purs","end":[41,1]}}]},{"moduleName":["Neon","Types","HasApply"],"declarations":[{"children":[{"comments":null,"title":"apply","info":{"declType":"typeClassMember","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"b"}]}]}]},null]},null]}},"sourceSpan":null},{"comments":null,"title":"arrayHasApply","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasApply"],"HasApply"]},{"tag":"TypeConstructor","contents":[["Prim"],"Array"]}]}},"sourceSpan":{"start":[26,1],"name":"src/Neon/Types/HasApply.purs","end":[29,1]}},{"comments":null,"title":"functionHasApply","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasApply"],"HasApply"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[29,1],"name":"src/Neon/Types/HasApply.purs","end":[30,30]}}],"comments":"Represents types that can be applied from within a container. In other\nwords, given both a function and a value in a container, apply the\nfunction to the value and return the result in a container. This is also\nknown as an applicative functor.\n\nLaws:\n- Associative composition: `apply (apply (map (<<) f) g) h = apply f (apply g h)`\n","title":"HasApply","fixity":null,"info":{"arguments":[["f",null]],"declType":"typeClass","superclasses":[[[["Neon","Types","HasMap"],"HasMap"],[{"tag":"TypeVar","contents":"f"}]]]},"sourceSpan":{"start":[17,1],"name":"src/Neon/Types/HasApply.purs","end":[26,1]}}]},{"moduleName":["Neon","Types","HasBind"],"declarations":[{"children":[{"comments":null,"title":"bind","info":{"declType":"typeClassMember","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"b"}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"b"}]}]}]},null]},null]}},"sourceSpan":null},{"comments":null,"title":"arrayHasBind","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasBind"],"HasBind"]},{"tag":"TypeConstructor","contents":[["Prim"],"Array"]}]}},"sourceSpan":{"start":[26,1],"name":"src/Neon/Types/HasBind.purs","end":[29,1]}},{"comments":null,"title":"functionHasbind","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasBind"],"HasBind"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[29,1],"name":"src/Neon/Types/HasBind.purs","end":[38,1]}}],"comments":"Represents types that can express sequential actions. This is also known\nas a [monad](https://en.wikipedia.org/wiki/Monad_(functional_programming)).\n\nLaws:\n- Associativity: `bind (bind x f) g = bind x (\\ k -> bind (f k) g)`\n","title":"HasBind","fixity":null,"info":{"arguments":[["f",null]],"declType":"typeClass","superclasses":[[[["Neon","Types","HasPure"],"HasPure"],[{"tag":"TypeVar","contents":"f"}]]]},"sourceSpan":{"start":[17,1],"name":"src/Neon/Types/HasBind.purs","end":[26,1]}},{"children":[],"comments":"Collapses two wrappers into one.\n\n``` purescript\njoin [[1, 2], [3, 4]]\n-- [1, 2, 3, 4]\n```\n","title":"join","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["f",{"tag":"ConstrainedType","contents":[[[[["Neon","Types","HasBind"],"HasBind"],[{"tag":"TypeVar","contents":"f"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}]}]},null]},null]}},"sourceSpan":{"start":[38,1],"name":"src/Neon/Types/HasBind.purs","end":[39,1]}}]},{"moduleName":["Neon","Types","HasBottom"],"declarations":[{"children":[{"comments":null,"title":"bottom","info":{"declType":"typeClassMember","type":{"tag":"TypeVar","contents":"a"}},"sourceSpan":null},{"comments":null,"title":"booleanHasBottom","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasBottom"],"HasBottom"]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}},"sourceSpan":{"start":[28,1],"name":"src/Neon/Types/HasBottom.purs","end":[31,1]}},{"comments":null,"title":"charHasBottom","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasBottom"],"HasBottom"]},{"tag":"TypeConstructor","contents":[["Prim"],"Char"]}]}},"sourceSpan":{"start":[31,1],"name":"src/Neon/Types/HasBottom.purs","end":[34,1]}},{"comments":null,"title":"functionHasBottom","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasBottom"],"HasBottom"],[{"tag":"TypeVar","contents":"b"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasBottom"],"HasBottom"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}},"sourceSpan":{"start":[34,1],"name":"src/Neon/Types/HasBottom.purs","end":[37,1]}},{"comments":null,"title":"intHasBottom","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasBottom"],"HasBottom"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}},"sourceSpan":{"start":[37,1],"name":"src/Neon/Types/HasBottom.purs","end":[40,1]}},{"comments":null,"title":"numberHasBottom","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasBottom"],"HasBottom"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]}},"sourceSpan":{"start":[40,1],"name":"src/Neon/Types/HasBottom.purs","end":[43,1]}},{"comments":null,"title":"orderingHasBottom","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasBottom"],"HasBottom"]},{"tag":"TypeConstructor","contents":[["Neon","Values","Ordering"],"Ordering"]}]}},"sourceSpan":{"start":[43,1],"name":"src/Neon/Types/HasBottom.purs","end":[44,12]}}],"comments":"Represents types that have a lower bound.\n\nLaws:\n- `bottom <= x`\n","title":"HasBottom","fixity":null,"info":{"arguments":[["a",null]],"declType":"typeClass","superclasses":[[[["Neon","Types","HasCompare"],"HasCompare"],[{"tag":"TypeVar","contents":"a"}]]]},"sourceSpan":{"start":[19,1],"name":"src/Neon/Types/HasBottom.purs","end":[28,1]}}]},{"moduleName":["Neon","Types","HasCompare"],"declarations":[{"children":[{"comments":null,"title":"compare","info":{"declType":"typeClassMember","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeConstructor","contents":[["Neon","Values","Ordering"],"Ordering"]}]}]}},"sourceSpan":null},{"comments":null,"title":"arrayHasCompare","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasCompare"],"HasCompare"],[{"tag":"TypeVar","contents":"a"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasCompare"],"HasCompare"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[45,1],"name":"src/Neon/Types/HasCompare.purs","end":[48,1]}},{"comments":null,"title":"booleanHasCompare","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasCompare"],"HasCompare"]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}},"sourceSpan":{"start":[48,1],"name":"src/Neon/Types/HasCompare.purs","end":[55,1]}},{"comments":null,"title":"charHasCompare","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasCompare"],"HasCompare"]},{"tag":"TypeConstructor","contents":[["Prim"],"Char"]}]}},"sourceSpan":{"start":[55,1],"name":"src/Neon/Types/HasCompare.purs","end":[58,1]}},{"comments":null,"title":"functionHasCompare","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasCompare"],"HasCompare"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}},"sourceSpan":{"start":[58,1],"name":"src/Neon/Types/HasCompare.purs","end":[61,1]}},{"comments":null,"title":"intHasCompare","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasCompare"],"HasCompare"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}},"sourceSpan":{"start":[61,1],"name":"src/Neon/Types/HasCompare.purs","end":[64,1]}},{"comments":null,"title":"numberHasCompare","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasCompare"],"HasCompare"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]}},"sourceSpan":{"start":[64,1],"name":"src/Neon/Types/HasCompare.purs","end":[67,1]}},{"comments":null,"title":"orderingHasCompare","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasCompare"],"HasCompare"]},{"tag":"TypeConstructor","contents":[["Neon","Values","Ordering"],"Ordering"]}]}},"sourceSpan":{"start":[67,1],"name":"src/Neon/Types/HasCompare.purs","end":[80,1]}},{"comments":null,"title":"stringHasCompare","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasCompare"],"HasCompare"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}},"sourceSpan":{"start":[80,1],"name":"src/Neon/Types/HasCompare.purs","end":[90,1]}}],"comments":"Represents types that can be compared to each other. This is also known as\na [total order](https://en.wikipedia.org/wiki/Total_order).\n\nLaws:\n- Reflexivity: `a <= a`\n- Antisymmetry: if `a <= b` and `b <= a` then `a = b`\n- Transitivity: if `a <= b` and `b <= c` then `a <= c`\n","title":"HasCompare","fixity":null,"info":{"arguments":[["a",null]],"declType":"typeClass","superclasses":[[[["Neon","Types","HasEqual"],"HasEqual"],[{"tag":"TypeVar","contents":"a"}]]]},"sourceSpan":{"start":[35,1],"name":"src/Neon/Types/HasCompare.purs","end":[45,1]}},{"children":[],"comments":"Clamps the value to the given range.\n\n``` purescript\nclamp 2 4 1\n-- 2\nclamp 2 4 3\n-- 3\nclamp 2 4 5\n-- 4\n```\n","title":"clamp","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[[[[["Neon","Types","HasCompare"],"HasCompare"],[{"tag":"TypeVar","contents":"a"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"a"}]}]}]}]},null]}},"sourceSpan":{"start":[199,1],"name":"src/Neon/Types/HasCompare.purs","end":[200,1]}},{"children":[],"comments":"Applies a function to both values and compares the results.\n\n``` purescript\ncomparing (/ 2) 4 5\n-- EqualTo\n```\n","title":"comparing","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[[[[["Neon","Types","HasCompare"],"HasCompare"],[{"tag":"TypeVar","contents":"a"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeVar","contents":"a"}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeConstructor","contents":[["Neon","Values","Ordering"],"Ordering"]}]}]}]}]},null]},null]}},"sourceSpan":{"start":[211,1],"name":"src/Neon/Types/HasCompare.purs","end":[212,1]}},{"children":[],"comments":"Returns `true` if the first value is greater than the second value,\n`false` otherwise.\n\n``` purescript\ngt \"b\" \"a\"\n-- true\n```\n","title":"gt","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[[[[["Neon","Types","HasCompare"],"HasCompare"],[{"tag":"TypeVar","contents":"a"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}]}]},null]}},"sourceSpan":{"start":[156,1],"name":"src/Neon/Types/HasCompare.purs","end":[157,1]}},{"children":[],"comments":"Returns `true` if the first value is greater than or equal to the second\nvalue, `false` otherwise.\n\n``` purescript\ngte \"a\" \"a\"\n-- true\n```\n","title":"gte","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[[[[["Neon","Types","HasCompare"],"HasCompare"],[{"tag":"TypeVar","contents":"a"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}]}]},null]}},"sourceSpan":{"start":[134,1],"name":"src/Neon/Types/HasCompare.purs","end":[135,1]}},{"children":[],"comments":"Returns `true` if the first value is less than the second value, `false`\notherwise.\n\n``` purescript\nlt \"a\" \"b\"\n-- true\n```\n","title":"lt","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[[[[["Neon","Types","HasCompare"],"HasCompare"],[{"tag":"TypeVar","contents":"a"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}]}]},null]}},"sourceSpan":{"start":[90,1],"name":"src/Neon/Types/HasCompare.purs","end":[91,1]}},{"children":[],"comments":"Returns `true` if the first value is less than or equal to the second\nvalue, `false` otherwise.\n\n``` purescript\nlte \"a\" \"a\"\n-- true\n```\n","title":"lte","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[[[[["Neon","Types","HasCompare"],"HasCompare"],[{"tag":"TypeVar","contents":"a"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}]}]},null]}},"sourceSpan":{"start":[112,1],"name":"src/Neon/Types/HasCompare.purs","end":[113,1]}},{"children":[],"comments":"Returns the greater of two values.\n\n``` purescript\nmax \"a\" \"b\"\n-- \"b\"\n```\n","title":"max","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[[[[["Neon","Types","HasCompare"],"HasCompare"],[{"tag":"TypeVar","contents":"a"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"a"}]}]}]},null]}},"sourceSpan":{"start":[186,1],"name":"src/Neon/Types/HasCompare.purs","end":[187,1]}},{"children":[],"comments":"Returns the lesser of two values.\n\n``` purescript\nmin \"a\" \"b\"\n-- \"a\"\n```\n","title":"min","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[[[[["Neon","Types","HasCompare"],"HasCompare"],[{"tag":"TypeVar","contents":"a"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"a"}]}]}]},null]}},"sourceSpan":{"start":[177,1],"name":"src/Neon/Types/HasCompare.purs","end":[178,1]}},{"children":[],"comments":"Alias for `lt`.\n\n``` purescript\n\"a\" < \"b\"\n-- true\n```\n","title":"(<)","fixity":{"associativity":"infixl","precedence":-1},"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[[[[["Neon","Types","HasCompare"],"HasCompare"],[{"tag":"TypeVar","contents":"a"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}]}]},null]}},"sourceSpan":{"start":[101,1],"name":"src/Neon/Types/HasCompare.purs","end":[102,1]}},{"children":[],"comments":"Alias for `lte`.\n\n``` purescript\n\"a\" < \"a\"\n-- true\n```\n","title":"(<=)","fixity":{"associativity":"infixl","precedence":-1},"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[[[[["Neon","Types","HasCompare"],"HasCompare"],[{"tag":"TypeVar","contents":"a"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}]}]},null]}},"sourceSpan":{"start":[123,1],"name":"src/Neon/Types/HasCompare.purs","end":[124,1]}},{"children":[],"comments":"Alias for `gt`.\n\n``` purescript\n\"b\" > \"a\"\n-- true\n```\n","title":"(>)","fixity":{"associativity":"infixl","precedence":-1},"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[[[[["Neon","Types","HasCompare"],"HasCompare"],[{"tag":"TypeVar","contents":"a"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}]}]},null]}},"sourceSpan":{"start":[167,1],"name":"src/Neon/Types/HasCompare.purs","end":[168,1]}},{"children":[],"comments":"Alias for `gte`.\n\n``` purescript\n \"a\" >= \"a\"\n-- true\n```\n","title":"(>=)","fixity":{"associativity":"infixl","precedence":-1},"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[[[[["Neon","Types","HasCompare"],"HasCompare"],[{"tag":"TypeVar","contents":"a"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}]}]},null]}},"sourceSpan":{"start":[145,1],"name":"src/Neon/Types/HasCompare.purs","end":[146,1]}}]},{"moduleName":["Neon","Types","HasCompose"],"declarations":[{"children":[{"comments":null,"title":"compose","info":{"declType":"typeClassMember","type":{"tag":"ForAll","contents":["c",{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeVar","contents":"c"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"c"}]}]}]},null]},null]},null]}},"sourceSpan":null},{"comments":null,"title":"functionHasCompose","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasCompose"],"HasCompose"]},{"tag":"TypeConstructor","contents":[["Prim"],"Function"]}]}},"sourceSpan":{"start":[24,1],"name":"src/Neon/Types/HasCompose.purs","end":[33,1]}}],"comments":"Represents types that have a composition morphism.\n\nLaws:\n- Associativity: `f >> (g >> h) = (f >> g) >> h`\n","title":"HasCompose","fixity":null,"info":{"arguments":[["f",null]],"declType":"typeClass","superclasses":[]},"sourceSpan":{"start":[14,1],"name":"src/Neon/Types/HasCompose.purs","end":[24,1]}},{"children":[],"comments":"`(>>)` with the arguments flipped.\n\n``` purescript\n((* 2) << (+ 2)) 3\n-- 10\n```\n","title":"(<<)","fixity":{"associativity":"infixl","precedence":-1},"info":{"declType":"value","type":{"tag":"ForAll","contents":["c",{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["f",{"tag":"ConstrainedType","contents":[[[[["Neon","Types","HasCompose"],"HasCompose"],[{"tag":"TypeVar","contents":"f"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeVar","contents":"c"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"c"}]}]}]}]},null]},null]},null]},null]}},"sourceSpan":{"start":[43,1],"name":"src/Neon/Types/HasCompose.purs","end":[44,1]}},{"children":[],"comments":"Alias for `compose`.\n\n``` purescript\n((+ 2) >> (* 2)) 3\n-- 10\n```\n","title":"(>>)","fixity":{"associativity":"infixl","precedence":-1},"info":{"declType":"value","type":{"tag":"ForAll","contents":["c",{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["f",{"tag":"ConstrainedType","contents":[[[[["Neon","Types","HasCompose"],"HasCompose"],[{"tag":"TypeVar","contents":"f"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeVar","contents":"c"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"c"}]}]}]}]},null]},null]},null]},null]}},"sourceSpan":{"start":[33,1],"name":"src/Neon/Types/HasCompose.purs","end":[34,1]}}]},{"moduleName":["Neon","Types","HasDivide"],"declarations":[{"children":[{"comments":null,"title":"divide","info":{"declType":"typeClassMember","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":null},{"comments":null,"title":"modulo","info":{"declType":"typeClassMember","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":null},{"comments":null,"title":"functionHasDivide","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasDivide"],"HasDivide"],[{"tag":"TypeVar","contents":"b"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasDivide"],"HasDivide"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}},"sourceSpan":{"start":[38,1],"name":"src/Neon/Types/HasDivide.purs","end":[42,1]}},{"comments":null,"title":"intHasDivide","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasDivide"],"HasDivide"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}},"sourceSpan":{"start":[42,1],"name":"src/Neon/Types/HasDivide.purs","end":[46,1]}},{"comments":null,"title":"numberHasDivide","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasDivide"],"HasDivide"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]}},"sourceSpan":{"start":[46,1],"name":"src/Neon/Types/HasDivide.purs","end":[56,1]}}],"comments":"Represents types that are divisible.\n\nLaws:\n- Remainder: `(x / y) * y + (x % y) = x`\n- Identity: `x / one = x`\n","title":"HasDivide","fixity":null,"info":{"arguments":[["a",null]],"declType":"typeClass","superclasses":[[[["Neon","Types","HasOne"],"HasOne"],[{"tag":"TypeVar","contents":"a"}]]]},"sourceSpan":{"start":[21,1],"name":"src/Neon/Types/HasDivide.purs","end":[38,1]}},{"children":[],"comments":"Returns the multiplicative inverse.\n\n``` purescript\nreciprocal 2\n-- 0.5\n```\n","title":"reciprocal","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[[[[["Neon","Types","HasDivide"],"HasDivide"],[{"tag":"TypeVar","contents":"a"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"a"}]}]},null]}},"sourceSpan":{"start":[76,1],"name":"src/Neon/Types/HasDivide.purs","end":[77,1]}},{"children":[],"comments":"Alias for `modulo`.\n\n``` purescript\n5 % 2\n-- 1\n```\n","title":"(%)","fixity":{"associativity":"infixl","precedence":-1},"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[[[[["Neon","Types","HasDivide"],"HasDivide"],[{"tag":"TypeVar","contents":"a"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"a"}]}]}]},null]}},"sourceSpan":{"start":[66,1],"name":"src/Neon/Types/HasDivide.purs","end":[67,1]}},{"children":[],"comments":"Alias for `divide`.\n\n``` purescript\n5 / 2\n-- 2\n```\n","title":"(/)","fixity":{"associativity":"infixl","precedence":-1},"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[[[[["Neon","Types","HasDivide"],"HasDivide"],[{"tag":"TypeVar","contents":"a"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"a"}]}]}]},null]}},"sourceSpan":{"start":[56,1],"name":"src/Neon/Types/HasDivide.purs","end":[57,1]}}]},{"moduleName":["Neon","Types","HasEmpty"],"declarations":[{"children":[{"comments":null,"title":"empty","info":{"declType":"typeClassMember","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]},null]}},"sourceSpan":null},{"comments":null,"title":"arrayHasEmpty","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasEmpty"],"HasEmpty"]},{"tag":"TypeConstructor","contents":[["Prim"],"Array"]}]}},"sourceSpan":{"start":[27,1],"name":"src/Neon/Types/HasEmpty.purs","end":[39,1]}}],"comments":"Represents types that can be empty. This is like `HasZero` but for types\nof kind `* -> *` instead of `*`.\n\nLaws:\n- Left identity: `alternative empty x == x`\n- Right identity: `alternative x empty == x`\n- Annihilation: `map f empty == empty`\n","title":"HasEmpty","fixity":null,"info":{"arguments":[["f",null]],"declType":"typeClass","superclasses":[[[["Neon","Types","HasAlternative"],"HasAlternative"],[{"tag":"TypeVar","contents":"f"}]]]},"sourceSpan":{"start":[18,1],"name":"src/Neon/Types/HasEmpty.purs","end":[27,1]}},{"children":[],"comments":"If the condition is `false`, returns `empty`. Otherwise returns\n`pure unit`. This is useful for stopping some action part-way through.\n\n``` purescript\nguard false\n-- []\nguard true\n-- [unit]\n```\n","title":"guard","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["f",{"tag":"ConstrainedType","contents":[[[[["Neon","Types","HasEmpty"],"HasEmpty"],[{"tag":"TypeVar","contents":"f"}]],[[["Neon","Types","HasPure"],"HasPure"],[{"tag":"TypeVar","contents":"f"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeConstructor","contents":[["Neon","Values","Unit"],"Unit"]}]}]}]},null]}},"sourceSpan":{"start":[39,1],"name":"src/Neon/Types/HasEmpty.purs","end":[40,1]}}]},{"moduleName":["Neon","Types","HasEqual"],"declarations":[{"children":[{"comments":null,"title":"equal","info":{"declType":"typeClassMember","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}]}},"sourceSpan":null},{"comments":null,"title":"arrayHasEqual","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasEqual"],"HasEqual"],[{"tag":"TypeVar","contents":"a"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasEqual"],"HasEqual"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[30,1],"name":"src/Neon/Types/HasEqual.purs","end":[33,1]}},{"comments":null,"title":"booleanHasEqual","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasEqual"],"HasEqual"]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}},"sourceSpan":{"start":[33,1],"name":"src/Neon/Types/HasEqual.purs","end":[36,1]}},{"comments":null,"title":"charHasEqual","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasEqual"],"HasEqual"]},{"tag":"TypeConstructor","contents":[["Prim"],"Char"]}]}},"sourceSpan":{"start":[36,1],"name":"src/Neon/Types/HasEqual.purs","end":[39,1]}},{"comments":null,"title":"functionHasEqual","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasEqual"],"HasEqual"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}},"sourceSpan":{"start":[39,1],"name":"src/Neon/Types/HasEqual.purs","end":[42,1]}},{"comments":null,"title":"intHasEqual","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasEqual"],"HasEqual"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}},"sourceSpan":{"start":[42,1],"name":"src/Neon/Types/HasEqual.purs","end":[45,1]}},{"comments":null,"title":"numberHasEqual","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasEqual"],"HasEqual"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]}},"sourceSpan":{"start":[45,1],"name":"src/Neon/Types/HasEqual.purs","end":[48,1]}},{"comments":null,"title":"stringHasEqual","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasEqual"],"HasEqual"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}},"sourceSpan":{"start":[48,1],"name":"src/Neon/Types/HasEqual.purs","end":[57,1]}}],"comments":"Represents types that can be equal to each other.\n\nLaws:\n- Reflexivity: `x == x = true`\n- Symmetry: `x == y = y == x`\n- Transitivity: `x == y` and `y == z` implies `x == z`\n","title":"HasEqual","fixity":null,"info":{"arguments":[["a",null]],"declType":"typeClass","superclasses":[]},"sourceSpan":{"start":[21,1],"name":"src/Neon/Types/HasEqual.purs","end":[30,1]}},{"children":[],"comments":"Alias for `equal`.\n\n``` purescript\n\"a\" == \"a\"\n-- true\n```\n","title":"(==)","fixity":{"associativity":"infixl","precedence":-1},"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[[[[["Neon","Types","HasEqual"],"HasEqual"],[{"tag":"TypeVar","contents":"a"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}]}]},null]}},"sourceSpan":{"start":[57,1],"name":"src/Neon/Types/HasEqual.purs","end":[58,1]}}]},{"moduleName":["Neon","Types","HasFold"],"declarations":[{"children":[{"comments":null,"title":"foldl","info":{"declType":"typeClassMember","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeVar","contents":"b"}]}]}]},null]},null]}},"sourceSpan":null},{"comments":null,"title":"foldr","info":{"declType":"typeClassMember","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeVar","contents":"b"}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeVar","contents":"b"}]}]}]},null]},null]}},"sourceSpan":null},{"comments":null,"title":"arrayHasFold","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasFold"],"HasFold"]},{"tag":"TypeConstructor","contents":[["Prim"],"Array"]}]}},"sourceSpan":{"start":[45,1],"name":"src/Neon/Types/HasFold.purs","end":[56,1]}}],"comments":"Represents types that can be reduced to a single value. This is also known\nas a [fold](https://en.wikipedia.org/wiki/Fold_(higher-order_function)).\n","title":"HasFold","fixity":null,"info":{"arguments":[["f",null]],"declType":"typeClass","superclasses":[]},"sourceSpan":{"start":[28,1],"name":"src/Neon/Types/HasFold.purs","end":[45,1]}},{"children":[],"comments":"Returns `true` if the container contains the given value, `false`\notherwise.\n\n``` purescript\ncontains 1 [0, 1]\n-- true\ncontains 2 [0, 1]\n-- false\n```\n","title":"contains","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["f",{"tag":"ConstrainedType","contents":[[[[["Neon","Types","HasFold"],"HasFold"],[{"tag":"TypeVar","contents":"f"}]],[[["Neon","Types","HasEqual"],"HasEqual"],[{"tag":"TypeVar","contents":"a"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}]}]},null]},null]}},"sourceSpan":{"start":[111,1],"name":"src/Neon/Types/HasFold.purs","end":[112,1]}},{"children":[],"comments":"Reduces the container into a value that supports addition and has an\nadditive identity (that is, a monoid).\n\n``` purescript\nfold [\"ne\", \"on\"]\n-- \"neon\"\n```\n","title":"fold","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["m",{"tag":"ForAll","contents":["f",{"tag":"ConstrainedType","contents":[[[[["Neon","Types","HasFold"],"HasFold"],[{"tag":"TypeVar","contents":"f"}]],[[["Neon","Types","HasZero"],"HasZero"],[{"tag":"TypeVar","contents":"m"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"m"}]}]},{"tag":"TypeVar","contents":"m"}]}]},null]},null]}},"sourceSpan":{"start":[56,1],"name":"src/Neon/Types/HasFold.purs","end":[57,1]}},{"children":[],"comments":"Maps the function over the values in the container and then reduces the\ncontainer into a value that supports addition and has an additive identity\n(that is, a monoid).\n\n``` purescript\nfoldMap (+ \"!\") [\"ne\", \"on\"]\n-- \"ne!on!\"\n```\n","title":"foldMap","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["m",{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["f",{"tag":"ConstrainedType","contents":[[[[["Neon","Types","HasFold"],"HasFold"],[{"tag":"TypeVar","contents":"f"}]],[[["Neon","Types","HasZero"],"HasZero"],[{"tag":"TypeVar","contents":"m"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"m"}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeVar","contents":"m"}]}]}]},null]},null]},null]}},"sourceSpan":{"start":[67,1],"name":"src/Neon/Types/HasFold.purs","end":[68,1]}},{"children":[],"comments":"Returns `true` if the length of the container is 0, `false` otherwise.\n\n``` purescript\nisBlank []\n-- true\nisBlank [1, 2, 3]\n-- false\n```\n","title":"isBlank","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["f",{"tag":"ConstrainedType","contents":[[[[["Neon","Types","HasFold"],"HasFold"],[{"tag":"TypeVar","contents":"f"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}]},null]},null]}},"sourceSpan":{"start":[99,1],"name":"src/Neon/Types/HasFold.purs","end":[100,1]}},{"children":[],"comments":"Returns `true` if the length of the container is greater than 0,\n`false` otherwise.\n\n``` purescript\nisPresent []\n-- false\nisPresent [1, 2, 3]\n-- true\n```\n","title":"isPresent","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["f",{"tag":"ConstrainedType","contents":[[[[["Neon","Types","HasFold"],"HasFold"],[{"tag":"TypeVar","contents":"f"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}]},null]},null]}},"sourceSpan":{"start":[88,1],"name":"src/Neon/Types/HasFold.purs","end":[89,1]}},{"children":[],"comments":"Returns the length of the container.\n\n``` purescript\nlength [1, 2, 3]\n-- 3\n```\n","title":"length","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["f",{"tag":"ConstrainedType","contents":[[[[["Neon","Types","HasFold"],"HasFold"],[{"tag":"TypeVar","contents":"f"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}]},null]},null]}},"sourceSpan":{"start":[76,1],"name":"src/Neon/Types/HasFold.purs","end":[77,1]}},{"children":[],"comments":"Returns the product of all the values in the container.\n\n``` purescript\nproduct [3, 4, 5]\n-- 60\n```\n","title":"product","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["f",{"tag":"ConstrainedType","contents":[[[[["Neon","Types","HasFold"],"HasFold"],[{"tag":"TypeVar","contents":"f"}]],[[["Neon","Types","HasOne"],"HasOne"],[{"tag":"TypeVar","contents":"a"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeVar","contents":"a"}]}]},null]},null]}},"sourceSpan":{"start":[129,1],"name":"src/Neon/Types/HasFold.purs","end":[130,1]}},{"children":[],"comments":"Returns the sum of all the values in the container.\n\n``` purescript\nsum [3, 4, 5]\n-- 12\n```\n","title":"sum","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["f",{"tag":"ConstrainedType","contents":[[[[["Neon","Types","HasFold"],"HasFold"],[{"tag":"TypeVar","contents":"f"}]],[[["Neon","Types","HasZero"],"HasZero"],[{"tag":"TypeVar","contents":"a"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeVar","contents":"a"}]}]},null]},null]}},"sourceSpan":{"start":[120,1],"name":"src/Neon/Types/HasFold.purs","end":[121,1]}}]},{"moduleName":["Neon","Types","HasFromArray"],"declarations":[{"children":[{"comments":null,"title":"fromArray","info":{"declType":"typeClassMember","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeVar","contents":"b"}]}},"sourceSpan":null},{"comments":null,"title":"stringHasFromArray","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasFromArray"],"HasFromArray"]},{"tag":"TypeConstructor","contents":[["Prim"],"Char"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}},"sourceSpan":{"start":[11,1],"name":"src/Neon/Types/HasFromArray.purs","end":[12,40]}}],"comments":null,"title":"HasFromArray","fixity":null,"info":{"arguments":[["a",null],["b",null]],"declType":"typeClass","superclasses":[]},"sourceSpan":{"start":[8,1],"name":"src/Neon/Types/HasFromArray.purs","end":[11,1]}}]},{"moduleName":["Neon","Types","HasIdentity"],"declarations":[{"children":[{"comments":null,"title":"identity","info":{"declType":"typeClassMember","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"a"}]},null]}},"sourceSpan":null},{"comments":null,"title":"functionHasIdentity","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasIdentity"],"HasIdentity"]},{"tag":"TypeConstructor","contents":[["Prim"],"Function"]}]}},"sourceSpan":{"start":[23,1],"name":"src/Neon/Types/HasIdentity.purs","end":[24,21]}}],"comments":"Represents types that have an identity morphism. This is also known as a\n[category](https://en.wikipedia.org/wiki/Category_(mathematics)).\n\nLaws:\n- Identity: `f >> identity = identity >> f = f`\n","title":"HasIdentity","fixity":null,"info":{"arguments":[["f",null]],"declType":"typeClass","superclasses":[[[["Neon","Types","HasCompose"],"HasCompose"],[{"tag":"TypeVar","contents":"f"}]]]},"sourceSpan":{"start":[13,1],"name":"src/Neon/Types/HasIdentity.purs","end":[23,1]}}]},{"moduleName":["Neon","Types","HasLift"],"declarations":[{"children":[{"comments":null,"title":"lift","info":{"declType":"typeClassMember","type":{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["m",{"tag":"ConstrainedType","contents":[[[[["Neon","Types","HasBind"],"HasBind"],[{"tag":"TypeVar","contents":"m"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"m"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"t"},{"tag":"TypeVar","contents":"m"}]},{"tag":"TypeVar","contents":"a"}]}]}]},null]},null]}},"sourceSpan":null}],"comments":"Represents types that support being lifted into a stack of\n[monad transformers](https://en.wikipedia.org/wiki/Monad_transformer).\n\nLaws:\n- `lift (pure x) = pure x`\n- `lift (bind m (\\ x -> y)) = bind (lift m) (\\ x -> lift y)`\n","title":"HasLift","fixity":null,"info":{"arguments":[["t",null]],"declType":"typeClass","superclasses":[]},"sourceSpan":{"start":[14,1],"name":"src/Neon/Types/HasLift.purs","end":[21,49]}}]},{"moduleName":["Neon","Types","HasLogarithm"],"declarations":[{"children":[{"comments":null,"title":"logarithm","info":{"declType":"typeClassMember","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":null},{"comments":null,"title":"intHasLogarithm","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasLogarithm"],"HasLogarithm"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}},"sourceSpan":{"start":[27,1],"name":"src/Neon/Types/HasLogarithm.purs","end":[30,1]}},{"comments":null,"title":"numberHasLogarithm","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasLogarithm"],"HasLogarithm"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]}},"sourceSpan":{"start":[30,1],"name":"src/Neon/Types/HasLogarithm.purs","end":[31,43]}}],"comments":"Represents types that support logarithms.\n\nLaws:\n- `logarithm b (x * y) = logarithm b x + logarithm b y`\n- `logarithm b (x / y) = logarithm b x - logarithm b y`\n- `logarithm b (x ^ y) = y * logarithm b x`\n","title":"HasLogarithm","fixity":null,"info":{"arguments":[["a",null]],"declType":"typeClass","superclasses":[[[["Neon","Types","HasDivide"],"HasDivide"],[{"tag":"TypeVar","contents":"a"}]],[[["Neon","Types","HasPower"],"HasPower"],[{"tag":"TypeVar","contents":"a"}]]]},"sourceSpan":{"start":[18,1],"name":"src/Neon/Types/HasLogarithm.purs","end":[27,1]}}]},{"moduleName":["Neon","Types","HasMap"],"declarations":[{"children":[{"comments":null,"title":"map","info":{"declType":"typeClassMember","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"b"}]}]}]},null]},null]}},"sourceSpan":null},{"comments":null,"title":"arrayHasMap","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasMap"],"HasMap"]},{"tag":"TypeConstructor","contents":[["Prim"],"Array"]}]}},"sourceSpan":{"start":[29,1],"name":"src/Neon/Types/HasMap.purs","end":[32,1]}},{"comments":null,"title":"functionHasMap","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasMap"],"HasMap"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[32,1],"name":"src/Neon/Types/HasMap.purs","end":[41,1]}}],"comments":"Represents types that can be mapped over. This is also know as a\n[functor](https://en.wikipedia.org/wiki/Functor).\n\nLaws:\n- Identity: `map identity = identity`\n- Composition: `map (f >> g) = map f >> map g`\n","title":"HasMap","fixity":null,"info":{"arguments":[["f",null]],"declType":"typeClass","superclasses":[]},"sourceSpan":{"start":[20,1],"name":"src/Neon/Types/HasMap.purs","end":[29,1]}},{"children":[],"comments":"`map` with the arguments flipped.\n\n``` purescript\nfor [1, 2, 3] (+ 1)\n-- [2, 3, 4]\n```\n","title":"for","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["f",{"tag":"ConstrainedType","contents":[[[[["Neon","Types","HasMap"],"HasMap"],[{"tag":"TypeVar","contents":"f"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"b"}]}]}]}]},null]},null]},null]}},"sourceSpan":{"start":[50,1],"name":"src/Neon/Types/HasMap.purs","end":[51,1]}},{"children":[],"comments":"Discards the result. This is useful for `Effect`s.\n\n``` purescript\nvoid [1, 2, 3]\n-- [unit, unit, unit]\n```\n","title":"void","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["f",{"tag":"ConstrainedType","contents":[[[[["Neon","Types","HasMap"],"HasMap"],[{"tag":"TypeVar","contents":"f"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeConstructor","contents":[["Neon","Values","Unit"],"Unit"]}]}]}]},null]},null]}},"sourceSpan":{"start":[41,1],"name":"src/Neon/Types/HasMap.purs","end":[42,1]}}]},{"moduleName":["Neon","Types","HasMultiply"],"declarations":[{"children":[{"comments":null,"title":"multiply","info":{"declType":"typeClassMember","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":null},{"comments":null,"title":"booleanHasMultiply","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasMultiply"],"HasMultiply"]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}},"sourceSpan":{"start":[29,1],"name":"src/Neon/Types/HasMultiply.purs","end":[32,1]}},{"comments":null,"title":"functionHasMultiply","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasMultiply"],"HasMultiply"],[{"tag":"TypeVar","contents":"b"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasMultiply"],"HasMultiply"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}},"sourceSpan":{"start":[32,1],"name":"src/Neon/Types/HasMultiply.purs","end":[35,1]}},{"comments":null,"title":"intHasMultiply","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasMultiply"],"HasMultiply"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}},"sourceSpan":{"start":[35,1],"name":"src/Neon/Types/HasMultiply.purs","end":[38,1]}},{"comments":null,"title":"numberHasMultiply","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasMultiply"],"HasMultiply"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]}},"sourceSpan":{"start":[38,1],"name":"src/Neon/Types/HasMultiply.purs","end":[47,1]}}],"comments":"Represents values that can be multiplied together. This is also known as\na [near-ring](https://en.wikipedia.org/wiki/Near-ring).\n\nLaws:\n- Associativity: `x * (y * z) = (x * y) * z`\n- Distributivity: `x * (y + z) = (x * y) + (x * z)`\n- Annihilation: `x * zero = zero * x = zero`\n","title":"HasMultiply","fixity":null,"info":{"arguments":[["a",null]],"declType":"typeClass","superclasses":[[[["Neon","Types","HasZero"],"HasZero"],[{"tag":"TypeVar","contents":"a"}]]]},"sourceSpan":{"start":[20,1],"name":"src/Neon/Types/HasMultiply.purs","end":[29,1]}},{"children":[],"comments":"Alias for `multiply`.\n\n``` purescript\n3 * 2\n-- 6\n```\n","title":"(*)","fixity":{"associativity":"infixl","precedence":-1},"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[[[[["Neon","Types","HasMultiply"],"HasMultiply"],[{"tag":"TypeVar","contents":"a"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"a"}]}]}]},null]}},"sourceSpan":{"start":[47,1],"name":"src/Neon/Types/HasMultiply.purs","end":[48,1]}}]},{"moduleName":["Neon","Types","HasNot"],"declarations":[{"children":[{"comments":null,"title":"not","info":{"declType":"typeClassMember","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"a"}]}},"sourceSpan":null},{"comments":null,"title":"booleanHasNot","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasNot"],"HasNot"]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}},"sourceSpan":{"start":[29,1],"name":"src/Neon/Types/HasNot.purs","end":[32,1]}},{"comments":null,"title":"functionHasNot","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasNot"],"HasNot"],[{"tag":"TypeVar","contents":"b"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasNot"],"HasNot"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}},"sourceSpan":{"start":[32,1],"name":"src/Neon/Types/HasNot.purs","end":[43,1]}}],"comments":"Represents types can be \"not\"ed. This is also know as\n[negation](https://en.wikipedia.org/wiki/Negation).\n\nLaws:\n- `not top = bottom`\n- `not bottom = top`\n","title":"HasNot","fixity":null,"info":{"arguments":[["a",null]],"declType":"typeClass","superclasses":[[[["Neon","Types","HasBottom"],"HasBottom"],[{"tag":"TypeVar","contents":"a"}]],[[["Neon","Types","HasTop"],"HasTop"],[{"tag":"TypeVar","contents":"a"}]]]},"sourceSpan":{"start":[20,1],"name":"src/Neon/Types/HasNot.purs","end":[29,1]}},{"children":[],"comments":"Tests whether a number is finite or not.\n\n``` purescript\nisInfinite infinity\n-- true\nisInfinite 1.0\n-- false\n```\n","title":"isInfinite","fixity":null,"info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}},"sourceSpan":{"start":[43,1],"name":"src/Neon/Types/HasNot.purs","end":[44,1]}},{"children":[],"comments":"Returns `true` if two values are not equal, `false` otherwise.\n\n``` purescript\nnotEqual \"a\" \"b\"\n-- true\n```\n","title":"notEqual","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[[[[["Neon","Types","HasEqual"],"HasEqual"],[{"tag":"TypeVar","contents":"a"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}]}]},null]}},"sourceSpan":{"start":[52,1],"name":"src/Neon/Types/HasNot.purs","end":[53,1]}},{"children":[],"comments":"Alias for `notEqual`.\n\n``` purescript\n\"a\" != \"b\"\n-- true\n```\n","title":"(!=)","fixity":{"associativity":"infixl","precedence":-1},"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[[[[["Neon","Types","HasEqual"],"HasEqual"],[{"tag":"TypeVar","contents":"a"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}]}]},null]}},"sourceSpan":{"start":[61,1],"name":"src/Neon/Types/HasNot.purs","end":[62,1]}}]},{"moduleName":["Neon","Types","HasOne"],"declarations":[{"children":[{"comments":null,"title":"one","info":{"declType":"typeClassMember","type":{"tag":"TypeVar","contents":"a"}},"sourceSpan":null},{"comments":null,"title":"booleanHasOne","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasOne"],"HasOne"]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}},"sourceSpan":{"start":[28,1],"name":"src/Neon/Types/HasOne.purs","end":[31,1]}},{"comments":null,"title":"functionHasOne","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasOne"],"HasOne"],[{"tag":"TypeVar","contents":"b"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasOne"],"HasOne"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}},"sourceSpan":{"start":[31,1],"name":"src/Neon/Types/HasOne.purs","end":[34,1]}},{"comments":null,"title":"intHasOne","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasOne"],"HasOne"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}},"sourceSpan":{"start":[34,1],"name":"src/Neon/Types/HasOne.purs","end":[37,1]}},{"comments":null,"title":"numberHasOne","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasOne"],"HasOne"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]}},"sourceSpan":{"start":[37,1],"name":"src/Neon/Types/HasOne.purs","end":[50,1]}}],"comments":"Represents types that have an multiplicative identity. This is also known\nas a [semiring](https://en.wikipedia.org/wiki/Semiring).\n\nLaws:\n- Identity: `one * x = x * one = x`\n","title":"HasOne","fixity":null,"info":{"arguments":[["a",null]],"declType":"typeClass","superclasses":[[[["Neon","Types","HasMultiply"],"HasMultiply"],[{"tag":"TypeVar","contents":"a"}]]]},"sourceSpan":{"start":[19,1],"name":"src/Neon/Types/HasOne.purs","end":[28,1]}},{"children":[],"comments":"Returns the sign of a value. For any value `x`, `sign x * abs x = x`.\n\n``` purescript\nsign (-2)\n-- -1\nsign 0\n-- 0\nsign 2\n-- 1\n```\n","title":"sign","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[[[[["Neon","Types","HasCompare"],"HasCompare"],[{"tag":"TypeVar","contents":"a"}]],[[["Neon","Types","HasOne"],"HasOne"],[{"tag":"TypeVar","contents":"a"}]],[[["Neon","Types","HasSubtract"],"HasSubtract"],[{"tag":"TypeVar","contents":"a"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"a"}]}]},null]}},"sourceSpan":{"start":[50,1],"name":"src/Neon/Types/HasOne.purs","end":[51,1]}}]},{"moduleName":["Neon","Types","HasOr"],"declarations":[{"children":[{"comments":null,"title":"or","info":{"declType":"typeClassMember","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":null},{"comments":null,"title":"booleanHasOr","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasOr"],"HasOr"]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}},"sourceSpan":{"start":[28,1],"name":"src/Neon/Types/HasOr.purs","end":[31,1]}},{"comments":null,"title":"functionHasOr","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasOr"],"HasOr"],[{"tag":"TypeVar","contents":"b"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasOr"],"HasOr"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}},"sourceSpan":{"start":[31,1],"name":"src/Neon/Types/HasOr.purs","end":[40,1]}}],"comments":"Represents types than can be \"or\"ed together. This is also known as a\n[logical disjunction](https://en.wikipedia.org/wiki/Logical_disjunction).\n\nLaws:\n- Associativity: `x || (y || z) = (x || y) || z`\n- Commutativity: `x || y = y || x`\n- Identity: `x || bottom = x`\n- Annihiliation: `x || top = top`\n- Idempotence: `x || x = x`\n","title":"HasOr","fixity":null,"info":{"arguments":[["a",null]],"declType":"typeClass","superclasses":[[[["Neon","Types","HasBottom"],"HasBottom"],[{"tag":"TypeVar","contents":"a"}]],[[["Neon","Types","HasTop"],"HasTop"],[{"tag":"TypeVar","contents":"a"}]]]},"sourceSpan":{"start":[19,1],"name":"src/Neon/Types/HasOr.purs","end":[28,1]}},{"children":[],"comments":"Alias for `or`.\n\n``` purescript\nfalse || true\n-- true\n```\n","title":"(||)","fixity":{"associativity":"infixl","precedence":-1},"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[[[[["Neon","Types","HasOr"],"HasOr"],[{"tag":"TypeVar","contents":"a"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"a"}]}]}]},null]}},"sourceSpan":{"start":[40,1],"name":"src/Neon/Types/HasOr.purs","end":[41,1]}}]},{"moduleName":["Neon","Types","HasPower"],"declarations":[{"children":[{"comments":null,"title":"power","info":{"declType":"typeClassMember","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":null},{"comments":null,"title":"intHasPower","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasPower"],"HasPower"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}},"sourceSpan":{"start":[28,1],"name":"src/Neon/Types/HasPower.purs","end":[31,1]}},{"comments":null,"title":"numberHasPower","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasPower"],"HasPower"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]}},"sourceSpan":{"start":[31,1],"name":"src/Neon/Types/HasPower.purs","end":[40,1]}}],"comments":"Represents types that can be exponentiated.\n\nLaws:\n- `(b ^ n) * (b ^ m) = b ^ (n + m)`\n- `(b ^ n) ^ m = b ^ (n * m)`\n- `(b * y) ^ n = (b ^ n) * (y ^ n)`\n","title":"HasPower","fixity":null,"info":{"arguments":[["a",null]],"declType":"typeClass","superclasses":[[[["Neon","Types","HasOne"],"HasOne"],[{"tag":"TypeVar","contents":"a"}]]]},"sourceSpan":{"start":[18,1],"name":"src/Neon/Types/HasPower.purs","end":[28,1]}},{"children":[],"comments":"Alias for `power`.\n\n``` purescript\n2 ^ 3\n-- 8\n```\n","title":"(^)","fixity":{"associativity":"infixl","precedence":-1},"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[[[[["Neon","Types","HasPower"],"HasPower"],[{"tag":"TypeVar","contents":"a"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"a"}]}]}]},null]}},"sourceSpan":{"start":[40,1],"name":"src/Neon/Types/HasPower.purs","end":[41,1]}}]},{"moduleName":["Neon","Types","HasPure"],"declarations":[{"children":[{"comments":null,"title":"pure","info":{"declType":"typeClassMember","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}]},null]}},"sourceSpan":null},{"comments":null,"title":"arrayHasPure","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasPure"],"HasPure"]},{"tag":"TypeConstructor","contents":[["Prim"],"Array"]}]}},"sourceSpan":{"start":[31,1],"name":"src/Neon/Types/HasPure.purs","end":[34,1]}},{"comments":null,"title":"functionHasPure","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasPure"],"HasPure"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[34,1],"name":"src/Neon/Types/HasPure.purs","end":[46,1]}}],"comments":"Represents types that allow injecting values into a container.\n\nLaws:\n- Identity: `apply (pure id) v = v`\n- Composition: `apply (apply (apply (pure <<) f) g) h = apply f (apply g h)`\n- Homomorphism: `apply (pure f) (pure x) = pure (f x)`\n- Interchange: `apply u (pure y) = apply (pure \\ f -> f y) u`\n","title":"HasPure","fixity":null,"info":{"arguments":[["f",null]],"declType":"typeClass","superclasses":[[[["Neon","Types","HasApply"],"HasApply"],[{"tag":"TypeVar","contents":"f"}]]]},"sourceSpan":{"start":[20,1],"name":"src/Neon/Types/HasPure.purs","end":[31,1]}},{"children":[],"comments":"If the condition is `false`, returns the value. Otherwise returns\n`pure unit`.\n\n``` purescript\nunless true [unit, unit]\n-- [unit]\nunless false [unit, unit]\n-- [unit, unit]\n```\n","title":"unless","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["f",{"tag":"ConstrainedType","contents":[[[[["Neon","Types","HasPure"],"HasPure"],[{"tag":"TypeVar","contents":"f"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeConstructor","contents":[["Neon","Values","Unit"],"Unit"]}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeConstructor","contents":[["Neon","Values","Unit"],"Unit"]}]}]}]}]},null]}},"sourceSpan":{"start":[58,1],"name":"src/Neon/Types/HasPure.purs","end":[59,1]}},{"children":[],"comments":"If the condition is `true`, returns the value. Otherwise returns\n`pure unit`.\n\n``` purescript\nwhen false [unit, unit]\n-- [unit]\nwhen true [unit, unit]\n-- [unit, unit]\n```\n","title":"when","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["f",{"tag":"ConstrainedType","contents":[[[[["Neon","Types","HasPure"],"HasPure"],[{"tag":"TypeVar","contents":"f"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeConstructor","contents":[["Neon","Values","Unit"],"Unit"]}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeConstructor","contents":[["Neon","Values","Unit"],"Unit"]}]}]}]}]},null]}},"sourceSpan":{"start":[46,1],"name":"src/Neon/Types/HasPure.purs","end":[47,1]}}]},{"moduleName":["Neon","Types","HasRoot"],"declarations":[{"children":[{"comments":null,"title":"root","info":{"declType":"typeClassMember","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":null},{"comments":null,"title":"intHasRoot","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasRoot"],"HasRoot"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}},"sourceSpan":{"start":[25,1],"name":"src/Neon/Types/HasRoot.purs","end":[28,1]}},{"comments":null,"title":"numberHasRoot","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasRoot"],"HasRoot"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]}},"sourceSpan":{"start":[28,1],"name":"src/Neon/Types/HasRoot.purs","end":[29,33]}}],"comments":"Represents types that support roots.\n\nLaws:\n- `root n x = x ^ (1 / n)`\n","title":"HasRoot","fixity":null,"info":{"arguments":[["a",null]],"declType":"typeClass","superclasses":[[[["Neon","Types","HasDivide"],"HasDivide"],[{"tag":"TypeVar","contents":"a"}]],[[["Neon","Types","HasPower"],"HasPower"],[{"tag":"TypeVar","contents":"a"}]]]},"sourceSpan":{"start":[16,1],"name":"src/Neon/Types/HasRoot.purs","end":[25,1]}}]},{"moduleName":["Neon","Types","HasShow"],"declarations":[{"children":[{"comments":null,"title":"show","info":{"declType":"typeClassMember","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}},"sourceSpan":null},{"comments":null,"title":"arrayHasShow","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasShow"],"HasShow"],[{"tag":"TypeVar","contents":"a"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasShow"],"HasShow"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[24,1],"name":"src/Neon/Types/HasShow.purs","end":[27,1]}},{"comments":null,"title":"booleanHasShow","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasShow"],"HasShow"]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}},"sourceSpan":{"start":[27,1],"name":"src/Neon/Types/HasShow.purs","end":[30,1]}},{"comments":null,"title":"charHasShow","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasShow"],"HasShow"]},{"tag":"TypeConstructor","contents":[["Prim"],"Char"]}]}},"sourceSpan":{"start":[30,1],"name":"src/Neon/Types/HasShow.purs","end":[33,1]}},{"comments":null,"title":"intHasShow","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasShow"],"HasShow"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}},"sourceSpan":{"start":[33,1],"name":"src/Neon/Types/HasShow.purs","end":[36,1]}},{"comments":null,"title":"numberHasShow","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasShow"],"HasShow"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]}},"sourceSpan":{"start":[36,1],"name":"src/Neon/Types/HasShow.purs","end":[39,1]}},{"comments":null,"title":"stringHasShow","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasShow"],"HasShow"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}},"sourceSpan":{"start":[39,1],"name":"src/Neon/Types/HasShow.purs","end":[40,29]}}],"comments":"Represents types that can be converting to a string.\n\nThis class does not have any laws.\n","title":"HasShow","fixity":null,"info":{"arguments":[["a",null]],"declType":"typeClass","superclasses":[]},"sourceSpan":{"start":[15,1],"name":"src/Neon/Types/HasShow.purs","end":[24,1]}}]},{"moduleName":["Neon","Types","HasState"],"declarations":[{"children":[{"comments":null,"title":"state","info":{"declType":"typeClassMember","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"s"}]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Pair"],"Pair"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"s"}]}}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"m"},{"tag":"TypeVar","contents":"a"}]}]},null]}},"sourceSpan":null}],"comments":"Represents monads that contain \"mutable\" state.\n\nLaws:\n- `do { getState ; getState } = getState`\n- `do { setState x ; setState y } = setState y`\n- `do { setState x ; getState } = map (always x) (setState x)`\n- `do { s <- getState ; setState s } = pure unit`\n","title":"HasState","fixity":null,"info":{"arguments":[["s",null],["m",null]],"declType":"typeClass","superclasses":[[[["Neon","Types","HasBind"],"HasBind"],[{"tag":"TypeVar","contents":"m"}]]]},"sourceSpan":{"start":[20,1],"name":"src/Neon/Types/HasState.purs","end":[35,1]}},{"children":[],"comments":"Gets the state.\n\n``` purescript\nrunStateT getState 1\n-- Identity (pair 1 1)\n```\n","title":"getState","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["s",{"tag":"ForAll","contents":["m",{"tag":"ConstrainedType","contents":[[[[["Neon","Types","HasState"],"HasState"],[{"tag":"TypeVar","contents":"s"},{"tag":"TypeVar","contents":"m"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"m"},{"tag":"TypeVar","contents":"s"}]}]},null]},null]}},"sourceSpan":{"start":[35,1],"name":"src/Neon/Types/HasState.purs","end":[36,1]}},{"children":[],"comments":"Sets the state.\n\n``` purescript\nrunStateT (setState 2) 1\n-- Identity (pair unit 2)\n```\n","title":"setState","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["s",{"tag":"ForAll","contents":["m",{"tag":"ConstrainedType","contents":[[[[["Neon","Types","HasState"],"HasState"],[{"tag":"TypeVar","contents":"s"},{"tag":"TypeVar","contents":"m"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"s"}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"m"},{"tag":"TypeConstructor","contents":[["Neon","Values","Unit"],"Unit"]}]}]}]},null]},null]}},"sourceSpan":{"start":[44,1],"name":"src/Neon/Types/HasState.purs","end":[45,1]}}]},{"moduleName":["Neon","Types","HasSubtract"],"declarations":[{"children":[{"comments":null,"title":"subtract","info":{"declType":"typeClassMember","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":null},{"comments":null,"title":"functionHasSubtract","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasSubtract"],"HasSubtract"],[{"tag":"TypeVar","contents":"b"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasSubtract"],"HasSubtract"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}},"sourceSpan":{"start":[28,1],"name":"src/Neon/Types/HasSubtract.purs","end":[31,1]}},{"comments":null,"title":"intHasSubtract","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasSubtract"],"HasSubtract"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}},"sourceSpan":{"start":[31,1],"name":"src/Neon/Types/HasSubtract.purs","end":[34,1]}},{"comments":null,"title":"numberHasSubtract","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasSubtract"],"HasSubtract"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]}},"sourceSpan":{"start":[34,1],"name":"src/Neon/Types/HasSubtract.purs","end":[43,1]}}],"comments":"Represents types that can be subtracted from each other.\n\nLaws:\n- Inverse: `a - a = a + (zero - a) = zero`\n","title":"HasSubtract","fixity":null,"info":{"arguments":[["a",null]],"declType":"typeClass","superclasses":[[[["Neon","Types","HasZero"],"HasZero"],[{"tag":"TypeVar","contents":"a"}]]]},"sourceSpan":{"start":[19,1],"name":"src/Neon/Types/HasSubtract.purs","end":[28,1]}},{"children":[],"comments":"Returns the absolute value of a value. If the value is negative, this\nreturns it negated. Otherwise it returns the value.\n\n``` purescript\nabs 1\n-- 1\nabs (-1)\n-- 1\n```\n","title":"abs","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[[[[["Neon","Types","HasCompare"],"HasCompare"],[{"tag":"TypeVar","contents":"a"}]],[[["Neon","Types","HasSubtract"],"HasSubtract"],[{"tag":"TypeVar","contents":"a"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"a"}]}]},null]}},"sourceSpan":{"start":[65,1],"name":"src/Neon/Types/HasSubtract.purs","end":[66,1]}},{"children":[],"comments":"Negates a value. This is the same as subtracting the value from zero.\n\n``` purescript\nnegate 1\n-- -1\n```\n","title":"negate","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[[[[["Neon","Types","HasSubtract"],"HasSubtract"],[{"tag":"TypeVar","contents":"a"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"a"}]}]},null]}},"sourceSpan":{"start":[53,1],"name":"src/Neon/Types/HasSubtract.purs","end":[54,1]}},{"children":[],"comments":"Alias for `subtract`.\n\n``` purescript\n3 - 2\n-- 1\n```\n","title":"(-)","fixity":{"associativity":"infixl","precedence":-1},"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[[[[["Neon","Types","HasSubtract"],"HasSubtract"],[{"tag":"TypeVar","contents":"a"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"a"}]}]}]},null]}},"sourceSpan":{"start":[43,1],"name":"src/Neon/Types/HasSubtract.purs","end":[44,1]}}]},{"moduleName":["Neon","Types","HasToArray"],"declarations":[{"children":[{"comments":null,"title":"toArray","info":{"declType":"typeClassMember","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"b"}]}]}},"sourceSpan":null},{"comments":null,"title":"stringHasToArray","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasToArray"],"HasToArray"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Char"]}]}},"sourceSpan":{"start":[11,1],"name":"src/Neon/Types/HasToArray.purs","end":[12,35]}}],"comments":null,"title":"HasToArray","fixity":null,"info":{"arguments":[["a",null],["b",null]],"declType":"typeClass","superclasses":[]},"sourceSpan":{"start":[8,1],"name":"src/Neon/Types/HasToArray.purs","end":[11,1]}}]},{"moduleName":["Neon","Types","HasTop"],"declarations":[{"children":[{"comments":null,"title":"top","info":{"declType":"typeClassMember","type":{"tag":"TypeVar","contents":"a"}},"sourceSpan":null},{"comments":null,"title":"booleanHasTop","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasTop"],"HasTop"]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}},"sourceSpan":{"start":[27,1],"name":"src/Neon/Types/HasTop.purs","end":[30,1]}},{"comments":null,"title":"charHasTop","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasTop"],"HasTop"]},{"tag":"TypeConstructor","contents":[["Prim"],"Char"]}]}},"sourceSpan":{"start":[30,1],"name":"src/Neon/Types/HasTop.purs","end":[33,1]}},{"comments":null,"title":"functionHasTop","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasTop"],"HasTop"],[{"tag":"TypeVar","contents":"b"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasTop"],"HasTop"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}},"sourceSpan":{"start":[33,1],"name":"src/Neon/Types/HasTop.purs","end":[36,1]}},{"comments":null,"title":"intHasTop","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasTop"],"HasTop"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}},"sourceSpan":{"start":[36,1],"name":"src/Neon/Types/HasTop.purs","end":[39,1]}},{"comments":null,"title":"numberHasTop","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasTop"],"HasTop"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]}},"sourceSpan":{"start":[39,1],"name":"src/Neon/Types/HasTop.purs","end":[42,1]}},{"comments":null,"title":"orderingHasTop","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasTop"],"HasTop"]},{"tag":"TypeConstructor","contents":[["Neon","Values","Ordering"],"Ordering"]}]}},"sourceSpan":{"start":[42,1],"name":"src/Neon/Types/HasTop.purs","end":[43,9]}}],"comments":"Represents types that have an upper bound.\n\nLaws:\n- `top >= x`\n","title":"HasTop","fixity":null,"info":{"arguments":[["a",null]],"declType":"typeClass","superclasses":[[[["Neon","Types","HasCompare"],"HasCompare"],[{"tag":"TypeVar","contents":"a"}]]]},"sourceSpan":{"start":[18,1],"name":"src/Neon/Types/HasTop.purs","end":[27,1]}}]},{"moduleName":["Neon","Types","HasTraverse"],"declarations":[{"children":[{"comments":null,"title":"traverse","info":{"declType":"typeClassMember","type":{"tag":"ForAll","contents":["m",{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[[[[["Neon","Types","HasPure"],"HasPure"],[{"tag":"TypeVar","contents":"m"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"m"},{"tag":"TypeVar","contents":"b"}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"t"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"m"},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"t"},{"tag":"TypeVar","contents":"b"}]}}]}]}]}]},null]},null]},null]}},"sourceSpan":null},{"comments":null,"title":"arrayHasTraverse","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasTraverse"],"HasTraverse"]},{"tag":"TypeConstructor","contents":[["Prim"],"Array"]}]}},"sourceSpan":{"start":[35,1],"name":"src/Neon/Types/HasTraverse.purs","end":[38,1]}},{"comments":null,"title":"listHasTraverse","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasTraverse"],"HasTraverse"]},{"tag":"TypeConstructor","contents":[["Neon","Values","List"],"List"]}]}},"sourceSpan":{"start":[38,1],"name":"src/Neon/Types/HasTraverse.purs","end":[43,1]}},{"comments":null,"title":"maybeHasTraverse","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasTraverse"],"HasTraverse"]},{"tag":"TypeConstructor","contents":[["Neon","Values","Maybe"],"Maybe"]}]}},"sourceSpan":{"start":[43,1],"name":"src/Neon/Types/HasTraverse.purs","end":[54,1]}}],"comments":"Represents data structures that can be traversed from left to right.\nUnlike `HasFold`, these structures can be traversed while keeping their\nshape.\n\nLaws:\n- Naturality: `t >> traverse f = traverse (t >> f)`\n- Identity: `traverse Identity = Identity`\n- Composition: TODO\n","title":"HasTraverse","fixity":null,"info":{"arguments":[["t",null]],"declType":"typeClass","superclasses":[[[["Neon","Types","HasFold"],"HasFold"],[{"tag":"TypeVar","contents":"t"}]],[[["Neon","Types","HasMap"],"HasMap"],[{"tag":"TypeVar","contents":"t"}]]]},"sourceSpan":{"start":[25,1],"name":"src/Neon/Types/HasTraverse.purs","end":[35,1]}},{"children":[],"comments":"Evaluates actions from left to right and collects the results.\n\n``` purescript\nsequence [Just 1, Just 2]\n-- Just [1, 2]\n```\n","title":"sequence","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["m",{"tag":"ForAll","contents":["t",{"tag":"ConstrainedType","contents":[[[[["Neon","Types","HasPure"],"HasPure"],[{"tag":"TypeVar","contents":"m"}]],[[["Neon","Types","HasTraverse"],"HasTraverse"],[{"tag":"TypeVar","contents":"t"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"t"},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"m"},{"tag":"TypeVar","contents":"a"}]}}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"m"},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"t"},{"tag":"TypeVar","contents":"a"}]}}]}]}]},null]},null]},null]}},"sourceSpan":{"start":[54,1],"name":"src/Neon/Types/HasTraverse.purs","end":[55,1]}}]},{"moduleName":["Neon","Types","HasZero"],"declarations":[{"children":[{"comments":null,"title":"zero","info":{"declType":"typeClassMember","type":{"tag":"TypeVar","contents":"a"}},"sourceSpan":null},{"comments":null,"title":"arrayHasZero","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasZero"],"HasZero"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[23,1],"name":"src/Neon/Types/HasZero.purs","end":[26,1]}},{"comments":null,"title":"booleanHasZero","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasZero"],"HasZero"]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}},"sourceSpan":{"start":[26,1],"name":"src/Neon/Types/HasZero.purs","end":[29,1]}},{"comments":null,"title":"functionHasZero","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasZero"],"HasZero"],[{"tag":"TypeVar","contents":"b"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasZero"],"HasZero"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}},"sourceSpan":{"start":[29,1],"name":"src/Neon/Types/HasZero.purs","end":[32,1]}},{"comments":null,"title":"intHasZero","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasZero"],"HasZero"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}},"sourceSpan":{"start":[32,1],"name":"src/Neon/Types/HasZero.purs","end":[35,1]}},{"comments":null,"title":"numberHasZero","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasZero"],"HasZero"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]}},"sourceSpan":{"start":[35,1],"name":"src/Neon/Types/HasZero.purs","end":[38,1]}},{"comments":null,"title":"stringHasZero","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasZero"],"HasZero"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}},"sourceSpan":{"start":[38,1],"name":"src/Neon/Types/HasZero.purs","end":[39,10]}}],"comments":"Represents types that have an additive identity. This is also known as a\n[monoid](https://en.wikipedia.org/wiki/Monoid).\n\nLaws:\n- Identity: `zero + x = x + zero = x`\n","title":"HasZero","fixity":null,"info":{"arguments":[["a",null]],"declType":"typeClass","superclasses":[[[["Neon","Types","HasAdd"],"HasAdd"],[{"tag":"TypeVar","contents":"a"}]]]},"sourceSpan":{"start":[14,1],"name":"src/Neon/Types/HasZero.purs","end":[23,1]}}]},{"moduleName":["Neon","Types","IsEnumerable"],"declarations":[{"children":[{"comments":null,"title":"fromEnum","info":{"declType":"typeClassMember","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}},"sourceSpan":null},{"comments":null,"title":"toEnum","info":{"declType":"typeClassMember","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Maybe"],"Maybe"]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":null},{"comments":null,"title":"succ","info":{"declType":"typeClassMember","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Maybe"],"Maybe"]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":null},{"comments":null,"title":"pred","info":{"declType":"typeClassMember","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Maybe"],"Maybe"]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":null},{"comments":null,"title":"booleanIsEnumerable","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","IsEnumerable"],"IsEnumerable"]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}},"sourceSpan":{"start":[72,1],"name":"src/Neon/Types/IsEnumerable.purs","end":[87,1]}},{"comments":null,"title":"charIsEnumerable","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","IsEnumerable"],"IsEnumerable"]},{"tag":"TypeConstructor","contents":[["Prim"],"Char"]}]}},"sourceSpan":{"start":[87,1],"name":"src/Neon/Types/IsEnumerable.purs","end":[95,1]}},{"comments":null,"title":"intIsEnumerable","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","IsEnumerable"],"IsEnumerable"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}},"sourceSpan":{"start":[95,1],"name":"src/Neon/Types/IsEnumerable.purs","end":[101,1]}},{"comments":null,"title":"maybeIsEnumerable","info":{"declType":"instance","dependencies":[[[["Neon","Types","IsEnumerable"],"IsEnumerable"],[{"tag":"TypeVar","contents":"a"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","IsEnumerable"],"IsEnumerable"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Maybe"],"Maybe"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[101,1],"name":"src/Neon/Types/IsEnumerable.purs","end":[119,1]}},{"comments":null,"title":"orderingIsEnumerable","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","IsEnumerable"],"IsEnumerable"]},{"tag":"TypeConstructor","contents":[["Neon","Values","Ordering"],"Ordering"]}]}},"sourceSpan":{"start":[119,1],"name":"src/Neon/Types/IsEnumerable.purs","end":[138,1]}},{"comments":null,"title":"unitIsEnumerable","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","IsEnumerable"],"IsEnumerable"]},{"tag":"TypeConstructor","contents":[["Neon","Values","Unit"],"Unit"]}]}},"sourceSpan":{"start":[138,1],"name":"src/Neon/Types/IsEnumerable.purs","end":[150,1]}}],"comments":"Represents types that can be converted to and from integers.\n\nLaws:\n- `pred bottom = Nothing`\n- `succ top = Nothing`\n- `toEnum (fromEnum x) = Just x`\n- `compare x y = compare (fromEnum x) (fromEnum y)`\n","title":"IsEnumerable","fixity":null,"info":{"arguments":[["a",null]],"declType":"typeClass","superclasses":[[[["Neon","Types","HasBottom"],"HasBottom"],[{"tag":"TypeVar","contents":"a"}]],[[["Neon","Types","HasTop"],"HasTop"],[{"tag":"TypeVar","contents":"a"}]]]},"sourceSpan":{"start":[31,1],"name":"src/Neon/Types/IsEnumerable.purs","end":[72,1]}},{"children":[],"comments":"Returns a range of values.\n\n``` purescript\nrange 1 4\n-- [1, 2, 3, 4]\n```\n","title":"range","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[[[[["Neon","Types","IsEnumerable"],"IsEnumerable"],[{"tag":"TypeVar","contents":"a"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]}]}]}]},null]}},"sourceSpan":{"start":[150,1],"name":"src/Neon/Types/IsEnumerable.purs","end":[151,1]}}]}],"name":"Neon.Types","comments":null,"declarations":[]},{"reExports":[],"name":"Neon.Types.HasAdd","comments":null,"declarations":[{"children":[{"comments":null,"title":"add","info":{"declType":"typeClassMember","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":null},{"comments":null,"title":"arrayHasAdd","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasAdd"],"HasAdd"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[27,1],"name":"src/Neon/Types/HasAdd.purs","end":[30,1]}},{"comments":null,"title":"booleanHasAdd","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasAdd"],"HasAdd"]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}},"sourceSpan":{"start":[30,1],"name":"src/Neon/Types/HasAdd.purs","end":[33,1]}},{"comments":null,"title":"functionHasAdd","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasAdd"],"HasAdd"],[{"tag":"TypeVar","contents":"b"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasAdd"],"HasAdd"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}},"sourceSpan":{"start":[33,1],"name":"src/Neon/Types/HasAdd.purs","end":[36,1]}},{"comments":null,"title":"intHasAdd","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasAdd"],"HasAdd"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}},"sourceSpan":{"start":[36,1],"name":"src/Neon/Types/HasAdd.purs","end":[39,1]}},{"comments":null,"title":"numberHasAdd","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasAdd"],"HasAdd"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]}},"sourceSpan":{"start":[39,1],"name":"src/Neon/Types/HasAdd.purs","end":[42,1]}},{"comments":null,"title":"stringHasAdd","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasAdd"],"HasAdd"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}},"sourceSpan":{"start":[42,1],"name":"src/Neon/Types/HasAdd.purs","end":[51,1]}}],"comments":"Represents types that can be added together. This is also known as a\n[semigroup](https://en.wikipedia.org/wiki/Semigroup).\n\nLaws:\n- Associativity: `x + (y + z) = (x + y) + z`\n","title":"HasAdd","fixity":null,"info":{"arguments":[["a",null]],"declType":"typeClass","superclasses":[]},"sourceSpan":{"start":[18,1],"name":"src/Neon/Types/HasAdd.purs","end":[27,1]}},{"children":[],"comments":"Alias for `add`.\n\n``` purescript\n\"a\" + \"b\"\n-- \"ab\"\n```\n","title":"(+)","fixity":{"associativity":"infixl","precedence":-1},"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[[[[["Neon","Types","HasAdd"],"HasAdd"],[{"tag":"TypeVar","contents":"a"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"a"}]}]}]},null]}},"sourceSpan":{"start":[51,1],"name":"src/Neon/Types/HasAdd.purs","end":[52,1]}}]},{"reExports":[],"name":"Neon.Types.HasAlternative","comments":null,"declarations":[{"children":[{"comments":null,"title":"alternative","info":{"declType":"typeClassMember","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}]}]},null]}},"sourceSpan":null},{"comments":null,"title":"arrayHasAlternative","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasAlternative"],"HasAlternative"]},{"tag":"TypeConstructor","contents":[["Prim"],"Array"]}]}},"sourceSpan":{"start":[25,1],"name":"src/Neon/Types/HasAlternative.purs","end":[26,28]}}],"comments":"Represents types that can express alternatives. This is like `HasAdd` but\nfor types of kind `* -> *` instead of `*`.\n\nLaws:\n- Associativity: `alternative (alternative x y) z == alternative x (alternative y z)`\n- Distributivity: `map f (alternative x y) == alternative (map f x) (map f y)`\n","title":"HasAlternative","fixity":null,"info":{"arguments":[["f",null]],"declType":"typeClass","superclasses":[[[["Neon","Types","HasMap"],"HasMap"],[{"tag":"TypeVar","contents":"f"}]]]},"sourceSpan":{"start":[15,1],"name":"src/Neon/Types/HasAlternative.purs","end":[25,1]}}]},{"reExports":[],"name":"Neon.Types.HasAnd","comments":null,"declarations":[{"children":[{"comments":null,"title":"and","info":{"declType":"typeClassMember","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":null},{"comments":null,"title":"booleanHasAnd","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasAnd"],"HasAnd"]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}},"sourceSpan":{"start":[28,1],"name":"src/Neon/Types/HasAnd.purs","end":[31,1]}},{"comments":null,"title":"functionHasAnd","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasAnd"],"HasAnd"],[{"tag":"TypeVar","contents":"b"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasAnd"],"HasAnd"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}},"sourceSpan":{"start":[31,1],"name":"src/Neon/Types/HasAnd.purs","end":[40,1]}}],"comments":"Represents types than can be \"and\"ed together. This is also known as a\n[logical conjunction](https://en.wikipedia.org/wiki/Logical_conjunction).\n\nLaws:\n- Associativity: `x && (y && z) = (x && y) && z`\n- Commutativity: `x && y = y && x`\n- Identity: `x && top = x`\n- Annihiliation: `x && bottom = bottom`\n- Idempotence: `x && x = x`\n","title":"HasAnd","fixity":null,"info":{"arguments":[["a",null]],"declType":"typeClass","superclasses":[[[["Neon","Types","HasBottom"],"HasBottom"],[{"tag":"TypeVar","contents":"a"}]],[[["Neon","Types","HasTop"],"HasTop"],[{"tag":"TypeVar","contents":"a"}]]]},"sourceSpan":{"start":[19,1],"name":"src/Neon/Types/HasAnd.purs","end":[28,1]}},{"children":[],"comments":"Alias for `and`.\n\n``` purescript\ntrue && true\n-- true\n```\n","title":"(&&)","fixity":{"associativity":"infixl","precedence":-1},"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[[[[["Neon","Types","HasAnd"],"HasAnd"],[{"tag":"TypeVar","contents":"a"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"a"}]}]}]},null]}},"sourceSpan":{"start":[40,1],"name":"src/Neon/Types/HasAnd.purs","end":[41,1]}}]},{"reExports":[],"name":"Neon.Types.HasApply","comments":null,"declarations":[{"children":[{"comments":null,"title":"apply","info":{"declType":"typeClassMember","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"b"}]}]}]},null]},null]}},"sourceSpan":null},{"comments":null,"title":"arrayHasApply","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasApply"],"HasApply"]},{"tag":"TypeConstructor","contents":[["Prim"],"Array"]}]}},"sourceSpan":{"start":[26,1],"name":"src/Neon/Types/HasApply.purs","end":[29,1]}},{"comments":null,"title":"functionHasApply","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasApply"],"HasApply"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[29,1],"name":"src/Neon/Types/HasApply.purs","end":[30,30]}}],"comments":"Represents types that can be applied from within a container. In other\nwords, given both a function and a value in a container, apply the\nfunction to the value and return the result in a container. This is also\nknown as an applicative functor.\n\nLaws:\n- Associative composition: `apply (apply (map (<<) f) g) h = apply f (apply g h)`\n","title":"HasApply","fixity":null,"info":{"arguments":[["f",null]],"declType":"typeClass","superclasses":[[[["Neon","Types","HasMap"],"HasMap"],[{"tag":"TypeVar","contents":"f"}]]]},"sourceSpan":{"start":[17,1],"name":"src/Neon/Types/HasApply.purs","end":[26,1]}}]},{"reExports":[],"name":"Neon.Types.HasBind","comments":null,"declarations":[{"children":[{"comments":null,"title":"bind","info":{"declType":"typeClassMember","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"b"}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"b"}]}]}]},null]},null]}},"sourceSpan":null},{"comments":null,"title":"arrayHasBind","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasBind"],"HasBind"]},{"tag":"TypeConstructor","contents":[["Prim"],"Array"]}]}},"sourceSpan":{"start":[26,1],"name":"src/Neon/Types/HasBind.purs","end":[29,1]}},{"comments":null,"title":"functionHasbind","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasBind"],"HasBind"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[29,1],"name":"src/Neon/Types/HasBind.purs","end":[38,1]}}],"comments":"Represents types that can express sequential actions. This is also known\nas a [monad](https://en.wikipedia.org/wiki/Monad_(functional_programming)).\n\nLaws:\n- Associativity: `bind (bind x f) g = bind x (\\ k -> bind (f k) g)`\n","title":"HasBind","fixity":null,"info":{"arguments":[["f",null]],"declType":"typeClass","superclasses":[[[["Neon","Types","HasPure"],"HasPure"],[{"tag":"TypeVar","contents":"f"}]]]},"sourceSpan":{"start":[17,1],"name":"src/Neon/Types/HasBind.purs","end":[26,1]}},{"children":[],"comments":"Collapses two wrappers into one.\n\n``` purescript\njoin [[1, 2], [3, 4]]\n-- [1, 2, 3, 4]\n```\n","title":"join","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["f",{"tag":"ConstrainedType","contents":[[[[["Neon","Types","HasBind"],"HasBind"],[{"tag":"TypeVar","contents":"f"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}]}]},null]},null]}},"sourceSpan":{"start":[38,1],"name":"src/Neon/Types/HasBind.purs","end":[39,1]}}]},{"reExports":[],"name":"Neon.Types.HasBottom","comments":null,"declarations":[{"children":[{"comments":null,"title":"bottom","info":{"declType":"typeClassMember","type":{"tag":"TypeVar","contents":"a"}},"sourceSpan":null},{"comments":null,"title":"booleanHasBottom","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasBottom"],"HasBottom"]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}},"sourceSpan":{"start":[28,1],"name":"src/Neon/Types/HasBottom.purs","end":[31,1]}},{"comments":null,"title":"charHasBottom","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasBottom"],"HasBottom"]},{"tag":"TypeConstructor","contents":[["Prim"],"Char"]}]}},"sourceSpan":{"start":[31,1],"name":"src/Neon/Types/HasBottom.purs","end":[34,1]}},{"comments":null,"title":"functionHasBottom","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasBottom"],"HasBottom"],[{"tag":"TypeVar","contents":"b"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasBottom"],"HasBottom"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}},"sourceSpan":{"start":[34,1],"name":"src/Neon/Types/HasBottom.purs","end":[37,1]}},{"comments":null,"title":"intHasBottom","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasBottom"],"HasBottom"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}},"sourceSpan":{"start":[37,1],"name":"src/Neon/Types/HasBottom.purs","end":[40,1]}},{"comments":null,"title":"numberHasBottom","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasBottom"],"HasBottom"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]}},"sourceSpan":{"start":[40,1],"name":"src/Neon/Types/HasBottom.purs","end":[43,1]}},{"comments":null,"title":"orderingHasBottom","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasBottom"],"HasBottom"]},{"tag":"TypeConstructor","contents":[["Neon","Values","Ordering"],"Ordering"]}]}},"sourceSpan":{"start":[43,1],"name":"src/Neon/Types/HasBottom.purs","end":[44,12]}}],"comments":"Represents types that have a lower bound.\n\nLaws:\n- `bottom <= x`\n","title":"HasBottom","fixity":null,"info":{"arguments":[["a",null]],"declType":"typeClass","superclasses":[[[["Neon","Types","HasCompare"],"HasCompare"],[{"tag":"TypeVar","contents":"a"}]]]},"sourceSpan":{"start":[19,1],"name":"src/Neon/Types/HasBottom.purs","end":[28,1]}}]},{"reExports":[],"name":"Neon.Types.HasCompare","comments":null,"declarations":[{"children":[{"comments":null,"title":"compare","info":{"declType":"typeClassMember","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeConstructor","contents":[["Neon","Values","Ordering"],"Ordering"]}]}]}},"sourceSpan":null},{"comments":null,"title":"arrayHasCompare","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasCompare"],"HasCompare"],[{"tag":"TypeVar","contents":"a"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasCompare"],"HasCompare"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[45,1],"name":"src/Neon/Types/HasCompare.purs","end":[48,1]}},{"comments":null,"title":"booleanHasCompare","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasCompare"],"HasCompare"]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}},"sourceSpan":{"start":[48,1],"name":"src/Neon/Types/HasCompare.purs","end":[55,1]}},{"comments":null,"title":"charHasCompare","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasCompare"],"HasCompare"]},{"tag":"TypeConstructor","contents":[["Prim"],"Char"]}]}},"sourceSpan":{"start":[55,1],"name":"src/Neon/Types/HasCompare.purs","end":[58,1]}},{"comments":null,"title":"functionHasCompare","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasCompare"],"HasCompare"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}},"sourceSpan":{"start":[58,1],"name":"src/Neon/Types/HasCompare.purs","end":[61,1]}},{"comments":null,"title":"intHasCompare","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasCompare"],"HasCompare"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}},"sourceSpan":{"start":[61,1],"name":"src/Neon/Types/HasCompare.purs","end":[64,1]}},{"comments":null,"title":"numberHasCompare","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasCompare"],"HasCompare"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]}},"sourceSpan":{"start":[64,1],"name":"src/Neon/Types/HasCompare.purs","end":[67,1]}},{"comments":null,"title":"orderingHasCompare","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasCompare"],"HasCompare"]},{"tag":"TypeConstructor","contents":[["Neon","Values","Ordering"],"Ordering"]}]}},"sourceSpan":{"start":[67,1],"name":"src/Neon/Types/HasCompare.purs","end":[80,1]}},{"comments":null,"title":"stringHasCompare","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasCompare"],"HasCompare"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}},"sourceSpan":{"start":[80,1],"name":"src/Neon/Types/HasCompare.purs","end":[90,1]}}],"comments":"Represents types that can be compared to each other. This is also known as\na [total order](https://en.wikipedia.org/wiki/Total_order).\n\nLaws:\n- Reflexivity: `a <= a`\n- Antisymmetry: if `a <= b` and `b <= a` then `a = b`\n- Transitivity: if `a <= b` and `b <= c` then `a <= c`\n","title":"HasCompare","fixity":null,"info":{"arguments":[["a",null]],"declType":"typeClass","superclasses":[[[["Neon","Types","HasEqual"],"HasEqual"],[{"tag":"TypeVar","contents":"a"}]]]},"sourceSpan":{"start":[35,1],"name":"src/Neon/Types/HasCompare.purs","end":[45,1]}},{"children":[],"comments":"Returns `true` if the first value is less than the second value, `false`\notherwise.\n\n``` purescript\nlt \"a\" \"b\"\n-- true\n```\n","title":"lt","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[[[[["Neon","Types","HasCompare"],"HasCompare"],[{"tag":"TypeVar","contents":"a"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}]}]},null]}},"sourceSpan":{"start":[90,1],"name":"src/Neon/Types/HasCompare.purs","end":[91,1]}},{"children":[],"comments":"Alias for `lt`.\n\n``` purescript\n\"a\" < \"b\"\n-- true\n```\n","title":"(<)","fixity":{"associativity":"infixl","precedence":-1},"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[[[[["Neon","Types","HasCompare"],"HasCompare"],[{"tag":"TypeVar","contents":"a"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}]}]},null]}},"sourceSpan":{"start":[101,1],"name":"src/Neon/Types/HasCompare.purs","end":[102,1]}},{"children":[],"comments":"Returns `true` if the first value is less than or equal to the second\nvalue, `false` otherwise.\n\n``` purescript\nlte \"a\" \"a\"\n-- true\n```\n","title":"lte","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[[[[["Neon","Types","HasCompare"],"HasCompare"],[{"tag":"TypeVar","contents":"a"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}]}]},null]}},"sourceSpan":{"start":[112,1],"name":"src/Neon/Types/HasCompare.purs","end":[113,1]}},{"children":[],"comments":"Alias for `lte`.\n\n``` purescript\n\"a\" < \"a\"\n-- true\n```\n","title":"(<=)","fixity":{"associativity":"infixl","precedence":-1},"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[[[[["Neon","Types","HasCompare"],"HasCompare"],[{"tag":"TypeVar","contents":"a"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}]}]},null]}},"sourceSpan":{"start":[123,1],"name":"src/Neon/Types/HasCompare.purs","end":[124,1]}},{"children":[],"comments":"Returns `true` if the first value is greater than or equal to the second\nvalue, `false` otherwise.\n\n``` purescript\ngte \"a\" \"a\"\n-- true\n```\n","title":"gte","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[[[[["Neon","Types","HasCompare"],"HasCompare"],[{"tag":"TypeVar","contents":"a"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}]}]},null]}},"sourceSpan":{"start":[134,1],"name":"src/Neon/Types/HasCompare.purs","end":[135,1]}},{"children":[],"comments":"Alias for `gte`.\n\n``` purescript\n \"a\" >= \"a\"\n-- true\n```\n","title":"(>=)","fixity":{"associativity":"infixl","precedence":-1},"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[[[[["Neon","Types","HasCompare"],"HasCompare"],[{"tag":"TypeVar","contents":"a"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}]}]},null]}},"sourceSpan":{"start":[145,1],"name":"src/Neon/Types/HasCompare.purs","end":[146,1]}},{"children":[],"comments":"Returns `true` if the first value is greater than the second value,\n`false` otherwise.\n\n``` purescript\ngt \"b\" \"a\"\n-- true\n```\n","title":"gt","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[[[[["Neon","Types","HasCompare"],"HasCompare"],[{"tag":"TypeVar","contents":"a"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}]}]},null]}},"sourceSpan":{"start":[156,1],"name":"src/Neon/Types/HasCompare.purs","end":[157,1]}},{"children":[],"comments":"Alias for `gt`.\n\n``` purescript\n\"b\" > \"a\"\n-- true\n```\n","title":"(>)","fixity":{"associativity":"infixl","precedence":-1},"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[[[[["Neon","Types","HasCompare"],"HasCompare"],[{"tag":"TypeVar","contents":"a"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}]}]},null]}},"sourceSpan":{"start":[167,1],"name":"src/Neon/Types/HasCompare.purs","end":[168,1]}},{"children":[],"comments":"Returns the lesser of two values.\n\n``` purescript\nmin \"a\" \"b\"\n-- \"a\"\n```\n","title":"min","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[[[[["Neon","Types","HasCompare"],"HasCompare"],[{"tag":"TypeVar","contents":"a"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"a"}]}]}]},null]}},"sourceSpan":{"start":[177,1],"name":"src/Neon/Types/HasCompare.purs","end":[178,1]}},{"children":[],"comments":"Returns the greater of two values.\n\n``` purescript\nmax \"a\" \"b\"\n-- \"b\"\n```\n","title":"max","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[[[[["Neon","Types","HasCompare"],"HasCompare"],[{"tag":"TypeVar","contents":"a"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"a"}]}]}]},null]}},"sourceSpan":{"start":[186,1],"name":"src/Neon/Types/HasCompare.purs","end":[187,1]}},{"children":[],"comments":"Clamps the value to the given range.\n\n``` purescript\nclamp 2 4 1\n-- 2\nclamp 2 4 3\n-- 3\nclamp 2 4 5\n-- 4\n```\n","title":"clamp","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[[[[["Neon","Types","HasCompare"],"HasCompare"],[{"tag":"TypeVar","contents":"a"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"a"}]}]}]}]},null]}},"sourceSpan":{"start":[199,1],"name":"src/Neon/Types/HasCompare.purs","end":[200,1]}},{"children":[],"comments":"Applies a function to both values and compares the results.\n\n``` purescript\ncomparing (/ 2) 4 5\n-- EqualTo\n```\n","title":"comparing","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[[[[["Neon","Types","HasCompare"],"HasCompare"],[{"tag":"TypeVar","contents":"a"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeVar","contents":"a"}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeConstructor","contents":[["Neon","Values","Ordering"],"Ordering"]}]}]}]}]},null]},null]}},"sourceSpan":{"start":[211,1],"name":"src/Neon/Types/HasCompare.purs","end":[212,1]}}]},{"reExports":[],"name":"Neon.Types.HasCompose","comments":null,"declarations":[{"children":[{"comments":null,"title":"compose","info":{"declType":"typeClassMember","type":{"tag":"ForAll","contents":["c",{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeVar","contents":"c"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"c"}]}]}]},null]},null]},null]}},"sourceSpan":null},{"comments":null,"title":"functionHasCompose","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasCompose"],"HasCompose"]},{"tag":"TypeConstructor","contents":[["Prim"],"Function"]}]}},"sourceSpan":{"start":[24,1],"name":"src/Neon/Types/HasCompose.purs","end":[33,1]}}],"comments":"Represents types that have a composition morphism.\n\nLaws:\n- Associativity: `f >> (g >> h) = (f >> g) >> h`\n","title":"HasCompose","fixity":null,"info":{"arguments":[["f",null]],"declType":"typeClass","superclasses":[]},"sourceSpan":{"start":[14,1],"name":"src/Neon/Types/HasCompose.purs","end":[24,1]}},{"children":[],"comments":"Alias for `compose`.\n\n``` purescript\n((+ 2) >> (* 2)) 3\n-- 10\n```\n","title":"(>>)","fixity":{"associativity":"infixl","precedence":-1},"info":{"declType":"value","type":{"tag":"ForAll","contents":["c",{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["f",{"tag":"ConstrainedType","contents":[[[[["Neon","Types","HasCompose"],"HasCompose"],[{"tag":"TypeVar","contents":"f"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeVar","contents":"c"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"c"}]}]}]}]},null]},null]},null]},null]}},"sourceSpan":{"start":[33,1],"name":"src/Neon/Types/HasCompose.purs","end":[34,1]}},{"children":[],"comments":"`(>>)` with the arguments flipped.\n\n``` purescript\n((* 2) << (+ 2)) 3\n-- 10\n```\n","title":"(<<)","fixity":{"associativity":"infixl","precedence":-1},"info":{"declType":"value","type":{"tag":"ForAll","contents":["c",{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["f",{"tag":"ConstrainedType","contents":[[[[["Neon","Types","HasCompose"],"HasCompose"],[{"tag":"TypeVar","contents":"f"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeVar","contents":"c"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"c"}]}]}]}]},null]},null]},null]},null]}},"sourceSpan":{"start":[43,1],"name":"src/Neon/Types/HasCompose.purs","end":[44,1]}}]},{"reExports":[],"name":"Neon.Types.HasDivide","comments":null,"declarations":[{"children":[{"comments":null,"title":"divide","info":{"declType":"typeClassMember","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":null},{"comments":null,"title":"modulo","info":{"declType":"typeClassMember","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":null},{"comments":null,"title":"functionHasDivide","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasDivide"],"HasDivide"],[{"tag":"TypeVar","contents":"b"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasDivide"],"HasDivide"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}},"sourceSpan":{"start":[38,1],"name":"src/Neon/Types/HasDivide.purs","end":[42,1]}},{"comments":null,"title":"intHasDivide","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasDivide"],"HasDivide"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}},"sourceSpan":{"start":[42,1],"name":"src/Neon/Types/HasDivide.purs","end":[46,1]}},{"comments":null,"title":"numberHasDivide","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasDivide"],"HasDivide"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]}},"sourceSpan":{"start":[46,1],"name":"src/Neon/Types/HasDivide.purs","end":[56,1]}}],"comments":"Represents types that are divisible.\n\nLaws:\n- Remainder: `(x / y) * y + (x % y) = x`\n- Identity: `x / one = x`\n","title":"HasDivide","fixity":null,"info":{"arguments":[["a",null]],"declType":"typeClass","superclasses":[[[["Neon","Types","HasOne"],"HasOne"],[{"tag":"TypeVar","contents":"a"}]]]},"sourceSpan":{"start":[21,1],"name":"src/Neon/Types/HasDivide.purs","end":[38,1]}},{"children":[],"comments":"Alias for `divide`.\n\n``` purescript\n5 / 2\n-- 2\n```\n","title":"(/)","fixity":{"associativity":"infixl","precedence":-1},"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[[[[["Neon","Types","HasDivide"],"HasDivide"],[{"tag":"TypeVar","contents":"a"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"a"}]}]}]},null]}},"sourceSpan":{"start":[56,1],"name":"src/Neon/Types/HasDivide.purs","end":[57,1]}},{"children":[],"comments":"Alias for `modulo`.\n\n``` purescript\n5 % 2\n-- 1\n```\n","title":"(%)","fixity":{"associativity":"infixl","precedence":-1},"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[[[[["Neon","Types","HasDivide"],"HasDivide"],[{"tag":"TypeVar","contents":"a"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"a"}]}]}]},null]}},"sourceSpan":{"start":[66,1],"name":"src/Neon/Types/HasDivide.purs","end":[67,1]}},{"children":[],"comments":"Returns the multiplicative inverse.\n\n``` purescript\nreciprocal 2\n-- 0.5\n```\n","title":"reciprocal","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[[[[["Neon","Types","HasDivide"],"HasDivide"],[{"tag":"TypeVar","contents":"a"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"a"}]}]},null]}},"sourceSpan":{"start":[76,1],"name":"src/Neon/Types/HasDivide.purs","end":[77,1]}}]},{"reExports":[],"name":"Neon.Types.HasEmpty","comments":null,"declarations":[{"children":[{"comments":null,"title":"empty","info":{"declType":"typeClassMember","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]},null]}},"sourceSpan":null},{"comments":null,"title":"arrayHasEmpty","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasEmpty"],"HasEmpty"]},{"tag":"TypeConstructor","contents":[["Prim"],"Array"]}]}},"sourceSpan":{"start":[27,1],"name":"src/Neon/Types/HasEmpty.purs","end":[39,1]}}],"comments":"Represents types that can be empty. This is like `HasZero` but for types\nof kind `* -> *` instead of `*`.\n\nLaws:\n- Left identity: `alternative empty x == x`\n- Right identity: `alternative x empty == x`\n- Annihilation: `map f empty == empty`\n","title":"HasEmpty","fixity":null,"info":{"arguments":[["f",null]],"declType":"typeClass","superclasses":[[[["Neon","Types","HasAlternative"],"HasAlternative"],[{"tag":"TypeVar","contents":"f"}]]]},"sourceSpan":{"start":[18,1],"name":"src/Neon/Types/HasEmpty.purs","end":[27,1]}},{"children":[],"comments":"If the condition is `false`, returns `empty`. Otherwise returns\n`pure unit`. This is useful for stopping some action part-way through.\n\n``` purescript\nguard false\n-- []\nguard true\n-- [unit]\n```\n","title":"guard","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["f",{"tag":"ConstrainedType","contents":[[[[["Neon","Types","HasEmpty"],"HasEmpty"],[{"tag":"TypeVar","contents":"f"}]],[[["Neon","Types","HasPure"],"HasPure"],[{"tag":"TypeVar","contents":"f"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeConstructor","contents":[["Neon","Values","Unit"],"Unit"]}]}]}]},null]}},"sourceSpan":{"start":[39,1],"name":"src/Neon/Types/HasEmpty.purs","end":[40,1]}}]},{"reExports":[],"name":"Neon.Types.HasEqual","comments":null,"declarations":[{"children":[{"comments":null,"title":"equal","info":{"declType":"typeClassMember","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}]}},"sourceSpan":null},{"comments":null,"title":"arrayHasEqual","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasEqual"],"HasEqual"],[{"tag":"TypeVar","contents":"a"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasEqual"],"HasEqual"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[30,1],"name":"src/Neon/Types/HasEqual.purs","end":[33,1]}},{"comments":null,"title":"booleanHasEqual","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasEqual"],"HasEqual"]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}},"sourceSpan":{"start":[33,1],"name":"src/Neon/Types/HasEqual.purs","end":[36,1]}},{"comments":null,"title":"charHasEqual","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasEqual"],"HasEqual"]},{"tag":"TypeConstructor","contents":[["Prim"],"Char"]}]}},"sourceSpan":{"start":[36,1],"name":"src/Neon/Types/HasEqual.purs","end":[39,1]}},{"comments":null,"title":"functionHasEqual","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasEqual"],"HasEqual"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}},"sourceSpan":{"start":[39,1],"name":"src/Neon/Types/HasEqual.purs","end":[42,1]}},{"comments":null,"title":"intHasEqual","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasEqual"],"HasEqual"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}},"sourceSpan":{"start":[42,1],"name":"src/Neon/Types/HasEqual.purs","end":[45,1]}},{"comments":null,"title":"numberHasEqual","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasEqual"],"HasEqual"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]}},"sourceSpan":{"start":[45,1],"name":"src/Neon/Types/HasEqual.purs","end":[48,1]}},{"comments":null,"title":"stringHasEqual","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasEqual"],"HasEqual"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}},"sourceSpan":{"start":[48,1],"name":"src/Neon/Types/HasEqual.purs","end":[57,1]}}],"comments":"Represents types that can be equal to each other.\n\nLaws:\n- Reflexivity: `x == x = true`\n- Symmetry: `x == y = y == x`\n- Transitivity: `x == y` and `y == z` implies `x == z`\n","title":"HasEqual","fixity":null,"info":{"arguments":[["a",null]],"declType":"typeClass","superclasses":[]},"sourceSpan":{"start":[21,1],"name":"src/Neon/Types/HasEqual.purs","end":[30,1]}},{"children":[],"comments":"Alias for `equal`.\n\n``` purescript\n\"a\" == \"a\"\n-- true\n```\n","title":"(==)","fixity":{"associativity":"infixl","precedence":-1},"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[[[[["Neon","Types","HasEqual"],"HasEqual"],[{"tag":"TypeVar","contents":"a"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}]}]},null]}},"sourceSpan":{"start":[57,1],"name":"src/Neon/Types/HasEqual.purs","end":[58,1]}}]},{"reExports":[],"name":"Neon.Types.HasFold","comments":null,"declarations":[{"children":[{"comments":null,"title":"foldl","info":{"declType":"typeClassMember","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeVar","contents":"b"}]}]}]},null]},null]}},"sourceSpan":null},{"comments":null,"title":"foldr","info":{"declType":"typeClassMember","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeVar","contents":"b"}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeVar","contents":"b"}]}]}]},null]},null]}},"sourceSpan":null},{"comments":null,"title":"arrayHasFold","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasFold"],"HasFold"]},{"tag":"TypeConstructor","contents":[["Prim"],"Array"]}]}},"sourceSpan":{"start":[45,1],"name":"src/Neon/Types/HasFold.purs","end":[56,1]}}],"comments":"Represents types that can be reduced to a single value. This is also known\nas a [fold](https://en.wikipedia.org/wiki/Fold_(higher-order_function)).\n","title":"HasFold","fixity":null,"info":{"arguments":[["f",null]],"declType":"typeClass","superclasses":[]},"sourceSpan":{"start":[28,1],"name":"src/Neon/Types/HasFold.purs","end":[45,1]}},{"children":[],"comments":"Reduces the container into a value that supports addition and has an\nadditive identity (that is, a monoid).\n\n``` purescript\nfold [\"ne\", \"on\"]\n-- \"neon\"\n```\n","title":"fold","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["m",{"tag":"ForAll","contents":["f",{"tag":"ConstrainedType","contents":[[[[["Neon","Types","HasFold"],"HasFold"],[{"tag":"TypeVar","contents":"f"}]],[[["Neon","Types","HasZero"],"HasZero"],[{"tag":"TypeVar","contents":"m"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"m"}]}]},{"tag":"TypeVar","contents":"m"}]}]},null]},null]}},"sourceSpan":{"start":[56,1],"name":"src/Neon/Types/HasFold.purs","end":[57,1]}},{"children":[],"comments":"Maps the function over the values in the container and then reduces the\ncontainer into a value that supports addition and has an additive identity\n(that is, a monoid).\n\n``` purescript\nfoldMap (+ \"!\") [\"ne\", \"on\"]\n-- \"ne!on!\"\n```\n","title":"foldMap","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["m",{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["f",{"tag":"ConstrainedType","contents":[[[[["Neon","Types","HasFold"],"HasFold"],[{"tag":"TypeVar","contents":"f"}]],[[["Neon","Types","HasZero"],"HasZero"],[{"tag":"TypeVar","contents":"m"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"m"}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeVar","contents":"m"}]}]}]},null]},null]},null]}},"sourceSpan":{"start":[67,1],"name":"src/Neon/Types/HasFold.purs","end":[68,1]}},{"children":[],"comments":"Returns the length of the container.\n\n``` purescript\nlength [1, 2, 3]\n-- 3\n```\n","title":"length","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["f",{"tag":"ConstrainedType","contents":[[[[["Neon","Types","HasFold"],"HasFold"],[{"tag":"TypeVar","contents":"f"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}]},null]},null]}},"sourceSpan":{"start":[76,1],"name":"src/Neon/Types/HasFold.purs","end":[77,1]}},{"children":[],"comments":"Returns `true` if the length of the container is greater than 0,\n`false` otherwise.\n\n``` purescript\nisPresent []\n-- false\nisPresent [1, 2, 3]\n-- true\n```\n","title":"isPresent","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["f",{"tag":"ConstrainedType","contents":[[[[["Neon","Types","HasFold"],"HasFold"],[{"tag":"TypeVar","contents":"f"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}]},null]},null]}},"sourceSpan":{"start":[88,1],"name":"src/Neon/Types/HasFold.purs","end":[89,1]}},{"children":[],"comments":"Returns `true` if the length of the container is 0, `false` otherwise.\n\n``` purescript\nisBlank []\n-- true\nisBlank [1, 2, 3]\n-- false\n```\n","title":"isBlank","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["f",{"tag":"ConstrainedType","contents":[[[[["Neon","Types","HasFold"],"HasFold"],[{"tag":"TypeVar","contents":"f"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}]},null]},null]}},"sourceSpan":{"start":[99,1],"name":"src/Neon/Types/HasFold.purs","end":[100,1]}},{"children":[],"comments":"Returns `true` if the container contains the given value, `false`\notherwise.\n\n``` purescript\ncontains 1 [0, 1]\n-- true\ncontains 2 [0, 1]\n-- false\n```\n","title":"contains","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["f",{"tag":"ConstrainedType","contents":[[[[["Neon","Types","HasFold"],"HasFold"],[{"tag":"TypeVar","contents":"f"}]],[[["Neon","Types","HasEqual"],"HasEqual"],[{"tag":"TypeVar","contents":"a"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}]}]},null]},null]}},"sourceSpan":{"start":[111,1],"name":"src/Neon/Types/HasFold.purs","end":[112,1]}},{"children":[],"comments":"Returns the sum of all the values in the container.\n\n``` purescript\nsum [3, 4, 5]\n-- 12\n```\n","title":"sum","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["f",{"tag":"ConstrainedType","contents":[[[[["Neon","Types","HasFold"],"HasFold"],[{"tag":"TypeVar","contents":"f"}]],[[["Neon","Types","HasZero"],"HasZero"],[{"tag":"TypeVar","contents":"a"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeVar","contents":"a"}]}]},null]},null]}},"sourceSpan":{"start":[120,1],"name":"src/Neon/Types/HasFold.purs","end":[121,1]}},{"children":[],"comments":"Returns the product of all the values in the container.\n\n``` purescript\nproduct [3, 4, 5]\n-- 60\n```\n","title":"product","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["f",{"tag":"ConstrainedType","contents":[[[[["Neon","Types","HasFold"],"HasFold"],[{"tag":"TypeVar","contents":"f"}]],[[["Neon","Types","HasOne"],"HasOne"],[{"tag":"TypeVar","contents":"a"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeVar","contents":"a"}]}]},null]},null]}},"sourceSpan":{"start":[129,1],"name":"src/Neon/Types/HasFold.purs","end":[130,1]}}]},{"reExports":[],"name":"Neon.Types.HasFromArray","comments":null,"declarations":[{"children":[{"comments":null,"title":"fromArray","info":{"declType":"typeClassMember","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeVar","contents":"b"}]}},"sourceSpan":null},{"comments":null,"title":"stringHasFromArray","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasFromArray"],"HasFromArray"]},{"tag":"TypeConstructor","contents":[["Prim"],"Char"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}},"sourceSpan":{"start":[11,1],"name":"src/Neon/Types/HasFromArray.purs","end":[12,40]}}],"comments":null,"title":"HasFromArray","fixity":null,"info":{"arguments":[["a",null],["b",null]],"declType":"typeClass","superclasses":[]},"sourceSpan":{"start":[8,1],"name":"src/Neon/Types/HasFromArray.purs","end":[11,1]}}]},{"reExports":[],"name":"Neon.Types.HasIdentity","comments":null,"declarations":[{"children":[{"comments":null,"title":"identity","info":{"declType":"typeClassMember","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"a"}]},null]}},"sourceSpan":null},{"comments":null,"title":"functionHasIdentity","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasIdentity"],"HasIdentity"]},{"tag":"TypeConstructor","contents":[["Prim"],"Function"]}]}},"sourceSpan":{"start":[23,1],"name":"src/Neon/Types/HasIdentity.purs","end":[24,21]}}],"comments":"Represents types that have an identity morphism. This is also known as a\n[category](https://en.wikipedia.org/wiki/Category_(mathematics)).\n\nLaws:\n- Identity: `f >> identity = identity >> f = f`\n","title":"HasIdentity","fixity":null,"info":{"arguments":[["f",null]],"declType":"typeClass","superclasses":[[[["Neon","Types","HasCompose"],"HasCompose"],[{"tag":"TypeVar","contents":"f"}]]]},"sourceSpan":{"start":[13,1],"name":"src/Neon/Types/HasIdentity.purs","end":[23,1]}}]},{"reExports":[],"name":"Neon.Types.HasLift","comments":null,"declarations":[{"children":[{"comments":null,"title":"lift","info":{"declType":"typeClassMember","type":{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["m",{"tag":"ConstrainedType","contents":[[[[["Neon","Types","HasBind"],"HasBind"],[{"tag":"TypeVar","contents":"m"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"m"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"t"},{"tag":"TypeVar","contents":"m"}]},{"tag":"TypeVar","contents":"a"}]}]}]},null]},null]}},"sourceSpan":null}],"comments":"Represents types that support being lifted into a stack of\n[monad transformers](https://en.wikipedia.org/wiki/Monad_transformer).\n\nLaws:\n- `lift (pure x) = pure x`\n- `lift (bind m (\\ x -> y)) = bind (lift m) (\\ x -> lift y)`\n","title":"HasLift","fixity":null,"info":{"arguments":[["t",null]],"declType":"typeClass","superclasses":[]},"sourceSpan":{"start":[14,1],"name":"src/Neon/Types/HasLift.purs","end":[21,49]}}]},{"reExports":[],"name":"Neon.Types.HasLogarithm","comments":null,"declarations":[{"children":[{"comments":null,"title":"logarithm","info":{"declType":"typeClassMember","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":null},{"comments":null,"title":"intHasLogarithm","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasLogarithm"],"HasLogarithm"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}},"sourceSpan":{"start":[27,1],"name":"src/Neon/Types/HasLogarithm.purs","end":[30,1]}},{"comments":null,"title":"numberHasLogarithm","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasLogarithm"],"HasLogarithm"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]}},"sourceSpan":{"start":[30,1],"name":"src/Neon/Types/HasLogarithm.purs","end":[31,43]}}],"comments":"Represents types that support logarithms.\n\nLaws:\n- `logarithm b (x * y) = logarithm b x + logarithm b y`\n- `logarithm b (x / y) = logarithm b x - logarithm b y`\n- `logarithm b (x ^ y) = y * logarithm b x`\n","title":"HasLogarithm","fixity":null,"info":{"arguments":[["a",null]],"declType":"typeClass","superclasses":[[[["Neon","Types","HasDivide"],"HasDivide"],[{"tag":"TypeVar","contents":"a"}]],[[["Neon","Types","HasPower"],"HasPower"],[{"tag":"TypeVar","contents":"a"}]]]},"sourceSpan":{"start":[18,1],"name":"src/Neon/Types/HasLogarithm.purs","end":[27,1]}}]},{"reExports":[],"name":"Neon.Types.HasMap","comments":null,"declarations":[{"children":[{"comments":null,"title":"map","info":{"declType":"typeClassMember","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"b"}]}]}]},null]},null]}},"sourceSpan":null},{"comments":null,"title":"arrayHasMap","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasMap"],"HasMap"]},{"tag":"TypeConstructor","contents":[["Prim"],"Array"]}]}},"sourceSpan":{"start":[29,1],"name":"src/Neon/Types/HasMap.purs","end":[32,1]}},{"comments":null,"title":"functionHasMap","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasMap"],"HasMap"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[32,1],"name":"src/Neon/Types/HasMap.purs","end":[41,1]}}],"comments":"Represents types that can be mapped over. This is also know as a\n[functor](https://en.wikipedia.org/wiki/Functor).\n\nLaws:\n- Identity: `map identity = identity`\n- Composition: `map (f >> g) = map f >> map g`\n","title":"HasMap","fixity":null,"info":{"arguments":[["f",null]],"declType":"typeClass","superclasses":[]},"sourceSpan":{"start":[20,1],"name":"src/Neon/Types/HasMap.purs","end":[29,1]}},{"children":[],"comments":"Discards the result. This is useful for `Effect`s.\n\n``` purescript\nvoid [1, 2, 3]\n-- [unit, unit, unit]\n```\n","title":"void","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["f",{"tag":"ConstrainedType","contents":[[[[["Neon","Types","HasMap"],"HasMap"],[{"tag":"TypeVar","contents":"f"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeConstructor","contents":[["Neon","Values","Unit"],"Unit"]}]}]}]},null]},null]}},"sourceSpan":{"start":[41,1],"name":"src/Neon/Types/HasMap.purs","end":[42,1]}},{"children":[],"comments":"`map` with the arguments flipped.\n\n``` purescript\nfor [1, 2, 3] (+ 1)\n-- [2, 3, 4]\n```\n","title":"for","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["f",{"tag":"ConstrainedType","contents":[[[[["Neon","Types","HasMap"],"HasMap"],[{"tag":"TypeVar","contents":"f"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"b"}]}]}]}]},null]},null]},null]}},"sourceSpan":{"start":[50,1],"name":"src/Neon/Types/HasMap.purs","end":[51,1]}}]},{"reExports":[],"name":"Neon.Types.HasMultiply","comments":null,"declarations":[{"children":[{"comments":null,"title":"multiply","info":{"declType":"typeClassMember","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":null},{"comments":null,"title":"booleanHasMultiply","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasMultiply"],"HasMultiply"]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}},"sourceSpan":{"start":[29,1],"name":"src/Neon/Types/HasMultiply.purs","end":[32,1]}},{"comments":null,"title":"functionHasMultiply","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasMultiply"],"HasMultiply"],[{"tag":"TypeVar","contents":"b"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasMultiply"],"HasMultiply"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}},"sourceSpan":{"start":[32,1],"name":"src/Neon/Types/HasMultiply.purs","end":[35,1]}},{"comments":null,"title":"intHasMultiply","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasMultiply"],"HasMultiply"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}},"sourceSpan":{"start":[35,1],"name":"src/Neon/Types/HasMultiply.purs","end":[38,1]}},{"comments":null,"title":"numberHasMultiply","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasMultiply"],"HasMultiply"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]}},"sourceSpan":{"start":[38,1],"name":"src/Neon/Types/HasMultiply.purs","end":[47,1]}}],"comments":"Represents values that can be multiplied together. This is also known as\na [near-ring](https://en.wikipedia.org/wiki/Near-ring).\n\nLaws:\n- Associativity: `x * (y * z) = (x * y) * z`\n- Distributivity: `x * (y + z) = (x * y) + (x * z)`\n- Annihilation: `x * zero = zero * x = zero`\n","title":"HasMultiply","fixity":null,"info":{"arguments":[["a",null]],"declType":"typeClass","superclasses":[[[["Neon","Types","HasZero"],"HasZero"],[{"tag":"TypeVar","contents":"a"}]]]},"sourceSpan":{"start":[20,1],"name":"src/Neon/Types/HasMultiply.purs","end":[29,1]}},{"children":[],"comments":"Alias for `multiply`.\n\n``` purescript\n3 * 2\n-- 6\n```\n","title":"(*)","fixity":{"associativity":"infixl","precedence":-1},"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[[[[["Neon","Types","HasMultiply"],"HasMultiply"],[{"tag":"TypeVar","contents":"a"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"a"}]}]}]},null]}},"sourceSpan":{"start":[47,1],"name":"src/Neon/Types/HasMultiply.purs","end":[48,1]}}]},{"reExports":[],"name":"Neon.Types.HasNot","comments":null,"declarations":[{"children":[{"comments":null,"title":"not","info":{"declType":"typeClassMember","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"a"}]}},"sourceSpan":null},{"comments":null,"title":"booleanHasNot","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasNot"],"HasNot"]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}},"sourceSpan":{"start":[29,1],"name":"src/Neon/Types/HasNot.purs","end":[32,1]}},{"comments":null,"title":"functionHasNot","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasNot"],"HasNot"],[{"tag":"TypeVar","contents":"b"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasNot"],"HasNot"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}},"sourceSpan":{"start":[32,1],"name":"src/Neon/Types/HasNot.purs","end":[43,1]}}],"comments":"Represents types can be \"not\"ed. This is also know as\n[negation](https://en.wikipedia.org/wiki/Negation).\n\nLaws:\n- `not top = bottom`\n- `not bottom = top`\n","title":"HasNot","fixity":null,"info":{"arguments":[["a",null]],"declType":"typeClass","superclasses":[[[["Neon","Types","HasBottom"],"HasBottom"],[{"tag":"TypeVar","contents":"a"}]],[[["Neon","Types","HasTop"],"HasTop"],[{"tag":"TypeVar","contents":"a"}]]]},"sourceSpan":{"start":[20,1],"name":"src/Neon/Types/HasNot.purs","end":[29,1]}},{"children":[],"comments":"Tests whether a number is finite or not.\n\n``` purescript\nisInfinite infinity\n-- true\nisInfinite 1.0\n-- false\n```\n","title":"isInfinite","fixity":null,"info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}},"sourceSpan":{"start":[43,1],"name":"src/Neon/Types/HasNot.purs","end":[44,1]}},{"children":[],"comments":"Returns `true` if two values are not equal, `false` otherwise.\n\n``` purescript\nnotEqual \"a\" \"b\"\n-- true\n```\n","title":"notEqual","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[[[[["Neon","Types","HasEqual"],"HasEqual"],[{"tag":"TypeVar","contents":"a"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}]}]},null]}},"sourceSpan":{"start":[52,1],"name":"src/Neon/Types/HasNot.purs","end":[53,1]}},{"children":[],"comments":"Alias for `notEqual`.\n\n``` purescript\n\"a\" != \"b\"\n-- true\n```\n","title":"(!=)","fixity":{"associativity":"infixl","precedence":-1},"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[[[[["Neon","Types","HasEqual"],"HasEqual"],[{"tag":"TypeVar","contents":"a"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}]}]},null]}},"sourceSpan":{"start":[61,1],"name":"src/Neon/Types/HasNot.purs","end":[62,1]}}]},{"reExports":[],"name":"Neon.Types.HasOne","comments":null,"declarations":[{"children":[{"comments":null,"title":"one","info":{"declType":"typeClassMember","type":{"tag":"TypeVar","contents":"a"}},"sourceSpan":null},{"comments":null,"title":"booleanHasOne","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasOne"],"HasOne"]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}},"sourceSpan":{"start":[28,1],"name":"src/Neon/Types/HasOne.purs","end":[31,1]}},{"comments":null,"title":"functionHasOne","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasOne"],"HasOne"],[{"tag":"TypeVar","contents":"b"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasOne"],"HasOne"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}},"sourceSpan":{"start":[31,1],"name":"src/Neon/Types/HasOne.purs","end":[34,1]}},{"comments":null,"title":"intHasOne","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasOne"],"HasOne"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}},"sourceSpan":{"start":[34,1],"name":"src/Neon/Types/HasOne.purs","end":[37,1]}},{"comments":null,"title":"numberHasOne","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasOne"],"HasOne"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]}},"sourceSpan":{"start":[37,1],"name":"src/Neon/Types/HasOne.purs","end":[50,1]}}],"comments":"Represents types that have an multiplicative identity. This is also known\nas a [semiring](https://en.wikipedia.org/wiki/Semiring).\n\nLaws:\n- Identity: `one * x = x * one = x`\n","title":"HasOne","fixity":null,"info":{"arguments":[["a",null]],"declType":"typeClass","superclasses":[[[["Neon","Types","HasMultiply"],"HasMultiply"],[{"tag":"TypeVar","contents":"a"}]]]},"sourceSpan":{"start":[19,1],"name":"src/Neon/Types/HasOne.purs","end":[28,1]}},{"children":[],"comments":"Returns the sign of a value. For any value `x`, `sign x * abs x = x`.\n\n``` purescript\nsign (-2)\n-- -1\nsign 0\n-- 0\nsign 2\n-- 1\n```\n","title":"sign","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[[[[["Neon","Types","HasCompare"],"HasCompare"],[{"tag":"TypeVar","contents":"a"}]],[[["Neon","Types","HasOne"],"HasOne"],[{"tag":"TypeVar","contents":"a"}]],[[["Neon","Types","HasSubtract"],"HasSubtract"],[{"tag":"TypeVar","contents":"a"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"a"}]}]},null]}},"sourceSpan":{"start":[50,1],"name":"src/Neon/Types/HasOne.purs","end":[51,1]}}]},{"reExports":[],"name":"Neon.Types.HasOr","comments":null,"declarations":[{"children":[{"comments":null,"title":"or","info":{"declType":"typeClassMember","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":null},{"comments":null,"title":"booleanHasOr","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasOr"],"HasOr"]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}},"sourceSpan":{"start":[28,1],"name":"src/Neon/Types/HasOr.purs","end":[31,1]}},{"comments":null,"title":"functionHasOr","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasOr"],"HasOr"],[{"tag":"TypeVar","contents":"b"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasOr"],"HasOr"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}},"sourceSpan":{"start":[31,1],"name":"src/Neon/Types/HasOr.purs","end":[40,1]}}],"comments":"Represents types than can be \"or\"ed together. This is also known as a\n[logical disjunction](https://en.wikipedia.org/wiki/Logical_disjunction).\n\nLaws:\n- Associativity: `x || (y || z) = (x || y) || z`\n- Commutativity: `x || y = y || x`\n- Identity: `x || bottom = x`\n- Annihiliation: `x || top = top`\n- Idempotence: `x || x = x`\n","title":"HasOr","fixity":null,"info":{"arguments":[["a",null]],"declType":"typeClass","superclasses":[[[["Neon","Types","HasBottom"],"HasBottom"],[{"tag":"TypeVar","contents":"a"}]],[[["Neon","Types","HasTop"],"HasTop"],[{"tag":"TypeVar","contents":"a"}]]]},"sourceSpan":{"start":[19,1],"name":"src/Neon/Types/HasOr.purs","end":[28,1]}},{"children":[],"comments":"Alias for `or`.\n\n``` purescript\nfalse || true\n-- true\n```\n","title":"(||)","fixity":{"associativity":"infixl","precedence":-1},"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[[[[["Neon","Types","HasOr"],"HasOr"],[{"tag":"TypeVar","contents":"a"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"a"}]}]}]},null]}},"sourceSpan":{"start":[40,1],"name":"src/Neon/Types/HasOr.purs","end":[41,1]}}]},{"reExports":[],"name":"Neon.Types.HasPower","comments":null,"declarations":[{"children":[{"comments":null,"title":"power","info":{"declType":"typeClassMember","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":null},{"comments":null,"title":"intHasPower","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasPower"],"HasPower"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}},"sourceSpan":{"start":[28,1],"name":"src/Neon/Types/HasPower.purs","end":[31,1]}},{"comments":null,"title":"numberHasPower","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasPower"],"HasPower"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]}},"sourceSpan":{"start":[31,1],"name":"src/Neon/Types/HasPower.purs","end":[40,1]}}],"comments":"Represents types that can be exponentiated.\n\nLaws:\n- `(b ^ n) * (b ^ m) = b ^ (n + m)`\n- `(b ^ n) ^ m = b ^ (n * m)`\n- `(b * y) ^ n = (b ^ n) * (y ^ n)`\n","title":"HasPower","fixity":null,"info":{"arguments":[["a",null]],"declType":"typeClass","superclasses":[[[["Neon","Types","HasOne"],"HasOne"],[{"tag":"TypeVar","contents":"a"}]]]},"sourceSpan":{"start":[18,1],"name":"src/Neon/Types/HasPower.purs","end":[28,1]}},{"children":[],"comments":"Alias for `power`.\n\n``` purescript\n2 ^ 3\n-- 8\n```\n","title":"(^)","fixity":{"associativity":"infixl","precedence":-1},"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[[[[["Neon","Types","HasPower"],"HasPower"],[{"tag":"TypeVar","contents":"a"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"a"}]}]}]},null]}},"sourceSpan":{"start":[40,1],"name":"src/Neon/Types/HasPower.purs","end":[41,1]}}]},{"reExports":[],"name":"Neon.Types.HasPure","comments":null,"declarations":[{"children":[{"comments":null,"title":"pure","info":{"declType":"typeClassMember","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}]},null]}},"sourceSpan":null},{"comments":null,"title":"arrayHasPure","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasPure"],"HasPure"]},{"tag":"TypeConstructor","contents":[["Prim"],"Array"]}]}},"sourceSpan":{"start":[31,1],"name":"src/Neon/Types/HasPure.purs","end":[34,1]}},{"comments":null,"title":"functionHasPure","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasPure"],"HasPure"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[34,1],"name":"src/Neon/Types/HasPure.purs","end":[46,1]}}],"comments":"Represents types that allow injecting values into a container.\n\nLaws:\n- Identity: `apply (pure id) v = v`\n- Composition: `apply (apply (apply (pure <<) f) g) h = apply f (apply g h)`\n- Homomorphism: `apply (pure f) (pure x) = pure (f x)`\n- Interchange: `apply u (pure y) = apply (pure \\ f -> f y) u`\n","title":"HasPure","fixity":null,"info":{"arguments":[["f",null]],"declType":"typeClass","superclasses":[[[["Neon","Types","HasApply"],"HasApply"],[{"tag":"TypeVar","contents":"f"}]]]},"sourceSpan":{"start":[20,1],"name":"src/Neon/Types/HasPure.purs","end":[31,1]}},{"children":[],"comments":"If the condition is `true`, returns the value. Otherwise returns\n`pure unit`.\n\n``` purescript\nwhen false [unit, unit]\n-- [unit]\nwhen true [unit, unit]\n-- [unit, unit]\n```\n","title":"when","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["f",{"tag":"ConstrainedType","contents":[[[[["Neon","Types","HasPure"],"HasPure"],[{"tag":"TypeVar","contents":"f"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeConstructor","contents":[["Neon","Values","Unit"],"Unit"]}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeConstructor","contents":[["Neon","Values","Unit"],"Unit"]}]}]}]}]},null]}},"sourceSpan":{"start":[46,1],"name":"src/Neon/Types/HasPure.purs","end":[47,1]}},{"children":[],"comments":"If the condition is `false`, returns the value. Otherwise returns\n`pure unit`.\n\n``` purescript\nunless true [unit, unit]\n-- [unit]\nunless false [unit, unit]\n-- [unit, unit]\n```\n","title":"unless","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["f",{"tag":"ConstrainedType","contents":[[[[["Neon","Types","HasPure"],"HasPure"],[{"tag":"TypeVar","contents":"f"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeConstructor","contents":[["Neon","Values","Unit"],"Unit"]}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeConstructor","contents":[["Neon","Values","Unit"],"Unit"]}]}]}]}]},null]}},"sourceSpan":{"start":[58,1],"name":"src/Neon/Types/HasPure.purs","end":[59,1]}}]},{"reExports":[],"name":"Neon.Types.HasRoot","comments":null,"declarations":[{"children":[{"comments":null,"title":"root","info":{"declType":"typeClassMember","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":null},{"comments":null,"title":"intHasRoot","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasRoot"],"HasRoot"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}},"sourceSpan":{"start":[25,1],"name":"src/Neon/Types/HasRoot.purs","end":[28,1]}},{"comments":null,"title":"numberHasRoot","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasRoot"],"HasRoot"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]}},"sourceSpan":{"start":[28,1],"name":"src/Neon/Types/HasRoot.purs","end":[29,33]}}],"comments":"Represents types that support roots.\n\nLaws:\n- `root n x = x ^ (1 / n)`\n","title":"HasRoot","fixity":null,"info":{"arguments":[["a",null]],"declType":"typeClass","superclasses":[[[["Neon","Types","HasDivide"],"HasDivide"],[{"tag":"TypeVar","contents":"a"}]],[[["Neon","Types","HasPower"],"HasPower"],[{"tag":"TypeVar","contents":"a"}]]]},"sourceSpan":{"start":[16,1],"name":"src/Neon/Types/HasRoot.purs","end":[25,1]}}]},{"reExports":[],"name":"Neon.Types.HasShow","comments":null,"declarations":[{"children":[{"comments":null,"title":"show","info":{"declType":"typeClassMember","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}},"sourceSpan":null},{"comments":null,"title":"arrayHasShow","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasShow"],"HasShow"],[{"tag":"TypeVar","contents":"a"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasShow"],"HasShow"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[24,1],"name":"src/Neon/Types/HasShow.purs","end":[27,1]}},{"comments":null,"title":"booleanHasShow","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasShow"],"HasShow"]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}},"sourceSpan":{"start":[27,1],"name":"src/Neon/Types/HasShow.purs","end":[30,1]}},{"comments":null,"title":"charHasShow","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasShow"],"HasShow"]},{"tag":"TypeConstructor","contents":[["Prim"],"Char"]}]}},"sourceSpan":{"start":[30,1],"name":"src/Neon/Types/HasShow.purs","end":[33,1]}},{"comments":null,"title":"intHasShow","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasShow"],"HasShow"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}},"sourceSpan":{"start":[33,1],"name":"src/Neon/Types/HasShow.purs","end":[36,1]}},{"comments":null,"title":"numberHasShow","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasShow"],"HasShow"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]}},"sourceSpan":{"start":[36,1],"name":"src/Neon/Types/HasShow.purs","end":[39,1]}},{"comments":null,"title":"stringHasShow","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasShow"],"HasShow"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}},"sourceSpan":{"start":[39,1],"name":"src/Neon/Types/HasShow.purs","end":[40,29]}}],"comments":"Represents types that can be converting to a string.\n\nThis class does not have any laws.\n","title":"HasShow","fixity":null,"info":{"arguments":[["a",null]],"declType":"typeClass","superclasses":[]},"sourceSpan":{"start":[15,1],"name":"src/Neon/Types/HasShow.purs","end":[24,1]}}]},{"reExports":[],"name":"Neon.Types.HasState","comments":null,"declarations":[{"children":[{"comments":null,"title":"state","info":{"declType":"typeClassMember","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"s"}]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Pair"],"Pair"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"s"}]}}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"m"},{"tag":"TypeVar","contents":"a"}]}]},null]}},"sourceSpan":null}],"comments":"Represents monads that contain \"mutable\" state.\n\nLaws:\n- `do { getState ; getState } = getState`\n- `do { setState x ; setState y } = setState y`\n- `do { setState x ; getState } = map (always x) (setState x)`\n- `do { s <- getState ; setState s } = pure unit`\n","title":"HasState","fixity":null,"info":{"arguments":[["s",null],["m",null]],"declType":"typeClass","superclasses":[[[["Neon","Types","HasBind"],"HasBind"],[{"tag":"TypeVar","contents":"m"}]]]},"sourceSpan":{"start":[20,1],"name":"src/Neon/Types/HasState.purs","end":[35,1]}},{"children":[],"comments":"Gets the state.\n\n``` purescript\nrunStateT getState 1\n-- Identity (pair 1 1)\n```\n","title":"getState","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["s",{"tag":"ForAll","contents":["m",{"tag":"ConstrainedType","contents":[[[[["Neon","Types","HasState"],"HasState"],[{"tag":"TypeVar","contents":"s"},{"tag":"TypeVar","contents":"m"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"m"},{"tag":"TypeVar","contents":"s"}]}]},null]},null]}},"sourceSpan":{"start":[35,1],"name":"src/Neon/Types/HasState.purs","end":[36,1]}},{"children":[],"comments":"Sets the state.\n\n``` purescript\nrunStateT (setState 2) 1\n-- Identity (pair unit 2)\n```\n","title":"setState","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["s",{"tag":"ForAll","contents":["m",{"tag":"ConstrainedType","contents":[[[[["Neon","Types","HasState"],"HasState"],[{"tag":"TypeVar","contents":"s"},{"tag":"TypeVar","contents":"m"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"s"}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"m"},{"tag":"TypeConstructor","contents":[["Neon","Values","Unit"],"Unit"]}]}]}]},null]},null]}},"sourceSpan":{"start":[44,1],"name":"src/Neon/Types/HasState.purs","end":[45,1]}}]},{"reExports":[],"name":"Neon.Types.HasSubtract","comments":null,"declarations":[{"children":[{"comments":null,"title":"subtract","info":{"declType":"typeClassMember","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":null},{"comments":null,"title":"functionHasSubtract","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasSubtract"],"HasSubtract"],[{"tag":"TypeVar","contents":"b"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasSubtract"],"HasSubtract"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}},"sourceSpan":{"start":[28,1],"name":"src/Neon/Types/HasSubtract.purs","end":[31,1]}},{"comments":null,"title":"intHasSubtract","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasSubtract"],"HasSubtract"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}},"sourceSpan":{"start":[31,1],"name":"src/Neon/Types/HasSubtract.purs","end":[34,1]}},{"comments":null,"title":"numberHasSubtract","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasSubtract"],"HasSubtract"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]}},"sourceSpan":{"start":[34,1],"name":"src/Neon/Types/HasSubtract.purs","end":[43,1]}}],"comments":"Represents types that can be subtracted from each other.\n\nLaws:\n- Inverse: `a - a = a + (zero - a) = zero`\n","title":"HasSubtract","fixity":null,"info":{"arguments":[["a",null]],"declType":"typeClass","superclasses":[[[["Neon","Types","HasZero"],"HasZero"],[{"tag":"TypeVar","contents":"a"}]]]},"sourceSpan":{"start":[19,1],"name":"src/Neon/Types/HasSubtract.purs","end":[28,1]}},{"children":[],"comments":"Alias for `subtract`.\n\n``` purescript\n3 - 2\n-- 1\n```\n","title":"(-)","fixity":{"associativity":"infixl","precedence":-1},"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[[[[["Neon","Types","HasSubtract"],"HasSubtract"],[{"tag":"TypeVar","contents":"a"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"a"}]}]}]},null]}},"sourceSpan":{"start":[43,1],"name":"src/Neon/Types/HasSubtract.purs","end":[44,1]}},{"children":[],"comments":"Negates a value. This is the same as subtracting the value from zero.\n\n``` purescript\nnegate 1\n-- -1\n```\n","title":"negate","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[[[[["Neon","Types","HasSubtract"],"HasSubtract"],[{"tag":"TypeVar","contents":"a"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"a"}]}]},null]}},"sourceSpan":{"start":[53,1],"name":"src/Neon/Types/HasSubtract.purs","end":[54,1]}},{"children":[],"comments":"Returns the absolute value of a value. If the value is negative, this\nreturns it negated. Otherwise it returns the value.\n\n``` purescript\nabs 1\n-- 1\nabs (-1)\n-- 1\n```\n","title":"abs","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[[[[["Neon","Types","HasCompare"],"HasCompare"],[{"tag":"TypeVar","contents":"a"}]],[[["Neon","Types","HasSubtract"],"HasSubtract"],[{"tag":"TypeVar","contents":"a"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"a"}]}]},null]}},"sourceSpan":{"start":[65,1],"name":"src/Neon/Types/HasSubtract.purs","end":[66,1]}}]},{"reExports":[],"name":"Neon.Types.HasToArray","comments":null,"declarations":[{"children":[{"comments":null,"title":"toArray","info":{"declType":"typeClassMember","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"b"}]}]}},"sourceSpan":null},{"comments":null,"title":"stringHasToArray","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasToArray"],"HasToArray"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Char"]}]}},"sourceSpan":{"start":[11,1],"name":"src/Neon/Types/HasToArray.purs","end":[12,35]}}],"comments":null,"title":"HasToArray","fixity":null,"info":{"arguments":[["a",null],["b",null]],"declType":"typeClass","superclasses":[]},"sourceSpan":{"start":[8,1],"name":"src/Neon/Types/HasToArray.purs","end":[11,1]}}]},{"reExports":[],"name":"Neon.Types.HasTop","comments":null,"declarations":[{"children":[{"comments":null,"title":"top","info":{"declType":"typeClassMember","type":{"tag":"TypeVar","contents":"a"}},"sourceSpan":null},{"comments":null,"title":"booleanHasTop","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasTop"],"HasTop"]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}},"sourceSpan":{"start":[27,1],"name":"src/Neon/Types/HasTop.purs","end":[30,1]}},{"comments":null,"title":"charHasTop","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasTop"],"HasTop"]},{"tag":"TypeConstructor","contents":[["Prim"],"Char"]}]}},"sourceSpan":{"start":[30,1],"name":"src/Neon/Types/HasTop.purs","end":[33,1]}},{"comments":null,"title":"functionHasTop","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasTop"],"HasTop"],[{"tag":"TypeVar","contents":"b"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasTop"],"HasTop"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}},"sourceSpan":{"start":[33,1],"name":"src/Neon/Types/HasTop.purs","end":[36,1]}},{"comments":null,"title":"intHasTop","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasTop"],"HasTop"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}},"sourceSpan":{"start":[36,1],"name":"src/Neon/Types/HasTop.purs","end":[39,1]}},{"comments":null,"title":"numberHasTop","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasTop"],"HasTop"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]}},"sourceSpan":{"start":[39,1],"name":"src/Neon/Types/HasTop.purs","end":[42,1]}},{"comments":null,"title":"orderingHasTop","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasTop"],"HasTop"]},{"tag":"TypeConstructor","contents":[["Neon","Values","Ordering"],"Ordering"]}]}},"sourceSpan":{"start":[42,1],"name":"src/Neon/Types/HasTop.purs","end":[43,9]}}],"comments":"Represents types that have an upper bound.\n\nLaws:\n- `top >= x`\n","title":"HasTop","fixity":null,"info":{"arguments":[["a",null]],"declType":"typeClass","superclasses":[[[["Neon","Types","HasCompare"],"HasCompare"],[{"tag":"TypeVar","contents":"a"}]]]},"sourceSpan":{"start":[18,1],"name":"src/Neon/Types/HasTop.purs","end":[27,1]}}]},{"reExports":[],"name":"Neon.Types.HasTraverse","comments":null,"declarations":[{"children":[{"comments":null,"title":"traverse","info":{"declType":"typeClassMember","type":{"tag":"ForAll","contents":["m",{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[[[[["Neon","Types","HasPure"],"HasPure"],[{"tag":"TypeVar","contents":"m"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"m"},{"tag":"TypeVar","contents":"b"}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"t"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"m"},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"t"},{"tag":"TypeVar","contents":"b"}]}}]}]}]}]},null]},null]},null]}},"sourceSpan":null},{"comments":null,"title":"arrayHasTraverse","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasTraverse"],"HasTraverse"]},{"tag":"TypeConstructor","contents":[["Prim"],"Array"]}]}},"sourceSpan":{"start":[35,1],"name":"src/Neon/Types/HasTraverse.purs","end":[38,1]}},{"comments":null,"title":"listHasTraverse","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasTraverse"],"HasTraverse"]},{"tag":"TypeConstructor","contents":[["Neon","Values","List"],"List"]}]}},"sourceSpan":{"start":[38,1],"name":"src/Neon/Types/HasTraverse.purs","end":[43,1]}},{"comments":null,"title":"maybeHasTraverse","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasTraverse"],"HasTraverse"]},{"tag":"TypeConstructor","contents":[["Neon","Values","Maybe"],"Maybe"]}]}},"sourceSpan":{"start":[43,1],"name":"src/Neon/Types/HasTraverse.purs","end":[54,1]}}],"comments":"Represents data structures that can be traversed from left to right.\nUnlike `HasFold`, these structures can be traversed while keeping their\nshape.\n\nLaws:\n- Naturality: `t >> traverse f = traverse (t >> f)`\n- Identity: `traverse Identity = Identity`\n- Composition: TODO\n","title":"HasTraverse","fixity":null,"info":{"arguments":[["t",null]],"declType":"typeClass","superclasses":[[[["Neon","Types","HasFold"],"HasFold"],[{"tag":"TypeVar","contents":"t"}]],[[["Neon","Types","HasMap"],"HasMap"],[{"tag":"TypeVar","contents":"t"}]]]},"sourceSpan":{"start":[25,1],"name":"src/Neon/Types/HasTraverse.purs","end":[35,1]}},{"children":[],"comments":"Evaluates actions from left to right and collects the results.\n\n``` purescript\nsequence [Just 1, Just 2]\n-- Just [1, 2]\n```\n","title":"sequence","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["m",{"tag":"ForAll","contents":["t",{"tag":"ConstrainedType","contents":[[[[["Neon","Types","HasPure"],"HasPure"],[{"tag":"TypeVar","contents":"m"}]],[[["Neon","Types","HasTraverse"],"HasTraverse"],[{"tag":"TypeVar","contents":"t"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"t"},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"m"},{"tag":"TypeVar","contents":"a"}]}}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"m"},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"t"},{"tag":"TypeVar","contents":"a"}]}}]}]}]},null]},null]},null]}},"sourceSpan":{"start":[54,1],"name":"src/Neon/Types/HasTraverse.purs","end":[55,1]}}]},{"reExports":[],"name":"Neon.Types.HasZero","comments":null,"declarations":[{"children":[{"comments":null,"title":"zero","info":{"declType":"typeClassMember","type":{"tag":"TypeVar","contents":"a"}},"sourceSpan":null},{"comments":null,"title":"arrayHasZero","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasZero"],"HasZero"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[23,1],"name":"src/Neon/Types/HasZero.purs","end":[26,1]}},{"comments":null,"title":"booleanHasZero","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasZero"],"HasZero"]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}},"sourceSpan":{"start":[26,1],"name":"src/Neon/Types/HasZero.purs","end":[29,1]}},{"comments":null,"title":"functionHasZero","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasZero"],"HasZero"],[{"tag":"TypeVar","contents":"b"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasZero"],"HasZero"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}},"sourceSpan":{"start":[29,1],"name":"src/Neon/Types/HasZero.purs","end":[32,1]}},{"comments":null,"title":"intHasZero","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasZero"],"HasZero"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}},"sourceSpan":{"start":[32,1],"name":"src/Neon/Types/HasZero.purs","end":[35,1]}},{"comments":null,"title":"numberHasZero","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasZero"],"HasZero"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]}},"sourceSpan":{"start":[35,1],"name":"src/Neon/Types/HasZero.purs","end":[38,1]}},{"comments":null,"title":"stringHasZero","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasZero"],"HasZero"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}},"sourceSpan":{"start":[38,1],"name":"src/Neon/Types/HasZero.purs","end":[39,10]}}],"comments":"Represents types that have an additive identity. This is also known as a\n[monoid](https://en.wikipedia.org/wiki/Monoid).\n\nLaws:\n- Identity: `zero + x = x + zero = x`\n","title":"HasZero","fixity":null,"info":{"arguments":[["a",null]],"declType":"typeClass","superclasses":[[[["Neon","Types","HasAdd"],"HasAdd"],[{"tag":"TypeVar","contents":"a"}]]]},"sourceSpan":{"start":[14,1],"name":"src/Neon/Types/HasZero.purs","end":[23,1]}}]},{"reExports":[],"name":"Neon.Types.IsEnumerable","comments":null,"declarations":[{"children":[{"comments":null,"title":"fromEnum","info":{"declType":"typeClassMember","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}},"sourceSpan":null},{"comments":null,"title":"toEnum","info":{"declType":"typeClassMember","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Maybe"],"Maybe"]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":null},{"comments":null,"title":"succ","info":{"declType":"typeClassMember","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Maybe"],"Maybe"]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":null},{"comments":null,"title":"pred","info":{"declType":"typeClassMember","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Maybe"],"Maybe"]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":null},{"comments":null,"title":"booleanIsEnumerable","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","IsEnumerable"],"IsEnumerable"]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}},"sourceSpan":{"start":[72,1],"name":"src/Neon/Types/IsEnumerable.purs","end":[87,1]}},{"comments":null,"title":"charIsEnumerable","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","IsEnumerable"],"IsEnumerable"]},{"tag":"TypeConstructor","contents":[["Prim"],"Char"]}]}},"sourceSpan":{"start":[87,1],"name":"src/Neon/Types/IsEnumerable.purs","end":[95,1]}},{"comments":null,"title":"intIsEnumerable","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","IsEnumerable"],"IsEnumerable"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}},"sourceSpan":{"start":[95,1],"name":"src/Neon/Types/IsEnumerable.purs","end":[101,1]}},{"comments":null,"title":"maybeIsEnumerable","info":{"declType":"instance","dependencies":[[[["Neon","Types","IsEnumerable"],"IsEnumerable"],[{"tag":"TypeVar","contents":"a"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","IsEnumerable"],"IsEnumerable"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Maybe"],"Maybe"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[101,1],"name":"src/Neon/Types/IsEnumerable.purs","end":[119,1]}},{"comments":null,"title":"orderingIsEnumerable","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","IsEnumerable"],"IsEnumerable"]},{"tag":"TypeConstructor","contents":[["Neon","Values","Ordering"],"Ordering"]}]}},"sourceSpan":{"start":[119,1],"name":"src/Neon/Types/IsEnumerable.purs","end":[138,1]}},{"comments":null,"title":"unitIsEnumerable","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","IsEnumerable"],"IsEnumerable"]},{"tag":"TypeConstructor","contents":[["Neon","Values","Unit"],"Unit"]}]}},"sourceSpan":{"start":[138,1],"name":"src/Neon/Types/IsEnumerable.purs","end":[150,1]}}],"comments":"Represents types that can be converted to and from integers.\n\nLaws:\n- `pred bottom = Nothing`\n- `succ top = Nothing`\n- `toEnum (fromEnum x) = Just x`\n- `compare x y = compare (fromEnum x) (fromEnum y)`\n","title":"IsEnumerable","fixity":null,"info":{"arguments":[["a",null]],"declType":"typeClass","superclasses":[[[["Neon","Types","HasBottom"],"HasBottom"],[{"tag":"TypeVar","contents":"a"}]],[[["Neon","Types","HasTop"],"HasTop"],[{"tag":"TypeVar","contents":"a"}]]]},"sourceSpan":{"start":[31,1],"name":"src/Neon/Types/IsEnumerable.purs","end":[72,1]}},{"children":[],"comments":"Returns a range of values.\n\n``` purescript\nrange 1 4\n-- [1, 2, 3, 4]\n```\n","title":"range","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[[[[["Neon","Types","IsEnumerable"],"IsEnumerable"],[{"tag":"TypeVar","contents":"a"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]}]}]}]},null]}},"sourceSpan":{"start":[150,1],"name":"src/Neon/Types/IsEnumerable.purs","end":[151,1]}}]},{"reExports":[{"moduleName":["Neon","Values","Constant"],"declarations":[{"children":[{"comments":null,"title":"Constant","info":{"arguments":[{"tag":"TypeVar","contents":"a"}],"declType":"dataConstructor"},"sourceSpan":null},{"comments":null,"title":"constantHasAdd","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasAdd"],"HasAdd"],[{"tag":"TypeVar","contents":"a"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasAdd"],"HasAdd"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Constant"],"Constant"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}},"sourceSpan":{"start":[33,1],"name":"src/Neon/Values/Constant.purs","end":[36,1]}},{"comments":null,"title":"constantHasAlternative","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasAdd"],"HasAdd"],[{"tag":"TypeVar","contents":"a"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasAlternative"],"HasAlternative"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Constant"],"Constant"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[36,1],"name":"src/Neon/Values/Constant.purs","end":[39,1]}},{"comments":null,"title":"constantHasAnd","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasAnd"],"HasAnd"],[{"tag":"TypeVar","contents":"a"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasAnd"],"HasAnd"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Constant"],"Constant"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}},"sourceSpan":{"start":[39,1],"name":"src/Neon/Values/Constant.purs","end":[42,1]}},{"comments":null,"title":"constantHasApply","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasAdd"],"HasAdd"],[{"tag":"TypeVar","contents":"a"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasApply"],"HasApply"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Constant"],"Constant"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[42,1],"name":"src/Neon/Values/Constant.purs","end":[45,1]}},{"comments":null,"title":"constantHasBind","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasZero"],"HasZero"],[{"tag":"TypeVar","contents":"a"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasBind"],"HasBind"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Constant"],"Constant"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[45,1],"name":"src/Neon/Values/Constant.purs","end":[48,1]}},{"comments":null,"title":"constantHasBottom","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasBottom"],"HasBottom"],[{"tag":"TypeVar","contents":"a"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasBottom"],"HasBottom"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Constant"],"Constant"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}},"sourceSpan":{"start":[48,1],"name":"src/Neon/Values/Constant.purs","end":[51,1]}},{"comments":null,"title":"constantHasCompare","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasCompare"],"HasCompare"],[{"tag":"TypeVar","contents":"a"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasCompare"],"HasCompare"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Constant"],"Constant"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}},"sourceSpan":{"start":[51,1],"name":"src/Neon/Values/Constant.purs","end":[54,1]}},{"comments":null,"title":"constantHasDivide","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasDivide"],"HasDivide"],[{"tag":"TypeVar","contents":"a"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasDivide"],"HasDivide"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Constant"],"Constant"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}},"sourceSpan":{"start":[54,1],"name":"src/Neon/Values/Constant.purs","end":[58,1]}},{"comments":null,"title":"constantHasEmpty","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasZero"],"HasZero"],[{"tag":"TypeVar","contents":"a"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasEmpty"],"HasEmpty"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Constant"],"Constant"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[58,1],"name":"src/Neon/Values/Constant.purs","end":[61,1]}},{"comments":null,"title":"constantHasEqual","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasEqual"],"HasEqual"],[{"tag":"TypeVar","contents":"a"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasEqual"],"HasEqual"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Constant"],"Constant"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}},"sourceSpan":{"start":[61,1],"name":"src/Neon/Values/Constant.purs","end":[64,1]}},{"comments":null,"title":"constantHasFold","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasFold"],"HasFold"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Constant"],"Constant"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[64,1],"name":"src/Neon/Values/Constant.purs","end":[68,1]}},{"comments":null,"title":"constantHasMap","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasMap"],"HasMap"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Constant"],"Constant"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[68,1],"name":"src/Neon/Values/Constant.purs","end":[71,1]}},{"comments":null,"title":"constantHasMultiply","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasMultiply"],"HasMultiply"],[{"tag":"TypeVar","contents":"a"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasMultiply"],"HasMultiply"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Constant"],"Constant"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}},"sourceSpan":{"start":[71,1],"name":"src/Neon/Values/Constant.purs","end":[74,1]}},{"comments":null,"title":"constantHasNot","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasNot"],"HasNot"],[{"tag":"TypeVar","contents":"a"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasNot"],"HasNot"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Constant"],"Constant"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}},"sourceSpan":{"start":[74,1],"name":"src/Neon/Values/Constant.purs","end":[77,1]}},{"comments":null,"title":"constantHasOne","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasOne"],"HasOne"],[{"tag":"TypeVar","contents":"a"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasOne"],"HasOne"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Constant"],"Constant"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}},"sourceSpan":{"start":[77,1],"name":"src/Neon/Values/Constant.purs","end":[80,1]}},{"comments":null,"title":"constantHasOr","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasOr"],"HasOr"],[{"tag":"TypeVar","contents":"a"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasOr"],"HasOr"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Constant"],"Constant"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}},"sourceSpan":{"start":[80,1],"name":"src/Neon/Values/Constant.purs","end":[83,1]}},{"comments":null,"title":"constantHasPower","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasPower"],"HasPower"],[{"tag":"TypeVar","contents":"a"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasPower"],"HasPower"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Constant"],"Constant"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}},"sourceSpan":{"start":[83,1],"name":"src/Neon/Values/Constant.purs","end":[86,1]}},{"comments":null,"title":"constantHasPure","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasZero"],"HasZero"],[{"tag":"TypeVar","contents":"a"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasPure"],"HasPure"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Constant"],"Constant"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[86,1],"name":"src/Neon/Values/Constant.purs","end":[89,1]}},{"comments":null,"title":"constantHasShow","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasShow"],"HasShow"],[{"tag":"TypeVar","contents":"a"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasShow"],"HasShow"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Constant"],"Constant"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}},"sourceSpan":{"start":[89,1],"name":"src/Neon/Values/Constant.purs","end":[92,1]}},{"comments":null,"title":"constantHasSubtract","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasSubtract"],"HasSubtract"],[{"tag":"TypeVar","contents":"a"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasSubtract"],"HasSubtract"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Constant"],"Constant"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}},"sourceSpan":{"start":[92,1],"name":"src/Neon/Values/Constant.purs","end":[95,1]}},{"comments":null,"title":"constantHasTop","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasTop"],"HasTop"],[{"tag":"TypeVar","contents":"a"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasTop"],"HasTop"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Constant"],"Constant"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}},"sourceSpan":{"start":[95,1],"name":"src/Neon/Values/Constant.purs","end":[98,1]}},{"comments":null,"title":"constantHasZero","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasZero"],"HasZero"],[{"tag":"TypeVar","contents":"a"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasZero"],"HasZero"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Constant"],"Constant"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}},"sourceSpan":{"start":[98,1],"name":"src/Neon/Values/Constant.purs","end":[101,1]}},{"comments":null,"title":"constantIsEnumerable","info":{"declType":"instance","dependencies":[[[["Neon","Types","IsEnumerable"],"IsEnumerable"],[{"tag":"TypeVar","contents":"a"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","IsEnumerable"],"IsEnumerable"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Constant"],"Constant"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}},"sourceSpan":{"start":[101,1],"name":"src/Neon/Values/Constant.purs","end":[113,1]}}],"comments":"A wrapper that ignores its second type argument.\n","title":"Constant","fixity":null,"info":{"declType":"data","dataDeclType":"newtype","typeArguments":[["a",null],["b",null]]},"sourceSpan":{"start":[31,1],"name":"src/Neon/Values/Constant.purs","end":[33,1]}},{"children":[],"comments":"Extracts the value from its wrapper.\n\n``` purescript\nrunConstant (Constant unit)\n-- unit\n```\n","title":"runConstant","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Constant"],"Constant"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeVar","contents":"a"}]},null]},null]}},"sourceSpan":{"start":[113,1],"name":"src/Neon/Values/Constant.purs","end":[114,1]}}]},{"moduleName":["Neon","Values","Dictionary"],"declarations":[{"children":[{"comments":null,"title":"dictionaryHasAdd","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasAdd"],"HasAdd"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Dictionary"],"Dictionary"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[30,1],"name":"src/Neon/Values/Dictionary.purs","end":[33,1]}},{"comments":null,"title":"dictionaryHasAlternative","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasAlternative"],"HasAlternative"]},{"tag":"TypeConstructor","contents":[["Neon","Values","Dictionary"],"Dictionary"]}]}},"sourceSpan":{"start":[33,1],"name":"src/Neon/Values/Dictionary.purs","end":[36,1]}},{"comments":null,"title":"dictionaryHasApply","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasApply"],"HasApply"]},{"tag":"TypeConstructor","contents":[["Neon","Values","Dictionary"],"Dictionary"]}]}},"sourceSpan":{"start":[36,1],"name":"src/Neon/Values/Dictionary.purs","end":[39,1]}},{"comments":null,"title":"dictionaryHasEmpty","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasEmpty"],"HasEmpty"]},{"tag":"TypeConstructor","contents":[["Neon","Values","Dictionary"],"Dictionary"]}]}},"sourceSpan":{"start":[39,1],"name":"src/Neon/Values/Dictionary.purs","end":[42,1]}},{"comments":null,"title":"dictionaryHasEqual","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasEqual"],"HasEqual"],[{"tag":"TypeVar","contents":"a"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasEqual"],"HasEqual"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Dictionary"],"Dictionary"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[42,1],"name":"src/Neon/Values/Dictionary.purs","end":[45,1]}},{"comments":null,"title":"dictionaryHasFold","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasFold"],"HasFold"]},{"tag":"TypeConstructor","contents":[["Neon","Values","Dictionary"],"Dictionary"]}]}},"sourceSpan":{"start":[45,1],"name":"src/Neon/Values/Dictionary.purs","end":[49,1]}},{"comments":null,"title":"dictionaryHasFromArray","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasFromArray"],"HasFromArray"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Pair"],"Pair"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeVar","contents":"a"}]}}]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Dictionary"],"Dictionary"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[49,1],"name":"src/Neon/Values/Dictionary.purs","end":[52,1]}},{"comments":null,"title":"dictionaryHasMap","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasMap"],"HasMap"]},{"tag":"TypeConstructor","contents":[["Neon","Values","Dictionary"],"Dictionary"]}]}},"sourceSpan":{"start":[52,1],"name":"src/Neon/Values/Dictionary.purs","end":[55,1]}},{"comments":null,"title":"dictionaryHasShow","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasShow"],"HasShow"],[{"tag":"TypeVar","contents":"a"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasShow"],"HasShow"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Dictionary"],"Dictionary"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[55,1],"name":"src/Neon/Values/Dictionary.purs","end":[58,1]}},{"comments":null,"title":"dictionaryHasZero","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasZero"],"HasZero"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Dictionary"],"Dictionary"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[58,1],"name":"src/Neon/Values/Dictionary.purs","end":[59,10]}}],"comments":"Represents a mapping between strings and values.\n","title":"Dictionary","fixity":null,"info":{"kind":{"tag":"FunKind","contents":[{"tag":"Star","contents":[]},{"tag":"Star","contents":[]}]},"declType":"externData"},"sourceSpan":{"start":[18,1],"name":"src/Neon/Values/Dictionary.purs","end":[20,1]}}]},{"moduleName":["Neon","Values","Either"],"declarations":[{"children":[{"comments":null,"title":"Left","info":{"arguments":[{"tag":"TypeVar","contents":"a"}],"declType":"dataConstructor"},"sourceSpan":null},{"comments":null,"title":"Right","info":{"arguments":[{"tag":"TypeVar","contents":"b"}],"declType":"dataConstructor"},"sourceSpan":null},{"comments":null,"title":"eitherHasAdd","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasAdd"],"HasAdd"],[{"tag":"TypeVar","contents":"b"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasAdd"],"HasAdd"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Either"],"Either"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}},"sourceSpan":{"start":[42,1],"name":"src/Neon/Values/Either.purs","end":[45,1]}},{"comments":null,"title":"eitherHasAlternative","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasAlternative"],"HasAlternative"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Either"],"Either"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[45,1],"name":"src/Neon/Values/Either.purs","end":[49,1]}},{"comments":null,"title":"eitherHasAnd","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasBottom"],"HasBottom"],[{"tag":"TypeVar","contents":"a"}]],[[["Neon","Types","HasTop"],"HasTop"],[{"tag":"TypeVar","contents":"a"}]],[[["Neon","Types","HasAnd"],"HasAnd"],[{"tag":"TypeVar","contents":"b"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasAnd"],"HasAnd"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Either"],"Either"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}},"sourceSpan":{"start":[49,1],"name":"src/Neon/Values/Either.purs","end":[52,1]}},{"comments":null,"title":"eitherHasApply","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasApply"],"HasApply"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Either"],"Either"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[52,1],"name":"src/Neon/Values/Either.purs","end":[56,1]}},{"comments":null,"title":"eitherHasBind","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasBind"],"HasBind"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Either"],"Either"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[56,1],"name":"src/Neon/Values/Either.purs","end":[60,1]}},{"comments":null,"title":"eitherHasBottom","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasBottom"],"HasBottom"],[{"tag":"TypeVar","contents":"a"}]],[[["Neon","Types","HasBottom"],"HasBottom"],[{"tag":"TypeVar","contents":"b"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasBottom"],"HasBottom"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Either"],"Either"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}},"sourceSpan":{"start":[60,1],"name":"src/Neon/Values/Either.purs","end":[63,1]}},{"comments":null,"title":"eitherHasCompare","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasCompare"],"HasCompare"],[{"tag":"TypeVar","contents":"a"}]],[[["Neon","Types","HasCompare"],"HasCompare"],[{"tag":"TypeVar","contents":"b"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasCompare"],"HasCompare"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Either"],"Either"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}},"sourceSpan":{"start":[63,1],"name":"src/Neon/Values/Either.purs","end":[69,1]}},{"comments":null,"title":"eitherHasDivide","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasDivide"],"HasDivide"],[{"tag":"TypeVar","contents":"b"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasDivide"],"HasDivide"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Either"],"Either"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}},"sourceSpan":{"start":[69,1],"name":"src/Neon/Values/Either.purs","end":[73,1]}},{"comments":null,"title":"eitherHasEqual","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasEqual"],"HasEqual"],[{"tag":"TypeVar","contents":"a"}]],[[["Neon","Types","HasEqual"],"HasEqual"],[{"tag":"TypeVar","contents":"b"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasEqual"],"HasEqual"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Either"],"Either"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}},"sourceSpan":{"start":[73,1],"name":"src/Neon/Values/Either.purs","end":[78,1]}},{"comments":null,"title":"eitherHasFold","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasFold"],"HasFold"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Either"],"Either"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[78,1],"name":"src/Neon/Values/Either.purs","end":[86,1]}},{"comments":null,"title":"eitherHasMap","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasMap"],"HasMap"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Either"],"Either"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[86,1],"name":"src/Neon/Values/Either.purs","end":[90,1]}},{"comments":null,"title":"eitherHasMultiply","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasMultiply"],"HasMultiply"],[{"tag":"TypeVar","contents":"b"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasMultiply"],"HasMultiply"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Either"],"Either"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}},"sourceSpan":{"start":[90,1],"name":"src/Neon/Values/Either.purs","end":[93,1]}},{"comments":null,"title":"eitherHasNot","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasBottom"],"HasBottom"],[{"tag":"TypeVar","contents":"a"}]],[[["Neon","Types","HasTop"],"HasTop"],[{"tag":"TypeVar","contents":"a"}]],[[["Neon","Types","HasNot"],"HasNot"],[{"tag":"TypeVar","contents":"b"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasNot"],"HasNot"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Either"],"Either"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}},"sourceSpan":{"start":[93,1],"name":"src/Neon/Values/Either.purs","end":[96,1]}},{"comments":null,"title":"eitherHasOne","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasOne"],"HasOne"],[{"tag":"TypeVar","contents":"b"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasOne"],"HasOne"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Either"],"Either"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}},"sourceSpan":{"start":[96,1],"name":"src/Neon/Values/Either.purs","end":[99,1]}},{"comments":null,"title":"eitherHasOr","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasBottom"],"HasBottom"],[{"tag":"TypeVar","contents":"a"}]],[[["Neon","Types","HasTop"],"HasTop"],[{"tag":"TypeVar","contents":"a"}]],[[["Neon","Types","HasOr"],"HasOr"],[{"tag":"TypeVar","contents":"b"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasOr"],"HasOr"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Either"],"Either"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}},"sourceSpan":{"start":[99,1],"name":"src/Neon/Values/Either.purs","end":[102,1]}},{"comments":null,"title":"eitherHasPure","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasPure"],"HasPure"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Either"],"Either"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[102,1],"name":"src/Neon/Values/Either.purs","end":[105,1]}},{"comments":null,"title":"eitherHasShow","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasShow"],"HasShow"],[{"tag":"TypeVar","contents":"a"}]],[[["Neon","Types","HasShow"],"HasShow"],[{"tag":"TypeVar","contents":"b"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasShow"],"HasShow"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Either"],"Either"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}},"sourceSpan":{"start":[105,1],"name":"src/Neon/Values/Either.purs","end":[109,1]}},{"comments":null,"title":"eitherHasSubtract","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasSubtract"],"HasSubtract"],[{"tag":"TypeVar","contents":"b"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasSubtract"],"HasSubtract"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Either"],"Either"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}},"sourceSpan":{"start":[109,1],"name":"src/Neon/Values/Either.purs","end":[112,1]}},{"comments":null,"title":"eitherHasTop","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasTop"],"HasTop"],[{"tag":"TypeVar","contents":"a"}]],[[["Neon","Types","HasTop"],"HasTop"],[{"tag":"TypeVar","contents":"b"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasTop"],"HasTop"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Either"],"Either"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}},"sourceSpan":{"start":[112,1],"name":"src/Neon/Values/Either.purs","end":[115,1]}},{"comments":null,"title":"eitherHasZero","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasZero"],"HasZero"],[{"tag":"TypeVar","contents":"b"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasZero"],"HasZero"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Either"],"Either"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}},"sourceSpan":{"start":[115,1],"name":"src/Neon/Values/Either.purs","end":[127,1]}}],"comments":"Represents a choice between two values. `Either` is conventially used for\nerror handling where `Left` represents failure and `Right` represents\nsuccess.\n","title":"Either","fixity":null,"info":{"declType":"data","dataDeclType":"data","typeArguments":[["a",null],["b",null]]},"sourceSpan":{"start":[38,1],"name":"src/Neon/Values/Either.purs","end":[42,1]}},{"children":[],"comments":"Applies the first function to `Left` values and the second function to\n`Right` values.\n\n``` purescript\neither (+ 2) (* 2) (Left 3)\n-- Left 5\neither (+ 2) (* 2) (Right 3)\n-- Right 6\n```\n","title":"either","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["c",{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"c"}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeVar","contents":"c"}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Either"],"Either"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeVar","contents":"c"}]}]}]},null]},null]},null]}},"sourceSpan":{"start":[127,1],"name":"src/Neon/Values/Either.purs","end":[128,1]}},{"children":[],"comments":"Converts an `Either` into a `Maybe`.\n\n``` purescript\nfromEither (Left unit)\n-- Nothing\nfromEither (Right unit)\n-- Just unit\n```\n","title":"fromEither","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["m",{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[[[[["Neon","Types","HasEmpty"],"HasEmpty"],[{"tag":"TypeVar","contents":"m"}]],[[["Neon","Types","HasPure"],"HasPure"],[{"tag":"TypeVar","contents":"m"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Either"],"Either"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"m"},{"tag":"TypeVar","contents":"b"}]}]}]},null]},null]},null]}},"sourceSpan":{"start":[166,1],"name":"src/Neon/Values/Either.purs","end":[167,1]}},{"children":[],"comments":"Returns `true` if the `Either` is a `Left` value. Returns `false`\notherwise.\n\n``` purescript\nisLeft (Left unit)\n-- true\nisLeft (Right unit)\n-- false\n```\n","title":"isLeft","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Either"],"Either"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]},null]},null]}},"sourceSpan":{"start":[141,1],"name":"src/Neon/Values/Either.purs","end":[142,1]}},{"children":[],"comments":"Returns `true` if the `Either` is a `Right` value. Returns `false`\notherwise.\n\n``` purescript\nisRight (Right unit)\n-- true\nisRight (Left unit)\n-- false\n```\n","title":"isRight","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Either"],"Either"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]},null]},null]}},"sourceSpan":{"start":[155,1],"name":"src/Neon/Values/Either.purs","end":[156,1]}},{"children":[],"comments":"Converts a `Maybe` into an `Either`.\n\n``` purescript\ntoEither unit Nothing\n-- Left unit\ntoEither unit (Just true)\n-- Right true\n```\n","title":"toEither","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Maybe"],"Maybe"]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Either"],"Either"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]}]},null]},null]}},"sourceSpan":{"start":[177,1],"name":"src/Neon/Values/Either.purs","end":[178,1]}}]},{"moduleName":["Neon","Values","Identity"],"declarations":[{"children":[{"comments":null,"title":"Identity","info":{"arguments":[{"tag":"TypeVar","contents":"a"}],"declType":"dataConstructor"},"sourceSpan":null},{"comments":null,"title":"identityHasAdd","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasAdd"],"HasAdd"],[{"tag":"TypeVar","contents":"a"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasAdd"],"HasAdd"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Identity"],"Identity"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[32,1],"name":"src/Neon/Values/Identity.purs","end":[35,1]}},{"comments":null,"title":"identityHasAnd","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasAnd"],"HasAnd"],[{"tag":"TypeVar","contents":"a"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasAnd"],"HasAnd"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Identity"],"Identity"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[35,1],"name":"src/Neon/Values/Identity.purs","end":[38,1]}},{"comments":null,"title":"identityHasApply","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasApply"],"HasApply"]},{"tag":"TypeConstructor","contents":[["Neon","Values","Identity"],"Identity"]}]}},"sourceSpan":{"start":[38,1],"name":"src/Neon/Values/Identity.purs","end":[41,1]}},{"comments":null,"title":"identityHasBind","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasBind"],"HasBind"]},{"tag":"TypeConstructor","contents":[["Neon","Values","Identity"],"Identity"]}]}},"sourceSpan":{"start":[41,1],"name":"src/Neon/Values/Identity.purs","end":[44,1]}},{"comments":null,"title":"identityHasBottom","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasBottom"],"HasBottom"],[{"tag":"TypeVar","contents":"a"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasBottom"],"HasBottom"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Identity"],"Identity"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[44,1],"name":"src/Neon/Values/Identity.purs","end":[47,1]}},{"comments":null,"title":"identityHasCompare","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasCompare"],"HasCompare"],[{"tag":"TypeVar","contents":"a"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasCompare"],"HasCompare"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Identity"],"Identity"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[47,1],"name":"src/Neon/Values/Identity.purs","end":[50,1]}},{"comments":null,"title":"identityHasDivide","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasDivide"],"HasDivide"],[{"tag":"TypeVar","contents":"a"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasDivide"],"HasDivide"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Identity"],"Identity"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[50,1],"name":"src/Neon/Values/Identity.purs","end":[54,1]}},{"comments":null,"title":"identityHasEqual","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasEqual"],"HasEqual"],[{"tag":"TypeVar","contents":"a"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasEqual"],"HasEqual"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Identity"],"Identity"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[54,1],"name":"src/Neon/Values/Identity.purs","end":[57,1]}},{"comments":null,"title":"identityHasFold","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasFold"],"HasFold"]},{"tag":"TypeConstructor","contents":[["Neon","Values","Identity"],"Identity"]}]}},"sourceSpan":{"start":[57,1],"name":"src/Neon/Values/Identity.purs","end":[61,1]}},{"comments":null,"title":"identityHasMap","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasMap"],"HasMap"]},{"tag":"TypeConstructor","contents":[["Neon","Values","Identity"],"Identity"]}]}},"sourceSpan":{"start":[61,1],"name":"src/Neon/Values/Identity.purs","end":[64,1]}},{"comments":null,"title":"identityHasMultiply","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasMultiply"],"HasMultiply"],[{"tag":"TypeVar","contents":"a"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasMultiply"],"HasMultiply"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Identity"],"Identity"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[64,1],"name":"src/Neon/Values/Identity.purs","end":[67,1]}},{"comments":null,"title":"identityHasNot","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasNot"],"HasNot"],[{"tag":"TypeVar","contents":"a"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasNot"],"HasNot"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Identity"],"Identity"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[67,1],"name":"src/Neon/Values/Identity.purs","end":[70,1]}},{"comments":null,"title":"identityHasOne","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasOne"],"HasOne"],[{"tag":"TypeVar","contents":"a"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasOne"],"HasOne"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Identity"],"Identity"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[70,1],"name":"src/Neon/Values/Identity.purs","end":[73,1]}},{"comments":null,"title":"identityHasOr","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasOr"],"HasOr"],[{"tag":"TypeVar","contents":"a"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasOr"],"HasOr"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Identity"],"Identity"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[73,1],"name":"src/Neon/Values/Identity.purs","end":[76,1]}},{"comments":null,"title":"identityHasPure","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasPure"],"HasPure"]},{"tag":"TypeConstructor","contents":[["Neon","Values","Identity"],"Identity"]}]}},"sourceSpan":{"start":[76,1],"name":"src/Neon/Values/Identity.purs","end":[79,1]}},{"comments":null,"title":"identityHasShow","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasShow"],"HasShow"],[{"tag":"TypeVar","contents":"a"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasShow"],"HasShow"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Identity"],"Identity"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[79,1],"name":"src/Neon/Values/Identity.purs","end":[82,1]}},{"comments":null,"title":"identityHasSubtract","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasSubtract"],"HasSubtract"],[{"tag":"TypeVar","contents":"a"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasSubtract"],"HasSubtract"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Identity"],"Identity"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[82,1],"name":"src/Neon/Values/Identity.purs","end":[85,1]}},{"comments":null,"title":"identityHasTop","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasTop"],"HasTop"],[{"tag":"TypeVar","contents":"a"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasTop"],"HasTop"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Identity"],"Identity"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[85,1],"name":"src/Neon/Values/Identity.purs","end":[88,1]}},{"comments":null,"title":"identityHasZero","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasZero"],"HasZero"],[{"tag":"TypeVar","contents":"a"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasZero"],"HasZero"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Identity"],"Identity"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[88,1],"name":"src/Neon/Values/Identity.purs","end":[91,1]}},{"comments":null,"title":"identityIsEnumerable","info":{"declType":"instance","dependencies":[[[["Neon","Types","IsEnumerable"],"IsEnumerable"],[{"tag":"TypeVar","contents":"a"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","IsEnumerable"],"IsEnumerable"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Identity"],"Identity"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[91,1],"name":"src/Neon/Values/Identity.purs","end":[103,1]}}],"comments":"A simple wrapper. This is most useful as the base of a monad transformer\nstack. That means you can use this as an \"empty\" monad and layer others on\ntop of it.\n","title":"Identity","fixity":null,"info":{"declType":"data","dataDeclType":"newtype","typeArguments":[["a",null]]},"sourceSpan":{"start":[30,1],"name":"src/Neon/Values/Identity.purs","end":[32,1]}},{"children":[],"comments":"Extracts the value from its wrapper.\n\n``` purescript\nrunIdentity (Identity unit)\n-- unit\n```\n","title":"runIdentity","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Identity"],"Identity"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeVar","contents":"a"}]},null]}},"sourceSpan":{"start":[103,1],"name":"src/Neon/Values/Identity.purs","end":[104,1]}}]},{"moduleName":["Neon","Values","List"],"declarations":[{"children":[{"comments":null,"title":"Nil","info":{"arguments":[],"declType":"dataConstructor"},"sourceSpan":null},{"comments":null,"title":"Cons","info":{"arguments":[{"tag":"TypeVar","contents":"a"},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","List"],"List"]},{"tag":"TypeVar","contents":"a"}]}}],"declType":"dataConstructor"},"sourceSpan":null},{"comments":null,"title":"listHasEqual","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasEqual"],"HasEqual"],[{"tag":"TypeVar","contents":"a"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasEqual"],"HasEqual"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","List"],"List"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[19,1],"name":"src/Neon/Values/List.purs","end":[24,1]}},{"comments":null,"title":"listHasFold","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasFold"],"HasFold"]},{"tag":"TypeConstructor","contents":[["Neon","Values","List"],"List"]}]}},"sourceSpan":{"start":[24,1],"name":"src/Neon/Values/List.purs","end":[32,1]}},{"comments":null,"title":"listHasFromArray","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasFromArray"],"HasFromArray"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","List"],"List"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[32,1],"name":"src/Neon/Values/List.purs","end":[35,1]}},{"comments":null,"title":"listHasMap","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasMap"],"HasMap"]},{"tag":"TypeConstructor","contents":[["Neon","Values","List"],"List"]}]}},"sourceSpan":{"start":[35,1],"name":"src/Neon/Values/List.purs","end":[40,1]}},{"comments":null,"title":"listHasShow","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasShow"],"HasShow"],[{"tag":"TypeVar","contents":"a"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasShow"],"HasShow"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","List"],"List"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[40,1],"name":"src/Neon/Values/List.purs","end":[45,1]}},{"comments":null,"title":"listHasToArray","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasToArray"],"HasToArray"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","List"],"List"]},{"tag":"TypeVar","contents":"a"}]}}]},{"tag":"TypeVar","contents":"a"}]}},"sourceSpan":{"start":[45,1],"name":"src/Neon/Values/List.purs","end":[46,37]}}],"comments":"Represents a linked list of values.\n","title":"List","fixity":null,"info":{"declType":"data","dataDeclType":"data","typeArguments":[["a",null]]},"sourceSpan":{"start":[15,1],"name":"src/Neon/Values/List.purs","end":[19,1]}}]},{"moduleName":["Neon","Values","Maybe"],"declarations":[{"children":[{"comments":null,"title":"Nothing","info":{"arguments":[],"declType":"dataConstructor"},"sourceSpan":null},{"comments":null,"title":"Just","info":{"arguments":[{"tag":"TypeVar","contents":"a"}],"declType":"dataConstructor"},"sourceSpan":null},{"comments":null,"title":"maybeHasAdd","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasAdd"],"HasAdd"],[{"tag":"TypeVar","contents":"a"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasAdd"],"HasAdd"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Maybe"],"Maybe"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[40,1],"name":"src/Neon/Values/Maybe.purs","end":[43,1]}},{"comments":null,"title":"maybeHasAlternative","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasAlternative"],"HasAlternative"]},{"tag":"TypeConstructor","contents":[["Neon","Values","Maybe"],"Maybe"]}]}},"sourceSpan":{"start":[43,1],"name":"src/Neon/Values/Maybe.purs","end":[47,1]}},{"comments":null,"title":"maybeHasAnd","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasAnd"],"HasAnd"],[{"tag":"TypeVar","contents":"a"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasAnd"],"HasAnd"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Maybe"],"Maybe"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[47,1],"name":"src/Neon/Values/Maybe.purs","end":[50,1]}},{"comments":null,"title":"maybeHasApply","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasApply"],"HasApply"]},{"tag":"TypeConstructor","contents":[["Neon","Values","Maybe"],"Maybe"]}]}},"sourceSpan":{"start":[50,1],"name":"src/Neon/Values/Maybe.purs","end":[54,1]}},{"comments":null,"title":"maybeHasBind","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasBind"],"HasBind"]},{"tag":"TypeConstructor","contents":[["Neon","Values","Maybe"],"Maybe"]}]}},"sourceSpan":{"start":[54,1],"name":"src/Neon/Values/Maybe.purs","end":[58,1]}},{"comments":null,"title":"maybeHasBottom","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasBottom"],"HasBottom"],[{"tag":"TypeVar","contents":"a"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasBottom"],"HasBottom"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Maybe"],"Maybe"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[58,1],"name":"src/Neon/Values/Maybe.purs","end":[61,1]}},{"comments":null,"title":"maybeHasCompare","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasCompare"],"HasCompare"],[{"tag":"TypeVar","contents":"a"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasCompare"],"HasCompare"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Maybe"],"Maybe"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[61,1],"name":"src/Neon/Values/Maybe.purs","end":[67,1]}},{"comments":null,"title":"maybeHasDivide","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasDivide"],"HasDivide"],[{"tag":"TypeVar","contents":"a"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasDivide"],"HasDivide"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Maybe"],"Maybe"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[67,1],"name":"src/Neon/Values/Maybe.purs","end":[71,1]}},{"comments":null,"title":"maybeHasEmpty","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasEmpty"],"HasEmpty"]},{"tag":"TypeConstructor","contents":[["Neon","Values","Maybe"],"Maybe"]}]}},"sourceSpan":{"start":[71,1],"name":"src/Neon/Values/Maybe.purs","end":[74,1]}},{"comments":null,"title":"maybeHasEqual","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasEqual"],"HasEqual"],[{"tag":"TypeVar","contents":"a"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasEqual"],"HasEqual"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Maybe"],"Maybe"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[74,1],"name":"src/Neon/Values/Maybe.purs","end":[79,1]}},{"comments":null,"title":"maybeHasFold","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasFold"],"HasFold"]},{"tag":"TypeConstructor","contents":[["Neon","Values","Maybe"],"Maybe"]}]}},"sourceSpan":{"start":[79,1],"name":"src/Neon/Values/Maybe.purs","end":[87,1]}},{"comments":null,"title":"maybeHasMap","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasMap"],"HasMap"]},{"tag":"TypeConstructor","contents":[["Neon","Values","Maybe"],"Maybe"]}]}},"sourceSpan":{"start":[87,1],"name":"src/Neon/Values/Maybe.purs","end":[91,1]}},{"comments":null,"title":"maybeHasMultiply","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasMultiply"],"HasMultiply"],[{"tag":"TypeVar","contents":"a"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasMultiply"],"HasMultiply"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Maybe"],"Maybe"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[91,1],"name":"src/Neon/Values/Maybe.purs","end":[94,1]}},{"comments":null,"title":"maybeHasNot","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasNot"],"HasNot"],[{"tag":"TypeVar","contents":"a"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasNot"],"HasNot"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Maybe"],"Maybe"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[94,1],"name":"src/Neon/Values/Maybe.purs","end":[97,1]}},{"comments":null,"title":"maybeHasOne","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasOne"],"HasOne"],[{"tag":"TypeVar","contents":"a"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasOne"],"HasOne"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Maybe"],"Maybe"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[97,1],"name":"src/Neon/Values/Maybe.purs","end":[100,1]}},{"comments":null,"title":"maybeHasOr","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasOr"],"HasOr"],[{"tag":"TypeVar","contents":"a"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasOr"],"HasOr"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Maybe"],"Maybe"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[100,1],"name":"src/Neon/Values/Maybe.purs","end":[103,1]}},{"comments":null,"title":"maybeHasPure","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasPure"],"HasPure"]},{"tag":"TypeConstructor","contents":[["Neon","Values","Maybe"],"Maybe"]}]}},"sourceSpan":{"start":[103,1],"name":"src/Neon/Values/Maybe.purs","end":[106,1]}},{"comments":null,"title":"maybeHasShow","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasShow"],"HasShow"],[{"tag":"TypeVar","contents":"a"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasShow"],"HasShow"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Maybe"],"Maybe"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[106,1],"name":"src/Neon/Values/Maybe.purs","end":[110,1]}},{"comments":null,"title":"maybeHasSubtract","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasSubtract"],"HasSubtract"],[{"tag":"TypeVar","contents":"a"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasSubtract"],"HasSubtract"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Maybe"],"Maybe"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[110,1],"name":"src/Neon/Values/Maybe.purs","end":[113,1]}},{"comments":null,"title":"maybeHasTop","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasTop"],"HasTop"],[{"tag":"TypeVar","contents":"a"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasTop"],"HasTop"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Maybe"],"Maybe"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[113,1],"name":"src/Neon/Values/Maybe.purs","end":[116,1]}},{"comments":null,"title":"maybeHasZero","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasZero"],"HasZero"],[{"tag":"TypeVar","contents":"a"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasZero"],"HasZero"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Maybe"],"Maybe"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[116,1],"name":"src/Neon/Values/Maybe.purs","end":[128,1]}}],"comments":"Represents an optional value. This is similar to `null` in other\nlanguages, where `Nothing` is `null` and `Just x` is `x`.\n","title":"Maybe","fixity":null,"info":{"declType":"data","dataDeclType":"data","typeArguments":[["a",null]]},"sourceSpan":{"start":[36,1],"name":"src/Neon/Values/Maybe.purs","end":[40,1]}},{"children":[],"comments":"Returns `true` if the `Maybe` is `Just x`. Returns `false` otherwise.\n\n``` purescript\nisJust (Just 1)\n-- true\nisJust Nothing\n-- false\n```\n","title":"isJust","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Maybe"],"Maybe"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]},null]}},"sourceSpan":{"start":[141,1],"name":"src/Neon/Values/Maybe.purs","end":[142,1]}},{"children":[],"comments":"Returns `true` if the `Maybe` is `Nothing`. Returns `false` otherwise.\n\n``` purescript\nisNothing Nothing\n-- true\nisNothing (Just 1)\n-- false\n```\n","title":"isNothing","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Maybe"],"Maybe"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]},null]}},"sourceSpan":{"start":[152,1],"name":"src/Neon/Values/Maybe.purs","end":[153,1]}},{"children":[],"comments":"Returns the default value if the `Maybe` is `Nothing`. If instead the\n`Maybe` is `Just x`, call the function with `x`.\n\n``` purescript\nmaybe 0 (+ 1) Nothing\n-- 0\nmaybe 0 (+ 1) (Just 2)\n-- 3\n```\n","title":"maybe","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Maybe"],"Maybe"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeVar","contents":"b"}]}]}]},null]},null]}},"sourceSpan":{"start":[128,1],"name":"src/Neon/Values/Maybe.purs","end":[129,1]}},{"children":[],"comments":"Returns the default value if the `Maybe` is `Nothing`. If instead the\n`Maybe` is `Just x`, return `x`.\n\n``` purescript\nwithDefault 0 Nothing\n-- 0\nwithDefault 0 (Just 2)\n-- 2\n```\n","title":"withDefault","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Maybe"],"Maybe"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeVar","contents":"a"}]}]},null]}},"sourceSpan":{"start":[164,1],"name":"src/Neon/Values/Maybe.purs","end":[165,1]}}]},{"moduleName":["Neon","Values","Nullable"],"declarations":[{"children":[{"comments":null,"title":"nullableHasEqual","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasEqual"],"HasEqual"],[{"tag":"TypeVar","contents":"a"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasEqual"],"HasEqual"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Nullable"],"Nullable"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[30,1],"name":"src/Neon/Values/Nullable.purs","end":[35,1]}},{"comments":null,"title":"nullableHasShow","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasShow"],"HasShow"],[{"tag":"TypeVar","contents":"a"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasShow"],"HasShow"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Nullable"],"Nullable"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[35,1],"name":"src/Neon/Values/Nullable.purs","end":[44,1]}}],"comments":"Represents values that can be null. This is different than `Maybe` because\nit has no runtime overhead.\n","title":"Nullable","fixity":null,"info":{"kind":{"tag":"FunKind","contents":[{"tag":"Star","contents":[]},{"tag":"Star","contents":[]}]},"declType":"externData"},"sourceSpan":{"start":[15,1],"name":"src/Neon/Values/Nullable.purs","end":[17,1]}},{"children":[],"comments":"Converts a `Nullable` value into some other container. Typically this is\n`Maybe`.\n\n``` purescript\nfromNullable (toNullable (Just unit))\n-- Just unit\n```\n","title":"fromNullable","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["m",{"tag":"ConstrainedType","contents":[[[[["Neon","Types","HasEmpty"],"HasEmpty"],[{"tag":"TypeVar","contents":"m"}]],[[["Neon","Types","HasPure"],"HasPure"],[{"tag":"TypeVar","contents":"m"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Nullable"],"Nullable"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"m"},{"tag":"TypeVar","contents":"a"}]}]}]},null]},null]}},"sourceSpan":{"start":[28,1],"name":"src/Neon/Values/Nullable.purs","end":[30,1]}},{"children":[],"comments":"Converts a `Maybe` value into a `Nullable` value.\n\n``` purescript\nshow (toNullable (Just unit))\n-- \"unit\"\n```\n","title":"toNullable","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Maybe"],"Maybe"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Nullable"],"Nullable"]},{"tag":"TypeVar","contents":"a"}]}]},null]}},"sourceSpan":{"start":[44,1],"name":"src/Neon/Values/Nullable.purs","end":[45,1]}}]},{"moduleName":["Neon","Values","Ordering"],"declarations":[{"children":[{"comments":null,"title":"LessThan","info":{"arguments":[],"declType":"dataConstructor"},"sourceSpan":null},{"comments":null,"title":"EqualTo","info":{"arguments":[],"declType":"dataConstructor"},"sourceSpan":null},{"comments":null,"title":"GreaterThan","info":{"arguments":[],"declType":"dataConstructor"},"sourceSpan":null},{"comments":null,"title":"orderingHasEqual","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasEqual"],"HasEqual"]},{"tag":"TypeConstructor","contents":[["Neon","Values","Ordering"],"Ordering"]}]}},"sourceSpan":{"start":[14,1],"name":"src/Neon/Values/Ordering.purs","end":[26,1]}},{"comments":null,"title":"orderingHasShow","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasShow"],"HasShow"]},{"tag":"TypeConstructor","contents":[["Neon","Values","Ordering"],"Ordering"]}]}},"sourceSpan":{"start":[26,1],"name":"src/Neon/Values/Ordering.purs","end":[30,20]}}],"comments":"Represents the possible outcomes from comparing two values.\n","title":"Ordering","fixity":null,"info":{"declType":"data","dataDeclType":"data","typeArguments":[]},"sourceSpan":{"start":[9,1],"name":"src/Neon/Values/Ordering.purs","end":[14,1]}}]},{"moduleName":["Neon","Values","Pair"],"declarations":[{"children":[{"comments":null,"title":"Pair","info":{"arguments":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Object"]},{"tag":"RCons","contents":["first",{"tag":"TypeVar","contents":"a"},{"tag":"RCons","contents":["second",{"tag":"TypeVar","contents":"b"},{"tag":"REmpty","contents":[]}]}]}]}],"declType":"dataConstructor"},"sourceSpan":null},{"comments":null,"title":"pairHasAdd","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasAdd"],"HasAdd"],[{"tag":"TypeVar","contents":"a"}]],[[["Neon","Types","HasAdd"],"HasAdd"],[{"tag":"TypeVar","contents":"b"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasAdd"],"HasAdd"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Pair"],"Pair"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}},"sourceSpan":{"start":[36,1],"name":"src/Neon/Values/Pair.purs","end":[39,1]}},{"comments":null,"title":"pairHasAnd","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasAnd"],"HasAnd"],[{"tag":"TypeVar","contents":"a"}]],[[["Neon","Types","HasAnd"],"HasAnd"],[{"tag":"TypeVar","contents":"b"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasAnd"],"HasAnd"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Pair"],"Pair"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}},"sourceSpan":{"start":[39,1],"name":"src/Neon/Values/Pair.purs","end":[42,1]}},{"comments":null,"title":"pairHasApply","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasAdd"],"HasAdd"],[{"tag":"TypeVar","contents":"a"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasApply"],"HasApply"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Pair"],"Pair"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[42,1],"name":"src/Neon/Values/Pair.purs","end":[45,1]}},{"comments":null,"title":"pairHasBind","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasZero"],"HasZero"],[{"tag":"TypeVar","contents":"a"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasBind"],"HasBind"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Pair"],"Pair"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[45,1],"name":"src/Neon/Values/Pair.purs","end":[49,1]}},{"comments":null,"title":"pairHasBottom","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasBottom"],"HasBottom"],[{"tag":"TypeVar","contents":"a"}]],[[["Neon","Types","HasBottom"],"HasBottom"],[{"tag":"TypeVar","contents":"b"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasBottom"],"HasBottom"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Pair"],"Pair"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}},"sourceSpan":{"start":[49,1],"name":"src/Neon/Values/Pair.purs","end":[52,1]}},{"comments":null,"title":"pairHasCompare","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasCompare"],"HasCompare"],[{"tag":"TypeVar","contents":"a"}]],[[["Neon","Types","HasCompare"],"HasCompare"],[{"tag":"TypeVar","contents":"b"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasCompare"],"HasCompare"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Pair"],"Pair"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}},"sourceSpan":{"start":[52,1],"name":"src/Neon/Values/Pair.purs","end":[57,1]}},{"comments":null,"title":"pairHasCompose","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasCompose"],"HasCompose"]},{"tag":"TypeConstructor","contents":[["Neon","Values","Pair"],"Pair"]}]}},"sourceSpan":{"start":[57,1],"name":"src/Neon/Values/Pair.purs","end":[60,1]}},{"comments":null,"title":"pairHasDivide","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasDivide"],"HasDivide"],[{"tag":"TypeVar","contents":"a"}]],[[["Neon","Types","HasDivide"],"HasDivide"],[{"tag":"TypeVar","contents":"b"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasDivide"],"HasDivide"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Pair"],"Pair"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}},"sourceSpan":{"start":[60,1],"name":"src/Neon/Values/Pair.purs","end":[64,1]}},{"comments":null,"title":"pairHasEqual","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasEqual"],"HasEqual"],[{"tag":"TypeVar","contents":"a"}]],[[["Neon","Types","HasEqual"],"HasEqual"],[{"tag":"TypeVar","contents":"b"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasEqual"],"HasEqual"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Pair"],"Pair"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}},"sourceSpan":{"start":[64,1],"name":"src/Neon/Values/Pair.purs","end":[67,1]}},{"comments":null,"title":"pairHasFold","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasFold"],"HasFold"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Pair"],"Pair"]},{"tag":"TypeVar","contents":"x"}]}}]}},"sourceSpan":{"start":[67,1],"name":"src/Neon/Values/Pair.purs","end":[71,1]}},{"comments":null,"title":"pairHasMap","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasMap"],"HasMap"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Pair"],"Pair"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[71,1],"name":"src/Neon/Values/Pair.purs","end":[74,1]}},{"comments":null,"title":"pairHasMultiply","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasMultiply"],"HasMultiply"],[{"tag":"TypeVar","contents":"a"}]],[[["Neon","Types","HasMultiply"],"HasMultiply"],[{"tag":"TypeVar","contents":"b"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasMultiply"],"HasMultiply"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Pair"],"Pair"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}},"sourceSpan":{"start":[74,1],"name":"src/Neon/Values/Pair.purs","end":[77,1]}},{"comments":null,"title":"pairHasNot","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasNot"],"HasNot"],[{"tag":"TypeVar","contents":"a"}]],[[["Neon","Types","HasNot"],"HasNot"],[{"tag":"TypeVar","contents":"b"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasNot"],"HasNot"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Pair"],"Pair"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}},"sourceSpan":{"start":[77,1],"name":"src/Neon/Values/Pair.purs","end":[80,1]}},{"comments":null,"title":"pairHasOne","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasOne"],"HasOne"],[{"tag":"TypeVar","contents":"a"}]],[[["Neon","Types","HasOne"],"HasOne"],[{"tag":"TypeVar","contents":"b"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasOne"],"HasOne"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Pair"],"Pair"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}},"sourceSpan":{"start":[80,1],"name":"src/Neon/Values/Pair.purs","end":[83,1]}},{"comments":null,"title":"pairHasOr","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasOr"],"HasOr"],[{"tag":"TypeVar","contents":"a"}]],[[["Neon","Types","HasOr"],"HasOr"],[{"tag":"TypeVar","contents":"b"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasOr"],"HasOr"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Pair"],"Pair"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}},"sourceSpan":{"start":[83,1],"name":"src/Neon/Values/Pair.purs","end":[86,1]}},{"comments":null,"title":"pairHasPure","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasZero"],"HasZero"],[{"tag":"TypeVar","contents":"a"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasPure"],"HasPure"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Pair"],"Pair"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[86,1],"name":"src/Neon/Values/Pair.purs","end":[89,1]}},{"comments":null,"title":"pairHasShow","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasShow"],"HasShow"],[{"tag":"TypeVar","contents":"a"}]],[[["Neon","Types","HasShow"],"HasShow"],[{"tag":"TypeVar","contents":"b"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasShow"],"HasShow"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Pair"],"Pair"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}},"sourceSpan":{"start":[89,1],"name":"src/Neon/Values/Pair.purs","end":[96,1]}},{"comments":null,"title":"pairHasSubtract","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasSubtract"],"HasSubtract"],[{"tag":"TypeVar","contents":"a"}]],[[["Neon","Types","HasSubtract"],"HasSubtract"],[{"tag":"TypeVar","contents":"b"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasSubtract"],"HasSubtract"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Pair"],"Pair"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}},"sourceSpan":{"start":[96,1],"name":"src/Neon/Values/Pair.purs","end":[99,1]}},{"comments":null,"title":"pairHasTop","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasTop"],"HasTop"],[{"tag":"TypeVar","contents":"a"}]],[[["Neon","Types","HasTop"],"HasTop"],[{"tag":"TypeVar","contents":"b"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasTop"],"HasTop"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Pair"],"Pair"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}},"sourceSpan":{"start":[99,1],"name":"src/Neon/Values/Pair.purs","end":[102,1]}},{"comments":null,"title":"pairHasZero","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasZero"],"HasZero"],[{"tag":"TypeVar","contents":"a"}]],[[["Neon","Types","HasZero"],"HasZero"],[{"tag":"TypeVar","contents":"b"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasZero"],"HasZero"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Pair"],"Pair"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}},"sourceSpan":{"start":[102,1],"name":"src/Neon/Values/Pair.purs","end":[112,1]}}],"comments":"Represents a pair of values. That is, a pair contains both values at the\nsame time, unlike `Either` which only has one. Pairs are also known as\ntuples.\n","title":"Pair","fixity":null,"info":{"declType":"data","dataDeclType":"newtype","typeArguments":[["a",null],["b",null]]},"sourceSpan":{"start":[34,1],"name":"src/Neon/Values/Pair.purs","end":[36,1]}},{"children":[],"comments":"Converts a function that takes a pair into one that takes two arguments.\n\n``` purescript\nlet f (Pair x) = x.first + x.second\nuncurry f \"race\" \"car\"\n-- \"racecar\"\n```\n","title":"curry","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["c",{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Pair"],"Pair"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeVar","contents":"c"}]}}]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeVar","contents":"c"}]}]}}]},null]},null]},null]}},"sourceSpan":{"start":[122,1],"name":"src/Neon/Values/Pair.purs","end":[123,1]}},{"children":[],"comments":"Creates a pair. This is useful to avoid the `Pair` constructor and record\nboilerplate.\n\n``` purescript\npair 'x' 1 == Pair { first: 'x', second: 1 }\n-- true\n```\n","title":"pair","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Pair"],"Pair"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]}]},null]},null]}},"sourceSpan":{"start":[112,1],"name":"src/Neon/Values/Pair.purs","end":[113,1]}},{"children":[],"comments":"Swaps the elements of the pair.\n\n``` purescript\nswap (pair 1 2)\n-- pair 2 1\n```\n","title":"swap","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Pair"],"Pair"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Pair"],"Pair"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeVar","contents":"a"}]}]},null]},null]}},"sourceSpan":{"start":[140,1],"name":"src/Neon/Values/Pair.purs","end":[141,1]}},{"children":[],"comments":"Converts a function that takes two arguments into one that takes a pair.\n\n``` purescript\ncurry (+) (pair \"race\" \"car\")\n-- \"racecar\"\n```\n","title":"uncurry","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["c",{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeVar","contents":"c"}]}]}}]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Pair"],"Pair"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeVar","contents":"c"}]}}]},null]},null]},null]}},"sourceSpan":{"start":[131,1],"name":"src/Neon/Values/Pair.purs","end":[132,1]}}]},{"moduleName":["Neon","Values","Proxy"],"declarations":[{"children":[{"comments":null,"title":"Proxy","info":{"arguments":[],"declType":"dataConstructor"},"sourceSpan":null},{"comments":null,"title":"proxyHasEqual","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasEqual"],"HasEqual"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Proxy"],"Proxy"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[11,1],"name":"src/Neon/Values/Proxy.purs","end":[14,1]}},{"comments":null,"title":"proxyHasShow","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasShow"],"HasShow"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Proxy"],"Proxy"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[14,1],"name":"src/Neon/Values/Proxy.purs","end":[15,12]}}],"comments":"A value that represents a type.\n","title":"Proxy","fixity":null,"info":{"declType":"data","dataDeclType":"data","typeArguments":[["a",null]]},"sourceSpan":{"start":[9,1],"name":"src/Neon/Values/Proxy.purs","end":[11,1]}}]},{"moduleName":["Neon","Values","Regex"],"declarations":[{"children":[{"comments":null,"title":"regexHasEqual","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasEqual"],"HasEqual"]},{"tag":"TypeConstructor","contents":[["Neon","Values","Regex"],"Regex"]}]}},"sourceSpan":{"start":[20,1],"name":"src/Neon/Values/Regex.purs","end":[23,1]}},{"comments":null,"title":"regexHasShow","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasShow"],"HasShow"]},{"tag":"TypeConstructor","contents":[["Neon","Values","Regex"],"Regex"]}]}},"sourceSpan":{"start":[23,1],"name":"src/Neon/Values/Regex.purs","end":[27,1]}}],"comments":"Represents regular expressions. A wrapper around `RegExp` from JavaScript.\n","title":"Regex","fixity":null,"info":{"kind":{"tag":"Star","contents":[]},"declType":"externData"},"sourceSpan":{"start":[18,1],"name":"src/Neon/Values/Regex.purs","end":[20,1]}},{"children":[],"comments":"Represents the flags that a regex can have.\n","title":"RegexFlags","fixity":null,"info":{"arguments":[],"declType":"typeSynonym","type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Object"]},{"tag":"RCons","contents":["ignoreCase",{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]},{"tag":"RCons","contents":["global",{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]},{"tag":"RCons","contents":["multiline",{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]},{"tag":"REmpty","contents":[]}]}]}]}]}},"sourceSpan":{"start":[27,1],"name":"src/Neon/Values/Regex.purs","end":[39,1]}},{"children":[],"comments":"Creates a regular expression.\n\n``` purescript\nshow (regex \"a\" { ignoreCase: true, global: false, multiline: false })\n-- \"regex \\\"a\\\" { ignoreCase: true, global: false, multiline: false }\"\n```\n","title":"regex","fixity":null,"info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Neon","Values","Regex"],"RegexFlags"]}]},{"tag":"TypeConstructor","contents":[["Neon","Values","Regex"],"Regex"]}]}]}},"sourceSpan":{"start":[39,1],"name":"src/Neon/Values/Regex.purs","end":[40,1]}},{"children":[],"comments":"Returns the default regular expression flags.\n\n``` purescript\nshow regexFlags\n-- \"{ ignoreCase: false, global: false, multiline: false }\"\n```\n","title":"regexFlags","fixity":null,"info":{"declType":"value","type":{"tag":"TypeConstructor","contents":[["Neon","Values","Regex"],"RegexFlags"]}},"sourceSpan":{"start":[48,1],"name":"src/Neon/Values/Regex.purs","end":[49,1]}},{"children":[],"comments":"Tests if a regular expression matches a string.\n\n``` purescript\ntest \"a\" (regex \"a\" regexFlags)\n-- true\n```\n","title":"test","fixity":null,"info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Neon","Values","Regex"],"Regex"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}]}},"sourceSpan":{"start":[61,1],"name":"src/Neon/Values/Regex.purs","end":[62,1]}}]},{"moduleName":["Neon","Values","These"],"declarations":[{"children":[{"comments":null,"title":"This","info":{"arguments":[{"tag":"TypeVar","contents":"a"}],"declType":"dataConstructor"},"sourceSpan":null},{"comments":null,"title":"That","info":{"arguments":[{"tag":"TypeVar","contents":"b"}],"declType":"dataConstructor"},"sourceSpan":null},{"comments":null,"title":"Both","info":{"arguments":[{"tag":"TypeVar","contents":"a"},{"tag":"TypeVar","contents":"b"}],"declType":"dataConstructor"},"sourceSpan":null},{"comments":null,"title":"theseHasAdd","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasAdd"],"HasAdd"],[{"tag":"TypeVar","contents":"a"}]],[[["Neon","Types","HasAdd"],"HasAdd"],[{"tag":"TypeVar","contents":"b"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasAdd"],"HasAdd"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","These"],"These"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}},"sourceSpan":{"start":[27,1],"name":"src/Neon/Values/These.purs","end":[38,1]}},{"comments":null,"title":"theseHasApply","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasAdd"],"HasAdd"],[{"tag":"TypeVar","contents":"a"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasApply"],"HasApply"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","These"],"These"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[38,1],"name":"src/Neon/Values/These.purs","end":[47,1]}},{"comments":null,"title":"theseHasBind","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasAdd"],"HasAdd"],[{"tag":"TypeVar","contents":"a"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasBind"],"HasBind"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","These"],"These"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[47,1],"name":"src/Neon/Values/These.purs","end":[56,1]}},{"comments":null,"title":"theseHasEqual","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasEqual"],"HasEqual"],[{"tag":"TypeVar","contents":"a"}]],[[["Neon","Types","HasEqual"],"HasEqual"],[{"tag":"TypeVar","contents":"b"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasEqual"],"HasEqual"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","These"],"These"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}},"sourceSpan":{"start":[56,1],"name":"src/Neon/Values/These.purs","end":[62,1]}},{"comments":null,"title":"theseHasFold","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasFold"],"HasFold"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","These"],"These"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[62,1],"name":"src/Neon/Values/These.purs","end":[72,1]}},{"comments":null,"title":"theseHasMap","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasMap"],"HasMap"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","These"],"These"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[72,1],"name":"src/Neon/Values/These.purs","end":[78,1]}},{"comments":null,"title":"theseHasPure","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasAdd"],"HasAdd"],[{"tag":"TypeVar","contents":"a"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasPure"],"HasPure"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","These"],"These"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[78,1],"name":"src/Neon/Values/These.purs","end":[81,1]}},{"comments":null,"title":"theseHasShow","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasShow"],"HasShow"],[{"tag":"TypeVar","contents":"a"}]],[[["Neon","Types","HasShow"],"HasShow"],[{"tag":"TypeVar","contents":"b"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasShow"],"HasShow"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","These"],"These"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}},"sourceSpan":{"start":[81,1],"name":"src/Neon/Values/These.purs","end":[98,1]}}],"comments":"Represents either one value or another, or both. This is different than\n`Either`, which only represents one or the other. And `Pair` only\nrepresents both values.\n","title":"These","fixity":null,"info":{"declType":"data","dataDeclType":"data","typeArguments":[["a",null],["b",null]]},"sourceSpan":{"start":[22,1],"name":"src/Neon/Values/These.purs","end":[27,1]}},{"children":[],"comments":"Returns `true` if the `These` is a `Both` value. Returns `false`\notherwise.\n\n``` purescript\nisBith (Both unit unit)\n-- true\n```\n","title":"isBoth","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","These"],"These"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]},null]},null]}},"sourceSpan":{"start":[135,1],"name":"src/Neon/Values/These.purs","end":[136,1]}},{"children":[],"comments":"Returns `true` if the `These` is a `That` value. Returns `false`\notherwise.\n\n``` purescript\nisThat (That unit)\n-- true\n```\n","title":"isThat","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","These"],"These"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]},null]},null]}},"sourceSpan":{"start":[123,1],"name":"src/Neon/Values/These.purs","end":[124,1]}},{"children":[],"comments":"Returns `true` if the `These` is a `This` value. Returns `false`\notherwise.\n\n``` purescript\nisThis (This unit)\n-- true\n```\n","title":"isThis","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","These"],"These"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]},null]},null]}},"sourceSpan":{"start":[111,1],"name":"src/Neon/Values/These.purs","end":[112,1]}},{"children":[],"comments":"Applies the first function to `This` values, the second function to `That`\nvalues, and the third function to `Both` values.\n\n``` purescript\nthese (+ 2) (* 2) (+) (This 3)\n-- 5\nthese (+ 2) (* 2) (+) (That 3)\n-- 6\nthese (+ 2) (* 2) (+) (Both 3 4)\n-- 7\n```\n","title":"these","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["c",{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"c"}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeVar","contents":"c"}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeVar","contents":"c"}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","These"],"These"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeVar","contents":"c"}]}]}]}]},null]},null]},null]}},"sourceSpan":{"start":[98,1],"name":"src/Neon/Values/These.purs","end":[99,1]}}]},{"moduleName":["Neon","Values","Unit"],"declarations":[{"children":[{"comments":null,"title":"unitHasAdd","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasAdd"],"HasAdd"]},{"tag":"TypeConstructor","contents":[["Neon","Values","Unit"],"Unit"]}]}},"sourceSpan":{"start":[26,1],"name":"src/Neon/Values/Unit.purs","end":[29,1]}},{"comments":null,"title":"unitHasAnd","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasAnd"],"HasAnd"]},{"tag":"TypeConstructor","contents":[["Neon","Values","Unit"],"Unit"]}]}},"sourceSpan":{"start":[29,1],"name":"src/Neon/Values/Unit.purs","end":[32,1]}},{"comments":null,"title":"unitHasBottom","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasBottom"],"HasBottom"]},{"tag":"TypeConstructor","contents":[["Neon","Values","Unit"],"Unit"]}]}},"sourceSpan":{"start":[32,1],"name":"src/Neon/Values/Unit.purs","end":[35,1]}},{"comments":null,"title":"unitHasCompare","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasCompare"],"HasCompare"]},{"tag":"TypeConstructor","contents":[["Neon","Values","Unit"],"Unit"]}]}},"sourceSpan":{"start":[35,1],"name":"src/Neon/Values/Unit.purs","end":[38,1]}},{"comments":null,"title":"unitHasDivide","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasDivide"],"HasDivide"]},{"tag":"TypeConstructor","contents":[["Neon","Values","Unit"],"Unit"]}]}},"sourceSpan":{"start":[38,1],"name":"src/Neon/Values/Unit.purs","end":[42,1]}},{"comments":null,"title":"unitHasEqual","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasEqual"],"HasEqual"]},{"tag":"TypeConstructor","contents":[["Neon","Values","Unit"],"Unit"]}]}},"sourceSpan":{"start":[42,1],"name":"src/Neon/Values/Unit.purs","end":[45,1]}},{"comments":null,"title":"unitHasMultiply","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasMultiply"],"HasMultiply"]},{"tag":"TypeConstructor","contents":[["Neon","Values","Unit"],"Unit"]}]}},"sourceSpan":{"start":[45,1],"name":"src/Neon/Values/Unit.purs","end":[48,1]}},{"comments":null,"title":"unitHasNot","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasNot"],"HasNot"]},{"tag":"TypeConstructor","contents":[["Neon","Values","Unit"],"Unit"]}]}},"sourceSpan":{"start":[48,1],"name":"src/Neon/Values/Unit.purs","end":[51,1]}},{"comments":null,"title":"unitHasOne","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasOne"],"HasOne"]},{"tag":"TypeConstructor","contents":[["Neon","Values","Unit"],"Unit"]}]}},"sourceSpan":{"start":[51,1],"name":"src/Neon/Values/Unit.purs","end":[54,1]}},{"comments":null,"title":"unitHasOr","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasOr"],"HasOr"]},{"tag":"TypeConstructor","contents":[["Neon","Values","Unit"],"Unit"]}]}},"sourceSpan":{"start":[54,1],"name":"src/Neon/Values/Unit.purs","end":[57,1]}},{"comments":null,"title":"unitHasShow","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasShow"],"HasShow"]},{"tag":"TypeConstructor","contents":[["Neon","Values","Unit"],"Unit"]}]}},"sourceSpan":{"start":[57,1],"name":"src/Neon/Values/Unit.purs","end":[60,1]}},{"comments":null,"title":"unitHasSubtract","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasSubtract"],"HasSubtract"]},{"tag":"TypeConstructor","contents":[["Neon","Values","Unit"],"Unit"]}]}},"sourceSpan":{"start":[60,1],"name":"src/Neon/Values/Unit.purs","end":[63,1]}},{"comments":null,"title":"unitHasTop","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasTop"],"HasTop"]},{"tag":"TypeConstructor","contents":[["Neon","Values","Unit"],"Unit"]}]}},"sourceSpan":{"start":[63,1],"name":"src/Neon/Values/Unit.purs","end":[66,1]}},{"comments":null,"title":"unitHasZero","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasZero"],"HasZero"]},{"tag":"TypeConstructor","contents":[["Neon","Values","Unit"],"Unit"]}]}},"sourceSpan":{"start":[66,1],"name":"src/Neon/Values/Unit.purs","end":[70,1]}}],"comments":"Represents nothing. The unit type is often used to show that only the\neffects of a given function are important.\n","title":"Unit","fixity":null,"info":{"declType":"data","dataDeclType":"newtype","typeArguments":[]},"sourceSpan":{"start":[24,1],"name":"src/Neon/Values/Unit.purs","end":[26,1]}},{"children":[],"comments":"The only inhabitant of the `Unit` type.\n","title":"unit","fixity":null,"info":{"declType":"value","type":{"tag":"TypeConstructor","contents":[["Neon","Values","Unit"],"Unit"]}},"sourceSpan":{"start":[70,1],"name":"src/Neon/Values/Unit.purs","end":[71,1]}}]}],"name":"Neon.Values","comments":null,"declarations":[]},{"reExports":[],"name":"Neon.Values.Constant","comments":null,"declarations":[{"children":[{"comments":null,"title":"Constant","info":{"arguments":[{"tag":"TypeVar","contents":"a"}],"declType":"dataConstructor"},"sourceSpan":null},{"comments":null,"title":"constantHasAdd","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasAdd"],"HasAdd"],[{"tag":"TypeVar","contents":"a"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasAdd"],"HasAdd"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Constant"],"Constant"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}},"sourceSpan":{"start":[33,1],"name":"src/Neon/Values/Constant.purs","end":[36,1]}},{"comments":null,"title":"constantHasAlternative","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasAdd"],"HasAdd"],[{"tag":"TypeVar","contents":"a"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasAlternative"],"HasAlternative"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Constant"],"Constant"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[36,1],"name":"src/Neon/Values/Constant.purs","end":[39,1]}},{"comments":null,"title":"constantHasAnd","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasAnd"],"HasAnd"],[{"tag":"TypeVar","contents":"a"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasAnd"],"HasAnd"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Constant"],"Constant"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}},"sourceSpan":{"start":[39,1],"name":"src/Neon/Values/Constant.purs","end":[42,1]}},{"comments":null,"title":"constantHasApply","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasAdd"],"HasAdd"],[{"tag":"TypeVar","contents":"a"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasApply"],"HasApply"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Constant"],"Constant"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[42,1],"name":"src/Neon/Values/Constant.purs","end":[45,1]}},{"comments":null,"title":"constantHasBind","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasZero"],"HasZero"],[{"tag":"TypeVar","contents":"a"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasBind"],"HasBind"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Constant"],"Constant"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[45,1],"name":"src/Neon/Values/Constant.purs","end":[48,1]}},{"comments":null,"title":"constantHasBottom","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasBottom"],"HasBottom"],[{"tag":"TypeVar","contents":"a"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasBottom"],"HasBottom"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Constant"],"Constant"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}},"sourceSpan":{"start":[48,1],"name":"src/Neon/Values/Constant.purs","end":[51,1]}},{"comments":null,"title":"constantHasCompare","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasCompare"],"HasCompare"],[{"tag":"TypeVar","contents":"a"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasCompare"],"HasCompare"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Constant"],"Constant"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}},"sourceSpan":{"start":[51,1],"name":"src/Neon/Values/Constant.purs","end":[54,1]}},{"comments":null,"title":"constantHasDivide","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasDivide"],"HasDivide"],[{"tag":"TypeVar","contents":"a"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasDivide"],"HasDivide"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Constant"],"Constant"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}},"sourceSpan":{"start":[54,1],"name":"src/Neon/Values/Constant.purs","end":[58,1]}},{"comments":null,"title":"constantHasEmpty","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasZero"],"HasZero"],[{"tag":"TypeVar","contents":"a"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasEmpty"],"HasEmpty"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Constant"],"Constant"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[58,1],"name":"src/Neon/Values/Constant.purs","end":[61,1]}},{"comments":null,"title":"constantHasEqual","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasEqual"],"HasEqual"],[{"tag":"TypeVar","contents":"a"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasEqual"],"HasEqual"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Constant"],"Constant"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}},"sourceSpan":{"start":[61,1],"name":"src/Neon/Values/Constant.purs","end":[64,1]}},{"comments":null,"title":"constantHasFold","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasFold"],"HasFold"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Constant"],"Constant"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[64,1],"name":"src/Neon/Values/Constant.purs","end":[68,1]}},{"comments":null,"title":"constantHasMap","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasMap"],"HasMap"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Constant"],"Constant"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[68,1],"name":"src/Neon/Values/Constant.purs","end":[71,1]}},{"comments":null,"title":"constantHasMultiply","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasMultiply"],"HasMultiply"],[{"tag":"TypeVar","contents":"a"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasMultiply"],"HasMultiply"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Constant"],"Constant"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}},"sourceSpan":{"start":[71,1],"name":"src/Neon/Values/Constant.purs","end":[74,1]}},{"comments":null,"title":"constantHasNot","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasNot"],"HasNot"],[{"tag":"TypeVar","contents":"a"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasNot"],"HasNot"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Constant"],"Constant"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}},"sourceSpan":{"start":[74,1],"name":"src/Neon/Values/Constant.purs","end":[77,1]}},{"comments":null,"title":"constantHasOne","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasOne"],"HasOne"],[{"tag":"TypeVar","contents":"a"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasOne"],"HasOne"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Constant"],"Constant"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}},"sourceSpan":{"start":[77,1],"name":"src/Neon/Values/Constant.purs","end":[80,1]}},{"comments":null,"title":"constantHasOr","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasOr"],"HasOr"],[{"tag":"TypeVar","contents":"a"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasOr"],"HasOr"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Constant"],"Constant"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}},"sourceSpan":{"start":[80,1],"name":"src/Neon/Values/Constant.purs","end":[83,1]}},{"comments":null,"title":"constantHasPower","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasPower"],"HasPower"],[{"tag":"TypeVar","contents":"a"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasPower"],"HasPower"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Constant"],"Constant"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}},"sourceSpan":{"start":[83,1],"name":"src/Neon/Values/Constant.purs","end":[86,1]}},{"comments":null,"title":"constantHasPure","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasZero"],"HasZero"],[{"tag":"TypeVar","contents":"a"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasPure"],"HasPure"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Constant"],"Constant"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[86,1],"name":"src/Neon/Values/Constant.purs","end":[89,1]}},{"comments":null,"title":"constantHasShow","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasShow"],"HasShow"],[{"tag":"TypeVar","contents":"a"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasShow"],"HasShow"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Constant"],"Constant"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}},"sourceSpan":{"start":[89,1],"name":"src/Neon/Values/Constant.purs","end":[92,1]}},{"comments":null,"title":"constantHasSubtract","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasSubtract"],"HasSubtract"],[{"tag":"TypeVar","contents":"a"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasSubtract"],"HasSubtract"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Constant"],"Constant"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}},"sourceSpan":{"start":[92,1],"name":"src/Neon/Values/Constant.purs","end":[95,1]}},{"comments":null,"title":"constantHasTop","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasTop"],"HasTop"],[{"tag":"TypeVar","contents":"a"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasTop"],"HasTop"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Constant"],"Constant"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}},"sourceSpan":{"start":[95,1],"name":"src/Neon/Values/Constant.purs","end":[98,1]}},{"comments":null,"title":"constantHasZero","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasZero"],"HasZero"],[{"tag":"TypeVar","contents":"a"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasZero"],"HasZero"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Constant"],"Constant"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}},"sourceSpan":{"start":[98,1],"name":"src/Neon/Values/Constant.purs","end":[101,1]}},{"comments":null,"title":"constantIsEnumerable","info":{"declType":"instance","dependencies":[[[["Neon","Types","IsEnumerable"],"IsEnumerable"],[{"tag":"TypeVar","contents":"a"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","IsEnumerable"],"IsEnumerable"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Constant"],"Constant"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}},"sourceSpan":{"start":[101,1],"name":"src/Neon/Values/Constant.purs","end":[113,1]}}],"comments":"A wrapper that ignores its second type argument.\n","title":"Constant","fixity":null,"info":{"declType":"data","dataDeclType":"newtype","typeArguments":[["a",null],["b",null]]},"sourceSpan":{"start":[31,1],"name":"src/Neon/Values/Constant.purs","end":[33,1]}},{"children":[],"comments":"Extracts the value from its wrapper.\n\n``` purescript\nrunConstant (Constant unit)\n-- unit\n```\n","title":"runConstant","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Constant"],"Constant"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeVar","contents":"a"}]},null]},null]}},"sourceSpan":{"start":[113,1],"name":"src/Neon/Values/Constant.purs","end":[114,1]}}]},{"reExports":[],"name":"Neon.Values.Dictionary","comments":null,"declarations":[{"children":[{"comments":null,"title":"dictionaryHasAdd","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasAdd"],"HasAdd"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Dictionary"],"Dictionary"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[30,1],"name":"src/Neon/Values/Dictionary.purs","end":[33,1]}},{"comments":null,"title":"dictionaryHasAlternative","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasAlternative"],"HasAlternative"]},{"tag":"TypeConstructor","contents":[["Neon","Values","Dictionary"],"Dictionary"]}]}},"sourceSpan":{"start":[33,1],"name":"src/Neon/Values/Dictionary.purs","end":[36,1]}},{"comments":null,"title":"dictionaryHasApply","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasApply"],"HasApply"]},{"tag":"TypeConstructor","contents":[["Neon","Values","Dictionary"],"Dictionary"]}]}},"sourceSpan":{"start":[36,1],"name":"src/Neon/Values/Dictionary.purs","end":[39,1]}},{"comments":null,"title":"dictionaryHasEmpty","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasEmpty"],"HasEmpty"]},{"tag":"TypeConstructor","contents":[["Neon","Values","Dictionary"],"Dictionary"]}]}},"sourceSpan":{"start":[39,1],"name":"src/Neon/Values/Dictionary.purs","end":[42,1]}},{"comments":null,"title":"dictionaryHasEqual","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasEqual"],"HasEqual"],[{"tag":"TypeVar","contents":"a"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasEqual"],"HasEqual"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Dictionary"],"Dictionary"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[42,1],"name":"src/Neon/Values/Dictionary.purs","end":[45,1]}},{"comments":null,"title":"dictionaryHasFold","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasFold"],"HasFold"]},{"tag":"TypeConstructor","contents":[["Neon","Values","Dictionary"],"Dictionary"]}]}},"sourceSpan":{"start":[45,1],"name":"src/Neon/Values/Dictionary.purs","end":[49,1]}},{"comments":null,"title":"dictionaryHasFromArray","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasFromArray"],"HasFromArray"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Pair"],"Pair"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeVar","contents":"a"}]}}]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Dictionary"],"Dictionary"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[49,1],"name":"src/Neon/Values/Dictionary.purs","end":[52,1]}},{"comments":null,"title":"dictionaryHasMap","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasMap"],"HasMap"]},{"tag":"TypeConstructor","contents":[["Neon","Values","Dictionary"],"Dictionary"]}]}},"sourceSpan":{"start":[52,1],"name":"src/Neon/Values/Dictionary.purs","end":[55,1]}},{"comments":null,"title":"dictionaryHasShow","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasShow"],"HasShow"],[{"tag":"TypeVar","contents":"a"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasShow"],"HasShow"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Dictionary"],"Dictionary"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[55,1],"name":"src/Neon/Values/Dictionary.purs","end":[58,1]}},{"comments":null,"title":"dictionaryHasZero","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasZero"],"HasZero"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Dictionary"],"Dictionary"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[58,1],"name":"src/Neon/Values/Dictionary.purs","end":[59,10]}}],"comments":"Represents a mapping between strings and values.\n","title":"Dictionary","fixity":null,"info":{"kind":{"tag":"FunKind","contents":[{"tag":"Star","contents":[]},{"tag":"Star","contents":[]}]},"declType":"externData"},"sourceSpan":{"start":[18,1],"name":"src/Neon/Values/Dictionary.purs","end":[20,1]}}]},{"reExports":[],"name":"Neon.Values.Either","comments":null,"declarations":[{"children":[{"comments":null,"title":"Left","info":{"arguments":[{"tag":"TypeVar","contents":"a"}],"declType":"dataConstructor"},"sourceSpan":null},{"comments":null,"title":"Right","info":{"arguments":[{"tag":"TypeVar","contents":"b"}],"declType":"dataConstructor"},"sourceSpan":null},{"comments":null,"title":"eitherHasAdd","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasAdd"],"HasAdd"],[{"tag":"TypeVar","contents":"b"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasAdd"],"HasAdd"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Either"],"Either"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}},"sourceSpan":{"start":[42,1],"name":"src/Neon/Values/Either.purs","end":[45,1]}},{"comments":null,"title":"eitherHasAlternative","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasAlternative"],"HasAlternative"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Either"],"Either"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[45,1],"name":"src/Neon/Values/Either.purs","end":[49,1]}},{"comments":null,"title":"eitherHasAnd","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasBottom"],"HasBottom"],[{"tag":"TypeVar","contents":"a"}]],[[["Neon","Types","HasTop"],"HasTop"],[{"tag":"TypeVar","contents":"a"}]],[[["Neon","Types","HasAnd"],"HasAnd"],[{"tag":"TypeVar","contents":"b"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasAnd"],"HasAnd"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Either"],"Either"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}},"sourceSpan":{"start":[49,1],"name":"src/Neon/Values/Either.purs","end":[52,1]}},{"comments":null,"title":"eitherHasApply","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasApply"],"HasApply"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Either"],"Either"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[52,1],"name":"src/Neon/Values/Either.purs","end":[56,1]}},{"comments":null,"title":"eitherHasBind","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasBind"],"HasBind"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Either"],"Either"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[56,1],"name":"src/Neon/Values/Either.purs","end":[60,1]}},{"comments":null,"title":"eitherHasBottom","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasBottom"],"HasBottom"],[{"tag":"TypeVar","contents":"a"}]],[[["Neon","Types","HasBottom"],"HasBottom"],[{"tag":"TypeVar","contents":"b"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasBottom"],"HasBottom"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Either"],"Either"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}},"sourceSpan":{"start":[60,1],"name":"src/Neon/Values/Either.purs","end":[63,1]}},{"comments":null,"title":"eitherHasCompare","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasCompare"],"HasCompare"],[{"tag":"TypeVar","contents":"a"}]],[[["Neon","Types","HasCompare"],"HasCompare"],[{"tag":"TypeVar","contents":"b"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasCompare"],"HasCompare"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Either"],"Either"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}},"sourceSpan":{"start":[63,1],"name":"src/Neon/Values/Either.purs","end":[69,1]}},{"comments":null,"title":"eitherHasDivide","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasDivide"],"HasDivide"],[{"tag":"TypeVar","contents":"b"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasDivide"],"HasDivide"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Either"],"Either"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}},"sourceSpan":{"start":[69,1],"name":"src/Neon/Values/Either.purs","end":[73,1]}},{"comments":null,"title":"eitherHasEqual","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasEqual"],"HasEqual"],[{"tag":"TypeVar","contents":"a"}]],[[["Neon","Types","HasEqual"],"HasEqual"],[{"tag":"TypeVar","contents":"b"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasEqual"],"HasEqual"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Either"],"Either"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}},"sourceSpan":{"start":[73,1],"name":"src/Neon/Values/Either.purs","end":[78,1]}},{"comments":null,"title":"eitherHasFold","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasFold"],"HasFold"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Either"],"Either"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[78,1],"name":"src/Neon/Values/Either.purs","end":[86,1]}},{"comments":null,"title":"eitherHasMap","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasMap"],"HasMap"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Either"],"Either"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[86,1],"name":"src/Neon/Values/Either.purs","end":[90,1]}},{"comments":null,"title":"eitherHasMultiply","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasMultiply"],"HasMultiply"],[{"tag":"TypeVar","contents":"b"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasMultiply"],"HasMultiply"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Either"],"Either"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}},"sourceSpan":{"start":[90,1],"name":"src/Neon/Values/Either.purs","end":[93,1]}},{"comments":null,"title":"eitherHasNot","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasBottom"],"HasBottom"],[{"tag":"TypeVar","contents":"a"}]],[[["Neon","Types","HasTop"],"HasTop"],[{"tag":"TypeVar","contents":"a"}]],[[["Neon","Types","HasNot"],"HasNot"],[{"tag":"TypeVar","contents":"b"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasNot"],"HasNot"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Either"],"Either"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}},"sourceSpan":{"start":[93,1],"name":"src/Neon/Values/Either.purs","end":[96,1]}},{"comments":null,"title":"eitherHasOne","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasOne"],"HasOne"],[{"tag":"TypeVar","contents":"b"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasOne"],"HasOne"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Either"],"Either"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}},"sourceSpan":{"start":[96,1],"name":"src/Neon/Values/Either.purs","end":[99,1]}},{"comments":null,"title":"eitherHasOr","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasBottom"],"HasBottom"],[{"tag":"TypeVar","contents":"a"}]],[[["Neon","Types","HasTop"],"HasTop"],[{"tag":"TypeVar","contents":"a"}]],[[["Neon","Types","HasOr"],"HasOr"],[{"tag":"TypeVar","contents":"b"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasOr"],"HasOr"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Either"],"Either"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}},"sourceSpan":{"start":[99,1],"name":"src/Neon/Values/Either.purs","end":[102,1]}},{"comments":null,"title":"eitherHasPure","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasPure"],"HasPure"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Either"],"Either"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[102,1],"name":"src/Neon/Values/Either.purs","end":[105,1]}},{"comments":null,"title":"eitherHasShow","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasShow"],"HasShow"],[{"tag":"TypeVar","contents":"a"}]],[[["Neon","Types","HasShow"],"HasShow"],[{"tag":"TypeVar","contents":"b"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasShow"],"HasShow"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Either"],"Either"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}},"sourceSpan":{"start":[105,1],"name":"src/Neon/Values/Either.purs","end":[109,1]}},{"comments":null,"title":"eitherHasSubtract","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasSubtract"],"HasSubtract"],[{"tag":"TypeVar","contents":"b"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasSubtract"],"HasSubtract"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Either"],"Either"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}},"sourceSpan":{"start":[109,1],"name":"src/Neon/Values/Either.purs","end":[112,1]}},{"comments":null,"title":"eitherHasTop","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasTop"],"HasTop"],[{"tag":"TypeVar","contents":"a"}]],[[["Neon","Types","HasTop"],"HasTop"],[{"tag":"TypeVar","contents":"b"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasTop"],"HasTop"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Either"],"Either"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}},"sourceSpan":{"start":[112,1],"name":"src/Neon/Values/Either.purs","end":[115,1]}},{"comments":null,"title":"eitherHasZero","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasZero"],"HasZero"],[{"tag":"TypeVar","contents":"b"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasZero"],"HasZero"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Either"],"Either"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}},"sourceSpan":{"start":[115,1],"name":"src/Neon/Values/Either.purs","end":[127,1]}}],"comments":"Represents a choice between two values. `Either` is conventially used for\nerror handling where `Left` represents failure and `Right` represents\nsuccess.\n","title":"Either","fixity":null,"info":{"declType":"data","dataDeclType":"data","typeArguments":[["a",null],["b",null]]},"sourceSpan":{"start":[38,1],"name":"src/Neon/Values/Either.purs","end":[42,1]}},{"children":[],"comments":"Applies the first function to `Left` values and the second function to\n`Right` values.\n\n``` purescript\neither (+ 2) (* 2) (Left 3)\n-- Left 5\neither (+ 2) (* 2) (Right 3)\n-- Right 6\n```\n","title":"either","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["c",{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"c"}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeVar","contents":"c"}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Either"],"Either"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeVar","contents":"c"}]}]}]},null]},null]},null]}},"sourceSpan":{"start":[127,1],"name":"src/Neon/Values/Either.purs","end":[128,1]}},{"children":[],"comments":"Returns `true` if the `Either` is a `Left` value. Returns `false`\notherwise.\n\n``` purescript\nisLeft (Left unit)\n-- true\nisLeft (Right unit)\n-- false\n```\n","title":"isLeft","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Either"],"Either"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]},null]},null]}},"sourceSpan":{"start":[141,1],"name":"src/Neon/Values/Either.purs","end":[142,1]}},{"children":[],"comments":"Returns `true` if the `Either` is a `Right` value. Returns `false`\notherwise.\n\n``` purescript\nisRight (Right unit)\n-- true\nisRight (Left unit)\n-- false\n```\n","title":"isRight","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Either"],"Either"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]},null]},null]}},"sourceSpan":{"start":[155,1],"name":"src/Neon/Values/Either.purs","end":[156,1]}},{"children":[],"comments":"Converts an `Either` into a `Maybe`.\n\n``` purescript\nfromEither (Left unit)\n-- Nothing\nfromEither (Right unit)\n-- Just unit\n```\n","title":"fromEither","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["m",{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[[[[["Neon","Types","HasEmpty"],"HasEmpty"],[{"tag":"TypeVar","contents":"m"}]],[[["Neon","Types","HasPure"],"HasPure"],[{"tag":"TypeVar","contents":"m"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Either"],"Either"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"m"},{"tag":"TypeVar","contents":"b"}]}]}]},null]},null]},null]}},"sourceSpan":{"start":[166,1],"name":"src/Neon/Values/Either.purs","end":[167,1]}},{"children":[],"comments":"Converts a `Maybe` into an `Either`.\n\n``` purescript\ntoEither unit Nothing\n-- Left unit\ntoEither unit (Just true)\n-- Right true\n```\n","title":"toEither","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Maybe"],"Maybe"]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Either"],"Either"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]}]},null]},null]}},"sourceSpan":{"start":[177,1],"name":"src/Neon/Values/Either.purs","end":[178,1]}}]},{"reExports":[],"name":"Neon.Values.Identity","comments":null,"declarations":[{"children":[{"comments":null,"title":"Identity","info":{"arguments":[{"tag":"TypeVar","contents":"a"}],"declType":"dataConstructor"},"sourceSpan":null},{"comments":null,"title":"identityHasAdd","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasAdd"],"HasAdd"],[{"tag":"TypeVar","contents":"a"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasAdd"],"HasAdd"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Identity"],"Identity"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[32,1],"name":"src/Neon/Values/Identity.purs","end":[35,1]}},{"comments":null,"title":"identityHasAnd","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasAnd"],"HasAnd"],[{"tag":"TypeVar","contents":"a"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasAnd"],"HasAnd"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Identity"],"Identity"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[35,1],"name":"src/Neon/Values/Identity.purs","end":[38,1]}},{"comments":null,"title":"identityHasApply","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasApply"],"HasApply"]},{"tag":"TypeConstructor","contents":[["Neon","Values","Identity"],"Identity"]}]}},"sourceSpan":{"start":[38,1],"name":"src/Neon/Values/Identity.purs","end":[41,1]}},{"comments":null,"title":"identityHasBind","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasBind"],"HasBind"]},{"tag":"TypeConstructor","contents":[["Neon","Values","Identity"],"Identity"]}]}},"sourceSpan":{"start":[41,1],"name":"src/Neon/Values/Identity.purs","end":[44,1]}},{"comments":null,"title":"identityHasBottom","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasBottom"],"HasBottom"],[{"tag":"TypeVar","contents":"a"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasBottom"],"HasBottom"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Identity"],"Identity"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[44,1],"name":"src/Neon/Values/Identity.purs","end":[47,1]}},{"comments":null,"title":"identityHasCompare","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasCompare"],"HasCompare"],[{"tag":"TypeVar","contents":"a"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasCompare"],"HasCompare"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Identity"],"Identity"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[47,1],"name":"src/Neon/Values/Identity.purs","end":[50,1]}},{"comments":null,"title":"identityHasDivide","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasDivide"],"HasDivide"],[{"tag":"TypeVar","contents":"a"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasDivide"],"HasDivide"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Identity"],"Identity"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[50,1],"name":"src/Neon/Values/Identity.purs","end":[54,1]}},{"comments":null,"title":"identityHasEqual","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasEqual"],"HasEqual"],[{"tag":"TypeVar","contents":"a"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasEqual"],"HasEqual"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Identity"],"Identity"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[54,1],"name":"src/Neon/Values/Identity.purs","end":[57,1]}},{"comments":null,"title":"identityHasFold","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasFold"],"HasFold"]},{"tag":"TypeConstructor","contents":[["Neon","Values","Identity"],"Identity"]}]}},"sourceSpan":{"start":[57,1],"name":"src/Neon/Values/Identity.purs","end":[61,1]}},{"comments":null,"title":"identityHasMap","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasMap"],"HasMap"]},{"tag":"TypeConstructor","contents":[["Neon","Values","Identity"],"Identity"]}]}},"sourceSpan":{"start":[61,1],"name":"src/Neon/Values/Identity.purs","end":[64,1]}},{"comments":null,"title":"identityHasMultiply","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasMultiply"],"HasMultiply"],[{"tag":"TypeVar","contents":"a"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasMultiply"],"HasMultiply"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Identity"],"Identity"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[64,1],"name":"src/Neon/Values/Identity.purs","end":[67,1]}},{"comments":null,"title":"identityHasNot","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasNot"],"HasNot"],[{"tag":"TypeVar","contents":"a"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasNot"],"HasNot"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Identity"],"Identity"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[67,1],"name":"src/Neon/Values/Identity.purs","end":[70,1]}},{"comments":null,"title":"identityHasOne","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasOne"],"HasOne"],[{"tag":"TypeVar","contents":"a"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasOne"],"HasOne"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Identity"],"Identity"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[70,1],"name":"src/Neon/Values/Identity.purs","end":[73,1]}},{"comments":null,"title":"identityHasOr","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasOr"],"HasOr"],[{"tag":"TypeVar","contents":"a"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasOr"],"HasOr"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Identity"],"Identity"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[73,1],"name":"src/Neon/Values/Identity.purs","end":[76,1]}},{"comments":null,"title":"identityHasPure","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasPure"],"HasPure"]},{"tag":"TypeConstructor","contents":[["Neon","Values","Identity"],"Identity"]}]}},"sourceSpan":{"start":[76,1],"name":"src/Neon/Values/Identity.purs","end":[79,1]}},{"comments":null,"title":"identityHasShow","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasShow"],"HasShow"],[{"tag":"TypeVar","contents":"a"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasShow"],"HasShow"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Identity"],"Identity"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[79,1],"name":"src/Neon/Values/Identity.purs","end":[82,1]}},{"comments":null,"title":"identityHasSubtract","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasSubtract"],"HasSubtract"],[{"tag":"TypeVar","contents":"a"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasSubtract"],"HasSubtract"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Identity"],"Identity"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[82,1],"name":"src/Neon/Values/Identity.purs","end":[85,1]}},{"comments":null,"title":"identityHasTop","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasTop"],"HasTop"],[{"tag":"TypeVar","contents":"a"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasTop"],"HasTop"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Identity"],"Identity"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[85,1],"name":"src/Neon/Values/Identity.purs","end":[88,1]}},{"comments":null,"title":"identityHasZero","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasZero"],"HasZero"],[{"tag":"TypeVar","contents":"a"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasZero"],"HasZero"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Identity"],"Identity"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[88,1],"name":"src/Neon/Values/Identity.purs","end":[91,1]}},{"comments":null,"title":"identityIsEnumerable","info":{"declType":"instance","dependencies":[[[["Neon","Types","IsEnumerable"],"IsEnumerable"],[{"tag":"TypeVar","contents":"a"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","IsEnumerable"],"IsEnumerable"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Identity"],"Identity"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[91,1],"name":"src/Neon/Values/Identity.purs","end":[103,1]}}],"comments":"A simple wrapper. This is most useful as the base of a monad transformer\nstack. That means you can use this as an \"empty\" monad and layer others on\ntop of it.\n","title":"Identity","fixity":null,"info":{"declType":"data","dataDeclType":"newtype","typeArguments":[["a",null]]},"sourceSpan":{"start":[30,1],"name":"src/Neon/Values/Identity.purs","end":[32,1]}},{"children":[],"comments":"Extracts the value from its wrapper.\n\n``` purescript\nrunIdentity (Identity unit)\n-- unit\n```\n","title":"runIdentity","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Identity"],"Identity"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeVar","contents":"a"}]},null]}},"sourceSpan":{"start":[103,1],"name":"src/Neon/Values/Identity.purs","end":[104,1]}}]},{"reExports":[],"name":"Neon.Values.List","comments":null,"declarations":[{"children":[{"comments":null,"title":"Nil","info":{"arguments":[],"declType":"dataConstructor"},"sourceSpan":null},{"comments":null,"title":"Cons","info":{"arguments":[{"tag":"TypeVar","contents":"a"},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","List"],"List"]},{"tag":"TypeVar","contents":"a"}]}}],"declType":"dataConstructor"},"sourceSpan":null},{"comments":null,"title":"listHasEqual","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasEqual"],"HasEqual"],[{"tag":"TypeVar","contents":"a"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasEqual"],"HasEqual"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","List"],"List"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[19,1],"name":"src/Neon/Values/List.purs","end":[24,1]}},{"comments":null,"title":"listHasFold","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasFold"],"HasFold"]},{"tag":"TypeConstructor","contents":[["Neon","Values","List"],"List"]}]}},"sourceSpan":{"start":[24,1],"name":"src/Neon/Values/List.purs","end":[32,1]}},{"comments":null,"title":"listHasFromArray","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasFromArray"],"HasFromArray"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","List"],"List"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[32,1],"name":"src/Neon/Values/List.purs","end":[35,1]}},{"comments":null,"title":"listHasMap","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasMap"],"HasMap"]},{"tag":"TypeConstructor","contents":[["Neon","Values","List"],"List"]}]}},"sourceSpan":{"start":[35,1],"name":"src/Neon/Values/List.purs","end":[40,1]}},{"comments":null,"title":"listHasShow","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasShow"],"HasShow"],[{"tag":"TypeVar","contents":"a"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasShow"],"HasShow"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","List"],"List"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[40,1],"name":"src/Neon/Values/List.purs","end":[45,1]}},{"comments":null,"title":"listHasToArray","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasToArray"],"HasToArray"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","List"],"List"]},{"tag":"TypeVar","contents":"a"}]}}]},{"tag":"TypeVar","contents":"a"}]}},"sourceSpan":{"start":[45,1],"name":"src/Neon/Values/List.purs","end":[46,37]}}],"comments":"Represents a linked list of values.\n","title":"List","fixity":null,"info":{"declType":"data","dataDeclType":"data","typeArguments":[["a",null]]},"sourceSpan":{"start":[15,1],"name":"src/Neon/Values/List.purs","end":[19,1]}}]},{"reExports":[],"name":"Neon.Values.Maybe","comments":null,"declarations":[{"children":[{"comments":null,"title":"Nothing","info":{"arguments":[],"declType":"dataConstructor"},"sourceSpan":null},{"comments":null,"title":"Just","info":{"arguments":[{"tag":"TypeVar","contents":"a"}],"declType":"dataConstructor"},"sourceSpan":null},{"comments":null,"title":"maybeHasAdd","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasAdd"],"HasAdd"],[{"tag":"TypeVar","contents":"a"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasAdd"],"HasAdd"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Maybe"],"Maybe"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[40,1],"name":"src/Neon/Values/Maybe.purs","end":[43,1]}},{"comments":null,"title":"maybeHasAlternative","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasAlternative"],"HasAlternative"]},{"tag":"TypeConstructor","contents":[["Neon","Values","Maybe"],"Maybe"]}]}},"sourceSpan":{"start":[43,1],"name":"src/Neon/Values/Maybe.purs","end":[47,1]}},{"comments":null,"title":"maybeHasAnd","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasAnd"],"HasAnd"],[{"tag":"TypeVar","contents":"a"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasAnd"],"HasAnd"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Maybe"],"Maybe"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[47,1],"name":"src/Neon/Values/Maybe.purs","end":[50,1]}},{"comments":null,"title":"maybeHasApply","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasApply"],"HasApply"]},{"tag":"TypeConstructor","contents":[["Neon","Values","Maybe"],"Maybe"]}]}},"sourceSpan":{"start":[50,1],"name":"src/Neon/Values/Maybe.purs","end":[54,1]}},{"comments":null,"title":"maybeHasBind","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasBind"],"HasBind"]},{"tag":"TypeConstructor","contents":[["Neon","Values","Maybe"],"Maybe"]}]}},"sourceSpan":{"start":[54,1],"name":"src/Neon/Values/Maybe.purs","end":[58,1]}},{"comments":null,"title":"maybeHasBottom","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasBottom"],"HasBottom"],[{"tag":"TypeVar","contents":"a"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasBottom"],"HasBottom"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Maybe"],"Maybe"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[58,1],"name":"src/Neon/Values/Maybe.purs","end":[61,1]}},{"comments":null,"title":"maybeHasCompare","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasCompare"],"HasCompare"],[{"tag":"TypeVar","contents":"a"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasCompare"],"HasCompare"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Maybe"],"Maybe"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[61,1],"name":"src/Neon/Values/Maybe.purs","end":[67,1]}},{"comments":null,"title":"maybeHasDivide","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasDivide"],"HasDivide"],[{"tag":"TypeVar","contents":"a"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasDivide"],"HasDivide"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Maybe"],"Maybe"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[67,1],"name":"src/Neon/Values/Maybe.purs","end":[71,1]}},{"comments":null,"title":"maybeHasEmpty","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasEmpty"],"HasEmpty"]},{"tag":"TypeConstructor","contents":[["Neon","Values","Maybe"],"Maybe"]}]}},"sourceSpan":{"start":[71,1],"name":"src/Neon/Values/Maybe.purs","end":[74,1]}},{"comments":null,"title":"maybeHasEqual","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasEqual"],"HasEqual"],[{"tag":"TypeVar","contents":"a"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasEqual"],"HasEqual"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Maybe"],"Maybe"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[74,1],"name":"src/Neon/Values/Maybe.purs","end":[79,1]}},{"comments":null,"title":"maybeHasFold","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasFold"],"HasFold"]},{"tag":"TypeConstructor","contents":[["Neon","Values","Maybe"],"Maybe"]}]}},"sourceSpan":{"start":[79,1],"name":"src/Neon/Values/Maybe.purs","end":[87,1]}},{"comments":null,"title":"maybeHasMap","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasMap"],"HasMap"]},{"tag":"TypeConstructor","contents":[["Neon","Values","Maybe"],"Maybe"]}]}},"sourceSpan":{"start":[87,1],"name":"src/Neon/Values/Maybe.purs","end":[91,1]}},{"comments":null,"title":"maybeHasMultiply","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasMultiply"],"HasMultiply"],[{"tag":"TypeVar","contents":"a"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasMultiply"],"HasMultiply"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Maybe"],"Maybe"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[91,1],"name":"src/Neon/Values/Maybe.purs","end":[94,1]}},{"comments":null,"title":"maybeHasNot","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasNot"],"HasNot"],[{"tag":"TypeVar","contents":"a"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasNot"],"HasNot"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Maybe"],"Maybe"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[94,1],"name":"src/Neon/Values/Maybe.purs","end":[97,1]}},{"comments":null,"title":"maybeHasOne","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasOne"],"HasOne"],[{"tag":"TypeVar","contents":"a"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasOne"],"HasOne"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Maybe"],"Maybe"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[97,1],"name":"src/Neon/Values/Maybe.purs","end":[100,1]}},{"comments":null,"title":"maybeHasOr","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasOr"],"HasOr"],[{"tag":"TypeVar","contents":"a"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasOr"],"HasOr"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Maybe"],"Maybe"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[100,1],"name":"src/Neon/Values/Maybe.purs","end":[103,1]}},{"comments":null,"title":"maybeHasPure","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasPure"],"HasPure"]},{"tag":"TypeConstructor","contents":[["Neon","Values","Maybe"],"Maybe"]}]}},"sourceSpan":{"start":[103,1],"name":"src/Neon/Values/Maybe.purs","end":[106,1]}},{"comments":null,"title":"maybeHasShow","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasShow"],"HasShow"],[{"tag":"TypeVar","contents":"a"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasShow"],"HasShow"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Maybe"],"Maybe"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[106,1],"name":"src/Neon/Values/Maybe.purs","end":[110,1]}},{"comments":null,"title":"maybeHasSubtract","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasSubtract"],"HasSubtract"],[{"tag":"TypeVar","contents":"a"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasSubtract"],"HasSubtract"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Maybe"],"Maybe"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[110,1],"name":"src/Neon/Values/Maybe.purs","end":[113,1]}},{"comments":null,"title":"maybeHasTop","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasTop"],"HasTop"],[{"tag":"TypeVar","contents":"a"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasTop"],"HasTop"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Maybe"],"Maybe"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[113,1],"name":"src/Neon/Values/Maybe.purs","end":[116,1]}},{"comments":null,"title":"maybeHasZero","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasZero"],"HasZero"],[{"tag":"TypeVar","contents":"a"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasZero"],"HasZero"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Maybe"],"Maybe"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[116,1],"name":"src/Neon/Values/Maybe.purs","end":[128,1]}}],"comments":"Represents an optional value. This is similar to `null` in other\nlanguages, where `Nothing` is `null` and `Just x` is `x`.\n","title":"Maybe","fixity":null,"info":{"declType":"data","dataDeclType":"data","typeArguments":[["a",null]]},"sourceSpan":{"start":[36,1],"name":"src/Neon/Values/Maybe.purs","end":[40,1]}},{"children":[],"comments":"Returns the default value if the `Maybe` is `Nothing`. If instead the\n`Maybe` is `Just x`, call the function with `x`.\n\n``` purescript\nmaybe 0 (+ 1) Nothing\n-- 0\nmaybe 0 (+ 1) (Just 2)\n-- 3\n```\n","title":"maybe","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Maybe"],"Maybe"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeVar","contents":"b"}]}]}]},null]},null]}},"sourceSpan":{"start":[128,1],"name":"src/Neon/Values/Maybe.purs","end":[129,1]}},{"children":[],"comments":"Returns `true` if the `Maybe` is `Just x`. Returns `false` otherwise.\n\n``` purescript\nisJust (Just 1)\n-- true\nisJust Nothing\n-- false\n```\n","title":"isJust","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Maybe"],"Maybe"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]},null]}},"sourceSpan":{"start":[141,1],"name":"src/Neon/Values/Maybe.purs","end":[142,1]}},{"children":[],"comments":"Returns `true` if the `Maybe` is `Nothing`. Returns `false` otherwise.\n\n``` purescript\nisNothing Nothing\n-- true\nisNothing (Just 1)\n-- false\n```\n","title":"isNothing","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Maybe"],"Maybe"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]},null]}},"sourceSpan":{"start":[152,1],"name":"src/Neon/Values/Maybe.purs","end":[153,1]}},{"children":[],"comments":"Returns the default value if the `Maybe` is `Nothing`. If instead the\n`Maybe` is `Just x`, return `x`.\n\n``` purescript\nwithDefault 0 Nothing\n-- 0\nwithDefault 0 (Just 2)\n-- 2\n```\n","title":"withDefault","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Maybe"],"Maybe"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeVar","contents":"a"}]}]},null]}},"sourceSpan":{"start":[164,1],"name":"src/Neon/Values/Maybe.purs","end":[165,1]}}]},{"reExports":[],"name":"Neon.Values.Nullable","comments":null,"declarations":[{"children":[{"comments":null,"title":"nullableHasEqual","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasEqual"],"HasEqual"],[{"tag":"TypeVar","contents":"a"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasEqual"],"HasEqual"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Nullable"],"Nullable"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[30,1],"name":"src/Neon/Values/Nullable.purs","end":[35,1]}},{"comments":null,"title":"nullableHasShow","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasShow"],"HasShow"],[{"tag":"TypeVar","contents":"a"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasShow"],"HasShow"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Nullable"],"Nullable"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[35,1],"name":"src/Neon/Values/Nullable.purs","end":[44,1]}}],"comments":"Represents values that can be null. This is different than `Maybe` because\nit has no runtime overhead.\n","title":"Nullable","fixity":null,"info":{"kind":{"tag":"FunKind","contents":[{"tag":"Star","contents":[]},{"tag":"Star","contents":[]}]},"declType":"externData"},"sourceSpan":{"start":[15,1],"name":"src/Neon/Values/Nullable.purs","end":[17,1]}},{"children":[],"comments":"Converts a `Nullable` value into some other container. Typically this is\n`Maybe`.\n\n``` purescript\nfromNullable (toNullable (Just unit))\n-- Just unit\n```\n","title":"fromNullable","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["m",{"tag":"ConstrainedType","contents":[[[[["Neon","Types","HasEmpty"],"HasEmpty"],[{"tag":"TypeVar","contents":"m"}]],[[["Neon","Types","HasPure"],"HasPure"],[{"tag":"TypeVar","contents":"m"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Nullable"],"Nullable"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"m"},{"tag":"TypeVar","contents":"a"}]}]}]},null]},null]}},"sourceSpan":{"start":[28,1],"name":"src/Neon/Values/Nullable.purs","end":[30,1]}},{"children":[],"comments":"Converts a `Maybe` value into a `Nullable` value.\n\n``` purescript\nshow (toNullable (Just unit))\n-- \"unit\"\n```\n","title":"toNullable","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Maybe"],"Maybe"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Nullable"],"Nullable"]},{"tag":"TypeVar","contents":"a"}]}]},null]}},"sourceSpan":{"start":[44,1],"name":"src/Neon/Values/Nullable.purs","end":[45,1]}}]},{"reExports":[],"name":"Neon.Values.Ordering","comments":null,"declarations":[{"children":[{"comments":null,"title":"LessThan","info":{"arguments":[],"declType":"dataConstructor"},"sourceSpan":null},{"comments":null,"title":"EqualTo","info":{"arguments":[],"declType":"dataConstructor"},"sourceSpan":null},{"comments":null,"title":"GreaterThan","info":{"arguments":[],"declType":"dataConstructor"},"sourceSpan":null},{"comments":null,"title":"orderingHasEqual","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasEqual"],"HasEqual"]},{"tag":"TypeConstructor","contents":[["Neon","Values","Ordering"],"Ordering"]}]}},"sourceSpan":{"start":[14,1],"name":"src/Neon/Values/Ordering.purs","end":[26,1]}},{"comments":null,"title":"orderingHasShow","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasShow"],"HasShow"]},{"tag":"TypeConstructor","contents":[["Neon","Values","Ordering"],"Ordering"]}]}},"sourceSpan":{"start":[26,1],"name":"src/Neon/Values/Ordering.purs","end":[30,20]}}],"comments":"Represents the possible outcomes from comparing two values.\n","title":"Ordering","fixity":null,"info":{"declType":"data","dataDeclType":"data","typeArguments":[]},"sourceSpan":{"start":[9,1],"name":"src/Neon/Values/Ordering.purs","end":[14,1]}}]},{"reExports":[],"name":"Neon.Values.Pair","comments":null,"declarations":[{"children":[{"comments":null,"title":"Pair","info":{"arguments":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Object"]},{"tag":"RCons","contents":["first",{"tag":"TypeVar","contents":"a"},{"tag":"RCons","contents":["second",{"tag":"TypeVar","contents":"b"},{"tag":"REmpty","contents":[]}]}]}]}],"declType":"dataConstructor"},"sourceSpan":null},{"comments":null,"title":"pairHasAdd","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasAdd"],"HasAdd"],[{"tag":"TypeVar","contents":"a"}]],[[["Neon","Types","HasAdd"],"HasAdd"],[{"tag":"TypeVar","contents":"b"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasAdd"],"HasAdd"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Pair"],"Pair"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}},"sourceSpan":{"start":[36,1],"name":"src/Neon/Values/Pair.purs","end":[39,1]}},{"comments":null,"title":"pairHasAnd","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasAnd"],"HasAnd"],[{"tag":"TypeVar","contents":"a"}]],[[["Neon","Types","HasAnd"],"HasAnd"],[{"tag":"TypeVar","contents":"b"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasAnd"],"HasAnd"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Pair"],"Pair"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}},"sourceSpan":{"start":[39,1],"name":"src/Neon/Values/Pair.purs","end":[42,1]}},{"comments":null,"title":"pairHasApply","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasAdd"],"HasAdd"],[{"tag":"TypeVar","contents":"a"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasApply"],"HasApply"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Pair"],"Pair"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[42,1],"name":"src/Neon/Values/Pair.purs","end":[45,1]}},{"comments":null,"title":"pairHasBind","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasZero"],"HasZero"],[{"tag":"TypeVar","contents":"a"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasBind"],"HasBind"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Pair"],"Pair"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[45,1],"name":"src/Neon/Values/Pair.purs","end":[49,1]}},{"comments":null,"title":"pairHasBottom","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasBottom"],"HasBottom"],[{"tag":"TypeVar","contents":"a"}]],[[["Neon","Types","HasBottom"],"HasBottom"],[{"tag":"TypeVar","contents":"b"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasBottom"],"HasBottom"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Pair"],"Pair"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}},"sourceSpan":{"start":[49,1],"name":"src/Neon/Values/Pair.purs","end":[52,1]}},{"comments":null,"title":"pairHasCompare","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasCompare"],"HasCompare"],[{"tag":"TypeVar","contents":"a"}]],[[["Neon","Types","HasCompare"],"HasCompare"],[{"tag":"TypeVar","contents":"b"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasCompare"],"HasCompare"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Pair"],"Pair"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}},"sourceSpan":{"start":[52,1],"name":"src/Neon/Values/Pair.purs","end":[57,1]}},{"comments":null,"title":"pairHasCompose","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasCompose"],"HasCompose"]},{"tag":"TypeConstructor","contents":[["Neon","Values","Pair"],"Pair"]}]}},"sourceSpan":{"start":[57,1],"name":"src/Neon/Values/Pair.purs","end":[60,1]}},{"comments":null,"title":"pairHasDivide","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasDivide"],"HasDivide"],[{"tag":"TypeVar","contents":"a"}]],[[["Neon","Types","HasDivide"],"HasDivide"],[{"tag":"TypeVar","contents":"b"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasDivide"],"HasDivide"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Pair"],"Pair"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}},"sourceSpan":{"start":[60,1],"name":"src/Neon/Values/Pair.purs","end":[64,1]}},{"comments":null,"title":"pairHasEqual","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasEqual"],"HasEqual"],[{"tag":"TypeVar","contents":"a"}]],[[["Neon","Types","HasEqual"],"HasEqual"],[{"tag":"TypeVar","contents":"b"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasEqual"],"HasEqual"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Pair"],"Pair"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}},"sourceSpan":{"start":[64,1],"name":"src/Neon/Values/Pair.purs","end":[67,1]}},{"comments":null,"title":"pairHasFold","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasFold"],"HasFold"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Pair"],"Pair"]},{"tag":"TypeVar","contents":"x"}]}}]}},"sourceSpan":{"start":[67,1],"name":"src/Neon/Values/Pair.purs","end":[71,1]}},{"comments":null,"title":"pairHasMap","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasMap"],"HasMap"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Pair"],"Pair"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[71,1],"name":"src/Neon/Values/Pair.purs","end":[74,1]}},{"comments":null,"title":"pairHasMultiply","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasMultiply"],"HasMultiply"],[{"tag":"TypeVar","contents":"a"}]],[[["Neon","Types","HasMultiply"],"HasMultiply"],[{"tag":"TypeVar","contents":"b"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasMultiply"],"HasMultiply"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Pair"],"Pair"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}},"sourceSpan":{"start":[74,1],"name":"src/Neon/Values/Pair.purs","end":[77,1]}},{"comments":null,"title":"pairHasNot","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasNot"],"HasNot"],[{"tag":"TypeVar","contents":"a"}]],[[["Neon","Types","HasNot"],"HasNot"],[{"tag":"TypeVar","contents":"b"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasNot"],"HasNot"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Pair"],"Pair"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}},"sourceSpan":{"start":[77,1],"name":"src/Neon/Values/Pair.purs","end":[80,1]}},{"comments":null,"title":"pairHasOne","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasOne"],"HasOne"],[{"tag":"TypeVar","contents":"a"}]],[[["Neon","Types","HasOne"],"HasOne"],[{"tag":"TypeVar","contents":"b"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasOne"],"HasOne"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Pair"],"Pair"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}},"sourceSpan":{"start":[80,1],"name":"src/Neon/Values/Pair.purs","end":[83,1]}},{"comments":null,"title":"pairHasOr","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasOr"],"HasOr"],[{"tag":"TypeVar","contents":"a"}]],[[["Neon","Types","HasOr"],"HasOr"],[{"tag":"TypeVar","contents":"b"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasOr"],"HasOr"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Pair"],"Pair"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}},"sourceSpan":{"start":[83,1],"name":"src/Neon/Values/Pair.purs","end":[86,1]}},{"comments":null,"title":"pairHasPure","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasZero"],"HasZero"],[{"tag":"TypeVar","contents":"a"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasPure"],"HasPure"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Pair"],"Pair"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[86,1],"name":"src/Neon/Values/Pair.purs","end":[89,1]}},{"comments":null,"title":"pairHasShow","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasShow"],"HasShow"],[{"tag":"TypeVar","contents":"a"}]],[[["Neon","Types","HasShow"],"HasShow"],[{"tag":"TypeVar","contents":"b"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasShow"],"HasShow"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Pair"],"Pair"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}},"sourceSpan":{"start":[89,1],"name":"src/Neon/Values/Pair.purs","end":[96,1]}},{"comments":null,"title":"pairHasSubtract","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasSubtract"],"HasSubtract"],[{"tag":"TypeVar","contents":"a"}]],[[["Neon","Types","HasSubtract"],"HasSubtract"],[{"tag":"TypeVar","contents":"b"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasSubtract"],"HasSubtract"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Pair"],"Pair"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}},"sourceSpan":{"start":[96,1],"name":"src/Neon/Values/Pair.purs","end":[99,1]}},{"comments":null,"title":"pairHasTop","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasTop"],"HasTop"],[{"tag":"TypeVar","contents":"a"}]],[[["Neon","Types","HasTop"],"HasTop"],[{"tag":"TypeVar","contents":"b"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasTop"],"HasTop"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Pair"],"Pair"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}},"sourceSpan":{"start":[99,1],"name":"src/Neon/Values/Pair.purs","end":[102,1]}},{"comments":null,"title":"pairHasZero","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasZero"],"HasZero"],[{"tag":"TypeVar","contents":"a"}]],[[["Neon","Types","HasZero"],"HasZero"],[{"tag":"TypeVar","contents":"b"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasZero"],"HasZero"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Pair"],"Pair"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}},"sourceSpan":{"start":[102,1],"name":"src/Neon/Values/Pair.purs","end":[112,1]}}],"comments":"Represents a pair of values. That is, a pair contains both values at the\nsame time, unlike `Either` which only has one. Pairs are also known as\ntuples.\n","title":"Pair","fixity":null,"info":{"declType":"data","dataDeclType":"newtype","typeArguments":[["a",null],["b",null]]},"sourceSpan":{"start":[34,1],"name":"src/Neon/Values/Pair.purs","end":[36,1]}},{"children":[],"comments":"Creates a pair. This is useful to avoid the `Pair` constructor and record\nboilerplate.\n\n``` purescript\npair 'x' 1 == Pair { first: 'x', second: 1 }\n-- true\n```\n","title":"pair","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Pair"],"Pair"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]}]},null]},null]}},"sourceSpan":{"start":[112,1],"name":"src/Neon/Values/Pair.purs","end":[113,1]}},{"children":[],"comments":"Converts a function that takes a pair into one that takes two arguments.\n\n``` purescript\nlet f (Pair x) = x.first + x.second\nuncurry f \"race\" \"car\"\n-- \"racecar\"\n```\n","title":"curry","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["c",{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Pair"],"Pair"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeVar","contents":"c"}]}}]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeVar","contents":"c"}]}]}}]},null]},null]},null]}},"sourceSpan":{"start":[122,1],"name":"src/Neon/Values/Pair.purs","end":[123,1]}},{"children":[],"comments":"Converts a function that takes two arguments into one that takes a pair.\n\n``` purescript\ncurry (+) (pair \"race\" \"car\")\n-- \"racecar\"\n```\n","title":"uncurry","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["c",{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeVar","contents":"c"}]}]}}]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Pair"],"Pair"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeVar","contents":"c"}]}}]},null]},null]},null]}},"sourceSpan":{"start":[131,1],"name":"src/Neon/Values/Pair.purs","end":[132,1]}},{"children":[],"comments":"Swaps the elements of the pair.\n\n``` purescript\nswap (pair 1 2)\n-- pair 2 1\n```\n","title":"swap","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Pair"],"Pair"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Pair"],"Pair"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeVar","contents":"a"}]}]},null]},null]}},"sourceSpan":{"start":[140,1],"name":"src/Neon/Values/Pair.purs","end":[141,1]}}]},{"reExports":[],"name":"Neon.Values.Proxy","comments":null,"declarations":[{"children":[{"comments":null,"title":"Proxy","info":{"arguments":[],"declType":"dataConstructor"},"sourceSpan":null},{"comments":null,"title":"proxyHasEqual","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasEqual"],"HasEqual"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Proxy"],"Proxy"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[11,1],"name":"src/Neon/Values/Proxy.purs","end":[14,1]}},{"comments":null,"title":"proxyHasShow","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasShow"],"HasShow"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","Proxy"],"Proxy"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[14,1],"name":"src/Neon/Values/Proxy.purs","end":[15,12]}}],"comments":"A value that represents a type.\n","title":"Proxy","fixity":null,"info":{"declType":"data","dataDeclType":"data","typeArguments":[["a",null]]},"sourceSpan":{"start":[9,1],"name":"src/Neon/Values/Proxy.purs","end":[11,1]}}]},{"reExports":[],"name":"Neon.Values.Regex","comments":null,"declarations":[{"children":[{"comments":null,"title":"regexHasEqual","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasEqual"],"HasEqual"]},{"tag":"TypeConstructor","contents":[["Neon","Values","Regex"],"Regex"]}]}},"sourceSpan":{"start":[20,1],"name":"src/Neon/Values/Regex.purs","end":[23,1]}},{"comments":null,"title":"regexHasShow","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasShow"],"HasShow"]},{"tag":"TypeConstructor","contents":[["Neon","Values","Regex"],"Regex"]}]}},"sourceSpan":{"start":[23,1],"name":"src/Neon/Values/Regex.purs","end":[27,1]}}],"comments":"Represents regular expressions. A wrapper around `RegExp` from JavaScript.\n","title":"Regex","fixity":null,"info":{"kind":{"tag":"Star","contents":[]},"declType":"externData"},"sourceSpan":{"start":[18,1],"name":"src/Neon/Values/Regex.purs","end":[20,1]}},{"children":[],"comments":"Represents the flags that a regex can have.\n","title":"RegexFlags","fixity":null,"info":{"arguments":[],"declType":"typeSynonym","type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Object"]},{"tag":"RCons","contents":["ignoreCase",{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]},{"tag":"RCons","contents":["global",{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]},{"tag":"RCons","contents":["multiline",{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]},{"tag":"REmpty","contents":[]}]}]}]}]}},"sourceSpan":{"start":[27,1],"name":"src/Neon/Values/Regex.purs","end":[39,1]}},{"children":[],"comments":"Creates a regular expression.\n\n``` purescript\nshow (regex \"a\" { ignoreCase: true, global: false, multiline: false })\n-- \"regex \\\"a\\\" { ignoreCase: true, global: false, multiline: false }\"\n```\n","title":"regex","fixity":null,"info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Neon","Values","Regex"],"RegexFlags"]}]},{"tag":"TypeConstructor","contents":[["Neon","Values","Regex"],"Regex"]}]}]}},"sourceSpan":{"start":[39,1],"name":"src/Neon/Values/Regex.purs","end":[40,1]}},{"children":[],"comments":"Returns the default regular expression flags.\n\n``` purescript\nshow regexFlags\n-- \"{ ignoreCase: false, global: false, multiline: false }\"\n```\n","title":"regexFlags","fixity":null,"info":{"declType":"value","type":{"tag":"TypeConstructor","contents":[["Neon","Values","Regex"],"RegexFlags"]}},"sourceSpan":{"start":[48,1],"name":"src/Neon/Values/Regex.purs","end":[49,1]}},{"children":[],"comments":"Tests if a regular expression matches a string.\n\n``` purescript\ntest \"a\" (regex \"a\" regexFlags)\n-- true\n```\n","title":"test","fixity":null,"info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Neon","Values","Regex"],"Regex"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}]}},"sourceSpan":{"start":[61,1],"name":"src/Neon/Values/Regex.purs","end":[62,1]}}]},{"reExports":[],"name":"Neon.Values.These","comments":null,"declarations":[{"children":[{"comments":null,"title":"This","info":{"arguments":[{"tag":"TypeVar","contents":"a"}],"declType":"dataConstructor"},"sourceSpan":null},{"comments":null,"title":"That","info":{"arguments":[{"tag":"TypeVar","contents":"b"}],"declType":"dataConstructor"},"sourceSpan":null},{"comments":null,"title":"Both","info":{"arguments":[{"tag":"TypeVar","contents":"a"},{"tag":"TypeVar","contents":"b"}],"declType":"dataConstructor"},"sourceSpan":null},{"comments":null,"title":"theseHasAdd","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasAdd"],"HasAdd"],[{"tag":"TypeVar","contents":"a"}]],[[["Neon","Types","HasAdd"],"HasAdd"],[{"tag":"TypeVar","contents":"b"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasAdd"],"HasAdd"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","These"],"These"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}},"sourceSpan":{"start":[27,1],"name":"src/Neon/Values/These.purs","end":[38,1]}},{"comments":null,"title":"theseHasApply","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasAdd"],"HasAdd"],[{"tag":"TypeVar","contents":"a"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasApply"],"HasApply"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","These"],"These"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[38,1],"name":"src/Neon/Values/These.purs","end":[47,1]}},{"comments":null,"title":"theseHasBind","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasAdd"],"HasAdd"],[{"tag":"TypeVar","contents":"a"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasBind"],"HasBind"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","These"],"These"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[47,1],"name":"src/Neon/Values/These.purs","end":[56,1]}},{"comments":null,"title":"theseHasEqual","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasEqual"],"HasEqual"],[{"tag":"TypeVar","contents":"a"}]],[[["Neon","Types","HasEqual"],"HasEqual"],[{"tag":"TypeVar","contents":"b"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasEqual"],"HasEqual"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","These"],"These"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}},"sourceSpan":{"start":[56,1],"name":"src/Neon/Values/These.purs","end":[62,1]}},{"comments":null,"title":"theseHasFold","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasFold"],"HasFold"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","These"],"These"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[62,1],"name":"src/Neon/Values/These.purs","end":[72,1]}},{"comments":null,"title":"theseHasMap","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasMap"],"HasMap"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","These"],"These"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[72,1],"name":"src/Neon/Values/These.purs","end":[78,1]}},{"comments":null,"title":"theseHasPure","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasAdd"],"HasAdd"],[{"tag":"TypeVar","contents":"a"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasPure"],"HasPure"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","These"],"These"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[78,1],"name":"src/Neon/Values/These.purs","end":[81,1]}},{"comments":null,"title":"theseHasShow","info":{"declType":"instance","dependencies":[[[["Neon","Types","HasShow"],"HasShow"],[{"tag":"TypeVar","contents":"a"}]],[[["Neon","Types","HasShow"],"HasShow"],[{"tag":"TypeVar","contents":"b"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasShow"],"HasShow"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","These"],"These"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}},"sourceSpan":{"start":[81,1],"name":"src/Neon/Values/These.purs","end":[98,1]}}],"comments":"Represents either one value or another, or both. This is different than\n`Either`, which only represents one or the other. And `Pair` only\nrepresents both values.\n","title":"These","fixity":null,"info":{"declType":"data","dataDeclType":"data","typeArguments":[["a",null],["b",null]]},"sourceSpan":{"start":[22,1],"name":"src/Neon/Values/These.purs","end":[27,1]}},{"children":[],"comments":"Applies the first function to `This` values, the second function to `That`\nvalues, and the third function to `Both` values.\n\n``` purescript\nthese (+ 2) (* 2) (+) (This 3)\n-- 5\nthese (+ 2) (* 2) (+) (That 3)\n-- 6\nthese (+ 2) (* 2) (+) (Both 3 4)\n-- 7\n```\n","title":"these","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["c",{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"c"}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeVar","contents":"c"}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeVar","contents":"c"}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","These"],"These"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeVar","contents":"c"}]}]}]}]},null]},null]},null]}},"sourceSpan":{"start":[98,1],"name":"src/Neon/Values/These.purs","end":[99,1]}},{"children":[],"comments":"Returns `true` if the `These` is a `This` value. Returns `false`\notherwise.\n\n``` purescript\nisThis (This unit)\n-- true\n```\n","title":"isThis","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","These"],"These"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]},null]},null]}},"sourceSpan":{"start":[111,1],"name":"src/Neon/Values/These.purs","end":[112,1]}},{"children":[],"comments":"Returns `true` if the `These` is a `That` value. Returns `false`\notherwise.\n\n``` purescript\nisThat (That unit)\n-- true\n```\n","title":"isThat","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","These"],"These"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]},null]},null]}},"sourceSpan":{"start":[123,1],"name":"src/Neon/Values/These.purs","end":[124,1]}},{"children":[],"comments":"Returns `true` if the `These` is a `Both` value. Returns `false`\notherwise.\n\n``` purescript\nisBith (Both unit unit)\n-- true\n```\n","title":"isBoth","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Values","These"],"These"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]},null]},null]}},"sourceSpan":{"start":[135,1],"name":"src/Neon/Values/These.purs","end":[136,1]}}]},{"reExports":[],"name":"Neon.Values.Unit","comments":null,"declarations":[{"children":[{"comments":null,"title":"unitHasAdd","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasAdd"],"HasAdd"]},{"tag":"TypeConstructor","contents":[["Neon","Values","Unit"],"Unit"]}]}},"sourceSpan":{"start":[26,1],"name":"src/Neon/Values/Unit.purs","end":[29,1]}},{"comments":null,"title":"unitHasAnd","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasAnd"],"HasAnd"]},{"tag":"TypeConstructor","contents":[["Neon","Values","Unit"],"Unit"]}]}},"sourceSpan":{"start":[29,1],"name":"src/Neon/Values/Unit.purs","end":[32,1]}},{"comments":null,"title":"unitHasBottom","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasBottom"],"HasBottom"]},{"tag":"TypeConstructor","contents":[["Neon","Values","Unit"],"Unit"]}]}},"sourceSpan":{"start":[32,1],"name":"src/Neon/Values/Unit.purs","end":[35,1]}},{"comments":null,"title":"unitHasCompare","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasCompare"],"HasCompare"]},{"tag":"TypeConstructor","contents":[["Neon","Values","Unit"],"Unit"]}]}},"sourceSpan":{"start":[35,1],"name":"src/Neon/Values/Unit.purs","end":[38,1]}},{"comments":null,"title":"unitHasDivide","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasDivide"],"HasDivide"]},{"tag":"TypeConstructor","contents":[["Neon","Values","Unit"],"Unit"]}]}},"sourceSpan":{"start":[38,1],"name":"src/Neon/Values/Unit.purs","end":[42,1]}},{"comments":null,"title":"unitHasEqual","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasEqual"],"HasEqual"]},{"tag":"TypeConstructor","contents":[["Neon","Values","Unit"],"Unit"]}]}},"sourceSpan":{"start":[42,1],"name":"src/Neon/Values/Unit.purs","end":[45,1]}},{"comments":null,"title":"unitHasMultiply","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasMultiply"],"HasMultiply"]},{"tag":"TypeConstructor","contents":[["Neon","Values","Unit"],"Unit"]}]}},"sourceSpan":{"start":[45,1],"name":"src/Neon/Values/Unit.purs","end":[48,1]}},{"comments":null,"title":"unitHasNot","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasNot"],"HasNot"]},{"tag":"TypeConstructor","contents":[["Neon","Values","Unit"],"Unit"]}]}},"sourceSpan":{"start":[48,1],"name":"src/Neon/Values/Unit.purs","end":[51,1]}},{"comments":null,"title":"unitHasOne","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasOne"],"HasOne"]},{"tag":"TypeConstructor","contents":[["Neon","Values","Unit"],"Unit"]}]}},"sourceSpan":{"start":[51,1],"name":"src/Neon/Values/Unit.purs","end":[54,1]}},{"comments":null,"title":"unitHasOr","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasOr"],"HasOr"]},{"tag":"TypeConstructor","contents":[["Neon","Values","Unit"],"Unit"]}]}},"sourceSpan":{"start":[54,1],"name":"src/Neon/Values/Unit.purs","end":[57,1]}},{"comments":null,"title":"unitHasShow","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasShow"],"HasShow"]},{"tag":"TypeConstructor","contents":[["Neon","Values","Unit"],"Unit"]}]}},"sourceSpan":{"start":[57,1],"name":"src/Neon/Values/Unit.purs","end":[60,1]}},{"comments":null,"title":"unitHasSubtract","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasSubtract"],"HasSubtract"]},{"tag":"TypeConstructor","contents":[["Neon","Values","Unit"],"Unit"]}]}},"sourceSpan":{"start":[60,1],"name":"src/Neon/Values/Unit.purs","end":[63,1]}},{"comments":null,"title":"unitHasTop","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasTop"],"HasTop"]},{"tag":"TypeConstructor","contents":[["Neon","Values","Unit"],"Unit"]}]}},"sourceSpan":{"start":[63,1],"name":"src/Neon/Values/Unit.purs","end":[66,1]}},{"comments":null,"title":"unitHasZero","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Types","HasZero"],"HasZero"]},{"tag":"TypeConstructor","contents":[["Neon","Values","Unit"],"Unit"]}]}},"sourceSpan":{"start":[66,1],"name":"src/Neon/Values/Unit.purs","end":[70,1]}}],"comments":"Represents nothing. The unit type is often used to show that only the\neffects of a given function are important.\n","title":"Unit","fixity":null,"info":{"declType":"data","dataDeclType":"newtype","typeArguments":[]},"sourceSpan":{"start":[24,1],"name":"src/Neon/Values/Unit.purs","end":[26,1]}},{"children":[],"comments":"The only inhabitant of the `Unit` type.\n","title":"unit","fixity":null,"info":{"declType":"value","type":{"tag":"TypeConstructor","contents":[["Neon","Values","Unit"],"Unit"]}},"sourceSpan":{"start":[70,1],"name":"src/Neon/Values/Unit.purs","end":[71,1]}}]}],"resolvedDependencies":{},"bookmarks":[{"package":null,"item":["Neon.Types.HasBottom","HasBottom"]},{"package":null,"item":["Neon.Types.HasDivide","HasDivide"]},{"package":null,"item":["Neon.Types.HasDivide","(/)"]},{"package":null,"item":["Neon.Types.HasDivide","(%)"]},{"package":null,"item":["Neon.Types.HasDivide","reciprocal"]},{"package":null,"item":["Neon.Types.HasMap","HasMap"]},{"package":null,"item":["Neon.Types.HasMap","void"]},{"package":null,"item":["Neon.Types.HasMap","for"]},{"package":null,"item":["Neon.Types.HasSubtract","HasSubtract"]},{"package":null,"item":["Neon.Types.HasSubtract","(-)"]},{"package":null,"item":["Neon.Types.HasSubtract","negate"]},{"package":null,"item":["Neon.Types.HasSubtract","abs"]},{"package":null,"item":["Neon.Types.HasMultiply","HasMultiply"]},{"package":null,"item":["Neon.Types.HasMultiply","(*)"]},{"package":null,"item":["Neon.Types.HasIdentity","HasIdentity"]},{"package":null,"item":["Neon.Types.HasPure","HasPure"]},{"package":null,"item":["Neon.Types.HasPure","when"]},{"package":null,"item":["Neon.Types.HasPure","unless"]},{"package":null,"item":["Neon.Types.HasBind","HasBind"]},{"package":null,"item":["Neon.Types.HasBind","join"]},{"package":null,"item":["Neon.Types.HasEqual","HasEqual"]},{"package":null,"item":["Neon.Types.HasEqual","(==)"]},{"package":null,"item":["Neon.Types.HasAlternative","HasAlternative"]},{"package":null,"item":["Neon.Types.HasAdd","HasAdd"]},{"package":null,"item":["Neon.Types.HasAdd","(+)"]},{"package":null,"item":["Neon.Types.HasToArray","HasToArray"]},{"package":null,"item":["Neon.Types.HasOr","HasOr"]},{"package":null,"item":["Neon.Types.HasOr","(||)"]},{"package":null,"item":["Neon.Types.HasFromArray","HasFromArray"]},{"package":null,"item":["Neon.Types.HasCompare","HasCompare"]},{"package":null,"item":["Neon.Types.HasCompare","lt"]},{"package":null,"item":["Neon.Types.HasCompare","(<)"]},{"package":null,"item":["Neon.Types.HasCompare","lte"]},{"package":null,"item":["Neon.Types.HasCompare","(<=)"]},{"package":null,"item":["Neon.Types.HasCompare","gte"]},{"package":null,"item":["Neon.Types.HasCompare","(>=)"]},{"package":null,"item":["Neon.Types.HasCompare","gt"]},{"package":null,"item":["Neon.Types.HasCompare","(>)"]},{"package":null,"item":["Neon.Types.HasCompare","min"]},{"package":null,"item":["Neon.Types.HasCompare","max"]},{"package":null,"item":["Neon.Types.HasCompare","clamp"]},{"package":null,"item":["Neon.Types.HasCompare","comparing"]},{"package":null,"item":["Neon.Types.HasOne","HasOne"]},{"package":null,"item":["Neon.Types.HasOne","sign"]},{"package":null,"item":["Neon.Types.HasShow","HasShow"]},{"package":null,"item":["Neon.Types.HasAnd","HasAnd"]},{"package":null,"item":["Neon.Types.HasAnd","(&&)"]},{"package":null,"item":["Neon.Types.HasLogarithm","HasLogarithm"]},{"package":null,"item":["Neon.Types.HasCompose","HasCompose"]},{"package":null,"item":["Neon.Types.HasCompose","(>>)"]},{"package":null,"item":["Neon.Types.HasCompose","(<<)"]},{"package":null,"item":["Neon.Types.HasLift","HasLift"]},{"package":null,"item":["Neon.Types.HasTop","HasTop"]},{"package":null,"item":["Neon.Types.HasTraverse","HasTraverse"]},{"package":null,"item":["Neon.Types.HasTraverse","sequence"]},{"package":null,"item":["Neon.Types.HasRoot","HasRoot"]},{"package":null,"item":["Neon.Types.HasState","HasState"]},{"package":null,"item":["Neon.Types.HasState","getState"]},{"package":null,"item":["Neon.Types.HasState","setState"]},{"package":null,"item":["Neon.Types.HasApply","HasApply"]},{"package":null,"item":["Neon.Types.HasPower","HasPower"]},{"package":null,"item":["Neon.Types.HasPower","(^)"]},{"package":null,"item":["Neon.Types.HasNot","HasNot"]},{"package":null,"item":["Neon.Types.HasNot","isInfinite"]},{"package":null,"item":["Neon.Types.HasNot","notEqual"]},{"package":null,"item":["Neon.Types.HasNot","(!=)"]},{"package":null,"item":["Neon.Types.HasEmpty","HasEmpty"]},{"package":null,"item":["Neon.Types.HasEmpty","guard"]},{"package":null,"item":["Neon.Types.IsEnumerable","IsEnumerable"]},{"package":null,"item":["Neon.Types.IsEnumerable","range"]},{"package":null,"item":["Neon.Types.HasZero","HasZero"]},{"package":null,"item":["Neon.Types.HasFold","HasFold"]},{"package":null,"item":["Neon.Types.HasFold","fold"]},{"package":null,"item":["Neon.Types.HasFold","foldMap"]},{"package":null,"item":["Neon.Types.HasFold","length"]},{"package":null,"item":["Neon.Types.HasFold","isPresent"]},{"package":null,"item":["Neon.Types.HasFold","isBlank"]},{"package":null,"item":["Neon.Types.HasFold","contains"]},{"package":null,"item":["Neon.Types.HasFold","sum"]},{"package":null,"item":["Neon.Types.HasFold","product"]},{"package":null,"item":["Neon.Transformers.StateT","StateT"]},{"package":null,"item":["Neon.Transformers.StateT","runStateT"]},{"package":null,"item":["Neon.Transformers.MaybeT","MaybeT"]},{"package":null,"item":["Neon.Transformers.MaybeT","runMaybeT"]},{"package":null,"item":["Neon.Effects.Mutable","Mutable"]},{"package":null,"item":["Neon.Effects.Mutable","runMutable"]},{"package":null,"item":["Neon.Effects.Mutable","MutableReference"]},{"package":null,"item":["Neon.Effects.Mutable","newMutableReference"]},{"package":null,"item":["Neon.Effects.Mutable","getMutableReference"]},{"package":null,"item":["Neon.Effects.Mutable","setMutableReference"]},{"package":null,"item":["Neon.Effects.Effect","Effect"]},{"package":null,"item":["Neon.Effects.Effect","runPure"]},{"package":null,"item":["Neon.Effects.Effect","unsafeRunEffect"]},{"package":null,"item":["Neon.Effects.Exception","EXCEPTION"]},{"package":null,"item":["Neon.Effects.Exception","Exception"]},{"package":null,"item":["Neon.Effects.Exception","exception"]},{"package":null,"item":["Neon.Effects.Exception","throw"]},{"package":null,"item":["Neon.Effects.Exception","catch"]},{"package":null,"item":["Neon.Effects.Console","CONSOLE"]},{"package":null,"item":["Neon.Effects.Console","info"]},{"package":null,"item":["Neon.Effects.Console","log"]},{"package":null,"item":["Neon.Effects.Console","warn"]},{"package":null,"item":["Neon.Effects.Console","error"]},{"package":null,"item":["Neon.Effects.Console","print"]},{"package":null,"item":["Neon.Effects.Random","RANDOM"]},{"package":null,"item":["Neon.Effects.Random","randomNumber"]},{"package":null,"item":["Neon.Primitives.Number","nan"]},{"package":null,"item":["Neon.Primitives.Number","isNaN"]},{"package":null,"item":["Neon.Primitives.Number","infinity"]},{"package":null,"item":["Neon.Primitives.Number","isFinite"]},{"package":null,"item":["Neon.Primitives.Number","round"]},{"package":null,"item":["Neon.Primitives.Number","ceiling"]},{"package":null,"item":["Neon.Primitives.Number","floor"]},{"package":null,"item":["Neon.Primitives.Number","truncate"]},{"package":null,"item":["Neon.Primitives.Boolean","otherwise"]},{"package":null,"item":["Neon.Primitives.Boolean","boolean"]},{"package":null,"item":["Neon.Primitives.Int","toNumber"]},{"package":null,"item":["Neon.Primitives.Char","toLower"]},{"package":null,"item":["Neon.Primitives.Char","toUpper"]},{"package":null,"item":["Neon.Primitives.Function","always"]},{"package":null,"item":["Neon.Primitives.Function","flip"]},{"package":null,"item":["Neon.Primitives.Function","on"]},{"package":null,"item":["Neon.Primitives.Function","(|>)"]},{"package":null,"item":["Neon.Primitives.Function","(<|)"]},{"package":null,"item":["Neon.Values.List","List"]},{"package":null,"item":["Neon.Values.Constant","Constant"]},{"package":null,"item":["Neon.Values.Constant","runConstant"]},{"package":null,"item":["Neon.Values.Unit","Unit"]},{"package":null,"item":["Neon.Values.Unit","unit"]},{"package":null,"item":["Neon.Values.Maybe","Maybe"]},{"package":null,"item":["Neon.Values.Maybe","maybe"]},{"package":null,"item":["Neon.Values.Maybe","isJust"]},{"package":null,"item":["Neon.Values.Maybe","isNothing"]},{"package":null,"item":["Neon.Values.Maybe","withDefault"]},{"package":null,"item":["Neon.Values.Ordering","Ordering"]},{"package":null,"item":["Neon.Values.Either","Either"]},{"package":null,"item":["Neon.Values.Either","either"]},{"package":null,"item":["Neon.Values.Either","isLeft"]},{"package":null,"item":["Neon.Values.Either","isRight"]},{"package":null,"item":["Neon.Values.Either","fromEither"]},{"package":null,"item":["Neon.Values.Either","toEither"]},{"package":null,"item":["Neon.Values.Identity","Identity"]},{"package":null,"item":["Neon.Values.Identity","runIdentity"]},{"package":null,"item":["Neon.Values.Pair","Pair"]},{"package":null,"item":["Neon.Values.Pair","pair"]},{"package":null,"item":["Neon.Values.Pair","curry"]},{"package":null,"item":["Neon.Values.Pair","uncurry"]},{"package":null,"item":["Neon.Values.Pair","swap"]},{"package":null,"item":["Neon.Values.These","These"]},{"package":null,"item":["Neon.Values.These","these"]},{"package":null,"item":["Neon.Values.These","isThis"]},{"package":null,"item":["Neon.Values.These","isThat"]},{"package":null,"item":["Neon.Values.These","isBoth"]},{"package":null,"item":["Neon.Values.Proxy","Proxy"]},{"package":null,"item":["Neon.Values.Regex","Regex"]},{"package":null,"item":["Neon.Values.Regex","RegexFlags"]},{"package":null,"item":["Neon.Values.Regex","regex"]},{"package":null,"item":["Neon.Values.Regex","regexFlags"]},{"package":null,"item":["Neon.Values.Regex","test"]},{"package":null,"item":["Neon.Values.Nullable","Nullable"]},{"package":null,"item":["Neon.Values.Nullable","fromNullable"]},{"package":null,"item":["Neon.Values.Nullable","toNullable"]},{"package":null,"item":["Neon.Values.Dictionary","Dictionary"]}],"version":"0.0.36","github":["tfausak","purescript-neon"],"versionTag":"v0.0.36","compilerVersion":"0.8.5.0"}