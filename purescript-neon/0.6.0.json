{"uploader":"adius","packageMeta":{"repository":{"url":"git://github.com/tfausak/purescript-neon.git","type":"git"},"devDependencies":{"purescript-test-unit":"^13.0.0","purescript-quickcheck":"^4.6.1"},"dependencies":{"purescript-free":"^4.2.0","purescript-proxy":"^2.0.0","purescript-exceptions":"^3.0.0","purescript-newtype":"^2.0.0","purescript-maps":"^3.0.0","purescript-control":"^3.0.0","purescript-console":"^3.0.0","purescript-either":"^3.0.0","purescript-profunctor":"^3.2.0","purescript-folds":"^3.1.0","purescript-arrays":"^4.0.1","purescript-maybe":"^3.0.0","purescript-exists":"^3.0.0","purescript-distributive":"^3.0.0","purescript-unfoldable":"^3.0.0","purescript-invariant":"^3.0.0","purescript-lazy":"^3.0.0","purescript-monoid":"^3.0.0","purescript-aff":"^4.0.0","purescript-foldable-traversable":"^3.6.0","purescript-debug":"^3.0.0","purescript-tailrec":"^3.3.0","purescript-lens":"^3.0.0","purescript-functors":"^2.0.0","purescript-prelude":"^3.0.0","purescript-st":"^3.0.0","purescript-bifunctors":"^3.0.0","purescript-nonempty":"^4.0.0","purescript-contravariant":"^3.0.0","purescript-assert":"^3.0.0","purescript-generics":"^4.0.0","purescript-unsafe-coerce":"^3.0.0","purescript-refs":"^3.0.0","purescript-integers":"^3.2.0","purescript-eff":"^3.1.0","purescript-const":"^3.0.0","purescript-transformers":"^3.0.0","purescript-globals":"^3.0.0","purescript-enums":"^3.1.0","purescript-catenable-lists":"^4.0.0","purescript-random":"^3.0.0","purescript-parallel":"^3.0.0","purescript-tuples":"^4.0.0","purescript-strings":"^3.0.0","purescript-identity":"^3.0.0","purescript-sets":"^3.1.0","purescript-lists":"^4.0.0","purescript-nullable":"^3.0.0","purescript-datetime":"^3.0.0","purescript-functions":"^3.0.0"},"name":"purescript-neon","license":["MIT"]},"tagTime":"2018-01-17T22:50:45+0000","modules":[{"reExports":[{"moduleName":{"package":null,"item":["Neon","Class"]},"declarations":[{"children":[{"comments":null,"title":"add","info":{"declType":"typeClassMember","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[14,3],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasAdd.purs","end":[14,21]}},{"comments":null,"title":"arrayHasAdd","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasAdd"],"HasAdd"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[16,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasAdd.purs","end":[16,41]}},{"comments":null,"title":"booleanHasAdd","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasAdd"],"HasAdd"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}},"sourceSpan":{"start":[19,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasAdd.purs","end":[19,37]}},{"comments":null,"title":"listHasAdd","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasAdd"],"HasAdd"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","List","Types"],"List"]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[22,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasAdd.purs","end":[22,44]}},{"comments":null,"title":"numberHasAdd","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasAdd"],"HasAdd"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]}},"sourceSpan":{"start":[25,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasAdd.purs","end":[25,39]}},{"comments":null,"title":"orderingHasAdd","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasAdd"],"HasAdd"]},{"tag":"TypeConstructor","contents":[["Data","Ordering"],"Ordering"]}]}},"sourceSpan":{"start":[28,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasAdd.purs","end":[28,48]}},{"comments":null,"title":"stringHasAdd","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasAdd"],"HasAdd"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}},"sourceSpan":{"start":[31,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasAdd.purs","end":[31,39]}}],"comments":"Represents types that can be added together. This is also known as a\n[semigroup](https://en.wikipedia.org/wiki/Semigroup).\n\n``` purescript\n2 :add 1 -- 3\n\"a\" :add \"b\" -- \"ab\"\n```\n","title":"HasAdd","info":{"fundeps":[],"arguments":[["a",null]],"declType":"typeClass","superclasses":[]},"sourceSpan":{"start":[13,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasAdd.purs","end":[14,21]}},{"children":[{"comments":null,"title":"and","info":{"declType":"typeClassMember","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[40,3],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasAnd.purs","end":[40,21]}},{"comments":null,"title":"arrayHasAnd","info":{"declType":"instance","dependencies":[{"constraintClass":[["Neon","Class","HasEqual"],"HasEqual"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasAnd"],"HasAnd"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[42,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasAnd.purs","end":[42,66]}},{"comments":null,"title":"booleanHasAnd","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasAnd"],"HasAnd"]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}},"sourceSpan":{"start":[45,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasAnd.purs","end":[45,41]}},{"comments":null,"title":"functionHasAnd","info":{"declType":"instance","dependencies":[{"constraintClass":[["Neon","Class","HasAnd"],"HasAnd"],"constraintArgs":[{"tag":"TypeVar","contents":"b"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasAnd"],"HasAnd"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]}},"sourceSpan":{"start":[48,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasAnd.purs","end":[48,57]}},{"comments":null,"title":"intHasAnd","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasAnd"],"HasAnd"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}},"sourceSpan":{"start":[51,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasAnd.purs","end":[51,33]}},{"comments":null,"title":"listHasAnd","info":{"declType":"instance","dependencies":[{"constraintClass":[["Neon","Class","HasEqual"],"HasEqual"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasAnd"],"HasAnd"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","List","Types"],"List"]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[54,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasAnd.purs","end":[54,69]}}],"comments":"Represents types that can be conjoined. This is also known as\n[logical conjunction](https://en.wikipedia.org/wiki/Logical_conjunction).\n\n``` purescript\ntrue :and false -- false\n```\n\nSome types can't be conjoined per se but it is still useful to be able to\nuse the `&&` operator with them. For example, you can `and` two arrays\ntogether to get their intersection.\n\n``` purescript\n[1, 2, 3] :and [2, 3, 4] -- [2, 3]\n```\n\nFor integers, `and` is bitwise.\n\n``` purescript\n5 :and 3 -- 3\n```\n\nThe instance for functions is perhaps the hardest to understand. Combining\ntwo functions with `and` returns a new function that calls each function\nand then `and`s the results together.\n\n``` purescript\neven :and odd -- \\ x -> (even x) :and (odd x)\n(even :and odd) 3 -- false\n```\n","title":"HasAnd","info":{"fundeps":[],"arguments":[["a",null]],"declType":"typeClass","superclasses":[]},"sourceSpan":{"start":[39,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasAnd.purs","end":[40,21]}},{"children":[{"comments":null,"title":"apply","info":{"declType":"typeClassMember","type":{"tag":"ForAll","contents":["c",{"tag":"ForAll","contents":["b",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"a"},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeVar","contents":"c"}]}}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"a"},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"a"},{"tag":"TypeVar","contents":"c"}]}]}]},null]},null]}},"sourceSpan":{"start":[17,3],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasApply.purs","end":[17,48]}},{"comments":null,"title":"arrayHasApply","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasApply"],"HasApply"]},{"tag":"TypeConstructor","contents":[["Prim"],"Array"]}]}},"sourceSpan":{"start":[19,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasApply.purs","end":[19,41]}},{"comments":null,"title":"effHasApply","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasApply"],"HasApply"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad","Eff"],"Eff"]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[22,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasApply.purs","end":[22,48]}},{"comments":null,"title":"listHasApply","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasApply"],"HasApply"]},{"tag":"TypeConstructor","contents":[["Data","List","Types"],"List"]}]}},"sourceSpan":{"start":[25,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasApply.purs","end":[25,44]}},{"comments":null,"title":"maybeHasApply","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasApply"],"HasApply"]},{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]}]}},"sourceSpan":{"start":[28,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasApply.purs","end":[28,46]}}],"comments":"Represents types that can be applied from within a container. In other\nwords, given both a function and a value in a container, apply the\nfunction to the value and return the result in a container. This is also\nknown as an applicative functor.\n\n``` purescript\n[3, 4] :apply [(_ + 2), (_ * 2)] -- [5, 6, 6, 8]\nJust 2 :apply (Just (_ + 1)) -- Just 3\n```\n","title":"HasApply","info":{"fundeps":[],"arguments":[["a",null]],"declType":"typeClass","superclasses":[]},"sourceSpan":{"start":[16,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasApply.purs","end":[17,48]}},{"children":[{"comments":null,"title":"bottom","info":{"declType":"typeClassMember","type":{"tag":"TypeVar","contents":"a"}},"sourceSpan":{"start":[14,3],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasBottom.purs","end":[14,14]}},{"comments":null,"title":"booleanHasBottom","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasBottom"],"HasBottom"]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}},"sourceSpan":{"start":[16,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasBottom.purs","end":[16,47]}},{"comments":null,"title":"charHasBottom","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasBottom"],"HasBottom"]},{"tag":"TypeConstructor","contents":[["Prim"],"Char"]}]}},"sourceSpan":{"start":[19,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasBottom.purs","end":[19,41]}},{"comments":null,"title":"intHasBottom","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasBottom"],"HasBottom"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}},"sourceSpan":{"start":[22,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasBottom.purs","end":[22,39]}},{"comments":null,"title":"numberHasBottom","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasBottom"],"HasBottom"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]}},"sourceSpan":{"start":[25,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasBottom.purs","end":[25,45]}},{"comments":null,"title":"orderingHasBottom","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasBottom"],"HasBottom"]},{"tag":"TypeConstructor","contents":[["Data","Ordering"],"Ordering"]}]}},"sourceSpan":{"start":[28,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasBottom.purs","end":[28,54]}}],"comments":"Represents types that have a lower bound.\n\n``` purescript\nbottom :: Boolean -- false\nbottom :: Char -- '\\0'\n```\n","title":"HasBottom","info":{"fundeps":[],"arguments":[["a",null]],"declType":"typeClass","superclasses":[]},"sourceSpan":{"start":[13,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasBottom.purs","end":[14,14]}},{"children":[{"comments":null,"title":"chain","info":{"declType":"typeClassMember","type":{"tag":"ForAll","contents":["c",{"tag":"ForAll","contents":["b",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"a"},{"tag":"TypeVar","contents":"c"}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"a"},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"a"},{"tag":"TypeVar","contents":"c"}]}]}]},null]},null]}},"sourceSpan":{"start":[14,3],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasChain.purs","end":[14,48]}},{"comments":null,"title":"arrayHasChain","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasChain"],"HasChain"]},{"tag":"TypeConstructor","contents":[["Prim"],"Array"]}]}},"sourceSpan":{"start":[16,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasChain.purs","end":[16,41]}},{"comments":null,"title":"effHasChain","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasChain"],"HasChain"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad","Eff"],"Eff"]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[19,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasChain.purs","end":[19,48]}},{"comments":null,"title":"listHasChain","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasChain"],"HasChain"]},{"tag":"TypeConstructor","contents":[["Data","List","Types"],"List"]}]}},"sourceSpan":{"start":[22,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasChain.purs","end":[22,44]}},{"comments":null,"title":"maybeHasChain","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasChain"],"HasChain"]},{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]}]}},"sourceSpan":{"start":[25,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasChain.purs","end":[25,46]}}],"comments":"Represents types that can express sequential actions. This is also known\nas a [monad](https://en.wikipedia.org/wiki/Monad_(functional_programming)).\n\n``` purescript\n[3, 5] :chain (\\ x -> [x, x * 2]) -- [3, 6, 5, 10]\n```\n","title":"HasChain","info":{"fundeps":[],"arguments":[["a",null]],"declType":"typeClass","superclasses":[]},"sourceSpan":{"start":[13,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasChain.purs","end":[14,48]}},{"children":[{"comments":null,"title":"compare","info":{"declType":"typeClassMember","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeConstructor","contents":[["Data","Ordering"],"Ordering"]}]}]}},"sourceSpan":{"start":[17,3],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasCompare.purs","end":[17,37]}},{"comments":null,"title":"arrayHasCompare","info":{"declType":"instance","dependencies":[{"constraintClass":[["Neon","Class","HasCompare"],"HasCompare"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasCompare"],"HasCompare"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[19,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasCompare.purs","end":[19,67]}},{"comments":null,"title":"booleanHasCompare","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasCompare"],"HasCompare"]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}},"sourceSpan":{"start":[24,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasCompare.purs","end":[24,49]}},{"comments":null,"title":"charHasCompare","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasCompare"],"HasCompare"]},{"tag":"TypeConstructor","contents":[["Prim"],"Char"]}]}},"sourceSpan":{"start":[27,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasCompare.purs","end":[27,43]}},{"comments":null,"title":"intHasCompare","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasCompare"],"HasCompare"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}},"sourceSpan":{"start":[30,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasCompare.purs","end":[30,41]}},{"comments":null,"title":"listHasCompare","info":{"declType":"instance","dependencies":[{"constraintClass":[["Neon","Class","HasCompare"],"HasCompare"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasCompare"],"HasCompare"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","List","Types"],"List"]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[33,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasCompare.purs","end":[33,70]}},{"comments":null,"title":"numberHasCompare","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasCompare"],"HasCompare"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]}},"sourceSpan":{"start":[43,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasCompare.purs","end":[43,47]}},{"comments":null,"title":"orderingHasCompare","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasCompare"],"HasCompare"]},{"tag":"TypeConstructor","contents":[["Data","Ordering"],"Ordering"]}]}},"sourceSpan":{"start":[46,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasCompare.purs","end":[46,56]}},{"comments":null,"title":"stringHasCompare","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasCompare"],"HasCompare"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}},"sourceSpan":{"start":[49,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasCompare.purs","end":[49,47]}}],"comments":"Represents type that have a [total order](https://en.wikipedia.org/wiki/Total_order).\n\n``` purescript\n2 :compare 1 -- GT\n2 :compare 2 -- EQ\n2 :compare 3 -- LT\n```\n","title":"HasCompare","info":{"fundeps":[],"arguments":[["a",null]],"declType":"typeClass","superclasses":[{"constraintClass":[["Neon","Class","HasEqual"],"HasEqual"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"constraintClass":[["Neon","Class","HasGreater"],"HasGreater"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"constraintClass":[["Neon","Class","HasLess"],"HasLess"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}]},"sourceSpan":{"start":[16,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasCompare.purs","end":[17,37]}},{"children":[{"comments":null,"title":"divide","info":{"declType":"typeClassMember","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[12,3],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasDivide.purs","end":[12,24]}},{"comments":null,"title":"intHasDivide","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasDivide"],"HasDivide"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}},"sourceSpan":{"start":[14,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasDivide.purs","end":[14,39]}},{"comments":null,"title":"numberHasDivide","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasDivide"],"HasDivide"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]}},"sourceSpan":{"start":[17,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasDivide.purs","end":[17,45]}}],"comments":"Represents types that are divisible.\n\n``` purescript\n7 :divide 2 -- 3\n7.0 :divide 2.0 -- 3.5\n```\n","title":"HasDivide","info":{"fundeps":[],"arguments":[["a",null]],"declType":"typeClass","superclasses":[]},"sourceSpan":{"start":[11,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasDivide.purs","end":[12,24]}},{"children":[{"comments":null,"title":"equal","info":{"declType":"typeClassMember","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}]}},"sourceSpan":{"start":[16,3],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasEqual.purs","end":[16,29]}},{"comments":null,"title":"arrayHasEqual","info":{"declType":"instance","dependencies":[{"constraintClass":[["Neon","Class","HasEqual"],"HasEqual"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasEqual"],"HasEqual"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[18,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasEqual.purs","end":[18,61]}},{"comments":null,"title":"booleanHasEqual","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasEqual"],"HasEqual"]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}},"sourceSpan":{"start":[23,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasEqual.purs","end":[23,45]}},{"comments":null,"title":"charHasEqual","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasEqual"],"HasEqual"]},{"tag":"TypeConstructor","contents":[["Prim"],"Char"]}]}},"sourceSpan":{"start":[26,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasEqual.purs","end":[26,39]}},{"comments":null,"title":"intHasEqual","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasEqual"],"HasEqual"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}},"sourceSpan":{"start":[29,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasEqual.purs","end":[29,37]}},{"comments":null,"title":"listHasEqual","info":{"declType":"instance","dependencies":[{"constraintClass":[["Neon","Class","HasEqual"],"HasEqual"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasEqual"],"HasEqual"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","List","Types"],"List"]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[32,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasEqual.purs","end":[32,64]}},{"comments":null,"title":"numberHasEqual","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasEqual"],"HasEqual"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]}},"sourceSpan":{"start":[37,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasEqual.purs","end":[37,43]}},{"comments":null,"title":"orderingHasEqual","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasEqual"],"HasEqual"]},{"tag":"TypeConstructor","contents":[["Data","Ordering"],"Ordering"]}]}},"sourceSpan":{"start":[40,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasEqual.purs","end":[40,52]}},{"comments":null,"title":"stringHasEqual","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasEqual"],"HasEqual"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}},"sourceSpan":{"start":[43,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasEqual.purs","end":[43,43]}},{"comments":null,"title":"unitHasEqual","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasEqual"],"HasEqual"]},{"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}},"sourceSpan":{"start":[46,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasEqual.purs","end":[46,44]}}],"comments":"Represents types that can be equal to each other.\n\n``` purescript\nequal 1 2 -- false\nequal 3 3 -- true\n```\n","title":"HasEqual","info":{"fundeps":[],"arguments":[["a",null]],"declType":"typeClass","superclasses":[]},"sourceSpan":{"start":[15,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasEqual.purs","end":[16,29]}},{"children":[{"comments":null,"title":"filter","info":{"declType":"typeClassMember","type":{"tag":"ForAll","contents":["b",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"a"},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"a"},{"tag":"TypeVar","contents":"b"}]}]}]},null]}},"sourceSpan":{"start":[13,3],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasFilter.purs","end":[13,51]}},{"comments":null,"title":"arrayHasFilter","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasFilter"],"HasFilter"]},{"tag":"TypeConstructor","contents":[["Prim"],"Array"]}]}},"sourceSpan":{"start":[15,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasFilter.purs","end":[15,43]}},{"comments":null,"title":"listHasFilter","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasFilter"],"HasFilter"]},{"tag":"TypeConstructor","contents":[["Data","List","Types"],"List"]}]}},"sourceSpan":{"start":[18,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasFilter.purs","end":[18,46]}}],"comments":"Represents types that can have elements filtered out of them.\n\n``` purescript\n[1, 2, 3, 4] :filter (_ > 2) -- [3, 4]\n```\n","title":"HasFilter","info":{"fundeps":[],"arguments":[["a",null]],"declType":"typeClass","superclasses":[]},"sourceSpan":{"start":[12,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasFilter.purs","end":[13,51]}},{"children":[{"comments":null,"title":"fromArray","info":{"declType":"typeClassMember","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeVar","contents":"b"}]}},"sourceSpan":{"start":[16,3],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasFromArray.purs","end":[16,28]}},{"comments":null,"title":"arrayHasFromArray","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasFromArray"],"HasFromArray"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[18,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasFromArray.purs","end":[18,55]}},{"comments":null,"title":"listHasFromArray","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasFromArray"],"HasFromArray"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","List","Types"],"List"]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[21,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasFromArray.purs","end":[21,58]}},{"comments":null,"title":"maybeHasFromArray","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasFromArray"],"HasFromArray"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[24,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasFromArray.purs","end":[24,60]}},{"comments":null,"title":"stringHasFromArray","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasFromArray"],"HasFromArray"]},{"tag":"TypeConstructor","contents":[["Prim"],"Char"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}},"sourceSpan":{"start":[27,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasFromArray.purs","end":[27,56]}}],"comments":"Represents types that can be converted from an array.\n\n``` purescript\nfromArray [1] :: List Int -- Cons 1 Nil\nfromArray [1] :: Maybe Int -- Just 1\nfromArray ['a', 'b'] :: String -- \"ab\"\n```\n","title":"HasFromArray","info":{"fundeps":[],"arguments":[["a",null],["b",null]],"declType":"typeClass","superclasses":[]},"sourceSpan":{"start":[15,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasFromArray.purs","end":[16,28]}},{"children":[{"comments":null,"title":"fromInt","info":{"declType":"typeClassMember","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[14,3],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasFromInt.purs","end":[14,33]}},{"comments":null,"title":"booleanHasFromInt","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasFromInt"],"HasFromInt"]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}},"sourceSpan":{"start":[16,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasFromInt.purs","end":[16,49]}},{"comments":null,"title":"charHasFromInt","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasFromInt"],"HasFromInt"]},{"tag":"TypeConstructor","contents":[["Prim"],"Char"]}]}},"sourceSpan":{"start":[19,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasFromInt.purs","end":[19,43]}},{"comments":null,"title":"intHasFromInt","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasFromInt"],"HasFromInt"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}},"sourceSpan":{"start":[22,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasFromInt.purs","end":[22,41]}},{"comments":null,"title":"orderingHasFromInt","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasFromInt"],"HasFromInt"]},{"tag":"TypeConstructor","contents":[["Data","Ordering"],"Ordering"]}]}},"sourceSpan":{"start":[25,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasFromInt.purs","end":[25,56]}}],"comments":"Represents types that can be converted from integers. This is typically\nused for enumerations.\n\n``` purescript\nfromInt 1 :: Maybe Bool -- Just true\nfromInt 2 :: Maybe Bool -- Nothing\n```\n","title":"HasFromInt","info":{"fundeps":[],"arguments":[["a",null]],"declType":"typeClass","superclasses":[]},"sourceSpan":{"start":[13,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasFromInt.purs","end":[14,33]}},{"children":[{"comments":null,"title":"greater","info":{"declType":"typeClassMember","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}]}},"sourceSpan":{"start":[15,3],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasGreater.purs","end":[15,31]}},{"comments":null,"title":"arrayHasGreater","info":{"declType":"instance","dependencies":[{"constraintClass":[["Neon","Class","HasEqual"],"HasEqual"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"constraintClass":[["Neon","Class","HasGreater"],"HasGreater"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasGreater"],"HasGreater"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[17,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasGreater.purs","end":[17,88]}},{"comments":null,"title":"booleanHasGreater","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasGreater"],"HasGreater"]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}},"sourceSpan":{"start":[22,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasGreater.purs","end":[22,49]}},{"comments":null,"title":"charHasGreater","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasGreater"],"HasGreater"]},{"tag":"TypeConstructor","contents":[["Prim"],"Char"]}]}},"sourceSpan":{"start":[25,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasGreater.purs","end":[25,43]}},{"comments":null,"title":"intHasGreater","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasGreater"],"HasGreater"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}},"sourceSpan":{"start":[28,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasGreater.purs","end":[28,41]}},{"comments":null,"title":"listHasGreater","info":{"declType":"instance","dependencies":[{"constraintClass":[["Neon","Class","HasEqual"],"HasEqual"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"constraintClass":[["Neon","Class","HasGreater"],"HasGreater"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasGreater"],"HasGreater"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","List","Types"],"List"]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[31,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasGreater.purs","end":[31,91]}},{"comments":null,"title":"numberHasGreater","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasGreater"],"HasGreater"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]}},"sourceSpan":{"start":[39,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasGreater.purs","end":[39,47]}},{"comments":null,"title":"orderingHasGreater","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasGreater"],"HasGreater"]},{"tag":"TypeConstructor","contents":[["Data","Ordering"],"Ordering"]}]}},"sourceSpan":{"start":[42,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasGreater.purs","end":[42,56]}},{"comments":null,"title":"stringHasGreater","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasGreater"],"HasGreater"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}},"sourceSpan":{"start":[45,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasGreater.purs","end":[45,47]}}],"comments":"Represents types where one value can be greater than another.\n\n``` purescript\n2 :greater 1 -- true\n1 :greater 2 -- false\n```\n","title":"HasGreater","info":{"fundeps":[],"arguments":[["a",null]],"declType":"typeClass","superclasses":[]},"sourceSpan":{"start":[14,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasGreater.purs","end":[15,31]}},{"children":[{"comments":null,"title":"inspect","info":{"declType":"typeClassMember","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}},"sourceSpan":{"start":[25,3],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasInspect.purs","end":[25,25]}},{"comments":null,"title":"arrayHasInspect","info":{"declType":"instance","dependencies":[{"constraintClass":[["Neon","Class","HasInspect"],"HasInspect"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasInspect"],"HasInspect"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[27,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasInspect.purs","end":[27,67]}},{"comments":null,"title":"booleanHasInspect","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasInspect"],"HasInspect"]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}},"sourceSpan":{"start":[33,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasInspect.purs","end":[33,49]}},{"comments":null,"title":"charHasInspect","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasInspect"],"HasInspect"]},{"tag":"TypeConstructor","contents":[["Prim"],"Char"]}]}},"sourceSpan":{"start":[36,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasInspect.purs","end":[36,43]}},{"comments":null,"title":"errorHasInspect","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasInspect"],"HasInspect"]},{"tag":"TypeConstructor","contents":[["Control","Monad","Eff","Exception"],"Error"]}]}},"sourceSpan":{"start":[39,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasInspect.purs","end":[39,50]}},{"comments":null,"title":"functionHasInspect","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasInspect"],"HasInspect"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]}},"sourceSpan":{"start":[42,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasInspect.purs","end":[42,51]}},{"comments":null,"title":"intHasInspect","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasInspect"],"HasInspect"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}},"sourceSpan":{"start":[45,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasInspect.purs","end":[45,41]}},{"comments":null,"title":"listHasInspect","info":{"declType":"instance","dependencies":[{"constraintClass":[["Neon","Class","HasInspect"],"HasInspect"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasInspect"],"HasInspect"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","List","Types"],"List"]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[48,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasInspect.purs","end":[48,70]}},{"comments":null,"title":"numberHasInspect","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasInspect"],"HasInspect"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]}},"sourceSpan":{"start":[54,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasInspect.purs","end":[54,47]}},{"comments":null,"title":"objectHasInspect","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasInspect"],"HasInspect"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Record"]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[57,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasInspect.purs","end":[57,48]}},{"comments":null,"title":"orderingHasInspect","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasInspect"],"HasInspect"]},{"tag":"TypeConstructor","contents":[["Data","Ordering"],"Ordering"]}]}},"sourceSpan":{"start":[60,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasInspect.purs","end":[60,56]}},{"comments":null,"title":"proxyHasInspect","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasInspect"],"HasInspect"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Type","Proxy"],"Proxy"]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[63,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasInspect.purs","end":[63,54]}},{"comments":null,"title":"stringHasInspect","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasInspect"],"HasInspect"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}},"sourceSpan":{"start":[66,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasInspect.purs","end":[66,47]}},{"comments":null,"title":"unitHasInspect","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasInspect"],"HasInspect"]},{"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}},"sourceSpan":{"start":[69,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasInspect.purs","end":[69,48]}}],"comments":"Represents types that can be converting to a string. This is typically\nused for debugging. The result of `inspect x` should be a valid PureScript\nexpression.\n\n``` purescript\ninspect 123 -- \"123\"\ninspect (Just 123) -- \"Just (123)\"\n```\n\nThe instance for functions and objects do not return valid expressions.\nThis is because there is no way in general to generate an expression for\nthem.\n\n``` purescript\ninspect identity -- \"{- Function -}\"\ninspect {} -- \"{- Object -}\"\n```\n","title":"HasInspect","info":{"fundeps":[],"arguments":[["a",null]],"declType":"typeClass","superclasses":[]},"sourceSpan":{"start":[24,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasInspect.purs","end":[25,25]}},{"children":[{"comments":null,"title":"less","info":{"declType":"typeClassMember","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}]}},"sourceSpan":{"start":[15,3],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasLess.purs","end":[15,28]}},{"comments":null,"title":"arrayHasLess","info":{"declType":"instance","dependencies":[{"constraintClass":[["Neon","Class","HasEqual"],"HasEqual"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"constraintClass":[["Neon","Class","HasLess"],"HasLess"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasLess"],"HasLess"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[17,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasLess.purs","end":[17,79]}},{"comments":null,"title":"booleanHasLess","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasLess"],"HasLess"]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}},"sourceSpan":{"start":[22,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasLess.purs","end":[22,43]}},{"comments":null,"title":"charHasLess","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasLess"],"HasLess"]},{"tag":"TypeConstructor","contents":[["Prim"],"Char"]}]}},"sourceSpan":{"start":[25,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasLess.purs","end":[25,37]}},{"comments":null,"title":"intHasLess","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasLess"],"HasLess"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}},"sourceSpan":{"start":[28,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasLess.purs","end":[28,35]}},{"comments":null,"title":"listHasLess","info":{"declType":"instance","dependencies":[{"constraintClass":[["Neon","Class","HasEqual"],"HasEqual"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"constraintClass":[["Neon","Class","HasLess"],"HasLess"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasLess"],"HasLess"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","List","Types"],"List"]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[31,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasLess.purs","end":[31,82]}},{"comments":null,"title":"numberHasLess","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasLess"],"HasLess"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]}},"sourceSpan":{"start":[39,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasLess.purs","end":[39,41]}},{"comments":null,"title":"orderingHasLess","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasLess"],"HasLess"]},{"tag":"TypeConstructor","contents":[["Data","Ordering"],"Ordering"]}]}},"sourceSpan":{"start":[42,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasLess.purs","end":[42,50]}},{"comments":null,"title":"stringHasLess","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasLess"],"HasLess"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}},"sourceSpan":{"start":[45,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasLess.purs","end":[45,41]}}],"comments":"Represents types where one value can be less than another.\n\n``` purescript\n1 :less 2 -- true\n2 :less 1 -- false\n```\n","title":"HasLess","info":{"fundeps":[],"arguments":[["a",null]],"declType":"typeClass","superclasses":[]},"sourceSpan":{"start":[14,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasLess.purs","end":[15,28]}},{"children":[{"comments":null,"title":"map","info":{"declType":"typeClassMember","type":{"tag":"ForAll","contents":["c",{"tag":"ForAll","contents":["b",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeVar","contents":"c"}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"a"},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"a"},{"tag":"TypeVar","contents":"c"}]}]}]},null]},null]}},"sourceSpan":{"start":[14,3],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasMap.purs","end":[14,44]}},{"comments":null,"title":"arrayHasMap","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasMap"],"HasMap"]},{"tag":"TypeConstructor","contents":[["Prim"],"Array"]}]}},"sourceSpan":{"start":[16,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasMap.purs","end":[16,37]}},{"comments":null,"title":"effHasMap","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasMap"],"HasMap"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad","Eff"],"Eff"]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[19,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasMap.purs","end":[19,44]}},{"comments":null,"title":"listHasMap","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasMap"],"HasMap"]},{"tag":"TypeConstructor","contents":[["Data","List","Types"],"List"]}]}},"sourceSpan":{"start":[22,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasMap.purs","end":[22,40]}},{"comments":null,"title":"maybeHasMap","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasMap"],"HasMap"]},{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]}]}},"sourceSpan":{"start":[25,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasMap.purs","end":[25,42]}}],"comments":"Represents types that can be mapped over. This is also know as a\n[functor](https://en.wikipedia.org/wiki/Functor).\n\n``` purescript\n[1, 2, 3] :map (_ + 1) -- [2, 3, 4]\n```\n","title":"HasMap","info":{"fundeps":[],"arguments":[["a",null]],"declType":"typeClass","superclasses":[]},"sourceSpan":{"start":[13,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasMap.purs","end":[14,44]}},{"children":[{"comments":null,"title":"multiply","info":{"declType":"typeClassMember","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[12,3],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasMultiply.purs","end":[12,26]}},{"comments":null,"title":"intHasMultiply","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasMultiply"],"HasMultiply"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}},"sourceSpan":{"start":[14,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasMultiply.purs","end":[14,43]}},{"comments":null,"title":"numberHasMultiply","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasMultiply"],"HasMultiply"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]}},"sourceSpan":{"start":[17,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasMultiply.purs","end":[17,49]}}],"comments":"Represents values that can be multiplied together. This is also known as\na [near-ring](https://en.wikipedia.org/wiki/Near-ring).\n\n``` purescript\n2 :multiply 3 -- 6\n```\n","title":"HasMultiply","info":{"fundeps":[],"arguments":[["a",null]],"declType":"typeClass","superclasses":[]},"sourceSpan":{"start":[11,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasMultiply.purs","end":[12,26]}},{"children":[{"comments":null,"title":"not","info":{"declType":"typeClassMember","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"a"}]}},"sourceSpan":{"start":[21,3],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasNot.purs","end":[21,16]}},{"comments":null,"title":"booleanHasNot","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasNot"],"HasNot"]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}},"sourceSpan":{"start":[23,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasNot.purs","end":[23,41]}},{"comments":null,"title":"functionHasNot","info":{"declType":"instance","dependencies":[{"constraintClass":[["Neon","Class","HasNot"],"HasNot"],"constraintArgs":[{"tag":"TypeVar","contents":"b"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasNot"],"HasNot"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]}},"sourceSpan":{"start":[26,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasNot.purs","end":[26,57]}}],"comments":"Represents types can be negated. This is known as\n[negation](https://en.wikipedia.org/wiki/Negation).\n\n``` purescript\nnot false -- true\n```\n\nThe instance for functions is a little tricky. Calling `not` on a function\nreturns a new function that calls the original function and then `not`s\nthe result.\n\n``` purescript\nnot even -- \\ x -> not (even x)\n(not even) 3 -- true\n```\n","title":"HasNot","info":{"fundeps":[],"arguments":[["a",null]],"declType":"typeClass","superclasses":[]},"sourceSpan":{"start":[20,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasNot.purs","end":[21,16]}},{"children":[{"comments":null,"title":"one","info":{"declType":"typeClassMember","type":{"tag":"TypeVar","contents":"a"}},"sourceSpan":{"start":[13,3],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasOne.purs","end":[13,11]}},{"comments":null,"title":"intHasOne","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasOne"],"HasOne"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}},"sourceSpan":{"start":[15,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasOne.purs","end":[15,33]}},{"comments":null,"title":"numberHasOne","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasOne"],"HasOne"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]}},"sourceSpan":{"start":[18,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasOne.purs","end":[18,39]}}],"comments":"Represents types that have an multiplicative identity. This is also known\nas a [semiring](https://en.wikipedia.org/wiki/Semiring).\n\n``` purescript\none :: Int -- 1\none :: Number -- 1.0\n```\n","title":"HasOne","info":{"fundeps":[],"arguments":[["a",null]],"declType":"typeClass","superclasses":[]},"sourceSpan":{"start":[12,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasOne.purs","end":[13,11]}},{"children":[{"comments":null,"title":"or","info":{"declType":"typeClassMember","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[40,3],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasOr.purs","end":[40,20]}},{"comments":null,"title":"arrayHasOr","info":{"declType":"instance","dependencies":[{"constraintClass":[["Neon","Class","HasEqual"],"HasEqual"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasOr"],"HasOr"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[42,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasOr.purs","end":[42,64]}},{"comments":null,"title":"booleanHasOr","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasOr"],"HasOr"]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}},"sourceSpan":{"start":[45,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasOr.purs","end":[45,39]}},{"comments":null,"title":"functionHasOr","info":{"declType":"instance","dependencies":[{"constraintClass":[["Neon","Class","HasOr"],"HasOr"],"constraintArgs":[{"tag":"TypeVar","contents":"b"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasOr"],"HasOr"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]}},"sourceSpan":{"start":[48,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasOr.purs","end":[48,54]}},{"comments":null,"title":"intHasOr","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasOr"],"HasOr"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}},"sourceSpan":{"start":[51,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasOr.purs","end":[51,31]}},{"comments":null,"title":"listHasOr","info":{"declType":"instance","dependencies":[{"constraintClass":[["Neon","Class","HasEqual"],"HasEqual"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasOr"],"HasOr"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","List","Types"],"List"]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[54,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasOr.purs","end":[54,67]}}],"comments":"Represents types that can be disjoined. This is also known as\n[logical disjunction](https://en.wikipedia.org/wiki/Logical_disjunction).\n\n``` purescript\ntrue :or false -- true\n```\n\nSome types can't be disjoined per se but it is still useful to be able to\nuse the `||` operator with them. For example, you can `or` two arrays\ntogether to get their union.\n\n``` purescript\n[1, 2, 3] :or [2, 3, 4] -- [1, 2, 3, 4]\n```\n\nFor integers, `or` is bitwise.\n\n``` purescript\n5 :or 2 -- 7\n```\n\nThe instance for functions is perhaps the hardest to understand. Combining\ntwo functions with `or` returns a new function that calls each function\nand then `or`s the results together.\n\n``` purescript\neven :or odd -- \\ x -> (even x) :or (odd x)\n(even :or odd) 3 -- true\n```\n","title":"HasOr","info":{"fundeps":[],"arguments":[["a",null]],"declType":"typeClass","superclasses":[]},"sourceSpan":{"start":[39,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasOr.purs","end":[40,20]}},{"children":[{"comments":null,"title":"power","info":{"declType":"typeClassMember","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[12,3],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasPower.purs","end":[12,23]}},{"comments":null,"title":"intHasPower","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasPower"],"HasPower"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}},"sourceSpan":{"start":[14,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasPower.purs","end":[14,37]}},{"comments":null,"title":"numberHasPower","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasPower"],"HasPower"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]}},"sourceSpan":{"start":[18,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasPower.purs","end":[18,43]}}],"comments":"Represents types that can be exponentiated.\n\n``` purescript\n2 :power 3 -- 8\n```\n","title":"HasPower","info":{"fundeps":[],"arguments":[["a",null]],"declType":"typeClass","superclasses":[]},"sourceSpan":{"start":[11,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasPower.purs","end":[12,23]}},{"children":[{"comments":null,"title":"pure","info":{"declType":"typeClassMember","type":{"tag":"ForAll","contents":["b",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"a"},{"tag":"TypeVar","contents":"b"}]}]},null]}},"sourceSpan":{"start":[14,3],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasPure.purs","end":[14,29]}},{"comments":null,"title":"arrayHasPure","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasPure"],"HasPure"]},{"tag":"TypeConstructor","contents":[["Prim"],"Array"]}]}},"sourceSpan":{"start":[16,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasPure.purs","end":[16,39]}},{"comments":null,"title":"effHasPure","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasPure"],"HasPure"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad","Eff"],"Eff"]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[19,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasPure.purs","end":[19,46]}},{"comments":null,"title":"listHasPure","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasPure"],"HasPure"]},{"tag":"TypeConstructor","contents":[["Data","List","Types"],"List"]}]}},"sourceSpan":{"start":[22,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasPure.purs","end":[22,42]}},{"comments":null,"title":"maybeHasPure","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasPure"],"HasPure"]},{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]}]}},"sourceSpan":{"start":[25,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasPure.purs","end":[25,44]}}],"comments":"Represents types that allow injecting values into a container.\n\n``` purescript\npure 1 :: Maybe Int -- Just 1\npure 1 :: Array Int -- [1]\n```\n","title":"HasPure","info":{"fundeps":[],"arguments":[["a",null]],"declType":"typeClass","superclasses":[]},"sourceSpan":{"start":[13,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasPure.purs","end":[14,29]}},{"children":[{"comments":null,"title":"reduce","info":{"declType":"typeClassMember","type":{"tag":"ForAll","contents":["c",{"tag":"ForAll","contents":["b",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"c"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeVar","contents":"c"}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"c"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"a"},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeVar","contents":"c"}]}]}]},null]},null]}},"sourceSpan":{"start":[13,3],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasReduce.purs","end":[13,55]}},{"comments":null,"title":"arrayHasReduce","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasReduce"],"HasReduce"]},{"tag":"TypeConstructor","contents":[["Prim"],"Array"]}]}},"sourceSpan":{"start":[15,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasReduce.purs","end":[15,43]}},{"comments":null,"title":"listHasReduce","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasReduce"],"HasReduce"]},{"tag":"TypeConstructor","contents":[["Data","List","Types"],"List"]}]}},"sourceSpan":{"start":[18,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasReduce.purs","end":[18,46]}},{"comments":null,"title":"maybeHasReduce","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasReduce"],"HasReduce"]},{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]}]}},"sourceSpan":{"start":[21,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasReduce.purs","end":[21,48]}}],"comments":"Represents types that can be reduced to a single value. This is also known\nas a [fold](https://en.wikipedia.org/wiki/Fold_(higher-order_function)).\n\n``` purescript\n[\"wo\", \"rl\", \"d!\"] :reduce (\\ a e -> a + e) \"hello\" -- \"helloworld!\"\n```\n","title":"HasReduce","info":{"fundeps":[],"arguments":[["a",null]],"declType":"typeClass","superclasses":[]},"sourceSpan":{"start":[12,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasReduce.purs","end":[13,55]}},{"children":[{"comments":null,"title":"remainder","info":{"declType":"typeClassMember","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[13,3],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasRemainder.purs","end":[13,27]}},{"comments":null,"title":"intHasRemainder","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasRemainder"],"HasRemainder"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}},"sourceSpan":{"start":[15,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasRemainder.purs","end":[15,45]}},{"comments":null,"title":"numberHasRemainder","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasRemainder"],"HasRemainder"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]}},"sourceSpan":{"start":[18,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasRemainder.purs","end":[18,51]}}],"comments":"Represents types that are divisible.\n\n``` purescript\n7 :remainder 2 -- 1\n7.0 :remainder 2.0 -- 1.0\n```\n","title":"HasRemainder","info":{"fundeps":[],"arguments":[["a",null]],"declType":"typeClass","superclasses":[]},"sourceSpan":{"start":[12,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasRemainder.purs","end":[13,27]}},{"children":[{"comments":null,"title":"subtract","info":{"declType":"typeClassMember","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[16,3],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasSubtract.purs","end":[16,26]}},{"comments":null,"title":"arrayHasSubtract","info":{"declType":"instance","dependencies":[{"constraintClass":[["Neon","Class","HasEqual"],"HasEqual"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasSubtract"],"HasSubtract"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[18,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasSubtract.purs","end":[18,76]}},{"comments":null,"title":"intHasSubtract","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasSubtract"],"HasSubtract"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}},"sourceSpan":{"start":[23,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasSubtract.purs","end":[23,43]}},{"comments":null,"title":"listHasSubtract","info":{"declType":"instance","dependencies":[{"constraintClass":[["Neon","Class","HasEqual"],"HasEqual"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasSubtract"],"HasSubtract"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","List","Types"],"List"]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[26,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasSubtract.purs","end":[26,79]}},{"comments":null,"title":"numberHasSubtract","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasSubtract"],"HasSubtract"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]}},"sourceSpan":{"start":[31,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasSubtract.purs","end":[31,49]}}],"comments":"Represents types that can be subtracted from each other.\n\n``` purescript\n3 :subtract 2 -- 1\n```\n","title":"HasSubtract","info":{"fundeps":[],"arguments":[["a",null]],"declType":"typeClass","superclasses":[]},"sourceSpan":{"start":[15,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasSubtract.purs","end":[16,26]}},{"children":[{"comments":null,"title":"toArray","info":{"declType":"typeClassMember","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"b"}]}]}},"sourceSpan":{"start":[15,3],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasToArray.purs","end":[15,26]}},{"comments":null,"title":"arrayHasToArray","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasToArray"],"HasToArray"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeVar","contents":"a"}]}},"sourceSpan":{"start":[17,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasToArray.purs","end":[17,51]}},{"comments":null,"title":"listHasToArray","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasToArray"],"HasToArray"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","List","Types"],"List"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeVar","contents":"a"}]}},"sourceSpan":{"start":[20,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasToArray.purs","end":[20,54]}},{"comments":null,"title":"maybeHasToArray","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasToArray"],"HasToArray"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeVar","contents":"a"}]}},"sourceSpan":{"start":[23,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasToArray.purs","end":[23,56]}},{"comments":null,"title":"stringHasToArray","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasToArray"],"HasToArray"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Char"]}]}},"sourceSpan":{"start":[28,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasToArray.purs","end":[28,52]}}],"comments":"Represents types that can be converted to an array.\n\n``` purescript\ntoArray (Cons 1 Nil) :: Array Int -- [1]\ntoArray (Just 1) :: Array Int -- [1]\ntoArray \"ab\" :: String -- ['a', 'b']\n```\n","title":"HasToArray","info":{"fundeps":[],"arguments":[["a",null],["b",null]],"declType":"typeClass","superclasses":[]},"sourceSpan":{"start":[14,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasToArray.purs","end":[15,26]}},{"children":[{"comments":null,"title":"toInt","info":{"declType":"typeClassMember","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}},"sourceSpan":{"start":[13,3],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasToInt.purs","end":[13,20]}},{"comments":null,"title":"booleanHasToInt","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasToInt"],"HasToInt"]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}},"sourceSpan":{"start":[15,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasToInt.purs","end":[15,45]}},{"comments":null,"title":"charHasToInt","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasToInt"],"HasToInt"]},{"tag":"TypeConstructor","contents":[["Prim"],"Char"]}]}},"sourceSpan":{"start":[18,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasToInt.purs","end":[18,39]}},{"comments":null,"title":"intHasToInt","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasToInt"],"HasToInt"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}},"sourceSpan":{"start":[21,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasToInt.purs","end":[21,37]}},{"comments":null,"title":"orderingHasToInt","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasToInt"],"HasToInt"]},{"tag":"TypeConstructor","contents":[["Data","Ordering"],"Ordering"]}]}},"sourceSpan":{"start":[24,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasToInt.purs","end":[24,52]}}],"comments":"Represents types that can be converted to integers. This is typically used\nfor enumerations.\n\n``` purescript\ntoInt false -- 0\n```\n","title":"HasToInt","info":{"fundeps":[],"arguments":[["a",null]],"declType":"typeClass","superclasses":[]},"sourceSpan":{"start":[12,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasToInt.purs","end":[13,20]}},{"children":[{"comments":null,"title":"top","info":{"declType":"typeClassMember","type":{"tag":"TypeVar","contents":"a"}},"sourceSpan":{"start":[14,3],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasTop.purs","end":[14,11]}},{"comments":null,"title":"booleanHasTop","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasTop"],"HasTop"]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}},"sourceSpan":{"start":[16,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasTop.purs","end":[16,41]}},{"comments":null,"title":"charHasTop","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasTop"],"HasTop"]},{"tag":"TypeConstructor","contents":[["Prim"],"Char"]}]}},"sourceSpan":{"start":[19,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasTop.purs","end":[19,35]}},{"comments":null,"title":"intHasTop","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasTop"],"HasTop"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}},"sourceSpan":{"start":[22,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasTop.purs","end":[22,33]}},{"comments":null,"title":"numberHasTop","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasTop"],"HasTop"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]}},"sourceSpan":{"start":[25,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasTop.purs","end":[25,39]}},{"comments":null,"title":"orderingHasTop","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasTop"],"HasTop"]},{"tag":"TypeConstructor","contents":[["Data","Ordering"],"Ordering"]}]}},"sourceSpan":{"start":[28,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasTop.purs","end":[28,48]}}],"comments":"Represents types that have an upper bound.\n\n``` purescript\ntop :: Boolean -- true\ntop :: Char -- '\\65535'\n```\n","title":"HasTop","info":{"fundeps":[],"arguments":[["a",null]],"declType":"typeClass","superclasses":[]},"sourceSpan":{"start":[13,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasTop.purs","end":[14,11]}},{"children":[{"comments":null,"title":"traverse","info":{"declType":"typeClassMember","type":{"tag":"ForAll","contents":["m",{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Neon","Class","HasApply"],"HasApply"],"constraintArgs":[{"tag":"TypeVar","contents":"m"}],"constraintData":null},{"tag":"ConstrainedType","contents":[{"constraintClass":[["Neon","Class","HasMap"],"HasMap"],"constraintArgs":[{"tag":"TypeVar","contents":"m"}],"constraintData":null},{"tag":"ConstrainedType","contents":[{"constraintClass":[["Neon","Class","HasPure"],"HasPure"],"constraintArgs":[{"tag":"TypeVar","contents":"m"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"m"},{"tag":"TypeVar","contents":"b"}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"t"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"m"},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"t"},{"tag":"TypeVar","contents":"b"}]}}]}]}]}]}]}]},null]},null]},null]}},"sourceSpan":{"start":[18,3],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasTraverse.purs","end":[18,120]}},{"comments":null,"title":"lrrayHasTraverse","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasTraverse"],"HasTraverse"]},{"tag":"TypeConstructor","contents":[["Prim"],"Array"]}]}},"sourceSpan":{"start":[20,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasTraverse.purs","end":[20,47]}},{"comments":null,"title":"listHasTraverse","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasTraverse"],"HasTraverse"]},{"tag":"TypeConstructor","contents":[["Data","List","Types"],"List"]}]}},"sourceSpan":{"start":[24,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasTraverse.purs","end":[24,50]}},{"comments":null,"title":"laybeHasTraverse","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasTraverse"],"HasTraverse"]},{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]}]}},"sourceSpan":{"start":[29,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasTraverse.purs","end":[29,52]}}],"comments":"Represents data structures that can be traversed from left to right.\nUnlike `Reduce`, these structures can be traversed while keeping their\nshape.\n\n``` purescript\n[1, 2] :traverse (\\ x -> x :inspect :Just) -- Just [\"1\", \"2\"]\n```\n","title":"HasTraverse","info":{"fundeps":[],"arguments":[["t",null]],"declType":"typeClass","superclasses":[]},"sourceSpan":{"start":[17,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasTraverse.purs","end":[18,120]}},{"children":[{"comments":null,"title":"zero","info":{"declType":"typeClassMember","type":{"tag":"TypeVar","contents":"a"}},"sourceSpan":{"start":[14,3],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasZero.purs","end":[14,12]}},{"comments":null,"title":"arrayHasZero","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasZero"],"HasZero"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[16,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasZero.purs","end":[16,43]}},{"comments":null,"title":"intHasZero","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasZero"],"HasZero"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}},"sourceSpan":{"start":[19,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasZero.purs","end":[19,35]}},{"comments":null,"title":"listHasZero","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasZero"],"HasZero"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","List","Types"],"List"]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[22,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasZero.purs","end":[22,46]}},{"comments":null,"title":"numberHasZero","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasZero"],"HasZero"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]}},"sourceSpan":{"start":[25,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasZero.purs","end":[25,41]}},{"comments":null,"title":"stringHasZero","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasZero"],"HasZero"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}},"sourceSpan":{"start":[28,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasZero.purs","end":[28,41]}}],"comments":"Represents types that have an additive identity. This is also known as a\n[monoid](https://en.wikipedia.org/wiki/Monoid).\n\n``` purescript\nzero :: Int -- 0\nzero :: Number -- 0.0\n```\n","title":"HasZero","info":{"fundeps":[],"arguments":[["a",null]],"declType":"typeClass","superclasses":[]},"sourceSpan":{"start":[13,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasZero.purs","end":[14,12]}}]},{"moduleName":{"package":null,"item":["Neon","Data"]},"declarations":[{"children":[{"comments":null,"title":"showUnit","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Show"],"Show"]},{"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}},"sourceSpan":{"start":[16,1],"name":"/Users/adrian/Projects/purescript-neon/bower_components/purescript-prelude/src/Data/Unit.purs","end":[16,31]}}],"comments":"The `Unit` type has a single inhabitant, called `unit`. It represents\nvalues with no computational content.\n\n`Unit` is often used, wrapped in a monadic type constructor, as the\nreturn type of a computation where only\nthe _effects_ are important.\n","title":"Unit","info":{"kind":{"tag":"NamedKind","contents":[["Prim"],"Type"]},"declType":"externData"},"sourceSpan":{"start":[11,1],"name":"/Users/adrian/Projects/purescript-neon/bower_components/purescript-prelude/src/Data/Unit.purs","end":[11,33]}},{"children":[{"comments":null,"title":"Tuple","info":{"arguments":[{"tag":"TypeVar","contents":"a"},{"tag":"TypeVar","contents":"b"}],"declType":"dataConstructor"},"sourceSpan":null},{"comments":"Allows `Tuple`s to be rendered as a string with `show` whenever there are\n`Show` instances for both component types.\n","title":"showTuple","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","Show"],"Show"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"constraintClass":[["Data","Show"],"Show"],"constraintArgs":[{"tag":"TypeVar","contents":"b"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Show"],"Show"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Tuple"],"Tuple"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]}},"sourceSpan":{"start":[34,1],"name":"/Users/adrian/Projects/purescript-neon/bower_components/purescript-tuples/src/Data/Tuple.purs","end":[34,59]}},{"comments":null,"title":"eqTuple","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","Eq"],"Eq"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"constraintClass":[["Data","Eq"],"Eq"],"constraintArgs":[{"tag":"TypeVar","contents":"b"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Eq"],"Eq"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Tuple"],"Tuple"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]}},"sourceSpan":{"start":[39,8],"name":"/Users/adrian/Projects/purescript-neon/bower_components/purescript-tuples/src/Data/Tuple.purs","end":[39,58]}},{"comments":null,"title":"eq1Tuple","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","Eq"],"Eq"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Eq"],"Eq1"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Tuple"],"Tuple"]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[41,1],"name":"/Users/adrian/Projects/purescript-neon/bower_components/purescript-tuples/src/Data/Tuple.purs","end":[41,43]}},{"comments":null,"title":"ordTuple","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","Ord"],"Ord"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"constraintClass":[["Data","Ord"],"Ord"],"constraintArgs":[{"tag":"TypeVar","contents":"b"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Ord"],"Ord"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Tuple"],"Tuple"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]}},"sourceSpan":{"start":[47,8],"name":"/Users/adrian/Projects/purescript-neon/bower_components/purescript-tuples/src/Data/Tuple.purs","end":[47,62]}},{"comments":null,"title":"ord1Tuple","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","Ord"],"Ord"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Ord"],"Ord1"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Tuple"],"Tuple"]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[49,1],"name":"/Users/adrian/Projects/purescript-neon/bower_components/purescript-tuples/src/Data/Tuple.purs","end":[49,46]}},{"comments":null,"title":"boundedTuple","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","Bounded"],"Bounded"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"constraintClass":[["Data","Bounded"],"Bounded"],"constraintArgs":[{"tag":"TypeVar","contents":"b"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Bounded"],"Bounded"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Tuple"],"Tuple"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]}},"sourceSpan":{"start":[51,1],"name":"/Users/adrian/Projects/purescript-neon/bower_components/purescript-tuples/src/Data/Tuple.purs","end":[51,71]}},{"comments":null,"title":"semigroupoidTuple","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Semigroupoid"],"Semigroupoid"]},{"tag":"TypeConstructor","contents":[["Data","Tuple"],"Tuple"]}]}},"sourceSpan":{"start":[55,1],"name":"/Users/adrian/Projects/purescript-neon/bower_components/purescript-tuples/src/Data/Tuple.purs","end":[55,49]}},{"comments":"The `Semigroup` instance enables use of the associative operator `<>` on\n`Tuple`s whenever there are `Semigroup` instances for the component\ntypes. The `<>` operator is applied pairwise, so:\n```purescript\n(Tuple a1 b1) <> (Tuple a2 b2) = Tuple (a1 <> a2) (b1 <> b2)\n```\n","title":"semigroupTuple","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","Semigroup"],"Semigroup"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"constraintClass":[["Data","Semigroup"],"Semigroup"],"constraintArgs":[{"tag":"TypeVar","contents":"b"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Semigroup"],"Semigroup"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Tuple"],"Tuple"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]}},"sourceSpan":{"start":[64,1],"name":"/Users/adrian/Projects/purescript-neon/bower_components/purescript-tuples/src/Data/Tuple.purs","end":[64,79]}},{"comments":null,"title":"monoidTuple","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","Monoid"],"Monoid"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"constraintClass":[["Data","Monoid"],"Monoid"],"constraintArgs":[{"tag":"TypeVar","contents":"b"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Monoid"],"Monoid"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Tuple"],"Tuple"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]}},"sourceSpan":{"start":[67,1],"name":"/Users/adrian/Projects/purescript-neon/bower_components/purescript-tuples/src/Data/Tuple.purs","end":[67,67]}},{"comments":null,"title":"semiringTuple","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","Semiring"],"Semiring"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"constraintClass":[["Data","Semiring"],"Semiring"],"constraintArgs":[{"tag":"TypeVar","contents":"b"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Semiring"],"Semiring"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Tuple"],"Tuple"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]}},"sourceSpan":{"start":[70,1],"name":"/Users/adrian/Projects/purescript-neon/bower_components/purescript-tuples/src/Data/Tuple.purs","end":[70,75]}},{"comments":null,"title":"ringTuple","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","Ring"],"Ring"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"constraintClass":[["Data","Ring"],"Ring"],"constraintArgs":[{"tag":"TypeVar","contents":"b"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Ring"],"Ring"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Tuple"],"Tuple"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]}},"sourceSpan":{"start":[76,1],"name":"/Users/adrian/Projects/purescript-neon/bower_components/purescript-tuples/src/Data/Tuple.purs","end":[76,59]}},{"comments":null,"title":"commutativeRingTuple","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","CommutativeRing"],"CommutativeRing"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"constraintClass":[["Data","CommutativeRing"],"CommutativeRing"],"constraintArgs":[{"tag":"TypeVar","contents":"b"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","CommutativeRing"],"CommutativeRing"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Tuple"],"Tuple"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]}},"sourceSpan":{"start":[79,1],"name":"/Users/adrian/Projects/purescript-neon/bower_components/purescript-tuples/src/Data/Tuple.purs","end":[79,103]}},{"comments":null,"title":"heytingAlgebraTuple","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","HeytingAlgebra"],"HeytingAlgebra"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"constraintClass":[["Data","HeytingAlgebra"],"HeytingAlgebra"],"constraintArgs":[{"tag":"TypeVar","contents":"b"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","HeytingAlgebra"],"HeytingAlgebra"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Tuple"],"Tuple"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]}},"sourceSpan":{"start":[81,1],"name":"/Users/adrian/Projects/purescript-neon/bower_components/purescript-tuples/src/Data/Tuple.purs","end":[81,99]}},{"comments":null,"title":"booleanAlgebraTuple","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","BooleanAlgebra"],"BooleanAlgebra"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"constraintClass":[["Data","BooleanAlgebra"],"BooleanAlgebra"],"constraintArgs":[{"tag":"TypeVar","contents":"b"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","BooleanAlgebra"],"BooleanAlgebra"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Tuple"],"Tuple"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]}},"sourceSpan":{"start":[89,1],"name":"/Users/adrian/Projects/purescript-neon/bower_components/purescript-tuples/src/Data/Tuple.purs","end":[89,99]}},{"comments":"The `Functor` instance allows functions to transform the contents of a\n`Tuple` with the `<$>` operator, applying the function to the second\ncomponent, so:\n```purescript\nf <$> (Tuple x y) = Tuple x (f y)\n````\n","title":"functorTuple","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Functor"],"Functor"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Tuple"],"Tuple"]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[97,1],"name":"/Users/adrian/Projects/purescript-neon/bower_components/purescript-tuples/src/Data/Tuple.purs","end":[97,43]}},{"comments":null,"title":"invariantTuple","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Functor","Invariant"],"Invariant"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Tuple"],"Tuple"]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[100,1],"name":"/Users/adrian/Projects/purescript-neon/bower_components/purescript-tuples/src/Data/Tuple.purs","end":[100,47]}},{"comments":null,"title":"bifunctorTuple","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Bifunctor"],"Bifunctor"]},{"tag":"TypeConstructor","contents":[["Data","Tuple"],"Tuple"]}]}},"sourceSpan":{"start":[103,1],"name":"/Users/adrian/Projects/purescript-neon/bower_components/purescript-tuples/src/Data/Tuple.purs","end":[103,43]}},{"comments":"The `Functor` instance allows functions to transform the contents of a\n`Tuple` with the `<*>` operator whenever there is a `Semigroup` instance\nfor the `fst` component, so:\n```purescript\n(Tuple a1 f) <*> (Tuple a2 x) == Tuple (a1 <> a2) (f x)\n```\n","title":"applyTuple","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","Semigroup"],"Semigroup"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Apply"],"Apply"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Tuple"],"Tuple"]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[112,1],"name":"/Users/adrian/Projects/purescript-neon/bower_components/purescript-tuples/src/Data/Tuple.purs","end":[112,56]}},{"comments":null,"title":"biapplyTuple","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Biapply"],"Biapply"]},{"tag":"TypeConstructor","contents":[["Data","Tuple"],"Tuple"]}]}},"sourceSpan":{"start":[115,1],"name":"/Users/adrian/Projects/purescript-neon/bower_components/purescript-tuples/src/Data/Tuple.purs","end":[115,39]}},{"comments":null,"title":"applicativeTuple","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","Monoid"],"Monoid"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Applicative"],"Applicative"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Tuple"],"Tuple"]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[118,1],"name":"/Users/adrian/Projects/purescript-neon/bower_components/purescript-tuples/src/Data/Tuple.purs","end":[118,65]}},{"comments":null,"title":"biapplicativeTuple","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Biapplicative"],"Biapplicative"]},{"tag":"TypeConstructor","contents":[["Data","Tuple"],"Tuple"]}]}},"sourceSpan":{"start":[121,1],"name":"/Users/adrian/Projects/purescript-neon/bower_components/purescript-tuples/src/Data/Tuple.purs","end":[121,51]}},{"comments":null,"title":"bindTuple","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","Semigroup"],"Semigroup"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Bind"],"Bind"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Tuple"],"Tuple"]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[124,1],"name":"/Users/adrian/Projects/purescript-neon/bower_components/purescript-tuples/src/Data/Tuple.purs","end":[124,54]}},{"comments":null,"title":"monadTuple","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","Monoid"],"Monoid"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad"],"Monad"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Tuple"],"Tuple"]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[128,1],"name":"/Users/adrian/Projects/purescript-neon/bower_components/purescript-tuples/src/Data/Tuple.purs","end":[128,53]}},{"comments":null,"title":"extendTuple","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Extend"],"Extend"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Tuple"],"Tuple"]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[130,1],"name":"/Users/adrian/Projects/purescript-neon/bower_components/purescript-tuples/src/Data/Tuple.purs","end":[130,41]}},{"comments":null,"title":"comonadTuple","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Comonad"],"Comonad"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Tuple"],"Tuple"]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[133,1],"name":"/Users/adrian/Projects/purescript-neon/bower_components/purescript-tuples/src/Data/Tuple.purs","end":[133,43]}},{"comments":null,"title":"lazyTuple","info":{"declType":"instance","dependencies":[{"constraintClass":[["Control","Lazy"],"Lazy"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"constraintClass":[["Control","Lazy"],"Lazy"],"constraintArgs":[{"tag":"TypeVar","contents":"b"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Lazy"],"Lazy"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Tuple"],"Tuple"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]}},"sourceSpan":{"start":[136,1],"name":"/Users/adrian/Projects/purescript-neon/bower_components/purescript-tuples/src/Data/Tuple.purs","end":[136,59]}},{"comments":null,"title":"foldableTuple","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Foldable"],"Foldable"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Tuple"],"Tuple"]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[139,1],"name":"/Users/adrian/Projects/purescript-neon/bower_components/purescript-tuples/src/Data/Tuple.purs","end":[139,45]}},{"comments":null,"title":"bifoldableTuple","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Bifoldable"],"Bifoldable"]},{"tag":"TypeConstructor","contents":[["Data","Tuple"],"Tuple"]}]}},"sourceSpan":{"start":[144,1],"name":"/Users/adrian/Projects/purescript-neon/bower_components/purescript-tuples/src/Data/Tuple.purs","end":[144,45]}},{"comments":null,"title":"traversableTuple","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Traversable"],"Traversable"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Tuple"],"Tuple"]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[149,1],"name":"/Users/adrian/Projects/purescript-neon/bower_components/purescript-tuples/src/Data/Tuple.purs","end":[149,51]}},{"comments":null,"title":"bitraversableTuple","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Bitraversable"],"Bitraversable"]},{"tag":"TypeConstructor","contents":[["Data","Tuple"],"Tuple"]}]}},"sourceSpan":{"start":[153,1],"name":"/Users/adrian/Projects/purescript-neon/bower_components/purescript-tuples/src/Data/Tuple.purs","end":[153,51]}},{"comments":null,"title":"distributiveTuple","info":{"declType":"instance","dependencies":[{"constraintClass":[["Type","Equality"],"TypeEquals"],"constraintArgs":[{"tag":"TypeVar","contents":"a"},{"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Distributive"],"Distributive"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Tuple"],"Tuple"]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[157,1],"name":"/Users/adrian/Projects/purescript-neon/bower_components/purescript-tuples/src/Data/Tuple.purs","end":[157,74]}}],"comments":"A simple product type for wrapping a pair of component values.\n","title":"Tuple","info":{"declType":"data","dataDeclType":"data","typeArguments":[["a",null],["b",null]]},"sourceSpan":{"start":[30,1],"name":"/Users/adrian/Projects/purescript-neon/bower_components/purescript-tuples/src/Data/Tuple.purs","end":[30,27]}},{"children":[{"comments":null,"title":"Proxy","info":{"arguments":[],"declType":"dataConstructor"},"sourceSpan":null},{"comments":null,"title":"eqProxy","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Eq"],"Eq"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Type","Proxy"],"Proxy"]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[56,8],"name":"/Users/adrian/Projects/purescript-neon/bower_components/purescript-proxy/src/Type/Proxy.purs","end":[56,40]}},{"comments":null,"title":"functorProxy","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Functor"],"Functor"]},{"tag":"TypeConstructor","contents":[["Type","Proxy"],"Proxy"]}]}},"sourceSpan":{"start":[58,8],"name":"/Users/adrian/Projects/purescript-neon/bower_components/purescript-proxy/src/Type/Proxy.purs","end":[58,46]}},{"comments":null,"title":"ordProxy","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Ord"],"Ord"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Type","Proxy"],"Proxy"]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[60,8],"name":"/Users/adrian/Projects/purescript-neon/bower_components/purescript-proxy/src/Type/Proxy.purs","end":[60,42]}},{"comments":null,"title":"applicativeProxy","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Applicative"],"Applicative"]},{"tag":"TypeConstructor","contents":[["Type","Proxy"],"Proxy"]}]}},"sourceSpan":{"start":[62,1],"name":"/Users/adrian/Projects/purescript-neon/bower_components/purescript-proxy/src/Type/Proxy.purs","end":[62,47]}},{"comments":null,"title":"applyProxy","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Apply"],"Apply"]},{"tag":"TypeConstructor","contents":[["Type","Proxy"],"Proxy"]}]}},"sourceSpan":{"start":[65,1],"name":"/Users/adrian/Projects/purescript-neon/bower_components/purescript-proxy/src/Type/Proxy.purs","end":[65,35]}},{"comments":null,"title":"bindProxy","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Bind"],"Bind"]},{"tag":"TypeConstructor","contents":[["Type","Proxy"],"Proxy"]}]}},"sourceSpan":{"start":[68,1],"name":"/Users/adrian/Projects/purescript-neon/bower_components/purescript-proxy/src/Type/Proxy.purs","end":[68,33]}},{"comments":null,"title":"booleanAlgebraProxy","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","BooleanAlgebra"],"BooleanAlgebra"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Type","Proxy"],"Proxy"]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[71,1],"name":"/Users/adrian/Projects/purescript-neon/bower_components/purescript-proxy/src/Type/Proxy.purs","end":[71,57]}},{"comments":null,"title":"boundedProxy","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Bounded"],"Bounded"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Type","Proxy"],"Proxy"]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[73,1],"name":"/Users/adrian/Projects/purescript-neon/bower_components/purescript-proxy/src/Type/Proxy.purs","end":[73,43]}},{"comments":null,"title":"commutativeRingProxy","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","CommutativeRing"],"CommutativeRing"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Type","Proxy"],"Proxy"]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[77,1],"name":"/Users/adrian/Projects/purescript-neon/bower_components/purescript-proxy/src/Type/Proxy.purs","end":[77,59]}},{"comments":null,"title":"discardProxy","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Bind"],"Discard"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Type","Proxy"],"Proxy"]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[79,1],"name":"/Users/adrian/Projects/purescript-neon/bower_components/purescript-proxy/src/Type/Proxy.purs","end":[79,43]}},{"comments":null,"title":"heytingAlgebraProxy","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","HeytingAlgebra"],"HeytingAlgebra"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Type","Proxy"],"Proxy"]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[82,1],"name":"/Users/adrian/Projects/purescript-neon/bower_components/purescript-proxy/src/Type/Proxy.purs","end":[82,57]}},{"comments":null,"title":"monadProxy","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad"],"Monad"]},{"tag":"TypeConstructor","contents":[["Type","Proxy"],"Proxy"]}]}},"sourceSpan":{"start":[90,1],"name":"/Users/adrian/Projects/purescript-neon/bower_components/purescript-proxy/src/Type/Proxy.purs","end":[90,35]}},{"comments":null,"title":"ringProxy","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Ring"],"Ring"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Type","Proxy"],"Proxy"]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[92,1],"name":"/Users/adrian/Projects/purescript-neon/bower_components/purescript-proxy/src/Type/Proxy.purs","end":[92,37]}},{"comments":null,"title":"semigroupProxy","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Semigroup"],"Semigroup"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Type","Proxy"],"Proxy"]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[95,1],"name":"/Users/adrian/Projects/purescript-neon/bower_components/purescript-proxy/src/Type/Proxy.purs","end":[95,47]}},{"comments":null,"title":"semiringProxy","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Semiring"],"Semiring"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Type","Proxy"],"Proxy"]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[98,1],"name":"/Users/adrian/Projects/purescript-neon/bower_components/purescript-proxy/src/Type/Proxy.purs","end":[98,45]}},{"comments":null,"title":"showProxy","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Show"],"Show"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Type","Proxy"],"Proxy"]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[104,1],"name":"/Users/adrian/Projects/purescript-neon/bower_components/purescript-proxy/src/Type/Proxy.purs","end":[104,37]}}],"comments":"Value proxy for kind `Type` types.\n","title":"Proxy","info":{"declType":"data","dataDeclType":"data","typeArguments":[["a",null]]},"sourceSpan":{"start":[54,1],"name":"/Users/adrian/Projects/purescript-neon/bower_components/purescript-proxy/src/Type/Proxy.purs","end":[54,21]}},{"children":[{"comments":null,"title":"LT","info":{"arguments":[],"declType":"dataConstructor"},"sourceSpan":null},{"comments":null,"title":"GT","info":{"arguments":[],"declType":"dataConstructor"},"sourceSpan":null},{"comments":null,"title":"EQ","info":{"arguments":[],"declType":"dataConstructor"},"sourceSpan":null},{"comments":null,"title":"eqOrdering","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Eq"],"Eq"]},{"tag":"TypeConstructor","contents":[["Data","Ordering"],"Ordering"]}]}},"sourceSpan":{"start":[15,1],"name":"/Users/adrian/Projects/purescript-neon/bower_components/purescript-prelude/src/Data/Ordering.purs","end":[15,35]}},{"comments":null,"title":"semigroupOrdering","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Semigroup"],"Semigroup"]},{"tag":"TypeConstructor","contents":[["Data","Ordering"],"Ordering"]}]}},"sourceSpan":{"start":[21,1],"name":"/Users/adrian/Projects/purescript-neon/bower_components/purescript-prelude/src/Data/Ordering.purs","end":[21,49]}},{"comments":null,"title":"showOrdering","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Show"],"Show"]},{"tag":"TypeConstructor","contents":[["Data","Ordering"],"Ordering"]}]}},"sourceSpan":{"start":[26,1],"name":"/Users/adrian/Projects/purescript-neon/bower_components/purescript-prelude/src/Data/Ordering.purs","end":[26,39]}}],"comments":"The `Ordering` data type represents the three possible outcomes of\ncomparing two values:\n\n`LT` - The first value is _less than_ the second.\n`GT` - The first value is _greater than_ the second.\n`EQ` - The first value is _equal to_ the second.\n","title":"Ordering","info":{"declType":"data","dataDeclType":"data","typeArguments":[]},"sourceSpan":{"start":[13,1],"name":"/Users/adrian/Projects/purescript-neon/bower_components/purescript-prelude/src/Data/Ordering.purs","end":[13,29]}},{"children":[{"comments":null,"title":"Nothing","info":{"arguments":[],"declType":"dataConstructor"},"sourceSpan":null},{"comments":null,"title":"Just","info":{"arguments":[{"tag":"TypeVar","contents":"a"}],"declType":"dataConstructor"},"sourceSpan":null},{"comments":"The `Functor` instance allows functions to transform the contents of a\n`Just` with the `<$>` operator:\n\n``` purescript\nf <$> Just x == Just (f x)\n```\n\n`Nothing` values are left untouched:\n\n``` purescript\nf <$> Nothing == Nothing\n```\n","title":"functorMaybe","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Functor"],"Functor"]},{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]}]}},"sourceSpan":{"start":[33,1],"name":"/Users/adrian/Projects/purescript-neon/bower_components/purescript-maybe/src/Data/Maybe.purs","end":[33,39]}},{"comments":"The `Apply` instance allows functions contained within a `Just` to\ntransform a value contained within a `Just` using the `apply` operator:\n\n``` purescript\nJust f <*> Just x == Just (f x)\n```\n\n`Nothing` values are left untouched:\n\n``` purescript\nJust f <*> Nothing == Nothing\nNothing <*> Just x == Nothing\n```\n\nCombining `Functor`'s `<$>` with `Apply`'s `<*>` can be used transform a\npure function to take `Maybe`-typed arguments so `f :: a -> b -> c`\nbecomes `f :: Maybe a -> Maybe b -> Maybe c`:\n\n``` purescript\nf <$> Just x <*> Just y == Just (f x y)\n```\n\nThe `Nothing`-preserving behaviour of both operators means the result of\nan expression like the above but where any one of the values is `Nothing`\nmeans the whole result becomes `Nothing` also:\n\n``` purescript\nf <$> Nothing <*> Just y == Nothing\nf <$> Just x <*> Nothing == Nothing\nf <$> Nothing <*> Nothing == Nothing\n```\n","title":"applyMaybe","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Apply"],"Apply"]},{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]}]}},"sourceSpan":{"start":[68,1],"name":"/Users/adrian/Projects/purescript-neon/bower_components/purescript-maybe/src/Data/Maybe.purs","end":[68,35]}},{"comments":"The `Applicative` instance enables lifting of values into `Maybe` with the\n`pure` or `return` function (`return` is an alias for `pure`):\n\n``` purescript\npure x :: Maybe _ == Just x\nreturn x :: Maybe _ == Just x\n```\n\nCombining `Functor`'s `<$>` with `Apply`'s `<*>` and `Applicative`'s\n`pure` can be used to pass a mixture of `Maybe` and non-`Maybe` typed\nvalues to a function that does not usually expect them, by using `pure`\nfor any value that is not already `Maybe` typed:\n\n``` purescript\nf <$> Just x <*> pure y == Just (f x y)\n```\n\nEven though `pure = Just` it is recommended to use `pure` in situations\nlike this as it allows the choice of `Applicative` to be changed later\nwithout having to go through and replace `Just` with a new constructor.\n","title":"applicativeMaybe","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Applicative"],"Applicative"]},{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]}]}},"sourceSpan":{"start":[92,1],"name":"/Users/adrian/Projects/purescript-neon/bower_components/purescript-maybe/src/Data/Maybe.purs","end":[92,47]}},{"comments":"The `Alt` instance allows for a choice to be made between two `Maybe`\nvalues with the `<|>` operator, where the first `Just` encountered\nis taken.\n\n``` purescript\nJust x <|> Just y == Just x\nNothing <|> Just y == Just y\nNothing <|> Nothing == Nothing\n```\n","title":"altMaybe","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Alt"],"Alt"]},{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]}]}},"sourceSpan":{"start":[104,1],"name":"/Users/adrian/Projects/purescript-neon/bower_components/purescript-maybe/src/Data/Maybe.purs","end":[104,31]}},{"comments":"The `Plus` instance provides a default `Maybe` value:\n\n``` purescript\nempty :: Maybe _ == Nothing\n```\n","title":"plusMaybe","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Plus"],"Plus"]},{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]}]}},"sourceSpan":{"start":[113,1],"name":"/Users/adrian/Projects/purescript-neon/bower_components/purescript-maybe/src/Data/Maybe.purs","end":[113,33]}},{"comments":"The `Alternative` instance guarantees that there are both `Applicative` and\n`Plus` instances for `Maybe`.\n","title":"alternativeMaybe","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Alternative"],"Alternative"]},{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]}]}},"sourceSpan":{"start":[118,1],"name":"/Users/adrian/Projects/purescript-neon/bower_components/purescript-maybe/src/Data/Maybe.purs","end":[118,47]}},{"comments":"The `Bind` instance allows sequencing of `Maybe` values and functions that\nreturn a `Maybe` by using the `>>=` operator:\n\n``` purescript\nJust x >>= f = f x\nNothing >>= f = Nothing\n```\n","title":"bindMaybe","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Bind"],"Bind"]},{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]}]}},"sourceSpan":{"start":[127,1],"name":"/Users/adrian/Projects/purescript-neon/bower_components/purescript-maybe/src/Data/Maybe.purs","end":[127,33]}},{"comments":"The `Monad` instance guarantees that there are both `Applicative` and\n`Bind` instances for `Maybe`. This also enables the `do` syntactic sugar:\n\n``` purescript\ndo\n  x' <- x\n  y' <- y\n  pure (f x' y')\n```\n\nWhich is equivalent to:\n\n``` purescript\nx >>= (\\x' -> y >>= (\\y' -> pure (f x' y')))\n```\n","title":"monadMaybe","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad"],"Monad"]},{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]}]}},"sourceSpan":{"start":[146,1],"name":"/Users/adrian/Projects/purescript-neon/bower_components/purescript-maybe/src/Data/Maybe.purs","end":[146,35]}},{"comments":null,"title":"monadZeroMaybe","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","MonadZero"],"MonadZero"]},{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]}]}},"sourceSpan":{"start":[148,1],"name":"/Users/adrian/Projects/purescript-neon/bower_components/purescript-maybe/src/Data/Maybe.purs","end":[148,43]}},{"comments":"The `Extend` instance allows sequencing of `Maybe` values and functions\nthat accept a `Maybe a` and return a non-`Maybe` result using the\n`<<=` operator.\n\n``` purescript\nf <<= Nothing = Nothing\nf <<= Just x = Just (f x)\n```\n","title":"extendMaybe","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Extend"],"Extend"]},{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]}]}},"sourceSpan":{"start":[158,1],"name":"/Users/adrian/Projects/purescript-neon/bower_components/purescript-maybe/src/Data/Maybe.purs","end":[158,37]}},{"comments":null,"title":"invariantMaybe","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Functor","Invariant"],"Invariant"]},{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]}]}},"sourceSpan":{"start":[162,1],"name":"/Users/adrian/Projects/purescript-neon/bower_components/purescript-maybe/src/Data/Maybe.purs","end":[162,43]}},{"comments":"The `Semigroup` instance enables use of the operator `<>` on `Maybe` values\nwhenever there is a `Semigroup` instance for the type the `Maybe` contains.\nThe exact behaviour of `<>` depends on the \"inner\" `Semigroup` instance,\nbut generally captures the notion of appending or combining things.\n\n``` purescript\nJust x <> Just y = Just (x <> y)\nJust x <> Nothing = Just x\nNothing <> Just y = Just y\nNothing <> Nothing = Nothing\n```\n","title":"semigroupMaybe","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","Semigroup"],"Semigroup"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Semigroup"],"Semigroup"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[176,1],"name":"/Users/adrian/Projects/purescript-neon/bower_components/purescript-maybe/src/Data/Maybe.purs","end":[176,62]}},{"comments":null,"title":"monoidMaybe","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","Semigroup"],"Semigroup"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Monoid"],"Monoid"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[181,1],"name":"/Users/adrian/Projects/purescript-neon/bower_components/purescript-maybe/src/Data/Maybe.purs","end":[181,56]}},{"comments":null,"title":"eqMaybe","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","Eq"],"Eq"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Eq"],"Eq"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[187,8],"name":"/Users/adrian/Projects/purescript-neon/bower_components/purescript-maybe/src/Data/Maybe.purs","end":[187,48]}},{"comments":null,"title":"eq1Maybe","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Eq"],"Eq1"]},{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]}]}},"sourceSpan":{"start":[189,1],"name":"/Users/adrian/Projects/purescript-neon/bower_components/purescript-maybe/src/Data/Maybe.purs","end":[189,31]}},{"comments":null,"title":"ordMaybe","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","Ord"],"Ord"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Ord"],"Ord"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[196,8],"name":"/Users/adrian/Projects/purescript-neon/bower_components/purescript-maybe/src/Data/Maybe.purs","end":[196,51]}},{"comments":null,"title":"ord1Maybe","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Ord"],"Ord1"]},{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]}]}},"sourceSpan":{"start":[198,1],"name":"/Users/adrian/Projects/purescript-neon/bower_components/purescript-maybe/src/Data/Maybe.purs","end":[198,33]}},{"comments":null,"title":"boundedMaybe","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","Bounded"],"Bounded"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Bounded"],"Bounded"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[200,1],"name":"/Users/adrian/Projects/purescript-neon/bower_components/purescript-maybe/src/Data/Maybe.purs","end":[200,56]}},{"comments":"The `Show` instance allows `Maybe` values to be rendered as a string with\n`show` whenever there is an `Show` instance for the type the `Maybe`\ncontains.\n","title":"showMaybe","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","Show"],"Show"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Show"],"Show"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[207,1],"name":"/Users/adrian/Projects/purescript-neon/bower_components/purescript-maybe/src/Data/Maybe.purs","end":[207,47]}}],"comments":"The `Maybe` type is used to represent optional values and can be seen as\nsomething like a type-safe `null`, where `Nothing` is `null` and `Just x`\nis the non-null value `x`.\n","title":"Maybe","info":{"declType":"data","dataDeclType":"data","typeArguments":[["a",null]]},"sourceSpan":{"start":[19,1],"name":"/Users/adrian/Projects/purescript-neon/bower_components/purescript-maybe/src/Data/Maybe.purs","end":[19,32]}},{"children":[{"comments":null,"title":"Nil","info":{"arguments":[],"declType":"dataConstructor"},"sourceSpan":null},{"comments":null,"title":"Cons","info":{"arguments":[{"tag":"TypeVar","contents":"a"},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","List","Types"],"List"]},{"tag":"TypeVar","contents":"a"}]}}],"declType":"dataConstructor"},"sourceSpan":null},{"comments":null,"title":"showList","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","Show"],"Show"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Show"],"Show"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","List","Types"],"List"]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[34,1],"name":"/Users/adrian/Projects/purescript-neon/bower_components/purescript-lists/src/Data/List/Types.purs","end":[34,45]}},{"comments":null,"title":"eqList","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","Eq"],"Eq"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Eq"],"Eq"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","List","Types"],"List"]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[38,1],"name":"/Users/adrian/Projects/purescript-neon/bower_components/purescript-lists/src/Data/List/Types.purs","end":[38,39]}},{"comments":null,"title":"eq1List","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Eq"],"Eq1"]},{"tag":"TypeConstructor","contents":[["Data","List","Types"],"List"]}]}},"sourceSpan":{"start":[41,1],"name":"/Users/adrian/Projects/purescript-neon/bower_components/purescript-lists/src/Data/List/Types.purs","end":[41,29]}},{"comments":null,"title":"ordList","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","Ord"],"Ord"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Ord"],"Ord"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","List","Types"],"List"]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[49,1],"name":"/Users/adrian/Projects/purescript-neon/bower_components/purescript-lists/src/Data/List/Types.purs","end":[49,42]}},{"comments":null,"title":"ord1List","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Ord"],"Ord1"]},{"tag":"TypeConstructor","contents":[["Data","List","Types"],"List"]}]}},"sourceSpan":{"start":[52,1],"name":"/Users/adrian/Projects/purescript-neon/bower_components/purescript-lists/src/Data/List/Types.purs","end":[52,31]}},{"comments":null,"title":"semigroupList","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Semigroup"],"Semigroup"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","List","Types"],"List"]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[63,1],"name":"/Users/adrian/Projects/purescript-neon/bower_components/purescript-lists/src/Data/List/Types.purs","end":[63,45]}},{"comments":null,"title":"monoidList","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Monoid"],"Monoid"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","List","Types"],"List"]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[66,1],"name":"/Users/adrian/Projects/purescript-neon/bower_components/purescript-lists/src/Data/List/Types.purs","end":[66,39]}},{"comments":null,"title":"functorList","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Functor"],"Functor"]},{"tag":"TypeConstructor","contents":[["Data","List","Types"],"List"]}]}},"sourceSpan":{"start":[69,1],"name":"/Users/adrian/Projects/purescript-neon/bower_components/purescript-lists/src/Data/List/Types.purs","end":[69,37]}},{"comments":null,"title":"functorWithIndexList","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","FunctorWithIndex"],"FunctorWithIndex"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeConstructor","contents":[["Data","List","Types"],"List"]}]}},"sourceSpan":{"start":[72,1],"name":"/Users/adrian/Projects/purescript-neon/bower_components/purescript-lists/src/Data/List/Types.purs","end":[72,59]}},{"comments":null,"title":"foldableList","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Foldable"],"Foldable"]},{"tag":"TypeConstructor","contents":[["Data","List","Types"],"List"]}]}},"sourceSpan":{"start":[75,1],"name":"/Users/adrian/Projects/purescript-neon/bower_components/purescript-lists/src/Data/List/Types.purs","end":[75,39]}},{"comments":null,"title":"foldableWithIndexList","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","FoldableWithIndex"],"FoldableWithIndex"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeConstructor","contents":[["Data","List","Types"],"List"]}]}},"sourceSpan":{"start":[86,1],"name":"/Users/adrian/Projects/purescript-neon/bower_components/purescript-lists/src/Data/List/Types.purs","end":[86,61]}},{"comments":null,"title":"unfoldableList","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Unfoldable"],"Unfoldable"]},{"tag":"TypeConstructor","contents":[["Data","List","Types"],"List"]}]}},"sourceSpan":{"start":[102,1],"name":"/Users/adrian/Projects/purescript-neon/bower_components/purescript-lists/src/Data/List/Types.purs","end":[102,43]}},{"comments":null,"title":"traversableList","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Traversable"],"Traversable"]},{"tag":"TypeConstructor","contents":[["Data","List","Types"],"List"]}]}},"sourceSpan":{"start":[109,1],"name":"/Users/adrian/Projects/purescript-neon/bower_components/purescript-lists/src/Data/List/Types.purs","end":[109,45]}},{"comments":null,"title":"traversableWithIndexList","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","TraversableWithIndex"],"TraversableWithIndex"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeConstructor","contents":[["Data","List","Types"],"List"]}]}},"sourceSpan":{"start":[113,1],"name":"/Users/adrian/Projects/purescript-neon/bower_components/purescript-lists/src/Data/List/Types.purs","end":[113,67]}},{"comments":null,"title":"applyList","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Apply"],"Apply"]},{"tag":"TypeConstructor","contents":[["Data","List","Types"],"List"]}]}},"sourceSpan":{"start":[120,1],"name":"/Users/adrian/Projects/purescript-neon/bower_components/purescript-lists/src/Data/List/Types.purs","end":[120,33]}},{"comments":null,"title":"applicativeList","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Applicative"],"Applicative"]},{"tag":"TypeConstructor","contents":[["Data","List","Types"],"List"]}]}},"sourceSpan":{"start":[124,1],"name":"/Users/adrian/Projects/purescript-neon/bower_components/purescript-lists/src/Data/List/Types.purs","end":[124,45]}},{"comments":null,"title":"bindList","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Bind"],"Bind"]},{"tag":"TypeConstructor","contents":[["Data","List","Types"],"List"]}]}},"sourceSpan":{"start":[127,1],"name":"/Users/adrian/Projects/purescript-neon/bower_components/purescript-lists/src/Data/List/Types.purs","end":[127,31]}},{"comments":null,"title":"monadList","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad"],"Monad"]},{"tag":"TypeConstructor","contents":[["Data","List","Types"],"List"]}]}},"sourceSpan":{"start":[131,1],"name":"/Users/adrian/Projects/purescript-neon/bower_components/purescript-lists/src/Data/List/Types.purs","end":[131,33]}},{"comments":null,"title":"altList","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Alt"],"Alt"]},{"tag":"TypeConstructor","contents":[["Data","List","Types"],"List"]}]}},"sourceSpan":{"start":[133,1],"name":"/Users/adrian/Projects/purescript-neon/bower_components/purescript-lists/src/Data/List/Types.purs","end":[133,29]}},{"comments":null,"title":"plusList","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Plus"],"Plus"]},{"tag":"TypeConstructor","contents":[["Data","List","Types"],"List"]}]}},"sourceSpan":{"start":[136,1],"name":"/Users/adrian/Projects/purescript-neon/bower_components/purescript-lists/src/Data/List/Types.purs","end":[136,31]}},{"comments":null,"title":"alternativeList","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Alternative"],"Alternative"]},{"tag":"TypeConstructor","contents":[["Data","List","Types"],"List"]}]}},"sourceSpan":{"start":[139,1],"name":"/Users/adrian/Projects/purescript-neon/bower_components/purescript-lists/src/Data/List/Types.purs","end":[139,45]}},{"comments":null,"title":"monadZeroList","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","MonadZero"],"MonadZero"]},{"tag":"TypeConstructor","contents":[["Data","List","Types"],"List"]}]}},"sourceSpan":{"start":[141,1],"name":"/Users/adrian/Projects/purescript-neon/bower_components/purescript-lists/src/Data/List/Types.purs","end":[141,41]}},{"comments":null,"title":"monadPlusList","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","MonadPlus"],"MonadPlus"]},{"tag":"TypeConstructor","contents":[["Data","List","Types"],"List"]}]}},"sourceSpan":{"start":[143,1],"name":"/Users/adrian/Projects/purescript-neon/bower_components/purescript-lists/src/Data/List/Types.purs","end":[143,41]}},{"comments":null,"title":"extendList","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Extend"],"Extend"]},{"tag":"TypeConstructor","contents":[["Data","List","Types"],"List"]}]}},"sourceSpan":{"start":[145,1],"name":"/Users/adrian/Projects/purescript-neon/bower_components/purescript-lists/src/Data/List/Types.purs","end":[145,35]}}],"comments":null,"title":"List","info":{"declType":"data","dataDeclType":"data","typeArguments":[["a",null]]},"sourceSpan":{"start":[30,1],"name":"/Users/adrian/Projects/purescript-neon/bower_components/purescript-lists/src/Data/List/Types.purs","end":[30,36]}},{"children":[{"comments":null,"title":"showError","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Show"],"Show"]},{"tag":"TypeConstructor","contents":[["Control","Monad","Eff","Exception"],"Error"]}]}},"sourceSpan":{"start":[30,1],"name":"/Users/adrian/Projects/purescript-neon/bower_components/purescript-exceptions/src/Control/Monad/Eff/Exception.purs","end":[30,33]}}],"comments":"The type of JavaScript errors\n","title":"Error","info":{"kind":{"tag":"NamedKind","contents":[["Prim"],"Type"]},"declType":"externData"},"sourceSpan":{"start":[28,1],"name":"/Users/adrian/Projects/purescript-neon/bower_components/purescript-exceptions/src/Control/Monad/Eff/Exception.purs","end":[28,34]}},{"children":[],"comments":"`unit` is the sole inhabitant of the `Unit` type.\n","title":"unit","info":{"declType":"value","type":{"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}},"sourceSpan":{"start":[14,1],"name":"/Users/adrian/Projects/purescript-neon/bower_components/purescript-prelude/src/Data/Unit.purs","end":[14,28]}},{"children":[],"comments":"Creates an exception with the given message.\n\n``` purescript\nexception \"example\"\n```\n","title":"exception","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeConstructor","contents":[["Control","Monad","Eff","Exception"],"Error"]}]}},"sourceSpan":{"start":[21,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Data.purs","end":[21,39]}}]},{"moduleName":{"package":null,"item":["Neon","Effect"]},"declarations":[{"children":[],"comments":"The `RANDOM` effect indicates that an Eff action may access or modify the\nJavaScript global random number generator, i.e. `Math.random()`.\n","title":"RANDOM","info":{"kind":{"tag":"NamedKind","contents":[["Control","Monad","Eff"],"Effect"]},"declType":"externData"},"sourceSpan":{"start":[11,1],"name":"/Users/adrian/Projects/purescript-neon/bower_components/purescript-random/src/Control/Monad/Eff/Random.purs","end":[11,37]}},{"children":[{"comments":null,"title":"functorEff","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Functor"],"Functor"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad","Eff"],"Eff"]},{"tag":"TypeVar","contents":"e"}]}]}},"sourceSpan":{"start":[38,1],"name":"/Users/adrian/Projects/purescript-neon/bower_components/purescript-eff/src/Control/Monad/Eff.purs","end":[38,39]}},{"comments":null,"title":"applyEff","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Apply"],"Apply"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad","Eff"],"Eff"]},{"tag":"TypeVar","contents":"e"}]}]}},"sourceSpan":{"start":[41,1],"name":"/Users/adrian/Projects/purescript-neon/bower_components/purescript-eff/src/Control/Monad/Eff.purs","end":[41,35]}},{"comments":null,"title":"applicativeEff","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Applicative"],"Applicative"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad","Eff"],"Eff"]},{"tag":"TypeVar","contents":"e"}]}]}},"sourceSpan":{"start":[44,1],"name":"/Users/adrian/Projects/purescript-neon/bower_components/purescript-eff/src/Control/Monad/Eff.purs","end":[44,47]}},{"comments":null,"title":"bindEff","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Bind"],"Bind"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad","Eff"],"Eff"]},{"tag":"TypeVar","contents":"e"}]}]}},"sourceSpan":{"start":[49,1],"name":"/Users/adrian/Projects/purescript-neon/bower_components/purescript-eff/src/Control/Monad/Eff.purs","end":[49,33]}},{"comments":null,"title":"monadEff","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad"],"Monad"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad","Eff"],"Eff"]},{"tag":"TypeVar","contents":"e"}]}]}},"sourceSpan":{"start":[54,1],"name":"/Users/adrian/Projects/purescript-neon/bower_components/purescript-eff/src/Control/Monad/Eff.purs","end":[54,35]}}],"comments":"The `Eff` type constructor is used to represent _native_ effects.\n\nSee [Handling Native Effects with the Eff Monad](http://www.purescript.org/learn/eff/)\nfor more details.\n\nThe first type parameter is a row of effects which represents the contexts\nin which a computation can be run, and the second type parameter is the\nreturn type.\n","title":"Eff","info":{"kind":{"tag":"FunKind","contents":[{"tag":"Row","contents":{"tag":"NamedKind","contents":[["Control","Monad","Eff"],"Effect"]}},{"tag":"FunKind","contents":[{"tag":"NamedKind","contents":[["Prim"],"Type"]},{"tag":"NamedKind","contents":[["Prim"],"Type"]}]}]},"declType":"externData"},"sourceSpan":{"start":[36,1],"name":"/Users/adrian/Projects/purescript-neon/bower_components/purescript-eff/src/Control/Monad/Eff.purs","end":[36,52]}},{"children":[],"comments":"This effect is used to annotate code which possibly throws exceptions\n","title":"EXCEPTION","info":{"kind":{"tag":"NamedKind","contents":[["Control","Monad","Eff"],"Effect"]},"declType":"externData"},"sourceSpan":{"start":[25,1],"name":"/Users/adrian/Projects/purescript-neon/bower_components/purescript-exceptions/src/Control/Monad/Eff/Exception.purs","end":[25,40]}},{"children":[],"comments":"The `CONSOLE` effect represents those computations which write to the\nconsole.\n","title":"CONSOLE","info":{"kind":{"tag":"NamedKind","contents":[["Control","Monad","Eff"],"Effect"]},"declType":"externData"},"sourceSpan":{"start":[10,1],"name":"/Users/adrian/Projects/purescript-neon/bower_components/purescript-console/src/Control/Monad/Eff/Console.purs","end":[10,38]}},{"children":[],"comments":"Run an effectful computation.\n\n*Note*: use of this function can result in arbitrary side-effects.\n","title":"unsafePerformEff","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["eff",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad","Eff"],"Eff"]},{"tag":"TypeVar","contents":"eff"}]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeVar","contents":"a"}]},null]},null]}},"sourceSpan":{"start":[18,1],"name":"/Users/adrian/Projects/purescript-neon/bower_components/purescript-eff/src/Control/Monad/Eff/Unsafe.purs","end":[18,49]}},{"children":[],"comments":"Throws an exception.\n\n``` purescript\nthrow (exception \"example\"))\n```\n","title":"throw","info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Control","Monad","Eff","Exception"],"Error"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad","Eff"],"Eff"]},{"tag":"RCons","contents":["exception",{"tag":"TypeConstructor","contents":[["Control","Monad","Eff","Exception"],"EXCEPTION"]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeVar","contents":"a"}]}]},null]},null]}},"sourceSpan":{"start":[31,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Effect.purs","end":[31,89]}},{"children":[],"comments":"Run a pure computation and return its result.\n","title":"runPure","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad","Eff"],"Pure"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeVar","contents":"a"}]},null]}},"sourceSpan":{"start":[64,1],"name":"/Users/adrian/Projects/purescript-neon/bower_components/purescript-eff/src/Control/Monad/Eff.purs","end":[64,48]}},{"children":[],"comments":"Write a message to the console.\n","title":"log","info":{"declType":"value","type":{"tag":"ForAll","contents":["eff",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad","Eff"],"Eff"]},{"tag":"RCons","contents":["console",{"tag":"TypeConstructor","contents":[["Control","Monad","Eff","Console"],"CONSOLE"]},{"tag":"TypeVar","contents":"eff"}]}]},{"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}]},null]}},"sourceSpan":{"start":[13,1],"name":"/Users/adrian/Projects/purescript-neon/bower_components/purescript-console/src/Control/Monad/Eff/Console.purs","end":[16,41]}},{"children":[],"comments":"Write an error to the console.\n","title":"error","info":{"declType":"value","type":{"tag":"ForAll","contents":["eff",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad","Eff"],"Eff"]},{"tag":"RCons","contents":["console",{"tag":"TypeConstructor","contents":[["Control","Monad","Eff","Console"],"CONSOLE"]},{"tag":"TypeVar","contents":"eff"}]}]},{"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}]},null]}},"sourceSpan":{"start":[35,1],"name":"/Users/adrian/Projects/purescript-neon/bower_components/purescript-console/src/Control/Monad/Eff/Console.purs","end":[38,41]}},{"children":[],"comments":"Catches an exception by providing and exception handler. The handler\nremoves the `EXCEPTION` effect.\n\n``` purescript\ncatch (\\ x -> error x) (throw (exception \"example\")))\n```\n","title":"catch","info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Control","Monad","Eff","Exception"],"Error"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad","Eff"],"Eff"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeVar","contents":"a"}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad","Eff"],"Eff"]},{"tag":"RCons","contents":["exception",{"tag":"TypeConstructor","contents":[["Control","Monad","Eff","Exception"],"EXCEPTION"]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad","Eff"],"Eff"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeVar","contents":"a"}]}]}]},null]},null]}},"sourceSpan":{"start":[23,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Effect.purs","end":[23,121]}}]},{"moduleName":{"package":null,"item":["Neon","Helper"]},"declarations":[{"children":[],"comments":"If the given value is `Nothing`, return the default. Otherwise return the\nvalue.\n\n``` purescript\nwithDefault 2 Nothing -- 2\nwithDefault 2 (Just 1) -- 1\n```\n","title":"withDefault","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeVar","contents":"a"}]}]},null]}},"sourceSpan":{"start":[460,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Helper.purs","end":[460,48]}},{"children":[],"comments":"Keeps calling the function while the predicate is true.\n\n``` purescript\n1 :while (_ < 3) (_ + 1) -- 3\n9 :while (_ < 3) (_ + 1) -- 9\n```\n","title":"while","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"a"}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"a"}]}]}]},null]}},"sourceSpan":{"start":[450,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Helper.purs","end":[450,56]}},{"children":[],"comments":"If the predicate is true, run the effect. Otherwise run an effect that\ndoes nothing.\n\n``` purescript\nwhen true [unit, unit] -- [unit, unit]\nwhen false [unit, unit] -- [unit]\n```\n","title":"when","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Neon","Class","HasPure"],"HasPure"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"a"},{"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"a"},{"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}]}]}]},null]}},"sourceSpan":{"start":[441,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Helper.purs","end":[441,77]}},{"children":[],"comments":"Replaces all values in the input container with `unit`. This is mostly\nuseful for ignoring the value from an effect.\n\n``` purescript\nvoid [1, 2] -- [unit, unit]\n```\n","title":"void","info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Neon","Class","HasMap"],"HasMap"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"a"},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"a"},{"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}]}]},null]},null]}},"sourceSpan":{"start":[431,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Helper.purs","end":[431,59]}},{"children":[],"comments":"Creates an array that ranges from the given lower bound down to the upper\nbound.\n\n``` purescript\n1 :upTo 3 -- [1, 2, 3]\n1 :upTo 1 -- [1]\n3 :upTo 1 -- []\n```\n","title":"upTo","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Neon","Class","HasFromInt"],"HasFromInt"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"tag":"ConstrainedType","contents":[{"constraintClass":[["Neon","Class","HasGreater"],"HasGreater"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"tag":"ConstrainedType","contents":[{"constraintClass":[["Neon","Class","HasToInt"],"HasToInt"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]}]}]}]}]}]},null]}},"sourceSpan":{"start":[415,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Helper.purs","end":[415,100]}},{"children":[],"comments":"Unsafely write a string to the console.\n\n``` purescript\nunsafeLog \"unsafe!\" unit -- unit (logs \"unsafe!\")\n```\n","title":"unsafeLog","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"a"}]}]},null]}},"sourceSpan":{"start":[402,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Helper.purs","end":[402,40]}},{"children":[],"comments":"A wildly unsafe function that can convince the type system that any value\nis any type. Use this carefully!\n\n``` purescript\nunsafeCoerce 1 :: Number -- 1.0\nunsafeCoerce 'a' :: String -- \"a\"\n```\n","title":"unsafeCoerce","info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]},null]},null]}},"sourceSpan":{"start":[394,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Helper.purs","end":[394,35]}},{"children":[],"comments":"Converts a regular function into one that takes a tuple.\n\n``` purescript\nlet f x y = x + y\nuncurry f (Tuple \"a\" \"b\") -- \"ab\"\n```\n","title":"uncurry","info":{"declType":"value","type":{"tag":"ForAll","contents":["c",{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeVar","contents":"c"}]}]}}]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Tuple"],"Tuple"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeVar","contents":"c"}]}}]},null]},null]},null]}},"sourceSpan":{"start":[384,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Helper.purs","end":[384,64]}},{"children":[],"comments":"Removes the decimal part of a number and returns an integer.\n\n``` purescript\ntruncate 1.0 -- 1\ntruncate 1.9 -- 1\ntruncate (-1.9) -- -1\n```\n","title":"truncate","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}},"sourceSpan":{"start":[373,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Helper.purs","end":[373,26]}},{"children":[],"comments":"A wildly unsafe function that can be used to stand in for any value.\n\n``` purescript\ntodo :: Unit -- unit\ntodo :: Boolean -- ?\n```\n\nThis should never end up in production, but it can be useful when\ndeveloping a function.\n","title":"todo","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeVar","contents":"a"},null]}},"sourceSpan":{"start":[363,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Helper.purs","end":[363,20]}},{"children":[],"comments":"Swaps the values in a tuple.\n\n``` purescript\nswap (Tuple 1 'a') -- Tuple 'a' 1\n```\n","title":"swap","info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Tuple"],"Tuple"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Tuple"],"Tuple"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeVar","contents":"a"}]}]},null]},null]}},"sourceSpan":{"start":[351,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Helper.purs","end":[351,53]}},{"children":[],"comments":"Adds all the elements of a container together. If the container is empty,\nreturns `zero`.\n\n``` purescript\n[1, 2, 3] :sum -- 6\n([] :: Array Int) :sum -- 0\n[\"ab\", \"cd\", \"ef\"] :sum -- \"abcdef\"\n([] :: Array String) :sum -- \"\"\n```\n","title":"sum","info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Neon","Class","HasAdd"],"HasAdd"],"constraintArgs":[{"tag":"TypeVar","contents":"b"}],"constraintData":null},{"tag":"ConstrainedType","contents":[{"constraintClass":[["Neon","Class","HasReduce"],"HasReduce"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"tag":"ConstrainedType","contents":[{"constraintClass":[["Neon","Class","HasZero"],"HasZero"],"constraintArgs":[{"tag":"TypeVar","contents":"b"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"a"},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeVar","contents":"b"}]}]}]}]},null]},null]}},"sourceSpan":{"start":[343,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Helper.purs","end":[343,86]}},{"children":[],"comments":"Returns the size of a container.\n\n``` purescript\nsize [2, 3, 5] -- 3\nsize [] -- 0\n```\n","title":"size","info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Neon","Class","HasReduce"],"HasReduce"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"a"},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}]},null]},null]}},"sourceSpan":{"start":[331,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Helper.purs","end":[331,54]}},{"children":[],"comments":"Returns the sign of a number.\n\n``` purescript\nsign 2 -- 1\nsign 0 -- 0\nsign (-2) -- -1\n```\n","title":"sign","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Neon","Class","HasGreater"],"HasGreater"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"tag":"ConstrainedType","contents":[{"constraintClass":[["Neon","Class","HasLess"],"HasLess"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"tag":"ConstrainedType","contents":[{"constraintClass":[["Neon","Class","HasOne"],"HasOne"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"tag":"ConstrainedType","contents":[{"constraintClass":[["Neon","Class","HasSubtract"],"HasSubtract"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"tag":"ConstrainedType","contents":[{"constraintClass":[["Neon","Class","HasZero"],"HasZero"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"a"}]}]}]}]}]}]},null]}},"sourceSpan":{"start":[317,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Helper.purs","end":[317,126]}},{"children":[],"comments":"Sequences actions and collects the results.\n\n``` purescript\nsequence [Just 1, Just 2] -- Just [1, 2]\n```\n","title":"sequence","info":{"declType":"value","type":{"tag":"ForAll","contents":["c",{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Neon","Class","HasApply"],"HasApply"],"constraintArgs":[{"tag":"TypeVar","contents":"b"}],"constraintData":null},{"tag":"ConstrainedType","contents":[{"constraintClass":[["Neon","Class","HasMap"],"HasMap"],"constraintArgs":[{"tag":"TypeVar","contents":"b"}],"constraintData":null},{"tag":"ConstrainedType","contents":[{"constraintClass":[["Neon","Class","HasTraverse"],"HasTraverse"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"tag":"ConstrainedType","contents":[{"constraintClass":[["Neon","Class","HasPure"],"HasPure"],"constraintArgs":[{"tag":"TypeVar","contents":"b"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"a"},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"b"},{"tag":"TypeVar","contents":"c"}]}}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"b"},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"a"},{"tag":"TypeVar","contents":"c"}]}}]}]}]}]}]}]},null]},null]},null]}},"sourceSpan":{"start":[307,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Helper.purs","end":[307,125]}},{"children":[],"comments":"Returns the reciprocal of the value by dividing one by it.\n\n``` purescript\nreciprocal 2 -- 0.5\n```\n","title":"reciprocal","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Neon","Class","HasDivide"],"HasDivide"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"tag":"ConstrainedType","contents":[{"constraintClass":[["Neon","Class","HasOne"],"HasOne"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"a"}]}]}]},null]}},"sourceSpan":{"start":[299,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Helper.purs","end":[299,70]}},{"children":[],"comments":"Multiplies all of the elements of a container together.\n\n``` purescript\nproduct [2, 3] -- 6\nproduct [] -- 1\n```\n","title":"product","info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Neon","Class","HasMultiply"],"HasMultiply"],"constraintArgs":[{"tag":"TypeVar","contents":"b"}],"constraintData":null},{"tag":"ConstrainedType","contents":[{"constraintClass":[["Neon","Class","HasOne"],"HasOne"],"constraintArgs":[{"tag":"TypeVar","contents":"b"}],"constraintData":null},{"tag":"ConstrainedType","contents":[{"constraintClass":[["Neon","Class","HasReduce"],"HasReduce"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"a"},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeVar","contents":"b"}]}]}]}]},null]},null]}},"sourceSpan":{"start":[291,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Helper.purs","end":[291,94]}},{"children":[],"comments":"Inspects a value and logs it.\n\n``` purescript\nprint 123 -- (logs \"123\")\n```\n","title":"print","info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Neon","Class","HasInspect"],"HasInspect"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad","Eff"],"Eff"]},{"tag":"RCons","contents":["console",{"tag":"TypeConstructor","contents":[["Control","Monad","Eff","Console"],"CONSOLE"]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}]}]},null]},null]}},"sourceSpan":{"start":[282,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Helper.purs","end":[282,103]}},{"children":[],"comments":"Returns true if the number is odd.\n\n``` purescript\nodd 3 -- true\nodd 4 -- false\n```\n","title":"odd","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}},"sourceSpan":{"start":[274,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Helper.purs","end":[274,22]}},{"children":[],"comments":"Returns true if the value is not equal to the other.\n\n``` purescript\n2 :notEqual 1 -- true\n1 :notEqual 1 -- true\n```\n","title":"notEqual","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Neon","Class","HasEqual"],"HasEqual"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}]}]},null]}},"sourceSpan":{"start":[265,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Helper.purs","end":[265,62]}},{"children":[],"comments":"Returns `true` if the number is not a valid number. This is useful to test\nfor `nan`.\n\n``` purescript\nnotANumber 1 -- false\nnotANumber infinity -- false\nnotANumber nan -- true\n```\n","title":"notANumber","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}},"sourceSpan":{"start":[256,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Helper.purs","end":[256,32]}},{"children":[],"comments":"Negates the value by subtracting the value from zero.\n\n``` purescript\nnegate 2 -- -2\n```\n","title":"negate","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Neon","Class","HasSubtract"],"HasSubtract"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"tag":"ConstrainedType","contents":[{"constraintClass":[["Neon","Class","HasZero"],"HasZero"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"a"}]}]}]},null]}},"sourceSpan":{"start":[245,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Helper.purs","end":[245,69]}},{"children":[],"comments":"Returns the least value.\n\n``` purescript\nminimum [2, 1, 3] -- Just 1\nminimum [] -- Nothing\n```\n","title":"minimum","info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Neon","Class","HasLess"],"HasLess"],"constraintArgs":[{"tag":"TypeVar","contents":"b"}],"constraintData":null},{"tag":"ConstrainedType","contents":[{"constraintClass":[["Neon","Class","HasReduce"],"HasReduce"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"a"},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeVar","contents":"b"}]}]}]}]},null]},null]}},"sourceSpan":{"start":[232,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Helper.purs","end":[232,83]}},{"children":[],"comments":"Returns the lesser value.\n\n``` purescript\nmin 1 2 -- 1\nmin 2 1 -- 1\n```\n","title":"min","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Neon","Class","HasLess"],"HasLess"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"a"}]}]}]},null]}},"sourceSpan":{"start":[223,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Helper.purs","end":[223,50]}},{"children":[],"comments":"Returns the greatest value.\n\n``` purescript\nmaximum [1, 3, 2] -- Just 3\nmaximum [] -- Nothing\n```\n","title":"maximum","info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Neon","Class","HasGreater"],"HasGreater"],"constraintArgs":[{"tag":"TypeVar","contents":"b"}],"constraintData":null},{"tag":"ConstrainedType","contents":[{"constraintClass":[["Neon","Class","HasReduce"],"HasReduce"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"a"},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeVar","contents":"b"}]}]}]}]},null]},null]}},"sourceSpan":{"start":[209,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Helper.purs","end":[209,86]}},{"children":[],"comments":"Returns the greater value.\n\n``` purescript\nmax 1 2 -- 2\nmax 2 1 -- 2\n```\n","title":"max","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Neon","Class","HasGreater"],"HasGreater"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"a"}]}]}]},null]}},"sourceSpan":{"start":[200,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Helper.purs","end":[200,53]}},{"children":[],"comments":"Returns true if the value is less than or equal to the other.\n\n``` purescript\n2 :lessOrEqual 1 -- false\n2 :lessOrEqual 2 -- true\n2 :lessOrEqual 3 -- true\n```\n","title":"lessOrEqual","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Neon","Class","HasEqual"],"HasEqual"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"tag":"ConstrainedType","contents":[{"constraintClass":[["Neon","Class","HasLess"],"HasLess"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}]}]}]},null]}},"sourceSpan":{"start":[191,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Helper.purs","end":[191,82]}},{"children":[],"comments":"Returns true if the number is infinite.\n\n``` purescript\ninfinite infinity -- true\ninfinite (-infinity) -- true\ninfinite nan -- true\ninfinite 1.2 -- false\n```\n","title":"infinite","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}},"sourceSpan":{"start":[181,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Helper.purs","end":[181,30]}},{"children":[],"comments":"Increases a value by one. If the value is already the top, nothing will be\nreturned.\n\n``` purescript\nincrement 'a' -- Just 'b'\nincrement '\\65535' -- Nothing\n```\n","title":"increment","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Neon","Class","HasFromInt"],"HasFromInt"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"tag":"ConstrainedType","contents":[{"constraintClass":[["Neon","Class","HasToInt"],"HasToInt"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeVar","contents":"a"}]}]}]}]},null]}},"sourceSpan":{"start":[170,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Helper.purs","end":[170,83]}},{"children":[],"comments":"Returns true if the value is greater than or equal to the other.\n\n``` purescript\n2 :greaterOrEqual 1 -- true\n2 :greaterOrEqual 2 -- true\n2 :greaterOrEqual 3 -- false\n```\n","title":"greaterOrEqual","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Neon","Class","HasEqual"],"HasEqual"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"tag":"ConstrainedType","contents":[{"constraintClass":[["Neon","Class","HasGreater"],"HasGreater"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}]}]}]},null]}},"sourceSpan":{"start":[160,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Helper.purs","end":[160,88]}},{"children":[],"comments":"Removes a level of nesting from a container.\n\n``` purescript\nflatten [[1, 2], [3, 4]] -- [1, 2, 3, 4]\n```\n","title":"flatten","info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Neon","Class","HasChain"],"HasChain"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"a"},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"a"},{"tag":"TypeVar","contents":"b"}]}}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"a"},{"tag":"TypeVar","contents":"b"}]}]}]},null]},null]}},"sourceSpan":{"start":[150,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Helper.purs","end":[150,60]}},{"children":[],"comments":"Returns true if the number is even.\n\n``` purescript\neven 2 -- true\neven 3 -- false\n```\n","title":"even","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}},"sourceSpan":{"start":[142,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Helper.purs","end":[142,23]}},{"children":[],"comments":"Returns true if the container is empty.\n\n``` purescript\nempty [] -- true\nempty [1] -- false\n```\n","title":"empty","info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Neon","Class","HasReduce"],"HasReduce"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"a"},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}]},null]},null]}},"sourceSpan":{"start":[133,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Helper.purs","end":[133,59]}},{"children":[],"comments":"Creates an array that ranges from the given upper bound down to the lower\nbound.\n\n``` purescript\n3 :downTo 1 -- [3, 2, 1]\n1 :downTo 1 -- [1]\n1 :downTo 3 -- []\n```\n","title":"downTo","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Neon","Class","HasFromInt"],"HasFromInt"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"tag":"ConstrainedType","contents":[{"constraintClass":[["Neon","Class","HasLess"],"HasLess"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"tag":"ConstrainedType","contents":[{"constraintClass":[["Neon","Class","HasToInt"],"HasToInt"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]}]}]}]}]}]},null]}},"sourceSpan":{"start":[117,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Helper.purs","end":[117,99]}},{"children":[],"comments":"Returns true if the number is divisible by the other.\n\n``` purescript\n9 :divisibleBy 3 -- true\n8 :divisibleBy 3 -- false\n```\n","title":"divisibleBy","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Neon","Class","HasEqual"],"HasEqual"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"tag":"ConstrainedType","contents":[{"constraintClass":[["Neon","Class","HasRemainder"],"HasRemainder"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"tag":"ConstrainedType","contents":[{"constraintClass":[["Neon","Class","HasZero"],"HasZero"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}]}]}]}]},null]}},"sourceSpan":{"start":[106,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Helper.purs","end":[106,106]}},{"children":[],"comments":"Decreases a value by one. If the value is already the bottom, nothing will\nbe returned.\n\n``` purescript\ndecrement 'b' -- Just 'a'\ndecrement '\\0' -- Nothing\n```\n","title":"decrement","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Neon","Class","HasFromInt"],"HasFromInt"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"tag":"ConstrainedType","contents":[{"constraintClass":[["Neon","Class","HasToInt"],"HasToInt"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeVar","contents":"a"}]}]}]}]},null]}},"sourceSpan":{"start":[97,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Helper.purs","end":[97,83]}},{"children":[],"comments":"Converts a function that operates on tuples to a normal function.\n\n``` purescript\nlet f (Tuple x y) = x + y\ncurry f \"a\" \"b\" -- \"ab\"\n```\n","title":"curry","info":{"declType":"value","type":{"tag":"ForAll","contents":["c",{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Tuple"],"Tuple"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeVar","contents":"c"}]}}]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeVar","contents":"c"}]}]}}]},null]},null]},null]}},"sourceSpan":{"start":[87,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Helper.purs","end":[87,62]}},{"children":[],"comments":"Returns true if the container contains the element.\n\n``` purescript\n[1, 2, 3] :contains 2 -- true\n[1, 0, 3] :contains 2 -- false\n```\n","title":"contains","info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Neon","Class","HasEqual"],"HasEqual"],"constraintArgs":[{"tag":"TypeVar","contents":"b"}],"constraintData":null},{"tag":"ConstrainedType","contents":[{"constraintClass":[["Neon","Class","HasReduce"],"HasReduce"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"a"},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}]}]}]},null]},null]}},"sourceSpan":{"start":[78,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Helper.purs","end":[78,85]}},{"children":[],"comments":"Clamps a value between some bounds. If the lower bound is greater than the\nupper bound, they will be swapped.\n\n``` purescript\n2 :clamp 3 5 -- 3\n4 :clamp 3 5 -- 4\n6 :clamp 3 5 -- 5\n6 :clamp 5 3 -- 5\n```\n","title":"clamp","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Neon","Class","HasGreater"],"HasGreater"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"tag":"ConstrainedType","contents":[{"constraintClass":[["Neon","Class","HasLess"],"HasLess"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"a"}]}]}]}]}]},null]}},"sourceSpan":{"start":[66,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Helper.purs","end":[66,77]}},{"children":[],"comments":"A version of `chain` with the arguments flipped. This is provided only to\nsupport desugaring `do` notation. It is not recommended to use explicitly.\n","title":"bind","info":{"declType":"value","type":{"tag":"ForAll","contents":["c",{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Neon","Class","HasChain"],"HasChain"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"a"},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"a"},{"tag":"TypeVar","contents":"c"}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"a"},{"tag":"TypeVar","contents":"c"}]}]}]}]},null]},null]},null]}},"sourceSpan":{"start":[54,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Helper.purs","end":[54,69]}},{"children":[],"comments":"A type-restricted version of `always`.\n\n``` purescript\n[] :asTypeOf [1] -- [] :: Array Int\n```\n","title":"asTypeOf","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"a"}]}]},null]}},"sourceSpan":{"start":[49,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Helper.purs","end":[49,34]}},{"children":[],"comments":"Returns true if any of the elements in the collection pass the predicate.\n\n``` purescript\n[1, 2] :any (_ > 1) -- true\n[1, 0] :any (_ > 1) -- false\n```\n","title":"any","info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Neon","Class","HasReduce"],"HasReduce"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"a"},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}]}]},null]},null]}},"sourceSpan":{"start":[41,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Helper.purs","end":[41,75]}},{"children":[],"comments":"Returns true if all of the elements in the collection pass the predicate.\n\n``` purescript\n[2, 3] :all (_ > 1) -- true\n[2, 1] :all (_ > 1) -- false\n```\n","title":"all","info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Neon","Class","HasReduce"],"HasReduce"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"a"},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}]}]},null]},null]}},"sourceSpan":{"start":[32,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Helper.purs","end":[32,75]}},{"children":[],"comments":"Returns the absolute value of a number.\n\n``` purescript\nabsoluteValue (-2) -- 2\nabsoluteValue 3 -- 3\n```\n","title":"absoluteValue","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Neon","Class","HasLess"],"HasLess"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"tag":"ConstrainedType","contents":[{"constraintClass":[["Neon","Class","HasSubtract"],"HasSubtract"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"tag":"ConstrainedType","contents":[{"constraintClass":[["Neon","Class","HasZero"],"HasZero"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"a"}]}]}]}]},null]}},"sourceSpan":{"start":[23,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Helper.purs","end":[23,95]}}]},{"moduleName":{"package":null,"item":["Neon","Operator"]},"declarations":[{"children":[],"comments":null,"title":"_subtract","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Neon","Class","HasSubtract"],"HasSubtract"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"a"}]}]}]},null]}},"sourceSpan":{"start":[207,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Operator.purs","end":[207,60]}},{"children":[],"comments":null,"title":"_remainder","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Neon","Class","HasRemainder"],"HasRemainder"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"a"}]}]}]},null]}},"sourceSpan":{"start":[201,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Operator.purs","end":[201,62]}},{"children":[],"comments":null,"title":"_power","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Neon","Class","HasPower"],"HasPower"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"a"}]}]}]},null]}},"sourceSpan":{"start":[192,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Operator.purs","end":[192,54]}},{"children":[],"comments":null,"title":"_or","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Neon","Class","HasOr"],"HasOr"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"a"}]}]}]},null]}},"sourceSpan":{"start":[231,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Operator.purs","end":[231,48]}},{"children":[],"comments":null,"title":"_notEqual","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Neon","Class","HasEqual"],"HasEqual"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}]}]},null]}},"sourceSpan":{"start":[213,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Operator.purs","end":[213,63]}},{"children":[],"comments":null,"title":"_multiply","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Neon","Class","HasMultiply"],"HasMultiply"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"a"}]}]}]},null]}},"sourceSpan":{"start":[195,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Operator.purs","end":[195,60]}},{"children":[],"comments":null,"title":"_lessOrEqual","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Neon","Class","HasEqual"],"HasEqual"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"tag":"ConstrainedType","contents":[{"constraintClass":[["Neon","Class","HasLess"],"HasLess"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}]}]}]},null]}},"sourceSpan":{"start":[225,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Operator.purs","end":[225,83]}},{"children":[],"comments":null,"title":"_less","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Neon","Class","HasLess"],"HasLess"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}]}]},null]}},"sourceSpan":{"start":[222,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Operator.purs","end":[222,58]}},{"children":[],"comments":null,"title":"_greaterOrEqual","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Neon","Class","HasEqual"],"HasEqual"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"tag":"ConstrainedType","contents":[{"constraintClass":[["Neon","Class","HasGreater"],"HasGreater"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}]}]}]},null]}},"sourceSpan":{"start":[219,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Operator.purs","end":[219,89]}},{"children":[],"comments":null,"title":"_greater","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Neon","Class","HasGreater"],"HasGreater"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}]}]},null]}},"sourceSpan":{"start":[216,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Operator.purs","end":[216,64]}},{"children":[],"comments":null,"title":"_equal","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Neon","Class","HasEqual"],"HasEqual"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}]}]},null]}},"sourceSpan":{"start":[210,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Operator.purs","end":[210,60]}},{"children":[],"comments":null,"title":"_divide","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Neon","Class","HasDivide"],"HasDivide"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"a"}]}]}]},null]}},"sourceSpan":{"start":[198,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Operator.purs","end":[198,56]}},{"children":[],"comments":null,"title":"_call","info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]},{"tag":"TypeVar","contents":"b"}]}]},null]},null]}},"sourceSpan":{"start":[189,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Operator.purs","end":[189,40]}},{"children":[],"comments":null,"title":"_and","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Neon","Class","HasAnd"],"HasAnd"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"a"}]}]}]},null]}},"sourceSpan":{"start":[228,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Operator.purs","end":[228,50]}},{"children":[],"comments":null,"title":"_add","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Neon","Class","HasAdd"],"HasAdd"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"a"}]}]}]},null]}},"sourceSpan":{"start":[204,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Operator.purs","end":[204,50]}},{"children":[],"comments":"Returns the logical disjunction of both arguments.\n\n``` purescript\nfalse || false -- false\nfalse || true -- true\n```\n","title":"(||)","info":{"declType":"alias","alias":[["Neon","Operator"],{"Right":{"Left":{"Ident":"_or"}}}],"fixity":{"associativity":"infixr","precedence":2}},"sourceSpan":{"start":[187,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Operator.purs","end":[187,19]}},{"children":[],"comments":"Raises a number to a power. This is exponentiation, *not* exclusive or\n(xor). In some JavaScript implementations, this would be `**`.\n\n``` purescript\n2 ^ 3 -- 8\n```\n\nThis operator is right-associative.\n\n``` purescript\n4 ^ 3 ^ 2 == 4 ^ (3 ^ 2) -- 262144\n```\n","title":"(^)","info":{"declType":"alias","alias":[["Neon","Operator"],{"Right":{"Left":{"Ident":"_power"}}}],"fixity":{"associativity":"infixr","precedence":7}},"sourceSpan":{"start":[76,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Operator.purs","end":[76,21]}},{"children":[],"comments":"Returns `true` if the left argument is greater than or equal to the right.\n\n``` purescript\n2 >= 1 -- true\n2 >= 2 -- true\n2 >= 3 -- false\n```\n","title":"(>=)","info":{"declType":"alias","alias":[["Neon","Operator"],{"Right":{"Left":{"Ident":"_greaterOrEqual"}}}],"fixity":{"associativity":"infix","precedence":4}},"sourceSpan":{"start":[153,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Operator.purs","end":[153,31]}},{"children":[],"comments":"Returns `true` if the left argument is greater than the right.\n\n``` purescript\n2 > 1 -- true\n2 > 2 -- false\n2 > 3 -- false\n```\n","title":"(>)","info":{"declType":"alias","alias":[["Neon","Operator"],{"Right":{"Left":{"Ident":"_greater"}}}],"fixity":{"associativity":"infix","precedence":4}},"sourceSpan":{"start":[144,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Operator.purs","end":[144,23]}},{"children":[],"comments":"Returns `true` if the two things are equal.\n\n``` purescript\n2 == 2 -- true\n2 == 3 -- false\n```\n","title":"(==)","info":{"declType":"alias","alias":[["Neon","Operator"],{"Right":{"Left":{"Ident":"_equal"}}}],"fixity":{"associativity":"infix","precedence":4}},"sourceSpan":{"start":[124,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Operator.purs","end":[124,22]}},{"children":[],"comments":"Returns `true` if the left argument is less than or equal to the right.\n\n``` purescript\n2 <= 1 -- false\n2 <= 2 -- true\n2 <= 3 -- true\n```\n","title":"(<=)","info":{"declType":"alias","alias":[["Neon","Operator"],{"Right":{"Left":{"Ident":"_lessOrEqual"}}}],"fixity":{"associativity":"infix","precedence":4}},"sourceSpan":{"start":[171,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Operator.purs","end":[171,28]}},{"children":[],"comments":"Returns `true` if the left argument is less than the right.\n\n``` purescript\n2 < 1 -- false\n2 < 2 -- false\n2 < 3 -- true\n```\n","title":"(<)","info":{"declType":"alias","alias":[["Neon","Operator"],{"Right":{"Left":{"Ident":"_less"}}}],"fixity":{"associativity":"infix","precedence":4}},"sourceSpan":{"start":[162,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Operator.purs","end":[162,20]}},{"children":[],"comments":"Passes an argument to a function. This is reversed function application.\nSince every function in Neon takes its \"subject\" last, it can be useful to\nthink of this operator like `.` in object-oriented languages.\n\n``` purescript\n'a' :toUpper == toUpper 'a' -- \"A\"\n\"ab\" :add \"cd\" == add \"cd\" \"ab\" -- \"abcd\"\n```\n\nThis operator has the highest precedence so that it can be combined with\nother operators.\n\n``` purescript\n1.2 :round + 3 == (1.2 :round) + 3 -- 4\n```\n\nThis operator is left associative. It is designed to be chained together.\n\n``` purescript\n'a' :toUpper :add \"bc\" :add \"de\" -- \"abcde\"\n```\n","title":"(:)","info":{"declType":"alias","alias":[["Neon","Operator"],{"Right":{"Left":{"Ident":"_call"}}}],"fixity":{"associativity":"infixl","precedence":8}},"sourceSpan":{"start":[62,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Operator.purs","end":[62,20]}},{"children":[],"comments":"Divides a number by another number.\n\n``` purescript\n4 / 2 -- 2\n5 / 2 -- 2\n5.0 / 2.0 -- 2.5\n```\n","title":"(/)","info":{"declType":"alias","alias":[["Neon","Operator"],{"Right":{"Left":{"Ident":"_divide"}}}],"fixity":{"associativity":"infixl","precedence":6}},"sourceSpan":{"start":[92,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Operator.purs","end":[92,22]}},{"children":[],"comments":"Subtracts one number from another.\n\n``` purescript\n3 - 2 -- 1\n```\n","title":"(-)","info":{"declType":"alias","alias":[["Neon","Operator"],{"Right":{"Left":{"Ident":"_subtract"}}}],"fixity":{"associativity":"infixl","precedence":5}},"sourceSpan":{"start":[116,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Operator.purs","end":[116,24]}},{"children":[],"comments":"Adds two numbers together.\n\n``` purescript\n2 + 3 -- 5\n```\n","title":"(+)","info":{"declType":"alias","alias":[["Neon","Operator"],{"Right":{"Left":{"Ident":"_add"}}}],"fixity":{"associativity":"infixl","precedence":5}},"sourceSpan":{"start":[109,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Operator.purs","end":[109,19]}},{"children":[],"comments":"Multiplies two numbers together.\n\n``` purescript\n2 * 3 -- 6\n```\n","title":"(*)","info":{"declType":"alias","alias":[["Neon","Operator"],{"Right":{"Left":{"Ident":"_multiply"}}}],"fixity":{"associativity":"infixl","precedence":6}},"sourceSpan":{"start":[83,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Operator.purs","end":[83,24]}},{"children":[],"comments":"Returns the logical conjunction of both arguments.\n\n``` purescript\ntrue && false -- false\ntrue && true -- true\n```\n","title":"(&&)","info":{"declType":"alias","alias":[["Neon","Operator"],{"Right":{"Left":{"Ident":"_and"}}}],"fixity":{"associativity":"infixr","precedence":3}},"sourceSpan":{"start":[179,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Operator.purs","end":[179,20]}},{"children":[],"comments":"Finds the remainder after division.\n\n``` purescript\n4 % 2 -- 0\n5 % 2 -- 1\n5.0 % 2.0 -- 1.0\n5.5 % 2.5 -- 0.5\n```\n","title":"(%)","info":{"declType":"alias","alias":[["Neon","Operator"],{"Right":{"Left":{"Ident":"_remainder"}}}],"fixity":{"associativity":"infixl","precedence":6}},"sourceSpan":{"start":[102,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Operator.purs","end":[102,25]}},{"children":[],"comments":"Returns `true` if the two things are not equal.\n\n``` purescript\n2 != 3 -- true\n2 != 2 -- false\n```\n\nNote that this is different than the `Prelude`, which uses `/=` for\ninequality.\n","title":"(!=)","info":{"declType":"alias","alias":[["Neon","Operator"],{"Right":{"Left":{"Ident":"_notEqual"}}}],"fixity":{"associativity":"infix","precedence":4}},"sourceSpan":{"start":[135,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Operator.purs","end":[135,25]}}]},{"moduleName":{"package":null,"item":["Neon","Primitive"]},"declarations":[{"children":[],"comments":"Converts a character to upper case.\n\n``` purescript\ntoUpper 'a' -- 'A'\ntoUpper 'A' -- 'A'\n```\n","title":"toUpper","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Char"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Char"]}]}},"sourceSpan":{"start":[29,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Primitive/Char.purs","end":[29,24]}},{"children":[],"comments":"Converts a character into a string.\n\n``` purescript\ntoString 'a' -- \"a\"\n```\n","title":"toString","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Char"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}},"sourceSpan":{"start":[20,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Primitive/Char.purs","end":[20,27]}},{"children":[],"comments":"Converts an integer into a number.\n\n``` purescript\ntoNumber 1 -- 1.0\n```\n","title":"toNumber","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]}},"sourceSpan":{"start":[10,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Primitive/Int.purs","end":[10,26]}},{"children":[],"comments":"Converts a character to lower case.\n\n``` purescript\ntoLower 'A' -- 'a'\ntoLower 'a' -- 'a'\n```\n","title":"toLower","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Char"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Char"]}]}},"sourceSpan":{"start":[12,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Primitive/Char.purs","end":[12,24]}},{"children":[],"comments":"Rounds a number to the nearest integer.\n\n``` purescript\nround 1.4 -- 1\nround 1.6 -- 2\nround 1.5 -- 2\nround 2.5 -- 3\n```\n","title":"round","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}},"sourceSpan":{"start":[59,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Primitive/Number.purs","end":[59,23]}},{"children":[],"comments":"An alias for `NaN` from JavaScript.\n","title":"nan","info":{"declType":"value","type":{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}},"sourceSpan":{"start":[48,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Primitive/Number.purs","end":[48,14]}},{"children":[],"comments":"An alias for `Infinity` from JavaScript.\n","title":"infinity","info":{"declType":"value","type":{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}},"sourceSpan":{"start":[44,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Primitive/Number.purs","end":[44,19]}},{"children":[],"comments":"Returns the value it was given.\n\n``` purescript\nidentity 1 -- 1\n```\nThis is the [identity function](https://en.wikipedia.org/wiki/Identity_function).\n","title":"identity","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"a"}]},null]}},"sourceSpan":{"start":[42,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Primitive/Function.purs","end":[42,29]}},{"children":[],"comments":"Rounds a number down.\n\n``` purescript\nfloor 1.9 -- 1\n```\n","title":"floor","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}},"sourceSpan":{"start":[40,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Primitive/Number.purs","end":[40,23]}},{"children":[],"comments":"Flips the first two arguments of a function.\n\n``` purescript\n\"a\" :add \"b\" -- \"ab\"\n\"a\" :flip add \"b\" -- \"ba\"\n```\n","title":"flip","info":{"declType":"value","type":{"tag":"ForAll","contents":["c",{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeVar","contents":"c"}]}]}}]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"c"}]}]}}]},null]},null]},null]}},"sourceSpan":{"start":[33,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Primitive/Function.purs","end":[33,53]}},{"children":[],"comments":"Tests whether a number is finite or not.\n\n``` purescript\nfinite 1.0 -- true\nfinite infinity -- false\n```\n","title":"finite","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}},"sourceSpan":{"start":[32,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Primitive/Number.purs","end":[32,28]}},{"children":[],"comments":"Returns a new function that calls the first function with the result of\ncalling the second.\n\n``` purescript\nlet addTwo x = x + 2\nlet double x = x * 2\nlet addTwoThenDouble x = addTwo :compose double\naddTwoThenDouble 3 -- 10\n```\n\nThis is [function composition](https://en.wikipedia.org/wiki/Function_composition_(computer_science)).\n","title":"compose","info":{"declType":"value","type":{"tag":"ForAll","contents":["c",{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeVar","contents":"c"}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"c"}]}}]}]},null]},null]},null]}},"sourceSpan":{"start":[24,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Primitive/Function.purs","end":[24,58]}},{"children":[],"comments":"Rounds a number up.\n\n``` purescript\nceiling 1.1 -- 2\n```\n","title":"ceiling","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}},"sourceSpan":{"start":[23,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Primitive/Number.purs","end":[23,25]}},{"children":[],"comments":"Always returns the first argument.\n\n``` purescript\n\"anything\" :always 1 -- 1\n```\n\nThis is the [constant function](https://en.wikipedia.org/wiki/Constant_function).\n","title":"always","info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeVar","contents":"a"}]}]},null]},null]}},"sourceSpan":{"start":[10,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Primitive/Function.purs","end":[10,34]}},{"children":[],"comments":"Tests if a number is a valid number. Returns false if the number is `nan`.\nThis is necessary because `nan` does not equal itself.\n\n``` purescript\naNumber 1.0 -- true\naNumber nan -- false\nnan == nan -- false\n```\n","title":"aNumber","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}},"sourceSpan":{"start":[15,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Primitive/Number.purs","end":[15,29]}}]}],"name":"Neon","comments":"This is the top-level entry point into Neon. Typically to use Neon you\nwould simply import this unqualified.\n\n``` purescript\nimport Neon\n```\n\nIf you want to avoid namespace collisions, you can import Neon qualified.\nIt is a good idea to still import the operators unqualified, otherwise it\nwill be annoying to use.\n\n``` purescript\nimport Neon as N\nimport Neon.Operator\n```\n\nHere is an overview of the re-exported modules:\n\n- Primitive: Functions for stuff built into PureScript, like `Number`.\n  This is for basics like converting between numeric types.\n- Data: Re-exports from other libraries. Neon does not define any of its\n  own data types.\n- Effect: More re-exports. Neon also does not define any of its own effect\n  types.\n- Class: This is why Neon exists. These classes are what separate Neon\n  from the `Prelude`.\n- Helper: Things built on top of everything else. These are all nice to\n  have but can be derived from simpler things.\n- Operator: A handful of operators for doing common tasks. Neon doesn't go\n  overboard with operators like many other PureScript libraries.\n\nAll of Neon's documentation assumes you are familiar with the `:`\noperator. If you aren't, you should start by reading its documentation.\n","declarations":[]},{"reExports":[{"moduleName":{"package":null,"item":["Neon","Class","HasAdd"]},"declarations":[{"children":[{"comments":null,"title":"add","info":{"declType":"typeClassMember","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[14,3],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasAdd.purs","end":[14,21]}},{"comments":null,"title":"arrayHasAdd","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasAdd"],"HasAdd"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[16,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasAdd.purs","end":[16,41]}},{"comments":null,"title":"booleanHasAdd","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasAdd"],"HasAdd"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}},"sourceSpan":{"start":[19,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasAdd.purs","end":[19,37]}},{"comments":null,"title":"listHasAdd","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasAdd"],"HasAdd"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","List","Types"],"List"]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[22,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasAdd.purs","end":[22,44]}},{"comments":null,"title":"numberHasAdd","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasAdd"],"HasAdd"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]}},"sourceSpan":{"start":[25,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasAdd.purs","end":[25,39]}},{"comments":null,"title":"orderingHasAdd","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasAdd"],"HasAdd"]},{"tag":"TypeConstructor","contents":[["Data","Ordering"],"Ordering"]}]}},"sourceSpan":{"start":[28,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasAdd.purs","end":[28,48]}},{"comments":null,"title":"stringHasAdd","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasAdd"],"HasAdd"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}},"sourceSpan":{"start":[31,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasAdd.purs","end":[31,39]}}],"comments":"Represents types that can be added together. This is also known as a\n[semigroup](https://en.wikipedia.org/wiki/Semigroup).\n\n``` purescript\n2 :add 1 -- 3\n\"a\" :add \"b\" -- \"ab\"\n```\n","title":"HasAdd","info":{"fundeps":[],"arguments":[["a",null]],"declType":"typeClass","superclasses":[]},"sourceSpan":{"start":[13,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasAdd.purs","end":[14,21]}}]},{"moduleName":{"package":null,"item":["Neon","Class","HasAnd"]},"declarations":[{"children":[{"comments":null,"title":"and","info":{"declType":"typeClassMember","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[40,3],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasAnd.purs","end":[40,21]}},{"comments":null,"title":"arrayHasAnd","info":{"declType":"instance","dependencies":[{"constraintClass":[["Neon","Class","HasEqual"],"HasEqual"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasAnd"],"HasAnd"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[42,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasAnd.purs","end":[42,66]}},{"comments":null,"title":"booleanHasAnd","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasAnd"],"HasAnd"]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}},"sourceSpan":{"start":[45,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasAnd.purs","end":[45,41]}},{"comments":null,"title":"functionHasAnd","info":{"declType":"instance","dependencies":[{"constraintClass":[["Neon","Class","HasAnd"],"HasAnd"],"constraintArgs":[{"tag":"TypeVar","contents":"b"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasAnd"],"HasAnd"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]}},"sourceSpan":{"start":[48,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasAnd.purs","end":[48,57]}},{"comments":null,"title":"intHasAnd","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasAnd"],"HasAnd"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}},"sourceSpan":{"start":[51,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasAnd.purs","end":[51,33]}},{"comments":null,"title":"listHasAnd","info":{"declType":"instance","dependencies":[{"constraintClass":[["Neon","Class","HasEqual"],"HasEqual"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasAnd"],"HasAnd"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","List","Types"],"List"]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[54,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasAnd.purs","end":[54,69]}}],"comments":"Represents types that can be conjoined. This is also known as\n[logical conjunction](https://en.wikipedia.org/wiki/Logical_conjunction).\n\n``` purescript\ntrue :and false -- false\n```\n\nSome types can't be conjoined per se but it is still useful to be able to\nuse the `&&` operator with them. For example, you can `and` two arrays\ntogether to get their intersection.\n\n``` purescript\n[1, 2, 3] :and [2, 3, 4] -- [2, 3]\n```\n\nFor integers, `and` is bitwise.\n\n``` purescript\n5 :and 3 -- 3\n```\n\nThe instance for functions is perhaps the hardest to understand. Combining\ntwo functions with `and` returns a new function that calls each function\nand then `and`s the results together.\n\n``` purescript\neven :and odd -- \\ x -> (even x) :and (odd x)\n(even :and odd) 3 -- false\n```\n","title":"HasAnd","info":{"fundeps":[],"arguments":[["a",null]],"declType":"typeClass","superclasses":[]},"sourceSpan":{"start":[39,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasAnd.purs","end":[40,21]}}]},{"moduleName":{"package":null,"item":["Neon","Class","HasApply"]},"declarations":[{"children":[{"comments":null,"title":"apply","info":{"declType":"typeClassMember","type":{"tag":"ForAll","contents":["c",{"tag":"ForAll","contents":["b",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"a"},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeVar","contents":"c"}]}}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"a"},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"a"},{"tag":"TypeVar","contents":"c"}]}]}]},null]},null]}},"sourceSpan":{"start":[17,3],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasApply.purs","end":[17,48]}},{"comments":null,"title":"arrayHasApply","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasApply"],"HasApply"]},{"tag":"TypeConstructor","contents":[["Prim"],"Array"]}]}},"sourceSpan":{"start":[19,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasApply.purs","end":[19,41]}},{"comments":null,"title":"effHasApply","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasApply"],"HasApply"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad","Eff"],"Eff"]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[22,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasApply.purs","end":[22,48]}},{"comments":null,"title":"listHasApply","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasApply"],"HasApply"]},{"tag":"TypeConstructor","contents":[["Data","List","Types"],"List"]}]}},"sourceSpan":{"start":[25,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasApply.purs","end":[25,44]}},{"comments":null,"title":"maybeHasApply","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasApply"],"HasApply"]},{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]}]}},"sourceSpan":{"start":[28,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasApply.purs","end":[28,46]}}],"comments":"Represents types that can be applied from within a container. In other\nwords, given both a function and a value in a container, apply the\nfunction to the value and return the result in a container. This is also\nknown as an applicative functor.\n\n``` purescript\n[3, 4] :apply [(_ + 2), (_ * 2)] -- [5, 6, 6, 8]\nJust 2 :apply (Just (_ + 1)) -- Just 3\n```\n","title":"HasApply","info":{"fundeps":[],"arguments":[["a",null]],"declType":"typeClass","superclasses":[]},"sourceSpan":{"start":[16,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasApply.purs","end":[17,48]}}]},{"moduleName":{"package":null,"item":["Neon","Class","HasBottom"]},"declarations":[{"children":[{"comments":null,"title":"bottom","info":{"declType":"typeClassMember","type":{"tag":"TypeVar","contents":"a"}},"sourceSpan":{"start":[14,3],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasBottom.purs","end":[14,14]}},{"comments":null,"title":"booleanHasBottom","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasBottom"],"HasBottom"]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}},"sourceSpan":{"start":[16,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasBottom.purs","end":[16,47]}},{"comments":null,"title":"charHasBottom","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasBottom"],"HasBottom"]},{"tag":"TypeConstructor","contents":[["Prim"],"Char"]}]}},"sourceSpan":{"start":[19,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasBottom.purs","end":[19,41]}},{"comments":null,"title":"intHasBottom","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasBottom"],"HasBottom"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}},"sourceSpan":{"start":[22,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasBottom.purs","end":[22,39]}},{"comments":null,"title":"numberHasBottom","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasBottom"],"HasBottom"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]}},"sourceSpan":{"start":[25,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasBottom.purs","end":[25,45]}},{"comments":null,"title":"orderingHasBottom","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasBottom"],"HasBottom"]},{"tag":"TypeConstructor","contents":[["Data","Ordering"],"Ordering"]}]}},"sourceSpan":{"start":[28,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasBottom.purs","end":[28,54]}}],"comments":"Represents types that have a lower bound.\n\n``` purescript\nbottom :: Boolean -- false\nbottom :: Char -- '\\0'\n```\n","title":"HasBottom","info":{"fundeps":[],"arguments":[["a",null]],"declType":"typeClass","superclasses":[]},"sourceSpan":{"start":[13,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasBottom.purs","end":[14,14]}}]},{"moduleName":{"package":null,"item":["Neon","Class","HasChain"]},"declarations":[{"children":[{"comments":null,"title":"chain","info":{"declType":"typeClassMember","type":{"tag":"ForAll","contents":["c",{"tag":"ForAll","contents":["b",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"a"},{"tag":"TypeVar","contents":"c"}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"a"},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"a"},{"tag":"TypeVar","contents":"c"}]}]}]},null]},null]}},"sourceSpan":{"start":[14,3],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasChain.purs","end":[14,48]}},{"comments":null,"title":"arrayHasChain","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasChain"],"HasChain"]},{"tag":"TypeConstructor","contents":[["Prim"],"Array"]}]}},"sourceSpan":{"start":[16,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasChain.purs","end":[16,41]}},{"comments":null,"title":"effHasChain","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasChain"],"HasChain"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad","Eff"],"Eff"]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[19,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasChain.purs","end":[19,48]}},{"comments":null,"title":"listHasChain","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasChain"],"HasChain"]},{"tag":"TypeConstructor","contents":[["Data","List","Types"],"List"]}]}},"sourceSpan":{"start":[22,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasChain.purs","end":[22,44]}},{"comments":null,"title":"maybeHasChain","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasChain"],"HasChain"]},{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]}]}},"sourceSpan":{"start":[25,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasChain.purs","end":[25,46]}}],"comments":"Represents types that can express sequential actions. This is also known\nas a [monad](https://en.wikipedia.org/wiki/Monad_(functional_programming)).\n\n``` purescript\n[3, 5] :chain (\\ x -> [x, x * 2]) -- [3, 6, 5, 10]\n```\n","title":"HasChain","info":{"fundeps":[],"arguments":[["a",null]],"declType":"typeClass","superclasses":[]},"sourceSpan":{"start":[13,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasChain.purs","end":[14,48]}}]},{"moduleName":{"package":null,"item":["Neon","Class","HasCompare"]},"declarations":[{"children":[{"comments":null,"title":"compare","info":{"declType":"typeClassMember","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeConstructor","contents":[["Data","Ordering"],"Ordering"]}]}]}},"sourceSpan":{"start":[17,3],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasCompare.purs","end":[17,37]}},{"comments":null,"title":"arrayHasCompare","info":{"declType":"instance","dependencies":[{"constraintClass":[["Neon","Class","HasCompare"],"HasCompare"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasCompare"],"HasCompare"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[19,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasCompare.purs","end":[19,67]}},{"comments":null,"title":"booleanHasCompare","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasCompare"],"HasCompare"]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}},"sourceSpan":{"start":[24,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasCompare.purs","end":[24,49]}},{"comments":null,"title":"charHasCompare","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasCompare"],"HasCompare"]},{"tag":"TypeConstructor","contents":[["Prim"],"Char"]}]}},"sourceSpan":{"start":[27,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasCompare.purs","end":[27,43]}},{"comments":null,"title":"intHasCompare","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasCompare"],"HasCompare"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}},"sourceSpan":{"start":[30,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasCompare.purs","end":[30,41]}},{"comments":null,"title":"listHasCompare","info":{"declType":"instance","dependencies":[{"constraintClass":[["Neon","Class","HasCompare"],"HasCompare"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasCompare"],"HasCompare"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","List","Types"],"List"]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[33,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasCompare.purs","end":[33,70]}},{"comments":null,"title":"numberHasCompare","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasCompare"],"HasCompare"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]}},"sourceSpan":{"start":[43,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasCompare.purs","end":[43,47]}},{"comments":null,"title":"orderingHasCompare","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasCompare"],"HasCompare"]},{"tag":"TypeConstructor","contents":[["Data","Ordering"],"Ordering"]}]}},"sourceSpan":{"start":[46,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasCompare.purs","end":[46,56]}},{"comments":null,"title":"stringHasCompare","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasCompare"],"HasCompare"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}},"sourceSpan":{"start":[49,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasCompare.purs","end":[49,47]}}],"comments":"Represents type that have a [total order](https://en.wikipedia.org/wiki/Total_order).\n\n``` purescript\n2 :compare 1 -- GT\n2 :compare 2 -- EQ\n2 :compare 3 -- LT\n```\n","title":"HasCompare","info":{"fundeps":[],"arguments":[["a",null]],"declType":"typeClass","superclasses":[{"constraintClass":[["Neon","Class","HasEqual"],"HasEqual"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"constraintClass":[["Neon","Class","HasGreater"],"HasGreater"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"constraintClass":[["Neon","Class","HasLess"],"HasLess"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}]},"sourceSpan":{"start":[16,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasCompare.purs","end":[17,37]}}]},{"moduleName":{"package":null,"item":["Neon","Class","HasDivide"]},"declarations":[{"children":[{"comments":null,"title":"divide","info":{"declType":"typeClassMember","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[12,3],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasDivide.purs","end":[12,24]}},{"comments":null,"title":"intHasDivide","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasDivide"],"HasDivide"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}},"sourceSpan":{"start":[14,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasDivide.purs","end":[14,39]}},{"comments":null,"title":"numberHasDivide","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasDivide"],"HasDivide"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]}},"sourceSpan":{"start":[17,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasDivide.purs","end":[17,45]}}],"comments":"Represents types that are divisible.\n\n``` purescript\n7 :divide 2 -- 3\n7.0 :divide 2.0 -- 3.5\n```\n","title":"HasDivide","info":{"fundeps":[],"arguments":[["a",null]],"declType":"typeClass","superclasses":[]},"sourceSpan":{"start":[11,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasDivide.purs","end":[12,24]}}]},{"moduleName":{"package":null,"item":["Neon","Class","HasEqual"]},"declarations":[{"children":[{"comments":null,"title":"equal","info":{"declType":"typeClassMember","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}]}},"sourceSpan":{"start":[16,3],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasEqual.purs","end":[16,29]}},{"comments":null,"title":"arrayHasEqual","info":{"declType":"instance","dependencies":[{"constraintClass":[["Neon","Class","HasEqual"],"HasEqual"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasEqual"],"HasEqual"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[18,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasEqual.purs","end":[18,61]}},{"comments":null,"title":"booleanHasEqual","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasEqual"],"HasEqual"]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}},"sourceSpan":{"start":[23,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasEqual.purs","end":[23,45]}},{"comments":null,"title":"charHasEqual","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasEqual"],"HasEqual"]},{"tag":"TypeConstructor","contents":[["Prim"],"Char"]}]}},"sourceSpan":{"start":[26,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasEqual.purs","end":[26,39]}},{"comments":null,"title":"intHasEqual","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasEqual"],"HasEqual"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}},"sourceSpan":{"start":[29,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasEqual.purs","end":[29,37]}},{"comments":null,"title":"listHasEqual","info":{"declType":"instance","dependencies":[{"constraintClass":[["Neon","Class","HasEqual"],"HasEqual"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasEqual"],"HasEqual"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","List","Types"],"List"]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[32,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasEqual.purs","end":[32,64]}},{"comments":null,"title":"numberHasEqual","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasEqual"],"HasEqual"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]}},"sourceSpan":{"start":[37,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasEqual.purs","end":[37,43]}},{"comments":null,"title":"orderingHasEqual","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasEqual"],"HasEqual"]},{"tag":"TypeConstructor","contents":[["Data","Ordering"],"Ordering"]}]}},"sourceSpan":{"start":[40,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasEqual.purs","end":[40,52]}},{"comments":null,"title":"stringHasEqual","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasEqual"],"HasEqual"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}},"sourceSpan":{"start":[43,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasEqual.purs","end":[43,43]}},{"comments":null,"title":"unitHasEqual","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasEqual"],"HasEqual"]},{"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}},"sourceSpan":{"start":[46,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasEqual.purs","end":[46,44]}}],"comments":"Represents types that can be equal to each other.\n\n``` purescript\nequal 1 2 -- false\nequal 3 3 -- true\n```\n","title":"HasEqual","info":{"fundeps":[],"arguments":[["a",null]],"declType":"typeClass","superclasses":[]},"sourceSpan":{"start":[15,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasEqual.purs","end":[16,29]}}]},{"moduleName":{"package":null,"item":["Neon","Class","HasFilter"]},"declarations":[{"children":[{"comments":null,"title":"filter","info":{"declType":"typeClassMember","type":{"tag":"ForAll","contents":["b",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"a"},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"a"},{"tag":"TypeVar","contents":"b"}]}]}]},null]}},"sourceSpan":{"start":[13,3],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasFilter.purs","end":[13,51]}},{"comments":null,"title":"arrayHasFilter","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasFilter"],"HasFilter"]},{"tag":"TypeConstructor","contents":[["Prim"],"Array"]}]}},"sourceSpan":{"start":[15,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasFilter.purs","end":[15,43]}},{"comments":null,"title":"listHasFilter","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasFilter"],"HasFilter"]},{"tag":"TypeConstructor","contents":[["Data","List","Types"],"List"]}]}},"sourceSpan":{"start":[18,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasFilter.purs","end":[18,46]}}],"comments":"Represents types that can have elements filtered out of them.\n\n``` purescript\n[1, 2, 3, 4] :filter (_ > 2) -- [3, 4]\n```\n","title":"HasFilter","info":{"fundeps":[],"arguments":[["a",null]],"declType":"typeClass","superclasses":[]},"sourceSpan":{"start":[12,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasFilter.purs","end":[13,51]}}]},{"moduleName":{"package":null,"item":["Neon","Class","HasFromArray"]},"declarations":[{"children":[{"comments":null,"title":"fromArray","info":{"declType":"typeClassMember","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeVar","contents":"b"}]}},"sourceSpan":{"start":[16,3],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasFromArray.purs","end":[16,28]}},{"comments":null,"title":"arrayHasFromArray","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasFromArray"],"HasFromArray"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[18,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasFromArray.purs","end":[18,55]}},{"comments":null,"title":"listHasFromArray","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasFromArray"],"HasFromArray"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","List","Types"],"List"]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[21,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasFromArray.purs","end":[21,58]}},{"comments":null,"title":"maybeHasFromArray","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasFromArray"],"HasFromArray"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[24,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasFromArray.purs","end":[24,60]}},{"comments":null,"title":"stringHasFromArray","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasFromArray"],"HasFromArray"]},{"tag":"TypeConstructor","contents":[["Prim"],"Char"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}},"sourceSpan":{"start":[27,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasFromArray.purs","end":[27,56]}}],"comments":"Represents types that can be converted from an array.\n\n``` purescript\nfromArray [1] :: List Int -- Cons 1 Nil\nfromArray [1] :: Maybe Int -- Just 1\nfromArray ['a', 'b'] :: String -- \"ab\"\n```\n","title":"HasFromArray","info":{"fundeps":[],"arguments":[["a",null],["b",null]],"declType":"typeClass","superclasses":[]},"sourceSpan":{"start":[15,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasFromArray.purs","end":[16,28]}}]},{"moduleName":{"package":null,"item":["Neon","Class","HasFromInt"]},"declarations":[{"children":[{"comments":null,"title":"fromInt","info":{"declType":"typeClassMember","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[14,3],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasFromInt.purs","end":[14,33]}},{"comments":null,"title":"booleanHasFromInt","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasFromInt"],"HasFromInt"]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}},"sourceSpan":{"start":[16,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasFromInt.purs","end":[16,49]}},{"comments":null,"title":"charHasFromInt","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasFromInt"],"HasFromInt"]},{"tag":"TypeConstructor","contents":[["Prim"],"Char"]}]}},"sourceSpan":{"start":[19,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasFromInt.purs","end":[19,43]}},{"comments":null,"title":"intHasFromInt","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasFromInt"],"HasFromInt"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}},"sourceSpan":{"start":[22,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasFromInt.purs","end":[22,41]}},{"comments":null,"title":"orderingHasFromInt","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasFromInt"],"HasFromInt"]},{"tag":"TypeConstructor","contents":[["Data","Ordering"],"Ordering"]}]}},"sourceSpan":{"start":[25,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasFromInt.purs","end":[25,56]}}],"comments":"Represents types that can be converted from integers. This is typically\nused for enumerations.\n\n``` purescript\nfromInt 1 :: Maybe Bool -- Just true\nfromInt 2 :: Maybe Bool -- Nothing\n```\n","title":"HasFromInt","info":{"fundeps":[],"arguments":[["a",null]],"declType":"typeClass","superclasses":[]},"sourceSpan":{"start":[13,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasFromInt.purs","end":[14,33]}}]},{"moduleName":{"package":null,"item":["Neon","Class","HasGreater"]},"declarations":[{"children":[{"comments":null,"title":"greater","info":{"declType":"typeClassMember","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}]}},"sourceSpan":{"start":[15,3],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasGreater.purs","end":[15,31]}},{"comments":null,"title":"arrayHasGreater","info":{"declType":"instance","dependencies":[{"constraintClass":[["Neon","Class","HasEqual"],"HasEqual"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"constraintClass":[["Neon","Class","HasGreater"],"HasGreater"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasGreater"],"HasGreater"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[17,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasGreater.purs","end":[17,88]}},{"comments":null,"title":"booleanHasGreater","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasGreater"],"HasGreater"]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}},"sourceSpan":{"start":[22,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasGreater.purs","end":[22,49]}},{"comments":null,"title":"charHasGreater","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasGreater"],"HasGreater"]},{"tag":"TypeConstructor","contents":[["Prim"],"Char"]}]}},"sourceSpan":{"start":[25,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasGreater.purs","end":[25,43]}},{"comments":null,"title":"intHasGreater","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasGreater"],"HasGreater"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}},"sourceSpan":{"start":[28,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasGreater.purs","end":[28,41]}},{"comments":null,"title":"listHasGreater","info":{"declType":"instance","dependencies":[{"constraintClass":[["Neon","Class","HasEqual"],"HasEqual"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"constraintClass":[["Neon","Class","HasGreater"],"HasGreater"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasGreater"],"HasGreater"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","List","Types"],"List"]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[31,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasGreater.purs","end":[31,91]}},{"comments":null,"title":"numberHasGreater","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasGreater"],"HasGreater"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]}},"sourceSpan":{"start":[39,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasGreater.purs","end":[39,47]}},{"comments":null,"title":"orderingHasGreater","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasGreater"],"HasGreater"]},{"tag":"TypeConstructor","contents":[["Data","Ordering"],"Ordering"]}]}},"sourceSpan":{"start":[42,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasGreater.purs","end":[42,56]}},{"comments":null,"title":"stringHasGreater","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasGreater"],"HasGreater"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}},"sourceSpan":{"start":[45,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasGreater.purs","end":[45,47]}}],"comments":"Represents types where one value can be greater than another.\n\n``` purescript\n2 :greater 1 -- true\n1 :greater 2 -- false\n```\n","title":"HasGreater","info":{"fundeps":[],"arguments":[["a",null]],"declType":"typeClass","superclasses":[]},"sourceSpan":{"start":[14,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasGreater.purs","end":[15,31]}}]},{"moduleName":{"package":null,"item":["Neon","Class","HasInspect"]},"declarations":[{"children":[{"comments":null,"title":"inspect","info":{"declType":"typeClassMember","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}},"sourceSpan":{"start":[25,3],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasInspect.purs","end":[25,25]}},{"comments":null,"title":"arrayHasInspect","info":{"declType":"instance","dependencies":[{"constraintClass":[["Neon","Class","HasInspect"],"HasInspect"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasInspect"],"HasInspect"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[27,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasInspect.purs","end":[27,67]}},{"comments":null,"title":"booleanHasInspect","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasInspect"],"HasInspect"]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}},"sourceSpan":{"start":[33,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasInspect.purs","end":[33,49]}},{"comments":null,"title":"charHasInspect","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasInspect"],"HasInspect"]},{"tag":"TypeConstructor","contents":[["Prim"],"Char"]}]}},"sourceSpan":{"start":[36,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasInspect.purs","end":[36,43]}},{"comments":null,"title":"errorHasInspect","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasInspect"],"HasInspect"]},{"tag":"TypeConstructor","contents":[["Control","Monad","Eff","Exception"],"Error"]}]}},"sourceSpan":{"start":[39,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasInspect.purs","end":[39,50]}},{"comments":null,"title":"functionHasInspect","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasInspect"],"HasInspect"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]}},"sourceSpan":{"start":[42,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasInspect.purs","end":[42,51]}},{"comments":null,"title":"intHasInspect","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasInspect"],"HasInspect"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}},"sourceSpan":{"start":[45,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasInspect.purs","end":[45,41]}},{"comments":null,"title":"listHasInspect","info":{"declType":"instance","dependencies":[{"constraintClass":[["Neon","Class","HasInspect"],"HasInspect"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasInspect"],"HasInspect"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","List","Types"],"List"]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[48,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasInspect.purs","end":[48,70]}},{"comments":null,"title":"numberHasInspect","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasInspect"],"HasInspect"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]}},"sourceSpan":{"start":[54,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasInspect.purs","end":[54,47]}},{"comments":null,"title":"objectHasInspect","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasInspect"],"HasInspect"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Record"]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[57,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasInspect.purs","end":[57,48]}},{"comments":null,"title":"orderingHasInspect","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasInspect"],"HasInspect"]},{"tag":"TypeConstructor","contents":[["Data","Ordering"],"Ordering"]}]}},"sourceSpan":{"start":[60,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasInspect.purs","end":[60,56]}},{"comments":null,"title":"proxyHasInspect","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasInspect"],"HasInspect"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Type","Proxy"],"Proxy"]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[63,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasInspect.purs","end":[63,54]}},{"comments":null,"title":"stringHasInspect","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasInspect"],"HasInspect"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}},"sourceSpan":{"start":[66,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasInspect.purs","end":[66,47]}},{"comments":null,"title":"unitHasInspect","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasInspect"],"HasInspect"]},{"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}},"sourceSpan":{"start":[69,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasInspect.purs","end":[69,48]}}],"comments":"Represents types that can be converting to a string. This is typically\nused for debugging. The result of `inspect x` should be a valid PureScript\nexpression.\n\n``` purescript\ninspect 123 -- \"123\"\ninspect (Just 123) -- \"Just (123)\"\n```\n\nThe instance for functions and objects do not return valid expressions.\nThis is because there is no way in general to generate an expression for\nthem.\n\n``` purescript\ninspect identity -- \"{- Function -}\"\ninspect {} -- \"{- Object -}\"\n```\n","title":"HasInspect","info":{"fundeps":[],"arguments":[["a",null]],"declType":"typeClass","superclasses":[]},"sourceSpan":{"start":[24,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasInspect.purs","end":[25,25]}}]},{"moduleName":{"package":null,"item":["Neon","Class","HasLess"]},"declarations":[{"children":[{"comments":null,"title":"less","info":{"declType":"typeClassMember","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}]}},"sourceSpan":{"start":[15,3],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasLess.purs","end":[15,28]}},{"comments":null,"title":"arrayHasLess","info":{"declType":"instance","dependencies":[{"constraintClass":[["Neon","Class","HasEqual"],"HasEqual"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"constraintClass":[["Neon","Class","HasLess"],"HasLess"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasLess"],"HasLess"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[17,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasLess.purs","end":[17,79]}},{"comments":null,"title":"booleanHasLess","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasLess"],"HasLess"]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}},"sourceSpan":{"start":[22,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasLess.purs","end":[22,43]}},{"comments":null,"title":"charHasLess","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasLess"],"HasLess"]},{"tag":"TypeConstructor","contents":[["Prim"],"Char"]}]}},"sourceSpan":{"start":[25,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasLess.purs","end":[25,37]}},{"comments":null,"title":"intHasLess","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasLess"],"HasLess"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}},"sourceSpan":{"start":[28,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasLess.purs","end":[28,35]}},{"comments":null,"title":"listHasLess","info":{"declType":"instance","dependencies":[{"constraintClass":[["Neon","Class","HasEqual"],"HasEqual"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"constraintClass":[["Neon","Class","HasLess"],"HasLess"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasLess"],"HasLess"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","List","Types"],"List"]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[31,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasLess.purs","end":[31,82]}},{"comments":null,"title":"numberHasLess","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasLess"],"HasLess"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]}},"sourceSpan":{"start":[39,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasLess.purs","end":[39,41]}},{"comments":null,"title":"orderingHasLess","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasLess"],"HasLess"]},{"tag":"TypeConstructor","contents":[["Data","Ordering"],"Ordering"]}]}},"sourceSpan":{"start":[42,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasLess.purs","end":[42,50]}},{"comments":null,"title":"stringHasLess","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasLess"],"HasLess"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}},"sourceSpan":{"start":[45,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasLess.purs","end":[45,41]}}],"comments":"Represents types where one value can be less than another.\n\n``` purescript\n1 :less 2 -- true\n2 :less 1 -- false\n```\n","title":"HasLess","info":{"fundeps":[],"arguments":[["a",null]],"declType":"typeClass","superclasses":[]},"sourceSpan":{"start":[14,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasLess.purs","end":[15,28]}}]},{"moduleName":{"package":null,"item":["Neon","Class","HasMap"]},"declarations":[{"children":[{"comments":null,"title":"map","info":{"declType":"typeClassMember","type":{"tag":"ForAll","contents":["c",{"tag":"ForAll","contents":["b",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeVar","contents":"c"}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"a"},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"a"},{"tag":"TypeVar","contents":"c"}]}]}]},null]},null]}},"sourceSpan":{"start":[14,3],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasMap.purs","end":[14,44]}},{"comments":null,"title":"arrayHasMap","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasMap"],"HasMap"]},{"tag":"TypeConstructor","contents":[["Prim"],"Array"]}]}},"sourceSpan":{"start":[16,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasMap.purs","end":[16,37]}},{"comments":null,"title":"effHasMap","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasMap"],"HasMap"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad","Eff"],"Eff"]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[19,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasMap.purs","end":[19,44]}},{"comments":null,"title":"listHasMap","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasMap"],"HasMap"]},{"tag":"TypeConstructor","contents":[["Data","List","Types"],"List"]}]}},"sourceSpan":{"start":[22,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasMap.purs","end":[22,40]}},{"comments":null,"title":"maybeHasMap","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasMap"],"HasMap"]},{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]}]}},"sourceSpan":{"start":[25,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasMap.purs","end":[25,42]}}],"comments":"Represents types that can be mapped over. This is also know as a\n[functor](https://en.wikipedia.org/wiki/Functor).\n\n``` purescript\n[1, 2, 3] :map (_ + 1) -- [2, 3, 4]\n```\n","title":"HasMap","info":{"fundeps":[],"arguments":[["a",null]],"declType":"typeClass","superclasses":[]},"sourceSpan":{"start":[13,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasMap.purs","end":[14,44]}}]},{"moduleName":{"package":null,"item":["Neon","Class","HasMultiply"]},"declarations":[{"children":[{"comments":null,"title":"multiply","info":{"declType":"typeClassMember","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[12,3],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasMultiply.purs","end":[12,26]}},{"comments":null,"title":"intHasMultiply","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasMultiply"],"HasMultiply"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}},"sourceSpan":{"start":[14,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasMultiply.purs","end":[14,43]}},{"comments":null,"title":"numberHasMultiply","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasMultiply"],"HasMultiply"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]}},"sourceSpan":{"start":[17,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasMultiply.purs","end":[17,49]}}],"comments":"Represents values that can be multiplied together. This is also known as\na [near-ring](https://en.wikipedia.org/wiki/Near-ring).\n\n``` purescript\n2 :multiply 3 -- 6\n```\n","title":"HasMultiply","info":{"fundeps":[],"arguments":[["a",null]],"declType":"typeClass","superclasses":[]},"sourceSpan":{"start":[11,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasMultiply.purs","end":[12,26]}}]},{"moduleName":{"package":null,"item":["Neon","Class","HasNot"]},"declarations":[{"children":[{"comments":null,"title":"not","info":{"declType":"typeClassMember","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"a"}]}},"sourceSpan":{"start":[21,3],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasNot.purs","end":[21,16]}},{"comments":null,"title":"booleanHasNot","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasNot"],"HasNot"]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}},"sourceSpan":{"start":[23,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasNot.purs","end":[23,41]}},{"comments":null,"title":"functionHasNot","info":{"declType":"instance","dependencies":[{"constraintClass":[["Neon","Class","HasNot"],"HasNot"],"constraintArgs":[{"tag":"TypeVar","contents":"b"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasNot"],"HasNot"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]}},"sourceSpan":{"start":[26,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasNot.purs","end":[26,57]}}],"comments":"Represents types can be negated. This is known as\n[negation](https://en.wikipedia.org/wiki/Negation).\n\n``` purescript\nnot false -- true\n```\n\nThe instance for functions is a little tricky. Calling `not` on a function\nreturns a new function that calls the original function and then `not`s\nthe result.\n\n``` purescript\nnot even -- \\ x -> not (even x)\n(not even) 3 -- true\n```\n","title":"HasNot","info":{"fundeps":[],"arguments":[["a",null]],"declType":"typeClass","superclasses":[]},"sourceSpan":{"start":[20,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasNot.purs","end":[21,16]}}]},{"moduleName":{"package":null,"item":["Neon","Class","HasOne"]},"declarations":[{"children":[{"comments":null,"title":"one","info":{"declType":"typeClassMember","type":{"tag":"TypeVar","contents":"a"}},"sourceSpan":{"start":[13,3],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasOne.purs","end":[13,11]}},{"comments":null,"title":"intHasOne","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasOne"],"HasOne"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}},"sourceSpan":{"start":[15,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasOne.purs","end":[15,33]}},{"comments":null,"title":"numberHasOne","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasOne"],"HasOne"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]}},"sourceSpan":{"start":[18,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasOne.purs","end":[18,39]}}],"comments":"Represents types that have an multiplicative identity. This is also known\nas a [semiring](https://en.wikipedia.org/wiki/Semiring).\n\n``` purescript\none :: Int -- 1\none :: Number -- 1.0\n```\n","title":"HasOne","info":{"fundeps":[],"arguments":[["a",null]],"declType":"typeClass","superclasses":[]},"sourceSpan":{"start":[12,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasOne.purs","end":[13,11]}}]},{"moduleName":{"package":null,"item":["Neon","Class","HasOr"]},"declarations":[{"children":[{"comments":null,"title":"or","info":{"declType":"typeClassMember","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[40,3],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasOr.purs","end":[40,20]}},{"comments":null,"title":"arrayHasOr","info":{"declType":"instance","dependencies":[{"constraintClass":[["Neon","Class","HasEqual"],"HasEqual"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasOr"],"HasOr"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[42,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasOr.purs","end":[42,64]}},{"comments":null,"title":"booleanHasOr","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasOr"],"HasOr"]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}},"sourceSpan":{"start":[45,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasOr.purs","end":[45,39]}},{"comments":null,"title":"functionHasOr","info":{"declType":"instance","dependencies":[{"constraintClass":[["Neon","Class","HasOr"],"HasOr"],"constraintArgs":[{"tag":"TypeVar","contents":"b"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasOr"],"HasOr"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]}},"sourceSpan":{"start":[48,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasOr.purs","end":[48,54]}},{"comments":null,"title":"intHasOr","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasOr"],"HasOr"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}},"sourceSpan":{"start":[51,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasOr.purs","end":[51,31]}},{"comments":null,"title":"listHasOr","info":{"declType":"instance","dependencies":[{"constraintClass":[["Neon","Class","HasEqual"],"HasEqual"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasOr"],"HasOr"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","List","Types"],"List"]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[54,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasOr.purs","end":[54,67]}}],"comments":"Represents types that can be disjoined. This is also known as\n[logical disjunction](https://en.wikipedia.org/wiki/Logical_disjunction).\n\n``` purescript\ntrue :or false -- true\n```\n\nSome types can't be disjoined per se but it is still useful to be able to\nuse the `||` operator with them. For example, you can `or` two arrays\ntogether to get their union.\n\n``` purescript\n[1, 2, 3] :or [2, 3, 4] -- [1, 2, 3, 4]\n```\n\nFor integers, `or` is bitwise.\n\n``` purescript\n5 :or 2 -- 7\n```\n\nThe instance for functions is perhaps the hardest to understand. Combining\ntwo functions with `or` returns a new function that calls each function\nand then `or`s the results together.\n\n``` purescript\neven :or odd -- \\ x -> (even x) :or (odd x)\n(even :or odd) 3 -- true\n```\n","title":"HasOr","info":{"fundeps":[],"arguments":[["a",null]],"declType":"typeClass","superclasses":[]},"sourceSpan":{"start":[39,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasOr.purs","end":[40,20]}}]},{"moduleName":{"package":null,"item":["Neon","Class","HasPower"]},"declarations":[{"children":[{"comments":null,"title":"power","info":{"declType":"typeClassMember","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[12,3],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasPower.purs","end":[12,23]}},{"comments":null,"title":"intHasPower","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasPower"],"HasPower"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}},"sourceSpan":{"start":[14,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasPower.purs","end":[14,37]}},{"comments":null,"title":"numberHasPower","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasPower"],"HasPower"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]}},"sourceSpan":{"start":[18,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasPower.purs","end":[18,43]}}],"comments":"Represents types that can be exponentiated.\n\n``` purescript\n2 :power 3 -- 8\n```\n","title":"HasPower","info":{"fundeps":[],"arguments":[["a",null]],"declType":"typeClass","superclasses":[]},"sourceSpan":{"start":[11,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasPower.purs","end":[12,23]}}]},{"moduleName":{"package":null,"item":["Neon","Class","HasPure"]},"declarations":[{"children":[{"comments":null,"title":"pure","info":{"declType":"typeClassMember","type":{"tag":"ForAll","contents":["b",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"a"},{"tag":"TypeVar","contents":"b"}]}]},null]}},"sourceSpan":{"start":[14,3],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasPure.purs","end":[14,29]}},{"comments":null,"title":"arrayHasPure","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasPure"],"HasPure"]},{"tag":"TypeConstructor","contents":[["Prim"],"Array"]}]}},"sourceSpan":{"start":[16,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasPure.purs","end":[16,39]}},{"comments":null,"title":"effHasPure","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasPure"],"HasPure"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad","Eff"],"Eff"]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[19,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasPure.purs","end":[19,46]}},{"comments":null,"title":"listHasPure","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasPure"],"HasPure"]},{"tag":"TypeConstructor","contents":[["Data","List","Types"],"List"]}]}},"sourceSpan":{"start":[22,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasPure.purs","end":[22,42]}},{"comments":null,"title":"maybeHasPure","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasPure"],"HasPure"]},{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]}]}},"sourceSpan":{"start":[25,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasPure.purs","end":[25,44]}}],"comments":"Represents types that allow injecting values into a container.\n\n``` purescript\npure 1 :: Maybe Int -- Just 1\npure 1 :: Array Int -- [1]\n```\n","title":"HasPure","info":{"fundeps":[],"arguments":[["a",null]],"declType":"typeClass","superclasses":[]},"sourceSpan":{"start":[13,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasPure.purs","end":[14,29]}}]},{"moduleName":{"package":null,"item":["Neon","Class","HasReduce"]},"declarations":[{"children":[{"comments":null,"title":"reduce","info":{"declType":"typeClassMember","type":{"tag":"ForAll","contents":["c",{"tag":"ForAll","contents":["b",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"c"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeVar","contents":"c"}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"c"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"a"},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeVar","contents":"c"}]}]}]},null]},null]}},"sourceSpan":{"start":[13,3],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasReduce.purs","end":[13,55]}},{"comments":null,"title":"arrayHasReduce","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasReduce"],"HasReduce"]},{"tag":"TypeConstructor","contents":[["Prim"],"Array"]}]}},"sourceSpan":{"start":[15,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasReduce.purs","end":[15,43]}},{"comments":null,"title":"listHasReduce","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasReduce"],"HasReduce"]},{"tag":"TypeConstructor","contents":[["Data","List","Types"],"List"]}]}},"sourceSpan":{"start":[18,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasReduce.purs","end":[18,46]}},{"comments":null,"title":"maybeHasReduce","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasReduce"],"HasReduce"]},{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]}]}},"sourceSpan":{"start":[21,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasReduce.purs","end":[21,48]}}],"comments":"Represents types that can be reduced to a single value. This is also known\nas a [fold](https://en.wikipedia.org/wiki/Fold_(higher-order_function)).\n\n``` purescript\n[\"wo\", \"rl\", \"d!\"] :reduce (\\ a e -> a + e) \"hello\" -- \"helloworld!\"\n```\n","title":"HasReduce","info":{"fundeps":[],"arguments":[["a",null]],"declType":"typeClass","superclasses":[]},"sourceSpan":{"start":[12,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasReduce.purs","end":[13,55]}}]},{"moduleName":{"package":null,"item":["Neon","Class","HasRemainder"]},"declarations":[{"children":[{"comments":null,"title":"remainder","info":{"declType":"typeClassMember","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[13,3],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasRemainder.purs","end":[13,27]}},{"comments":null,"title":"intHasRemainder","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasRemainder"],"HasRemainder"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}},"sourceSpan":{"start":[15,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasRemainder.purs","end":[15,45]}},{"comments":null,"title":"numberHasRemainder","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasRemainder"],"HasRemainder"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]}},"sourceSpan":{"start":[18,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasRemainder.purs","end":[18,51]}}],"comments":"Represents types that are divisible.\n\n``` purescript\n7 :remainder 2 -- 1\n7.0 :remainder 2.0 -- 1.0\n```\n","title":"HasRemainder","info":{"fundeps":[],"arguments":[["a",null]],"declType":"typeClass","superclasses":[]},"sourceSpan":{"start":[12,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasRemainder.purs","end":[13,27]}}]},{"moduleName":{"package":null,"item":["Neon","Class","HasSubtract"]},"declarations":[{"children":[{"comments":null,"title":"subtract","info":{"declType":"typeClassMember","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[16,3],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasSubtract.purs","end":[16,26]}},{"comments":null,"title":"arrayHasSubtract","info":{"declType":"instance","dependencies":[{"constraintClass":[["Neon","Class","HasEqual"],"HasEqual"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasSubtract"],"HasSubtract"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[18,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasSubtract.purs","end":[18,76]}},{"comments":null,"title":"intHasSubtract","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasSubtract"],"HasSubtract"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}},"sourceSpan":{"start":[23,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasSubtract.purs","end":[23,43]}},{"comments":null,"title":"listHasSubtract","info":{"declType":"instance","dependencies":[{"constraintClass":[["Neon","Class","HasEqual"],"HasEqual"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasSubtract"],"HasSubtract"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","List","Types"],"List"]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[26,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasSubtract.purs","end":[26,79]}},{"comments":null,"title":"numberHasSubtract","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasSubtract"],"HasSubtract"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]}},"sourceSpan":{"start":[31,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasSubtract.purs","end":[31,49]}}],"comments":"Represents types that can be subtracted from each other.\n\n``` purescript\n3 :subtract 2 -- 1\n```\n","title":"HasSubtract","info":{"fundeps":[],"arguments":[["a",null]],"declType":"typeClass","superclasses":[]},"sourceSpan":{"start":[15,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasSubtract.purs","end":[16,26]}}]},{"moduleName":{"package":null,"item":["Neon","Class","HasToArray"]},"declarations":[{"children":[{"comments":null,"title":"toArray","info":{"declType":"typeClassMember","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"b"}]}]}},"sourceSpan":{"start":[15,3],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasToArray.purs","end":[15,26]}},{"comments":null,"title":"arrayHasToArray","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasToArray"],"HasToArray"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeVar","contents":"a"}]}},"sourceSpan":{"start":[17,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasToArray.purs","end":[17,51]}},{"comments":null,"title":"listHasToArray","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasToArray"],"HasToArray"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","List","Types"],"List"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeVar","contents":"a"}]}},"sourceSpan":{"start":[20,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasToArray.purs","end":[20,54]}},{"comments":null,"title":"maybeHasToArray","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasToArray"],"HasToArray"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeVar","contents":"a"}]}},"sourceSpan":{"start":[23,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasToArray.purs","end":[23,56]}},{"comments":null,"title":"stringHasToArray","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasToArray"],"HasToArray"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Char"]}]}},"sourceSpan":{"start":[28,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasToArray.purs","end":[28,52]}}],"comments":"Represents types that can be converted to an array.\n\n``` purescript\ntoArray (Cons 1 Nil) :: Array Int -- [1]\ntoArray (Just 1) :: Array Int -- [1]\ntoArray \"ab\" :: String -- ['a', 'b']\n```\n","title":"HasToArray","info":{"fundeps":[],"arguments":[["a",null],["b",null]],"declType":"typeClass","superclasses":[]},"sourceSpan":{"start":[14,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasToArray.purs","end":[15,26]}}]},{"moduleName":{"package":null,"item":["Neon","Class","HasToInt"]},"declarations":[{"children":[{"comments":null,"title":"toInt","info":{"declType":"typeClassMember","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}},"sourceSpan":{"start":[13,3],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasToInt.purs","end":[13,20]}},{"comments":null,"title":"booleanHasToInt","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasToInt"],"HasToInt"]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}},"sourceSpan":{"start":[15,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasToInt.purs","end":[15,45]}},{"comments":null,"title":"charHasToInt","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasToInt"],"HasToInt"]},{"tag":"TypeConstructor","contents":[["Prim"],"Char"]}]}},"sourceSpan":{"start":[18,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasToInt.purs","end":[18,39]}},{"comments":null,"title":"intHasToInt","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasToInt"],"HasToInt"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}},"sourceSpan":{"start":[21,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasToInt.purs","end":[21,37]}},{"comments":null,"title":"orderingHasToInt","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasToInt"],"HasToInt"]},{"tag":"TypeConstructor","contents":[["Data","Ordering"],"Ordering"]}]}},"sourceSpan":{"start":[24,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasToInt.purs","end":[24,52]}}],"comments":"Represents types that can be converted to integers. This is typically used\nfor enumerations.\n\n``` purescript\ntoInt false -- 0\n```\n","title":"HasToInt","info":{"fundeps":[],"arguments":[["a",null]],"declType":"typeClass","superclasses":[]},"sourceSpan":{"start":[12,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasToInt.purs","end":[13,20]}}]},{"moduleName":{"package":null,"item":["Neon","Class","HasTop"]},"declarations":[{"children":[{"comments":null,"title":"top","info":{"declType":"typeClassMember","type":{"tag":"TypeVar","contents":"a"}},"sourceSpan":{"start":[14,3],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasTop.purs","end":[14,11]}},{"comments":null,"title":"booleanHasTop","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasTop"],"HasTop"]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}},"sourceSpan":{"start":[16,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasTop.purs","end":[16,41]}},{"comments":null,"title":"charHasTop","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasTop"],"HasTop"]},{"tag":"TypeConstructor","contents":[["Prim"],"Char"]}]}},"sourceSpan":{"start":[19,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasTop.purs","end":[19,35]}},{"comments":null,"title":"intHasTop","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasTop"],"HasTop"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}},"sourceSpan":{"start":[22,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasTop.purs","end":[22,33]}},{"comments":null,"title":"numberHasTop","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasTop"],"HasTop"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]}},"sourceSpan":{"start":[25,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasTop.purs","end":[25,39]}},{"comments":null,"title":"orderingHasTop","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasTop"],"HasTop"]},{"tag":"TypeConstructor","contents":[["Data","Ordering"],"Ordering"]}]}},"sourceSpan":{"start":[28,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasTop.purs","end":[28,48]}}],"comments":"Represents types that have an upper bound.\n\n``` purescript\ntop :: Boolean -- true\ntop :: Char -- '\\65535'\n```\n","title":"HasTop","info":{"fundeps":[],"arguments":[["a",null]],"declType":"typeClass","superclasses":[]},"sourceSpan":{"start":[13,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasTop.purs","end":[14,11]}}]},{"moduleName":{"package":null,"item":["Neon","Class","HasTraverse"]},"declarations":[{"children":[{"comments":null,"title":"traverse","info":{"declType":"typeClassMember","type":{"tag":"ForAll","contents":["m",{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Neon","Class","HasApply"],"HasApply"],"constraintArgs":[{"tag":"TypeVar","contents":"m"}],"constraintData":null},{"tag":"ConstrainedType","contents":[{"constraintClass":[["Neon","Class","HasMap"],"HasMap"],"constraintArgs":[{"tag":"TypeVar","contents":"m"}],"constraintData":null},{"tag":"ConstrainedType","contents":[{"constraintClass":[["Neon","Class","HasPure"],"HasPure"],"constraintArgs":[{"tag":"TypeVar","contents":"m"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"m"},{"tag":"TypeVar","contents":"b"}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"t"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"m"},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"t"},{"tag":"TypeVar","contents":"b"}]}}]}]}]}]}]}]},null]},null]},null]}},"sourceSpan":{"start":[18,3],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasTraverse.purs","end":[18,120]}},{"comments":null,"title":"lrrayHasTraverse","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasTraverse"],"HasTraverse"]},{"tag":"TypeConstructor","contents":[["Prim"],"Array"]}]}},"sourceSpan":{"start":[20,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasTraverse.purs","end":[20,47]}},{"comments":null,"title":"listHasTraverse","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasTraverse"],"HasTraverse"]},{"tag":"TypeConstructor","contents":[["Data","List","Types"],"List"]}]}},"sourceSpan":{"start":[24,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasTraverse.purs","end":[24,50]}},{"comments":null,"title":"laybeHasTraverse","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasTraverse"],"HasTraverse"]},{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]}]}},"sourceSpan":{"start":[29,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasTraverse.purs","end":[29,52]}}],"comments":"Represents data structures that can be traversed from left to right.\nUnlike `Reduce`, these structures can be traversed while keeping their\nshape.\n\n``` purescript\n[1, 2] :traverse (\\ x -> x :inspect :Just) -- Just [\"1\", \"2\"]\n```\n","title":"HasTraverse","info":{"fundeps":[],"arguments":[["t",null]],"declType":"typeClass","superclasses":[]},"sourceSpan":{"start":[17,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasTraverse.purs","end":[18,120]}}]},{"moduleName":{"package":null,"item":["Neon","Class","HasZero"]},"declarations":[{"children":[{"comments":null,"title":"zero","info":{"declType":"typeClassMember","type":{"tag":"TypeVar","contents":"a"}},"sourceSpan":{"start":[14,3],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasZero.purs","end":[14,12]}},{"comments":null,"title":"arrayHasZero","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasZero"],"HasZero"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[16,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasZero.purs","end":[16,43]}},{"comments":null,"title":"intHasZero","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasZero"],"HasZero"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}},"sourceSpan":{"start":[19,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasZero.purs","end":[19,35]}},{"comments":null,"title":"listHasZero","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasZero"],"HasZero"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","List","Types"],"List"]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[22,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasZero.purs","end":[22,46]}},{"comments":null,"title":"numberHasZero","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasZero"],"HasZero"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]}},"sourceSpan":{"start":[25,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasZero.purs","end":[25,41]}},{"comments":null,"title":"stringHasZero","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasZero"],"HasZero"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}},"sourceSpan":{"start":[28,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasZero.purs","end":[28,41]}}],"comments":"Represents types that have an additive identity. This is also known as a\n[monoid](https://en.wikipedia.org/wiki/Monoid).\n\n``` purescript\nzero :: Int -- 0\nzero :: Number -- 0.0\n```\n","title":"HasZero","info":{"fundeps":[],"arguments":[["a",null]],"declType":"typeClass","superclasses":[]},"sourceSpan":{"start":[13,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasZero.purs","end":[14,12]}}]}],"name":"Neon.Class","comments":"Every type class in Neon starts with \"Has\". There are two reasons for\nthis:\n\n- It avoids collisions with data types. The `HasMap` type class is\n  distinct from the `Map` data type.\n\n- Each type class has one function, so naming the class after that\n  function results in better error messages.\n\n  ``` purescript\n  newtype MyArray a = MyArray (Array a)\n  MyArray [1, 2, 3] :map (_ + 1)\n  -- Error found:\n  --   No type class instance was found for\n  --     Neon.Class.HasMap.HasMap MyArray\n  ```\n","declarations":[]},{"reExports":[],"name":"Neon.Class.HasAdd","comments":null,"declarations":[{"children":[{"comments":null,"title":"add","info":{"declType":"typeClassMember","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[14,3],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasAdd.purs","end":[14,21]}},{"comments":null,"title":"arrayHasAdd","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasAdd"],"HasAdd"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[16,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasAdd.purs","end":[16,41]}},{"comments":null,"title":"booleanHasAdd","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasAdd"],"HasAdd"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}},"sourceSpan":{"start":[19,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasAdd.purs","end":[19,37]}},{"comments":null,"title":"listHasAdd","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasAdd"],"HasAdd"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","List","Types"],"List"]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[22,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasAdd.purs","end":[22,44]}},{"comments":null,"title":"numberHasAdd","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasAdd"],"HasAdd"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]}},"sourceSpan":{"start":[25,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasAdd.purs","end":[25,39]}},{"comments":null,"title":"orderingHasAdd","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasAdd"],"HasAdd"]},{"tag":"TypeConstructor","contents":[["Data","Ordering"],"Ordering"]}]}},"sourceSpan":{"start":[28,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasAdd.purs","end":[28,48]}},{"comments":null,"title":"stringHasAdd","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasAdd"],"HasAdd"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}},"sourceSpan":{"start":[31,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasAdd.purs","end":[31,39]}}],"comments":"Represents types that can be added together. This is also known as a\n[semigroup](https://en.wikipedia.org/wiki/Semigroup).\n\n``` purescript\n2 :add 1 -- 3\n\"a\" :add \"b\" -- \"ab\"\n```\n","title":"HasAdd","info":{"fundeps":[],"arguments":[["a",null]],"declType":"typeClass","superclasses":[]},"sourceSpan":{"start":[13,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasAdd.purs","end":[14,21]}}]},{"reExports":[],"name":"Neon.Class.HasAnd","comments":null,"declarations":[{"children":[{"comments":null,"title":"and","info":{"declType":"typeClassMember","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[40,3],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasAnd.purs","end":[40,21]}},{"comments":null,"title":"arrayHasAnd","info":{"declType":"instance","dependencies":[{"constraintClass":[["Neon","Class","HasEqual"],"HasEqual"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasAnd"],"HasAnd"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[42,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasAnd.purs","end":[42,66]}},{"comments":null,"title":"booleanHasAnd","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasAnd"],"HasAnd"]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}},"sourceSpan":{"start":[45,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasAnd.purs","end":[45,41]}},{"comments":null,"title":"functionHasAnd","info":{"declType":"instance","dependencies":[{"constraintClass":[["Neon","Class","HasAnd"],"HasAnd"],"constraintArgs":[{"tag":"TypeVar","contents":"b"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasAnd"],"HasAnd"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]}},"sourceSpan":{"start":[48,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasAnd.purs","end":[48,57]}},{"comments":null,"title":"intHasAnd","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasAnd"],"HasAnd"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}},"sourceSpan":{"start":[51,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasAnd.purs","end":[51,33]}},{"comments":null,"title":"listHasAnd","info":{"declType":"instance","dependencies":[{"constraintClass":[["Neon","Class","HasEqual"],"HasEqual"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasAnd"],"HasAnd"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","List","Types"],"List"]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[54,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasAnd.purs","end":[54,69]}}],"comments":"Represents types that can be conjoined. This is also known as\n[logical conjunction](https://en.wikipedia.org/wiki/Logical_conjunction).\n\n``` purescript\ntrue :and false -- false\n```\n\nSome types can't be conjoined per se but it is still useful to be able to\nuse the `&&` operator with them. For example, you can `and` two arrays\ntogether to get their intersection.\n\n``` purescript\n[1, 2, 3] :and [2, 3, 4] -- [2, 3]\n```\n\nFor integers, `and` is bitwise.\n\n``` purescript\n5 :and 3 -- 3\n```\n\nThe instance for functions is perhaps the hardest to understand. Combining\ntwo functions with `and` returns a new function that calls each function\nand then `and`s the results together.\n\n``` purescript\neven :and odd -- \\ x -> (even x) :and (odd x)\n(even :and odd) 3 -- false\n```\n","title":"HasAnd","info":{"fundeps":[],"arguments":[["a",null]],"declType":"typeClass","superclasses":[]},"sourceSpan":{"start":[39,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasAnd.purs","end":[40,21]}}]},{"reExports":[],"name":"Neon.Class.HasApply","comments":null,"declarations":[{"children":[{"comments":null,"title":"apply","info":{"declType":"typeClassMember","type":{"tag":"ForAll","contents":["c",{"tag":"ForAll","contents":["b",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"a"},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeVar","contents":"c"}]}}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"a"},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"a"},{"tag":"TypeVar","contents":"c"}]}]}]},null]},null]}},"sourceSpan":{"start":[17,3],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasApply.purs","end":[17,48]}},{"comments":null,"title":"arrayHasApply","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasApply"],"HasApply"]},{"tag":"TypeConstructor","contents":[["Prim"],"Array"]}]}},"sourceSpan":{"start":[19,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasApply.purs","end":[19,41]}},{"comments":null,"title":"effHasApply","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasApply"],"HasApply"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad","Eff"],"Eff"]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[22,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasApply.purs","end":[22,48]}},{"comments":null,"title":"listHasApply","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasApply"],"HasApply"]},{"tag":"TypeConstructor","contents":[["Data","List","Types"],"List"]}]}},"sourceSpan":{"start":[25,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasApply.purs","end":[25,44]}},{"comments":null,"title":"maybeHasApply","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasApply"],"HasApply"]},{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]}]}},"sourceSpan":{"start":[28,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasApply.purs","end":[28,46]}}],"comments":"Represents types that can be applied from within a container. In other\nwords, given both a function and a value in a container, apply the\nfunction to the value and return the result in a container. This is also\nknown as an applicative functor.\n\n``` purescript\n[3, 4] :apply [(_ + 2), (_ * 2)] -- [5, 6, 6, 8]\nJust 2 :apply (Just (_ + 1)) -- Just 3\n```\n","title":"HasApply","info":{"fundeps":[],"arguments":[["a",null]],"declType":"typeClass","superclasses":[]},"sourceSpan":{"start":[16,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasApply.purs","end":[17,48]}}]},{"reExports":[],"name":"Neon.Class.HasBottom","comments":null,"declarations":[{"children":[{"comments":null,"title":"bottom","info":{"declType":"typeClassMember","type":{"tag":"TypeVar","contents":"a"}},"sourceSpan":{"start":[14,3],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasBottom.purs","end":[14,14]}},{"comments":null,"title":"booleanHasBottom","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasBottom"],"HasBottom"]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}},"sourceSpan":{"start":[16,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasBottom.purs","end":[16,47]}},{"comments":null,"title":"charHasBottom","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasBottom"],"HasBottom"]},{"tag":"TypeConstructor","contents":[["Prim"],"Char"]}]}},"sourceSpan":{"start":[19,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasBottom.purs","end":[19,41]}},{"comments":null,"title":"intHasBottom","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasBottom"],"HasBottom"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}},"sourceSpan":{"start":[22,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasBottom.purs","end":[22,39]}},{"comments":null,"title":"numberHasBottom","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasBottom"],"HasBottom"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]}},"sourceSpan":{"start":[25,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasBottom.purs","end":[25,45]}},{"comments":null,"title":"orderingHasBottom","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasBottom"],"HasBottom"]},{"tag":"TypeConstructor","contents":[["Data","Ordering"],"Ordering"]}]}},"sourceSpan":{"start":[28,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasBottom.purs","end":[28,54]}}],"comments":"Represents types that have a lower bound.\n\n``` purescript\nbottom :: Boolean -- false\nbottom :: Char -- '\\0'\n```\n","title":"HasBottom","info":{"fundeps":[],"arguments":[["a",null]],"declType":"typeClass","superclasses":[]},"sourceSpan":{"start":[13,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasBottom.purs","end":[14,14]}}]},{"reExports":[],"name":"Neon.Class.HasChain","comments":null,"declarations":[{"children":[{"comments":null,"title":"chain","info":{"declType":"typeClassMember","type":{"tag":"ForAll","contents":["c",{"tag":"ForAll","contents":["b",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"a"},{"tag":"TypeVar","contents":"c"}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"a"},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"a"},{"tag":"TypeVar","contents":"c"}]}]}]},null]},null]}},"sourceSpan":{"start":[14,3],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasChain.purs","end":[14,48]}},{"comments":null,"title":"arrayHasChain","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasChain"],"HasChain"]},{"tag":"TypeConstructor","contents":[["Prim"],"Array"]}]}},"sourceSpan":{"start":[16,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasChain.purs","end":[16,41]}},{"comments":null,"title":"effHasChain","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasChain"],"HasChain"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad","Eff"],"Eff"]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[19,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasChain.purs","end":[19,48]}},{"comments":null,"title":"listHasChain","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasChain"],"HasChain"]},{"tag":"TypeConstructor","contents":[["Data","List","Types"],"List"]}]}},"sourceSpan":{"start":[22,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasChain.purs","end":[22,44]}},{"comments":null,"title":"maybeHasChain","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasChain"],"HasChain"]},{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]}]}},"sourceSpan":{"start":[25,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasChain.purs","end":[25,46]}}],"comments":"Represents types that can express sequential actions. This is also known\nas a [monad](https://en.wikipedia.org/wiki/Monad_(functional_programming)).\n\n``` purescript\n[3, 5] :chain (\\ x -> [x, x * 2]) -- [3, 6, 5, 10]\n```\n","title":"HasChain","info":{"fundeps":[],"arguments":[["a",null]],"declType":"typeClass","superclasses":[]},"sourceSpan":{"start":[13,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasChain.purs","end":[14,48]}}]},{"reExports":[],"name":"Neon.Class.HasCompare","comments":null,"declarations":[{"children":[{"comments":null,"title":"compare","info":{"declType":"typeClassMember","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeConstructor","contents":[["Data","Ordering"],"Ordering"]}]}]}},"sourceSpan":{"start":[17,3],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasCompare.purs","end":[17,37]}},{"comments":null,"title":"arrayHasCompare","info":{"declType":"instance","dependencies":[{"constraintClass":[["Neon","Class","HasCompare"],"HasCompare"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasCompare"],"HasCompare"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[19,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasCompare.purs","end":[19,67]}},{"comments":null,"title":"booleanHasCompare","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasCompare"],"HasCompare"]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}},"sourceSpan":{"start":[24,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasCompare.purs","end":[24,49]}},{"comments":null,"title":"charHasCompare","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasCompare"],"HasCompare"]},{"tag":"TypeConstructor","contents":[["Prim"],"Char"]}]}},"sourceSpan":{"start":[27,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasCompare.purs","end":[27,43]}},{"comments":null,"title":"intHasCompare","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasCompare"],"HasCompare"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}},"sourceSpan":{"start":[30,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasCompare.purs","end":[30,41]}},{"comments":null,"title":"listHasCompare","info":{"declType":"instance","dependencies":[{"constraintClass":[["Neon","Class","HasCompare"],"HasCompare"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasCompare"],"HasCompare"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","List","Types"],"List"]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[33,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasCompare.purs","end":[33,70]}},{"comments":null,"title":"numberHasCompare","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasCompare"],"HasCompare"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]}},"sourceSpan":{"start":[43,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasCompare.purs","end":[43,47]}},{"comments":null,"title":"orderingHasCompare","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasCompare"],"HasCompare"]},{"tag":"TypeConstructor","contents":[["Data","Ordering"],"Ordering"]}]}},"sourceSpan":{"start":[46,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasCompare.purs","end":[46,56]}},{"comments":null,"title":"stringHasCompare","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasCompare"],"HasCompare"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}},"sourceSpan":{"start":[49,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasCompare.purs","end":[49,47]}}],"comments":"Represents type that have a [total order](https://en.wikipedia.org/wiki/Total_order).\n\n``` purescript\n2 :compare 1 -- GT\n2 :compare 2 -- EQ\n2 :compare 3 -- LT\n```\n","title":"HasCompare","info":{"fundeps":[],"arguments":[["a",null]],"declType":"typeClass","superclasses":[{"constraintClass":[["Neon","Class","HasEqual"],"HasEqual"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"constraintClass":[["Neon","Class","HasGreater"],"HasGreater"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"constraintClass":[["Neon","Class","HasLess"],"HasLess"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}]},"sourceSpan":{"start":[16,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasCompare.purs","end":[17,37]}}]},{"reExports":[],"name":"Neon.Class.HasDivide","comments":null,"declarations":[{"children":[{"comments":null,"title":"divide","info":{"declType":"typeClassMember","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[12,3],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasDivide.purs","end":[12,24]}},{"comments":null,"title":"intHasDivide","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasDivide"],"HasDivide"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}},"sourceSpan":{"start":[14,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasDivide.purs","end":[14,39]}},{"comments":null,"title":"numberHasDivide","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasDivide"],"HasDivide"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]}},"sourceSpan":{"start":[17,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasDivide.purs","end":[17,45]}}],"comments":"Represents types that are divisible.\n\n``` purescript\n7 :divide 2 -- 3\n7.0 :divide 2.0 -- 3.5\n```\n","title":"HasDivide","info":{"fundeps":[],"arguments":[["a",null]],"declType":"typeClass","superclasses":[]},"sourceSpan":{"start":[11,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasDivide.purs","end":[12,24]}}]},{"reExports":[],"name":"Neon.Class.HasEqual","comments":null,"declarations":[{"children":[{"comments":null,"title":"equal","info":{"declType":"typeClassMember","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}]}},"sourceSpan":{"start":[16,3],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasEqual.purs","end":[16,29]}},{"comments":null,"title":"arrayHasEqual","info":{"declType":"instance","dependencies":[{"constraintClass":[["Neon","Class","HasEqual"],"HasEqual"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasEqual"],"HasEqual"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[18,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasEqual.purs","end":[18,61]}},{"comments":null,"title":"booleanHasEqual","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasEqual"],"HasEqual"]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}},"sourceSpan":{"start":[23,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasEqual.purs","end":[23,45]}},{"comments":null,"title":"charHasEqual","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasEqual"],"HasEqual"]},{"tag":"TypeConstructor","contents":[["Prim"],"Char"]}]}},"sourceSpan":{"start":[26,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasEqual.purs","end":[26,39]}},{"comments":null,"title":"intHasEqual","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasEqual"],"HasEqual"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}},"sourceSpan":{"start":[29,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasEqual.purs","end":[29,37]}},{"comments":null,"title":"listHasEqual","info":{"declType":"instance","dependencies":[{"constraintClass":[["Neon","Class","HasEqual"],"HasEqual"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasEqual"],"HasEqual"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","List","Types"],"List"]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[32,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasEqual.purs","end":[32,64]}},{"comments":null,"title":"numberHasEqual","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasEqual"],"HasEqual"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]}},"sourceSpan":{"start":[37,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasEqual.purs","end":[37,43]}},{"comments":null,"title":"orderingHasEqual","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasEqual"],"HasEqual"]},{"tag":"TypeConstructor","contents":[["Data","Ordering"],"Ordering"]}]}},"sourceSpan":{"start":[40,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasEqual.purs","end":[40,52]}},{"comments":null,"title":"stringHasEqual","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasEqual"],"HasEqual"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}},"sourceSpan":{"start":[43,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasEqual.purs","end":[43,43]}},{"comments":null,"title":"unitHasEqual","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasEqual"],"HasEqual"]},{"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}},"sourceSpan":{"start":[46,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasEqual.purs","end":[46,44]}}],"comments":"Represents types that can be equal to each other.\n\n``` purescript\nequal 1 2 -- false\nequal 3 3 -- true\n```\n","title":"HasEqual","info":{"fundeps":[],"arguments":[["a",null]],"declType":"typeClass","superclasses":[]},"sourceSpan":{"start":[15,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasEqual.purs","end":[16,29]}}]},{"reExports":[],"name":"Neon.Class.HasFilter","comments":null,"declarations":[{"children":[{"comments":null,"title":"filter","info":{"declType":"typeClassMember","type":{"tag":"ForAll","contents":["b",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"a"},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"a"},{"tag":"TypeVar","contents":"b"}]}]}]},null]}},"sourceSpan":{"start":[13,3],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasFilter.purs","end":[13,51]}},{"comments":null,"title":"arrayHasFilter","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasFilter"],"HasFilter"]},{"tag":"TypeConstructor","contents":[["Prim"],"Array"]}]}},"sourceSpan":{"start":[15,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasFilter.purs","end":[15,43]}},{"comments":null,"title":"listHasFilter","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasFilter"],"HasFilter"]},{"tag":"TypeConstructor","contents":[["Data","List","Types"],"List"]}]}},"sourceSpan":{"start":[18,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasFilter.purs","end":[18,46]}}],"comments":"Represents types that can have elements filtered out of them.\n\n``` purescript\n[1, 2, 3, 4] :filter (_ > 2) -- [3, 4]\n```\n","title":"HasFilter","info":{"fundeps":[],"arguments":[["a",null]],"declType":"typeClass","superclasses":[]},"sourceSpan":{"start":[12,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasFilter.purs","end":[13,51]}}]},{"reExports":[],"name":"Neon.Class.HasFromArray","comments":null,"declarations":[{"children":[{"comments":null,"title":"fromArray","info":{"declType":"typeClassMember","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeVar","contents":"b"}]}},"sourceSpan":{"start":[16,3],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasFromArray.purs","end":[16,28]}},{"comments":null,"title":"arrayHasFromArray","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasFromArray"],"HasFromArray"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[18,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasFromArray.purs","end":[18,55]}},{"comments":null,"title":"listHasFromArray","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasFromArray"],"HasFromArray"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","List","Types"],"List"]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[21,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasFromArray.purs","end":[21,58]}},{"comments":null,"title":"maybeHasFromArray","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasFromArray"],"HasFromArray"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[24,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasFromArray.purs","end":[24,60]}},{"comments":null,"title":"stringHasFromArray","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasFromArray"],"HasFromArray"]},{"tag":"TypeConstructor","contents":[["Prim"],"Char"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}},"sourceSpan":{"start":[27,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasFromArray.purs","end":[27,56]}}],"comments":"Represents types that can be converted from an array.\n\n``` purescript\nfromArray [1] :: List Int -- Cons 1 Nil\nfromArray [1] :: Maybe Int -- Just 1\nfromArray ['a', 'b'] :: String -- \"ab\"\n```\n","title":"HasFromArray","info":{"fundeps":[],"arguments":[["a",null],["b",null]],"declType":"typeClass","superclasses":[]},"sourceSpan":{"start":[15,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasFromArray.purs","end":[16,28]}}]},{"reExports":[],"name":"Neon.Class.HasFromInt","comments":null,"declarations":[{"children":[{"comments":null,"title":"fromInt","info":{"declType":"typeClassMember","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[14,3],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasFromInt.purs","end":[14,33]}},{"comments":null,"title":"booleanHasFromInt","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasFromInt"],"HasFromInt"]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}},"sourceSpan":{"start":[16,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasFromInt.purs","end":[16,49]}},{"comments":null,"title":"charHasFromInt","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasFromInt"],"HasFromInt"]},{"tag":"TypeConstructor","contents":[["Prim"],"Char"]}]}},"sourceSpan":{"start":[19,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasFromInt.purs","end":[19,43]}},{"comments":null,"title":"intHasFromInt","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasFromInt"],"HasFromInt"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}},"sourceSpan":{"start":[22,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasFromInt.purs","end":[22,41]}},{"comments":null,"title":"orderingHasFromInt","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasFromInt"],"HasFromInt"]},{"tag":"TypeConstructor","contents":[["Data","Ordering"],"Ordering"]}]}},"sourceSpan":{"start":[25,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasFromInt.purs","end":[25,56]}}],"comments":"Represents types that can be converted from integers. This is typically\nused for enumerations.\n\n``` purescript\nfromInt 1 :: Maybe Bool -- Just true\nfromInt 2 :: Maybe Bool -- Nothing\n```\n","title":"HasFromInt","info":{"fundeps":[],"arguments":[["a",null]],"declType":"typeClass","superclasses":[]},"sourceSpan":{"start":[13,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasFromInt.purs","end":[14,33]}}]},{"reExports":[],"name":"Neon.Class.HasGreater","comments":null,"declarations":[{"children":[{"comments":null,"title":"greater","info":{"declType":"typeClassMember","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}]}},"sourceSpan":{"start":[15,3],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasGreater.purs","end":[15,31]}},{"comments":null,"title":"arrayHasGreater","info":{"declType":"instance","dependencies":[{"constraintClass":[["Neon","Class","HasEqual"],"HasEqual"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"constraintClass":[["Neon","Class","HasGreater"],"HasGreater"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasGreater"],"HasGreater"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[17,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasGreater.purs","end":[17,88]}},{"comments":null,"title":"booleanHasGreater","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasGreater"],"HasGreater"]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}},"sourceSpan":{"start":[22,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasGreater.purs","end":[22,49]}},{"comments":null,"title":"charHasGreater","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasGreater"],"HasGreater"]},{"tag":"TypeConstructor","contents":[["Prim"],"Char"]}]}},"sourceSpan":{"start":[25,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasGreater.purs","end":[25,43]}},{"comments":null,"title":"intHasGreater","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasGreater"],"HasGreater"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}},"sourceSpan":{"start":[28,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasGreater.purs","end":[28,41]}},{"comments":null,"title":"listHasGreater","info":{"declType":"instance","dependencies":[{"constraintClass":[["Neon","Class","HasEqual"],"HasEqual"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"constraintClass":[["Neon","Class","HasGreater"],"HasGreater"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasGreater"],"HasGreater"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","List","Types"],"List"]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[31,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasGreater.purs","end":[31,91]}},{"comments":null,"title":"numberHasGreater","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasGreater"],"HasGreater"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]}},"sourceSpan":{"start":[39,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasGreater.purs","end":[39,47]}},{"comments":null,"title":"orderingHasGreater","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasGreater"],"HasGreater"]},{"tag":"TypeConstructor","contents":[["Data","Ordering"],"Ordering"]}]}},"sourceSpan":{"start":[42,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasGreater.purs","end":[42,56]}},{"comments":null,"title":"stringHasGreater","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasGreater"],"HasGreater"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}},"sourceSpan":{"start":[45,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasGreater.purs","end":[45,47]}}],"comments":"Represents types where one value can be greater than another.\n\n``` purescript\n2 :greater 1 -- true\n1 :greater 2 -- false\n```\n","title":"HasGreater","info":{"fundeps":[],"arguments":[["a",null]],"declType":"typeClass","superclasses":[]},"sourceSpan":{"start":[14,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasGreater.purs","end":[15,31]}}]},{"reExports":[],"name":"Neon.Class.HasInspect","comments":null,"declarations":[{"children":[{"comments":null,"title":"inspect","info":{"declType":"typeClassMember","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}},"sourceSpan":{"start":[25,3],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasInspect.purs","end":[25,25]}},{"comments":null,"title":"arrayHasInspect","info":{"declType":"instance","dependencies":[{"constraintClass":[["Neon","Class","HasInspect"],"HasInspect"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasInspect"],"HasInspect"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[27,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasInspect.purs","end":[27,67]}},{"comments":null,"title":"booleanHasInspect","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasInspect"],"HasInspect"]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}},"sourceSpan":{"start":[33,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasInspect.purs","end":[33,49]}},{"comments":null,"title":"charHasInspect","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasInspect"],"HasInspect"]},{"tag":"TypeConstructor","contents":[["Prim"],"Char"]}]}},"sourceSpan":{"start":[36,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasInspect.purs","end":[36,43]}},{"comments":null,"title":"errorHasInspect","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasInspect"],"HasInspect"]},{"tag":"TypeConstructor","contents":[["Control","Monad","Eff","Exception"],"Error"]}]}},"sourceSpan":{"start":[39,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasInspect.purs","end":[39,50]}},{"comments":null,"title":"functionHasInspect","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasInspect"],"HasInspect"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]}},"sourceSpan":{"start":[42,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasInspect.purs","end":[42,51]}},{"comments":null,"title":"intHasInspect","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasInspect"],"HasInspect"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}},"sourceSpan":{"start":[45,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasInspect.purs","end":[45,41]}},{"comments":null,"title":"listHasInspect","info":{"declType":"instance","dependencies":[{"constraintClass":[["Neon","Class","HasInspect"],"HasInspect"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasInspect"],"HasInspect"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","List","Types"],"List"]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[48,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasInspect.purs","end":[48,70]}},{"comments":null,"title":"numberHasInspect","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasInspect"],"HasInspect"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]}},"sourceSpan":{"start":[54,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasInspect.purs","end":[54,47]}},{"comments":null,"title":"objectHasInspect","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasInspect"],"HasInspect"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Record"]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[57,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasInspect.purs","end":[57,48]}},{"comments":null,"title":"orderingHasInspect","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasInspect"],"HasInspect"]},{"tag":"TypeConstructor","contents":[["Data","Ordering"],"Ordering"]}]}},"sourceSpan":{"start":[60,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasInspect.purs","end":[60,56]}},{"comments":null,"title":"proxyHasInspect","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasInspect"],"HasInspect"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Type","Proxy"],"Proxy"]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[63,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasInspect.purs","end":[63,54]}},{"comments":null,"title":"stringHasInspect","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasInspect"],"HasInspect"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}},"sourceSpan":{"start":[66,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasInspect.purs","end":[66,47]}},{"comments":null,"title":"unitHasInspect","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasInspect"],"HasInspect"]},{"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}},"sourceSpan":{"start":[69,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasInspect.purs","end":[69,48]}}],"comments":"Represents types that can be converting to a string. This is typically\nused for debugging. The result of `inspect x` should be a valid PureScript\nexpression.\n\n``` purescript\ninspect 123 -- \"123\"\ninspect (Just 123) -- \"Just (123)\"\n```\n\nThe instance for functions and objects do not return valid expressions.\nThis is because there is no way in general to generate an expression for\nthem.\n\n``` purescript\ninspect identity -- \"{- Function -}\"\ninspect {} -- \"{- Object -}\"\n```\n","title":"HasInspect","info":{"fundeps":[],"arguments":[["a",null]],"declType":"typeClass","superclasses":[]},"sourceSpan":{"start":[24,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasInspect.purs","end":[25,25]}}]},{"reExports":[],"name":"Neon.Class.HasLess","comments":null,"declarations":[{"children":[{"comments":null,"title":"less","info":{"declType":"typeClassMember","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}]}},"sourceSpan":{"start":[15,3],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasLess.purs","end":[15,28]}},{"comments":null,"title":"arrayHasLess","info":{"declType":"instance","dependencies":[{"constraintClass":[["Neon","Class","HasEqual"],"HasEqual"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"constraintClass":[["Neon","Class","HasLess"],"HasLess"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasLess"],"HasLess"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[17,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasLess.purs","end":[17,79]}},{"comments":null,"title":"booleanHasLess","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasLess"],"HasLess"]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}},"sourceSpan":{"start":[22,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasLess.purs","end":[22,43]}},{"comments":null,"title":"charHasLess","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasLess"],"HasLess"]},{"tag":"TypeConstructor","contents":[["Prim"],"Char"]}]}},"sourceSpan":{"start":[25,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasLess.purs","end":[25,37]}},{"comments":null,"title":"intHasLess","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasLess"],"HasLess"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}},"sourceSpan":{"start":[28,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasLess.purs","end":[28,35]}},{"comments":null,"title":"listHasLess","info":{"declType":"instance","dependencies":[{"constraintClass":[["Neon","Class","HasEqual"],"HasEqual"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"constraintClass":[["Neon","Class","HasLess"],"HasLess"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasLess"],"HasLess"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","List","Types"],"List"]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[31,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasLess.purs","end":[31,82]}},{"comments":null,"title":"numberHasLess","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasLess"],"HasLess"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]}},"sourceSpan":{"start":[39,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasLess.purs","end":[39,41]}},{"comments":null,"title":"orderingHasLess","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasLess"],"HasLess"]},{"tag":"TypeConstructor","contents":[["Data","Ordering"],"Ordering"]}]}},"sourceSpan":{"start":[42,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasLess.purs","end":[42,50]}},{"comments":null,"title":"stringHasLess","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasLess"],"HasLess"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}},"sourceSpan":{"start":[45,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasLess.purs","end":[45,41]}}],"comments":"Represents types where one value can be less than another.\n\n``` purescript\n1 :less 2 -- true\n2 :less 1 -- false\n```\n","title":"HasLess","info":{"fundeps":[],"arguments":[["a",null]],"declType":"typeClass","superclasses":[]},"sourceSpan":{"start":[14,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasLess.purs","end":[15,28]}}]},{"reExports":[],"name":"Neon.Class.HasMap","comments":null,"declarations":[{"children":[{"comments":null,"title":"map","info":{"declType":"typeClassMember","type":{"tag":"ForAll","contents":["c",{"tag":"ForAll","contents":["b",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeVar","contents":"c"}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"a"},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"a"},{"tag":"TypeVar","contents":"c"}]}]}]},null]},null]}},"sourceSpan":{"start":[14,3],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasMap.purs","end":[14,44]}},{"comments":null,"title":"arrayHasMap","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasMap"],"HasMap"]},{"tag":"TypeConstructor","contents":[["Prim"],"Array"]}]}},"sourceSpan":{"start":[16,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasMap.purs","end":[16,37]}},{"comments":null,"title":"effHasMap","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasMap"],"HasMap"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad","Eff"],"Eff"]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[19,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasMap.purs","end":[19,44]}},{"comments":null,"title":"listHasMap","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasMap"],"HasMap"]},{"tag":"TypeConstructor","contents":[["Data","List","Types"],"List"]}]}},"sourceSpan":{"start":[22,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasMap.purs","end":[22,40]}},{"comments":null,"title":"maybeHasMap","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasMap"],"HasMap"]},{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]}]}},"sourceSpan":{"start":[25,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasMap.purs","end":[25,42]}}],"comments":"Represents types that can be mapped over. This is also know as a\n[functor](https://en.wikipedia.org/wiki/Functor).\n\n``` purescript\n[1, 2, 3] :map (_ + 1) -- [2, 3, 4]\n```\n","title":"HasMap","info":{"fundeps":[],"arguments":[["a",null]],"declType":"typeClass","superclasses":[]},"sourceSpan":{"start":[13,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasMap.purs","end":[14,44]}}]},{"reExports":[],"name":"Neon.Class.HasMultiply","comments":null,"declarations":[{"children":[{"comments":null,"title":"multiply","info":{"declType":"typeClassMember","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[12,3],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasMultiply.purs","end":[12,26]}},{"comments":null,"title":"intHasMultiply","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasMultiply"],"HasMultiply"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}},"sourceSpan":{"start":[14,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasMultiply.purs","end":[14,43]}},{"comments":null,"title":"numberHasMultiply","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasMultiply"],"HasMultiply"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]}},"sourceSpan":{"start":[17,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasMultiply.purs","end":[17,49]}}],"comments":"Represents values that can be multiplied together. This is also known as\na [near-ring](https://en.wikipedia.org/wiki/Near-ring).\n\n``` purescript\n2 :multiply 3 -- 6\n```\n","title":"HasMultiply","info":{"fundeps":[],"arguments":[["a",null]],"declType":"typeClass","superclasses":[]},"sourceSpan":{"start":[11,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasMultiply.purs","end":[12,26]}}]},{"reExports":[],"name":"Neon.Class.HasNot","comments":null,"declarations":[{"children":[{"comments":null,"title":"not","info":{"declType":"typeClassMember","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"a"}]}},"sourceSpan":{"start":[21,3],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasNot.purs","end":[21,16]}},{"comments":null,"title":"booleanHasNot","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasNot"],"HasNot"]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}},"sourceSpan":{"start":[23,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasNot.purs","end":[23,41]}},{"comments":null,"title":"functionHasNot","info":{"declType":"instance","dependencies":[{"constraintClass":[["Neon","Class","HasNot"],"HasNot"],"constraintArgs":[{"tag":"TypeVar","contents":"b"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasNot"],"HasNot"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]}},"sourceSpan":{"start":[26,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasNot.purs","end":[26,57]}}],"comments":"Represents types can be negated. This is known as\n[negation](https://en.wikipedia.org/wiki/Negation).\n\n``` purescript\nnot false -- true\n```\n\nThe instance for functions is a little tricky. Calling `not` on a function\nreturns a new function that calls the original function and then `not`s\nthe result.\n\n``` purescript\nnot even -- \\ x -> not (even x)\n(not even) 3 -- true\n```\n","title":"HasNot","info":{"fundeps":[],"arguments":[["a",null]],"declType":"typeClass","superclasses":[]},"sourceSpan":{"start":[20,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasNot.purs","end":[21,16]}}]},{"reExports":[],"name":"Neon.Class.HasOne","comments":null,"declarations":[{"children":[{"comments":null,"title":"one","info":{"declType":"typeClassMember","type":{"tag":"TypeVar","contents":"a"}},"sourceSpan":{"start":[13,3],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasOne.purs","end":[13,11]}},{"comments":null,"title":"intHasOne","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasOne"],"HasOne"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}},"sourceSpan":{"start":[15,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasOne.purs","end":[15,33]}},{"comments":null,"title":"numberHasOne","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasOne"],"HasOne"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]}},"sourceSpan":{"start":[18,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasOne.purs","end":[18,39]}}],"comments":"Represents types that have an multiplicative identity. This is also known\nas a [semiring](https://en.wikipedia.org/wiki/Semiring).\n\n``` purescript\none :: Int -- 1\none :: Number -- 1.0\n```\n","title":"HasOne","info":{"fundeps":[],"arguments":[["a",null]],"declType":"typeClass","superclasses":[]},"sourceSpan":{"start":[12,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasOne.purs","end":[13,11]}}]},{"reExports":[],"name":"Neon.Class.HasOr","comments":null,"declarations":[{"children":[{"comments":null,"title":"or","info":{"declType":"typeClassMember","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[40,3],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasOr.purs","end":[40,20]}},{"comments":null,"title":"arrayHasOr","info":{"declType":"instance","dependencies":[{"constraintClass":[["Neon","Class","HasEqual"],"HasEqual"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasOr"],"HasOr"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[42,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasOr.purs","end":[42,64]}},{"comments":null,"title":"booleanHasOr","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasOr"],"HasOr"]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}},"sourceSpan":{"start":[45,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasOr.purs","end":[45,39]}},{"comments":null,"title":"functionHasOr","info":{"declType":"instance","dependencies":[{"constraintClass":[["Neon","Class","HasOr"],"HasOr"],"constraintArgs":[{"tag":"TypeVar","contents":"b"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasOr"],"HasOr"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]}},"sourceSpan":{"start":[48,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasOr.purs","end":[48,54]}},{"comments":null,"title":"intHasOr","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasOr"],"HasOr"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}},"sourceSpan":{"start":[51,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasOr.purs","end":[51,31]}},{"comments":null,"title":"listHasOr","info":{"declType":"instance","dependencies":[{"constraintClass":[["Neon","Class","HasEqual"],"HasEqual"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasOr"],"HasOr"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","List","Types"],"List"]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[54,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasOr.purs","end":[54,67]}}],"comments":"Represents types that can be disjoined. This is also known as\n[logical disjunction](https://en.wikipedia.org/wiki/Logical_disjunction).\n\n``` purescript\ntrue :or false -- true\n```\n\nSome types can't be disjoined per se but it is still useful to be able to\nuse the `||` operator with them. For example, you can `or` two arrays\ntogether to get their union.\n\n``` purescript\n[1, 2, 3] :or [2, 3, 4] -- [1, 2, 3, 4]\n```\n\nFor integers, `or` is bitwise.\n\n``` purescript\n5 :or 2 -- 7\n```\n\nThe instance for functions is perhaps the hardest to understand. Combining\ntwo functions with `or` returns a new function that calls each function\nand then `or`s the results together.\n\n``` purescript\neven :or odd -- \\ x -> (even x) :or (odd x)\n(even :or odd) 3 -- true\n```\n","title":"HasOr","info":{"fundeps":[],"arguments":[["a",null]],"declType":"typeClass","superclasses":[]},"sourceSpan":{"start":[39,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasOr.purs","end":[40,20]}}]},{"reExports":[],"name":"Neon.Class.HasPower","comments":null,"declarations":[{"children":[{"comments":null,"title":"power","info":{"declType":"typeClassMember","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[12,3],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasPower.purs","end":[12,23]}},{"comments":null,"title":"intHasPower","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasPower"],"HasPower"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}},"sourceSpan":{"start":[14,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasPower.purs","end":[14,37]}},{"comments":null,"title":"numberHasPower","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasPower"],"HasPower"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]}},"sourceSpan":{"start":[18,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasPower.purs","end":[18,43]}}],"comments":"Represents types that can be exponentiated.\n\n``` purescript\n2 :power 3 -- 8\n```\n","title":"HasPower","info":{"fundeps":[],"arguments":[["a",null]],"declType":"typeClass","superclasses":[]},"sourceSpan":{"start":[11,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasPower.purs","end":[12,23]}}]},{"reExports":[],"name":"Neon.Class.HasPure","comments":null,"declarations":[{"children":[{"comments":null,"title":"pure","info":{"declType":"typeClassMember","type":{"tag":"ForAll","contents":["b",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"a"},{"tag":"TypeVar","contents":"b"}]}]},null]}},"sourceSpan":{"start":[14,3],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasPure.purs","end":[14,29]}},{"comments":null,"title":"arrayHasPure","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasPure"],"HasPure"]},{"tag":"TypeConstructor","contents":[["Prim"],"Array"]}]}},"sourceSpan":{"start":[16,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasPure.purs","end":[16,39]}},{"comments":null,"title":"effHasPure","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasPure"],"HasPure"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad","Eff"],"Eff"]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[19,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasPure.purs","end":[19,46]}},{"comments":null,"title":"listHasPure","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasPure"],"HasPure"]},{"tag":"TypeConstructor","contents":[["Data","List","Types"],"List"]}]}},"sourceSpan":{"start":[22,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasPure.purs","end":[22,42]}},{"comments":null,"title":"maybeHasPure","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasPure"],"HasPure"]},{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]}]}},"sourceSpan":{"start":[25,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasPure.purs","end":[25,44]}}],"comments":"Represents types that allow injecting values into a container.\n\n``` purescript\npure 1 :: Maybe Int -- Just 1\npure 1 :: Array Int -- [1]\n```\n","title":"HasPure","info":{"fundeps":[],"arguments":[["a",null]],"declType":"typeClass","superclasses":[]},"sourceSpan":{"start":[13,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasPure.purs","end":[14,29]}}]},{"reExports":[],"name":"Neon.Class.HasReduce","comments":null,"declarations":[{"children":[{"comments":null,"title":"reduce","info":{"declType":"typeClassMember","type":{"tag":"ForAll","contents":["c",{"tag":"ForAll","contents":["b",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"c"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeVar","contents":"c"}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"c"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"a"},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeVar","contents":"c"}]}]}]},null]},null]}},"sourceSpan":{"start":[13,3],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasReduce.purs","end":[13,55]}},{"comments":null,"title":"arrayHasReduce","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasReduce"],"HasReduce"]},{"tag":"TypeConstructor","contents":[["Prim"],"Array"]}]}},"sourceSpan":{"start":[15,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasReduce.purs","end":[15,43]}},{"comments":null,"title":"listHasReduce","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasReduce"],"HasReduce"]},{"tag":"TypeConstructor","contents":[["Data","List","Types"],"List"]}]}},"sourceSpan":{"start":[18,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasReduce.purs","end":[18,46]}},{"comments":null,"title":"maybeHasReduce","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasReduce"],"HasReduce"]},{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]}]}},"sourceSpan":{"start":[21,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasReduce.purs","end":[21,48]}}],"comments":"Represents types that can be reduced to a single value. This is also known\nas a [fold](https://en.wikipedia.org/wiki/Fold_(higher-order_function)).\n\n``` purescript\n[\"wo\", \"rl\", \"d!\"] :reduce (\\ a e -> a + e) \"hello\" -- \"helloworld!\"\n```\n","title":"HasReduce","info":{"fundeps":[],"arguments":[["a",null]],"declType":"typeClass","superclasses":[]},"sourceSpan":{"start":[12,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasReduce.purs","end":[13,55]}}]},{"reExports":[],"name":"Neon.Class.HasRemainder","comments":null,"declarations":[{"children":[{"comments":null,"title":"remainder","info":{"declType":"typeClassMember","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[13,3],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasRemainder.purs","end":[13,27]}},{"comments":null,"title":"intHasRemainder","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasRemainder"],"HasRemainder"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}},"sourceSpan":{"start":[15,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasRemainder.purs","end":[15,45]}},{"comments":null,"title":"numberHasRemainder","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasRemainder"],"HasRemainder"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]}},"sourceSpan":{"start":[18,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasRemainder.purs","end":[18,51]}}],"comments":"Represents types that are divisible.\n\n``` purescript\n7 :remainder 2 -- 1\n7.0 :remainder 2.0 -- 1.0\n```\n","title":"HasRemainder","info":{"fundeps":[],"arguments":[["a",null]],"declType":"typeClass","superclasses":[]},"sourceSpan":{"start":[12,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasRemainder.purs","end":[13,27]}}]},{"reExports":[],"name":"Neon.Class.HasSubtract","comments":null,"declarations":[{"children":[{"comments":null,"title":"subtract","info":{"declType":"typeClassMember","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[16,3],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasSubtract.purs","end":[16,26]}},{"comments":null,"title":"arrayHasSubtract","info":{"declType":"instance","dependencies":[{"constraintClass":[["Neon","Class","HasEqual"],"HasEqual"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasSubtract"],"HasSubtract"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[18,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasSubtract.purs","end":[18,76]}},{"comments":null,"title":"intHasSubtract","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasSubtract"],"HasSubtract"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}},"sourceSpan":{"start":[23,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasSubtract.purs","end":[23,43]}},{"comments":null,"title":"listHasSubtract","info":{"declType":"instance","dependencies":[{"constraintClass":[["Neon","Class","HasEqual"],"HasEqual"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasSubtract"],"HasSubtract"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","List","Types"],"List"]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[26,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasSubtract.purs","end":[26,79]}},{"comments":null,"title":"numberHasSubtract","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasSubtract"],"HasSubtract"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]}},"sourceSpan":{"start":[31,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasSubtract.purs","end":[31,49]}}],"comments":"Represents types that can be subtracted from each other.\n\n``` purescript\n3 :subtract 2 -- 1\n```\n","title":"HasSubtract","info":{"fundeps":[],"arguments":[["a",null]],"declType":"typeClass","superclasses":[]},"sourceSpan":{"start":[15,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasSubtract.purs","end":[16,26]}}]},{"reExports":[],"name":"Neon.Class.HasToArray","comments":null,"declarations":[{"children":[{"comments":null,"title":"toArray","info":{"declType":"typeClassMember","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"b"}]}]}},"sourceSpan":{"start":[15,3],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasToArray.purs","end":[15,26]}},{"comments":null,"title":"arrayHasToArray","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasToArray"],"HasToArray"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeVar","contents":"a"}]}},"sourceSpan":{"start":[17,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasToArray.purs","end":[17,51]}},{"comments":null,"title":"listHasToArray","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasToArray"],"HasToArray"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","List","Types"],"List"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeVar","contents":"a"}]}},"sourceSpan":{"start":[20,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasToArray.purs","end":[20,54]}},{"comments":null,"title":"maybeHasToArray","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasToArray"],"HasToArray"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeVar","contents":"a"}]}},"sourceSpan":{"start":[23,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasToArray.purs","end":[23,56]}},{"comments":null,"title":"stringHasToArray","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasToArray"],"HasToArray"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Char"]}]}},"sourceSpan":{"start":[28,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasToArray.purs","end":[28,52]}}],"comments":"Represents types that can be converted to an array.\n\n``` purescript\ntoArray (Cons 1 Nil) :: Array Int -- [1]\ntoArray (Just 1) :: Array Int -- [1]\ntoArray \"ab\" :: String -- ['a', 'b']\n```\n","title":"HasToArray","info":{"fundeps":[],"arguments":[["a",null],["b",null]],"declType":"typeClass","superclasses":[]},"sourceSpan":{"start":[14,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasToArray.purs","end":[15,26]}}]},{"reExports":[],"name":"Neon.Class.HasToInt","comments":null,"declarations":[{"children":[{"comments":null,"title":"toInt","info":{"declType":"typeClassMember","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}},"sourceSpan":{"start":[13,3],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasToInt.purs","end":[13,20]}},{"comments":null,"title":"booleanHasToInt","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasToInt"],"HasToInt"]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}},"sourceSpan":{"start":[15,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasToInt.purs","end":[15,45]}},{"comments":null,"title":"charHasToInt","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasToInt"],"HasToInt"]},{"tag":"TypeConstructor","contents":[["Prim"],"Char"]}]}},"sourceSpan":{"start":[18,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasToInt.purs","end":[18,39]}},{"comments":null,"title":"intHasToInt","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasToInt"],"HasToInt"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}},"sourceSpan":{"start":[21,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasToInt.purs","end":[21,37]}},{"comments":null,"title":"orderingHasToInt","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasToInt"],"HasToInt"]},{"tag":"TypeConstructor","contents":[["Data","Ordering"],"Ordering"]}]}},"sourceSpan":{"start":[24,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasToInt.purs","end":[24,52]}}],"comments":"Represents types that can be converted to integers. This is typically used\nfor enumerations.\n\n``` purescript\ntoInt false -- 0\n```\n","title":"HasToInt","info":{"fundeps":[],"arguments":[["a",null]],"declType":"typeClass","superclasses":[]},"sourceSpan":{"start":[12,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasToInt.purs","end":[13,20]}}]},{"reExports":[],"name":"Neon.Class.HasTop","comments":null,"declarations":[{"children":[{"comments":null,"title":"top","info":{"declType":"typeClassMember","type":{"tag":"TypeVar","contents":"a"}},"sourceSpan":{"start":[14,3],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasTop.purs","end":[14,11]}},{"comments":null,"title":"booleanHasTop","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasTop"],"HasTop"]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}},"sourceSpan":{"start":[16,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasTop.purs","end":[16,41]}},{"comments":null,"title":"charHasTop","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasTop"],"HasTop"]},{"tag":"TypeConstructor","contents":[["Prim"],"Char"]}]}},"sourceSpan":{"start":[19,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasTop.purs","end":[19,35]}},{"comments":null,"title":"intHasTop","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasTop"],"HasTop"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}},"sourceSpan":{"start":[22,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasTop.purs","end":[22,33]}},{"comments":null,"title":"numberHasTop","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasTop"],"HasTop"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]}},"sourceSpan":{"start":[25,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasTop.purs","end":[25,39]}},{"comments":null,"title":"orderingHasTop","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasTop"],"HasTop"]},{"tag":"TypeConstructor","contents":[["Data","Ordering"],"Ordering"]}]}},"sourceSpan":{"start":[28,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasTop.purs","end":[28,48]}}],"comments":"Represents types that have an upper bound.\n\n``` purescript\ntop :: Boolean -- true\ntop :: Char -- '\\65535'\n```\n","title":"HasTop","info":{"fundeps":[],"arguments":[["a",null]],"declType":"typeClass","superclasses":[]},"sourceSpan":{"start":[13,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasTop.purs","end":[14,11]}}]},{"reExports":[],"name":"Neon.Class.HasTraverse","comments":null,"declarations":[{"children":[{"comments":null,"title":"traverse","info":{"declType":"typeClassMember","type":{"tag":"ForAll","contents":["m",{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Neon","Class","HasApply"],"HasApply"],"constraintArgs":[{"tag":"TypeVar","contents":"m"}],"constraintData":null},{"tag":"ConstrainedType","contents":[{"constraintClass":[["Neon","Class","HasMap"],"HasMap"],"constraintArgs":[{"tag":"TypeVar","contents":"m"}],"constraintData":null},{"tag":"ConstrainedType","contents":[{"constraintClass":[["Neon","Class","HasPure"],"HasPure"],"constraintArgs":[{"tag":"TypeVar","contents":"m"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"m"},{"tag":"TypeVar","contents":"b"}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"t"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"m"},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"t"},{"tag":"TypeVar","contents":"b"}]}}]}]}]}]}]}]},null]},null]},null]}},"sourceSpan":{"start":[18,3],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasTraverse.purs","end":[18,120]}},{"comments":null,"title":"lrrayHasTraverse","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasTraverse"],"HasTraverse"]},{"tag":"TypeConstructor","contents":[["Prim"],"Array"]}]}},"sourceSpan":{"start":[20,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasTraverse.purs","end":[20,47]}},{"comments":null,"title":"listHasTraverse","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasTraverse"],"HasTraverse"]},{"tag":"TypeConstructor","contents":[["Data","List","Types"],"List"]}]}},"sourceSpan":{"start":[24,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasTraverse.purs","end":[24,50]}},{"comments":null,"title":"laybeHasTraverse","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasTraverse"],"HasTraverse"]},{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]}]}},"sourceSpan":{"start":[29,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasTraverse.purs","end":[29,52]}}],"comments":"Represents data structures that can be traversed from left to right.\nUnlike `Reduce`, these structures can be traversed while keeping their\nshape.\n\n``` purescript\n[1, 2] :traverse (\\ x -> x :inspect :Just) -- Just [\"1\", \"2\"]\n```\n","title":"HasTraverse","info":{"fundeps":[],"arguments":[["t",null]],"declType":"typeClass","superclasses":[]},"sourceSpan":{"start":[17,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasTraverse.purs","end":[18,120]}}]},{"reExports":[],"name":"Neon.Class.HasZero","comments":null,"declarations":[{"children":[{"comments":null,"title":"zero","info":{"declType":"typeClassMember","type":{"tag":"TypeVar","contents":"a"}},"sourceSpan":{"start":[14,3],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasZero.purs","end":[14,12]}},{"comments":null,"title":"arrayHasZero","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasZero"],"HasZero"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[16,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasZero.purs","end":[16,43]}},{"comments":null,"title":"intHasZero","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasZero"],"HasZero"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}},"sourceSpan":{"start":[19,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasZero.purs","end":[19,35]}},{"comments":null,"title":"listHasZero","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasZero"],"HasZero"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","List","Types"],"List"]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[22,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasZero.purs","end":[22,46]}},{"comments":null,"title":"numberHasZero","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasZero"],"HasZero"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]}},"sourceSpan":{"start":[25,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasZero.purs","end":[25,41]}},{"comments":null,"title":"stringHasZero","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Neon","Class","HasZero"],"HasZero"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}},"sourceSpan":{"start":[28,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasZero.purs","end":[28,41]}}],"comments":"Represents types that have an additive identity. This is also known as a\n[monoid](https://en.wikipedia.org/wiki/Monoid).\n\n``` purescript\nzero :: Int -- 0\nzero :: Number -- 0.0\n```\n","title":"HasZero","info":{"fundeps":[],"arguments":[["a",null]],"declType":"typeClass","superclasses":[]},"sourceSpan":{"start":[13,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Class/HasZero.purs","end":[14,12]}}]},{"reExports":[{"moduleName":{"package":"purescript-exceptions","item":["Control","Monad","Eff","Exception"]},"declarations":[{"children":[{"comments":null,"title":"showError","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Show"],"Show"]},{"tag":"TypeConstructor","contents":[["Control","Monad","Eff","Exception"],"Error"]}]}},"sourceSpan":{"start":[30,1],"name":"/Users/adrian/Projects/purescript-neon/bower_components/purescript-exceptions/src/Control/Monad/Eff/Exception.purs","end":[30,33]}}],"comments":"The type of JavaScript errors\n","title":"Error","info":{"kind":{"tag":"NamedKind","contents":[["Prim"],"Type"]},"declType":"externData"},"sourceSpan":{"start":[28,1],"name":"/Users/adrian/Projects/purescript-neon/bower_components/purescript-exceptions/src/Control/Monad/Eff/Exception.purs","end":[28,34]}}]},{"moduleName":{"package":"purescript-lists","item":["Data","List"]},"declarations":[{"children":[{"comments":null,"title":"Nil","info":{"arguments":[],"declType":"dataConstructor"},"sourceSpan":null},{"comments":null,"title":"Cons","info":{"arguments":[{"tag":"TypeVar","contents":"a"},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","List","Types"],"List"]},{"tag":"TypeVar","contents":"a"}]}}],"declType":"dataConstructor"},"sourceSpan":null},{"comments":null,"title":"showList","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","Show"],"Show"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Show"],"Show"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","List","Types"],"List"]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[34,1],"name":"/Users/adrian/Projects/purescript-neon/bower_components/purescript-lists/src/Data/List/Types.purs","end":[34,45]}},{"comments":null,"title":"eqList","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","Eq"],"Eq"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Eq"],"Eq"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","List","Types"],"List"]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[38,1],"name":"/Users/adrian/Projects/purescript-neon/bower_components/purescript-lists/src/Data/List/Types.purs","end":[38,39]}},{"comments":null,"title":"eq1List","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Eq"],"Eq1"]},{"tag":"TypeConstructor","contents":[["Data","List","Types"],"List"]}]}},"sourceSpan":{"start":[41,1],"name":"/Users/adrian/Projects/purescript-neon/bower_components/purescript-lists/src/Data/List/Types.purs","end":[41,29]}},{"comments":null,"title":"ordList","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","Ord"],"Ord"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Ord"],"Ord"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","List","Types"],"List"]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[49,1],"name":"/Users/adrian/Projects/purescript-neon/bower_components/purescript-lists/src/Data/List/Types.purs","end":[49,42]}},{"comments":null,"title":"ord1List","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Ord"],"Ord1"]},{"tag":"TypeConstructor","contents":[["Data","List","Types"],"List"]}]}},"sourceSpan":{"start":[52,1],"name":"/Users/adrian/Projects/purescript-neon/bower_components/purescript-lists/src/Data/List/Types.purs","end":[52,31]}},{"comments":null,"title":"semigroupList","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Semigroup"],"Semigroup"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","List","Types"],"List"]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[63,1],"name":"/Users/adrian/Projects/purescript-neon/bower_components/purescript-lists/src/Data/List/Types.purs","end":[63,45]}},{"comments":null,"title":"monoidList","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Monoid"],"Monoid"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","List","Types"],"List"]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[66,1],"name":"/Users/adrian/Projects/purescript-neon/bower_components/purescript-lists/src/Data/List/Types.purs","end":[66,39]}},{"comments":null,"title":"functorList","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Functor"],"Functor"]},{"tag":"TypeConstructor","contents":[["Data","List","Types"],"List"]}]}},"sourceSpan":{"start":[69,1],"name":"/Users/adrian/Projects/purescript-neon/bower_components/purescript-lists/src/Data/List/Types.purs","end":[69,37]}},{"comments":null,"title":"functorWithIndexList","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","FunctorWithIndex"],"FunctorWithIndex"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeConstructor","contents":[["Data","List","Types"],"List"]}]}},"sourceSpan":{"start":[72,1],"name":"/Users/adrian/Projects/purescript-neon/bower_components/purescript-lists/src/Data/List/Types.purs","end":[72,59]}},{"comments":null,"title":"foldableList","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Foldable"],"Foldable"]},{"tag":"TypeConstructor","contents":[["Data","List","Types"],"List"]}]}},"sourceSpan":{"start":[75,1],"name":"/Users/adrian/Projects/purescript-neon/bower_components/purescript-lists/src/Data/List/Types.purs","end":[75,39]}},{"comments":null,"title":"foldableWithIndexList","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","FoldableWithIndex"],"FoldableWithIndex"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeConstructor","contents":[["Data","List","Types"],"List"]}]}},"sourceSpan":{"start":[86,1],"name":"/Users/adrian/Projects/purescript-neon/bower_components/purescript-lists/src/Data/List/Types.purs","end":[86,61]}},{"comments":null,"title":"unfoldableList","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Unfoldable"],"Unfoldable"]},{"tag":"TypeConstructor","contents":[["Data","List","Types"],"List"]}]}},"sourceSpan":{"start":[102,1],"name":"/Users/adrian/Projects/purescript-neon/bower_components/purescript-lists/src/Data/List/Types.purs","end":[102,43]}},{"comments":null,"title":"traversableList","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Traversable"],"Traversable"]},{"tag":"TypeConstructor","contents":[["Data","List","Types"],"List"]}]}},"sourceSpan":{"start":[109,1],"name":"/Users/adrian/Projects/purescript-neon/bower_components/purescript-lists/src/Data/List/Types.purs","end":[109,45]}},{"comments":null,"title":"traversableWithIndexList","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","TraversableWithIndex"],"TraversableWithIndex"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeConstructor","contents":[["Data","List","Types"],"List"]}]}},"sourceSpan":{"start":[113,1],"name":"/Users/adrian/Projects/purescript-neon/bower_components/purescript-lists/src/Data/List/Types.purs","end":[113,67]}},{"comments":null,"title":"applyList","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Apply"],"Apply"]},{"tag":"TypeConstructor","contents":[["Data","List","Types"],"List"]}]}},"sourceSpan":{"start":[120,1],"name":"/Users/adrian/Projects/purescript-neon/bower_components/purescript-lists/src/Data/List/Types.purs","end":[120,33]}},{"comments":null,"title":"applicativeList","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Applicative"],"Applicative"]},{"tag":"TypeConstructor","contents":[["Data","List","Types"],"List"]}]}},"sourceSpan":{"start":[124,1],"name":"/Users/adrian/Projects/purescript-neon/bower_components/purescript-lists/src/Data/List/Types.purs","end":[124,45]}},{"comments":null,"title":"bindList","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Bind"],"Bind"]},{"tag":"TypeConstructor","contents":[["Data","List","Types"],"List"]}]}},"sourceSpan":{"start":[127,1],"name":"/Users/adrian/Projects/purescript-neon/bower_components/purescript-lists/src/Data/List/Types.purs","end":[127,31]}},{"comments":null,"title":"monadList","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad"],"Monad"]},{"tag":"TypeConstructor","contents":[["Data","List","Types"],"List"]}]}},"sourceSpan":{"start":[131,1],"name":"/Users/adrian/Projects/purescript-neon/bower_components/purescript-lists/src/Data/List/Types.purs","end":[131,33]}},{"comments":null,"title":"altList","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Alt"],"Alt"]},{"tag":"TypeConstructor","contents":[["Data","List","Types"],"List"]}]}},"sourceSpan":{"start":[133,1],"name":"/Users/adrian/Projects/purescript-neon/bower_components/purescript-lists/src/Data/List/Types.purs","end":[133,29]}},{"comments":null,"title":"plusList","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Plus"],"Plus"]},{"tag":"TypeConstructor","contents":[["Data","List","Types"],"List"]}]}},"sourceSpan":{"start":[136,1],"name":"/Users/adrian/Projects/purescript-neon/bower_components/purescript-lists/src/Data/List/Types.purs","end":[136,31]}},{"comments":null,"title":"alternativeList","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Alternative"],"Alternative"]},{"tag":"TypeConstructor","contents":[["Data","List","Types"],"List"]}]}},"sourceSpan":{"start":[139,1],"name":"/Users/adrian/Projects/purescript-neon/bower_components/purescript-lists/src/Data/List/Types.purs","end":[139,45]}},{"comments":null,"title":"monadZeroList","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","MonadZero"],"MonadZero"]},{"tag":"TypeConstructor","contents":[["Data","List","Types"],"List"]}]}},"sourceSpan":{"start":[141,1],"name":"/Users/adrian/Projects/purescript-neon/bower_components/purescript-lists/src/Data/List/Types.purs","end":[141,41]}},{"comments":null,"title":"monadPlusList","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","MonadPlus"],"MonadPlus"]},{"tag":"TypeConstructor","contents":[["Data","List","Types"],"List"]}]}},"sourceSpan":{"start":[143,1],"name":"/Users/adrian/Projects/purescript-neon/bower_components/purescript-lists/src/Data/List/Types.purs","end":[143,41]}},{"comments":null,"title":"extendList","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Extend"],"Extend"]},{"tag":"TypeConstructor","contents":[["Data","List","Types"],"List"]}]}},"sourceSpan":{"start":[145,1],"name":"/Users/adrian/Projects/purescript-neon/bower_components/purescript-lists/src/Data/List/Types.purs","end":[145,35]}}],"comments":null,"title":"List","info":{"declType":"data","dataDeclType":"data","typeArguments":[["a",null]]},"sourceSpan":{"start":[30,1],"name":"/Users/adrian/Projects/purescript-neon/bower_components/purescript-lists/src/Data/List/Types.purs","end":[30,36]}}]},{"moduleName":{"package":"purescript-maybe","item":["Data","Maybe"]},"declarations":[{"children":[{"comments":null,"title":"Nothing","info":{"arguments":[],"declType":"dataConstructor"},"sourceSpan":null},{"comments":null,"title":"Just","info":{"arguments":[{"tag":"TypeVar","contents":"a"}],"declType":"dataConstructor"},"sourceSpan":null},{"comments":"The `Functor` instance allows functions to transform the contents of a\n`Just` with the `<$>` operator:\n\n``` purescript\nf <$> Just x == Just (f x)\n```\n\n`Nothing` values are left untouched:\n\n``` purescript\nf <$> Nothing == Nothing\n```\n","title":"functorMaybe","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Functor"],"Functor"]},{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]}]}},"sourceSpan":{"start":[33,1],"name":"/Users/adrian/Projects/purescript-neon/bower_components/purescript-maybe/src/Data/Maybe.purs","end":[33,39]}},{"comments":"The `Apply` instance allows functions contained within a `Just` to\ntransform a value contained within a `Just` using the `apply` operator:\n\n``` purescript\nJust f <*> Just x == Just (f x)\n```\n\n`Nothing` values are left untouched:\n\n``` purescript\nJust f <*> Nothing == Nothing\nNothing <*> Just x == Nothing\n```\n\nCombining `Functor`'s `<$>` with `Apply`'s `<*>` can be used transform a\npure function to take `Maybe`-typed arguments so `f :: a -> b -> c`\nbecomes `f :: Maybe a -> Maybe b -> Maybe c`:\n\n``` purescript\nf <$> Just x <*> Just y == Just (f x y)\n```\n\nThe `Nothing`-preserving behaviour of both operators means the result of\nan expression like the above but where any one of the values is `Nothing`\nmeans the whole result becomes `Nothing` also:\n\n``` purescript\nf <$> Nothing <*> Just y == Nothing\nf <$> Just x <*> Nothing == Nothing\nf <$> Nothing <*> Nothing == Nothing\n```\n","title":"applyMaybe","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Apply"],"Apply"]},{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]}]}},"sourceSpan":{"start":[68,1],"name":"/Users/adrian/Projects/purescript-neon/bower_components/purescript-maybe/src/Data/Maybe.purs","end":[68,35]}},{"comments":"The `Applicative` instance enables lifting of values into `Maybe` with the\n`pure` or `return` function (`return` is an alias for `pure`):\n\n``` purescript\npure x :: Maybe _ == Just x\nreturn x :: Maybe _ == Just x\n```\n\nCombining `Functor`'s `<$>` with `Apply`'s `<*>` and `Applicative`'s\n`pure` can be used to pass a mixture of `Maybe` and non-`Maybe` typed\nvalues to a function that does not usually expect them, by using `pure`\nfor any value that is not already `Maybe` typed:\n\n``` purescript\nf <$> Just x <*> pure y == Just (f x y)\n```\n\nEven though `pure = Just` it is recommended to use `pure` in situations\nlike this as it allows the choice of `Applicative` to be changed later\nwithout having to go through and replace `Just` with a new constructor.\n","title":"applicativeMaybe","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Applicative"],"Applicative"]},{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]}]}},"sourceSpan":{"start":[92,1],"name":"/Users/adrian/Projects/purescript-neon/bower_components/purescript-maybe/src/Data/Maybe.purs","end":[92,47]}},{"comments":"The `Alt` instance allows for a choice to be made between two `Maybe`\nvalues with the `<|>` operator, where the first `Just` encountered\nis taken.\n\n``` purescript\nJust x <|> Just y == Just x\nNothing <|> Just y == Just y\nNothing <|> Nothing == Nothing\n```\n","title":"altMaybe","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Alt"],"Alt"]},{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]}]}},"sourceSpan":{"start":[104,1],"name":"/Users/adrian/Projects/purescript-neon/bower_components/purescript-maybe/src/Data/Maybe.purs","end":[104,31]}},{"comments":"The `Plus` instance provides a default `Maybe` value:\n\n``` purescript\nempty :: Maybe _ == Nothing\n```\n","title":"plusMaybe","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Plus"],"Plus"]},{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]}]}},"sourceSpan":{"start":[113,1],"name":"/Users/adrian/Projects/purescript-neon/bower_components/purescript-maybe/src/Data/Maybe.purs","end":[113,33]}},{"comments":"The `Alternative` instance guarantees that there are both `Applicative` and\n`Plus` instances for `Maybe`.\n","title":"alternativeMaybe","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Alternative"],"Alternative"]},{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]}]}},"sourceSpan":{"start":[118,1],"name":"/Users/adrian/Projects/purescript-neon/bower_components/purescript-maybe/src/Data/Maybe.purs","end":[118,47]}},{"comments":"The `Bind` instance allows sequencing of `Maybe` values and functions that\nreturn a `Maybe` by using the `>>=` operator:\n\n``` purescript\nJust x >>= f = f x\nNothing >>= f = Nothing\n```\n","title":"bindMaybe","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Bind"],"Bind"]},{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]}]}},"sourceSpan":{"start":[127,1],"name":"/Users/adrian/Projects/purescript-neon/bower_components/purescript-maybe/src/Data/Maybe.purs","end":[127,33]}},{"comments":"The `Monad` instance guarantees that there are both `Applicative` and\n`Bind` instances for `Maybe`. This also enables the `do` syntactic sugar:\n\n``` purescript\ndo\n  x' <- x\n  y' <- y\n  pure (f x' y')\n```\n\nWhich is equivalent to:\n\n``` purescript\nx >>= (\\x' -> y >>= (\\y' -> pure (f x' y')))\n```\n","title":"monadMaybe","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad"],"Monad"]},{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]}]}},"sourceSpan":{"start":[146,1],"name":"/Users/adrian/Projects/purescript-neon/bower_components/purescript-maybe/src/Data/Maybe.purs","end":[146,35]}},{"comments":null,"title":"monadZeroMaybe","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","MonadZero"],"MonadZero"]},{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]}]}},"sourceSpan":{"start":[148,1],"name":"/Users/adrian/Projects/purescript-neon/bower_components/purescript-maybe/src/Data/Maybe.purs","end":[148,43]}},{"comments":"The `Extend` instance allows sequencing of `Maybe` values and functions\nthat accept a `Maybe a` and return a non-`Maybe` result using the\n`<<=` operator.\n\n``` purescript\nf <<= Nothing = Nothing\nf <<= Just x = Just (f x)\n```\n","title":"extendMaybe","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Extend"],"Extend"]},{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]}]}},"sourceSpan":{"start":[158,1],"name":"/Users/adrian/Projects/purescript-neon/bower_components/purescript-maybe/src/Data/Maybe.purs","end":[158,37]}},{"comments":null,"title":"invariantMaybe","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Functor","Invariant"],"Invariant"]},{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]}]}},"sourceSpan":{"start":[162,1],"name":"/Users/adrian/Projects/purescript-neon/bower_components/purescript-maybe/src/Data/Maybe.purs","end":[162,43]}},{"comments":"The `Semigroup` instance enables use of the operator `<>` on `Maybe` values\nwhenever there is a `Semigroup` instance for the type the `Maybe` contains.\nThe exact behaviour of `<>` depends on the \"inner\" `Semigroup` instance,\nbut generally captures the notion of appending or combining things.\n\n``` purescript\nJust x <> Just y = Just (x <> y)\nJust x <> Nothing = Just x\nNothing <> Just y = Just y\nNothing <> Nothing = Nothing\n```\n","title":"semigroupMaybe","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","Semigroup"],"Semigroup"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Semigroup"],"Semigroup"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[176,1],"name":"/Users/adrian/Projects/purescript-neon/bower_components/purescript-maybe/src/Data/Maybe.purs","end":[176,62]}},{"comments":null,"title":"monoidMaybe","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","Semigroup"],"Semigroup"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Monoid"],"Monoid"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[181,1],"name":"/Users/adrian/Projects/purescript-neon/bower_components/purescript-maybe/src/Data/Maybe.purs","end":[181,56]}},{"comments":null,"title":"eqMaybe","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","Eq"],"Eq"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Eq"],"Eq"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[187,8],"name":"/Users/adrian/Projects/purescript-neon/bower_components/purescript-maybe/src/Data/Maybe.purs","end":[187,48]}},{"comments":null,"title":"eq1Maybe","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Eq"],"Eq1"]},{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]}]}},"sourceSpan":{"start":[189,1],"name":"/Users/adrian/Projects/purescript-neon/bower_components/purescript-maybe/src/Data/Maybe.purs","end":[189,31]}},{"comments":null,"title":"ordMaybe","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","Ord"],"Ord"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Ord"],"Ord"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[196,8],"name":"/Users/adrian/Projects/purescript-neon/bower_components/purescript-maybe/src/Data/Maybe.purs","end":[196,51]}},{"comments":null,"title":"ord1Maybe","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Ord"],"Ord1"]},{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]}]}},"sourceSpan":{"start":[198,1],"name":"/Users/adrian/Projects/purescript-neon/bower_components/purescript-maybe/src/Data/Maybe.purs","end":[198,33]}},{"comments":null,"title":"boundedMaybe","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","Bounded"],"Bounded"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Bounded"],"Bounded"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[200,1],"name":"/Users/adrian/Projects/purescript-neon/bower_components/purescript-maybe/src/Data/Maybe.purs","end":[200,56]}},{"comments":"The `Show` instance allows `Maybe` values to be rendered as a string with\n`show` whenever there is an `Show` instance for the type the `Maybe`\ncontains.\n","title":"showMaybe","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","Show"],"Show"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Show"],"Show"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[207,1],"name":"/Users/adrian/Projects/purescript-neon/bower_components/purescript-maybe/src/Data/Maybe.purs","end":[207,47]}}],"comments":"The `Maybe` type is used to represent optional values and can be seen as\nsomething like a type-safe `null`, where `Nothing` is `null` and `Just x`\nis the non-null value `x`.\n","title":"Maybe","info":{"declType":"data","dataDeclType":"data","typeArguments":[["a",null]]},"sourceSpan":{"start":[19,1],"name":"/Users/adrian/Projects/purescript-neon/bower_components/purescript-maybe/src/Data/Maybe.purs","end":[19,32]}}]},{"moduleName":{"package":"purescript-tuples","item":["Data","Tuple"]},"declarations":[{"children":[{"comments":null,"title":"Tuple","info":{"arguments":[{"tag":"TypeVar","contents":"a"},{"tag":"TypeVar","contents":"b"}],"declType":"dataConstructor"},"sourceSpan":null},{"comments":"Allows `Tuple`s to be rendered as a string with `show` whenever there are\n`Show` instances for both component types.\n","title":"showTuple","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","Show"],"Show"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"constraintClass":[["Data","Show"],"Show"],"constraintArgs":[{"tag":"TypeVar","contents":"b"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Show"],"Show"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Tuple"],"Tuple"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]}},"sourceSpan":{"start":[34,1],"name":"/Users/adrian/Projects/purescript-neon/bower_components/purescript-tuples/src/Data/Tuple.purs","end":[34,59]}},{"comments":null,"title":"eqTuple","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","Eq"],"Eq"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"constraintClass":[["Data","Eq"],"Eq"],"constraintArgs":[{"tag":"TypeVar","contents":"b"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Eq"],"Eq"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Tuple"],"Tuple"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]}},"sourceSpan":{"start":[39,8],"name":"/Users/adrian/Projects/purescript-neon/bower_components/purescript-tuples/src/Data/Tuple.purs","end":[39,58]}},{"comments":null,"title":"eq1Tuple","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","Eq"],"Eq"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Eq"],"Eq1"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Tuple"],"Tuple"]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[41,1],"name":"/Users/adrian/Projects/purescript-neon/bower_components/purescript-tuples/src/Data/Tuple.purs","end":[41,43]}},{"comments":null,"title":"ordTuple","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","Ord"],"Ord"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"constraintClass":[["Data","Ord"],"Ord"],"constraintArgs":[{"tag":"TypeVar","contents":"b"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Ord"],"Ord"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Tuple"],"Tuple"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]}},"sourceSpan":{"start":[47,8],"name":"/Users/adrian/Projects/purescript-neon/bower_components/purescript-tuples/src/Data/Tuple.purs","end":[47,62]}},{"comments":null,"title":"ord1Tuple","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","Ord"],"Ord"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Ord"],"Ord1"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Tuple"],"Tuple"]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[49,1],"name":"/Users/adrian/Projects/purescript-neon/bower_components/purescript-tuples/src/Data/Tuple.purs","end":[49,46]}},{"comments":null,"title":"boundedTuple","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","Bounded"],"Bounded"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"constraintClass":[["Data","Bounded"],"Bounded"],"constraintArgs":[{"tag":"TypeVar","contents":"b"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Bounded"],"Bounded"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Tuple"],"Tuple"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]}},"sourceSpan":{"start":[51,1],"name":"/Users/adrian/Projects/purescript-neon/bower_components/purescript-tuples/src/Data/Tuple.purs","end":[51,71]}},{"comments":null,"title":"semigroupoidTuple","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Semigroupoid"],"Semigroupoid"]},{"tag":"TypeConstructor","contents":[["Data","Tuple"],"Tuple"]}]}},"sourceSpan":{"start":[55,1],"name":"/Users/adrian/Projects/purescript-neon/bower_components/purescript-tuples/src/Data/Tuple.purs","end":[55,49]}},{"comments":"The `Semigroup` instance enables use of the associative operator `<>` on\n`Tuple`s whenever there are `Semigroup` instances for the component\ntypes. The `<>` operator is applied pairwise, so:\n```purescript\n(Tuple a1 b1) <> (Tuple a2 b2) = Tuple (a1 <> a2) (b1 <> b2)\n```\n","title":"semigroupTuple","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","Semigroup"],"Semigroup"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"constraintClass":[["Data","Semigroup"],"Semigroup"],"constraintArgs":[{"tag":"TypeVar","contents":"b"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Semigroup"],"Semigroup"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Tuple"],"Tuple"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]}},"sourceSpan":{"start":[64,1],"name":"/Users/adrian/Projects/purescript-neon/bower_components/purescript-tuples/src/Data/Tuple.purs","end":[64,79]}},{"comments":null,"title":"monoidTuple","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","Monoid"],"Monoid"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"constraintClass":[["Data","Monoid"],"Monoid"],"constraintArgs":[{"tag":"TypeVar","contents":"b"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Monoid"],"Monoid"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Tuple"],"Tuple"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]}},"sourceSpan":{"start":[67,1],"name":"/Users/adrian/Projects/purescript-neon/bower_components/purescript-tuples/src/Data/Tuple.purs","end":[67,67]}},{"comments":null,"title":"semiringTuple","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","Semiring"],"Semiring"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"constraintClass":[["Data","Semiring"],"Semiring"],"constraintArgs":[{"tag":"TypeVar","contents":"b"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Semiring"],"Semiring"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Tuple"],"Tuple"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]}},"sourceSpan":{"start":[70,1],"name":"/Users/adrian/Projects/purescript-neon/bower_components/purescript-tuples/src/Data/Tuple.purs","end":[70,75]}},{"comments":null,"title":"ringTuple","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","Ring"],"Ring"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"constraintClass":[["Data","Ring"],"Ring"],"constraintArgs":[{"tag":"TypeVar","contents":"b"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Ring"],"Ring"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Tuple"],"Tuple"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]}},"sourceSpan":{"start":[76,1],"name":"/Users/adrian/Projects/purescript-neon/bower_components/purescript-tuples/src/Data/Tuple.purs","end":[76,59]}},{"comments":null,"title":"commutativeRingTuple","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","CommutativeRing"],"CommutativeRing"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"constraintClass":[["Data","CommutativeRing"],"CommutativeRing"],"constraintArgs":[{"tag":"TypeVar","contents":"b"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","CommutativeRing"],"CommutativeRing"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Tuple"],"Tuple"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]}},"sourceSpan":{"start":[79,1],"name":"/Users/adrian/Projects/purescript-neon/bower_components/purescript-tuples/src/Data/Tuple.purs","end":[79,103]}},{"comments":null,"title":"heytingAlgebraTuple","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","HeytingAlgebra"],"HeytingAlgebra"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"constraintClass":[["Data","HeytingAlgebra"],"HeytingAlgebra"],"constraintArgs":[{"tag":"TypeVar","contents":"b"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","HeytingAlgebra"],"HeytingAlgebra"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Tuple"],"Tuple"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]}},"sourceSpan":{"start":[81,1],"name":"/Users/adrian/Projects/purescript-neon/bower_components/purescript-tuples/src/Data/Tuple.purs","end":[81,99]}},{"comments":null,"title":"booleanAlgebraTuple","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","BooleanAlgebra"],"BooleanAlgebra"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"constraintClass":[["Data","BooleanAlgebra"],"BooleanAlgebra"],"constraintArgs":[{"tag":"TypeVar","contents":"b"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","BooleanAlgebra"],"BooleanAlgebra"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Tuple"],"Tuple"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]}},"sourceSpan":{"start":[89,1],"name":"/Users/adrian/Projects/purescript-neon/bower_components/purescript-tuples/src/Data/Tuple.purs","end":[89,99]}},{"comments":"The `Functor` instance allows functions to transform the contents of a\n`Tuple` with the `<$>` operator, applying the function to the second\ncomponent, so:\n```purescript\nf <$> (Tuple x y) = Tuple x (f y)\n````\n","title":"functorTuple","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Functor"],"Functor"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Tuple"],"Tuple"]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[97,1],"name":"/Users/adrian/Projects/purescript-neon/bower_components/purescript-tuples/src/Data/Tuple.purs","end":[97,43]}},{"comments":null,"title":"invariantTuple","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Functor","Invariant"],"Invariant"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Tuple"],"Tuple"]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[100,1],"name":"/Users/adrian/Projects/purescript-neon/bower_components/purescript-tuples/src/Data/Tuple.purs","end":[100,47]}},{"comments":null,"title":"bifunctorTuple","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Bifunctor"],"Bifunctor"]},{"tag":"TypeConstructor","contents":[["Data","Tuple"],"Tuple"]}]}},"sourceSpan":{"start":[103,1],"name":"/Users/adrian/Projects/purescript-neon/bower_components/purescript-tuples/src/Data/Tuple.purs","end":[103,43]}},{"comments":"The `Functor` instance allows functions to transform the contents of a\n`Tuple` with the `<*>` operator whenever there is a `Semigroup` instance\nfor the `fst` component, so:\n```purescript\n(Tuple a1 f) <*> (Tuple a2 x) == Tuple (a1 <> a2) (f x)\n```\n","title":"applyTuple","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","Semigroup"],"Semigroup"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Apply"],"Apply"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Tuple"],"Tuple"]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[112,1],"name":"/Users/adrian/Projects/purescript-neon/bower_components/purescript-tuples/src/Data/Tuple.purs","end":[112,56]}},{"comments":null,"title":"biapplyTuple","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Biapply"],"Biapply"]},{"tag":"TypeConstructor","contents":[["Data","Tuple"],"Tuple"]}]}},"sourceSpan":{"start":[115,1],"name":"/Users/adrian/Projects/purescript-neon/bower_components/purescript-tuples/src/Data/Tuple.purs","end":[115,39]}},{"comments":null,"title":"applicativeTuple","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","Monoid"],"Monoid"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Applicative"],"Applicative"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Tuple"],"Tuple"]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[118,1],"name":"/Users/adrian/Projects/purescript-neon/bower_components/purescript-tuples/src/Data/Tuple.purs","end":[118,65]}},{"comments":null,"title":"biapplicativeTuple","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Biapplicative"],"Biapplicative"]},{"tag":"TypeConstructor","contents":[["Data","Tuple"],"Tuple"]}]}},"sourceSpan":{"start":[121,1],"name":"/Users/adrian/Projects/purescript-neon/bower_components/purescript-tuples/src/Data/Tuple.purs","end":[121,51]}},{"comments":null,"title":"bindTuple","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","Semigroup"],"Semigroup"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Bind"],"Bind"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Tuple"],"Tuple"]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[124,1],"name":"/Users/adrian/Projects/purescript-neon/bower_components/purescript-tuples/src/Data/Tuple.purs","end":[124,54]}},{"comments":null,"title":"monadTuple","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","Monoid"],"Monoid"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad"],"Monad"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Tuple"],"Tuple"]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[128,1],"name":"/Users/adrian/Projects/purescript-neon/bower_components/purescript-tuples/src/Data/Tuple.purs","end":[128,53]}},{"comments":null,"title":"extendTuple","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Extend"],"Extend"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Tuple"],"Tuple"]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[130,1],"name":"/Users/adrian/Projects/purescript-neon/bower_components/purescript-tuples/src/Data/Tuple.purs","end":[130,41]}},{"comments":null,"title":"comonadTuple","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Comonad"],"Comonad"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Tuple"],"Tuple"]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[133,1],"name":"/Users/adrian/Projects/purescript-neon/bower_components/purescript-tuples/src/Data/Tuple.purs","end":[133,43]}},{"comments":null,"title":"lazyTuple","info":{"declType":"instance","dependencies":[{"constraintClass":[["Control","Lazy"],"Lazy"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"constraintClass":[["Control","Lazy"],"Lazy"],"constraintArgs":[{"tag":"TypeVar","contents":"b"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Lazy"],"Lazy"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Tuple"],"Tuple"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]}},"sourceSpan":{"start":[136,1],"name":"/Users/adrian/Projects/purescript-neon/bower_components/purescript-tuples/src/Data/Tuple.purs","end":[136,59]}},{"comments":null,"title":"foldableTuple","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Foldable"],"Foldable"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Tuple"],"Tuple"]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[139,1],"name":"/Users/adrian/Projects/purescript-neon/bower_components/purescript-tuples/src/Data/Tuple.purs","end":[139,45]}},{"comments":null,"title":"bifoldableTuple","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Bifoldable"],"Bifoldable"]},{"tag":"TypeConstructor","contents":[["Data","Tuple"],"Tuple"]}]}},"sourceSpan":{"start":[144,1],"name":"/Users/adrian/Projects/purescript-neon/bower_components/purescript-tuples/src/Data/Tuple.purs","end":[144,45]}},{"comments":null,"title":"traversableTuple","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Traversable"],"Traversable"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Tuple"],"Tuple"]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[149,1],"name":"/Users/adrian/Projects/purescript-neon/bower_components/purescript-tuples/src/Data/Tuple.purs","end":[149,51]}},{"comments":null,"title":"bitraversableTuple","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Bitraversable"],"Bitraversable"]},{"tag":"TypeConstructor","contents":[["Data","Tuple"],"Tuple"]}]}},"sourceSpan":{"start":[153,1],"name":"/Users/adrian/Projects/purescript-neon/bower_components/purescript-tuples/src/Data/Tuple.purs","end":[153,51]}},{"comments":null,"title":"distributiveTuple","info":{"declType":"instance","dependencies":[{"constraintClass":[["Type","Equality"],"TypeEquals"],"constraintArgs":[{"tag":"TypeVar","contents":"a"},{"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Distributive"],"Distributive"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Tuple"],"Tuple"]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[157,1],"name":"/Users/adrian/Projects/purescript-neon/bower_components/purescript-tuples/src/Data/Tuple.purs","end":[157,74]}}],"comments":"A simple product type for wrapping a pair of component values.\n","title":"Tuple","info":{"declType":"data","dataDeclType":"data","typeArguments":[["a",null],["b",null]]},"sourceSpan":{"start":[30,1],"name":"/Users/adrian/Projects/purescript-neon/bower_components/purescript-tuples/src/Data/Tuple.purs","end":[30,27]}}]},{"moduleName":{"package":"purescript-prelude","item":["Prelude"]},"declarations":[{"children":[{"comments":null,"title":"showUnit","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Show"],"Show"]},{"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}},"sourceSpan":{"start":[16,1],"name":"/Users/adrian/Projects/purescript-neon/bower_components/purescript-prelude/src/Data/Unit.purs","end":[16,31]}}],"comments":"The `Unit` type has a single inhabitant, called `unit`. It represents\nvalues with no computational content.\n\n`Unit` is often used, wrapped in a monadic type constructor, as the\nreturn type of a computation where only\nthe _effects_ are important.\n","title":"Unit","info":{"kind":{"tag":"NamedKind","contents":[["Prim"],"Type"]},"declType":"externData"},"sourceSpan":{"start":[11,1],"name":"/Users/adrian/Projects/purescript-neon/bower_components/purescript-prelude/src/Data/Unit.purs","end":[11,33]}},{"children":[{"comments":null,"title":"LT","info":{"arguments":[],"declType":"dataConstructor"},"sourceSpan":null},{"comments":null,"title":"GT","info":{"arguments":[],"declType":"dataConstructor"},"sourceSpan":null},{"comments":null,"title":"EQ","info":{"arguments":[],"declType":"dataConstructor"},"sourceSpan":null},{"comments":null,"title":"eqOrdering","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Eq"],"Eq"]},{"tag":"TypeConstructor","contents":[["Data","Ordering"],"Ordering"]}]}},"sourceSpan":{"start":[15,1],"name":"/Users/adrian/Projects/purescript-neon/bower_components/purescript-prelude/src/Data/Ordering.purs","end":[15,35]}},{"comments":null,"title":"semigroupOrdering","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Semigroup"],"Semigroup"]},{"tag":"TypeConstructor","contents":[["Data","Ordering"],"Ordering"]}]}},"sourceSpan":{"start":[21,1],"name":"/Users/adrian/Projects/purescript-neon/bower_components/purescript-prelude/src/Data/Ordering.purs","end":[21,49]}},{"comments":null,"title":"showOrdering","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Show"],"Show"]},{"tag":"TypeConstructor","contents":[["Data","Ordering"],"Ordering"]}]}},"sourceSpan":{"start":[26,1],"name":"/Users/adrian/Projects/purescript-neon/bower_components/purescript-prelude/src/Data/Ordering.purs","end":[26,39]}}],"comments":"The `Ordering` data type represents the three possible outcomes of\ncomparing two values:\n\n`LT` - The first value is _less than_ the second.\n`GT` - The first value is _greater than_ the second.\n`EQ` - The first value is _equal to_ the second.\n","title":"Ordering","info":{"declType":"data","dataDeclType":"data","typeArguments":[]},"sourceSpan":{"start":[13,1],"name":"/Users/adrian/Projects/purescript-neon/bower_components/purescript-prelude/src/Data/Ordering.purs","end":[13,29]}},{"children":[],"comments":"`unit` is the sole inhabitant of the `Unit` type.\n","title":"unit","info":{"declType":"value","type":{"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}},"sourceSpan":{"start":[14,1],"name":"/Users/adrian/Projects/purescript-neon/bower_components/purescript-prelude/src/Data/Unit.purs","end":[14,28]}}]},{"moduleName":{"package":"purescript-proxy","item":["Type","Proxy"]},"declarations":[{"children":[{"comments":null,"title":"Proxy","info":{"arguments":[],"declType":"dataConstructor"},"sourceSpan":null},{"comments":null,"title":"eqProxy","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Eq"],"Eq"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Type","Proxy"],"Proxy"]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[56,8],"name":"/Users/adrian/Projects/purescript-neon/bower_components/purescript-proxy/src/Type/Proxy.purs","end":[56,40]}},{"comments":null,"title":"functorProxy","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Functor"],"Functor"]},{"tag":"TypeConstructor","contents":[["Type","Proxy"],"Proxy"]}]}},"sourceSpan":{"start":[58,8],"name":"/Users/adrian/Projects/purescript-neon/bower_components/purescript-proxy/src/Type/Proxy.purs","end":[58,46]}},{"comments":null,"title":"ordProxy","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Ord"],"Ord"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Type","Proxy"],"Proxy"]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[60,8],"name":"/Users/adrian/Projects/purescript-neon/bower_components/purescript-proxy/src/Type/Proxy.purs","end":[60,42]}},{"comments":null,"title":"applicativeProxy","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Applicative"],"Applicative"]},{"tag":"TypeConstructor","contents":[["Type","Proxy"],"Proxy"]}]}},"sourceSpan":{"start":[62,1],"name":"/Users/adrian/Projects/purescript-neon/bower_components/purescript-proxy/src/Type/Proxy.purs","end":[62,47]}},{"comments":null,"title":"applyProxy","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Apply"],"Apply"]},{"tag":"TypeConstructor","contents":[["Type","Proxy"],"Proxy"]}]}},"sourceSpan":{"start":[65,1],"name":"/Users/adrian/Projects/purescript-neon/bower_components/purescript-proxy/src/Type/Proxy.purs","end":[65,35]}},{"comments":null,"title":"bindProxy","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Bind"],"Bind"]},{"tag":"TypeConstructor","contents":[["Type","Proxy"],"Proxy"]}]}},"sourceSpan":{"start":[68,1],"name":"/Users/adrian/Projects/purescript-neon/bower_components/purescript-proxy/src/Type/Proxy.purs","end":[68,33]}},{"comments":null,"title":"booleanAlgebraProxy","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","BooleanAlgebra"],"BooleanAlgebra"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Type","Proxy"],"Proxy"]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[71,1],"name":"/Users/adrian/Projects/purescript-neon/bower_components/purescript-proxy/src/Type/Proxy.purs","end":[71,57]}},{"comments":null,"title":"boundedProxy","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Bounded"],"Bounded"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Type","Proxy"],"Proxy"]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[73,1],"name":"/Users/adrian/Projects/purescript-neon/bower_components/purescript-proxy/src/Type/Proxy.purs","end":[73,43]}},{"comments":null,"title":"commutativeRingProxy","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","CommutativeRing"],"CommutativeRing"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Type","Proxy"],"Proxy"]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[77,1],"name":"/Users/adrian/Projects/purescript-neon/bower_components/purescript-proxy/src/Type/Proxy.purs","end":[77,59]}},{"comments":null,"title":"discardProxy","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Bind"],"Discard"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Type","Proxy"],"Proxy"]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[79,1],"name":"/Users/adrian/Projects/purescript-neon/bower_components/purescript-proxy/src/Type/Proxy.purs","end":[79,43]}},{"comments":null,"title":"heytingAlgebraProxy","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","HeytingAlgebra"],"HeytingAlgebra"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Type","Proxy"],"Proxy"]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[82,1],"name":"/Users/adrian/Projects/purescript-neon/bower_components/purescript-proxy/src/Type/Proxy.purs","end":[82,57]}},{"comments":null,"title":"monadProxy","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad"],"Monad"]},{"tag":"TypeConstructor","contents":[["Type","Proxy"],"Proxy"]}]}},"sourceSpan":{"start":[90,1],"name":"/Users/adrian/Projects/purescript-neon/bower_components/purescript-proxy/src/Type/Proxy.purs","end":[90,35]}},{"comments":null,"title":"ringProxy","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Ring"],"Ring"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Type","Proxy"],"Proxy"]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[92,1],"name":"/Users/adrian/Projects/purescript-neon/bower_components/purescript-proxy/src/Type/Proxy.purs","end":[92,37]}},{"comments":null,"title":"semigroupProxy","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Semigroup"],"Semigroup"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Type","Proxy"],"Proxy"]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[95,1],"name":"/Users/adrian/Projects/purescript-neon/bower_components/purescript-proxy/src/Type/Proxy.purs","end":[95,47]}},{"comments":null,"title":"semiringProxy","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Semiring"],"Semiring"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Type","Proxy"],"Proxy"]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[98,1],"name":"/Users/adrian/Projects/purescript-neon/bower_components/purescript-proxy/src/Type/Proxy.purs","end":[98,45]}},{"comments":null,"title":"showProxy","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Show"],"Show"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Type","Proxy"],"Proxy"]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[104,1],"name":"/Users/adrian/Projects/purescript-neon/bower_components/purescript-proxy/src/Type/Proxy.purs","end":[104,37]}}],"comments":"Value proxy for kind `Type` types.\n","title":"Proxy","info":{"declType":"data","dataDeclType":"data","typeArguments":[["a",null]]},"sourceSpan":{"start":[54,1],"name":"/Users/adrian/Projects/purescript-neon/bower_components/purescript-proxy/src/Type/Proxy.purs","end":[54,21]}}]}],"name":"Neon.Data","comments":"Data types and constructors.\n","declarations":[{"children":[],"comments":"Creates an exception with the given message.\n\n``` purescript\nexception \"example\"\n```\n","title":"exception","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeConstructor","contents":[["Control","Monad","Eff","Exception"],"Error"]}]}},"sourceSpan":{"start":[21,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Data.purs","end":[21,39]}}]},{"reExports":[{"moduleName":{"package":"purescript-eff","item":["Control","Monad","Eff"]},"declarations":[{"children":[{"comments":null,"title":"functorEff","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Functor"],"Functor"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad","Eff"],"Eff"]},{"tag":"TypeVar","contents":"e"}]}]}},"sourceSpan":{"start":[38,1],"name":"/Users/adrian/Projects/purescript-neon/bower_components/purescript-eff/src/Control/Monad/Eff.purs","end":[38,39]}},{"comments":null,"title":"applyEff","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Apply"],"Apply"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad","Eff"],"Eff"]},{"tag":"TypeVar","contents":"e"}]}]}},"sourceSpan":{"start":[41,1],"name":"/Users/adrian/Projects/purescript-neon/bower_components/purescript-eff/src/Control/Monad/Eff.purs","end":[41,35]}},{"comments":null,"title":"applicativeEff","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Applicative"],"Applicative"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad","Eff"],"Eff"]},{"tag":"TypeVar","contents":"e"}]}]}},"sourceSpan":{"start":[44,1],"name":"/Users/adrian/Projects/purescript-neon/bower_components/purescript-eff/src/Control/Monad/Eff.purs","end":[44,47]}},{"comments":null,"title":"bindEff","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Bind"],"Bind"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad","Eff"],"Eff"]},{"tag":"TypeVar","contents":"e"}]}]}},"sourceSpan":{"start":[49,1],"name":"/Users/adrian/Projects/purescript-neon/bower_components/purescript-eff/src/Control/Monad/Eff.purs","end":[49,33]}},{"comments":null,"title":"monadEff","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad"],"Monad"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad","Eff"],"Eff"]},{"tag":"TypeVar","contents":"e"}]}]}},"sourceSpan":{"start":[54,1],"name":"/Users/adrian/Projects/purescript-neon/bower_components/purescript-eff/src/Control/Monad/Eff.purs","end":[54,35]}}],"comments":"The `Eff` type constructor is used to represent _native_ effects.\n\nSee [Handling Native Effects with the Eff Monad](http://www.purescript.org/learn/eff/)\nfor more details.\n\nThe first type parameter is a row of effects which represents the contexts\nin which a computation can be run, and the second type parameter is the\nreturn type.\n","title":"Eff","info":{"kind":{"tag":"FunKind","contents":[{"tag":"Row","contents":{"tag":"NamedKind","contents":[["Control","Monad","Eff"],"Effect"]}},{"tag":"FunKind","contents":[{"tag":"NamedKind","contents":[["Prim"],"Type"]},{"tag":"NamedKind","contents":[["Prim"],"Type"]}]}]},"declType":"externData"},"sourceSpan":{"start":[36,1],"name":"/Users/adrian/Projects/purescript-neon/bower_components/purescript-eff/src/Control/Monad/Eff.purs","end":[36,52]}},{"children":[],"comments":"Run a pure computation and return its result.\n","title":"runPure","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad","Eff"],"Pure"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeVar","contents":"a"}]},null]}},"sourceSpan":{"start":[64,1],"name":"/Users/adrian/Projects/purescript-neon/bower_components/purescript-eff/src/Control/Monad/Eff.purs","end":[64,48]}}]},{"moduleName":{"package":"purescript-console","item":["Control","Monad","Eff","Console"]},"declarations":[{"children":[],"comments":"The `CONSOLE` effect represents those computations which write to the\nconsole.\n","title":"CONSOLE","info":{"kind":{"tag":"NamedKind","contents":[["Control","Monad","Eff"],"Effect"]},"declType":"externData"},"sourceSpan":{"start":[10,1],"name":"/Users/adrian/Projects/purescript-neon/bower_components/purescript-console/src/Control/Monad/Eff/Console.purs","end":[10,38]}},{"children":[],"comments":"Write a message to the console.\n","title":"log","info":{"declType":"value","type":{"tag":"ForAll","contents":["eff",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad","Eff"],"Eff"]},{"tag":"RCons","contents":["console",{"tag":"TypeConstructor","contents":[["Control","Monad","Eff","Console"],"CONSOLE"]},{"tag":"TypeVar","contents":"eff"}]}]},{"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}]},null]}},"sourceSpan":{"start":[13,1],"name":"/Users/adrian/Projects/purescript-neon/bower_components/purescript-console/src/Control/Monad/Eff/Console.purs","end":[16,41]}},{"children":[],"comments":"Write an error to the console.\n","title":"error","info":{"declType":"value","type":{"tag":"ForAll","contents":["eff",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad","Eff"],"Eff"]},{"tag":"RCons","contents":["console",{"tag":"TypeConstructor","contents":[["Control","Monad","Eff","Console"],"CONSOLE"]},{"tag":"TypeVar","contents":"eff"}]}]},{"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}]},null]}},"sourceSpan":{"start":[35,1],"name":"/Users/adrian/Projects/purescript-neon/bower_components/purescript-console/src/Control/Monad/Eff/Console.purs","end":[38,41]}}]},{"moduleName":{"package":"purescript-exceptions","item":["Control","Monad","Eff","Exception"]},"declarations":[{"children":[],"comments":"This effect is used to annotate code which possibly throws exceptions\n","title":"EXCEPTION","info":{"kind":{"tag":"NamedKind","contents":[["Control","Monad","Eff"],"Effect"]},"declType":"externData"},"sourceSpan":{"start":[25,1],"name":"/Users/adrian/Projects/purescript-neon/bower_components/purescript-exceptions/src/Control/Monad/Eff/Exception.purs","end":[25,40]}}]},{"moduleName":{"package":"purescript-random","item":["Control","Monad","Eff","Random"]},"declarations":[{"children":[],"comments":"The `RANDOM` effect indicates that an Eff action may access or modify the\nJavaScript global random number generator, i.e. `Math.random()`.\n","title":"RANDOM","info":{"kind":{"tag":"NamedKind","contents":[["Control","Monad","Eff"],"Effect"]},"declType":"externData"},"sourceSpan":{"start":[11,1],"name":"/Users/adrian/Projects/purescript-neon/bower_components/purescript-random/src/Control/Monad/Eff/Random.purs","end":[11,37]}}]},{"moduleName":{"package":"purescript-eff","item":["Control","Monad","Eff","Unsafe"]},"declarations":[{"children":[],"comments":"Run an effectful computation.\n\n*Note*: use of this function can result in arbitrary side-effects.\n","title":"unsafePerformEff","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["eff",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad","Eff"],"Eff"]},{"tag":"TypeVar","contents":"eff"}]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeVar","contents":"a"}]},null]},null]}},"sourceSpan":{"start":[18,1],"name":"/Users/adrian/Projects/purescript-neon/bower_components/purescript-eff/src/Control/Monad/Eff/Unsafe.purs","end":[18,49]}}]}],"name":"Neon.Effect","comments":"Types and functions for dealing with effects. Includes synchronous effects\n(`Eff`) as well as effectful types (like `CONSOLE`).\n","declarations":[{"children":[],"comments":"Catches an exception by providing and exception handler. The handler\nremoves the `EXCEPTION` effect.\n\n``` purescript\ncatch (\\ x -> error x) (throw (exception \"example\")))\n```\n","title":"catch","info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Control","Monad","Eff","Exception"],"Error"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad","Eff"],"Eff"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeVar","contents":"a"}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad","Eff"],"Eff"]},{"tag":"RCons","contents":["exception",{"tag":"TypeConstructor","contents":[["Control","Monad","Eff","Exception"],"EXCEPTION"]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad","Eff"],"Eff"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeVar","contents":"a"}]}]}]},null]},null]}},"sourceSpan":{"start":[23,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Effect.purs","end":[23,121]}},{"children":[],"comments":"Throws an exception.\n\n``` purescript\nthrow (exception \"example\"))\n```\n","title":"throw","info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Control","Monad","Eff","Exception"],"Error"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad","Eff"],"Eff"]},{"tag":"RCons","contents":["exception",{"tag":"TypeConstructor","contents":[["Control","Monad","Eff","Exception"],"EXCEPTION"]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeVar","contents":"a"}]}]},null]},null]}},"sourceSpan":{"start":[31,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Effect.purs","end":[31,89]}}]},{"reExports":[],"name":"Neon.Helper","comments":"Helper functions that are defined in terms of other primitives.\n\nMany of these should be type class members with default implementations.\nUnfortunately PureScript doesn't support that yet. They are defined in\nhere to make adding type class instances as easy as possible. The downside\nis that things like `size` are O(n) when they could be O(1) for some\ncontainer types.\n","declarations":[{"children":[],"comments":"Returns the absolute value of a number.\n\n``` purescript\nabsoluteValue (-2) -- 2\nabsoluteValue 3 -- 3\n```\n","title":"absoluteValue","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Neon","Class","HasLess"],"HasLess"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"tag":"ConstrainedType","contents":[{"constraintClass":[["Neon","Class","HasSubtract"],"HasSubtract"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"tag":"ConstrainedType","contents":[{"constraintClass":[["Neon","Class","HasZero"],"HasZero"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"a"}]}]}]}]},null]}},"sourceSpan":{"start":[23,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Helper.purs","end":[23,95]}},{"children":[],"comments":"Returns true if all of the elements in the collection pass the predicate.\n\n``` purescript\n[2, 3] :all (_ > 1) -- true\n[2, 1] :all (_ > 1) -- false\n```\n","title":"all","info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Neon","Class","HasReduce"],"HasReduce"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"a"},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}]}]},null]},null]}},"sourceSpan":{"start":[32,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Helper.purs","end":[32,75]}},{"children":[],"comments":"Returns true if any of the elements in the collection pass the predicate.\n\n``` purescript\n[1, 2] :any (_ > 1) -- true\n[1, 0] :any (_ > 1) -- false\n```\n","title":"any","info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Neon","Class","HasReduce"],"HasReduce"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"a"},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}]}]},null]},null]}},"sourceSpan":{"start":[41,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Helper.purs","end":[41,75]}},{"children":[],"comments":"A type-restricted version of `always`.\n\n``` purescript\n[] :asTypeOf [1] -- [] :: Array Int\n```\n","title":"asTypeOf","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"a"}]}]},null]}},"sourceSpan":{"start":[49,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Helper.purs","end":[49,34]}},{"children":[],"comments":"A version of `chain` with the arguments flipped. This is provided only to\nsupport desugaring `do` notation. It is not recommended to use explicitly.\n","title":"bind","info":{"declType":"value","type":{"tag":"ForAll","contents":["c",{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Neon","Class","HasChain"],"HasChain"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"a"},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"a"},{"tag":"TypeVar","contents":"c"}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"a"},{"tag":"TypeVar","contents":"c"}]}]}]}]},null]},null]},null]}},"sourceSpan":{"start":[54,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Helper.purs","end":[54,69]}},{"children":[],"comments":"Clamps a value between some bounds. If the lower bound is greater than the\nupper bound, they will be swapped.\n\n``` purescript\n2 :clamp 3 5 -- 3\n4 :clamp 3 5 -- 4\n6 :clamp 3 5 -- 5\n6 :clamp 5 3 -- 5\n```\n","title":"clamp","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Neon","Class","HasGreater"],"HasGreater"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"tag":"ConstrainedType","contents":[{"constraintClass":[["Neon","Class","HasLess"],"HasLess"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"a"}]}]}]}]}]},null]}},"sourceSpan":{"start":[66,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Helper.purs","end":[66,77]}},{"children":[],"comments":"Returns true if the container contains the element.\n\n``` purescript\n[1, 2, 3] :contains 2 -- true\n[1, 0, 3] :contains 2 -- false\n```\n","title":"contains","info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Neon","Class","HasEqual"],"HasEqual"],"constraintArgs":[{"tag":"TypeVar","contents":"b"}],"constraintData":null},{"tag":"ConstrainedType","contents":[{"constraintClass":[["Neon","Class","HasReduce"],"HasReduce"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"a"},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}]}]}]},null]},null]}},"sourceSpan":{"start":[78,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Helper.purs","end":[78,85]}},{"children":[],"comments":"Converts a function that operates on tuples to a normal function.\n\n``` purescript\nlet f (Tuple x y) = x + y\ncurry f \"a\" \"b\" -- \"ab\"\n```\n","title":"curry","info":{"declType":"value","type":{"tag":"ForAll","contents":["c",{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Tuple"],"Tuple"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeVar","contents":"c"}]}}]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeVar","contents":"c"}]}]}}]},null]},null]},null]}},"sourceSpan":{"start":[87,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Helper.purs","end":[87,62]}},{"children":[],"comments":"Decreases a value by one. If the value is already the bottom, nothing will\nbe returned.\n\n``` purescript\ndecrement 'b' -- Just 'a'\ndecrement '\\0' -- Nothing\n```\n","title":"decrement","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Neon","Class","HasFromInt"],"HasFromInt"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"tag":"ConstrainedType","contents":[{"constraintClass":[["Neon","Class","HasToInt"],"HasToInt"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeVar","contents":"a"}]}]}]}]},null]}},"sourceSpan":{"start":[97,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Helper.purs","end":[97,83]}},{"children":[],"comments":"Returns true if the number is divisible by the other.\n\n``` purescript\n9 :divisibleBy 3 -- true\n8 :divisibleBy 3 -- false\n```\n","title":"divisibleBy","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Neon","Class","HasEqual"],"HasEqual"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"tag":"ConstrainedType","contents":[{"constraintClass":[["Neon","Class","HasRemainder"],"HasRemainder"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"tag":"ConstrainedType","contents":[{"constraintClass":[["Neon","Class","HasZero"],"HasZero"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}]}]}]}]},null]}},"sourceSpan":{"start":[106,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Helper.purs","end":[106,106]}},{"children":[],"comments":"Creates an array that ranges from the given upper bound down to the lower\nbound.\n\n``` purescript\n3 :downTo 1 -- [3, 2, 1]\n1 :downTo 1 -- [1]\n1 :downTo 3 -- []\n```\n","title":"downTo","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Neon","Class","HasFromInt"],"HasFromInt"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"tag":"ConstrainedType","contents":[{"constraintClass":[["Neon","Class","HasLess"],"HasLess"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"tag":"ConstrainedType","contents":[{"constraintClass":[["Neon","Class","HasToInt"],"HasToInt"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]}]}]}]}]}]},null]}},"sourceSpan":{"start":[117,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Helper.purs","end":[117,99]}},{"children":[],"comments":"Returns true if the container is empty.\n\n``` purescript\nempty [] -- true\nempty [1] -- false\n```\n","title":"empty","info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Neon","Class","HasReduce"],"HasReduce"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"a"},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}]},null]},null]}},"sourceSpan":{"start":[133,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Helper.purs","end":[133,59]}},{"children":[],"comments":"Returns true if the number is even.\n\n``` purescript\neven 2 -- true\neven 3 -- false\n```\n","title":"even","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}},"sourceSpan":{"start":[142,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Helper.purs","end":[142,23]}},{"children":[],"comments":"Removes a level of nesting from a container.\n\n``` purescript\nflatten [[1, 2], [3, 4]] -- [1, 2, 3, 4]\n```\n","title":"flatten","info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Neon","Class","HasChain"],"HasChain"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"a"},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"a"},{"tag":"TypeVar","contents":"b"}]}}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"a"},{"tag":"TypeVar","contents":"b"}]}]}]},null]},null]}},"sourceSpan":{"start":[150,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Helper.purs","end":[150,60]}},{"children":[],"comments":"Returns true if the value is greater than or equal to the other.\n\n``` purescript\n2 :greaterOrEqual 1 -- true\n2 :greaterOrEqual 2 -- true\n2 :greaterOrEqual 3 -- false\n```\n","title":"greaterOrEqual","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Neon","Class","HasEqual"],"HasEqual"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"tag":"ConstrainedType","contents":[{"constraintClass":[["Neon","Class","HasGreater"],"HasGreater"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}]}]}]},null]}},"sourceSpan":{"start":[160,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Helper.purs","end":[160,88]}},{"children":[],"comments":"Increases a value by one. If the value is already the top, nothing will be\nreturned.\n\n``` purescript\nincrement 'a' -- Just 'b'\nincrement '\\65535' -- Nothing\n```\n","title":"increment","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Neon","Class","HasFromInt"],"HasFromInt"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"tag":"ConstrainedType","contents":[{"constraintClass":[["Neon","Class","HasToInt"],"HasToInt"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeVar","contents":"a"}]}]}]}]},null]}},"sourceSpan":{"start":[170,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Helper.purs","end":[170,83]}},{"children":[],"comments":"Returns true if the number is infinite.\n\n``` purescript\ninfinite infinity -- true\ninfinite (-infinity) -- true\ninfinite nan -- true\ninfinite 1.2 -- false\n```\n","title":"infinite","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}},"sourceSpan":{"start":[181,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Helper.purs","end":[181,30]}},{"children":[],"comments":"Returns true if the value is less than or equal to the other.\n\n``` purescript\n2 :lessOrEqual 1 -- false\n2 :lessOrEqual 2 -- true\n2 :lessOrEqual 3 -- true\n```\n","title":"lessOrEqual","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Neon","Class","HasEqual"],"HasEqual"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"tag":"ConstrainedType","contents":[{"constraintClass":[["Neon","Class","HasLess"],"HasLess"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}]}]}]},null]}},"sourceSpan":{"start":[191,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Helper.purs","end":[191,82]}},{"children":[],"comments":"Returns the greater value.\n\n``` purescript\nmax 1 2 -- 2\nmax 2 1 -- 2\n```\n","title":"max","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Neon","Class","HasGreater"],"HasGreater"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"a"}]}]}]},null]}},"sourceSpan":{"start":[200,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Helper.purs","end":[200,53]}},{"children":[],"comments":"Returns the greatest value.\n\n``` purescript\nmaximum [1, 3, 2] -- Just 3\nmaximum [] -- Nothing\n```\n","title":"maximum","info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Neon","Class","HasGreater"],"HasGreater"],"constraintArgs":[{"tag":"TypeVar","contents":"b"}],"constraintData":null},{"tag":"ConstrainedType","contents":[{"constraintClass":[["Neon","Class","HasReduce"],"HasReduce"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"a"},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeVar","contents":"b"}]}]}]}]},null]},null]}},"sourceSpan":{"start":[209,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Helper.purs","end":[209,86]}},{"children":[],"comments":"Returns the lesser value.\n\n``` purescript\nmin 1 2 -- 1\nmin 2 1 -- 1\n```\n","title":"min","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Neon","Class","HasLess"],"HasLess"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"a"}]}]}]},null]}},"sourceSpan":{"start":[223,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Helper.purs","end":[223,50]}},{"children":[],"comments":"Returns the least value.\n\n``` purescript\nminimum [2, 1, 3] -- Just 1\nminimum [] -- Nothing\n```\n","title":"minimum","info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Neon","Class","HasLess"],"HasLess"],"constraintArgs":[{"tag":"TypeVar","contents":"b"}],"constraintData":null},{"tag":"ConstrainedType","contents":[{"constraintClass":[["Neon","Class","HasReduce"],"HasReduce"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"a"},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeVar","contents":"b"}]}]}]}]},null]},null]}},"sourceSpan":{"start":[232,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Helper.purs","end":[232,83]}},{"children":[],"comments":"Negates the value by subtracting the value from zero.\n\n``` purescript\nnegate 2 -- -2\n```\n","title":"negate","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Neon","Class","HasSubtract"],"HasSubtract"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"tag":"ConstrainedType","contents":[{"constraintClass":[["Neon","Class","HasZero"],"HasZero"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"a"}]}]}]},null]}},"sourceSpan":{"start":[245,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Helper.purs","end":[245,69]}},{"children":[],"comments":"Returns `true` if the number is not a valid number. This is useful to test\nfor `nan`.\n\n``` purescript\nnotANumber 1 -- false\nnotANumber infinity -- false\nnotANumber nan -- true\n```\n","title":"notANumber","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}},"sourceSpan":{"start":[256,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Helper.purs","end":[256,32]}},{"children":[],"comments":"Returns true if the value is not equal to the other.\n\n``` purescript\n2 :notEqual 1 -- true\n1 :notEqual 1 -- true\n```\n","title":"notEqual","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Neon","Class","HasEqual"],"HasEqual"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}]}]},null]}},"sourceSpan":{"start":[265,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Helper.purs","end":[265,62]}},{"children":[],"comments":"Returns true if the number is odd.\n\n``` purescript\nodd 3 -- true\nodd 4 -- false\n```\n","title":"odd","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}},"sourceSpan":{"start":[274,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Helper.purs","end":[274,22]}},{"children":[],"comments":"Inspects a value and logs it.\n\n``` purescript\nprint 123 -- (logs \"123\")\n```\n","title":"print","info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Neon","Class","HasInspect"],"HasInspect"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad","Eff"],"Eff"]},{"tag":"RCons","contents":["console",{"tag":"TypeConstructor","contents":[["Control","Monad","Eff","Console"],"CONSOLE"]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}]}]},null]},null]}},"sourceSpan":{"start":[282,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Helper.purs","end":[282,103]}},{"children":[],"comments":"Multiplies all of the elements of a container together.\n\n``` purescript\nproduct [2, 3] -- 6\nproduct [] -- 1\n```\n","title":"product","info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Neon","Class","HasMultiply"],"HasMultiply"],"constraintArgs":[{"tag":"TypeVar","contents":"b"}],"constraintData":null},{"tag":"ConstrainedType","contents":[{"constraintClass":[["Neon","Class","HasOne"],"HasOne"],"constraintArgs":[{"tag":"TypeVar","contents":"b"}],"constraintData":null},{"tag":"ConstrainedType","contents":[{"constraintClass":[["Neon","Class","HasReduce"],"HasReduce"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"a"},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeVar","contents":"b"}]}]}]}]},null]},null]}},"sourceSpan":{"start":[291,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Helper.purs","end":[291,94]}},{"children":[],"comments":"Returns the reciprocal of the value by dividing one by it.\n\n``` purescript\nreciprocal 2 -- 0.5\n```\n","title":"reciprocal","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Neon","Class","HasDivide"],"HasDivide"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"tag":"ConstrainedType","contents":[{"constraintClass":[["Neon","Class","HasOne"],"HasOne"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"a"}]}]}]},null]}},"sourceSpan":{"start":[299,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Helper.purs","end":[299,70]}},{"children":[],"comments":"Sequences actions and collects the results.\n\n``` purescript\nsequence [Just 1, Just 2] -- Just [1, 2]\n```\n","title":"sequence","info":{"declType":"value","type":{"tag":"ForAll","contents":["c",{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Neon","Class","HasApply"],"HasApply"],"constraintArgs":[{"tag":"TypeVar","contents":"b"}],"constraintData":null},{"tag":"ConstrainedType","contents":[{"constraintClass":[["Neon","Class","HasMap"],"HasMap"],"constraintArgs":[{"tag":"TypeVar","contents":"b"}],"constraintData":null},{"tag":"ConstrainedType","contents":[{"constraintClass":[["Neon","Class","HasTraverse"],"HasTraverse"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"tag":"ConstrainedType","contents":[{"constraintClass":[["Neon","Class","HasPure"],"HasPure"],"constraintArgs":[{"tag":"TypeVar","contents":"b"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"a"},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"b"},{"tag":"TypeVar","contents":"c"}]}}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"b"},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"a"},{"tag":"TypeVar","contents":"c"}]}}]}]}]}]}]}]},null]},null]},null]}},"sourceSpan":{"start":[307,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Helper.purs","end":[307,125]}},{"children":[],"comments":"Returns the sign of a number.\n\n``` purescript\nsign 2 -- 1\nsign 0 -- 0\nsign (-2) -- -1\n```\n","title":"sign","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Neon","Class","HasGreater"],"HasGreater"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"tag":"ConstrainedType","contents":[{"constraintClass":[["Neon","Class","HasLess"],"HasLess"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"tag":"ConstrainedType","contents":[{"constraintClass":[["Neon","Class","HasOne"],"HasOne"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"tag":"ConstrainedType","contents":[{"constraintClass":[["Neon","Class","HasSubtract"],"HasSubtract"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"tag":"ConstrainedType","contents":[{"constraintClass":[["Neon","Class","HasZero"],"HasZero"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"a"}]}]}]}]}]}]},null]}},"sourceSpan":{"start":[317,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Helper.purs","end":[317,126]}},{"children":[],"comments":"Returns the size of a container.\n\n``` purescript\nsize [2, 3, 5] -- 3\nsize [] -- 0\n```\n","title":"size","info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Neon","Class","HasReduce"],"HasReduce"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"a"},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}]},null]},null]}},"sourceSpan":{"start":[331,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Helper.purs","end":[331,54]}},{"children":[],"comments":"Adds all the elements of a container together. If the container is empty,\nreturns `zero`.\n\n``` purescript\n[1, 2, 3] :sum -- 6\n([] :: Array Int) :sum -- 0\n[\"ab\", \"cd\", \"ef\"] :sum -- \"abcdef\"\n([] :: Array String) :sum -- \"\"\n```\n","title":"sum","info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Neon","Class","HasAdd"],"HasAdd"],"constraintArgs":[{"tag":"TypeVar","contents":"b"}],"constraintData":null},{"tag":"ConstrainedType","contents":[{"constraintClass":[["Neon","Class","HasReduce"],"HasReduce"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"tag":"ConstrainedType","contents":[{"constraintClass":[["Neon","Class","HasZero"],"HasZero"],"constraintArgs":[{"tag":"TypeVar","contents":"b"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"a"},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeVar","contents":"b"}]}]}]}]},null]},null]}},"sourceSpan":{"start":[343,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Helper.purs","end":[343,86]}},{"children":[],"comments":"Swaps the values in a tuple.\n\n``` purescript\nswap (Tuple 1 'a') -- Tuple 'a' 1\n```\n","title":"swap","info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Tuple"],"Tuple"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Tuple"],"Tuple"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeVar","contents":"a"}]}]},null]},null]}},"sourceSpan":{"start":[351,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Helper.purs","end":[351,53]}},{"children":[],"comments":"A wildly unsafe function that can be used to stand in for any value.\n\n``` purescript\ntodo :: Unit -- unit\ntodo :: Boolean -- ?\n```\n\nThis should never end up in production, but it can be useful when\ndeveloping a function.\n","title":"todo","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeVar","contents":"a"},null]}},"sourceSpan":{"start":[363,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Helper.purs","end":[363,20]}},{"children":[],"comments":"Removes the decimal part of a number and returns an integer.\n\n``` purescript\ntruncate 1.0 -- 1\ntruncate 1.9 -- 1\ntruncate (-1.9) -- -1\n```\n","title":"truncate","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}},"sourceSpan":{"start":[373,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Helper.purs","end":[373,26]}},{"children":[],"comments":"Converts a regular function into one that takes a tuple.\n\n``` purescript\nlet f x y = x + y\nuncurry f (Tuple \"a\" \"b\") -- \"ab\"\n```\n","title":"uncurry","info":{"declType":"value","type":{"tag":"ForAll","contents":["c",{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeVar","contents":"c"}]}]}}]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Tuple"],"Tuple"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeVar","contents":"c"}]}}]},null]},null]},null]}},"sourceSpan":{"start":[384,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Helper.purs","end":[384,64]}},{"children":[],"comments":"A wildly unsafe function that can convince the type system that any value\nis any type. Use this carefully!\n\n``` purescript\nunsafeCoerce 1 :: Number -- 1.0\nunsafeCoerce 'a' :: String -- \"a\"\n```\n","title":"unsafeCoerce","info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]},null]},null]}},"sourceSpan":{"start":[394,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Helper.purs","end":[394,35]}},{"children":[],"comments":"Unsafely write a string to the console.\n\n``` purescript\nunsafeLog \"unsafe!\" unit -- unit (logs \"unsafe!\")\n```\n","title":"unsafeLog","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"a"}]}]},null]}},"sourceSpan":{"start":[402,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Helper.purs","end":[402,40]}},{"children":[],"comments":"Creates an array that ranges from the given lower bound down to the upper\nbound.\n\n``` purescript\n1 :upTo 3 -- [1, 2, 3]\n1 :upTo 1 -- [1]\n3 :upTo 1 -- []\n```\n","title":"upTo","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Neon","Class","HasFromInt"],"HasFromInt"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"tag":"ConstrainedType","contents":[{"constraintClass":[["Neon","Class","HasGreater"],"HasGreater"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"tag":"ConstrainedType","contents":[{"constraintClass":[["Neon","Class","HasToInt"],"HasToInt"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]}]}]}]}]}]},null]}},"sourceSpan":{"start":[415,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Helper.purs","end":[415,100]}},{"children":[],"comments":"Replaces all values in the input container with `unit`. This is mostly\nuseful for ignoring the value from an effect.\n\n``` purescript\nvoid [1, 2] -- [unit, unit]\n```\n","title":"void","info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Neon","Class","HasMap"],"HasMap"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"a"},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"a"},{"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}]}]},null]},null]}},"sourceSpan":{"start":[431,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Helper.purs","end":[431,59]}},{"children":[],"comments":"If the predicate is true, run the effect. Otherwise run an effect that\ndoes nothing.\n\n``` purescript\nwhen true [unit, unit] -- [unit, unit]\nwhen false [unit, unit] -- [unit]\n```\n","title":"when","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Neon","Class","HasPure"],"HasPure"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"a"},{"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"a"},{"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}]}]}]},null]}},"sourceSpan":{"start":[441,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Helper.purs","end":[441,77]}},{"children":[],"comments":"Keeps calling the function while the predicate is true.\n\n``` purescript\n1 :while (_ < 3) (_ + 1) -- 3\n9 :while (_ < 3) (_ + 1) -- 9\n```\n","title":"while","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"a"}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"a"}]}]}]},null]}},"sourceSpan":{"start":[450,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Helper.purs","end":[450,56]}},{"children":[],"comments":"If the given value is `Nothing`, return the default. Otherwise return the\nvalue.\n\n``` purescript\nwithDefault 2 Nothing -- 2\nwithDefault 2 (Just 1) -- 1\n```\n","title":"withDefault","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeVar","contents":"a"}]}]},null]}},"sourceSpan":{"start":[460,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Helper.purs","end":[460,48]}}]},{"reExports":[],"name":"Neon.Operator","comments":"Every operator defined by Neon is in this module. None of them should be\nparticularly surprising if you're already familiar with JavaScript's\noperators.\n\n```\nOperator | Fixity | Precedence | Description\n-------- | ------ | ---------- | -----------\n:        | left   | 8          | reverse function application\n^        | right  | 7          | exponentiation\n*        | left   | 6          | multiplication\n/        | left   | 6          | division\n%        | left   | 6          | remainder\n+        | left   | 5          | addition\n-        | left   | 5          | subtraction\n==       | none   | 4          | equality\n!=       | none   | 4          | inequality\n>        | none   | 4          | greater than\n>=       | none   | 4          | greater than or equal to\n<        | none   | 4          | less than\n<=       | none   | 4          | less than or equal to\n&&       | right  | 3          | and\n||       | right  | 2          | or\n```\n\nNote that PureScript does not allow exporting an operator (like `+`)\nwithout also exporting the function it's an alias of (like `_add`). The\nfunctions in this module are prefixed with an underscore to imply that\nthey should not be used directly.\n\n``` purescript\n_add \"ab\" \"cd\" -- bad\nadd \"cd\" \"ab\"  -- confusing\n\"ab\" :add \"cd\" -- good\n\"ab\" + \"cd\"    -- better\n```\n","declarations":[{"children":[],"comments":"Passes an argument to a function. This is reversed function application.\nSince every function in Neon takes its \"subject\" last, it can be useful to\nthink of this operator like `.` in object-oriented languages.\n\n``` purescript\n'a' :toUpper == toUpper 'a' -- \"A\"\n\"ab\" :add \"cd\" == add \"cd\" \"ab\" -- \"abcd\"\n```\n\nThis operator has the highest precedence so that it can be combined with\nother operators.\n\n``` purescript\n1.2 :round + 3 == (1.2 :round) + 3 -- 4\n```\n\nThis operator is left associative. It is designed to be chained together.\n\n``` purescript\n'a' :toUpper :add \"bc\" :add \"de\" -- \"abcde\"\n```\n","title":"(:)","info":{"declType":"alias","alias":[["Neon","Operator"],{"Right":{"Left":{"Ident":"_call"}}}],"fixity":{"associativity":"infixl","precedence":8}},"sourceSpan":{"start":[62,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Operator.purs","end":[62,20]}},{"children":[],"comments":"Raises a number to a power. This is exponentiation, *not* exclusive or\n(xor). In some JavaScript implementations, this would be `**`.\n\n``` purescript\n2 ^ 3 -- 8\n```\n\nThis operator is right-associative.\n\n``` purescript\n4 ^ 3 ^ 2 == 4 ^ (3 ^ 2) -- 262144\n```\n","title":"(^)","info":{"declType":"alias","alias":[["Neon","Operator"],{"Right":{"Left":{"Ident":"_power"}}}],"fixity":{"associativity":"infixr","precedence":7}},"sourceSpan":{"start":[76,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Operator.purs","end":[76,21]}},{"children":[],"comments":"Multiplies two numbers together.\n\n``` purescript\n2 * 3 -- 6\n```\n","title":"(*)","info":{"declType":"alias","alias":[["Neon","Operator"],{"Right":{"Left":{"Ident":"_multiply"}}}],"fixity":{"associativity":"infixl","precedence":6}},"sourceSpan":{"start":[83,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Operator.purs","end":[83,24]}},{"children":[],"comments":"Divides a number by another number.\n\n``` purescript\n4 / 2 -- 2\n5 / 2 -- 2\n5.0 / 2.0 -- 2.5\n```\n","title":"(/)","info":{"declType":"alias","alias":[["Neon","Operator"],{"Right":{"Left":{"Ident":"_divide"}}}],"fixity":{"associativity":"infixl","precedence":6}},"sourceSpan":{"start":[92,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Operator.purs","end":[92,22]}},{"children":[],"comments":"Finds the remainder after division.\n\n``` purescript\n4 % 2 -- 0\n5 % 2 -- 1\n5.0 % 2.0 -- 1.0\n5.5 % 2.5 -- 0.5\n```\n","title":"(%)","info":{"declType":"alias","alias":[["Neon","Operator"],{"Right":{"Left":{"Ident":"_remainder"}}}],"fixity":{"associativity":"infixl","precedence":6}},"sourceSpan":{"start":[102,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Operator.purs","end":[102,25]}},{"children":[],"comments":"Adds two numbers together.\n\n``` purescript\n2 + 3 -- 5\n```\n","title":"(+)","info":{"declType":"alias","alias":[["Neon","Operator"],{"Right":{"Left":{"Ident":"_add"}}}],"fixity":{"associativity":"infixl","precedence":5}},"sourceSpan":{"start":[109,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Operator.purs","end":[109,19]}},{"children":[],"comments":"Subtracts one number from another.\n\n``` purescript\n3 - 2 -- 1\n```\n","title":"(-)","info":{"declType":"alias","alias":[["Neon","Operator"],{"Right":{"Left":{"Ident":"_subtract"}}}],"fixity":{"associativity":"infixl","precedence":5}},"sourceSpan":{"start":[116,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Operator.purs","end":[116,24]}},{"children":[],"comments":"Returns `true` if the two things are equal.\n\n``` purescript\n2 == 2 -- true\n2 == 3 -- false\n```\n","title":"(==)","info":{"declType":"alias","alias":[["Neon","Operator"],{"Right":{"Left":{"Ident":"_equal"}}}],"fixity":{"associativity":"infix","precedence":4}},"sourceSpan":{"start":[124,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Operator.purs","end":[124,22]}},{"children":[],"comments":"Returns `true` if the two things are not equal.\n\n``` purescript\n2 != 3 -- true\n2 != 2 -- false\n```\n\nNote that this is different than the `Prelude`, which uses `/=` for\ninequality.\n","title":"(!=)","info":{"declType":"alias","alias":[["Neon","Operator"],{"Right":{"Left":{"Ident":"_notEqual"}}}],"fixity":{"associativity":"infix","precedence":4}},"sourceSpan":{"start":[135,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Operator.purs","end":[135,25]}},{"children":[],"comments":"Returns `true` if the left argument is greater than the right.\n\n``` purescript\n2 > 1 -- true\n2 > 2 -- false\n2 > 3 -- false\n```\n","title":"(>)","info":{"declType":"alias","alias":[["Neon","Operator"],{"Right":{"Left":{"Ident":"_greater"}}}],"fixity":{"associativity":"infix","precedence":4}},"sourceSpan":{"start":[144,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Operator.purs","end":[144,23]}},{"children":[],"comments":"Returns `true` if the left argument is greater than or equal to the right.\n\n``` purescript\n2 >= 1 -- true\n2 >= 2 -- true\n2 >= 3 -- false\n```\n","title":"(>=)","info":{"declType":"alias","alias":[["Neon","Operator"],{"Right":{"Left":{"Ident":"_greaterOrEqual"}}}],"fixity":{"associativity":"infix","precedence":4}},"sourceSpan":{"start":[153,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Operator.purs","end":[153,31]}},{"children":[],"comments":"Returns `true` if the left argument is less than the right.\n\n``` purescript\n2 < 1 -- false\n2 < 2 -- false\n2 < 3 -- true\n```\n","title":"(<)","info":{"declType":"alias","alias":[["Neon","Operator"],{"Right":{"Left":{"Ident":"_less"}}}],"fixity":{"associativity":"infix","precedence":4}},"sourceSpan":{"start":[162,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Operator.purs","end":[162,20]}},{"children":[],"comments":"Returns `true` if the left argument is less than or equal to the right.\n\n``` purescript\n2 <= 1 -- false\n2 <= 2 -- true\n2 <= 3 -- true\n```\n","title":"(<=)","info":{"declType":"alias","alias":[["Neon","Operator"],{"Right":{"Left":{"Ident":"_lessOrEqual"}}}],"fixity":{"associativity":"infix","precedence":4}},"sourceSpan":{"start":[171,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Operator.purs","end":[171,28]}},{"children":[],"comments":"Returns the logical conjunction of both arguments.\n\n``` purescript\ntrue && false -- false\ntrue && true -- true\n```\n","title":"(&&)","info":{"declType":"alias","alias":[["Neon","Operator"],{"Right":{"Left":{"Ident":"_and"}}}],"fixity":{"associativity":"infixr","precedence":3}},"sourceSpan":{"start":[179,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Operator.purs","end":[179,20]}},{"children":[],"comments":"Returns the logical disjunction of both arguments.\n\n``` purescript\nfalse || false -- false\nfalse || true -- true\n```\n","title":"(||)","info":{"declType":"alias","alias":[["Neon","Operator"],{"Right":{"Left":{"Ident":"_or"}}}],"fixity":{"associativity":"infixr","precedence":2}},"sourceSpan":{"start":[187,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Operator.purs","end":[187,19]}},{"children":[],"comments":null,"title":"_call","info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]},{"tag":"TypeVar","contents":"b"}]}]},null]},null]}},"sourceSpan":{"start":[189,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Operator.purs","end":[189,40]}},{"children":[],"comments":null,"title":"_power","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Neon","Class","HasPower"],"HasPower"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"a"}]}]}]},null]}},"sourceSpan":{"start":[192,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Operator.purs","end":[192,54]}},{"children":[],"comments":null,"title":"_multiply","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Neon","Class","HasMultiply"],"HasMultiply"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"a"}]}]}]},null]}},"sourceSpan":{"start":[195,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Operator.purs","end":[195,60]}},{"children":[],"comments":null,"title":"_divide","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Neon","Class","HasDivide"],"HasDivide"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"a"}]}]}]},null]}},"sourceSpan":{"start":[198,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Operator.purs","end":[198,56]}},{"children":[],"comments":null,"title":"_remainder","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Neon","Class","HasRemainder"],"HasRemainder"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"a"}]}]}]},null]}},"sourceSpan":{"start":[201,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Operator.purs","end":[201,62]}},{"children":[],"comments":null,"title":"_add","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Neon","Class","HasAdd"],"HasAdd"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"a"}]}]}]},null]}},"sourceSpan":{"start":[204,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Operator.purs","end":[204,50]}},{"children":[],"comments":null,"title":"_subtract","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Neon","Class","HasSubtract"],"HasSubtract"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"a"}]}]}]},null]}},"sourceSpan":{"start":[207,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Operator.purs","end":[207,60]}},{"children":[],"comments":null,"title":"_equal","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Neon","Class","HasEqual"],"HasEqual"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}]}]},null]}},"sourceSpan":{"start":[210,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Operator.purs","end":[210,60]}},{"children":[],"comments":null,"title":"_notEqual","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Neon","Class","HasEqual"],"HasEqual"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}]}]},null]}},"sourceSpan":{"start":[213,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Operator.purs","end":[213,63]}},{"children":[],"comments":null,"title":"_greater","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Neon","Class","HasGreater"],"HasGreater"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}]}]},null]}},"sourceSpan":{"start":[216,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Operator.purs","end":[216,64]}},{"children":[],"comments":null,"title":"_greaterOrEqual","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Neon","Class","HasEqual"],"HasEqual"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"tag":"ConstrainedType","contents":[{"constraintClass":[["Neon","Class","HasGreater"],"HasGreater"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}]}]}]},null]}},"sourceSpan":{"start":[219,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Operator.purs","end":[219,89]}},{"children":[],"comments":null,"title":"_less","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Neon","Class","HasLess"],"HasLess"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}]}]},null]}},"sourceSpan":{"start":[222,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Operator.purs","end":[222,58]}},{"children":[],"comments":null,"title":"_lessOrEqual","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Neon","Class","HasEqual"],"HasEqual"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"tag":"ConstrainedType","contents":[{"constraintClass":[["Neon","Class","HasLess"],"HasLess"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}]}]}]},null]}},"sourceSpan":{"start":[225,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Operator.purs","end":[225,83]}},{"children":[],"comments":null,"title":"_and","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Neon","Class","HasAnd"],"HasAnd"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"a"}]}]}]},null]}},"sourceSpan":{"start":[228,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Operator.purs","end":[228,50]}},{"children":[],"comments":null,"title":"_or","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Neon","Class","HasOr"],"HasOr"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"a"}]}]}]},null]}},"sourceSpan":{"start":[231,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Operator.purs","end":[231,48]}}]},{"reExports":[{"moduleName":{"package":null,"item":["Neon","Primitive","Char"]},"declarations":[{"children":[],"comments":"Converts a character to upper case.\n\n``` purescript\ntoUpper 'a' -- 'A'\ntoUpper 'A' -- 'A'\n```\n","title":"toUpper","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Char"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Char"]}]}},"sourceSpan":{"start":[29,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Primitive/Char.purs","end":[29,24]}},{"children":[],"comments":"Converts a character into a string.\n\n``` purescript\ntoString 'a' -- \"a\"\n```\n","title":"toString","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Char"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}},"sourceSpan":{"start":[20,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Primitive/Char.purs","end":[20,27]}},{"children":[],"comments":"Converts a character to lower case.\n\n``` purescript\ntoLower 'A' -- 'a'\ntoLower 'a' -- 'a'\n```\n","title":"toLower","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Char"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Char"]}]}},"sourceSpan":{"start":[12,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Primitive/Char.purs","end":[12,24]}}]},{"moduleName":{"package":null,"item":["Neon","Primitive","Function"]},"declarations":[{"children":[],"comments":"Returns the value it was given.\n\n``` purescript\nidentity 1 -- 1\n```\nThis is the [identity function](https://en.wikipedia.org/wiki/Identity_function).\n","title":"identity","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"a"}]},null]}},"sourceSpan":{"start":[42,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Primitive/Function.purs","end":[42,29]}},{"children":[],"comments":"Flips the first two arguments of a function.\n\n``` purescript\n\"a\" :add \"b\" -- \"ab\"\n\"a\" :flip add \"b\" -- \"ba\"\n```\n","title":"flip","info":{"declType":"value","type":{"tag":"ForAll","contents":["c",{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeVar","contents":"c"}]}]}}]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"c"}]}]}}]},null]},null]},null]}},"sourceSpan":{"start":[33,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Primitive/Function.purs","end":[33,53]}},{"children":[],"comments":"Returns a new function that calls the first function with the result of\ncalling the second.\n\n``` purescript\nlet addTwo x = x + 2\nlet double x = x * 2\nlet addTwoThenDouble x = addTwo :compose double\naddTwoThenDouble 3 -- 10\n```\n\nThis is [function composition](https://en.wikipedia.org/wiki/Function_composition_(computer_science)).\n","title":"compose","info":{"declType":"value","type":{"tag":"ForAll","contents":["c",{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeVar","contents":"c"}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"c"}]}}]}]},null]},null]},null]}},"sourceSpan":{"start":[24,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Primitive/Function.purs","end":[24,58]}},{"children":[],"comments":"Always returns the first argument.\n\n``` purescript\n\"anything\" :always 1 -- 1\n```\n\nThis is the [constant function](https://en.wikipedia.org/wiki/Constant_function).\n","title":"always","info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeVar","contents":"a"}]}]},null]},null]}},"sourceSpan":{"start":[10,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Primitive/Function.purs","end":[10,34]}}]},{"moduleName":{"package":null,"item":["Neon","Primitive","Int"]},"declarations":[{"children":[],"comments":"Converts an integer into a number.\n\n``` purescript\ntoNumber 1 -- 1.0\n```\n","title":"toNumber","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]}},"sourceSpan":{"start":[10,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Primitive/Int.purs","end":[10,26]}}]},{"moduleName":{"package":null,"item":["Neon","Primitive","Number"]},"declarations":[{"children":[],"comments":"Rounds a number to the nearest integer.\n\n``` purescript\nround 1.4 -- 1\nround 1.6 -- 2\nround 1.5 -- 2\nround 2.5 -- 3\n```\n","title":"round","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}},"sourceSpan":{"start":[59,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Primitive/Number.purs","end":[59,23]}},{"children":[],"comments":"An alias for `NaN` from JavaScript.\n","title":"nan","info":{"declType":"value","type":{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}},"sourceSpan":{"start":[48,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Primitive/Number.purs","end":[48,14]}},{"children":[],"comments":"An alias for `Infinity` from JavaScript.\n","title":"infinity","info":{"declType":"value","type":{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}},"sourceSpan":{"start":[44,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Primitive/Number.purs","end":[44,19]}},{"children":[],"comments":"Rounds a number down.\n\n``` purescript\nfloor 1.9 -- 1\n```\n","title":"floor","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}},"sourceSpan":{"start":[40,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Primitive/Number.purs","end":[40,23]}},{"children":[],"comments":"Tests whether a number is finite or not.\n\n``` purescript\nfinite 1.0 -- true\nfinite infinity -- false\n```\n","title":"finite","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}},"sourceSpan":{"start":[32,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Primitive/Number.purs","end":[32,28]}},{"children":[],"comments":"Rounds a number up.\n\n``` purescript\nceiling 1.1 -- 2\n```\n","title":"ceiling","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}},"sourceSpan":{"start":[23,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Primitive/Number.purs","end":[23,25]}},{"children":[],"comments":"Tests if a number is a valid number. Returns false if the number is `nan`.\nThis is necessary because `nan` does not equal itself.\n\n``` purescript\naNumber 1.0 -- true\naNumber nan -- false\nnan == nan -- false\n```\n","title":"aNumber","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}},"sourceSpan":{"start":[15,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Primitive/Number.purs","end":[15,29]}}]}],"name":"Neon.Primitive","comments":"Functions that operate on primitve data types. Note that not all data\ntypes are represented. That's either because there's no actions you can\ntake on them in general (like `Object`s) or because the actions are in\ntype classes instead (for `Array`s).\n","declarations":[]},{"reExports":[],"name":"Neon.Primitive.Char","comments":null,"declarations":[{"children":[],"comments":"Converts a character to lower case.\n\n``` purescript\ntoLower 'A' -- 'a'\ntoLower 'a' -- 'a'\n```\n","title":"toLower","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Char"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Char"]}]}},"sourceSpan":{"start":[12,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Primitive/Char.purs","end":[12,24]}},{"children":[],"comments":"Converts a character into a string.\n\n``` purescript\ntoString 'a' -- \"a\"\n```\n","title":"toString","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Char"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}},"sourceSpan":{"start":[20,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Primitive/Char.purs","end":[20,27]}},{"children":[],"comments":"Converts a character to upper case.\n\n``` purescript\ntoUpper 'a' -- 'A'\ntoUpper 'A' -- 'A'\n```\n","title":"toUpper","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Char"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Char"]}]}},"sourceSpan":{"start":[29,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Primitive/Char.purs","end":[29,24]}}]},{"reExports":[],"name":"Neon.Primitive.Function","comments":null,"declarations":[{"children":[],"comments":"Always returns the first argument.\n\n``` purescript\n\"anything\" :always 1 -- 1\n```\n\nThis is the [constant function](https://en.wikipedia.org/wiki/Constant_function).\n","title":"always","info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeVar","contents":"a"}]}]},null]},null]}},"sourceSpan":{"start":[10,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Primitive/Function.purs","end":[10,34]}},{"children":[],"comments":"Returns a new function that calls the first function with the result of\ncalling the second.\n\n``` purescript\nlet addTwo x = x + 2\nlet double x = x * 2\nlet addTwoThenDouble x = addTwo :compose double\naddTwoThenDouble 3 -- 10\n```\n\nThis is [function composition](https://en.wikipedia.org/wiki/Function_composition_(computer_science)).\n","title":"compose","info":{"declType":"value","type":{"tag":"ForAll","contents":["c",{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeVar","contents":"c"}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"c"}]}}]}]},null]},null]},null]}},"sourceSpan":{"start":[24,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Primitive/Function.purs","end":[24,58]}},{"children":[],"comments":"Flips the first two arguments of a function.\n\n``` purescript\n\"a\" :add \"b\" -- \"ab\"\n\"a\" :flip add \"b\" -- \"ba\"\n```\n","title":"flip","info":{"declType":"value","type":{"tag":"ForAll","contents":["c",{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeVar","contents":"c"}]}]}}]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"c"}]}]}}]},null]},null]},null]}},"sourceSpan":{"start":[33,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Primitive/Function.purs","end":[33,53]}},{"children":[],"comments":"Returns the value it was given.\n\n``` purescript\nidentity 1 -- 1\n```\nThis is the [identity function](https://en.wikipedia.org/wiki/Identity_function).\n","title":"identity","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"a"}]},null]}},"sourceSpan":{"start":[42,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Primitive/Function.purs","end":[42,29]}}]},{"reExports":[],"name":"Neon.Primitive.Int","comments":null,"declarations":[{"children":[],"comments":"Converts an integer into a number.\n\n``` purescript\ntoNumber 1 -- 1.0\n```\n","title":"toNumber","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]}},"sourceSpan":{"start":[10,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Primitive/Int.purs","end":[10,26]}}]},{"reExports":[],"name":"Neon.Primitive.Number","comments":null,"declarations":[{"children":[],"comments":"Tests if a number is a valid number. Returns false if the number is `nan`.\nThis is necessary because `nan` does not equal itself.\n\n``` purescript\naNumber 1.0 -- true\naNumber nan -- false\nnan == nan -- false\n```\n","title":"aNumber","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}},"sourceSpan":{"start":[15,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Primitive/Number.purs","end":[15,29]}},{"children":[],"comments":"Rounds a number up.\n\n``` purescript\nceiling 1.1 -- 2\n```\n","title":"ceiling","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}},"sourceSpan":{"start":[23,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Primitive/Number.purs","end":[23,25]}},{"children":[],"comments":"Tests whether a number is finite or not.\n\n``` purescript\nfinite 1.0 -- true\nfinite infinity -- false\n```\n","title":"finite","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}},"sourceSpan":{"start":[32,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Primitive/Number.purs","end":[32,28]}},{"children":[],"comments":"Rounds a number down.\n\n``` purescript\nfloor 1.9 -- 1\n```\n","title":"floor","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}},"sourceSpan":{"start":[40,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Primitive/Number.purs","end":[40,23]}},{"children":[],"comments":"An alias for `Infinity` from JavaScript.\n","title":"infinity","info":{"declType":"value","type":{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}},"sourceSpan":{"start":[44,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Primitive/Number.purs","end":[44,19]}},{"children":[],"comments":"An alias for `NaN` from JavaScript.\n","title":"nan","info":{"declType":"value","type":{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}},"sourceSpan":{"start":[48,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Primitive/Number.purs","end":[48,14]}},{"children":[],"comments":"Rounds a number to the nearest integer.\n\n``` purescript\nround 1.4 -- 1\nround 1.6 -- 2\nround 1.5 -- 2\nround 2.5 -- 3\n```\n","title":"round","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}},"sourceSpan":{"start":[59,1],"name":"/Users/adrian/Projects/purescript-neon/src/Neon/Primitive/Number.purs","end":[59,23]}}]}],"resolvedDependencies":{"purescript-free":"4.2.0","purescript-proxy":"2.1.0","purescript-exceptions":"3.1.0","purescript-newtype":"2.0.0","purescript-maps":"3.6.0","purescript-control":"3.3.1","purescript-console":"3.0.0","purescript-either":"3.1.0","purescript-profunctor":"3.2.0","purescript-folds":"3.1.0","purescript-arrays":"4.2.2","purescript-maybe":"3.0.0","purescript-symbols":"3.0.0","purescript-type-equality":"2.1.0","purescript-js-timers":"3.0.0","purescript-exists":"3.0.0","purescript-distributive":"3.0.0","purescript-unfoldable":"3.1.0","purescript-invariant":"3.0.0","purescript-lazy":"3.0.0","purescript-monoid":"3.3.0","purescript-aff":"4.0.2","purescript-foldable-traversable":"3.7.1","purescript-debug":"3.0.0","purescript-tailrec":"3.3.0","purescript-lens":"3.0.0","purescript-avar":"2.0.1","purescript-gen":"1.1.1","purescript-typelevel-prelude":"2.6.0","purescript-functors":"2.2.0","purescript-prelude":"3.1.1","purescript-st":"3.0.0","purescript-bifunctors":"3.0.0","purescript-nonempty":"4.1.1","purescript-contravariant":"3.1.0","purescript-assert":"3.0.0","purescript-generics":"4.0.0","purescript-unsafe-coerce":"3.0.0","purescript-refs":"3.0.0","purescript-integers":"3.2.0","purescript-eff":"3.1.0","purescript-test-unit":"13.0.0","purescript-const":"3.2.0","purescript-record":"0.2.5","purescript-transformers":"3.5.0","purescript-globals":"3.0.0","purescript-generics-rep":"5.4.0","purescript-math":"2.1.0","purescript-enums":"3.2.1","purescript-catenable-lists":"4.0.0","purescript-random":"3.0.0","purescript-parallel":"3.3.1","purescript-tuples":"4.1.0","purescript-partial":"1.2.1","purescript-quickcheck":"4.6.1","purescript-strings":"3.4.0","purescript-identity":"3.1.0","purescript-sets":"3.1.0","purescript-lists":"4.12.0","purescript-nullable":"3.0.0","purescript-datetime":"3.4.1","purescript-functions":"3.0.0"},"version":"0.6.0","github":["tfausak","purescript-neon"],"versionTag":"v0.6.0","moduleMap":{"Data.BooleanAlgebra":"purescript-prelude","Data.Decide":"purescript-contravariant","Type.Data.Boolean":"purescript-typelevel-prelude","Data.Ring":"purescript-prelude","Optic.Types":"purescript-lens","Control.Monad.Trans.Class":"purescript-transformers","Data.Functor.Product":"purescript-functors","Data.NonEmpty":"purescript-nonempty","Optic.Core":"purescript-lens","Control.Monad.Eff.Ref":"purescript-refs","Data.Char.Gen":"purescript-strings","Control.Monad.Aff.Class":"purescript-aff","Optic.Internal.Setter":"purescript-lens","Data.Generic":"purescript-generics","Data.Traversable.Accum.Internal":"purescript-foldable-traversable","Data.Enum.Gen":"purescript-enums","Data.Nullable":"purescript-nullable","Control.Comonad.Env":"purescript-transformers","Control.Comonad.Traced.Class":"purescript-transformers","Data.StrMap":"purescript-maps","Control.Monad.Eff.Unsafe":"purescript-eff","Data.Functor.Compose":"purescript-functors","Type.Row.Homogeneous":"purescript-typelevel-prelude","Data.Int.Bits":"purescript-integers","Data.Record.Unsafe":"purescript-record","Data.DateTime":"purescript-datetime","Data.Bifunctor.Flip":"purescript-bifunctors","Data.String.CodePoints":"purescript-strings","Data.Ord":"purescript-prelude","Control.Monad.Gen":"purescript-gen","Data.Date":"purescript-datetime","Data.Monoid.Dual":"purescript-monoid","Control.Monad.Rec.Class":"purescript-tailrec","Data.StrMap.ST.Unsafe":"purescript-maps","Data.Time.Component":"purescript-datetime","Data.Bitraversable":"purescript-foldable-traversable","Data.Profunctor.Costar":"purescript-profunctor","Optic.Prism":"purescript-lens","Data.Profunctor.Cowrap":"purescript-profunctor","Optic.Getter":"purescript-lens","Test.Unit.Assert":"purescript-test-unit","Data.Boolean":"purescript-prelude","Data.Map":"purescript-maps","Control.Biapplicative":"purescript-bifunctors","Data.CatList":"purescript-catenable-lists","Control.Parallel.Class":"purescript-parallel","Type.Proxy":"purescript-proxy","Test.Unit.Output.Fancy":"purescript-test-unit","Data.Coyoneda":"purescript-free","Data.Array.ST.Iterator":"purescript-arrays","Data.DateTime.Gen":"purescript-datetime","Data.Bounded":"purescript-prelude","Control.Monad.State.Trans":"purescript-transformers","Data.TraversableWithIndex":"purescript-foldable-traversable","Data.Int":"purescript-integers","Data.Profunctor.Cochoice":"purescript-profunctor","Data.StrMap.Gen":"purescript-maps","Data.Show":"purescript-prelude","Data.Bifunctor.Clown":"purescript-bifunctors","Control.Monad.Writer.Trans":"purescript-transformers","Data.Foldable":"purescript-foldable-traversable","Data.Divide":"purescript-contravariant","Control.Comonad.Store.Class":"purescript-transformers","Data.Enum":"purescript-enums","Control.Monad.Trampoline":"purescript-free","Control.Monad.Aff.AVar":"purescript-aff","Control.Apply":"purescript-prelude","Data.Functor.Contravariant":"purescript-contravariant","Data.Tuple.Nested":"purescript-tuples","Data.Generic.Rep.Semigroup":"purescript-generics-rep","Test.QuickCheck.LCG":"purescript-quickcheck","Control.Monad":"purescript-prelude","Data.Lazy":"purescript-lazy","Data.Monoid":"purescript-monoid","Data.Profunctor.Closed":"purescript-profunctor","Control.Monad.Eff.Uncurried":"purescript-eff","Control.Monad.List.Trans":"purescript-transformers","Control.Fold":"purescript-folds","Control.Monad.RWS":"purescript-transformers","Data.Maybe.First":"purescript-maybe","Control.Bind":"purescript-prelude","Data.Profunctor.Split":"purescript-profunctor","Data.Monoid.Additive":"purescript-monoid","Data.Symbol":"purescript-symbols","Data.Map.Gen":"purescript-maps","Data.String.Regex":"purescript-strings","Data.Profunctor.Join":"purescript-profunctor","Data.HeytingAlgebra":"purescript-prelude","Control.Alt":"purescript-control","Data.Date.Gen":"purescript-datetime","Control.Monad.Maybe.Trans":"purescript-transformers","Control.Monad.Cont":"purescript-transformers","Data.Time.Component.Gen":"purescript-datetime","Data.List.ZipList":"purescript-lists","Data.Functor.Coproduct.Nested":"purescript-functors","Data.Ord.Unsafe":"purescript-prelude","Data.Semigroup":"purescript-prelude","Data.Record":"purescript-record","Optic.Internal.Prism":"purescript-lens","Control.Monad.Reader":"purescript-transformers","Test.Unit.QuickCheck":"purescript-test-unit","Data.Const":"purescript-const","Data.Generic.Rep.Enum":"purescript-generics-rep","Data.Generic.Rep.Bounded":"purescript-generics-rep","Control.Monad.Eff":"purescript-eff","Control.Comonad.Traced.Trans":"purescript-transformers","Optic.Lens":"purescript-lens","Data.Array.ST.Partial":"purescript-arrays","Data.StrMap.Unsafe":"purescript-maps","Data.Generic.Rep.Show":"purescript-generics-rep","Data.Profunctor.Clown":"purescript-profunctor","Type.Data.Ordering":"purescript-typelevel-prelude","Data.Tuple":"purescript-tuples","Data.Semigroup.Foldable":"purescript-foldable-traversable","Control.Biapply":"purescript-bifunctors","Data.Distributive":"purescript-distributive","Type.Equality":"purescript-type-equality","Control.Alternative":"purescript-control","Data.Semiring":"purescript-prelude","Data.StrMap.ST":"purescript-maps","Data.Exists":"purescript-exists","Data.Traversable.Accum":"purescript-foldable-traversable","Data.CommutativeRing":"purescript-prelude","Data.NaturalTransformation":"purescript-prelude","Data.Monoid.Conj":"purescript-monoid","Data.Yoneda":"purescript-free","Data.Functor.App":"purescript-functors","Data.Profunctor.Star":"purescript-profunctor","Data.Unfoldable":"purescript-unfoldable","Data.Profunctor.Wrap":"purescript-profunctor","Control.Monad.Eff.Random":"purescript-random","Optic.Setter":"purescript-lens","Control.Comonad.Store.Trans":"purescript-transformers","Control.Monad.ST":"purescript-st","Control.Monad.State.Class":"purescript-transformers","Data.List.Types":"purescript-lists","Data.Functor":"purescript-prelude","Unsafe.Coerce":"purescript-unsafe-coerce","Control.Monad.Writer.Class":"purescript-transformers","Data.Generic.Rep.Ord":"purescript-generics-rep","Data.Profunctor.Strong":"purescript-profunctor","Data.CatQueue":"purescript-catenable-lists","Control.Monad.Except":"purescript-transformers","Data.Interval":"purescript-datetime","Data.List.Lazy.Types":"purescript-lists","Data.DateTime.Locale":"purescript-datetime","Control.Category":"purescript-prelude","Test.QuickCheck.Arbitrary":"purescript-quickcheck","Data.Interval.Duration":"purescript-datetime","Control.Monad.Gen.Common":"purescript-gen","Control.Monad.RWS.Trans":"purescript-transformers","Test.QuickCheck.Data.AlphaNumString":"purescript-quickcheck","Control.Monad.Cont.Trans":"purescript-transformers","Data.Maybe":"purescript-maybe","Type.Row":"purescript-typelevel-prelude","Data.String.Regex.Unsafe":"purescript-strings","Data.Set":"purescript-sets","Data.Profunctor":"purescript-profunctor","Control.Comonad":"purescript-control","Data.Function":"purescript-prelude","Data.List":"purescript-lists","Data.Record.Builder":"purescript-record","Optic.Laws.Lens":"purescript-lens","Data.Field":"purescript-prelude","Data.List.Lazy":"purescript-lists","Data.Generic.Rep.Eq":"purescript-generics-rep","Test.Unit.Output.TAP":"purescript-test-unit","Data.EuclideanRing":"purescript-prelude","Data.Functor.Invariant":"purescript-invariant","Control.Comonad.Traced":"purescript-transformers","Global.Unsafe":"purescript-globals","Data.Comparison":"purescript-contravariant","Data.String.Unsafe":"purescript-strings","Prelude":"purescript-prelude","Control.Monad.Aff":"purescript-aff","Data.Predicate":"purescript-contravariant","Partial.Unsafe":"purescript-partial","Data.Array":"purescript-arrays","Data.Bifunctor.Product":"purescript-bifunctors","Control.Extend":"purescript-control","Test.Unit.Console":"purescript-test-unit","Control.Lazy":"purescript-control","Data.Function.Uncurried":"purescript-functions","Control.Monad.Reader.Trans":"purescript-transformers","Data.Functor.Product.Nested":"purescript-functors","Test.Unit.Output.Simple":"purescript-test-unit","Control.Comonad.Env.Class":"purescript-transformers","Data.Interval.Duration.Iso":"purescript-datetime","Data.Eq":"purescript-prelude","Data.Either.Nested":"purescript-either","Control.Comonad.Cofree":"purescript-free","Data.Newtype":"purescript-newtype","Control.Monad.Eff.Console":"purescript-console","Data.Semigroup.Traversable":"purescript-foldable-traversable","Data.Bifunctor":"purescript-bifunctors","Test.Assert":"purescript-assert","Data.Monoid.Disj":"purescript-monoid","Control.Monad.Eff.Exception":"purescript-exceptions","Control.Monad.Eff.Timer":"purescript-js-timers","Control.Monad.Gen.Class":"purescript-gen","Data.Array.Partial":"purescript-arrays","Data.String.CaseInsensitive":"purescript-strings","Data.Record.ST":"purescript-record","Control.Monad.Free":"purescript-free","Control.Parallel":"purescript-parallel","Control.MonadPlus":"purescript-control","Data.Void":"purescript-prelude","Control.MonadZero":"purescript-control","Data.DateTime.Instant":"purescript-datetime","Data.Profunctor.Costrong":"purescript-profunctor","Control.Comonad.Store":"purescript-transformers","Control.Monad.Except.Trans":"purescript-transformers","Control.Monad.Aff.Compat":"purescript-aff","Data.Bifunctor.Joker":"purescript-bifunctors","Data.FunctorWithIndex":"purescript-foldable-traversable","Data.Divisible":"purescript-contravariant","Data.DivisionRing":"purescript-prelude","Data.Bifunctor.Wrap":"purescript-bifunctors","Data.Equivalence":"purescript-contravariant","Data.Maybe.Last":"purescript-maybe","Data.Unit":"purescript-prelude","Control.Monad.Eff.Ref.Unsafe":"purescript-refs","Data.List.NonEmpty":"purescript-lists","Data.List.Lazy.NonEmpty":"purescript-lists","Data.Ordering":"purescript-prelude","Data.Functor.Coproduct":"purescript-functors","Control.Monad.Cont.Class":"purescript-transformers","Data.Identity":"purescript-identity","Math":"purescript-math","Control.Comonad.Trans.Class":"purescript-transformers","Data.String":"purescript-strings","Control.Plus":"purescript-control","Data.Profunctor.Joker":"purescript-profunctor","Control.Monad.Eff.Class":"purescript-eff","Test.QuickCheck":"purescript-quickcheck","Test.Unit.Main":"purescript-test-unit","Data.Time":"purescript-datetime","Type.Row.Effect.Equality":"purescript-type-equality","Data.Time.Duration":"purescript-datetime","Data.Date.Component":"purescript-datetime","Partial":"purescript-partial","Control.Comonad.Env.Trans":"purescript-transformers","Global":"purescript-globals","Control.Monad.Reader.Class":"purescript-transformers","Data.Decidable":"purescript-contravariant","Control.Monad.Aff.Unsafe":"purescript-aff","Data.Monoid.Multiplicative":"purescript-monoid","Type.Data.Symbol":"purescript-typelevel-prelude","Data.Array.ST":"purescript-arrays","Control.Monad.Error.Class":"purescript-transformers","Test.Unit":"purescript-test-unit","Data.Generic.Rep.Monoid":"purescript-generics-rep","Control.Monad.Aff.Console":"purescript-aff","Control.Semigroupoid":"purescript-prelude","Debug.Trace":"purescript-debug","Data.Monoid.Alternate":"purescript-monoid","Data.Char":"purescript-strings","Data.Generic.Rep":"purescript-generics-rep","Data.Bifunctor.Join":"purescript-bifunctors","Control.Monad.Eff.Exception.Unsafe":"purescript-exceptions","Data.Bifoldable":"purescript-foldable-traversable","Data.Monoid.Endo":"purescript-monoid","Control.Monad.State":"purescript-transformers","Data.List.Partial":"purescript-lists","Data.String.Regex.Flags":"purescript-strings","Data.Either":"purescript-either","Data.Time.Duration.Gen":"purescript-datetime","Data.Date.Component.Gen":"purescript-datetime","Type.Prelude":"purescript-typelevel-prelude","Control.Applicative":"purescript-prelude","Data.FoldableWithIndex":"purescript-foldable-traversable","Data.Op":"purescript-contravariant","Test.QuickCheck.Gen":"purescript-quickcheck","Control.Monad.Eff.AVar":"purescript-avar","Control.Monad.Writer":"purescript-transformers","Data.Profunctor.Choice":"purescript-profunctor","Data.Time.Gen":"purescript-datetime","Data.Traversable":"purescript-foldable-traversable","Data.String.Gen":"purescript-strings"},"compilerVersion":"0.11.7"}