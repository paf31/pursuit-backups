{"uploader":"sharkdp","packageMeta":{"homepage":"https://github.com/sharkdp/purescript-numbers","repository":{"url":"git://github.com/sharkdp/purescript-numbers.git","type":"git"},"ignore":["**/.*","bower_components","output"],"devDependencies":{"purescript-console":"^4.1.0","purescript-test-unit":"justinwoo/purescript-test-unit#compiler/0.12"},"authors":[{"email":"mail@david-peter.de","name":"David Peter"}],"dependencies":{"purescript-maybe":"^4.0.0","purescript-globals":"^4.0.0","purescript-math":"^2.0.0"},"name":"purescript-numbers","license":["MIT"],"description":"Functions for working with Numbers"},"tagTime":"2018-05-27T18:07:30+0000","modules":[{"reExports":[],"name":"Data.Number","comments":"Functions for working with PureScripts builtin `Number` type.\n","declarations":[{"children":[],"comments":"Attempt to parse a `Number` using JavaScripts `parseFloat`. Returns\n`Nothing` if the parse fails or if the result is not a finite number.\n\nExample:\n```purs\n> fromString \"123\"\n(Just 123.0)\n\n> fromString \"12.34\"\n(Just 12.34)\n\n> fromString \"1e4\"\n(Just 10000.0)\n\n> fromString \"1.2e4\"\n(Just 12000.0)\n\n> fromString \"bad\"\nNothing\n```\n\nNote that `parseFloat` allows for trailing non-digit characters and\nwhitespace as a prefix:\n```\n> fromString \"  1.2 ??\"\n(Just 1.2)\n```\n","title":"fromString","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]}]}},"sourceSpan":{"start":[42,1],"name":"/home/shark/Dropbox/Informatik/purescript/purescript-numbers/src/Data/Number.purs","end":[42,35]}},{"children":[],"comments":"Not a number (NaN).\n","title":"nan","info":{"declType":"value","type":{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}},"sourceSpan":{"start":[49,1],"name":"/home/shark/Dropbox/Informatik/purescript/purescript-numbers/src/Data/Number.purs","end":[49,13]}},{"children":[],"comments":"Test whether a `Number` is NaN.\n","title":"isNaN","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}},"sourceSpan":{"start":[53,1],"name":"/home/shark/Dropbox/Informatik/purescript/purescript-numbers/src/Data/Number.purs","end":[53,25]}},{"children":[],"comments":"Positive infinity.\n","title":"infinity","info":{"declType":"value","type":{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}},"sourceSpan":{"start":[57,1],"name":"/home/shark/Dropbox/Informatik/purescript/purescript-numbers/src/Data/Number.purs","end":[57,18]}},{"children":[],"comments":"Test whether a number is finite.\n","title":"isFinite","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}},"sourceSpan":{"start":[61,1],"name":"/home/shark/Dropbox/Informatik/purescript/purescript-numbers/src/Data/Number.purs","end":[61,28]}}]},{"reExports":[],"name":"Data.Number.Approximate","comments":"This module defines functions for comparing numbers.\n","declarations":[{"children":[{"comments":null,"title":"Fraction","info":{"arguments":[{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}],"declType":"dataConstructor"},"sourceSpan":null}],"comments":"A newtype for (small) numbers, typically in the range *[0:1]*. It is used\nas an argument for `eqRelative`.\n","title":"Fraction","info":{"declType":"data","dataDeclType":"newtype","typeArguments":[]},"sourceSpan":{"start":[20,1],"name":"/home/shark/Dropbox/Informatik/purescript/purescript-numbers/src/Data/Number/Approximate.purs","end":[20,35]}},{"children":[],"comments":"Compare two `Number`s and return `true` if they are equal up to the\ngiven *relative* error (`Fraction` parameter).\n\nThis comparison is scale-invariant, i.e. if `eqRelative frac x y`, then\n`eqRelative frac (s * x) (s * y)` for a given scale factor `s > 0.0`\n(unless one of x, y is exactly `0.0`).\n\nNote that the relation that `eqRelative frac` induces on `Number` is\nnot an equivalence relation. It is reflexive and symmetric, but not\ntransitive.\n\nExample:\n``` purs\n> (eqRelative (Fraction 0.01)) 133.7 133.0\ntrue\n\n> (eqRelative (Fraction 0.001)) 133.7 133.0\nfalse\n\n> (eqRelative (Fraction 0.01)) (0.1 + 0.2) 0.3\ntrue\n```\n","title":"eqRelative","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Number","Approximate"],"Fraction"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}]}]}},"sourceSpan":{"start":[44,1],"name":"/home/shark/Dropbox/Informatik/purescript/purescript-numbers/src/Data/Number/Approximate.purs","end":[44,50]}},{"children":[],"comments":"Test if two numbers are approximately equal, up to a relative difference\nof one part in a million:\n``` purs\neqApproximate = eqRelative (Fraction 1.0e-6)\n```\n\nExample\n``` purs\n> 0.1 + 0.2 == 0.3\nfalse\n\n> 0.1 + 0.2 ≅ 0.3\ntrue\n```\n","title":"eqApproximate","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}]}},"sourceSpan":{"start":[63,1],"name":"/home/shark/Dropbox/Informatik/purescript/purescript-numbers/src/Data/Number/Approximate.purs","end":[63,42]}},{"children":[],"comments":null,"title":"(~=)","info":{"declType":"alias","alias":[["Data","Number","Approximate"],{"Right":{"Left":{"Ident":"eqApproximate"}}}],"fixity":{"associativity":"infix","precedence":4}},"sourceSpan":{"start":[69,1],"name":"/home/shark/Dropbox/Informatik/purescript/purescript-numbers/src/Data/Number/Approximate.purs","end":[69,28]}},{"children":[],"comments":null,"title":"(≅)","info":{"declType":"alias","alias":[["Data","Number","Approximate"],{"Right":{"Left":{"Ident":"eqApproximate"}}}],"fixity":{"associativity":"infix","precedence":4}},"sourceSpan":{"start":[70,1],"name":"/home/shark/Dropbox/Informatik/purescript/purescript-numbers/src/Data/Number/Approximate.purs","end":[70,27]}},{"children":[],"comments":"The complement of `eqApproximate`.\n","title":"neqApproximate","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}]}},"sourceSpan":{"start":[73,1],"name":"/home/shark/Dropbox/Informatik/purescript/purescript-numbers/src/Data/Number/Approximate.purs","end":[73,43]}},{"children":[],"comments":null,"title":"(≇)","info":{"declType":"alias","alias":[["Data","Number","Approximate"],{"Right":{"Left":{"Ident":"neqApproximate"}}}],"fixity":{"associativity":"infix","precedence":4}},"sourceSpan":{"start":[76,1],"name":"/home/shark/Dropbox/Informatik/purescript/purescript-numbers/src/Data/Number/Approximate.purs","end":[76,28]}},{"children":[{"comments":null,"title":"Tolerance","info":{"arguments":[{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}],"declType":"dataConstructor"},"sourceSpan":null}],"comments":"A newtype for (small) numbers. It is used as an argument for `eqAbsolute`.\n","title":"Tolerance","info":{"declType":"data","dataDeclType":"newtype","typeArguments":[]},"sourceSpan":{"start":[79,1],"name":"/home/shark/Dropbox/Informatik/purescript/purescript-numbers/src/Data/Number/Approximate.purs","end":[79,37]}},{"children":[],"comments":"Compare two `Number`s and return `true` if they are equal up to the given\n(absolute) tolerance value. Note that this type of comparison is *not*\nscale-invariant. The relation induced by `(eqAbsolute (Tolerance eps))` is\nsymmetric and reflexive, but not transitive.\n\nExample:\n``` purs\n> (eqAbsolute (Tolerance 1.0)) 133.7 133.0\ntrue\n\n> (eqAbsolute (Tolerance 0.1)) 133.7 133.0\nfalse\n```\n","title":"eqAbsolute","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Number","Approximate"],"Tolerance"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}]}]}},"sourceSpan":{"start":[94,1],"name":"/home/shark/Dropbox/Informatik/purescript/purescript-numbers/src/Data/Number/Approximate.purs","end":[94,51]}}]},{"reExports":[],"name":"Data.Number.Format","comments":"A module for formatting numbers as strings.\n\nUsage:\n``` purs\n> let x = 1234.56789\n\n> toStringWith (precision 6) x\n\"1234.57\"\n\n> toStringWith (fixed 3) x\n\"1234.568\"\n\n> toStringWith (exponential 2) x\n\"1.23e+3\"\n```\n\nThe main method of this module is the `toStringWith` function that accepts\na `Format` argument which can be constructed through one of the smart\nconstructors `precision`, `fixed` and `exponential`. Internally, the\nnumber will be formatted with JavaScripts `toPrecision`, `toFixed` or\n`toExponential`.\n","declarations":[{"children":[],"comments":"The `Format` data type specifies how a number will be formatted.\n","title":"Format","info":{"declType":"data","dataDeclType":"data","typeArguments":[]},"sourceSpan":{"start":[38,1],"name":"/home/shark/Dropbox/Informatik/purescript/purescript-numbers/src/Data/Number/Format.purs","end":[41,20]}},{"children":[],"comments":"Create a `toPrecision`-based format from an integer. Values smaller than\n`1` and larger than `21` will be clamped.\n","title":"precision","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeConstructor","contents":[["Data","Number","Format"],"Format"]}]}},"sourceSpan":{"start":[45,1],"name":"/home/shark/Dropbox/Informatik/purescript/purescript-numbers/src/Data/Number/Format.purs","end":[45,25]}},{"children":[],"comments":"Create a `toFixed`-based format from an integer. Values smaller than `0`\nand larger than `20` will be clamped.\n","title":"fixed","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeConstructor","contents":[["Data","Number","Format"],"Format"]}]}},"sourceSpan":{"start":[50,1],"name":"/home/shark/Dropbox/Informatik/purescript/purescript-numbers/src/Data/Number/Format.purs","end":[50,21]}},{"children":[],"comments":"Create a `toExponential`-based format from an integer. Values smaller than\n`0` and larger than `20` will be clamped.\n","title":"exponential","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeConstructor","contents":[["Data","Number","Format"],"Format"]}]}},"sourceSpan":{"start":[55,1],"name":"/home/shark/Dropbox/Informatik/purescript/purescript-numbers/src/Data/Number/Format.purs","end":[55,27]}},{"children":[],"comments":"Convert a number to a string with a given format.\n","title":"toStringWith","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Number","Format"],"Format"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}]}},"sourceSpan":{"start":[59,1],"name":"/home/shark/Dropbox/Informatik/purescript/purescript-numbers/src/Data/Number/Format.purs","end":[59,40]}},{"children":[],"comments":"Convert a number to a string via JavaScript's toString method.\n\n```purs\n> toString 12.34\n\"12.34\"\n\n> toString 1234.0\n\"1234\"\n\n> toString 1.2e-10\n\"1.2e-10\"\n```\n","title":"toString","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}},"sourceSpan":{"start":[76,1],"name":"/home/shark/Dropbox/Informatik/purescript/purescript-numbers/src/Data/Number/Format.purs","end":[76,36]}}]}],"resolvedDependencies":{"purescript-free":"5.0.0","purescript-proxy":"3.0.0","purescript-exceptions":"4.0.0","purescript-newtype":"3.0.0","purescript-effect":"2.0.0","purescript-ordered-collections":"1.0.0","purescript-control":"4.0.0","purescript-console":"4.1.0","purescript-either":"4.0.0","purescript-arrays":"5.0.0","purescript-maybe":"4.0.0","purescript-type-equality":"3.0.0","purescript-js-timers":"4.0.0","purescript-exists":"4.0.0","purescript-distributive":"4.0.0","purescript-unfoldable":"4.0.0","purescript-invariant":"4.0.0","purescript-lcg":"2.0.0","purescript-lazy":"4.0.0","purescript-aff":"5.0.0","purescript-foldable-traversable":"4.0.0","purescript-tailrec":"4.0.0","purescript-avar":"3.0.0","purescript-gen":"2.0.0","purescript-typelevel-prelude":"3.0.0","purescript-functors":"3.0.0","purescript-prelude":"4.0.0","purescript-st":"4.0.0","purescript-bifunctors":"4.0.0","purescript-nonempty":"5.0.0","purescript-contravariant":"4.0.0","purescript-unsafe-coerce":"4.0.0","purescript-refs":"4.1.0","purescript-integers":"4.0.0","purescript-orders":"4.0.0","purescript-const":"4.0.0","purescript-record":"1.0.0","purescript-transformers":"4.0.0","purescript-globals":"4.0.0","purescript-generics-rep":"6.0.0","purescript-math":"2.1.1","purescript-enums":"4.0.0","purescript-catenable-lists":"5.0.0","purescript-random":"4.0.0","purescript-parallel":"4.0.0","purescript-tuples":"5.0.0","purescript-partial":"2.0.0","purescript-quickcheck":"5.0.0","purescript-strings":"4.0.0","purescript-identity":"4.0.0","purescript-lists":"5.0.0","purescript-datetime":"4.0.0","purescript-functions":"4.0.0"},"version":"6.0.0","github":["sharkdp","purescript-numbers"],"versionTag":"v6.0.0","moduleMap":{"Data.BooleanAlgebra":"purescript-prelude","Data.Decide":"purescript-contravariant","Type.Data.Boolean":"purescript-typelevel-prelude","Data.Ring":"purescript-prelude","Record.ST":"purescript-record","Control.Monad.Trans.Class":"purescript-transformers","Record.Unsafe.Union":"purescript-record","Data.Functor.Product":"purescript-functors","Data.NonEmpty":"purescript-nonempty","Effect.Uncurried":"purescript-effect","Data.Char.Gen":"purescript-strings","Data.String.NonEmpty":"purescript-strings","Effect":"purescript-effect","Data.Traversable.Accum.Internal":"purescript-foldable-traversable","Data.Enum.Gen":"purescript-enums","Control.Comonad.Env":"purescript-transformers","Control.Comonad.Traced.Class":"purescript-transformers","Data.Functor.Compose":"purescript-functors","Type.Row.Homogeneous":"purescript-typelevel-prelude","Data.Int.Bits":"purescript-integers","Data.DateTime":"purescript-datetime","Data.Bifunctor.Flip":"purescript-bifunctors","Data.String.CodePoints":"purescript-strings","Data.Ord":"purescript-prelude","Control.Monad.Gen":"purescript-gen","Type.Data.Row":"purescript-prelude","Data.Date":"purescript-datetime","Data.Monoid.Dual":"purescript-prelude","Control.Monad.Rec.Class":"purescript-tailrec","Data.Time.Component":"purescript-datetime","Data.Bitraversable":"purescript-foldable-traversable","Record.Builder":"purescript-record","Data.Boolean":"purescript-prelude","Data.Map":"purescript-ordered-collections","Control.Biapplicative":"purescript-bifunctors","Data.CatList":"purescript-catenable-lists","Effect.Exception.Unsafe":"purescript-exceptions","Control.Parallel.Class":"purescript-parallel","Data.Array.NonEmpty.Internal":"purescript-arrays","Type.Proxy":"purescript-proxy","Data.Coyoneda":"purescript-free","Effect.Aff.Compat":"purescript-aff","Data.Array.ST.Iterator":"purescript-arrays","Data.DateTime.Gen":"purescript-datetime","Data.String.Pattern":"purescript-strings","Data.Bounded":"purescript-prelude","Control.Monad.State.Trans":"purescript-transformers","Data.TraversableWithIndex":"purescript-foldable-traversable","Data.Int":"purescript-integers","Data.Show":"purescript-prelude","Random.LCG":"purescript-lcg","Data.Bifunctor.Clown":"purescript-bifunctors","Control.Monad.Writer.Trans":"purescript-transformers","Data.Foldable":"purescript-foldable-traversable","Data.Divide":"purescript-contravariant","Control.Comonad.Store.Class":"purescript-transformers","Data.Enum":"purescript-enums","Control.Monad.Trampoline":"purescript-free","Control.Apply":"purescript-prelude","Data.Functor.Contravariant":"purescript-contravariant","Data.Tuple.Nested":"purescript-tuples","Data.Generic.Rep.Semigroup":"purescript-generics-rep","Control.Monad":"purescript-prelude","Data.Lazy":"purescript-lazy","Data.Monoid":"purescript-prelude","Control.Monad.List.Trans":"purescript-transformers","Control.Monad.RWS":"purescript-transformers","Data.String.Common":"purescript-strings","Data.Maybe.First":"purescript-maybe","Control.Bind":"purescript-prelude","Effect.Aff.Class":"purescript-aff","Data.Monoid.Additive":"purescript-prelude","Data.Symbol":"purescript-prelude","Data.Map.Gen":"purescript-ordered-collections","Data.String.Regex":"purescript-strings","Data.HeytingAlgebra":"purescript-prelude","Control.Alt":"purescript-control","Data.Date.Gen":"purescript-datetime","Control.Monad.Maybe.Trans":"purescript-transformers","Control.Monad.Cont":"purescript-transformers","Control.Monad.ST.Internal":"purescript-st","Type.Data.RowList":"purescript-prelude","Data.Time.Component.Gen":"purescript-datetime","Effect.Ref":"purescript-refs","Data.Either.Inject":"purescript-either","Data.List.ZipList":"purescript-lists","Data.Ord.Min":"purescript-orders","Data.Functor.Coproduct.Nested":"purescript-functors","Data.Ord.Unsafe":"purescript-prelude","Data.Semigroup":"purescript-prelude","Data.Array.NonEmpty":"purescript-arrays","Control.Monad.Reader":"purescript-transformers","Data.Const":"purescript-const","Data.Generic.Rep.Enum":"purescript-generics-rep","Data.Generic.Rep.Bounded":"purescript-generics-rep","Control.Comonad.Traced.Trans":"purescript-transformers","Data.Ord.Down":"purescript-orders","Data.Array.ST.Partial":"purescript-arrays","Data.Generic.Rep.Show":"purescript-generics-rep","Effect.Unsafe":"purescript-effect","Type.Data.Ordering":"purescript-typelevel-prelude","Data.Tuple":"purescript-tuples","Data.Semigroup.Foldable":"purescript-foldable-traversable","Control.Biapply":"purescript-bifunctors","Data.Distributive":"purescript-distributive","Effect.Exception":"purescript-exceptions","Type.Equality":"purescript-type-equality","Control.Alternative":"purescript-control","Data.Semiring":"purescript-prelude","Data.Exists":"purescript-exists","Effect.Console":"purescript-console","Data.Traversable.Accum":"purescript-foldable-traversable","Data.CommutativeRing":"purescript-prelude","Data.NaturalTransformation":"purescript-prelude","Data.Monoid.Conj":"purescript-prelude","Data.Yoneda":"purescript-free","Data.Functor.App":"purescript-functors","Effect.Timer":"purescript-js-timers","Data.Unfoldable":"purescript-unfoldable","Control.Comonad.Store.Trans":"purescript-transformers","Control.Monad.ST":"purescript-st","Control.Monad.State.Class":"purescript-transformers","Data.List.Types":"purescript-lists","Data.String.NonEmpty.CodeUnits":"purescript-strings","Data.Functor":"purescript-prelude","Unsafe.Coerce":"purescript-unsafe-coerce","Control.Monad.Writer.Class":"purescript-transformers","Data.Generic.Rep.Ord":"purescript-generics-rep","Data.CatQueue":"purescript-catenable-lists","Control.Monad.Except":"purescript-transformers","Data.Interval":"purescript-datetime","Data.List.Lazy.Types":"purescript-lists","Control.Category":"purescript-prelude","Test.QuickCheck.Arbitrary":"purescript-quickcheck","Data.Interval.Duration":"purescript-datetime","Control.Monad.Gen.Common":"purescript-gen","Control.Monad.RWS.Trans":"purescript-transformers","Control.Monad.Cont.Trans":"purescript-transformers","Data.Maybe":"purescript-maybe","Type.Row":"purescript-typelevel-prelude","Data.String.Regex.Unsafe":"purescript-strings","Data.Set":"purescript-ordered-collections","Control.Comonad":"purescript-control","Data.Function":"purescript-prelude","Data.List":"purescript-lists","Data.Field":"purescript-prelude","Data.List.Lazy":"purescript-lists","Data.Generic.Rep.Eq":"purescript-generics-rep","Data.EuclideanRing":"purescript-prelude","Data.Semigroup.Last":"purescript-prelude","Data.Semigroup.First":"purescript-prelude","Data.Functor.Invariant":"purescript-invariant","Control.Comonad.Traced":"purescript-transformers","Global.Unsafe":"purescript-globals","Data.Comparison":"purescript-contravariant","Data.String.Unsafe":"purescript-strings","Prelude":"purescript-prelude","Effect.Class":"purescript-effect","Data.Predicate":"purescript-contravariant","Partial.Unsafe":"purescript-partial","Data.Array":"purescript-arrays","Data.Bifunctor.Product":"purescript-bifunctors","Control.Extend":"purescript-control","Data.Unfoldable1":"purescript-unfoldable","Control.Lazy":"purescript-control","Data.Function.Uncurried":"purescript-functions","Control.Monad.Reader.Trans":"purescript-transformers","Data.Functor.Product.Nested":"purescript-functors","Control.Comonad.Env.Class":"purescript-transformers","Effect.Aff.AVar":"purescript-avar","Data.Interval.Duration.Iso":"purescript-datetime","Data.Eq":"purescript-prelude","Data.Either.Nested":"purescript-either","Control.Comonad.Cofree":"purescript-free","Data.Newtype":"purescript-newtype","Data.Semigroup.Traversable":"purescript-foldable-traversable","Data.Bifunctor":"purescript-bifunctors","Effect.Random":"purescript-random","Data.Monoid.Disj":"purescript-prelude","Control.Monad.Gen.Class":"purescript-gen","Data.Array.Partial":"purescript-arrays","Data.String.CaseInsensitive":"purescript-strings","Control.Monad.Free":"purescript-free","Control.Parallel":"purescript-parallel","Control.MonadPlus":"purescript-control","Data.Void":"purescript-prelude","Control.MonadZero":"purescript-control","Data.DateTime.Instant":"purescript-datetime","Data.Ord.Max":"purescript-orders","Effect.AVar":"purescript-avar","Control.Comonad.Store":"purescript-transformers","Control.Monad.Except.Trans":"purescript-transformers","Data.String.CodeUnits":"purescript-strings","Data.Bifunctor.Joker":"purescript-bifunctors","Data.FunctorWithIndex":"purescript-foldable-traversable","Data.Divisible":"purescript-contravariant","Data.DivisionRing":"purescript-prelude","Record":"purescript-record","Data.Bifunctor.Wrap":"purescript-bifunctors","Data.Equivalence":"purescript-contravariant","Data.Maybe.Last":"purescript-maybe","Data.Unit":"purescript-prelude","Data.List.NonEmpty":"purescript-lists","Data.List.Lazy.NonEmpty":"purescript-lists","Data.Ordering":"purescript-prelude","Data.Functor.Coproduct":"purescript-functors","Control.Monad.Cont.Class":"purescript-transformers","Effect.Aff":"purescript-aff","Data.Identity":"purescript-identity","Math":"purescript-math","Control.Comonad.Trans.Class":"purescript-transformers","Data.String":"purescript-strings","Control.Plus":"purescript-control","Test.QuickCheck":"purescript-quickcheck","Data.Map.Internal":"purescript-ordered-collections","Data.Time":"purescript-datetime","Data.Time.Duration":"purescript-datetime","Data.Date.Component":"purescript-datetime","Partial":"purescript-partial","Control.Comonad.Env.Trans":"purescript-transformers","Global":"purescript-globals","Control.Monad.Reader.Class":"purescript-transformers","Data.String.NonEmpty.CodePoints":"purescript-strings","Data.Decidable":"purescript-contravariant","Data.String.NonEmpty.Internal":"purescript-strings","Data.Monoid.Multiplicative":"purescript-prelude","Data.String.NonEmpty.CaseInsensitive":"purescript-strings","Type.Data.Symbol":"purescript-typelevel-prelude","Data.Array.ST":"purescript-arrays","Control.Monad.Error.Class":"purescript-transformers","Data.Generic.Rep.Monoid":"purescript-generics-rep","Control.Semigroupoid":"purescript-prelude","Data.Char":"purescript-strings","Data.Generic.Rep":"purescript-generics-rep","Effect.Class.Console":"purescript-console","Data.Bifunctor.Join":"purescript-bifunctors","Data.Bifoldable":"purescript-foldable-traversable","Control.Monad.ST.Ref":"purescript-st","Data.Monoid.Endo":"purescript-prelude","Control.Monad.State":"purescript-transformers","Data.List.Partial":"purescript-lists","Data.String.Regex.Flags":"purescript-strings","Data.Either":"purescript-either","Data.Time.Duration.Gen":"purescript-datetime","Data.Date.Component.Gen":"purescript-datetime","Type.Prelude":"purescript-typelevel-prelude","Control.Applicative":"purescript-prelude","Data.FoldableWithIndex":"purescript-foldable-traversable","Data.Op":"purescript-contravariant","Record.Unsafe":"purescript-prelude","Test.QuickCheck.Gen":"purescript-quickcheck","Control.Monad.Writer":"purescript-transformers","Data.Functor.Coproduct.Inject":"purescript-functors","Data.Time.Gen":"purescript-datetime","Data.Traversable":"purescript-foldable-traversable","Data.String.Gen":"purescript-strings"},"compilerVersion":"0.11.7"}