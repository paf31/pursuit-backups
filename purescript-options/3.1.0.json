{"uploader":"ethul","packageMeta":{"homepage":"https://github.com/ethul/purescript-options","repository":{"url":"git://github.com/ethul/purescript-options.git","type":"git"},"ignore":["*","!src/**/*","!LICENSE"],"devDependencies":{"purescript-console":"^3.0.0"},"dependencies":{"purescript-maps":"^3.0.0","purescript-maybe":"^3.0.0","purescript-monoid":"^3.0.0","purescript-contravariant":"^3.0.0","purescript-tuples":"^4.0.0","purescript-foreign":"^4.0.0"},"name":"purescript-options","keywords":["purescript"],"license":["MIT"],"description":"PureScript Options"},"tagTime":"2017-11-19T22:38:24+0000","modules":[{"reExports":[],"name":"Data.Options","comments":"This module provides a way of dealing with the JS idiom of options\nobjects in PureScript, by giving you the tools to provide a reasonably\ncomfortable typed layer on top of JavaScript APIs which make use of this\nidiom.\n\nMany JavaScript APIs include functions which take an object argument,\nwhere the object's properties come from a fixed set of optional\nconfiguration values. For example, the `createWriteStream` function from\nthe Node.js `fs` module may contain properties such as:\n\n- `flags`, which should be a `String`, such as `\"w\"`, `\"rw\"`, or `\"r+\"`,\n- `defaultEncoding`, which should be a `String` representing an\n  encoding, such as `\"utf8\"`,\n\nand so on.\n\nPureScript's record types can be a little awkward for this, since it is\nusually the case that any subset of these properties can be specified;\nhowever, a value of  type `{ flags :: String, defaultEncoding :: String, [...] }`\nmust include every property listed, even if you only want to specify\none or two properties.\n\nUsing this module, you could wrap `fs.createWriteStream` as follows:\n\nFirst, create a phantom type used for the options object:\n\n```purescript\ndata CreateWriteStreamOptions\n```\n\nThen, create `Option` values for each of the options:\n\n```purescript\nflags :: Option CreateWriteStreamOptions String\nflags = opt \"flags\"\n\ndefaultEncoding :: Option CreateWriteStreamOptions String\ndefaultEncoding = opt \"defaultEncoding\"\n\n-- and so on\n```\n\nImport the function you're wrapping using the FFI, using the `Foreign`\ntype for the options object:\n\n```purescript\n-- don't export this!\nforeign import createWriteStreamImpl :: forall eff. FilePath -> Foreign -> Eff (fs :: FS | eff) Unit\n```\n\nFinally, in the function you are going to export, take an `Options` value\nfor the options argument, and use the `options` function provided by this\nlibrary to convert it into a `Foreign` value, which will then have a\nsuitable representation for passing to the JavaScript API.\n\n```\ncreateWriteStream :: forall eff. FilePath -> Options CreateWriteStreamOptions -> Eff (fs :: FS | eff) Unit\ncreateWriteStream path opts = createWriteStreamImpl path (options opts)\n```\n\nThen, users of your API can create `Options` values using the `:=`\noperator to assign values for the options they want to configure, and the\n`Monoid Options` instance to combine them. For example, as a user of this\nAPI, you might write:\n\n```purescript\nFS.createWriteStream \"file.txt\" $\n   defaultEncoding := \"utf8\" <>\n   flags := \"rw\"\n```\n\nYou can also use more specific types for more type safety. For example,\nit would be safer to use the existing `FileFlags` and `Encoding` types\nalready provided by the `node-fs` library. However, we cannot use them\ndirectly because they will have the wrong runtime representation. This is\nwhere the `Contravariant` instance for `Option` comes in; it can be used\nto transform an option's value to give it a suitable runtime\nrepresentation based on what the JS API is expecting. For example:\n\n```purescript\nflags :: Option CreateWriteStreamOptions FileFlags\nflags = cmap fileFlagsToNode (opt \"flags\")\n```\n\nNote that `fileFlagsToNode` takes a `FileFlags` and returns a `String`\nsuitable for passing to a Node.js API.\n","declarations":[{"children":[{"comments":null,"title":"Options","info":{"arguments":[{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Tuple"],"Tuple"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeConstructor","contents":[["Data","Foreign"],"Foreign"]}]}}]}}],"declType":"dataConstructor"},"sourceSpan":null},{"comments":null,"title":"newtypeOptions","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Newtype"],"Newtype"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Options"],"Options"]},{"tag":"TypeVar","contents":"opt"}]}}]},{"tag":"TypeWildcard","contents":{"start":[113,57],"name":"/Users/eric/Expansion/tmp/javascript/purescript/purescript-options/src/Data/Options.purs","end":[113,58]}}]}},"sourceSpan":{"start":[113,8],"name":"/Users/eric/Expansion/tmp/javascript/purescript/purescript-options/src/Data/Options.purs","end":[113,58]}},{"comments":null,"title":"semigroupOptions","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Semigroup"],"Semigroup"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Options"],"Options"]},{"tag":"TypeVar","contents":"opt"}]}}]}},"sourceSpan":{"start":[114,16],"name":"/Users/eric/Expansion/tmp/javascript/purescript/purescript-options/src/Data/Options.purs","end":[114,67]}},{"comments":null,"title":"monoidOptions","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Monoid"],"Monoid"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Options"],"Options"]},{"tag":"TypeVar","contents":"opt"}]}}]}},"sourceSpan":{"start":[115,16],"name":"/Users/eric/Expansion/tmp/javascript/purescript/purescript-options/src/Data/Options.purs","end":[115,61]}}],"comments":"The `Options` type represents a set of options. The type argument is a\nphantom type, which is useful for ensuring that options for one particular\nAPI are not accidentally passed to some other API.\n","title":"Options","info":{"declType":"data","dataDeclType":"newtype","typeArguments":[["opt",null]]},"sourceSpan":{"start":[111,1],"name":"/Users/eric/Expansion/tmp/javascript/purescript/purescript-options/src/Data/Options.purs","end":[111,61]}},{"children":[],"comments":"Convert an `Options` value into a JavaScript object, suitable for passing\nto JavaScript APIs.\n","title":"options","info":{"declType":"value","type":{"tag":"ForAll","contents":["opt",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Options"],"Options"]},{"tag":"TypeVar","contents":"opt"}]}]},{"tag":"TypeConstructor","contents":[["Data","Foreign"],"Foreign"]}]},null]}},"sourceSpan":{"start":[119,1],"name":"/Users/eric/Expansion/tmp/javascript/purescript/purescript-options/src/Data/Options.purs","end":[119,46]}},{"children":[],"comments":"An `Option` represents an opportunity to configure a specific attribute\nof a call to some API. This normally corresponds to one specific property\nof an \"options\" object in JavaScript APIs, but can in general correspond\nto zero or more actual properties.\n","title":"Option","info":{"arguments":[["opt",null]],"declType":"typeSynonym","type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Op"],"Op"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Options"],"Options"]},{"tag":"TypeVar","contents":"opt"}]}}]}},"sourceSpan":{"start":[126,1],"name":"/Users/eric/Expansion/tmp/javascript/purescript/purescript-options/src/Data/Options.purs","end":[126,35]}},{"children":[],"comments":"Associates a value with a specific option.\n","title":"assoc","info":{"declType":"value","type":{"tag":"ForAll","contents":["value",{"tag":"ForAll","contents":["opt",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Options"],"Option"]},{"tag":"TypeVar","contents":"opt"}]},{"tag":"TypeVar","contents":"value"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"value"}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Options"],"Options"]},{"tag":"TypeVar","contents":"opt"}]}]}]},null]},null]}},"sourceSpan":{"start":[129,1],"name":"/Users/eric/Expansion/tmp/javascript/purescript/purescript-options/src/Data/Options.purs","end":[129,68]}},{"children":[],"comments":"An infix version of `assoc`.\n","title":"(:=)","info":{"declType":"alias","alias":[["Data","Options"],{"Right":{"Left":{"Ident":"assoc"}}}],"fixity":{"associativity":"infixr","precedence":6}},"sourceSpan":{"start":[133,1],"name":"/Users/eric/Expansion/tmp/javascript/purescript/purescript-options/src/Data/Options.purs","end":[133,21]}},{"children":[],"comments":"A version of `assoc` which takes possibly absent values. `Nothing` values\nare ignored; passing `Nothing` for the second argument will result in an\nempty `Options`.\n","title":"optional","info":{"declType":"value","type":{"tag":"ForAll","contents":["value",{"tag":"ForAll","contents":["opt",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Options"],"Option"]},{"tag":"TypeVar","contents":"opt"}]},{"tag":"TypeVar","contents":"value"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Options"],"Option"]},{"tag":"TypeVar","contents":"opt"}]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeVar","contents":"value"}]}}]}]},null]},null]}},"sourceSpan":{"start":[138,1],"name":"/Users/eric/Expansion/tmp/javascript/purescript/purescript-options/src/Data/Options.purs","end":[138,75]}},{"children":[],"comments":"The default way of creating `Option` values. Constructs an `Option` with\nthe given key, which passes the given value through unchanged.\n","title":"opt","info":{"declType":"value","type":{"tag":"ForAll","contents":["value",{"tag":"ForAll","contents":["opt",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Options"],"Option"]},{"tag":"TypeVar","contents":"opt"}]},{"tag":"TypeVar","contents":"value"}]}]},null]},null]}},"sourceSpan":{"start":[143,1],"name":"/Users/eric/Expansion/tmp/javascript/purescript/purescript-options/src/Data/Options.purs","end":[143,52]}},{"children":[],"comments":"Create a `tag`, by fixing an `Option` to a single value.\n","title":"tag","info":{"declType":"value","type":{"tag":"ForAll","contents":["value",{"tag":"ForAll","contents":["opt",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Options"],"Option"]},{"tag":"TypeVar","contents":"opt"}]},{"tag":"TypeVar","contents":"value"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"value"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Options"],"Option"]},{"tag":"TypeVar","contents":"opt"}]},{"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}]}]},null]},null]}},"sourceSpan":{"start":[147,1],"name":"/Users/eric/Expansion/tmp/javascript/purescript/purescript-options/src/Data/Options.purs","end":[147,70]}},{"children":[],"comments":"The default method for turning a string property key into an\n`Option`. This function simply calls `toForeign` on the value. If\nyou need some other behaviour, you can write your own function to replace\nthis one, and construct an `Option` yourself.\n","title":"defaultToOptions","info":{"declType":"value","type":{"tag":"ForAll","contents":["value",{"tag":"ForAll","contents":["opt",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"value"}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Options"],"Options"]},{"tag":"TypeVar","contents":"opt"}]}]}]},null]},null]}},"sourceSpan":{"start":[154,1],"name":"/Users/eric/Expansion/tmp/javascript/purescript/purescript-options/src/Data/Options.purs","end":[154,69]}}]}],"resolvedDependencies":{"purescript-newtype":"2.0.0","purescript-maps":"3.5.2","purescript-control":"3.3.1","purescript-console":"3.0.0","purescript-either":"3.1.0","purescript-arrays":"4.2.1","purescript-maybe":"3.0.0","purescript-type-equality":"2.1.0","purescript-distributive":"3.0.0","purescript-unfoldable":"3.0.0","purescript-invariant":"3.0.0","purescript-lazy":"3.0.0","purescript-monoid":"3.3.0","purescript-foldable-traversable":"3.6.1","purescript-tailrec":"3.3.0","purescript-gen":"1.1.1","purescript-prelude":"3.1.1","purescript-st":"3.0.0","purescript-bifunctors":"3.0.0","purescript-nonempty":"4.0.0","purescript-contravariant":"3.1.0","purescript-unsafe-coerce":"3.0.0","purescript-integers":"3.1.0","purescript-eff":"3.1.0","purescript-transformers":"3.4.0","purescript-globals":"3.0.0","purescript-math":"2.1.0","purescript-tuples":"4.1.0","purescript-partial":"1.2.1","purescript-strings":"3.3.2","purescript-identity":"3.1.0","purescript-foreign":"4.0.1","purescript-lists":"4.11.0","purescript-functions":"3.0.0"},"version":"3.1.0","github":["ethul","purescript-options"],"versionTag":"v3.1.0","moduleMap":{"Data.BooleanAlgebra":"purescript-prelude","Data.Decide":"purescript-contravariant","Data.Ring":"purescript-prelude","Control.Monad.Trans.Class":"purescript-transformers","Data.NonEmpty":"purescript-nonempty","Data.Char.Gen":"purescript-strings","Data.Traversable.Accum.Internal":"purescript-foldable-traversable","Control.Comonad.Env":"purescript-transformers","Control.Comonad.Traced.Class":"purescript-transformers","Data.StrMap":"purescript-maps","Control.Monad.Eff.Unsafe":"purescript-eff","Data.Int.Bits":"purescript-integers","Data.Bifunctor.Flip":"purescript-bifunctors","Data.String.CodePoints":"purescript-strings","Data.Ord":"purescript-prelude","Control.Monad.Gen":"purescript-gen","Data.Monoid.Dual":"purescript-monoid","Control.Monad.Rec.Class":"purescript-tailrec","Data.StrMap.ST.Unsafe":"purescript-maps","Data.Bitraversable":"purescript-foldable-traversable","Data.Boolean":"purescript-prelude","Data.Map":"purescript-maps","Control.Biapplicative":"purescript-bifunctors","Data.Array.ST.Iterator":"purescript-arrays","Data.Bounded":"purescript-prelude","Control.Monad.State.Trans":"purescript-transformers","Data.TraversableWithIndex":"purescript-foldable-traversable","Data.Int":"purescript-integers","Data.StrMap.Gen":"purescript-maps","Data.Show":"purescript-prelude","Data.Bifunctor.Clown":"purescript-bifunctors","Control.Monad.Writer.Trans":"purescript-transformers","Data.Foldable":"purescript-foldable-traversable","Data.Divide":"purescript-contravariant","Control.Comonad.Store.Class":"purescript-transformers","Control.Apply":"purescript-prelude","Data.Functor.Contravariant":"purescript-contravariant","Data.Tuple.Nested":"purescript-tuples","Control.Monad":"purescript-prelude","Data.Lazy":"purescript-lazy","Data.Monoid":"purescript-monoid","Control.Monad.Eff.Uncurried":"purescript-eff","Control.Monad.List.Trans":"purescript-transformers","Control.Monad.RWS":"purescript-transformers","Data.Maybe.First":"purescript-maybe","Control.Bind":"purescript-prelude","Data.Foreign.Index":"purescript-foreign","Data.Monoid.Additive":"purescript-monoid","Data.Map.Gen":"purescript-maps","Data.String.Regex":"purescript-strings","Data.HeytingAlgebra":"purescript-prelude","Control.Alt":"purescript-control","Control.Monad.Maybe.Trans":"purescript-transformers","Control.Monad.Cont":"purescript-transformers","Data.List.ZipList":"purescript-lists","Data.Ord.Unsafe":"purescript-prelude","Data.Semigroup":"purescript-prelude","Control.Monad.Reader":"purescript-transformers","Control.Monad.Eff":"purescript-eff","Control.Comonad.Traced.Trans":"purescript-transformers","Data.Array.ST.Partial":"purescript-arrays","Data.StrMap.Unsafe":"purescript-maps","Data.Tuple":"purescript-tuples","Data.Semigroup.Foldable":"purescript-foldable-traversable","Control.Biapply":"purescript-bifunctors","Data.Distributive":"purescript-distributive","Type.Equality":"purescript-type-equality","Control.Alternative":"purescript-control","Data.Semiring":"purescript-prelude","Data.StrMap.ST":"purescript-maps","Data.Traversable.Accum":"purescript-foldable-traversable","Data.CommutativeRing":"purescript-prelude","Data.NaturalTransformation":"purescript-prelude","Data.Monoid.Conj":"purescript-monoid","Data.Unfoldable":"purescript-unfoldable","Control.Comonad.Store.Trans":"purescript-transformers","Control.Monad.ST":"purescript-st","Control.Monad.State.Class":"purescript-transformers","Data.List.Types":"purescript-lists","Data.Functor":"purescript-prelude","Unsafe.Coerce":"purescript-unsafe-coerce","Control.Monad.Writer.Class":"purescript-transformers","Control.Monad.Except":"purescript-transformers","Data.List.Lazy.Types":"purescript-lists","Control.Category":"purescript-prelude","Control.Monad.Gen.Common":"purescript-gen","Control.Monad.RWS.Trans":"purescript-transformers","Control.Monad.Cont.Trans":"purescript-transformers","Data.Maybe":"purescript-maybe","Data.String.Regex.Unsafe":"purescript-strings","Control.Comonad":"purescript-control","Data.Function":"purescript-prelude","Data.List":"purescript-lists","Data.Field":"purescript-prelude","Data.List.Lazy":"purescript-lists","Data.EuclideanRing":"purescript-prelude","Data.Functor.Invariant":"purescript-invariant","Control.Comonad.Traced":"purescript-transformers","Global.Unsafe":"purescript-globals","Data.Comparison":"purescript-contravariant","Data.String.Unsafe":"purescript-strings","Prelude":"purescript-prelude","Data.Predicate":"purescript-contravariant","Partial.Unsafe":"purescript-partial","Data.Array":"purescript-arrays","Data.Bifunctor.Product":"purescript-bifunctors","Control.Extend":"purescript-control","Control.Lazy":"purescript-control","Data.Function.Uncurried":"purescript-functions","Control.Monad.Reader.Trans":"purescript-transformers","Control.Comonad.Env.Class":"purescript-transformers","Data.Eq":"purescript-prelude","Data.Either.Nested":"purescript-either","Data.Newtype":"purescript-newtype","Control.Monad.Eff.Console":"purescript-console","Data.Semigroup.Traversable":"purescript-foldable-traversable","Data.Bifunctor":"purescript-bifunctors","Data.Monoid.Disj":"purescript-monoid","Control.Monad.Gen.Class":"purescript-gen","Data.Array.Partial":"purescript-arrays","Data.Foreign.Keys":"purescript-foreign","Data.String.CaseInsensitive":"purescript-strings","Control.MonadPlus":"purescript-control","Data.Void":"purescript-prelude","Control.MonadZero":"purescript-control","Control.Comonad.Store":"purescript-transformers","Control.Monad.Except.Trans":"purescript-transformers","Data.Bifunctor.Joker":"purescript-bifunctors","Data.FunctorWithIndex":"purescript-foldable-traversable","Data.Divisible":"purescript-contravariant","Data.DivisionRing":"purescript-prelude","Data.Bifunctor.Wrap":"purescript-bifunctors","Data.Equivalence":"purescript-contravariant","Data.Maybe.Last":"purescript-maybe","Data.Unit":"purescript-prelude","Data.List.NonEmpty":"purescript-lists","Data.List.Lazy.NonEmpty":"purescript-lists","Data.Foreign":"purescript-foreign","Data.Ordering":"purescript-prelude","Control.Monad.Cont.Class":"purescript-transformers","Data.Identity":"purescript-identity","Math":"purescript-math","Control.Comonad.Trans.Class":"purescript-transformers","Data.String":"purescript-strings","Control.Plus":"purescript-control","Control.Monad.Eff.Class":"purescript-eff","Type.Row.Effect.Equality":"purescript-type-equality","Partial":"purescript-partial","Control.Comonad.Env.Trans":"purescript-transformers","Global":"purescript-globals","Control.Monad.Reader.Class":"purescript-transformers","Data.Decidable":"purescript-contravariant","Data.Monoid.Multiplicative":"purescript-monoid","Data.Array.ST":"purescript-arrays","Control.Monad.Error.Class":"purescript-transformers","Control.Semigroupoid":"purescript-prelude","Data.Monoid.Alternate":"purescript-monoid","Data.Char":"purescript-strings","Data.Bifunctor.Join":"purescript-bifunctors","Data.Bifoldable":"purescript-foldable-traversable","Data.Monoid.Endo":"purescript-monoid","Control.Monad.State":"purescript-transformers","Data.List.Partial":"purescript-lists","Data.String.Regex.Flags":"purescript-strings","Data.Either":"purescript-either","Control.Applicative":"purescript-prelude","Data.FoldableWithIndex":"purescript-foldable-traversable","Data.Op":"purescript-contravariant","Control.Monad.Writer":"purescript-transformers","Data.Traversable":"purescript-foldable-traversable","Data.String.Gen":"purescript-strings"},"compilerVersion":"0.11.4"}