{"uploader":"garyb","packageMeta":{"homepage":"https://github.com/slamdata/purescript-pathy","repository":{"url":"git://github.com/slamdata/purescript-pathy.git","type":"git"},"ignore":["**/.*","bower_components","node_modules","output","test","bower.json","package.json"],"devDependencies":{"purescript-quickcheck":"^4.0.0"},"dependencies":{"purescript-exceptions":"^3.0.0","purescript-console":"^3.0.0","purescript-profunctor":"^3.0.0","purescript-typelevel-prelude":"^2.6.0","purescript-unsafe-coerce":"^3.0.0","purescript-transformers":"^3.0.0","purescript-partial":"^1.2.0","purescript-strings":"^3.5.0","purescript-lists":"^4.0.0"},"name":"purescript-pathy","license":["Apache-2.0"],"description":"A type-safe abstraction for platform-independent file paths"},"tagTime":"2018-03-20T17:37:29+0000","modules":[{"reExports":[{"moduleName":{"package":null,"item":["Pathy","Name"]},"declarations":[{"children":[{"comments":null,"title":"Name","info":{"arguments":[{"tag":"TypeConstructor","contents":[["Data","String","NonEmpty"],"NonEmptyString"]}],"declType":"dataConstructor"},"sourceSpan":null},{"comments":null,"title":"newtypeName","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Newtype"],"Newtype"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Pathy","Name"],"Name"]},{"tag":"TypeVar","contents":"n"}]}]},{"tag":"TypeWildcard","contents":{"start":[20,49],"name":"/home/travis/build/slamdata/purescript-pathy/src/Pathy/Name.purs","end":[20,50]}}]}},"sourceSpan":{"start":[20,8],"name":"/home/travis/build/slamdata/purescript-pathy/src/Pathy/Name.purs","end":[20,50]}},{"comments":null,"title":"eqName","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Eq"],"Eq"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Pathy","Name"],"Name"]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[21,16],"name":"/home/travis/build/slamdata/purescript-pathy/src/Pathy/Name.purs","end":[21,46]}},{"comments":null,"title":"ordName","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Ord"],"Ord"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Pathy","Name"],"Name"]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[22,16],"name":"/home/travis/build/slamdata/purescript-pathy/src/Pathy/Name.purs","end":[22,48]}},{"comments":null,"title":"showName","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Show"],"Show"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Pathy","Name"],"Name"]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[24,1],"name":"/home/travis/build/slamdata/purescript-pathy/src/Pathy/Name.purs","end":[24,35]}}],"comments":"A type used for both directory and file names, indexed by `DirOrFile`.\n","title":"Name","info":{"declType":"data","dataDeclType":"newtype","typeArguments":[["n",{"tag":"NamedKind","contents":[["Pathy","Phantom"],"DirOrFile"]}]]},"sourceSpan":{"start":[18,1],"name":"/home/travis/build/slamdata/purescript-pathy/src/Pathy/Name.purs","end":[18,52]}},{"children":[],"comments":"Splits `Name` in name and extension part.\n\n```purescript\nsplitName (Name \".foo\")    == { name: \".foo\", extension: Nothing }\nsplitName (Name \"foo.\")    == { name: \"foo.\", extension: Nothing }\nsplitName (Name \"foo\")     == { name: \"foo\",  extension: Nothing }\nsplitName (Name \".\")       == { name: \".\",    extension: Nothing }\nsplitName (Name \"foo.baz\") == { name: \"foo\",  extension: Just \"baz\" }\n```\n_Note, in real code all strings from this examples would be `NonEmptyString`._\n\nAlso for any `Name` this property holds:\n```purescript\njoinName <<< splitName = id\n````\nsee [`joinName`](#v:joinName).\n","title":"splitName","info":{"declType":"value","type":{"tag":"ForAll","contents":["n",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Pathy","Name"],"Name"]},{"tag":"TypeVar","contents":"n"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Record"]},{"tag":"RCons","contents":["name",{"tag":"TypeConstructor","contents":[["Data","String","NonEmpty"],"NonEmptyString"]},{"tag":"RCons","contents":["ext",{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeConstructor","contents":[["Data","String","NonEmpty"],"NonEmptyString"]}]},{"tag":"REmpty"}]}]}]}]},null]}},"sourceSpan":{"start":[43,1],"name":"/home/travis/build/slamdata/purescript-pathy/src/Pathy/Name.purs","end":[43,89]}},{"children":[],"comments":"Joins name and extension part into one `Name`.\n\nAlso for any `Name` this property holds:\n```purescript\njoinName <<< splitName = id\n````\nsee [`splitName`](#v:splitName).\n","title":"joinName","info":{"declType":"value","type":{"tag":"ForAll","contents":["n",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Record"]},{"tag":"RCons","contents":["name",{"tag":"TypeConstructor","contents":[["Data","String","NonEmpty"],"NonEmptyString"]},{"tag":"RCons","contents":["ext",{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeConstructor","contents":[["Data","String","NonEmpty"],"NonEmptyString"]}]},{"tag":"REmpty"}]}]}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Pathy","Name"],"Name"]},{"tag":"TypeVar","contents":"n"}]}]},null]}},"sourceSpan":{"start":[58,1],"name":"/home/travis/build/slamdata/purescript-pathy/src/Pathy/Name.purs","end":[58,88]}},{"children":[],"comments":"Retrieves the extension of a name. also see [`splitName`](#v:splitName)\n\n```purescript\nextension (Name \".foo\")    == Nothing\nextension (Name \"foo.\")    == Nothing\nextension (Name \".\")       == Nothing\nextension (Name \"foo.baz\") == Just \"baz\"\n````\n_Note, in real code all strings from this examples would be `NonEmptyString`._\n","title":"extension","info":{"declType":"value","type":{"tag":"ForAll","contents":["n",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Pathy","Name"],"Name"]},{"tag":"TypeVar","contents":"n"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeConstructor","contents":[["Data","String","NonEmpty"],"NonEmptyString"]}]}]},null]}},"sourceSpan":{"start":[72,1],"name":"/home/travis/build/slamdata/purescript-pathy/src/Pathy/Name.purs","end":[72,54]}},{"children":[],"comments":"Alters an extension of a name. This allows extensions to be added, removed,\nor modified. see [`splitName`](#v:splitName) and [`joinName`](#v:joinName)\nfor how a `Name` is split into name and extention part and joined back\ninto a `Name`.\n\nAlso for any `Name` this property holds:\n```purescript\nalterExtension id = id\n````\n","title":"alterExtension","info":{"declType":"value","type":{"tag":"ForAll","contents":["n",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeConstructor","contents":[["Data","String","NonEmpty"],"NonEmptyString"]}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeConstructor","contents":[["Data","String","NonEmpty"],"NonEmptyString"]}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Pathy","Name"],"Name"]},{"tag":"TypeVar","contents":"n"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Pathy","Name"],"Name"]},{"tag":"TypeVar","contents":"n"}]}]}]},null]}},"sourceSpan":{"start":[84,1],"name":"/home/travis/build/slamdata/purescript-pathy/src/Pathy/Name.purs","end":[88,12]}}]},{"moduleName":{"package":null,"item":["Pathy","Parser"]},"declarations":[{"children":[{"comments":null,"title":"Parser","info":{"arguments":[{"tag":"ParensInType","contents":{"tag":"ForAll","contents":["z",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Pathy","Path"],"RelDir"]}]},{"tag":"TypeVar","contents":"z"}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Pathy","Path"],"AbsDir"]}]},{"tag":"TypeVar","contents":"z"}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Pathy","Path"],"RelFile"]}]},{"tag":"TypeVar","contents":"z"}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Pathy","Path"],"AbsFile"]}]},{"tag":"TypeVar","contents":"z"}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"z"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeVar","contents":"z"}]}]}]}]}]}]},null]}}],"declType":"dataConstructor"},"sourceSpan":null}],"comments":null,"title":"Parser","info":{"declType":"data","dataDeclType":"newtype","typeArguments":[]},"sourceSpan":{"start":[26,1],"name":"/home/travis/build/slamdata/purescript-pathy/src/Pathy/Parser.purs","end":[34,8]}},{"children":[],"comments":"A parser for POSIX paths.\n","title":"posixParser","info":{"declType":"value","type":{"tag":"TypeConstructor","contents":[["Pathy","Parser"],"Parser"]}},"sourceSpan":{"start":[37,1],"name":"/home/travis/build/slamdata/purescript-pathy/src/Pathy/Parser.purs","end":[37,22]}},{"children":[],"comments":"Attempts to parse a relative file.\n","title":"parseRelFile","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Pathy","Parser"],"Parser"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeConstructor","contents":[["Pathy","Path"],"RelFile"]}]}]}]}},"sourceSpan":{"start":[97,1],"name":"/home/travis/build/slamdata/purescript-pathy/src/Pathy/Parser.purs","end":[97,50]}},{"children":[],"comments":"Attempts to parse a relative directory.\n","title":"parseRelDir","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Pathy","Parser"],"Parser"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeConstructor","contents":[["Pathy","Path"],"RelDir"]}]}]}]}},"sourceSpan":{"start":[105,1],"name":"/home/travis/build/slamdata/purescript-pathy/src/Pathy/Parser.purs","end":[105,48]}},{"children":[],"comments":null,"title":"parsePath","info":{"declType":"value","type":{"tag":"ForAll","contents":["z",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Pathy","Parser"],"Parser"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Pathy","Path"],"RelDir"]}]},{"tag":"TypeVar","contents":"z"}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Pathy","Path"],"AbsDir"]}]},{"tag":"TypeVar","contents":"z"}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Pathy","Path"],"RelFile"]}]},{"tag":"TypeVar","contents":"z"}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Pathy","Path"],"AbsFile"]}]},{"tag":"TypeVar","contents":"z"}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"z"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeVar","contents":"z"}]}]}]}]}]}]}]},null]}},"sourceSpan":{"start":[84,1],"name":"/home/travis/build/slamdata/purescript-pathy/src/Pathy/Parser.purs","end":[93,7]}},{"children":[],"comments":"Attempts to parse an absolute file.\n","title":"parseAbsFile","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Pathy","Parser"],"Parser"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeConstructor","contents":[["Pathy","Path"],"AbsFile"]}]}]}]}},"sourceSpan":{"start":[101,1],"name":"/home/travis/build/slamdata/purescript-pathy/src/Pathy/Parser.purs","end":[101,50]}},{"children":[],"comments":"Attempts to parse an absolute directory.\n","title":"parseAbsDir","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Pathy","Parser"],"Parser"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeConstructor","contents":[["Pathy","Path"],"AbsDir"]}]}]}]}},"sourceSpan":{"start":[109,1],"name":"/home/travis/build/slamdata/purescript-pathy/src/Pathy/Parser.purs","end":[109,48]}}]},{"moduleName":{"package":null,"item":["Pathy","Path"]},"declarations":[{"children":[],"comments":"A type describing a relative file or directory path.\n","title":"RelPath","info":{"arguments":[],"declType":"typeSynonym","type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Pathy","Path"],"AnyPath"]},{"tag":"TypeConstructor","contents":[["Pathy","Phantom"],"Rel"]}]}},"sourceSpan":{"start":[79,1],"name":"/home/travis/build/slamdata/purescript-pathy/src/Pathy/Path.purs","end":[79,27]}},{"children":[],"comments":"A type describing a file whose location is given relative to some other,\nunspecified directory (referred to as the \"current directory\").\n","title":"RelFile","info":{"arguments":[],"declType":"typeSynonym","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Pathy","Path"],"Path"]},{"tag":"TypeConstructor","contents":[["Pathy","Phantom"],"Rel"]}]},{"tag":"TypeConstructor","contents":[["Pathy","Phantom"],"File"]}]}},"sourceSpan":{"start":[96,1],"name":"/home/travis/build/slamdata/purescript-pathy/src/Pathy/Path.purs","end":[96,29]}},{"children":[],"comments":"A type describing a directory whose location is given relative to some\nother, unspecified directory (referred to as the \"current directory\").\n","title":"RelDir","info":{"arguments":[],"declType":"typeSynonym","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Pathy","Path"],"Path"]},{"tag":"TypeConstructor","contents":[["Pathy","Phantom"],"Rel"]}]},{"tag":"TypeConstructor","contents":[["Pathy","Phantom"],"Dir"]}]}},"sourceSpan":{"start":[86,1],"name":"/home/travis/build/slamdata/purescript-pathy/src/Pathy/Path.purs","end":[86,27]}},{"children":[{"comments":null,"title":"eqPath","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Eq"],"Eq"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Pathy","Path"],"Path"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]}},"sourceSpan":{"start":[67,8],"name":"/home/travis/build/slamdata/purescript-pathy/src/Pathy/Path.purs","end":[67,40]}},{"comments":null,"title":"ordPath","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Ord"],"Ord"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Pathy","Path"],"Path"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]}},"sourceSpan":{"start":[68,8],"name":"/home/travis/build/slamdata/purescript-pathy/src/Pathy/Path.purs","end":[68,42]}},{"comments":null,"title":"showPathRelDir","info":{"declType":"instance","dependencies":[{"constraintClass":[["Pathy","Phantom"],"IsRelOrAbs"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"constraintClass":[["Pathy","Phantom"],"IsDirOrFile"],"constraintArgs":[{"tag":"TypeVar","contents":"b"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Show"],"Show"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Pathy","Path"],"Path"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]}},"sourceSpan":{"start":[70,1],"name":"/home/travis/build/slamdata/purescript-pathy/src/Pathy/Path.purs","end":[70,76]}}],"comments":"A type that describes a Path. All flavors of paths are described by this\ntype, whether they are absolute or relative paths and whether they\nrefer to files or directories.\n\n* The type parameter `a` describes whether the path is `Rel` or `Abs`.\n* The type parameter `b` describes whether the path is `File` or `Dir`.\n\nTo ensure type safety, there is no way for users to create a value of\nthis type directly. Instead, helpers should be used, such as `rootDir`,\n`currentDir`, `file`, `dir`,  `(</>)`, and `parsePath`.\n\nThis ADT allows invalid paths (e.g. paths inside files), but there is no\npossible way for such paths to be constructed by user-land code.\n","title":"Path","info":{"declType":"data","dataDeclType":"data","typeArguments":[["a",{"tag":"NamedKind","contents":[["Pathy","Phantom"],"RelOrAbs"]}],["b",{"tag":"NamedKind","contents":[["Pathy","Phantom"],"DirOrFile"]}]]},"sourceSpan":{"start":[62,1],"name":"/home/travis/build/slamdata/purescript-pathy/src/Pathy/Path.purs","end":[65,29]}},{"children":[],"comments":"A type describing a file or directory path.\n","title":"AnyPath","info":{"arguments":[["a",null]],"declType":"typeSynonym","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Either"],"Either"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Pathy","Path"],"Path"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeConstructor","contents":[["Pathy","Phantom"],"Dir"]}]}}]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Pathy","Path"],"Path"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeConstructor","contents":[["Pathy","Phantom"],"File"]}]}}]}},"sourceSpan":{"start":[76,1],"name":"/home/travis/build/slamdata/purescript-pathy/src/Pathy/Path.purs","end":[76,51]}},{"children":[],"comments":"A type describing a absolute or relative file path.\n","title":"AnyFile","info":{"arguments":[],"declType":"typeSynonym","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Either"],"Either"]},{"tag":"TypeConstructor","contents":[["Pathy","Path"],"AbsFile"]}]},{"tag":"TypeConstructor","contents":[["Pathy","Path"],"RelFile"]}]}},"sourceSpan":{"start":[102,1],"name":"/home/travis/build/slamdata/purescript-pathy/src/Pathy/Path.purs","end":[102,38]}},{"children":[],"comments":"A type describing a absolute or relative directory path.\n","title":"AnyDir","info":{"arguments":[],"declType":"typeSynonym","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Either"],"Either"]},{"tag":"TypeConstructor","contents":[["Pathy","Path"],"AbsDir"]}]},{"tag":"TypeConstructor","contents":[["Pathy","Path"],"RelDir"]}]}},"sourceSpan":{"start":[92,1],"name":"/home/travis/build/slamdata/purescript-pathy/src/Pathy/Path.purs","end":[92,35]}},{"children":[],"comments":"A type describing an absolute file or directory path.\n","title":"AbsPath","info":{"arguments":[],"declType":"typeSynonym","type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Pathy","Path"],"AnyPath"]},{"tag":"TypeConstructor","contents":[["Pathy","Phantom"],"Abs"]}]}},"sourceSpan":{"start":[82,1],"name":"/home/travis/build/slamdata/purescript-pathy/src/Pathy/Path.purs","end":[82,27]}},{"children":[],"comments":"A type describing a file whose location is absolutely specified.\n","title":"AbsFile","info":{"arguments":[],"declType":"typeSynonym","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Pathy","Path"],"Path"]},{"tag":"TypeConstructor","contents":[["Pathy","Phantom"],"Abs"]}]},{"tag":"TypeConstructor","contents":[["Pathy","Phantom"],"File"]}]}},"sourceSpan":{"start":[99,1],"name":"/home/travis/build/slamdata/purescript-pathy/src/Pathy/Path.purs","end":[99,29]}},{"children":[],"comments":"A type describing a directory whose location is absolutely specified.\n","title":"AbsDir","info":{"arguments":[],"declType":"typeSynonym","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Pathy","Path"],"Path"]},{"tag":"TypeConstructor","contents":[["Pathy","Phantom"],"Abs"]}]},{"tag":"TypeConstructor","contents":[["Pathy","Phantom"],"Dir"]}]}},"sourceSpan":{"start":[89,1],"name":"/home/travis/build/slamdata/purescript-pathy/src/Pathy/Path.purs","end":[89,27]}},{"children":[],"comments":"Sets the extension on the terminal segment of a path. If the path is\n`rootDir` / `currentDir` or a relative path that is ascending (`../`) this\nwill have no effect.\n\n```purescript\nfile \"image\" <.> \"png\"\n```\nSee [`splitName`](Pathy.Name#v:splitName) and [`alterExtension`](Pathy.Name#v:alterExtension)\nfore more examples.\n","title":"setExtension","info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Pathy","Path"],"Path"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Pathy","Path"],"Path"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]}]},null]},null]}},"sourceSpan":{"start":[259,1],"name":"/home/travis/build/slamdata/purescript-pathy/src/Pathy/Path.purs","end":[259,59]}},{"children":[],"comments":"The root directory, which can be used to define absolutely-located resources.\n","title":"rootDir","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Pathy","Path"],"Path"]},{"tag":"TypeConstructor","contents":[["Pathy","Phantom"],"Abs"]}]},{"tag":"TypeConstructor","contents":[["Pathy","Phantom"],"Dir"]}]}},"sourceSpan":{"start":[105,1],"name":"/home/travis/build/slamdata/purescript-pathy/src/Pathy/Path.purs","end":[105,24]}},{"children":[],"comments":"Attempts to rename the terminal segment of a path using a function that\nreturns the result in some `Applicative`. If the path is `rootDir` /\n`currentDir` or a relative path that is ascending (`../`) this will\nhave no effect.\n","title":"renameTraverse","info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["f",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Control","Applicative"],"Applicative"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Pathy","Name"],"Name"]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Pathy","Name"],"Name"]},{"tag":"TypeVar","contents":"b"}]}}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Pathy","Path"],"Path"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Pathy","Path"],"Path"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}]}]}]},null]},null]},null]}},"sourceSpan":{"start":[240,1],"name":"/home/travis/build/slamdata/purescript-pathy/src/Pathy/Path.purs","end":[245,18]}},{"children":[],"comments":"Attempts to rename the terminal segment of a path. If the path is\n`rootDir` / `currentDir` or a relative path that is ascending (`../`) this\nwill have no effect.\n","title":"rename","info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Pathy","Name"],"Name"]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Pathy","Name"],"Name"]},{"tag":"TypeVar","contents":"b"}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Pathy","Path"],"Path"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Pathy","Path"],"Path"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]}]},null]},null]}},"sourceSpan":{"start":[233,1],"name":"/home/travis/build/slamdata/purescript-pathy/src/Pathy/Path.purs","end":[233,65]}},{"children":[],"comments":"Makes a path relative to a reference path. This function is best\nexplaned using this property:\n\n```purescript\na == r </> a `relativeTo` r\n```\n","title":"relativeTo","info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Pathy","Path"],"Path"]},{"tag":"TypeConstructor","contents":[["Pathy","Phantom"],"Abs"]}]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Pathy","Path"],"Path"]},{"tag":"TypeConstructor","contents":[["Pathy","Phantom"],"Abs"]}]},{"tag":"TypeConstructor","contents":[["Pathy","Phantom"],"Dir"]}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Pathy","Path"],"Path"]},{"tag":"TypeConstructor","contents":[["Pathy","Phantom"],"Rel"]}]},{"tag":"TypeVar","contents":"b"}]}]}]},null]}},"sourceSpan":{"start":[270,1],"name":"/home/travis/build/slamdata/purescript-pathy/src/Pathy/Path.purs","end":[270,65]}},{"children":[],"comments":"Refines path segments but does not change anything else.\n","title":"refine","info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Pathy","Phantom"],"IsDirOrFile"],"constraintArgs":[{"tag":"TypeVar","contents":"b"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Pathy","Name"],"Name"]},{"tag":"TypeConstructor","contents":[["Pathy","Phantom"],"File"]}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Pathy","Name"],"Name"]},{"tag":"TypeConstructor","contents":[["Pathy","Phantom"],"File"]}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Pathy","Name"],"Name"]},{"tag":"TypeConstructor","contents":[["Pathy","Phantom"],"Dir"]}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Pathy","Name"],"Name"]},{"tag":"TypeConstructor","contents":[["Pathy","Phantom"],"Dir"]}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Pathy","Path"],"Path"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Pathy","Path"],"Path"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]}]}]}]},null]},null]}},"sourceSpan":{"start":[293,1],"name":"/home/travis/build/slamdata/purescript-pathy/src/Pathy/Path.purs","end":[299,14]}},{"children":[],"comments":"Peels off the last director and terminal file from a path. Unlike the\ngeneral `peel` function this is guaranteed to return a result, as `File`\npaths are known to have a name.\n","title":"peelFile","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Pathy","Path"],"Path"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeConstructor","contents":[["Pathy","Phantom"],"File"]}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Tuple"],"Tuple"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Pathy","Path"],"Path"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeConstructor","contents":[["Pathy","Phantom"],"Dir"]}]}}]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Pathy","Name"],"Name"]},{"tag":"TypeConstructor","contents":[["Pathy","Phantom"],"File"]}]}}]}]},null]}},"sourceSpan":{"start":[213,1],"name":"/home/travis/build/slamdata/purescript-pathy/src/Pathy/Path.purs","end":[213,68]}},{"children":[],"comments":"Peels off the last directory and the terminal file or directory name\nfrom the path. Returns `Nothing` if the path is `rootDir` / `currentDir` or\na relative path that is ascending (`../`)\n","title":"peel","info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Pathy","Path"],"Path"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Tuple"],"Tuple"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Pathy","Path"],"Path"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeConstructor","contents":[["Pathy","Phantom"],"Dir"]}]}}]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Pathy","Name"],"Name"]},{"tag":"TypeVar","contents":"b"}]}}]}}]}]},null]},null]}},"sourceSpan":{"start":[207,1],"name":"/home/travis/build/slamdata/purescript-pathy/src/Pathy/Path.purs","end":[207,68]}},{"children":[],"comments":"Creates a path that points to the parent directory of the specified path.\n\nCalling `parentOf` on `rootDir` will return `rootDir`.\n","title":"parentOf","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Pathy","Phantom"],"IsRelOrAbs"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Pathy","Path"],"Path"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeConstructor","contents":[["Pathy","Phantom"],"Dir"]}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Pathy","Path"],"Path"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeConstructor","contents":[["Pathy","Phantom"],"Dir"]}]}]}]},null]}},"sourceSpan":{"start":[149,1],"name":"/home/travis/build/slamdata/purescript-pathy/src/Pathy/Path.purs","end":[149,63]}},{"children":[],"comments":"Ascends into the parent of the specified directory, then descends into\nthe specified path.\n\n```purescript\nrootDir </> dir \"foo\" <..> dir \"bar\" = rootDir </> dir \"bar\"\n```\n","title":"parentAppend","info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Pathy","Phantom"],"IsRelOrAbs"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Pathy","Path"],"Path"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeConstructor","contents":[["Pathy","Phantom"],"Dir"]}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Pathy","Path"],"Path"]},{"tag":"TypeConstructor","contents":[["Pathy","Phantom"],"Rel"]}]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Pathy","Path"],"Path"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]}]}]},null]},null]}},"sourceSpan":{"start":[177,1],"name":"/home/travis/build/slamdata/purescript-pathy/src/Pathy/Path.purs","end":[177,81]}},{"children":[],"comments":"Retrieves the name of the terminal segment in a path. Returns `Nothing` if\nthe path is `rootDir` / `currentDir` or some `parentOf p`.\n","title":"name","info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Pathy","Phantom"],"IsRelOrAbs"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"tag":"ConstrainedType","contents":[{"constraintClass":[["Pathy","Phantom"],"IsDirOrFile"],"constraintArgs":[{"tag":"TypeVar","contents":"b"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Pathy","Path"],"Path"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Pathy","Name"],"Name"]},{"tag":"TypeVar","contents":"b"}]}}]}]}]}]},null]},null]}},"sourceSpan":{"start":[221,1],"name":"/home/travis/build/slamdata/purescript-pathy/src/Pathy/Path.purs","end":[221,80]}},{"children":[],"comments":"Creates a path which points to a relative directory or file of the specified name.\nIn most cases [`dir'`](#v:dir') or [`file'`](#v:file') should be used instead,\nbut it's still there in case the segment type is going to be determined based\non some type variable.\n\n``` purescript\np == maybe p (\\(Tuple r n) -> r </> in' n) (peel p)\n```\n","title":"in'","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Pathy","Name"],"Name"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Pathy","Path"],"Path"]},{"tag":"TypeConstructor","contents":[["Pathy","Phantom"],"Rel"]}]},{"tag":"TypeVar","contents":"a"}]}]},null]}},"sourceSpan":{"start":[143,1],"name":"/home/travis/build/slamdata/purescript-pathy/src/Pathy/Path.purs","end":[143,38]}},{"children":[],"comments":"A fold over `Path`s. Since `Path` has private constructors, this allows for\nfunctions to be written over its constructors, similar to a total pattern\nmatch.\n\n- The first argument is the value to return for the `currentDir`/`rootDir`\n  at the base of the path.\n- The second argument is a function for handling a step into the parent\n  directory of the path it receives (eliminates `parentOf`).\n- The third argument is a function representing a file or directory within\n  the directory of the path it receives (eliminates `extendPath`).\n","title":"foldPath","info":{"declType":"value","type":{"tag":"ForAll","contents":["r",{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"r"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Pathy","Path"],"Path"]},{"tag":"TypeConstructor","contents":[["Pathy","Phantom"],"Rel"]}]},{"tag":"TypeConstructor","contents":[["Pathy","Phantom"],"Dir"]}]}]},{"tag":"TypeVar","contents":"r"}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Pathy","Path"],"Path"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeConstructor","contents":[["Pathy","Phantom"],"Dir"]}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Pathy","Name"],"Name"]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeVar","contents":"r"}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Pathy","Path"],"Path"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeVar","contents":"r"}]}]}]}]},null]},null]},null]}},"sourceSpan":{"start":[192,1],"name":"/home/travis/build/slamdata/purescript-pathy/src/Pathy/Path.purs","end":[198,7]}},{"children":[],"comments":"Retrieves the name of a file path. Unlike the general `name` function,\nthis is guaranteed to return a result, as `File` paths are known to have a\nname.\n","title":"fileName","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Pathy","Path"],"Path"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeConstructor","contents":[["Pathy","Phantom"],"File"]}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Pathy","Name"],"Name"]},{"tag":"TypeConstructor","contents":[["Pathy","Phantom"],"File"]}]}]},null]}},"sourceSpan":{"start":[227,1],"name":"/home/travis/build/slamdata/purescript-pathy/src/Pathy/Path.purs","end":[227,47]}},{"children":[],"comments":"Creates a path which points to a relative file of the specified name.\n","title":"file'","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Pathy","Name"],"Name"]},{"tag":"TypeConstructor","contents":[["Pathy","Phantom"],"File"]}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Pathy","Path"],"Path"]},{"tag":"TypeConstructor","contents":[["Pathy","Phantom"],"Rel"]}]},{"tag":"TypeConstructor","contents":[["Pathy","Phantom"],"File"]}]}]}},"sourceSpan":{"start":[121,1],"name":"/home/travis/build/slamdata/purescript-pathy/src/Pathy/Path.purs","end":[121,36]}},{"children":[],"comments":"Creates a path which points to a relative file of the specified name.\n\nInstead of accepting a runtime value, this function accepts a type-level\nstring via a proxy, to ensure the constructed name is not empty.\n","title":"file","info":{"declType":"value","type":{"tag":"ForAll","contents":["s",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Pathy","Name"],"IsName"],"constraintArgs":[{"tag":"TypeVar","contents":"s"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Symbol"],"SProxy"]},{"tag":"TypeVar","contents":"s"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Pathy","Path"],"Path"]},{"tag":"TypeConstructor","contents":[["Pathy","Phantom"],"Rel"]}]},{"tag":"TypeConstructor","contents":[["Pathy","Phantom"],"File"]}]}]}]},null]}},"sourceSpan":{"start":[117,1],"name":"/home/travis/build/slamdata/purescript-pathy/src/Pathy/Path.purs","end":[117,56]}},{"children":[],"comments":"Extends a path with a file or directory under the current path.\n","title":"extendPath","info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Pathy","Path"],"Path"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeConstructor","contents":[["Pathy","Phantom"],"Dir"]}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Pathy","Name"],"Name"]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Pathy","Path"],"Path"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]}]},null]},null]}},"sourceSpan":{"start":[156,1],"name":"/home/travis/build/slamdata/purescript-pathy/src/Pathy/Path.purs","end":[156,59]}},{"children":[],"comments":"Creates a path which points to a relative directory of the specified name.\n","title":"dir'","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Pathy","Name"],"Name"]},{"tag":"TypeConstructor","contents":[["Pathy","Phantom"],"Dir"]}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Pathy","Path"],"Path"]},{"tag":"TypeConstructor","contents":[["Pathy","Phantom"],"Rel"]}]},{"tag":"TypeConstructor","contents":[["Pathy","Phantom"],"Dir"]}]}]}},"sourceSpan":{"start":[132,1],"name":"/home/travis/build/slamdata/purescript-pathy/src/Pathy/Path.purs","end":[132,33]}},{"children":[],"comments":"Creates a path which points to a relative directory of the specified name.\n\nInstead of accepting a runtime value, this function accepts a type-level\nstring via a proxy, to ensure the constructed name is not empty.\n","title":"dir","info":{"declType":"value","type":{"tag":"ForAll","contents":["s",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Pathy","Name"],"IsName"],"constraintArgs":[{"tag":"TypeVar","contents":"s"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Symbol"],"SProxy"]},{"tag":"TypeVar","contents":"s"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Pathy","Path"],"Path"]},{"tag":"TypeConstructor","contents":[["Pathy","Phantom"],"Rel"]}]},{"tag":"TypeConstructor","contents":[["Pathy","Phantom"],"Dir"]}]}]}]},null]}},"sourceSpan":{"start":[128,1],"name":"/home/travis/build/slamdata/purescript-pathy/src/Pathy/Path.purs","end":[128,54]}},{"children":[],"comments":"The \"current directory\", which can be used to define relatively-located\nresources.\n","title":"currentDir","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Pathy","Path"],"Path"]},{"tag":"TypeConstructor","contents":[["Pathy","Phantom"],"Rel"]}]},{"tag":"TypeConstructor","contents":[["Pathy","Phantom"],"Dir"]}]}},"sourceSpan":{"start":[110,1],"name":"/home/travis/build/slamdata/purescript-pathy/src/Pathy/Path.purs","end":[110,27]}},{"children":[],"comments":"Given a directory path, appends a relative path to extend the original\npath.\n","title":"appendPath","info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Pathy","Phantom"],"IsRelOrAbs"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Pathy","Path"],"Path"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeConstructor","contents":[["Pathy","Phantom"],"Dir"]}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Pathy","Path"],"Path"]},{"tag":"TypeConstructor","contents":[["Pathy","Phantom"],"Rel"]}]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Pathy","Path"],"Path"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]}]}]},null]},null]}},"sourceSpan":{"start":[161,1],"name":"/home/travis/build/slamdata/purescript-pathy/src/Pathy/Path.purs","end":[161,79]}},{"children":[],"comments":null,"title":"(</>)","info":{"declType":"alias","alias":[["Pathy","Path"],{"Right":{"Left":{"Ident":"appendPath"}}}],"fixity":{"associativity":"infixl","precedence":6}},"sourceSpan":{"start":[169,1],"name":"/home/travis/build/slamdata/purescript-pathy/src/Pathy/Path.purs","end":[169,27]}},{"children":[],"comments":null,"title":"(<.>)","info":{"declType":"alias","alias":[["Pathy","Path"],{"Right":{"Left":{"Ident":"setExtension"}}}],"fixity":{"associativity":"infixl","precedence":6}},"sourceSpan":{"start":[262,1],"name":"/home/travis/build/slamdata/purescript-pathy/src/Pathy/Path.purs","end":[262,29]}},{"children":[],"comments":null,"title":"(<..>)","info":{"declType":"alias","alias":[["Pathy","Path"],{"Right":{"Left":{"Ident":"parentAppend"}}}],"fixity":{"associativity":"infixl","precedence":6}},"sourceSpan":{"start":[180,1],"name":"/home/travis/build/slamdata/purescript-pathy/src/Pathy/Path.purs","end":[180,30]}}]},{"moduleName":{"package":null,"item":["Pathy","Phantom"]},"declarations":[{"children":[{"comments":null,"title":"relIsRelOrAbs","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Pathy","Phantom"],"IsRelOrAbs"]},{"tag":"TypeConstructor","contents":[["Pathy","Phantom"],"Rel"]}]}},"sourceSpan":{"start":[27,1],"name":"/home/travis/build/slamdata/purescript-pathy/src/Pathy/Phantom.purs","end":[27,41]}}],"comments":"The phantom type of relative paths.\n","title":"Rel","info":{"kind":{"tag":"NamedKind","contents":[["Pathy","Phantom"],"RelOrAbs"]},"declType":"externData"},"sourceSpan":{"start":[9,1],"name":"/home/travis/build/slamdata/purescript-pathy/src/Pathy/Phantom.purs","end":[9,36]}},{"children":[{"comments":null,"title":"isDirOrFileFile","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Pathy","Phantom"],"IsDirOrFile"]},{"tag":"TypeConstructor","contents":[["Pathy","Phantom"],"File"]}]}},"sourceSpan":{"start":[63,1],"name":"/home/travis/build/slamdata/purescript-pathy/src/Pathy/Phantom.purs","end":[63,45]}}],"comments":"The phantom type of files.\n","title":"File","info":{"kind":{"tag":"NamedKind","contents":[["Pathy","Phantom"],"DirOrFile"]},"declType":"externData"},"sourceSpan":{"start":[47,1],"name":"/home/travis/build/slamdata/purescript-pathy/src/Pathy/Phantom.purs","end":[47,38]}},{"children":[{"comments":null,"title":"isDirOrFileDir","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Pathy","Phantom"],"IsDirOrFile"]},{"tag":"TypeConstructor","contents":[["Pathy","Phantom"],"Dir"]}]}},"sourceSpan":{"start":[62,1],"name":"/home/travis/build/slamdata/purescript-pathy/src/Pathy/Phantom.purs","end":[62,43]}}],"comments":"The phantom type of directories.\n","title":"Dir","info":{"kind":{"tag":"NamedKind","contents":[["Pathy","Phantom"],"DirOrFile"]},"declType":"externData"},"sourceSpan":{"start":[44,1],"name":"/home/travis/build/slamdata/purescript-pathy/src/Pathy/Phantom.purs","end":[44,37]}},{"children":[{"comments":null,"title":"absIsRelOrAbs","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Pathy","Phantom"],"IsRelOrAbs"]},{"tag":"TypeConstructor","contents":[["Pathy","Phantom"],"Abs"]}]}},"sourceSpan":{"start":[28,1],"name":"/home/travis/build/slamdata/purescript-pathy/src/Pathy/Phantom.purs","end":[28,41]}}],"comments":"The phantom type of absolute paths.\n","title":"Abs","info":{"kind":{"tag":"NamedKind","contents":[["Pathy","Phantom"],"RelOrAbs"]},"declType":"externData"},"sourceSpan":{"start":[12,1],"name":"/home/travis/build/slamdata/purescript-pathy/src/Pathy/Phantom.purs","end":[12,36]}},{"children":[{"comments":null,"title":"onDirOrFile","info":{"declType":"typeClassMember","type":{"tag":"ForAll","contents":["r",{"tag":"ForAll","contents":["f",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeConstructor","contents":[["Pathy","Phantom"],"Dir"]}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"b"}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeConstructor","contents":[["Pathy","Phantom"],"Dir"]}]}]},{"tag":"TypeVar","contents":"r"}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeConstructor","contents":[["Pathy","Phantom"],"File"]}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"b"}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeConstructor","contents":[["Pathy","Phantom"],"File"]}]}]},{"tag":"TypeVar","contents":"r"}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeVar","contents":"r"}]}]}]},null]},null]}},"sourceSpan":{"start":[55,3],"name":"/home/travis/build/slamdata/purescript-pathy/src/Pathy/Phantom.purs","end":[60,9]}},{"comments":null,"title":"isDirOrFileDir","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Pathy","Phantom"],"IsDirOrFile"]},{"tag":"TypeConstructor","contents":[["Pathy","Phantom"],"Dir"]}]}},"sourceSpan":{"start":[62,1],"name":"/home/travis/build/slamdata/purescript-pathy/src/Pathy/Phantom.purs","end":[62,43]}},{"comments":null,"title":"isDirOrFileFile","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Pathy","Phantom"],"IsDirOrFile"]},{"tag":"TypeConstructor","contents":[["Pathy","Phantom"],"File"]}]}},"sourceSpan":{"start":[63,1],"name":"/home/travis/build/slamdata/purescript-pathy/src/Pathy/Phantom.purs","end":[63,45]}}],"comments":"A class that enables writing operations that abstract over `DirOrFile`.\n\nThe provided `onDirOrFile` function folds over a value indexed by\n`DirOrFile` to produce a new result, passing proof/coercion functions to\nallow the inner functions to unify their return types if remapping.\n","title":"IsDirOrFile","info":{"fundeps":[],"arguments":[["b",{"tag":"NamedKind","contents":[["Pathy","Phantom"],"DirOrFile"]}]],"declType":"typeClass","superclasses":[]},"sourceSpan":{"start":[54,1],"name":"/home/travis/build/slamdata/purescript-pathy/src/Pathy/Phantom.purs","end":[60,9]}},{"children":[{"comments":null,"title":"onRelOrAbs","info":{"declType":"typeClassMember","type":{"tag":"ForAll","contents":["r",{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["f",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeConstructor","contents":[["Pathy","Phantom"],"Rel"]}]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeConstructor","contents":[["Pathy","Phantom"],"Rel"]}]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeVar","contents":"r"}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeConstructor","contents":[["Pathy","Phantom"],"Abs"]}]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeConstructor","contents":[["Pathy","Phantom"],"Abs"]}]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeVar","contents":"r"}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeVar","contents":"r"}]}]}]},null]},null]},null]}},"sourceSpan":{"start":[20,3],"name":"/home/travis/build/slamdata/purescript-pathy/src/Pathy/Phantom.purs","end":[25,9]}},{"comments":null,"title":"relIsRelOrAbs","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Pathy","Phantom"],"IsRelOrAbs"]},{"tag":"TypeConstructor","contents":[["Pathy","Phantom"],"Rel"]}]}},"sourceSpan":{"start":[27,1],"name":"/home/travis/build/slamdata/purescript-pathy/src/Pathy/Phantom.purs","end":[27,41]}},{"comments":null,"title":"absIsRelOrAbs","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Pathy","Phantom"],"IsRelOrAbs"]},{"tag":"TypeConstructor","contents":[["Pathy","Phantom"],"Abs"]}]}},"sourceSpan":{"start":[28,1],"name":"/home/travis/build/slamdata/purescript-pathy/src/Pathy/Phantom.purs","end":[28,41]}}],"comments":"A class that enables writing operations that abstract over `RelOrAbs`.\n\nThe provided `onRelOrAbs` function folds over a value indexed by\n`RelOrAbs` to produce a new result, passing proof/coercion functions to\nallow the inner functions to unify their return types if remapping.\n","title":"IsRelOrAbs","info":{"fundeps":[],"arguments":[["a",{"tag":"NamedKind","contents":[["Pathy","Phantom"],"RelOrAbs"]}]],"declType":"typeClass","superclasses":[]},"sourceSpan":{"start":[19,1],"name":"/home/travis/build/slamdata/purescript-pathy/src/Pathy/Phantom.purs","end":[25,9]}},{"children":[],"comments":"Folds over a value that uses `RelOrAbs` to produce a new result.\n","title":"foldRelOrAbs","info":{"declType":"value","type":{"tag":"ForAll","contents":["r",{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["f",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Pathy","Phantom"],"IsRelOrAbs"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeConstructor","contents":[["Pathy","Phantom"],"Rel"]}]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeVar","contents":"r"}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeConstructor","contents":[["Pathy","Phantom"],"Abs"]}]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeVar","contents":"r"}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeVar","contents":"r"}]}]}]}]},null]},null]},null]},null]}},"sourceSpan":{"start":[31,1],"name":"/home/travis/build/slamdata/purescript-pathy/src/Pathy/Phantom.purs","end":[37,7]}},{"children":[],"comments":"Folds over a value that uses `DirOrFile` to produce a new result.\n","title":"foldDirOrFile","info":{"declType":"value","type":{"tag":"ForAll","contents":["r",{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["f",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Pathy","Phantom"],"IsDirOrFile"],"constraintArgs":[{"tag":"TypeVar","contents":"b"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeConstructor","contents":[["Pathy","Phantom"],"Dir"]}]}]},{"tag":"TypeVar","contents":"r"}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeConstructor","contents":[["Pathy","Phantom"],"File"]}]}]},{"tag":"TypeVar","contents":"r"}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeVar","contents":"r"}]}]}]}]},null]},null]},null]}},"sourceSpan":{"start":[66,1],"name":"/home/travis/build/slamdata/purescript-pathy/src/Pathy/Phantom.purs","end":[72,7]}}]},{"moduleName":{"package":null,"item":["Pathy","Printer"]},"declarations":[{"children":[],"comments":"A `Printer` defines options for printing paths.\n\n- `root` is a function used to construct the initial segment of paths.\n- `current` is a representation of the current directory.\n- `up` is a representation of going up to the parent directory.\n- `sep` is the string to separate path segments by.\n- `escaper` specified how to deal with printing reserved names and\n   characters.\n","title":"Printer","info":{"arguments":[],"declType":"typeSynonym","type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Record"]},{"tag":"RCons","contents":["root",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeConstructor","contents":[["Data","String","NonEmpty"],"NonEmptyString"]}]}]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"RCons","contents":["current",{"tag":"TypeConstructor","contents":[["Data","String","NonEmpty"],"NonEmptyString"]},{"tag":"RCons","contents":["up",{"tag":"TypeConstructor","contents":[["Data","String","NonEmpty"],"NonEmptyString"]},{"tag":"RCons","contents":["sep",{"tag":"TypeConstructor","contents":[["Data","String","NonEmpty"],"NonEmptyString"]},{"tag":"RCons","contents":["escaper",{"tag":"TypeConstructor","contents":[["Pathy","Printer"],"Escaper"]},{"tag":"REmpty"}]}]}]}]}]}]}},"sourceSpan":{"start":[38,1],"name":"/home/travis/build/slamdata/purescript-pathy/src/Pathy/Printer.purs","end":[44,4]}},{"children":[{"comments":null,"title":"Escaper","info":{"arguments":[{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","String","NonEmpty"],"NonEmptyString"]}]},{"tag":"TypeConstructor","contents":[["Data","String","NonEmpty"],"NonEmptyString"]}]}}],"declType":"dataConstructor"},"sourceSpan":null},{"comments":null,"title":"newtypeEscaper","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Newtype"],"Newtype"]},{"tag":"TypeConstructor","contents":[["Pathy","Printer"],"Escaper"]}]},{"tag":"TypeWildcard","contents":{"start":[152,51],"name":"/home/travis/build/slamdata/purescript-pathy/src/Pathy/Printer.purs","end":[152,52]}}]}},"sourceSpan":{"start":[152,8],"name":"/home/travis/build/slamdata/purescript-pathy/src/Pathy/Printer.purs","end":[152,52]}},{"comments":null,"title":"semigroupEscaper","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Semigroup"],"Semigroup"]},{"tag":"TypeConstructor","contents":[["Pathy","Printer"],"Escaper"]}]}},"sourceSpan":{"start":[154,1],"name":"/home/travis/build/slamdata/purescript-pathy/src/Pathy/Printer.purs","end":[154,47]}},{"comments":null,"title":"monoidEscaper","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Monoid"],"Monoid"]},{"tag":"TypeConstructor","contents":[["Pathy","Printer"],"Escaper"]}]}},"sourceSpan":{"start":[157,1],"name":"/home/travis/build/slamdata/purescript-pathy/src/Pathy/Printer.purs","end":[157,41]}}],"comments":"An `Escaper` encodes segments or characters which have reserved meaning\nwithin names in a path.\n","title":"Escaper","info":{"declType":"data","dataDeclType":"newtype","typeArguments":[]},"sourceSpan":{"start":[150,1],"name":"/home/travis/build/slamdata/purescript-pathy/src/Pathy/Printer.purs","end":[150,61]}},{"children":[],"comments":"A printer for Windows paths.\n","title":"windowsPrinter","info":{"declType":"value","type":{"tag":"TypeConstructor","contents":[["Pathy","Printer"],"Printer"]}},"sourceSpan":{"start":[57,1],"name":"/home/travis/build/slamdata/purescript-pathy/src/Pathy/Printer.purs","end":[57,26]}},{"children":[],"comments":"Prints a `SandboxedPath` into its canonical `String` representation, using\nthe specified printer. This will print a relative path if `b ~ Rel`, which\ndepending on how the resulting string is used, may be unsafe.\n","title":"unsafePrintPath","info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Pathy","Phantom"],"IsRelOrAbs"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"tag":"ConstrainedType","contents":[{"constraintClass":[["Pathy","Phantom"],"IsDirOrFile"],"constraintArgs":[{"tag":"TypeVar","contents":"b"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Pathy","Printer"],"Printer"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Pathy","Sandboxed"],"SandboxedPath"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}]}]}]},null]},null]}},"sourceSpan":{"start":[89,1],"name":"/home/travis/build/slamdata/purescript-pathy/src/Pathy/Printer.purs","end":[95,12]}},{"children":[],"comments":"Prints a `SandboxedPath` into its canonical `String` representation, using\nthe specified printer. The printed path will always be absolute, as this\nis the only way to ensure the path is safely referring to the intended\nlocation.\n","title":"printPath","info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Pathy","Phantom"],"IsRelOrAbs"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"tag":"ConstrainedType","contents":[{"constraintClass":[["Pathy","Phantom"],"IsDirOrFile"],"constraintArgs":[{"tag":"TypeVar","contents":"b"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Pathy","Printer"],"Printer"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Pathy","Sandboxed"],"SandboxedPath"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}]}]}]},null]},null]}},"sourceSpan":{"start":[70,1],"name":"/home/travis/build/slamdata/purescript-pathy/src/Pathy/Printer.purs","end":[76,12]}},{"children":[],"comments":"A printer for POSIX paths.\n","title":"posixPrinter","info":{"declType":"value","type":{"tag":"TypeConstructor","contents":[["Pathy","Printer"],"Printer"]}},"sourceSpan":{"start":[47,1],"name":"/home/travis/build/slamdata/purescript-pathy/src/Pathy/Printer.purs","end":[47,24]}},{"children":[],"comments":"Prints a path exactly according to its representation. This should only be\nused for debug purposes. Using this function will raise a warning at\ncompile time as a reminder!\n","title":"debugPrintPath","info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Prim"],"Warn"],"constraintArgs":[{"tag":"TypeLevelString","contents":"debugPrintPath usage"}],"constraintData":null},{"tag":"ConstrainedType","contents":[{"constraintClass":[["Pathy","Phantom"],"IsRelOrAbs"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"tag":"ConstrainedType","contents":[{"constraintClass":[["Pathy","Phantom"],"IsDirOrFile"],"constraintArgs":[{"tag":"TypeVar","contents":"b"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Pathy","Printer"],"Printer"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Pathy","Path"],"Path"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}]}]}]}]},null]},null]}},"sourceSpan":{"start":[101,1],"name":"/home/travis/build/slamdata/purescript-pathy/src/Pathy/Printer.purs","end":[108,12]}}]},{"moduleName":{"package":null,"item":["Pathy","Sandboxed"]},"declarations":[{"children":[{"comments":null,"title":"eqSandboxedPath","info":{"declType":"instance","dependencies":[{"constraintClass":[["Pathy","Phantom"],"IsRelOrAbs"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"constraintClass":[["Pathy","Phantom"],"IsDirOrFile"],"constraintArgs":[{"tag":"TypeVar","contents":"b"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Eq"],"Eq"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Pathy","Sandboxed"],"SandboxedPath"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]}},"sourceSpan":{"start":[18,8],"name":"/home/travis/build/slamdata/purescript-pathy/src/Pathy/Sandboxed.purs","end":[18,91]}},{"comments":null,"title":"ordSandboxedPath","info":{"declType":"instance","dependencies":[{"constraintClass":[["Pathy","Phantom"],"IsRelOrAbs"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"constraintClass":[["Pathy","Phantom"],"IsDirOrFile"],"constraintArgs":[{"tag":"TypeVar","contents":"b"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Ord"],"Ord"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Pathy","Sandboxed"],"SandboxedPath"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]}},"sourceSpan":{"start":[19,8],"name":"/home/travis/build/slamdata/purescript-pathy/src/Pathy/Sandboxed.purs","end":[19,93]}},{"comments":null,"title":"showSandboxedPath","info":{"declType":"instance","dependencies":[{"constraintClass":[["Pathy","Phantom"],"IsRelOrAbs"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"constraintClass":[["Pathy","Phantom"],"IsDirOrFile"],"constraintArgs":[{"tag":"TypeVar","contents":"b"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Show"],"Show"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Pathy","Sandboxed"],"SandboxedPath"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]}},"sourceSpan":{"start":[20,1],"name":"/home/travis/build/slamdata/purescript-pathy/src/Pathy/Sandboxed.purs","end":[20,88]}}],"comments":"The type for paths that have been sandboxed.\n","title":"SandboxedPath","info":{"declType":"data","dataDeclType":"data","typeArguments":[["a",null],["b",null]]},"sourceSpan":{"start":[16,1],"name":"/home/travis/build/slamdata/purescript-pathy/src/Pathy/Sandboxed.purs","end":[16,65]}},{"children":[],"comments":"Extracts the original path from a `SandboxedPath`.\n","title":"unsandbox","info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Pathy","Sandboxed"],"SandboxedPath"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Pathy","Path"],"Path"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]},null]},null]}},"sourceSpan":{"start":[54,1],"name":"/home/travis/build/slamdata/purescript-pathy/src/Pathy/Sandboxed.purs","end":[54,55]}},{"children":[],"comments":"Returns the location a `SandboxedPath` was sandboxed to.\n","title":"sandboxRoot","info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Pathy","Sandboxed"],"SandboxedPath"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Pathy","Path"],"Path"]},{"tag":"TypeConstructor","contents":[["Pathy","Phantom"],"Abs"]}]},{"tag":"TypeConstructor","contents":[["Pathy","Phantom"],"Dir"]}]}]},null]},null]}},"sourceSpan":{"start":[50,1],"name":"/home/travis/build/slamdata/purescript-pathy/src/Pathy/Sandboxed.purs","end":[50,61]}},{"children":[],"comments":"Sandboxes any path to `/`.\n\nThis should only be used for situations where a path is already constrained\nwithin a system so that access to `/` is safe - for instance, in URIs.\n","title":"sandboxAny","info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Pathy","Path"],"Path"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Pathy","Sandboxed"],"SandboxedPath"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]},null]},null]}},"sourceSpan":{"start":[46,1],"name":"/home/travis/build/slamdata/purescript-pathy/src/Pathy/Sandboxed.purs","end":[46,56]}},{"children":[],"comments":"Attempts to sandbox a path relative to an absolute directory (\"sandbox\nroot\"). If the `Path a b` escapes the sandbox root `Nothing` will be\nreturned.\n","title":"sandbox","info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Pathy","Phantom"],"IsRelOrAbs"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Pathy","Path"],"Path"]},{"tag":"TypeConstructor","contents":[["Pathy","Phantom"],"Abs"]}]},{"tag":"TypeConstructor","contents":[["Pathy","Phantom"],"Dir"]}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Pathy","Path"],"Path"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Pathy","Sandboxed"],"SandboxedPath"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}]}]}]},null]},null]}},"sourceSpan":{"start":[26,1],"name":"/home/travis/build/slamdata/purescript-pathy/src/Pathy/Sandboxed.purs","end":[31,31]}}]}],"name":"Pathy","comments":null,"declarations":[]},{"reExports":[],"name":"Pathy.Gen","comments":null,"declarations":[{"children":[],"comments":null,"title":"genAbsDirPath","info":{"declType":"value","type":{"tag":"ForAll","contents":["m",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Control","Monad","Gen","Class"],"MonadGen"],"constraintArgs":[{"tag":"TypeVar","contents":"m"}],"constraintData":null},{"tag":"ConstrainedType","contents":[{"constraintClass":[["Control","Monad","Rec","Class"],"MonadRec"],"constraintArgs":[{"tag":"TypeVar","contents":"m"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"m"},{"tag":"TypeConstructor","contents":[["Pathy","Path"],"AbsDir"]}]}]}]},null]}},"sourceSpan":{"start":[39,1],"name":"/home/travis/build/slamdata/purescript-pathy/src/Pathy/Gen.purs","end":[39,64]}},{"children":[],"comments":null,"title":"genAbsFilePath","info":{"declType":"value","type":{"tag":"ForAll","contents":["m",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Control","Monad","Gen","Class"],"MonadGen"],"constraintArgs":[{"tag":"TypeVar","contents":"m"}],"constraintData":null},{"tag":"ConstrainedType","contents":[{"constraintClass":[["Control","Monad","Rec","Class"],"MonadRec"],"constraintArgs":[{"tag":"TypeVar","contents":"m"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"m"},{"tag":"TypeConstructor","contents":[["Pathy","Path"],"AbsFile"]}]}]}]},null]}},"sourceSpan":{"start":[46,1],"name":"/home/travis/build/slamdata/purescript-pathy/src/Pathy/Gen.purs","end":[46,66]}},{"children":[],"comments":null,"title":"genAbsAnyPath","info":{"declType":"value","type":{"tag":"ForAll","contents":["m",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Control","Monad","Gen","Class"],"MonadGen"],"constraintArgs":[{"tag":"TypeVar","contents":"m"}],"constraintData":null},{"tag":"ConstrainedType","contents":[{"constraintClass":[["Control","Monad","Rec","Class"],"MonadRec"],"constraintArgs":[{"tag":"TypeVar","contents":"m"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"m"},{"tag":"TypeConstructor","contents":[["Pathy","Path"],"AbsPath"]}]}]}]},null]}},"sourceSpan":{"start":[52,1],"name":"/home/travis/build/slamdata/purescript-pathy/src/Pathy/Gen.purs","end":[52,65]}},{"children":[],"comments":null,"title":"genRelDirPath","info":{"declType":"value","type":{"tag":"ForAll","contents":["m",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Control","Monad","Gen","Class"],"MonadGen"],"constraintArgs":[{"tag":"TypeVar","contents":"m"}],"constraintData":null},{"tag":"ConstrainedType","contents":[{"constraintClass":[["Control","Monad","Rec","Class"],"MonadRec"],"constraintArgs":[{"tag":"TypeVar","contents":"m"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"m"},{"tag":"TypeConstructor","contents":[["Pathy","Path"],"RelDir"]}]}]}]},null]}},"sourceSpan":{"start":[55,1],"name":"/home/travis/build/slamdata/purescript-pathy/src/Pathy/Gen.purs","end":[55,64]}},{"children":[],"comments":null,"title":"genRelFilePath","info":{"declType":"value","type":{"tag":"ForAll","contents":["m",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Control","Monad","Gen","Class"],"MonadGen"],"constraintArgs":[{"tag":"TypeVar","contents":"m"}],"constraintData":null},{"tag":"ConstrainedType","contents":[{"constraintClass":[["Control","Monad","Rec","Class"],"MonadRec"],"constraintArgs":[{"tag":"TypeVar","contents":"m"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"m"},{"tag":"TypeConstructor","contents":[["Pathy","Path"],"RelFile"]}]}]}]},null]}},"sourceSpan":{"start":[62,1],"name":"/home/travis/build/slamdata/purescript-pathy/src/Pathy/Gen.purs","end":[62,66]}},{"children":[],"comments":null,"title":"genRelAnyPath","info":{"declType":"value","type":{"tag":"ForAll","contents":["m",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Control","Monad","Gen","Class"],"MonadGen"],"constraintArgs":[{"tag":"TypeVar","contents":"m"}],"constraintData":null},{"tag":"ConstrainedType","contents":[{"constraintClass":[["Control","Monad","Rec","Class"],"MonadRec"],"constraintArgs":[{"tag":"TypeVar","contents":"m"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"m"},{"tag":"TypeConstructor","contents":[["Pathy","Path"],"RelPath"]}]}]}]},null]}},"sourceSpan":{"start":[68,1],"name":"/home/travis/build/slamdata/purescript-pathy/src/Pathy/Gen.purs","end":[68,65]}},{"children":[],"comments":null,"title":"genName","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["m",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Control","Monad","Gen","Class"],"MonadGen"],"constraintArgs":[{"tag":"TypeVar","contents":"m"}],"constraintData":null},{"tag":"ConstrainedType","contents":[{"constraintClass":[["Control","Monad","Rec","Class"],"MonadRec"],"constraintArgs":[{"tag":"TypeVar","contents":"m"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"m"},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Pathy","Name"],"Name"]},{"tag":"TypeVar","contents":"a"}]}}]}]}]},null]},null]}},"sourceSpan":{"start":[28,1],"name":"/home/travis/build/slamdata/purescript-pathy/src/Pathy/Gen.purs","end":[28,56]}},{"children":[],"comments":null,"title":"genDirName","info":{"declType":"value","type":{"tag":"ForAll","contents":["m",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Control","Monad","Gen","Class"],"MonadGen"],"constraintArgs":[{"tag":"TypeVar","contents":"m"}],"constraintData":null},{"tag":"ConstrainedType","contents":[{"constraintClass":[["Control","Monad","Rec","Class"],"MonadRec"],"constraintArgs":[{"tag":"TypeVar","contents":"m"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"m"},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Pathy","Name"],"Name"]},{"tag":"TypeConstructor","contents":[["Pathy","Phantom"],"Dir"]}]}}]}]}]},null]}},"sourceSpan":{"start":[33,1],"name":"/home/travis/build/slamdata/purescript-pathy/src/Pathy/Gen.purs","end":[33,60]}},{"children":[],"comments":null,"title":"genFileName","info":{"declType":"value","type":{"tag":"ForAll","contents":["m",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Control","Monad","Gen","Class"],"MonadGen"],"constraintArgs":[{"tag":"TypeVar","contents":"m"}],"constraintData":null},{"tag":"ConstrainedType","contents":[{"constraintClass":[["Control","Monad","Rec","Class"],"MonadRec"],"constraintArgs":[{"tag":"TypeVar","contents":"m"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"m"},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Pathy","Name"],"Name"]},{"tag":"TypeConstructor","contents":[["Pathy","Phantom"],"File"]}]}}]}]}]},null]}},"sourceSpan":{"start":[36,1],"name":"/home/travis/build/slamdata/purescript-pathy/src/Pathy/Gen.purs","end":[36,62]}}]},{"reExports":[],"name":"Pathy.Name","comments":null,"declarations":[{"children":[{"comments":null,"title":"Name","info":{"arguments":[{"tag":"TypeConstructor","contents":[["Data","String","NonEmpty"],"NonEmptyString"]}],"declType":"dataConstructor"},"sourceSpan":null},{"comments":null,"title":"newtypeName","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Newtype"],"Newtype"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Pathy","Name"],"Name"]},{"tag":"TypeVar","contents":"n"}]}]},{"tag":"TypeWildcard","contents":{"start":[20,49],"name":"/home/travis/build/slamdata/purescript-pathy/src/Pathy/Name.purs","end":[20,50]}}]}},"sourceSpan":{"start":[20,8],"name":"/home/travis/build/slamdata/purescript-pathy/src/Pathy/Name.purs","end":[20,50]}},{"comments":null,"title":"eqName","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Eq"],"Eq"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Pathy","Name"],"Name"]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[21,16],"name":"/home/travis/build/slamdata/purescript-pathy/src/Pathy/Name.purs","end":[21,46]}},{"comments":null,"title":"ordName","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Ord"],"Ord"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Pathy","Name"],"Name"]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[22,16],"name":"/home/travis/build/slamdata/purescript-pathy/src/Pathy/Name.purs","end":[22,48]}},{"comments":null,"title":"showName","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Show"],"Show"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Pathy","Name"],"Name"]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[24,1],"name":"/home/travis/build/slamdata/purescript-pathy/src/Pathy/Name.purs","end":[24,35]}}],"comments":"A type used for both directory and file names, indexed by `DirOrFile`.\n","title":"Name","info":{"declType":"data","dataDeclType":"newtype","typeArguments":[["n",{"tag":"NamedKind","contents":[["Pathy","Phantom"],"DirOrFile"]}]]},"sourceSpan":{"start":[18,1],"name":"/home/travis/build/slamdata/purescript-pathy/src/Pathy/Name.purs","end":[18,52]}},{"children":[],"comments":"Splits `Name` in name and extension part.\n\n```purescript\nsplitName (Name \".foo\")    == { name: \".foo\", extension: Nothing }\nsplitName (Name \"foo.\")    == { name: \"foo.\", extension: Nothing }\nsplitName (Name \"foo\")     == { name: \"foo\",  extension: Nothing }\nsplitName (Name \".\")       == { name: \".\",    extension: Nothing }\nsplitName (Name \"foo.baz\") == { name: \"foo\",  extension: Just \"baz\" }\n```\n_Note, in real code all strings from this examples would be `NonEmptyString`._\n\nAlso for any `Name` this property holds:\n```purescript\njoinName <<< splitName = id\n````\nsee [`joinName`](#v:joinName).\n","title":"splitName","info":{"declType":"value","type":{"tag":"ForAll","contents":["n",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Pathy","Name"],"Name"]},{"tag":"TypeVar","contents":"n"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Record"]},{"tag":"RCons","contents":["name",{"tag":"TypeConstructor","contents":[["Data","String","NonEmpty"],"NonEmptyString"]},{"tag":"RCons","contents":["ext",{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeConstructor","contents":[["Data","String","NonEmpty"],"NonEmptyString"]}]},{"tag":"REmpty"}]}]}]}]},null]}},"sourceSpan":{"start":[43,1],"name":"/home/travis/build/slamdata/purescript-pathy/src/Pathy/Name.purs","end":[43,89]}},{"children":[],"comments":"Joins name and extension part into one `Name`.\n\nAlso for any `Name` this property holds:\n```purescript\njoinName <<< splitName = id\n````\nsee [`splitName`](#v:splitName).\n","title":"joinName","info":{"declType":"value","type":{"tag":"ForAll","contents":["n",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Record"]},{"tag":"RCons","contents":["name",{"tag":"TypeConstructor","contents":[["Data","String","NonEmpty"],"NonEmptyString"]},{"tag":"RCons","contents":["ext",{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeConstructor","contents":[["Data","String","NonEmpty"],"NonEmptyString"]}]},{"tag":"REmpty"}]}]}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Pathy","Name"],"Name"]},{"tag":"TypeVar","contents":"n"}]}]},null]}},"sourceSpan":{"start":[58,1],"name":"/home/travis/build/slamdata/purescript-pathy/src/Pathy/Name.purs","end":[58,88]}},{"children":[],"comments":"Retrieves the extension of a name. also see [`splitName`](#v:splitName)\n\n```purescript\nextension (Name \".foo\")    == Nothing\nextension (Name \"foo.\")    == Nothing\nextension (Name \".\")       == Nothing\nextension (Name \"foo.baz\") == Just \"baz\"\n````\n_Note, in real code all strings from this examples would be `NonEmptyString`._\n","title":"extension","info":{"declType":"value","type":{"tag":"ForAll","contents":["n",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Pathy","Name"],"Name"]},{"tag":"TypeVar","contents":"n"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeConstructor","contents":[["Data","String","NonEmpty"],"NonEmptyString"]}]}]},null]}},"sourceSpan":{"start":[72,1],"name":"/home/travis/build/slamdata/purescript-pathy/src/Pathy/Name.purs","end":[72,54]}},{"children":[],"comments":"Alters an extension of a name. This allows extensions to be added, removed,\nor modified. see [`splitName`](#v:splitName) and [`joinName`](#v:joinName)\nfor how a `Name` is split into name and extention part and joined back\ninto a `Name`.\n\nAlso for any `Name` this property holds:\n```purescript\nalterExtension id = id\n````\n","title":"alterExtension","info":{"declType":"value","type":{"tag":"ForAll","contents":["n",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeConstructor","contents":[["Data","String","NonEmpty"],"NonEmptyString"]}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeConstructor","contents":[["Data","String","NonEmpty"],"NonEmptyString"]}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Pathy","Name"],"Name"]},{"tag":"TypeVar","contents":"n"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Pathy","Name"],"Name"]},{"tag":"TypeVar","contents":"n"}]}]}]},null]}},"sourceSpan":{"start":[84,1],"name":"/home/travis/build/slamdata/purescript-pathy/src/Pathy/Name.purs","end":[88,12]}},{"children":[{"comments":null,"title":"reflectName","info":{"declType":"typeClassMember","type":{"tag":"ForAll","contents":["d",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Symbol"],"SProxy"]},{"tag":"TypeVar","contents":"sym"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Pathy","Name"],"Name"]},{"tag":"TypeVar","contents":"d"}]}]},null]}},"sourceSpan":{"start":[96,3],"name":"/home/travis/build/slamdata/purescript-pathy/src/Pathy/Name.purs","end":[96,48]}},{"comments":null,"title":"isNameNESymbol","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","Symbol"],"IsSymbol"],"constraintArgs":[{"tag":"TypeVar","contents":"s"}],"constraintData":null},{"constraintClass":[["Type","Data","Symbol"],"Equals"],"constraintArgs":[{"tag":"TypeVar","contents":"s"},{"tag":"TypeLevelString","contents":""},{"tag":"TypeConstructor","contents":[["Type","Data","Boolean"],"False"]}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Pathy","Name"],"IsName"]},{"tag":"TypeVar","contents":"s"}]}},"sourceSpan":{"start":[98,1],"name":"/home/travis/build/slamdata/purescript-pathy/src/Pathy/Name.purs","end":[98,85]}}],"comments":"A class for creating `Name` values from type-level strings. This allows us\nto guarantee that a name is not empty at compile-time.\n","title":"IsName","info":{"fundeps":[],"arguments":[["sym",null]],"declType":"typeClass","superclasses":[]},"sourceSpan":{"start":[95,1],"name":"/home/travis/build/slamdata/purescript-pathy/src/Pathy/Name.purs","end":[96,48]}}]},{"reExports":[],"name":"Pathy.Parser","comments":null,"declarations":[{"children":[{"comments":null,"title":"Parser","info":{"arguments":[{"tag":"ParensInType","contents":{"tag":"ForAll","contents":["z",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Pathy","Path"],"RelDir"]}]},{"tag":"TypeVar","contents":"z"}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Pathy","Path"],"AbsDir"]}]},{"tag":"TypeVar","contents":"z"}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Pathy","Path"],"RelFile"]}]},{"tag":"TypeVar","contents":"z"}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Pathy","Path"],"AbsFile"]}]},{"tag":"TypeVar","contents":"z"}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"z"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeVar","contents":"z"}]}]}]}]}]}]},null]}}],"declType":"dataConstructor"},"sourceSpan":null}],"comments":null,"title":"Parser","info":{"declType":"data","dataDeclType":"newtype","typeArguments":[]},"sourceSpan":{"start":[26,1],"name":"/home/travis/build/slamdata/purescript-pathy/src/Pathy/Parser.purs","end":[34,8]}},{"children":[],"comments":"A parser for POSIX paths.\n","title":"posixParser","info":{"declType":"value","type":{"tag":"TypeConstructor","contents":[["Pathy","Parser"],"Parser"]}},"sourceSpan":{"start":[37,1],"name":"/home/travis/build/slamdata/purescript-pathy/src/Pathy/Parser.purs","end":[37,22]}},{"children":[],"comments":null,"title":"parsePath","info":{"declType":"value","type":{"tag":"ForAll","contents":["z",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Pathy","Parser"],"Parser"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Pathy","Path"],"RelDir"]}]},{"tag":"TypeVar","contents":"z"}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Pathy","Path"],"AbsDir"]}]},{"tag":"TypeVar","contents":"z"}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Pathy","Path"],"RelFile"]}]},{"tag":"TypeVar","contents":"z"}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Pathy","Path"],"AbsFile"]}]},{"tag":"TypeVar","contents":"z"}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"z"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeVar","contents":"z"}]}]}]}]}]}]}]},null]}},"sourceSpan":{"start":[84,1],"name":"/home/travis/build/slamdata/purescript-pathy/src/Pathy/Parser.purs","end":[93,7]}},{"children":[],"comments":"Attempts to parse a relative file.\n","title":"parseRelFile","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Pathy","Parser"],"Parser"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeConstructor","contents":[["Pathy","Path"],"RelFile"]}]}]}]}},"sourceSpan":{"start":[97,1],"name":"/home/travis/build/slamdata/purescript-pathy/src/Pathy/Parser.purs","end":[97,50]}},{"children":[],"comments":"Attempts to parse an absolute file.\n","title":"parseAbsFile","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Pathy","Parser"],"Parser"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeConstructor","contents":[["Pathy","Path"],"AbsFile"]}]}]}]}},"sourceSpan":{"start":[101,1],"name":"/home/travis/build/slamdata/purescript-pathy/src/Pathy/Parser.purs","end":[101,50]}},{"children":[],"comments":"Attempts to parse a relative directory.\n","title":"parseRelDir","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Pathy","Parser"],"Parser"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeConstructor","contents":[["Pathy","Path"],"RelDir"]}]}]}]}},"sourceSpan":{"start":[105,1],"name":"/home/travis/build/slamdata/purescript-pathy/src/Pathy/Parser.purs","end":[105,48]}},{"children":[],"comments":"Attempts to parse an absolute directory.\n","title":"parseAbsDir","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Pathy","Parser"],"Parser"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeConstructor","contents":[["Pathy","Path"],"AbsDir"]}]}]}]}},"sourceSpan":{"start":[109,1],"name":"/home/travis/build/slamdata/purescript-pathy/src/Pathy/Parser.purs","end":[109,48]}}]},{"reExports":[],"name":"Pathy.Path","comments":null,"declarations":[{"children":[{"comments":null,"title":"eqPath","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Eq"],"Eq"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Pathy","Path"],"Path"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]}},"sourceSpan":{"start":[67,8],"name":"/home/travis/build/slamdata/purescript-pathy/src/Pathy/Path.purs","end":[67,40]}},{"comments":null,"title":"ordPath","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Ord"],"Ord"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Pathy","Path"],"Path"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]}},"sourceSpan":{"start":[68,8],"name":"/home/travis/build/slamdata/purescript-pathy/src/Pathy/Path.purs","end":[68,42]}},{"comments":null,"title":"showPathRelDir","info":{"declType":"instance","dependencies":[{"constraintClass":[["Pathy","Phantom"],"IsRelOrAbs"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"constraintClass":[["Pathy","Phantom"],"IsDirOrFile"],"constraintArgs":[{"tag":"TypeVar","contents":"b"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Show"],"Show"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Pathy","Path"],"Path"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]}},"sourceSpan":{"start":[70,1],"name":"/home/travis/build/slamdata/purescript-pathy/src/Pathy/Path.purs","end":[70,76]}}],"comments":"A type that describes a Path. All flavors of paths are described by this\ntype, whether they are absolute or relative paths and whether they\nrefer to files or directories.\n\n* The type parameter `a` describes whether the path is `Rel` or `Abs`.\n* The type parameter `b` describes whether the path is `File` or `Dir`.\n\nTo ensure type safety, there is no way for users to create a value of\nthis type directly. Instead, helpers should be used, such as `rootDir`,\n`currentDir`, `file`, `dir`,  `(</>)`, and `parsePath`.\n\nThis ADT allows invalid paths (e.g. paths inside files), but there is no\npossible way for such paths to be constructed by user-land code.\n","title":"Path","info":{"declType":"data","dataDeclType":"data","typeArguments":[["a",{"tag":"NamedKind","contents":[["Pathy","Phantom"],"RelOrAbs"]}],["b",{"tag":"NamedKind","contents":[["Pathy","Phantom"],"DirOrFile"]}]]},"sourceSpan":{"start":[62,1],"name":"/home/travis/build/slamdata/purescript-pathy/src/Pathy/Path.purs","end":[65,29]}},{"children":[],"comments":"A type describing a file or directory path.\n","title":"AnyPath","info":{"arguments":[["a",null]],"declType":"typeSynonym","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Either"],"Either"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Pathy","Path"],"Path"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeConstructor","contents":[["Pathy","Phantom"],"Dir"]}]}}]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Pathy","Path"],"Path"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeConstructor","contents":[["Pathy","Phantom"],"File"]}]}}]}},"sourceSpan":{"start":[76,1],"name":"/home/travis/build/slamdata/purescript-pathy/src/Pathy/Path.purs","end":[76,51]}},{"children":[],"comments":"A type describing a relative file or directory path.\n","title":"RelPath","info":{"arguments":[],"declType":"typeSynonym","type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Pathy","Path"],"AnyPath"]},{"tag":"TypeConstructor","contents":[["Pathy","Phantom"],"Rel"]}]}},"sourceSpan":{"start":[79,1],"name":"/home/travis/build/slamdata/purescript-pathy/src/Pathy/Path.purs","end":[79,27]}},{"children":[],"comments":"A type describing an absolute file or directory path.\n","title":"AbsPath","info":{"arguments":[],"declType":"typeSynonym","type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Pathy","Path"],"AnyPath"]},{"tag":"TypeConstructor","contents":[["Pathy","Phantom"],"Abs"]}]}},"sourceSpan":{"start":[82,1],"name":"/home/travis/build/slamdata/purescript-pathy/src/Pathy/Path.purs","end":[82,27]}},{"children":[],"comments":"A type describing a directory whose location is given relative to some\nother, unspecified directory (referred to as the \"current directory\").\n","title":"RelDir","info":{"arguments":[],"declType":"typeSynonym","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Pathy","Path"],"Path"]},{"tag":"TypeConstructor","contents":[["Pathy","Phantom"],"Rel"]}]},{"tag":"TypeConstructor","contents":[["Pathy","Phantom"],"Dir"]}]}},"sourceSpan":{"start":[86,1],"name":"/home/travis/build/slamdata/purescript-pathy/src/Pathy/Path.purs","end":[86,27]}},{"children":[],"comments":"A type describing a directory whose location is absolutely specified.\n","title":"AbsDir","info":{"arguments":[],"declType":"typeSynonym","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Pathy","Path"],"Path"]},{"tag":"TypeConstructor","contents":[["Pathy","Phantom"],"Abs"]}]},{"tag":"TypeConstructor","contents":[["Pathy","Phantom"],"Dir"]}]}},"sourceSpan":{"start":[89,1],"name":"/home/travis/build/slamdata/purescript-pathy/src/Pathy/Path.purs","end":[89,27]}},{"children":[],"comments":"A type describing a absolute or relative directory path.\n","title":"AnyDir","info":{"arguments":[],"declType":"typeSynonym","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Either"],"Either"]},{"tag":"TypeConstructor","contents":[["Pathy","Path"],"AbsDir"]}]},{"tag":"TypeConstructor","contents":[["Pathy","Path"],"RelDir"]}]}},"sourceSpan":{"start":[92,1],"name":"/home/travis/build/slamdata/purescript-pathy/src/Pathy/Path.purs","end":[92,35]}},{"children":[],"comments":"A type describing a file whose location is given relative to some other,\nunspecified directory (referred to as the \"current directory\").\n","title":"RelFile","info":{"arguments":[],"declType":"typeSynonym","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Pathy","Path"],"Path"]},{"tag":"TypeConstructor","contents":[["Pathy","Phantom"],"Rel"]}]},{"tag":"TypeConstructor","contents":[["Pathy","Phantom"],"File"]}]}},"sourceSpan":{"start":[96,1],"name":"/home/travis/build/slamdata/purescript-pathy/src/Pathy/Path.purs","end":[96,29]}},{"children":[],"comments":"A type describing a file whose location is absolutely specified.\n","title":"AbsFile","info":{"arguments":[],"declType":"typeSynonym","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Pathy","Path"],"Path"]},{"tag":"TypeConstructor","contents":[["Pathy","Phantom"],"Abs"]}]},{"tag":"TypeConstructor","contents":[["Pathy","Phantom"],"File"]}]}},"sourceSpan":{"start":[99,1],"name":"/home/travis/build/slamdata/purescript-pathy/src/Pathy/Path.purs","end":[99,29]}},{"children":[],"comments":"A type describing a absolute or relative file path.\n","title":"AnyFile","info":{"arguments":[],"declType":"typeSynonym","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Either"],"Either"]},{"tag":"TypeConstructor","contents":[["Pathy","Path"],"AbsFile"]}]},{"tag":"TypeConstructor","contents":[["Pathy","Path"],"RelFile"]}]}},"sourceSpan":{"start":[102,1],"name":"/home/travis/build/slamdata/purescript-pathy/src/Pathy/Path.purs","end":[102,38]}},{"children":[],"comments":"The root directory, which can be used to define absolutely-located resources.\n","title":"rootDir","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Pathy","Path"],"Path"]},{"tag":"TypeConstructor","contents":[["Pathy","Phantom"],"Abs"]}]},{"tag":"TypeConstructor","contents":[["Pathy","Phantom"],"Dir"]}]}},"sourceSpan":{"start":[105,1],"name":"/home/travis/build/slamdata/purescript-pathy/src/Pathy/Path.purs","end":[105,24]}},{"children":[],"comments":"The \"current directory\", which can be used to define relatively-located\nresources.\n","title":"currentDir","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Pathy","Path"],"Path"]},{"tag":"TypeConstructor","contents":[["Pathy","Phantom"],"Rel"]}]},{"tag":"TypeConstructor","contents":[["Pathy","Phantom"],"Dir"]}]}},"sourceSpan":{"start":[110,1],"name":"/home/travis/build/slamdata/purescript-pathy/src/Pathy/Path.purs","end":[110,27]}},{"children":[],"comments":"Creates a path which points to a relative directory of the specified name.\n\nInstead of accepting a runtime value, this function accepts a type-level\nstring via a proxy, to ensure the constructed name is not empty.\n","title":"dir","info":{"declType":"value","type":{"tag":"ForAll","contents":["s",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Pathy","Name"],"IsName"],"constraintArgs":[{"tag":"TypeVar","contents":"s"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Symbol"],"SProxy"]},{"tag":"TypeVar","contents":"s"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Pathy","Path"],"Path"]},{"tag":"TypeConstructor","contents":[["Pathy","Phantom"],"Rel"]}]},{"tag":"TypeConstructor","contents":[["Pathy","Phantom"],"Dir"]}]}]}]},null]}},"sourceSpan":{"start":[128,1],"name":"/home/travis/build/slamdata/purescript-pathy/src/Pathy/Path.purs","end":[128,54]}},{"children":[],"comments":"Creates a path which points to a relative directory of the specified name.\n","title":"dir'","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Pathy","Name"],"Name"]},{"tag":"TypeConstructor","contents":[["Pathy","Phantom"],"Dir"]}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Pathy","Path"],"Path"]},{"tag":"TypeConstructor","contents":[["Pathy","Phantom"],"Rel"]}]},{"tag":"TypeConstructor","contents":[["Pathy","Phantom"],"Dir"]}]}]}},"sourceSpan":{"start":[132,1],"name":"/home/travis/build/slamdata/purescript-pathy/src/Pathy/Path.purs","end":[132,33]}},{"children":[],"comments":"Creates a path which points to a relative file of the specified name.\n\nInstead of accepting a runtime value, this function accepts a type-level\nstring via a proxy, to ensure the constructed name is not empty.\n","title":"file","info":{"declType":"value","type":{"tag":"ForAll","contents":["s",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Pathy","Name"],"IsName"],"constraintArgs":[{"tag":"TypeVar","contents":"s"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Symbol"],"SProxy"]},{"tag":"TypeVar","contents":"s"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Pathy","Path"],"Path"]},{"tag":"TypeConstructor","contents":[["Pathy","Phantom"],"Rel"]}]},{"tag":"TypeConstructor","contents":[["Pathy","Phantom"],"File"]}]}]}]},null]}},"sourceSpan":{"start":[117,1],"name":"/home/travis/build/slamdata/purescript-pathy/src/Pathy/Path.purs","end":[117,56]}},{"children":[],"comments":"Creates a path which points to a relative file of the specified name.\n","title":"file'","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Pathy","Name"],"Name"]},{"tag":"TypeConstructor","contents":[["Pathy","Phantom"],"File"]}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Pathy","Path"],"Path"]},{"tag":"TypeConstructor","contents":[["Pathy","Phantom"],"Rel"]}]},{"tag":"TypeConstructor","contents":[["Pathy","Phantom"],"File"]}]}]}},"sourceSpan":{"start":[121,1],"name":"/home/travis/build/slamdata/purescript-pathy/src/Pathy/Path.purs","end":[121,36]}},{"children":[],"comments":"Creates a path which points to a relative directory or file of the specified name.\nIn most cases [`dir'`](#v:dir') or [`file'`](#v:file') should be used instead,\nbut it's still there in case the segment type is going to be determined based\non some type variable.\n\n``` purescript\np == maybe p (\\(Tuple r n) -> r </> in' n) (peel p)\n```\n","title":"in'","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Pathy","Name"],"Name"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Pathy","Path"],"Path"]},{"tag":"TypeConstructor","contents":[["Pathy","Phantom"],"Rel"]}]},{"tag":"TypeVar","contents":"a"}]}]},null]}},"sourceSpan":{"start":[143,1],"name":"/home/travis/build/slamdata/purescript-pathy/src/Pathy/Path.purs","end":[143,38]}},{"children":[],"comments":"Creates a path that points to the parent directory of the specified path.\n\nCalling `parentOf` on `rootDir` will return `rootDir`.\n","title":"parentOf","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Pathy","Phantom"],"IsRelOrAbs"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Pathy","Path"],"Path"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeConstructor","contents":[["Pathy","Phantom"],"Dir"]}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Pathy","Path"],"Path"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeConstructor","contents":[["Pathy","Phantom"],"Dir"]}]}]}]},null]}},"sourceSpan":{"start":[149,1],"name":"/home/travis/build/slamdata/purescript-pathy/src/Pathy/Path.purs","end":[149,63]}},{"children":[],"comments":"Extends a path with a file or directory under the current path.\n","title":"extendPath","info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Pathy","Path"],"Path"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeConstructor","contents":[["Pathy","Phantom"],"Dir"]}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Pathy","Name"],"Name"]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Pathy","Path"],"Path"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]}]},null]},null]}},"sourceSpan":{"start":[156,1],"name":"/home/travis/build/slamdata/purescript-pathy/src/Pathy/Path.purs","end":[156,59]}},{"children":[],"comments":"Given a directory path, appends a relative path to extend the original\npath.\n","title":"appendPath","info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Pathy","Phantom"],"IsRelOrAbs"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Pathy","Path"],"Path"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeConstructor","contents":[["Pathy","Phantom"],"Dir"]}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Pathy","Path"],"Path"]},{"tag":"TypeConstructor","contents":[["Pathy","Phantom"],"Rel"]}]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Pathy","Path"],"Path"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]}]}]},null]},null]}},"sourceSpan":{"start":[161,1],"name":"/home/travis/build/slamdata/purescript-pathy/src/Pathy/Path.purs","end":[161,79]}},{"children":[],"comments":null,"title":"(</>)","info":{"declType":"alias","alias":[["Pathy","Path"],{"Right":{"Left":{"Ident":"appendPath"}}}],"fixity":{"associativity":"infixl","precedence":6}},"sourceSpan":{"start":[169,1],"name":"/home/travis/build/slamdata/purescript-pathy/src/Pathy/Path.purs","end":[169,27]}},{"children":[],"comments":"Ascends into the parent of the specified directory, then descends into\nthe specified path.\n\n```purescript\nrootDir </> dir \"foo\" <..> dir \"bar\" = rootDir </> dir \"bar\"\n```\n","title":"parentAppend","info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Pathy","Phantom"],"IsRelOrAbs"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Pathy","Path"],"Path"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeConstructor","contents":[["Pathy","Phantom"],"Dir"]}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Pathy","Path"],"Path"]},{"tag":"TypeConstructor","contents":[["Pathy","Phantom"],"Rel"]}]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Pathy","Path"],"Path"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]}]}]},null]},null]}},"sourceSpan":{"start":[177,1],"name":"/home/travis/build/slamdata/purescript-pathy/src/Pathy/Path.purs","end":[177,81]}},{"children":[],"comments":null,"title":"(<..>)","info":{"declType":"alias","alias":[["Pathy","Path"],{"Right":{"Left":{"Ident":"parentAppend"}}}],"fixity":{"associativity":"infixl","precedence":6}},"sourceSpan":{"start":[180,1],"name":"/home/travis/build/slamdata/purescript-pathy/src/Pathy/Path.purs","end":[180,30]}},{"children":[],"comments":"A fold over `Path`s. Since `Path` has private constructors, this allows for\nfunctions to be written over its constructors, similar to a total pattern\nmatch.\n\n- The first argument is the value to return for the `currentDir`/`rootDir`\n  at the base of the path.\n- The second argument is a function for handling a step into the parent\n  directory of the path it receives (eliminates `parentOf`).\n- The third argument is a function representing a file or directory within\n  the directory of the path it receives (eliminates `extendPath`).\n","title":"foldPath","info":{"declType":"value","type":{"tag":"ForAll","contents":["r",{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"r"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Pathy","Path"],"Path"]},{"tag":"TypeConstructor","contents":[["Pathy","Phantom"],"Rel"]}]},{"tag":"TypeConstructor","contents":[["Pathy","Phantom"],"Dir"]}]}]},{"tag":"TypeVar","contents":"r"}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Pathy","Path"],"Path"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeConstructor","contents":[["Pathy","Phantom"],"Dir"]}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Pathy","Name"],"Name"]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeVar","contents":"r"}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Pathy","Path"],"Path"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeVar","contents":"r"}]}]}]}]},null]},null]},null]}},"sourceSpan":{"start":[192,1],"name":"/home/travis/build/slamdata/purescript-pathy/src/Pathy/Path.purs","end":[198,7]}},{"children":[],"comments":"Peels off the last directory and the terminal file or directory name\nfrom the path. Returns `Nothing` if the path is `rootDir` / `currentDir` or\na relative path that is ascending (`../`)\n","title":"peel","info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Pathy","Path"],"Path"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Tuple"],"Tuple"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Pathy","Path"],"Path"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeConstructor","contents":[["Pathy","Phantom"],"Dir"]}]}}]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Pathy","Name"],"Name"]},{"tag":"TypeVar","contents":"b"}]}}]}}]}]},null]},null]}},"sourceSpan":{"start":[207,1],"name":"/home/travis/build/slamdata/purescript-pathy/src/Pathy/Path.purs","end":[207,68]}},{"children":[],"comments":"Peels off the last director and terminal file from a path. Unlike the\ngeneral `peel` function this is guaranteed to return a result, as `File`\npaths are known to have a name.\n","title":"peelFile","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Pathy","Path"],"Path"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeConstructor","contents":[["Pathy","Phantom"],"File"]}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Tuple"],"Tuple"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Pathy","Path"],"Path"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeConstructor","contents":[["Pathy","Phantom"],"Dir"]}]}}]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Pathy","Name"],"Name"]},{"tag":"TypeConstructor","contents":[["Pathy","Phantom"],"File"]}]}}]}]},null]}},"sourceSpan":{"start":[213,1],"name":"/home/travis/build/slamdata/purescript-pathy/src/Pathy/Path.purs","end":[213,68]}},{"children":[],"comments":"Retrieves the name of the terminal segment in a path. Returns `Nothing` if\nthe path is `rootDir` / `currentDir` or some `parentOf p`.\n","title":"name","info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Pathy","Phantom"],"IsRelOrAbs"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"tag":"ConstrainedType","contents":[{"constraintClass":[["Pathy","Phantom"],"IsDirOrFile"],"constraintArgs":[{"tag":"TypeVar","contents":"b"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Pathy","Path"],"Path"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Pathy","Name"],"Name"]},{"tag":"TypeVar","contents":"b"}]}}]}]}]}]},null]},null]}},"sourceSpan":{"start":[221,1],"name":"/home/travis/build/slamdata/purescript-pathy/src/Pathy/Path.purs","end":[221,80]}},{"children":[],"comments":"Retrieves the name of a file path. Unlike the general `name` function,\nthis is guaranteed to return a result, as `File` paths are known to have a\nname.\n","title":"fileName","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Pathy","Path"],"Path"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeConstructor","contents":[["Pathy","Phantom"],"File"]}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Pathy","Name"],"Name"]},{"tag":"TypeConstructor","contents":[["Pathy","Phantom"],"File"]}]}]},null]}},"sourceSpan":{"start":[227,1],"name":"/home/travis/build/slamdata/purescript-pathy/src/Pathy/Path.purs","end":[227,47]}},{"children":[],"comments":"Attempts to rename the terminal segment of a path. If the path is\n`rootDir` / `currentDir` or a relative path that is ascending (`../`) this\nwill have no effect.\n","title":"rename","info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Pathy","Name"],"Name"]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Pathy","Name"],"Name"]},{"tag":"TypeVar","contents":"b"}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Pathy","Path"],"Path"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Pathy","Path"],"Path"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]}]},null]},null]}},"sourceSpan":{"start":[233,1],"name":"/home/travis/build/slamdata/purescript-pathy/src/Pathy/Path.purs","end":[233,65]}},{"children":[],"comments":"Attempts to rename the terminal segment of a path using a function that\nreturns the result in some `Applicative`. If the path is `rootDir` /\n`currentDir` or a relative path that is ascending (`../`) this will\nhave no effect.\n","title":"renameTraverse","info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["f",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Control","Applicative"],"Applicative"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Pathy","Name"],"Name"]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Pathy","Name"],"Name"]},{"tag":"TypeVar","contents":"b"}]}}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Pathy","Path"],"Path"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Pathy","Path"],"Path"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}]}]}]},null]},null]},null]}},"sourceSpan":{"start":[240,1],"name":"/home/travis/build/slamdata/purescript-pathy/src/Pathy/Path.purs","end":[245,18]}},{"children":[],"comments":"Sets the extension on the terminal segment of a path. If the path is\n`rootDir` / `currentDir` or a relative path that is ascending (`../`) this\nwill have no effect.\n\n```purescript\nfile \"image\" <.> \"png\"\n```\nSee [`splitName`](Pathy.Name#v:splitName) and [`alterExtension`](Pathy.Name#v:alterExtension)\nfore more examples.\n","title":"setExtension","info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Pathy","Path"],"Path"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Pathy","Path"],"Path"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]}]},null]},null]}},"sourceSpan":{"start":[259,1],"name":"/home/travis/build/slamdata/purescript-pathy/src/Pathy/Path.purs","end":[259,59]}},{"children":[],"comments":null,"title":"(<.>)","info":{"declType":"alias","alias":[["Pathy","Path"],{"Right":{"Left":{"Ident":"setExtension"}}}],"fixity":{"associativity":"infixl","precedence":6}},"sourceSpan":{"start":[262,1],"name":"/home/travis/build/slamdata/purescript-pathy/src/Pathy/Path.purs","end":[262,29]}},{"children":[],"comments":"Makes a path relative to a reference path. This function is best\nexplaned using this property:\n\n```purescript\na == r </> a `relativeTo` r\n```\n","title":"relativeTo","info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Pathy","Path"],"Path"]},{"tag":"TypeConstructor","contents":[["Pathy","Phantom"],"Abs"]}]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Pathy","Path"],"Path"]},{"tag":"TypeConstructor","contents":[["Pathy","Phantom"],"Abs"]}]},{"tag":"TypeConstructor","contents":[["Pathy","Phantom"],"Dir"]}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Pathy","Path"],"Path"]},{"tag":"TypeConstructor","contents":[["Pathy","Phantom"],"Rel"]}]},{"tag":"TypeVar","contents":"b"}]}]}]},null]}},"sourceSpan":{"start":[270,1],"name":"/home/travis/build/slamdata/purescript-pathy/src/Pathy/Path.purs","end":[270,65]}},{"children":[],"comments":"Refines path segments but does not change anything else.\n","title":"refine","info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Pathy","Phantom"],"IsDirOrFile"],"constraintArgs":[{"tag":"TypeVar","contents":"b"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Pathy","Name"],"Name"]},{"tag":"TypeConstructor","contents":[["Pathy","Phantom"],"File"]}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Pathy","Name"],"Name"]},{"tag":"TypeConstructor","contents":[["Pathy","Phantom"],"File"]}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Pathy","Name"],"Name"]},{"tag":"TypeConstructor","contents":[["Pathy","Phantom"],"Dir"]}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Pathy","Name"],"Name"]},{"tag":"TypeConstructor","contents":[["Pathy","Phantom"],"Dir"]}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Pathy","Path"],"Path"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Pathy","Path"],"Path"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]}]}]}]},null]},null]}},"sourceSpan":{"start":[293,1],"name":"/home/travis/build/slamdata/purescript-pathy/src/Pathy/Path.purs","end":[299,14]}}]},{"reExports":[],"name":"Pathy.Phantom","comments":null,"declarations":[{"children":[],"comments":"The kind for the relative/absolute phantom type.\n","title":"RelOrAbs","info":{"declType":"kind"},"sourceSpan":{"start":[6,1],"name":"/home/travis/build/slamdata/purescript-pathy/src/Pathy/Phantom.purs","end":[6,29]}},{"children":[{"comments":null,"title":"relIsRelOrAbs","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Pathy","Phantom"],"IsRelOrAbs"]},{"tag":"TypeConstructor","contents":[["Pathy","Phantom"],"Rel"]}]}},"sourceSpan":{"start":[27,1],"name":"/home/travis/build/slamdata/purescript-pathy/src/Pathy/Phantom.purs","end":[27,41]}}],"comments":"The phantom type of relative paths.\n","title":"Rel","info":{"kind":{"tag":"NamedKind","contents":[["Pathy","Phantom"],"RelOrAbs"]},"declType":"externData"},"sourceSpan":{"start":[9,1],"name":"/home/travis/build/slamdata/purescript-pathy/src/Pathy/Phantom.purs","end":[9,36]}},{"children":[{"comments":null,"title":"absIsRelOrAbs","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Pathy","Phantom"],"IsRelOrAbs"]},{"tag":"TypeConstructor","contents":[["Pathy","Phantom"],"Abs"]}]}},"sourceSpan":{"start":[28,1],"name":"/home/travis/build/slamdata/purescript-pathy/src/Pathy/Phantom.purs","end":[28,41]}}],"comments":"The phantom type of absolute paths.\n","title":"Abs","info":{"kind":{"tag":"NamedKind","contents":[["Pathy","Phantom"],"RelOrAbs"]},"declType":"externData"},"sourceSpan":{"start":[12,1],"name":"/home/travis/build/slamdata/purescript-pathy/src/Pathy/Phantom.purs","end":[12,36]}},{"children":[{"comments":null,"title":"onRelOrAbs","info":{"declType":"typeClassMember","type":{"tag":"ForAll","contents":["r",{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["f",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeConstructor","contents":[["Pathy","Phantom"],"Rel"]}]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeConstructor","contents":[["Pathy","Phantom"],"Rel"]}]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeVar","contents":"r"}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeConstructor","contents":[["Pathy","Phantom"],"Abs"]}]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeConstructor","contents":[["Pathy","Phantom"],"Abs"]}]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeVar","contents":"r"}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeVar","contents":"r"}]}]}]},null]},null]},null]}},"sourceSpan":{"start":[20,3],"name":"/home/travis/build/slamdata/purescript-pathy/src/Pathy/Phantom.purs","end":[25,9]}},{"comments":null,"title":"relIsRelOrAbs","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Pathy","Phantom"],"IsRelOrAbs"]},{"tag":"TypeConstructor","contents":[["Pathy","Phantom"],"Rel"]}]}},"sourceSpan":{"start":[27,1],"name":"/home/travis/build/slamdata/purescript-pathy/src/Pathy/Phantom.purs","end":[27,41]}},{"comments":null,"title":"absIsRelOrAbs","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Pathy","Phantom"],"IsRelOrAbs"]},{"tag":"TypeConstructor","contents":[["Pathy","Phantom"],"Abs"]}]}},"sourceSpan":{"start":[28,1],"name":"/home/travis/build/slamdata/purescript-pathy/src/Pathy/Phantom.purs","end":[28,41]}}],"comments":"A class that enables writing operations that abstract over `RelOrAbs`.\n\nThe provided `onRelOrAbs` function folds over a value indexed by\n`RelOrAbs` to produce a new result, passing proof/coercion functions to\nallow the inner functions to unify their return types if remapping.\n","title":"IsRelOrAbs","info":{"fundeps":[],"arguments":[["a",{"tag":"NamedKind","contents":[["Pathy","Phantom"],"RelOrAbs"]}]],"declType":"typeClass","superclasses":[]},"sourceSpan":{"start":[19,1],"name":"/home/travis/build/slamdata/purescript-pathy/src/Pathy/Phantom.purs","end":[25,9]}},{"children":[],"comments":"Folds over a value that uses `RelOrAbs` to produce a new result.\n","title":"foldRelOrAbs","info":{"declType":"value","type":{"tag":"ForAll","contents":["r",{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["f",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Pathy","Phantom"],"IsRelOrAbs"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeConstructor","contents":[["Pathy","Phantom"],"Rel"]}]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeVar","contents":"r"}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeConstructor","contents":[["Pathy","Phantom"],"Abs"]}]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeVar","contents":"r"}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeVar","contents":"r"}]}]}]}]},null]},null]},null]},null]}},"sourceSpan":{"start":[31,1],"name":"/home/travis/build/slamdata/purescript-pathy/src/Pathy/Phantom.purs","end":[37,7]}},{"children":[],"comments":"The kind for the directory/file phantom type.\n","title":"DirOrFile","info":{"declType":"kind"},"sourceSpan":{"start":[41,1],"name":"/home/travis/build/slamdata/purescript-pathy/src/Pathy/Phantom.purs","end":[41,30]}},{"children":[{"comments":null,"title":"isDirOrFileDir","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Pathy","Phantom"],"IsDirOrFile"]},{"tag":"TypeConstructor","contents":[["Pathy","Phantom"],"Dir"]}]}},"sourceSpan":{"start":[62,1],"name":"/home/travis/build/slamdata/purescript-pathy/src/Pathy/Phantom.purs","end":[62,43]}}],"comments":"The phantom type of directories.\n","title":"Dir","info":{"kind":{"tag":"NamedKind","contents":[["Pathy","Phantom"],"DirOrFile"]},"declType":"externData"},"sourceSpan":{"start":[44,1],"name":"/home/travis/build/slamdata/purescript-pathy/src/Pathy/Phantom.purs","end":[44,37]}},{"children":[{"comments":null,"title":"isDirOrFileFile","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Pathy","Phantom"],"IsDirOrFile"]},{"tag":"TypeConstructor","contents":[["Pathy","Phantom"],"File"]}]}},"sourceSpan":{"start":[63,1],"name":"/home/travis/build/slamdata/purescript-pathy/src/Pathy/Phantom.purs","end":[63,45]}}],"comments":"The phantom type of files.\n","title":"File","info":{"kind":{"tag":"NamedKind","contents":[["Pathy","Phantom"],"DirOrFile"]},"declType":"externData"},"sourceSpan":{"start":[47,1],"name":"/home/travis/build/slamdata/purescript-pathy/src/Pathy/Phantom.purs","end":[47,38]}},{"children":[{"comments":null,"title":"onDirOrFile","info":{"declType":"typeClassMember","type":{"tag":"ForAll","contents":["r",{"tag":"ForAll","contents":["f",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeConstructor","contents":[["Pathy","Phantom"],"Dir"]}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"b"}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeConstructor","contents":[["Pathy","Phantom"],"Dir"]}]}]},{"tag":"TypeVar","contents":"r"}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeConstructor","contents":[["Pathy","Phantom"],"File"]}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"b"}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeConstructor","contents":[["Pathy","Phantom"],"File"]}]}]},{"tag":"TypeVar","contents":"r"}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeVar","contents":"r"}]}]}]},null]},null]}},"sourceSpan":{"start":[55,3],"name":"/home/travis/build/slamdata/purescript-pathy/src/Pathy/Phantom.purs","end":[60,9]}},{"comments":null,"title":"isDirOrFileDir","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Pathy","Phantom"],"IsDirOrFile"]},{"tag":"TypeConstructor","contents":[["Pathy","Phantom"],"Dir"]}]}},"sourceSpan":{"start":[62,1],"name":"/home/travis/build/slamdata/purescript-pathy/src/Pathy/Phantom.purs","end":[62,43]}},{"comments":null,"title":"isDirOrFileFile","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Pathy","Phantom"],"IsDirOrFile"]},{"tag":"TypeConstructor","contents":[["Pathy","Phantom"],"File"]}]}},"sourceSpan":{"start":[63,1],"name":"/home/travis/build/slamdata/purescript-pathy/src/Pathy/Phantom.purs","end":[63,45]}}],"comments":"A class that enables writing operations that abstract over `DirOrFile`.\n\nThe provided `onDirOrFile` function folds over a value indexed by\n`DirOrFile` to produce a new result, passing proof/coercion functions to\nallow the inner functions to unify their return types if remapping.\n","title":"IsDirOrFile","info":{"fundeps":[],"arguments":[["b",{"tag":"NamedKind","contents":[["Pathy","Phantom"],"DirOrFile"]}]],"declType":"typeClass","superclasses":[]},"sourceSpan":{"start":[54,1],"name":"/home/travis/build/slamdata/purescript-pathy/src/Pathy/Phantom.purs","end":[60,9]}},{"children":[],"comments":"Folds over a value that uses `DirOrFile` to produce a new result.\n","title":"foldDirOrFile","info":{"declType":"value","type":{"tag":"ForAll","contents":["r",{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["f",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Pathy","Phantom"],"IsDirOrFile"],"constraintArgs":[{"tag":"TypeVar","contents":"b"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeConstructor","contents":[["Pathy","Phantom"],"Dir"]}]}]},{"tag":"TypeVar","contents":"r"}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeConstructor","contents":[["Pathy","Phantom"],"File"]}]}]},{"tag":"TypeVar","contents":"r"}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeVar","contents":"r"}]}]}]}]},null]},null]},null]}},"sourceSpan":{"start":[66,1],"name":"/home/travis/build/slamdata/purescript-pathy/src/Pathy/Phantom.purs","end":[72,7]}}]},{"reExports":[],"name":"Pathy.Printer","comments":null,"declarations":[{"children":[],"comments":"A `Printer` defines options for printing paths.\n\n- `root` is a function used to construct the initial segment of paths.\n- `current` is a representation of the current directory.\n- `up` is a representation of going up to the parent directory.\n- `sep` is the string to separate path segments by.\n- `escaper` specified how to deal with printing reserved names and\n   characters.\n","title":"Printer","info":{"arguments":[],"declType":"typeSynonym","type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Record"]},{"tag":"RCons","contents":["root",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeConstructor","contents":[["Data","String","NonEmpty"],"NonEmptyString"]}]}]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"RCons","contents":["current",{"tag":"TypeConstructor","contents":[["Data","String","NonEmpty"],"NonEmptyString"]},{"tag":"RCons","contents":["up",{"tag":"TypeConstructor","contents":[["Data","String","NonEmpty"],"NonEmptyString"]},{"tag":"RCons","contents":["sep",{"tag":"TypeConstructor","contents":[["Data","String","NonEmpty"],"NonEmptyString"]},{"tag":"RCons","contents":["escaper",{"tag":"TypeConstructor","contents":[["Pathy","Printer"],"Escaper"]},{"tag":"REmpty"}]}]}]}]}]}]}},"sourceSpan":{"start":[38,1],"name":"/home/travis/build/slamdata/purescript-pathy/src/Pathy/Printer.purs","end":[44,4]}},{"children":[],"comments":"A printer for POSIX paths.\n","title":"posixPrinter","info":{"declType":"value","type":{"tag":"TypeConstructor","contents":[["Pathy","Printer"],"Printer"]}},"sourceSpan":{"start":[47,1],"name":"/home/travis/build/slamdata/purescript-pathy/src/Pathy/Printer.purs","end":[47,24]}},{"children":[],"comments":"A printer for Windows paths.\n","title":"windowsPrinter","info":{"declType":"value","type":{"tag":"TypeConstructor","contents":[["Pathy","Printer"],"Printer"]}},"sourceSpan":{"start":[57,1],"name":"/home/travis/build/slamdata/purescript-pathy/src/Pathy/Printer.purs","end":[57,26]}},{"children":[],"comments":"Prints a `SandboxedPath` into its canonical `String` representation, using\nthe specified printer. The printed path will always be absolute, as this\nis the only way to ensure the path is safely referring to the intended\nlocation.\n","title":"printPath","info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Pathy","Phantom"],"IsRelOrAbs"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"tag":"ConstrainedType","contents":[{"constraintClass":[["Pathy","Phantom"],"IsDirOrFile"],"constraintArgs":[{"tag":"TypeVar","contents":"b"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Pathy","Printer"],"Printer"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Pathy","Sandboxed"],"SandboxedPath"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}]}]}]},null]},null]}},"sourceSpan":{"start":[70,1],"name":"/home/travis/build/slamdata/purescript-pathy/src/Pathy/Printer.purs","end":[76,12]}},{"children":[],"comments":"Prints a `SandboxedPath` into its canonical `String` representation, using\nthe specified printer. This will print a relative path if `b ~ Rel`, which\ndepending on how the resulting string is used, may be unsafe.\n","title":"unsafePrintPath","info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Pathy","Phantom"],"IsRelOrAbs"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"tag":"ConstrainedType","contents":[{"constraintClass":[["Pathy","Phantom"],"IsDirOrFile"],"constraintArgs":[{"tag":"TypeVar","contents":"b"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Pathy","Printer"],"Printer"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Pathy","Sandboxed"],"SandboxedPath"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}]}]}]},null]},null]}},"sourceSpan":{"start":[89,1],"name":"/home/travis/build/slamdata/purescript-pathy/src/Pathy/Printer.purs","end":[95,12]}},{"children":[],"comments":"Prints a path exactly according to its representation. This should only be\nused for debug purposes. Using this function will raise a warning at\ncompile time as a reminder!\n","title":"debugPrintPath","info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Prim"],"Warn"],"constraintArgs":[{"tag":"TypeLevelString","contents":"debugPrintPath usage"}],"constraintData":null},{"tag":"ConstrainedType","contents":[{"constraintClass":[["Pathy","Phantom"],"IsRelOrAbs"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"tag":"ConstrainedType","contents":[{"constraintClass":[["Pathy","Phantom"],"IsDirOrFile"],"constraintArgs":[{"tag":"TypeVar","contents":"b"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Pathy","Printer"],"Printer"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Pathy","Path"],"Path"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}]}]}]}]},null]},null]}},"sourceSpan":{"start":[101,1],"name":"/home/travis/build/slamdata/purescript-pathy/src/Pathy/Printer.purs","end":[108,12]}},{"children":[{"comments":null,"title":"Escaper","info":{"arguments":[{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","String","NonEmpty"],"NonEmptyString"]}]},{"tag":"TypeConstructor","contents":[["Data","String","NonEmpty"],"NonEmptyString"]}]}}],"declType":"dataConstructor"},"sourceSpan":null},{"comments":null,"title":"newtypeEscaper","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Newtype"],"Newtype"]},{"tag":"TypeConstructor","contents":[["Pathy","Printer"],"Escaper"]}]},{"tag":"TypeWildcard","contents":{"start":[152,51],"name":"/home/travis/build/slamdata/purescript-pathy/src/Pathy/Printer.purs","end":[152,52]}}]}},"sourceSpan":{"start":[152,8],"name":"/home/travis/build/slamdata/purescript-pathy/src/Pathy/Printer.purs","end":[152,52]}},{"comments":null,"title":"semigroupEscaper","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Semigroup"],"Semigroup"]},{"tag":"TypeConstructor","contents":[["Pathy","Printer"],"Escaper"]}]}},"sourceSpan":{"start":[154,1],"name":"/home/travis/build/slamdata/purescript-pathy/src/Pathy/Printer.purs","end":[154,47]}},{"comments":null,"title":"monoidEscaper","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Monoid"],"Monoid"]},{"tag":"TypeConstructor","contents":[["Pathy","Printer"],"Escaper"]}]}},"sourceSpan":{"start":[157,1],"name":"/home/travis/build/slamdata/purescript-pathy/src/Pathy/Printer.purs","end":[157,41]}}],"comments":"An `Escaper` encodes segments or characters which have reserved meaning\nwithin names in a path.\n","title":"Escaper","info":{"declType":"data","dataDeclType":"newtype","typeArguments":[]},"sourceSpan":{"start":[150,1],"name":"/home/travis/build/slamdata/purescript-pathy/src/Pathy/Printer.purs","end":[150,61]}},{"children":[],"comments":"An escaper that replaces all `'/'` characters in a name with `'-'`s.\n","title":"slashEscaper","info":{"declType":"value","type":{"tag":"TypeConstructor","contents":[["Pathy","Printer"],"Escaper"]}},"sourceSpan":{"start":[161,1],"name":"/home/travis/build/slamdata/purescript-pathy/src/Pathy/Printer.purs","end":[161,24]}},{"children":[],"comments":"An escaper that replaces names `\".\"` and `\"..\"` with `\"$dot\"` and\n`\"$dot$dot\"`.\n","title":"dotEscaper","info":{"declType":"value","type":{"tag":"TypeConstructor","contents":[["Pathy","Printer"],"Escaper"]}},"sourceSpan":{"start":[169,1],"name":"/home/travis/build/slamdata/purescript-pathy/src/Pathy/Printer.purs","end":[169,22]}},{"children":[],"comments":"An escaper that removes all slashes, converts \"..\" into \"$dot$dot\", and\nconverts \".\" into \"$dot\".\n","title":"posixEscaper","info":{"declType":"value","type":{"tag":"TypeConstructor","contents":[["Pathy","Printer"],"Escaper"]}},"sourceSpan":{"start":[177,1],"name":"/home/travis/build/slamdata/purescript-pathy/src/Pathy/Printer.purs","end":[177,24]}},{"children":[],"comments":"An escaper that attempts to encode all reserved names and characters for\nwindows-style paths.\n","title":"windowsEscaper","info":{"declType":"value","type":{"tag":"TypeConstructor","contents":[["Pathy","Printer"],"Escaper"]}},"sourceSpan":{"start":[182,1],"name":"/home/travis/build/slamdata/purescript-pathy/src/Pathy/Printer.purs","end":[182,26]}}]},{"reExports":[],"name":"Pathy.Sandboxed","comments":null,"declarations":[{"children":[{"comments":null,"title":"eqSandboxedPath","info":{"declType":"instance","dependencies":[{"constraintClass":[["Pathy","Phantom"],"IsRelOrAbs"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"constraintClass":[["Pathy","Phantom"],"IsDirOrFile"],"constraintArgs":[{"tag":"TypeVar","contents":"b"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Eq"],"Eq"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Pathy","Sandboxed"],"SandboxedPath"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]}},"sourceSpan":{"start":[18,8],"name":"/home/travis/build/slamdata/purescript-pathy/src/Pathy/Sandboxed.purs","end":[18,91]}},{"comments":null,"title":"ordSandboxedPath","info":{"declType":"instance","dependencies":[{"constraintClass":[["Pathy","Phantom"],"IsRelOrAbs"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"constraintClass":[["Pathy","Phantom"],"IsDirOrFile"],"constraintArgs":[{"tag":"TypeVar","contents":"b"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Ord"],"Ord"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Pathy","Sandboxed"],"SandboxedPath"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]}},"sourceSpan":{"start":[19,8],"name":"/home/travis/build/slamdata/purescript-pathy/src/Pathy/Sandboxed.purs","end":[19,93]}},{"comments":null,"title":"showSandboxedPath","info":{"declType":"instance","dependencies":[{"constraintClass":[["Pathy","Phantom"],"IsRelOrAbs"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"constraintClass":[["Pathy","Phantom"],"IsDirOrFile"],"constraintArgs":[{"tag":"TypeVar","contents":"b"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Show"],"Show"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Pathy","Sandboxed"],"SandboxedPath"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]}},"sourceSpan":{"start":[20,1],"name":"/home/travis/build/slamdata/purescript-pathy/src/Pathy/Sandboxed.purs","end":[20,88]}}],"comments":"The type for paths that have been sandboxed.\n","title":"SandboxedPath","info":{"declType":"data","dataDeclType":"data","typeArguments":[["a",null],["b",null]]},"sourceSpan":{"start":[16,1],"name":"/home/travis/build/slamdata/purescript-pathy/src/Pathy/Sandboxed.purs","end":[16,65]}},{"children":[],"comments":"Attempts to sandbox a path relative to an absolute directory (\"sandbox\nroot\"). If the `Path a b` escapes the sandbox root `Nothing` will be\nreturned.\n","title":"sandbox","info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Pathy","Phantom"],"IsRelOrAbs"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Pathy","Path"],"Path"]},{"tag":"TypeConstructor","contents":[["Pathy","Phantom"],"Abs"]}]},{"tag":"TypeConstructor","contents":[["Pathy","Phantom"],"Dir"]}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Pathy","Path"],"Path"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Pathy","Sandboxed"],"SandboxedPath"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}]}]}]},null]},null]}},"sourceSpan":{"start":[26,1],"name":"/home/travis/build/slamdata/purescript-pathy/src/Pathy/Sandboxed.purs","end":[31,31]}},{"children":[],"comments":"Sandboxes any path to `/`.\n\nThis should only be used for situations where a path is already constrained\nwithin a system so that access to `/` is safe - for instance, in URIs.\n","title":"sandboxAny","info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Pathy","Path"],"Path"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Pathy","Sandboxed"],"SandboxedPath"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]},null]},null]}},"sourceSpan":{"start":[46,1],"name":"/home/travis/build/slamdata/purescript-pathy/src/Pathy/Sandboxed.purs","end":[46,56]}},{"children":[],"comments":"Returns the location a `SandboxedPath` was sandboxed to.\n","title":"sandboxRoot","info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Pathy","Sandboxed"],"SandboxedPath"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Pathy","Path"],"Path"]},{"tag":"TypeConstructor","contents":[["Pathy","Phantom"],"Abs"]}]},{"tag":"TypeConstructor","contents":[["Pathy","Phantom"],"Dir"]}]}]},null]},null]}},"sourceSpan":{"start":[50,1],"name":"/home/travis/build/slamdata/purescript-pathy/src/Pathy/Sandboxed.purs","end":[50,61]}},{"children":[],"comments":"Extracts the original path from a `SandboxedPath`.\n","title":"unsandbox","info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Pathy","Sandboxed"],"SandboxedPath"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Pathy","Path"],"Path"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]},null]},null]}},"sourceSpan":{"start":[54,1],"name":"/home/travis/build/slamdata/purescript-pathy/src/Pathy/Sandboxed.purs","end":[54,55]}}]}],"resolvedDependencies":{"purescript-proxy":"2.1.0","purescript-exceptions":"3.1.0","purescript-newtype":"2.0.0","purescript-control":"3.3.1","purescript-console":"3.0.0","purescript-either":"3.1.0","purescript-profunctor":"3.2.0","purescript-arrays":"4.3.0","purescript-maybe":"3.0.0","purescript-symbols":"3.0.0","purescript-type-equality":"2.1.0","purescript-exists":"3.0.0","purescript-distributive":"3.0.0","purescript-unfoldable":"3.1.0","purescript-invariant":"3.0.0","purescript-lazy":"3.0.0","purescript-monoid":"3.3.0","purescript-foldable-traversable":"3.7.1","purescript-tailrec":"3.3.0","purescript-gen":"1.3.1","purescript-typelevel-prelude":"2.6.0","purescript-prelude":"3.1.1","purescript-st":"3.0.0","purescript-bifunctors":"3.0.0","purescript-nonempty":"4.2.0","purescript-contravariant":"3.2.0","purescript-unsafe-coerce":"3.0.0","purescript-integers":"3.2.0","purescript-eff":"3.2.0","purescript-record":"0.2.6","purescript-transformers":"3.5.0","purescript-globals":"3.0.0","purescript-generics-rep":"5.4.0","purescript-math":"2.1.0","purescript-enums":"3.2.1","purescript-random":"3.0.0","purescript-tuples":"4.1.0","purescript-partial":"1.2.1","purescript-quickcheck":"4.6.2","purescript-strings":"3.5.0","purescript-identity":"3.1.0","purescript-lists":"4.12.0","purescript-functions":"3.0.0"},"version":"5.0.0","github":["slamdata","purescript-pathy"],"versionTag":"v5.0.0","moduleMap":{"Data.BooleanAlgebra":"purescript-prelude","Data.Decide":"purescript-contravariant","Type.Data.Boolean":"purescript-typelevel-prelude","Data.Ring":"purescript-prelude","Control.Monad.Trans.Class":"purescript-transformers","Data.NonEmpty":"purescript-nonempty","Data.Char.Gen":"purescript-strings","Data.String.NonEmpty":"purescript-strings","Data.Traversable.Accum.Internal":"purescript-foldable-traversable","Data.Enum.Gen":"purescript-enums","Control.Comonad.Env":"purescript-transformers","Control.Comonad.Traced.Class":"purescript-transformers","Control.Monad.Eff.Unsafe":"purescript-eff","Type.Row.Homogeneous":"purescript-typelevel-prelude","Data.Int.Bits":"purescript-integers","Data.Record.Unsafe":"purescript-record","Data.Bifunctor.Flip":"purescript-bifunctors","Data.String.CodePoints":"purescript-strings","Data.Ord":"purescript-prelude","Control.Monad.Gen":"purescript-gen","Data.Monoid.Dual":"purescript-monoid","Control.Monad.Rec.Class":"purescript-tailrec","Data.Bitraversable":"purescript-foldable-traversable","Data.Profunctor.Costar":"purescript-profunctor","Data.Profunctor.Cowrap":"purescript-profunctor","Data.Boolean":"purescript-prelude","Control.Biapplicative":"purescript-bifunctors","Type.Proxy":"purescript-proxy","Data.Array.ST.Iterator":"purescript-arrays","Data.Bounded":"purescript-prelude","Control.Monad.State.Trans":"purescript-transformers","Data.TraversableWithIndex":"purescript-foldable-traversable","Data.Int":"purescript-integers","Data.Profunctor.Cochoice":"purescript-profunctor","Data.Show":"purescript-prelude","Data.Bifunctor.Clown":"purescript-bifunctors","Control.Monad.Writer.Trans":"purescript-transformers","Data.Foldable":"purescript-foldable-traversable","Data.Divide":"purescript-contravariant","Control.Comonad.Store.Class":"purescript-transformers","Data.Enum":"purescript-enums","Control.Apply":"purescript-prelude","Data.Functor.Contravariant":"purescript-contravariant","Data.Tuple.Nested":"purescript-tuples","Data.Generic.Rep.Semigroup":"purescript-generics-rep","Test.QuickCheck.LCG":"purescript-quickcheck","Control.Monad":"purescript-prelude","Data.Lazy":"purescript-lazy","Data.Monoid":"purescript-monoid","Data.Profunctor.Closed":"purescript-profunctor","Control.Monad.Eff.Uncurried":"purescript-eff","Control.Monad.List.Trans":"purescript-transformers","Control.Monad.RWS":"purescript-transformers","Data.Maybe.First":"purescript-maybe","Control.Bind":"purescript-prelude","Data.Profunctor.Split":"purescript-profunctor","Data.Monoid.Additive":"purescript-monoid","Data.Symbol":"purescript-symbols","Data.String.Regex":"purescript-strings","Data.Profunctor.Join":"purescript-profunctor","Data.HeytingAlgebra":"purescript-prelude","Control.Alt":"purescript-control","Control.Monad.Maybe.Trans":"purescript-transformers","Control.Monad.Cont":"purescript-transformers","Data.List.ZipList":"purescript-lists","Data.Ord.Unsafe":"purescript-prelude","Data.Semigroup":"purescript-prelude","Data.Record":"purescript-record","Data.Array.NonEmpty":"purescript-arrays","Control.Monad.Reader":"purescript-transformers","Data.Generic.Rep.Enum":"purescript-generics-rep","Data.Generic.Rep.Bounded":"purescript-generics-rep","Control.Monad.Eff":"purescript-eff","Control.Comonad.Traced.Trans":"purescript-transformers","Data.Array.ST.Partial":"purescript-arrays","Data.Generic.Rep.Show":"purescript-generics-rep","Data.Profunctor.Clown":"purescript-profunctor","Type.Data.Ordering":"purescript-typelevel-prelude","Data.Tuple":"purescript-tuples","Data.Semigroup.Foldable":"purescript-foldable-traversable","Control.Biapply":"purescript-bifunctors","Data.Distributive":"purescript-distributive","Type.Equality":"purescript-type-equality","Control.Alternative":"purescript-control","Data.Semiring":"purescript-prelude","Data.Exists":"purescript-exists","Data.Traversable.Accum":"purescript-foldable-traversable","Data.CommutativeRing":"purescript-prelude","Data.NaturalTransformation":"purescript-prelude","Data.Monoid.Conj":"purescript-monoid","Data.Profunctor.Star":"purescript-profunctor","Data.Unfoldable":"purescript-unfoldable","Data.Profunctor.Wrap":"purescript-profunctor","Control.Monad.Eff.Random":"purescript-random","Control.Comonad.Store.Trans":"purescript-transformers","Control.Monad.ST":"purescript-st","Control.Monad.State.Class":"purescript-transformers","Data.List.Types":"purescript-lists","Data.Functor":"purescript-prelude","Unsafe.Coerce":"purescript-unsafe-coerce","Control.Monad.Writer.Class":"purescript-transformers","Data.Generic.Rep.Ord":"purescript-generics-rep","Data.Profunctor.Strong":"purescript-profunctor","Control.Monad.Except":"purescript-transformers","Data.List.Lazy.Types":"purescript-lists","Control.Category":"purescript-prelude","Test.QuickCheck.Arbitrary":"purescript-quickcheck","Control.Monad.Gen.Common":"purescript-gen","Control.Monad.RWS.Trans":"purescript-transformers","Test.QuickCheck.Data.AlphaNumString":"purescript-quickcheck","Control.Monad.Cont.Trans":"purescript-transformers","Data.Maybe":"purescript-maybe","Type.Row":"purescript-typelevel-prelude","Data.String.Regex.Unsafe":"purescript-strings","Data.Profunctor":"purescript-profunctor","Control.Comonad":"purescript-control","Data.Function":"purescript-prelude","Data.List":"purescript-lists","Data.Record.Builder":"purescript-record","Data.Field":"purescript-prelude","Data.List.Lazy":"purescript-lists","Data.Generic.Rep.Eq":"purescript-generics-rep","Data.EuclideanRing":"purescript-prelude","Data.Functor.Invariant":"purescript-invariant","Control.Comonad.Traced":"purescript-transformers","Global.Unsafe":"purescript-globals","Data.Comparison":"purescript-contravariant","Data.String.Unsafe":"purescript-strings","Prelude":"purescript-prelude","Data.Predicate":"purescript-contravariant","Partial.Unsafe":"purescript-partial","Data.Array":"purescript-arrays","Data.Bifunctor.Product":"purescript-bifunctors","Control.Extend":"purescript-control","Control.Lazy":"purescript-control","Data.Function.Uncurried":"purescript-functions","Control.Monad.Reader.Trans":"purescript-transformers","Control.Comonad.Env.Class":"purescript-transformers","Data.Eq":"purescript-prelude","Data.Either.Nested":"purescript-either","Data.Newtype":"purescript-newtype","Control.Monad.Eff.Console":"purescript-console","Data.Semigroup.Traversable":"purescript-foldable-traversable","Data.Bifunctor":"purescript-bifunctors","Data.Monoid.Disj":"purescript-monoid","Control.Monad.Eff.Exception":"purescript-exceptions","Control.Monad.Gen.Class":"purescript-gen","Data.Array.Partial":"purescript-arrays","Data.String.CaseInsensitive":"purescript-strings","Data.Record.ST":"purescript-record","Control.MonadPlus":"purescript-control","Data.Void":"purescript-prelude","Control.MonadZero":"purescript-control","Data.Profunctor.Costrong":"purescript-profunctor","Control.Comonad.Store":"purescript-transformers","Control.Monad.Except.Trans":"purescript-transformers","Data.Bifunctor.Joker":"purescript-bifunctors","Data.FunctorWithIndex":"purescript-foldable-traversable","Data.Divisible":"purescript-contravariant","Data.DivisionRing":"purescript-prelude","Data.Bifunctor.Wrap":"purescript-bifunctors","Data.Equivalence":"purescript-contravariant","Data.Maybe.Last":"purescript-maybe","Data.Unit":"purescript-prelude","Data.List.NonEmpty":"purescript-lists","Data.List.Lazy.NonEmpty":"purescript-lists","Data.Ordering":"purescript-prelude","Control.Monad.Cont.Class":"purescript-transformers","Data.Identity":"purescript-identity","Math":"purescript-math","Control.Comonad.Trans.Class":"purescript-transformers","Data.String":"purescript-strings","Control.Plus":"purescript-control","Data.Profunctor.Joker":"purescript-profunctor","Control.Monad.Eff.Class":"purescript-eff","Test.QuickCheck":"purescript-quickcheck","Type.Row.Effect.Equality":"purescript-type-equality","Partial":"purescript-partial","Control.Comonad.Env.Trans":"purescript-transformers","Global":"purescript-globals","Control.Monad.Reader.Class":"purescript-transformers","Data.Decidable":"purescript-contravariant","Data.Monoid.Multiplicative":"purescript-monoid","Type.Data.Symbol":"purescript-typelevel-prelude","Data.Array.ST":"purescript-arrays","Control.Monad.Error.Class":"purescript-transformers","Data.Generic.Rep.Monoid":"purescript-generics-rep","Control.Semigroupoid":"purescript-prelude","Data.Monoid.Alternate":"purescript-monoid","Data.Char":"purescript-strings","Data.Generic.Rep":"purescript-generics-rep","Data.Bifunctor.Join":"purescript-bifunctors","Control.Monad.Eff.Exception.Unsafe":"purescript-exceptions","Data.Bifoldable":"purescript-foldable-traversable","Data.Monoid.Endo":"purescript-monoid","Control.Monad.State":"purescript-transformers","Data.List.Partial":"purescript-lists","Data.String.Regex.Flags":"purescript-strings","Data.Either":"purescript-either","Type.Prelude":"purescript-typelevel-prelude","Control.Applicative":"purescript-prelude","Data.FoldableWithIndex":"purescript-foldable-traversable","Data.Op":"purescript-contravariant","Test.QuickCheck.Gen":"purescript-quickcheck","Control.Monad.Writer":"purescript-transformers","Data.Profunctor.Choice":"purescript-profunctor","Data.Traversable":"purescript-foldable-traversable","Data.String.Gen":"purescript-strings"},"compilerVersion":"0.11.7"}