{"uploader":"paf31","packageMeta":{"moduleType":["node"],"repository":{"url":"git://github.com/paf31/purescript-preface.git","type":"git"},"ignore":["**/.*","node_modules","bower_components","output"],"name":"purescript-preface"},"modules":[{"name":"Unit","comments":null,"declarations":[{"children":[],"comments":"A type with only one value.\n","title":"Unit","fixity":null,"info":{"declType":"data","dataDeclType":"data","typeArguments":[]},"sourceSpan":{"start":[6,1],"name":"src/Unit.purs","end":[9,1]}},{"children":[],"comments":"The only value of the `Unit` type.\n","title":"unit","fixity":null,"info":{"declType":"value","type":{"tag":"TypeConstructor","contents":"Unit.Unit"}},"sourceSpan":{"start":[9,1],"name":"src/Unit.purs","end":[10,1]}}]},{"name":"String","comments":null,"declarations":[{"children":[],"comments":"Append two `String`s.\n","title":"append","fixity":null,"info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":"Prim.Function"},{"tag":"TypeConstructor","contents":"Prim.String"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":"Prim.Function"},{"tag":"TypeConstructor","contents":"Prim.String"}]},{"tag":"TypeConstructor","contents":"Prim.String"}]}]}},"sourceSpan":{"start":[8,1],"name":"src/String.purs","end":[11,1]}},{"children":[],"comments":"An infix operator for appending `String`s.\n","title":"(++)","fixity":{"associativity":"infixr","precedence":5},"info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":"Prim.Function"},{"tag":"TypeConstructor","contents":"Prim.String"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":"Prim.Function"},{"tag":"TypeConstructor","contents":"Prim.String"}]},{"tag":"TypeConstructor","contents":"Prim.String"}]}]}},"sourceSpan":{"start":[11,1],"name":"src/String.purs","end":[12,1]}}]},{"name":"Number","comments":null,"declarations":[{"children":[],"comments":"Add two `Number`s.\n","title":"add","fixity":null,"info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":"Prim.Function"},{"tag":"TypeConstructor","contents":"Prim.Number"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":"Prim.Function"},{"tag":"TypeConstructor","contents":"Prim.Number"}]},{"tag":"TypeConstructor","contents":"Prim.Number"}]}]}},"sourceSpan":{"start":[20,1],"name":"src/Number.purs","end":[23,1]}},{"children":[],"comments":"An infix operator for addition.\n","title":"(+)","fixity":{"associativity":"infixl","precedence":6},"info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":"Prim.Function"},{"tag":"TypeConstructor","contents":"Prim.Number"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":"Prim.Function"},{"tag":"TypeConstructor","contents":"Prim.Number"}]},{"tag":"TypeConstructor","contents":"Prim.Number"}]}]}},"sourceSpan":{"start":[23,1],"name":"src/Number.purs","end":[24,1]}},{"children":[],"comments":"Subtract a `Number` from another.\n","title":"subtract","fixity":null,"info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":"Prim.Function"},{"tag":"TypeConstructor","contents":"Prim.Number"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":"Prim.Function"},{"tag":"TypeConstructor","contents":"Prim.Number"}]},{"tag":"TypeConstructor","contents":"Prim.Number"}]}]}},"sourceSpan":{"start":[27,1],"name":"src/Number.purs","end":[30,1]}},{"children":[],"comments":"An infix operator for subtraction.\n","title":"(-)","fixity":{"associativity":"infixl","precedence":6},"info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":"Prim.Function"},{"tag":"TypeConstructor","contents":"Prim.Number"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":"Prim.Function"},{"tag":"TypeConstructor","contents":"Prim.Number"}]},{"tag":"TypeConstructor","contents":"Prim.Number"}]}]}},"sourceSpan":{"start":[30,1],"name":"src/Number.purs","end":[31,1]}},{"children":[],"comments":"Multiply two `Number`s.\n","title":"multiply","fixity":null,"info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":"Prim.Function"},{"tag":"TypeConstructor","contents":"Prim.Number"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":"Prim.Function"},{"tag":"TypeConstructor","contents":"Prim.Number"}]},{"tag":"TypeConstructor","contents":"Prim.Number"}]}]}},"sourceSpan":{"start":[34,1],"name":"src/Number.purs","end":[37,1]}},{"children":[],"comments":"An infix operator for multiplication.\n","title":"(*)","fixity":{"associativity":"infixl","precedence":7},"info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":"Prim.Function"},{"tag":"TypeConstructor","contents":"Prim.Number"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":"Prim.Function"},{"tag":"TypeConstructor","contents":"Prim.Number"}]},{"tag":"TypeConstructor","contents":"Prim.Number"}]}]}},"sourceSpan":{"start":[37,1],"name":"src/Number.purs","end":[38,1]}},{"children":[],"comments":"Divide a `Number` by another.\n","title":"divide","fixity":null,"info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":"Prim.Function"},{"tag":"TypeConstructor","contents":"Prim.Number"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":"Prim.Function"},{"tag":"TypeConstructor","contents":"Prim.Number"}]},{"tag":"TypeConstructor","contents":"Prim.Number"}]}]}},"sourceSpan":{"start":[41,1],"name":"src/Number.purs","end":[44,1]}},{"children":[],"comments":"An infix operator for division.\n","title":"(/)","fixity":{"associativity":"infixl","precedence":7},"info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":"Prim.Function"},{"tag":"TypeConstructor","contents":"Prim.Number"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":"Prim.Function"},{"tag":"TypeConstructor","contents":"Prim.Number"}]},{"tag":"TypeConstructor","contents":"Prim.Number"}]}]}},"sourceSpan":{"start":[44,1],"name":"src/Number.purs","end":[45,1]}},{"children":[],"comments":"Find the remainder after division\n","title":"remainder","fixity":null,"info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":"Prim.Function"},{"tag":"TypeConstructor","contents":"Prim.Number"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":"Prim.Function"},{"tag":"TypeConstructor","contents":"Prim.Number"}]},{"tag":"TypeConstructor","contents":"Prim.Number"}]}]}},"sourceSpan":{"start":[48,1],"name":"src/Number.purs","end":[51,1]}},{"children":[],"comments":"An infix operator for the `remainder` function.\n","title":"(%)","fixity":{"associativity":"infixl","precedence":-1},"info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":"Prim.Function"},{"tag":"TypeConstructor","contents":"Prim.Number"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":"Prim.Function"},{"tag":"TypeConstructor","contents":"Prim.Number"}]},{"tag":"TypeConstructor","contents":"Prim.Number"}]}]}},"sourceSpan":{"start":[51,1],"name":"src/Number.purs","end":[52,1]}},{"children":[],"comments":"Find the maximum of two numbers.\n","title":"max","fixity":null,"info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":"Prim.Function"},{"tag":"TypeConstructor","contents":"Prim.Number"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":"Prim.Function"},{"tag":"TypeConstructor","contents":"Prim.Number"}]},{"tag":"TypeConstructor","contents":"Prim.Number"}]}]}},"sourceSpan":{"start":[55,1],"name":"src/Number.purs","end":[58,1]}},{"children":[],"comments":"Find the minimum of two numbers.\n","title":"min","fixity":null,"info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":"Prim.Function"},{"tag":"TypeConstructor","contents":"Prim.Number"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":"Prim.Function"},{"tag":"TypeConstructor","contents":"Prim.Number"}]},{"tag":"TypeConstructor","contents":"Prim.Number"}]}]}},"sourceSpan":{"start":[58,1],"name":"src/Number.purs","end":[60,1]}},{"children":[],"comments":"Test whether one value is less than another.\n","title":"lt","fixity":null,"info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":"Prim.Function"},{"tag":"TypeConstructor","contents":"Prim.Number"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":"Prim.Function"},{"tag":"TypeConstructor","contents":"Prim.Number"}]},{"tag":"TypeConstructor","contents":"Prim.Boolean"}]}]}},"sourceSpan":{"start":[66,1],"name":"src/Number.purs","end":[68,1]}},{"children":[],"comments":null,"title":"(<)","fixity":{"associativity":"infixl","precedence":4},"info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":"Prim.Function"},{"tag":"TypeConstructor","contents":"Prim.Number"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":"Prim.Function"},{"tag":"TypeConstructor","contents":"Prim.Number"}]},{"tag":"TypeConstructor","contents":"Prim.Boolean"}]}]}},"sourceSpan":{"start":[68,1],"name":"src/Number.purs","end":[69,1]}},{"children":[],"comments":"Test whether one value is less than or equal to another.\n","title":"lte","fixity":null,"info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":"Prim.Function"},{"tag":"TypeConstructor","contents":"Prim.Number"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":"Prim.Function"},{"tag":"TypeConstructor","contents":"Prim.Number"}]},{"tag":"TypeConstructor","contents":"Prim.Boolean"}]}]}},"sourceSpan":{"start":[72,1],"name":"src/Number.purs","end":[74,1]}},{"children":[],"comments":null,"title":"(<=)","fixity":{"associativity":"infixl","precedence":4},"info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":"Prim.Function"},{"tag":"TypeConstructor","contents":"Prim.Number"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":"Prim.Function"},{"tag":"TypeConstructor","contents":"Prim.Number"}]},{"tag":"TypeConstructor","contents":"Prim.Boolean"}]}]}},"sourceSpan":{"start":[74,1],"name":"src/Number.purs","end":[75,1]}},{"children":[],"comments":"Test whether one value is greater than another.\n","title":"gt","fixity":null,"info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":"Prim.Function"},{"tag":"TypeConstructor","contents":"Prim.Number"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":"Prim.Function"},{"tag":"TypeConstructor","contents":"Prim.Number"}]},{"tag":"TypeConstructor","contents":"Prim.Boolean"}]}]}},"sourceSpan":{"start":[78,1],"name":"src/Number.purs","end":[80,1]}},{"children":[],"comments":null,"title":"(>)","fixity":{"associativity":"infixl","precedence":4},"info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":"Prim.Function"},{"tag":"TypeConstructor","contents":"Prim.Number"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":"Prim.Function"},{"tag":"TypeConstructor","contents":"Prim.Number"}]},{"tag":"TypeConstructor","contents":"Prim.Boolean"}]}]}},"sourceSpan":{"start":[80,1],"name":"src/Number.purs","end":[81,1]}},{"children":[],"comments":"Test whether one value is greater than or equal to another.\n","title":"gte","fixity":null,"info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":"Prim.Function"},{"tag":"TypeConstructor","contents":"Prim.Number"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":"Prim.Function"},{"tag":"TypeConstructor","contents":"Prim.Number"}]},{"tag":"TypeConstructor","contents":"Prim.Boolean"}]}]}},"sourceSpan":{"start":[84,1],"name":"src/Number.purs","end":[86,1]}},{"children":[],"comments":null,"title":"(>=)","fixity":{"associativity":"infixl","precedence":4},"info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":"Prim.Function"},{"tag":"TypeConstructor","contents":"Prim.Number"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":"Prim.Function"},{"tag":"TypeConstructor","contents":"Prim.Number"}]},{"tag":"TypeConstructor","contents":"Prim.Boolean"}]}]}},"sourceSpan":{"start":[86,1],"name":"src/Number.purs","end":[87,1]}}]},{"name":"Maybe","comments":null,"declarations":[{"children":[{"comments":null,"title":"Nothing","info":{"arguments":[],"declType":"dataConstructor"},"sourceSpan":null},{"comments":null,"title":"Just","info":{"arguments":[{"tag":"TypeVar","contents":"a"}],"declType":"dataConstructor"},"sourceSpan":null}],"comments":"The `Maybe` type constructor is used to describe values which might be _missing_.\n`Maybe` is an alternative to using `null` in other languages.\n","title":"Maybe","fixity":null,"info":{"declType":"data","dataDeclType":"data","typeArguments":[["a",null]]},"sourceSpan":{"start":[7,1],"name":"src/Maybe.purs","end":[10,1]}},{"children":[],"comments":"Get the value from a `Maybe a`, if it is present, or using a default value, if not.\n","title":"getOrElse","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":"Prim.Function"},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":"Prim.Function"},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":"Maybe.Maybe"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeVar","contents":"a"}]}]},null]}},"sourceSpan":{"start":[10,1],"name":"src/Maybe.purs","end":[11,1]}}]},{"name":"Function","comments":null,"declarations":[{"children":[],"comments":"Apply a function to an argument.\n","title":"apply","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":"Prim.Function"},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":"Prim.Function"},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":"Prim.Function"},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]},null]},null]}},"sourceSpan":{"start":[9,1],"name":"src/Function.purs","end":[10,1]}},{"children":[],"comments":"An infix operator for function application.\n","title":"($)","fixity":{"associativity":"infixr","precedence":0},"info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":"Prim.Function"},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":"Prim.Function"},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":"Prim.Function"},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]},null]},null]}},"sourceSpan":{"start":[15,1],"name":"src/Function.purs","end":[16,1]}},{"children":[],"comments":"Compose two functions, i.e. create a function which applies one function and then the other.\n","title":"compose","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["c",{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":"Prim.Function"},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":"Prim.Function"},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeVar","contents":"c"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":"Prim.Function"},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":"Prim.Function"},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":"Prim.Function"},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"c"}]}]}]},null]},null]},null]}},"sourceSpan":{"start":[19,1],"name":"src/Function.purs","end":[20,1]}},{"children":[],"comments":"An infix operator for function composition.\n","title":"(<<<)","fixity":{"associativity":"infixr","precedence":9},"info":{"declType":"value","type":{"tag":"ForAll","contents":["c",{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":"Prim.Function"},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":"Prim.Function"},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeVar","contents":"c"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":"Prim.Function"},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":"Prim.Function"},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":"Prim.Function"},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"c"}]}]}]},null]},null]},null]}},"sourceSpan":{"start":[25,1],"name":"src/Function.purs","end":[26,1]}},{"children":[],"comments":"Flip the order of the first two arguments of a function.\n","title":"flip","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["c",{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":"Prim.Function"},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":"Prim.Function"},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":"Prim.Function"},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeVar","contents":"c"}]}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":"Prim.Function"},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":"Prim.Function"},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"c"}]}]}]},null]},null]},null]}},"sourceSpan":{"start":[29,1],"name":"src/Function.purs","end":[30,1]}},{"children":[],"comments":"Create a function which returns its first argument and ignores its second.\n","title":"const","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":"Prim.Function"},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":"Prim.Function"},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeVar","contents":"a"}]}]},null]},null]}},"sourceSpan":{"start":[33,1],"name":"src/Function.purs","end":[34,1]}}]},{"name":"Either","comments":null,"declarations":[{"children":[{"comments":null,"title":"Left","info":{"arguments":[{"tag":"TypeVar","contents":"a"}],"declType":"dataConstructor"},"sourceSpan":null},{"comments":null,"title":"Right","info":{"arguments":[{"tag":"TypeVar","contents":"b"}],"declType":"dataConstructor"},"sourceSpan":null}],"comments":"The `Either` type constructor is used to describe values which are constructed using values\nfrom one of two types.\n`Either` is sometimes used to express _values or errors_, with errors on the `Left` and successful results\non the `Right`.\n","title":"Either","fixity":null,"info":{"declType":"data","dataDeclType":"data","typeArguments":[["a",null],["b",null]]},"sourceSpan":{"start":[9,1],"name":"src/Either.purs","end":[12,1]}},{"children":[],"comments":"Change values constructed using `Left` by applying a function. \n","title":"mapLeft","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["r",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":"Prim.Function"},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":"Prim.Function"},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":"Prim.Function"},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":"Either.Either"},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"r"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":"Either.Either"},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeVar","contents":"r"}]}]}]},null]},null]},null]}},"sourceSpan":{"start":[12,1],"name":"src/Either.purs","end":[13,1]}},{"children":[],"comments":"Change values constructed using `Right` by applying a function.\n","title":"mapRight","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["l",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":"Prim.Function"},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":"Prim.Function"},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":"Prim.Function"},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":"Either.Either"},{"tag":"TypeVar","contents":"l"}]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":"Either.Either"},{"tag":"TypeVar","contents":"l"}]},{"tag":"TypeVar","contents":"b"}]}]}]},null]},null]},null]}},"sourceSpan":{"start":[17,1],"name":"src/Either.purs","end":[18,1]}}]},{"name":"Boolean","comments":null,"declarations":[{"children":[],"comments":"Boolean AND.\n","title":"and","fixity":null,"info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":"Prim.Function"},{"tag":"TypeConstructor","contents":"Prim.Boolean"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":"Prim.Function"},{"tag":"TypeConstructor","contents":"Prim.Boolean"}]},{"tag":"TypeConstructor","contents":"Prim.Boolean"}]}]}},"sourceSpan":{"start":[11,1],"name":"src/Boolean.purs","end":[14,1]}},{"children":[],"comments":"An infix operator for boolean AND.\n","title":"(&&)","fixity":{"associativity":"infixr","precedence":3},"info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":"Prim.Function"},{"tag":"TypeConstructor","contents":"Prim.Boolean"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":"Prim.Function"},{"tag":"TypeConstructor","contents":"Prim.Boolean"}]},{"tag":"TypeConstructor","contents":"Prim.Boolean"}]}]}},"sourceSpan":{"start":[14,1],"name":"src/Boolean.purs","end":[15,1]}},{"children":[],"comments":"Boolean OR.\n","title":"or","fixity":null,"info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":"Prim.Function"},{"tag":"TypeConstructor","contents":"Prim.Boolean"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":"Prim.Function"},{"tag":"TypeConstructor","contents":"Prim.Boolean"}]},{"tag":"TypeConstructor","contents":"Prim.Boolean"}]}]}},"sourceSpan":{"start":[18,1],"name":"src/Boolean.purs","end":[21,1]}},{"children":[],"comments":"An infix operator for boolean OR.\n","title":"(||)","fixity":{"associativity":"infixr","precedence":2},"info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":"Prim.Function"},{"tag":"TypeConstructor","contents":"Prim.Boolean"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":"Prim.Function"},{"tag":"TypeConstructor","contents":"Prim.Boolean"}]},{"tag":"TypeConstructor","contents":"Prim.Boolean"}]}]}},"sourceSpan":{"start":[21,1],"name":"src/Boolean.purs","end":[22,1]}},{"children":[],"comments":"Boolean negation.\n","title":"not","fixity":null,"info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":"Prim.Function"},{"tag":"TypeConstructor","contents":"Prim.Boolean"}]},{"tag":"TypeConstructor","contents":"Prim.Boolean"}]}},"sourceSpan":{"start":[25,1],"name":"src/Boolean.purs","end":[25,34]}}]},{"name":"Array","comments":null,"declarations":[{"children":[],"comments":"Create a new `Array` by applying a function to the elements of another `Array`.\n","title":"map","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":"Prim.Function"},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":"Prim.Function"},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":"Prim.Function"},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":"Prim.Array"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":"Prim.Array"},{"tag":"TypeVar","contents":"b"}]}]}]},null]},null]}},"sourceSpan":{"start":[9,1],"name":"src/Array.purs","end":[13,1]}},{"children":[],"comments":"Create a new `Array` by keeping those elements of another `Array` for which the specified function\nreturns `true`.\n","title":"filter","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":"Prim.Function"},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":"Prim.Function"},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeConstructor","contents":"Prim.Boolean"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":"Prim.Function"},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":"Prim.Array"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":"Prim.Array"},{"tag":"TypeVar","contents":"a"}]}]}]},null]}},"sourceSpan":{"start":[13,1],"name":"src/Array.purs","end":[16,1]}},{"children":[],"comments":"\"Fold\" the elements of the array, using a function to combine each element with the current accumulator.\n","title":"fold","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["acc",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":"Prim.Function"},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":"Prim.Function"},{"tag":"TypeVar","contents":"acc"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":"Prim.Function"},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"acc"}]}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":"Prim.Function"},{"tag":"TypeVar","contents":"acc"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":"Prim.Function"},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":"Prim.Array"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeVar","contents":"acc"}]}]}]},null]},null]}},"sourceSpan":{"start":[16,1],"name":"src/Array.purs","end":[19,1]}},{"children":[],"comments":"Concatenate the elements of two arrays\n","title":"concat","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":"Prim.Function"},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":"Prim.Array"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":"Prim.Function"},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":"Prim.Array"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":"Prim.Array"},{"tag":"TypeVar","contents":"a"}]}]}]},null]}},"sourceSpan":{"start":[19,1],"name":"src/Array.purs","end":[19,64]}}]},{"name":"Task","comments":null,"declarations":[{"children":[],"comments":"A `Task` represents a computation which can have side-effects.\n","title":"Task","fixity":null,"info":{"kind":{"tag":"FunKind","contents":[{"tag":"Star","contents":[]},{"tag":"Star","contents":[]}]},"declType":"externData"},"sourceSpan":{"start":[13,1],"name":"src/Task.purs","end":[16,1]}},{"children":[],"comments":"Create a `Task` which returns a value with no side-effects.\n","title":"pure","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":"Prim.Function"},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":"Task.Task"},{"tag":"TypeVar","contents":"a"}]}]},null]}},"sourceSpan":{"start":[16,1],"name":"src/Task.purs","end":[20,1]}},{"children":[],"comments":"Create a `Task` which combines two `Task`s, passing the result of the first to a function,\nwhich determines the second.\n","title":"bind","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":"Prim.Function"},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":"Task.Task"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":"Prim.Function"},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":"Prim.Function"},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":"Task.Task"},{"tag":"TypeVar","contents":"b"}]}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":"Task.Task"},{"tag":"TypeVar","contents":"b"}]}]}]},null]},null]}},"sourceSpan":{"start":[20,1],"name":"src/Task.purs","end":[23,1]}},{"children":[],"comments":"Create a `Task` which logs a `String` to the console.\n","title":"log","fixity":null,"info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":"Prim.Function"},{"tag":"TypeConstructor","contents":"Prim.String"}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":"Task.Task"},{"tag":"TypeConstructor","contents":"Unit.Unit"}]}]}},"sourceSpan":{"start":[23,1],"name":"src/Task.purs","end":[26,1]}},{"children":[],"comments":"Perform a sequence of tasks, ignoring the results.\n","title":"sequence","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":"Prim.Function"},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":"Prim.Array"},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":"Task.Task"},{"tag":"TypeVar","contents":"a"}]}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":"Task.Task"},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":"Prim.Array"},{"tag":"TypeVar","contents":"a"}]}]}]},null]}},"sourceSpan":{"start":[26,1],"name":"src/Task.purs","end":[27,1]}}]},{"name":"Preface","comments":"The `Preface` is an alternative to the `Prelude` which can be used for teaching purposes.\n\nSee the individual modules' documentation for details:\n\n- [`Array`](Array.md)          - Functions on arrays: maps, folds, etc.\n- [`Boolean`](Boolean.md)      - Basic boolean algebra.\n- [`Either`](Either.md)        - A simple example of an _algebraic data type_.\n- [`Function`](Function.md)    - Constructions on functions - composition, application, etc.\n- [`Maybe`](Maybe.md)          - A data structure which may or may not contain a value.\n- [`Number`](Number.md)        - Functions and operators on numbers.\n- [`String`](String.md)        - Functions and operators on strings.\n- [`Task`](Task.md)            - A simple model for code with side-effects.\n","declarations":[]}],"resolvedDependencies":{},"bookmarks":[{"package":null,"item":["Unit","Unit"]},{"package":null,"item":["Unit","unit"]},{"package":null,"item":["String","(++)"]},{"package":null,"item":["String","append"]},{"package":null,"item":["String","(++)"]},{"package":null,"item":["Number","(+)"]},{"package":null,"item":["Number","(-)"]},{"package":null,"item":["Number","(*)"]},{"package":null,"item":["Number","(/)"]},{"package":null,"item":["Number","add"]},{"package":null,"item":["Number","(+)"]},{"package":null,"item":["Number","subtract"]},{"package":null,"item":["Number","(-)"]},{"package":null,"item":["Number","multiply"]},{"package":null,"item":["Number","(*)"]},{"package":null,"item":["Number","divide"]},{"package":null,"item":["Number","(/)"]},{"package":null,"item":["Number","remainder"]},{"package":null,"item":["Number","(%)"]},{"package":null,"item":["Number","max"]},{"package":null,"item":["Number","min"]},{"package":null,"item":["Number","(<)"]},{"package":null,"item":["Number","(>)"]},{"package":null,"item":["Number","(<=)"]},{"package":null,"item":["Number","(>=)"]},{"package":null,"item":["Number","lt"]},{"package":null,"item":["Number","(<)"]},{"package":null,"item":["Number","lte"]},{"package":null,"item":["Number","(<=)"]},{"package":null,"item":["Number","gt"]},{"package":null,"item":["Number","(>)"]},{"package":null,"item":["Number","gte"]},{"package":null,"item":["Number","(>=)"]},{"package":null,"item":["Maybe","Maybe"]},{"package":null,"item":["Maybe","getOrElse"]},{"package":null,"item":["Function","apply"]},{"package":null,"item":["Function","($)"]},{"package":null,"item":["Function","($)"]},{"package":null,"item":["Function","compose"]},{"package":null,"item":["Function","(<<<)"]},{"package":null,"item":["Function","(<<<)"]},{"package":null,"item":["Function","flip"]},{"package":null,"item":["Function","const"]},{"package":null,"item":["Either","Either"]},{"package":null,"item":["Either","mapLeft"]},{"package":null,"item":["Either","mapRight"]},{"package":null,"item":["Boolean","(&&)"]},{"package":null,"item":["Boolean","(||)"]},{"package":null,"item":["Boolean","and"]},{"package":null,"item":["Boolean","(&&)"]},{"package":null,"item":["Boolean","or"]},{"package":null,"item":["Boolean","(||)"]},{"package":null,"item":["Boolean","not"]},{"package":null,"item":["Array","map"]},{"package":null,"item":["Array","filter"]},{"package":null,"item":["Array","fold"]},{"package":null,"item":["Array","concat"]},{"package":null,"item":["Task","Task"]},{"package":null,"item":["Task","pure"]},{"package":null,"item":["Task","bind"]},{"package":null,"item":["Task","log"]},{"package":null,"item":["Task","sequence"]}],"version":"0.1.0","github":["paf31","purescript-preface"],"versionTag":"v0.1.0","compilerVersion":"0.7.1.0"}