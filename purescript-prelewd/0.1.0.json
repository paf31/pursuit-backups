{"uploader":"i-am-tom","packageMeta":{"repository":{"url":"git://github.com/i-am-tom/purescript-prelewd.git","type":"git"},"ignore":["**/.*","node_modules","bower_components","output"],"devDependencies":{"purescript-psci-support":"^3.0.0"},"dependencies":{"purescript-control":"^3.3.0","purescript-console":"^3.0.0","purescript-either":"^3.1.0","purescript-profunctor":"^3.2.0","purescript-profunctor-lenses":"^3.4.0","purescript-pairs":"^5.0.0","purescript-debug":"^3.0.0","purescript-prelude":"^3.1.0","purescript-contravariant":"^3.1.0"},"name":"purescript-prelewd","license":["MIT"]},"tagTime":"2017-08-11T09:04:04+0000","modules":[{"reExports":[],"name":"Prelewd","comments":null,"declarations":[{"children":[],"comments":"I've chosen a train as you might thing of it as the second thing going\nthrough a \"magic tunnel\" that transforms its passengers. Bear with me: this\nwill make more sense in a second.\n","title":"(üöÇ)","info":{"declType":"alias","alias":[["Data","Functor"],{"Right":{"Left":{"Ident":"map"}}}],"fixity":{"associativity":"infixl","precedence":4}},"sourceSpan":{"start":[24,1],"name":"/Users/Tom/Git/purescript/premoji/src/Prelewd.purs","end":[24,18]}},{"children":[],"comments":"You may, from time to time, see some code like `f <$> a <*> b <*> c`. What\nthis does is apply three (specifically `Apply`) *functor-wrapped* values to\n`f`, and returns the answer wrapped up in the same `Apply`. To make this\nclearer, `Prelewd` would write this as `f üöÇ(a)üöã(b)üöã(c)`. We can now see\nthat what we're actually doing is driving our train through the \"magic\ntunnel\" with some extra passengers. We are effectively combining `a`, `b`,\nand `c` using the `f` function to bring them all together.\n","title":"(üöã)","info":{"declType":"alias","alias":[["Control","Apply"],{"Right":{"Left":{"Ident":"apply"}}}],"fixity":{"associativity":"infixl","precedence":4}},"sourceSpan":{"start":[33,1],"name":"/Users/Tom/Git/purescript/premoji/src/Prelewd.purs","end":[33,22]}},{"children":[],"comments":"Particularly with things like validation, you'll get code sequences like\n`isUpper name *> pure name`, where `Either` is the underlying mechanism.\nWhat's going on here is that the values are combined with `\\x y -> y`,\nwhich means that any \"side-effects\" from the first value aren't forgotten.\nSo, for validation, this means that any validation *failure* is carried\nforward. Or, in `Prelewd`, we use the _now-look-at-that-one_ operator.\n","title":"(üëâ)","info":{"declType":"alias","alias":[["Control","Apply"],{"Right":{"Left":{"Ident":"applySecond"}}}],"fixity":{"associativity":"infixl","precedence":4}},"sourceSpan":{"start":[41,1],"name":"/Users/Tom/Git/purescript/premoji/src/Prelewd.purs","end":[41,28]}},{"children":[],"comments":"I desperately wanted to use üåØ for this, and I probably will as soon as the\ncompiler starts handling the weird emoji set. For now, though, I'm going to\nuse this explosion thing. The point is that stuff (well, air) goes in one\nend, and gets transformed into noise or whatever. _Stretched metaphor_. The\npoint is that confetti and stuff happens as a side-effect. `>>=` is scary,\nbut üéâ is delightful. `readLine üéâ log` means \"pass the input to `log`, and\nthrow confetti everywhere in the process\".\n","title":"(üéâ)","info":{"declType":"alias","alias":[["Control","Bind"],{"Right":{"Left":{"Ident":"bind"}}}],"fixity":{"associativity":"infixl","precedence":1}},"sourceSpan":{"start":[50,1],"name":"/Users/Tom/Git/purescript/premoji/src/Prelewd.purs","end":[50,19]}},{"children":[],"comments":"In the early days, composition is a confusing thing to read. When we write,\n`f <<< g`, what we actually get is `\\x -> f (g x)`. When we write something\nlike, `f <<< g <<< h`, we get `\\x -> f (g (h x))`. PureScript's syntax\nactually makes this pretty straightforward already, with some pretty clear\ndirection to these operators, but this is prelewd, so let's bung in some\nmore emojis.\n","title":"(üîô)","info":{"declType":"alias","alias":[["Control","Semigroupoid"],{"Right":{"Left":{"Ident":"compose"}}}],"fixity":{"associativity":"infixr","precedence":9}},"sourceSpan":{"start":[58,1],"name":"/Users/Tom/Git/purescript/premoji/src/Prelewd.purs","end":[58,22]}},{"children":[],"comments":"For people coming from Elm and most imperative languages, it probably seems\na bit more familiar to see composition the other way round. Don't worry: we\ngot your back, friends. At least for iOS, this arrow is labelled `SOON`, so\nthat's quite exciting!\n","title":"(üîú)","info":{"declType":"alias","alias":[["Control","Semigroupoid"],{"Right":{"Left":{"Ident":"composeFlipped"}}}],"fixity":{"associativity":"infixr","precedence":9}},"sourceSpan":{"start":[64,1],"name":"/Users/Tom/Git/purescript/premoji/src/Prelewd.purs","end":[64,29]}},{"children":[],"comments":"`$` is waaay less frightening than it looks at first. The idea is that you\ntake the result of everything on the left, and apply it to the result of\neverything on the right. So, `f x $ g x` is actually `(f x) (g x)`. That's\nall there is to it! With the exception of brackets/parentheses, this is a\nwill be the very last thing to evaluate, so you can make the sides as weird\nas you like. The gust of wind is to show the sides being \"blown apart\" to\nwork separately, before being recombined at the end!\n","title":"(üí®)","info":{"declType":"alias","alias":[["Data","Function"],{"Right":{"Left":{"Ident":"apply"}}}],"fixity":{"associativity":"infixr","precedence":0}},"sourceSpan":{"start":[73,1],"name":"/Users/Tom/Git/purescript/premoji/src/Prelewd.purs","end":[73,20]}},{"children":[],"comments":"It's quite a transformation. You'll see `~>` every now and then in types.\nFor example, `Array ~> Maybe`. Fear not: this expands to the more friendly,\n`type NaturalTransformation f g = forall a. f a -> g a`. In other words,\n`Array ~> Maybe` is a function that takes an array of *any* type, and turns\nit into a `Maybe` of *the same type*. In other words, your scary natural\ntransformations are just functions that change the functor _around_ a value\nwithout touching the value in the middle! Why is it a caterpillar, though?\nWell, when it becomes a butterfly, its outer shell changes a lot, but it's\nstill the same friendly personality inside üòå\n","title":"type (üêõ)","info":{"declType":"alias","alias":[["Data","NaturalTransformation"],{"Left":"NaturalTransformation"}],"fixity":{"associativity":"infixr","precedence":4}},"sourceSpan":{"start":[84,1],"name":"/Users/Tom/Git/purescript/premoji/src/Prelewd.purs","end":[84,41]}},{"children":[],"comments":"Semigroups aren't too scary. We have a type that lets us \"smoosh\" values\ntogether and get a new value of that type. The `<>` operator is pretty good\nand intuitive, but let's use the \"high five\": two values coming together to\ncombine. `[2] üôè [3] == [2, 3]`, `\"He\" üôè \"llo\"` == \"Hello\", etc.\n","title":"(üôè)","info":{"declType":"alias","alias":[["Data","Semigroup"],{"Right":{"Left":{"Ident":"append"}}}],"fixity":{"associativity":"infixr","precedence":5}},"sourceSpan":{"start":[90,1],"name":"/Users/Tom/Git/purescript/premoji/src/Prelewd.purs","end":[90,21]}},{"children":[],"comments":"The `<|>` operator gets a lot of publicity in parser libraries. When you go\nfor a rummage in the docs, you find phrases like \"monoidal applicative\",\nwhich don't help a lot. Basically, we're combining the behavior of two\nfunctor values of the same type. For some functors like `Array`, this is\njust the same as üôè. However, it's often for *fallbacks*: if your functor\nis a `Maybe`, `x <|> y <|> z <|> ...` will return the first `Just`, or\n`Nothing` if there aren't any.\n","title":"(üîó)","info":{"declType":"alias","alias":[["Control","Alt"],{"Right":{"Left":{"Ident":"alt"}}}],"fixity":{"associativity":"infixl","precedence":3}},"sourceSpan":{"start":[99,1],"name":"/Users/Tom/Git/purescript/premoji/src/Prelewd.purs","end":[99,18]}},{"children":[],"comments":"Once in a while, we all need to debug. A lot of programmers from imperative\nlanguages find real trouble with debugging, as they can't just bung in a\n`console.log` to see values. *Well*, what if I told you... you *can*! So,\nwe can cheat a little bit, and use some escape hatches in the `Debug`\npackage, including `traceShow`, which will log anything `Show`able. With\nthis function, we can show a value at any point, and return anything!\n","title":"investigate","info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Prim"],"Warn"],"constraintArgs":[{"tag":"TypeLevelString","contents":"Debug.Trace usage"}],"constraintData":null},{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Show"],"Show"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeVar","contents":"b"}]}]}]}]},null]},null]}},"sourceSpan":{"start":[107,1],"name":"/Users/Tom/Git/purescript/premoji/src/Prelewd.purs","end":[107,77]}},{"children":[],"comments":"For example, if we have `f x` and want to know what `x` is, we can write\n`x üîç f x`. This will return the same value as `f x`, but also print the\n`x` value (sneaky-like) to the console for us to look at.\n","title":"(üîç)","info":{"declType":"alias","alias":[["Prelewd"],{"Right":{"Left":{"Ident":"investigate"}}}],"fixity":{"associativity":"infixl","precedence":8}},"sourceSpan":{"start":[113,1],"name":"/Users/Tom/Git/purescript/premoji/src/Prelewd.purs","end":[113,26]}},{"children":[],"comments":"Be careful with this! It's a function never to be called. Anyway, since\nthere are no values of type `Void`, what would you even call it with?\n","title":"(üí£)","info":{"declType":"alias","alias":[["Data","Void"],{"Right":{"Left":{"Ident":"absurd"}}}],"fixity":{"associativity":"infix","precedence":9}},"sourceSpan":{"start":[117,1],"name":"/Users/Tom/Git/purescript/premoji/src/Prelewd.purs","end":[117,20]}},{"children":[],"comments":"Sometimes you need to tell the compiler that you know what you're doing,\neven though it might not be obvious. That's OK! Maybe you _know_ you have\na `Just` value: `fromJust üôà Just 2` will get you that 2 with no trouble!\nBeware, though: if you're wrong, PureScript won't save you from runtime\nerrors!\n","title":"(üôà)","info":{"declType":"alias","alias":[["Partial","Unsafe"],{"Right":{"Left":{"Ident":"unsafePartial"}}}],"fixity":{"associativity":"infix","precedence":1}},"sourceSpan":{"start":[124,1],"name":"/Users/Tom/Git/purescript/premoji/src/Prelewd.purs","end":[124,27]}},{"children":[],"comments":"Not only can we compose functions, but also functors! Maybe we want a list\nof `Maybe` values, or an `Aff` of a function. Whatever it is, we can write\nsome \"stacks\" with `Compose`.\n","title":"Compose","info":{"arguments":[["f",null],["g",null],["a",null]],"declType":"typeSynonym","type":{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"g"},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[129,1],"name":"/Users/Tom/Git/purescript/premoji/src/Prelewd.purs","end":[129,29]}},{"children":[],"comments":"Before: `forall a b. Tuple a b -> Tuple a (Array b)`.\nAfter: `forall a. Tuple a üêõ Tuple a üçî Array`.\nI'm not saying that you should do this, but it looked funny to write out. A\nstack of functors is like a stack of burger ingredients: do as you will.\n","title":"type (üçî)","info":{"declType":"alias","alias":[["Prelewd"],{"Left":"Compose"}],"fixity":{"associativity":"infixr","precedence":9}},"sourceSpan":{"start":[135,1],"name":"/Users/Tom/Git/purescript/premoji/src/Prelewd.purs","end":[135,27]}},{"children":[],"comments":"`Either` is defined as having two types. The constructors hold one each. So\nan `Either Int String` is *either* a `Left Int` or `Right String`. This has\nlots of uses, commonly with error-handling. You can use `Left` to carry any\nproblems, and `Right` to carry success. `Error üÜö Result`, if you like.\n","title":"type (üÜö)","info":{"declType":"alias","alias":[["Data","Either"],{"Left":"Either"}],"fixity":{"associativity":"infixl","precedence":3}},"sourceSpan":{"start":[141,1],"name":"/Users/Tom/Git/purescript/premoji/src/Prelewd.purs","end":[141,26]}},{"children":[],"comments":"`Pair` bundles two values of the same type together. Name a more famous\ntwin ... I'll wait.\n","title":"(‚ôä)","info":{"declType":"alias","alias":[["Data","Pair"],{"Right":{"Right":"Pair"}}],"fixity":{"associativity":"infixl","precedence":3}},"sourceSpan":{"start":[145,1],"name":"/Users/Tom/Git/purescript/premoji/src/Prelewd.purs","end":[145,19]}},{"children":[],"comments":"`Tuple` takes two arguments and bundles them together, always together,\nboth in the type and in the value.\n","title":"(üë´)","info":{"declType":"alias","alias":[["Data","Tuple"],{"Right":{"Right":"Tuple"}}],"fixity":{"associativity":"infixl","precedence":3}},"sourceSpan":{"start":[149,1],"name":"/Users/Tom/Git/purescript/premoji/src/Prelewd.purs","end":[149,20]}},{"children":[],"comments":null,"title":"type (üë´)","info":{"declType":"alias","alias":[["Data","Tuple"],{"Left":"Tuple"}],"fixity":{"associativity":"infixl","precedence":3}},"sourceSpan":{"start":[150,1],"name":"/Users/Tom/Git/purescript/premoji/src/Prelewd.purs","end":[150,25]}},{"children":[],"comments":"Make a value presentable! `Contravariant` functors are usually of the form\n`F a = a -> X`, where `X` is some fixed type like `Boolean`. When we do a\n`cmap`, we say, \"I don't have an `a`, but I _do_ have a way to _get to_\n`a` from `b`, and we can therefore have an `F b = b -> x`. In a sense, we\nneed a way to make the value look suitable. What better way to make oneself\npresentable than to put on some lipstick?\n","title":"(üíÑ)","info":{"declType":"alias","alias":[["Data","Functor","Contravariant"],{"Right":{"Left":{"Ident":"cmap"}}}],"fixity":{"associativity":"infixl","precedence":9}},"sourceSpan":{"start":[158,1],"name":"/Users/Tom/Git/purescript/premoji/src/Prelewd.purs","end":[158,19]}},{"children":[],"comments":"Equivalent things can be exchanged for each other. Like currency! This is\ncalled an isomorphism, see Data.Lens.Iso. Swap an `a` for a `b` anytime!\n","title":"(üí±)","info":{"declType":"alias","alias":[["Data","Lens","Iso"],{"Right":{"Left":{"Ident":"iso"}}}],"fixity":{"associativity":"infix","precedence":1}},"sourceSpan":{"start":[162,1],"name":"/Users/Tom/Git/purescript/premoji/src/Prelewd.purs","end":[162,17]}},{"children":[],"comments":null,"title":"type (üí±)","info":{"declType":"alias","alias":[["Data","Lens","Types"],{"Left":"Iso'"}],"fixity":{"associativity":"infix","precedence":1}},"sourceSpan":{"start":[163,1],"name":"/Users/Tom/Git/purescript/premoji/src/Prelewd.purs","end":[163,22]}}]}],"resolvedDependencies":{"purescript-proxy":"2.1.0","purescript-exceptions":"3.1.0","purescript-newtype":"2.0.0","purescript-maps":"3.5.1","purescript-control":"3.3.0","purescript-console":"3.0.0","purescript-either":"3.1.0","purescript-profunctor":"3.2.0","purescript-arrays":"4.1.2","purescript-maybe":"3.0.0","purescript-profunctor-lenses":"3.4.0","purescript-symbols":"3.0.0","purescript-type-equality":"2.1.0","purescript-exists":"3.0.0","purescript-distributive":"3.0.0","purescript-unfoldable":"3.0.0","purescript-invariant":"3.0.0","purescript-lazy":"3.0.0","purescript-monoid":"3.1.0","purescript-pairs":"5.0.0","purescript-foldable-traversable":"3.4.0","purescript-debug":"3.0.0","purescript-tailrec":"3.3.0","purescript-gen":"1.1.0","purescript-typelevel-prelude":"2.4.0","purescript-functors":"2.2.0","purescript-prelude":"3.1.0","purescript-st":"3.0.0","purescript-bifunctors":"3.0.0","purescript-nonempty":"4.0.0","purescript-contravariant":"3.1.0","purescript-unsafe-coerce":"3.0.0","purescript-integers":"3.1.0","purescript-eff":"3.1.0","purescript-const":"3.0.0","purescript-record":"0.2.0","purescript-transformers":"3.4.0","purescript-globals":"3.0.0","purescript-generics-rep":"5.2.0","purescript-math":"2.1.0","purescript-enums":"3.2.1","purescript-psci-support":"3.0.0","purescript-random":"3.0.0","purescript-tuples":"4.1.0","purescript-partial":"1.2.1","purescript-quickcheck":"4.4.0","purescript-strings":"3.3.1","purescript-identity":"3.1.0","purescript-sets":"3.0.0","purescript-lists":"4.9.0","purescript-functions":"3.0.0"},"version":"0.1.0","github":["i-am-tom","purescript-prelewd"],"versionTag":"v0.1.0","moduleMap":{"Data.BooleanAlgebra":"purescript-prelude","Data.Decide":"purescript-contravariant","Type.Data.Boolean":"purescript-typelevel-prelude","Data.Ring":"purescript-prelude","Control.Monad.Trans.Class":"purescript-transformers","Data.Functor.Product":"purescript-functors","Data.NonEmpty":"purescript-nonempty","Data.Pair":"purescript-pairs","Data.Char.Gen":"purescript-strings","Data.Traversable.Accum.Internal":"purescript-foldable-traversable","Data.Enum.Gen":"purescript-enums","Control.Comonad.Env":"purescript-transformers","Control.Comonad.Traced.Class":"purescript-transformers","Data.StrMap":"purescript-maps","Control.Monad.Eff.Unsafe":"purescript-eff","Data.Functor.Compose":"purescript-functors","Data.Int.Bits":"purescript-integers","Data.Record.Unsafe":"purescript-record","Data.Bifunctor.Flip":"purescript-bifunctors","Data.String.CodePoints":"purescript-strings","Data.Ord":"purescript-prelude","Control.Monad.Gen":"purescript-gen","Data.Monoid.Dual":"purescript-monoid","Control.Monad.Rec.Class":"purescript-tailrec","Data.StrMap.ST.Unsafe":"purescript-maps","Data.Lens":"purescript-profunctor-lenses","Data.Bitraversable":"purescript-foldable-traversable","Data.Profunctor.Costar":"purescript-profunctor","Data.Profunctor.Cowrap":"purescript-profunctor","Data.Boolean":"purescript-prelude","Data.Map":"purescript-maps","Control.Biapplicative":"purescript-bifunctors","Type.Proxy":"purescript-proxy","Data.Array.ST.Iterator":"purescript-arrays","Data.Lens.Prism.Maybe":"purescript-profunctor-lenses","Data.Bounded":"purescript-prelude","Control.Monad.State.Trans":"purescript-transformers","Data.TraversableWithIndex":"purescript-foldable-traversable","Data.Int":"purescript-integers","Data.Lens.Internal.Grating":"purescript-profunctor-lenses","Data.Profunctor.Cochoice":"purescript-profunctor","Data.StrMap.Gen":"purescript-maps","Data.Show":"purescript-prelude","Data.Bifunctor.Clown":"purescript-bifunctors","Control.Monad.Writer.Trans":"purescript-transformers","Data.Foldable":"purescript-foldable-traversable","Data.Divide":"purescript-contravariant","Control.Comonad.Store.Class":"purescript-transformers","Data.Enum":"purescript-enums","Control.Apply":"purescript-prelude","Data.Functor.Contravariant":"purescript-contravariant","Data.Tuple.Nested":"purescript-tuples","Data.Generic.Rep.Semigroup":"purescript-generics-rep","Test.QuickCheck.LCG":"purescript-quickcheck","Data.Lens.Lens.Product":"purescript-profunctor-lenses","Control.Monad":"purescript-prelude","Data.Lazy":"purescript-lazy","Data.Monoid":"purescript-monoid","Data.Profunctor.Closed":"purescript-profunctor","Control.Monad.Eff.Uncurried":"purescript-eff","Control.Monad.List.Trans":"purescript-transformers","Control.Monad.RWS":"purescript-transformers","Data.Maybe.First":"purescript-maybe","Control.Bind":"purescript-prelude","Data.Profunctor.Split":"purescript-profunctor","Data.Monoid.Additive":"purescript-monoid","Data.Symbol":"purescript-symbols","Data.Lens.Prism.Coproduct":"purescript-profunctor-lenses","Data.Map.Gen":"purescript-maps","Data.Lens.Lens":"purescript-profunctor-lenses","Data.String.Regex":"purescript-strings","Data.Profunctor.Join":"purescript-profunctor","Data.HeytingAlgebra":"purescript-prelude","Control.Alt":"purescript-control","Control.Monad.Maybe.Trans":"purescript-transformers","Control.Monad.Cont":"purescript-transformers","Data.Lens.Internal.Forget":"purescript-profunctor-lenses","Data.List.ZipList":"purescript-lists","Data.Functor.Coproduct.Nested":"purescript-functors","Data.Ord.Unsafe":"purescript-prelude","Data.Semigroup":"purescript-prelude","Data.Record":"purescript-record","Control.Monad.Reader":"purescript-transformers","Data.Const":"purescript-const","Data.Generic.Rep.Enum":"purescript-generics-rep","Data.Generic.Rep.Bounded":"purescript-generics-rep","Control.Monad.Eff":"purescript-eff","Control.Comonad.Traced.Trans":"purescript-transformers","Data.Lens.Indexed":"purescript-profunctor-lenses","Data.Array.ST.Partial":"purescript-arrays","Data.StrMap.Unsafe":"purescript-maps","Data.Generic.Rep.Show":"purescript-generics-rep","Data.Profunctor.Clown":"purescript-profunctor","Data.Lens.Zoom":"purescript-profunctor-lenses","Data.Lens.Iso.Newtype":"purescript-profunctor-lenses","Type.Data.Ordering":"purescript-typelevel-prelude","Data.Lens.Internal.Wander":"purescript-profunctor-lenses","Data.Tuple":"purescript-tuples","Data.Semigroup.Foldable":"purescript-foldable-traversable","Control.Biapply":"purescript-bifunctors","Data.Distributive":"purescript-distributive","Type.Equality":"purescript-type-equality","Control.Alternative":"purescript-control","Data.Lens.Lens.Tuple":"purescript-profunctor-lenses","Data.Semiring":"purescript-prelude","Data.StrMap.ST":"purescript-maps","Data.Exists":"purescript-exists","Data.Traversable.Accum":"purescript-foldable-traversable","Data.CommutativeRing":"purescript-prelude","Data.NaturalTransformation":"purescript-prelude","Data.Monoid.Conj":"purescript-monoid","Data.Functor.App":"purescript-functors","Data.Lens.Internal.Exchange":"purescript-profunctor-lenses","Data.Profunctor.Star":"purescript-profunctor","Data.Unfoldable":"purescript-unfoldable","Data.Profunctor.Wrap":"purescript-profunctor","Control.Monad.Eff.Random":"purescript-random","Control.Comonad.Store.Trans":"purescript-transformers","Control.Monad.ST":"purescript-st","Control.Monad.State.Class":"purescript-transformers","Data.Lens.Internal.Shop":"purescript-profunctor-lenses","Data.Lens.Internal.Tagged":"purescript-profunctor-lenses","Data.Lens.Record":"purescript-profunctor-lenses","Data.List.Types":"purescript-lists","Data.Functor":"purescript-prelude","Unsafe.Coerce":"purescript-unsafe-coerce","Control.Monad.Writer.Class":"purescript-transformers","Data.Generic.Rep.Ord":"purescript-generics-rep","Data.Lens.Grate":"purescript-profunctor-lenses","Data.Profunctor.Strong":"purescript-profunctor","Data.Lens.Internal.Market":"purescript-profunctor-lenses","Control.Monad.Except":"purescript-transformers","Data.List.Lazy.Types":"purescript-lists","Control.Category":"purescript-prelude","Test.QuickCheck.Arbitrary":"purescript-quickcheck","Data.Lens.Common":"purescript-profunctor-lenses","Data.Lens.Getter":"purescript-profunctor-lenses","Control.Monad.Gen.Common":"purescript-gen","Control.Monad.RWS.Trans":"purescript-transformers","Test.QuickCheck.Data.AlphaNumString":"purescript-quickcheck","Control.Monad.Cont.Trans":"purescript-transformers","Data.Maybe":"purescript-maybe","Type.Row":"purescript-typelevel-prelude","Data.String.Regex.Unsafe":"purescript-strings","Data.Set":"purescript-sets","Data.Profunctor":"purescript-profunctor","Control.Comonad":"purescript-control","Data.Function":"purescript-prelude","Data.List":"purescript-lists","Data.Lens.Traversal":"purescript-profunctor-lenses","Data.Field":"purescript-prelude","Data.List.Lazy":"purescript-lists","Data.Generic.Rep.Eq":"purescript-generics-rep","Data.EuclideanRing":"purescript-prelude","Data.Functor.Invariant":"purescript-invariant","Control.Comonad.Traced":"purescript-transformers","Global.Unsafe":"purescript-globals","Data.Comparison":"purescript-contravariant","Data.String.Unsafe":"purescript-strings","Prelude":"purescript-prelude","Data.Predicate":"purescript-contravariant","Partial.Unsafe":"purescript-partial","Data.Array":"purescript-arrays","Data.Bifunctor.Product":"purescript-bifunctors","Control.Extend":"purescript-control","Control.Lazy":"purescript-control","Data.Function.Uncurried":"purescript-functions","Control.Monad.Reader.Trans":"purescript-transformers","Data.Functor.Product.Nested":"purescript-functors","Data.Lens.Types":"purescript-profunctor-lenses","Control.Comonad.Env.Class":"purescript-transformers","Data.Eq":"purescript-prelude","Data.Either.Nested":"purescript-either","Data.Newtype":"purescript-newtype","Control.Monad.Eff.Console":"purescript-console","Data.Semigroup.Traversable":"purescript-foldable-traversable","Data.Bifunctor":"purescript-bifunctors","Data.Monoid.Disj":"purescript-monoid","Control.Monad.Eff.Exception":"purescript-exceptions","Control.Monad.Gen.Class":"purescript-gen","Data.Array.Partial":"purescript-arrays","Data.String.CaseInsensitive":"purescript-strings","Data.Lens.Index":"purescript-profunctor-lenses","Data.Lens.Internal.Re":"purescript-profunctor-lenses","Control.MonadPlus":"purescript-control","Data.Lens.Lens.Void":"purescript-profunctor-lenses","Data.Void":"purescript-prelude","Control.MonadZero":"purescript-control","Data.Lens.Internal.Indexed":"purescript-profunctor-lenses","Data.Profunctor.Costrong":"purescript-profunctor","Control.Comonad.Store":"purescript-transformers","Control.Monad.Except.Trans":"purescript-transformers","Data.Bifunctor.Joker":"purescript-bifunctors","Data.FunctorWithIndex":"purescript-foldable-traversable","Data.Divisible":"purescript-contravariant","Data.Lens.Fold":"purescript-profunctor-lenses","Data.Lens.Setter":"purescript-profunctor-lenses","Data.DivisionRing":"purescript-prelude","Data.Bifunctor.Wrap":"purescript-bifunctors","Data.Lens.Prism.Either":"purescript-profunctor-lenses","PSCI.Support":"purescript-psci-support","Data.Equivalence":"purescript-contravariant","Data.Maybe.Last":"purescript-maybe","Data.Unit":"purescript-prelude","Data.List.NonEmpty":"purescript-lists","Data.List.Lazy.NonEmpty":"purescript-lists","Data.Ordering":"purescript-prelude","Data.Lens.Lens.Unit":"purescript-profunctor-lenses","Data.Functor.Coproduct":"purescript-functors","Control.Monad.Cont.Class":"purescript-transformers","Data.Identity":"purescript-identity","Data.Lens.Fold.Partial":"purescript-profunctor-lenses","Math":"purescript-math","Control.Comonad.Trans.Class":"purescript-transformers","Data.String":"purescript-strings","Control.Plus":"purescript-control","Data.Profunctor.Joker":"purescript-profunctor","Control.Monad.Eff.Class":"purescript-eff","Test.QuickCheck":"purescript-quickcheck","Type.Row.Effect.Equality":"purescript-type-equality","Partial":"purescript-partial","Control.Comonad.Env.Trans":"purescript-transformers","Global":"purescript-globals","Control.Monad.Reader.Class":"purescript-transformers","Data.Decidable":"purescript-contravariant","Data.Monoid.Multiplicative":"purescript-monoid","Type.Data.Symbol":"purescript-typelevel-prelude","Data.Array.ST":"purescript-arrays","Control.Monad.Error.Class":"purescript-transformers","Data.Generic.Rep.Monoid":"purescript-generics-rep","Control.Semigroupoid":"purescript-prelude","Debug.Trace":"purescript-debug","Data.Monoid.Alternate":"purescript-monoid","Data.Char":"purescript-strings","Data.Generic.Rep":"purescript-generics-rep","Data.Bifunctor.Join":"purescript-bifunctors","Data.Lens.Internal.Zipping":"purescript-profunctor-lenses","Control.Monad.Eff.Exception.Unsafe":"purescript-exceptions","Data.Bifoldable":"purescript-foldable-traversable","Data.Monoid.Endo":"purescript-monoid","Control.Monad.State":"purescript-transformers","Data.List.Partial":"purescript-lists","Data.Lens.Prism":"purescript-profunctor-lenses","Data.String.Regex.Flags":"purescript-strings","Data.Either":"purescript-either","Type.Prelude":"purescript-typelevel-prelude","Control.Applicative":"purescript-prelude","Data.Lens.Internal.Focusing":"purescript-profunctor-lenses","Data.Lens.Iso":"purescript-profunctor-lenses","Data.FoldableWithIndex":"purescript-foldable-traversable","Data.Op":"purescript-contravariant","Test.QuickCheck.Gen":"purescript-quickcheck","Data.Lens.At":"purescript-profunctor-lenses","Control.Monad.Writer":"purescript-transformers","Data.Profunctor.Choice":"purescript-profunctor","Data.Traversable":"purescript-foldable-traversable","Data.String.Gen":"purescript-strings"},"compilerVersion":"0.11.4"}