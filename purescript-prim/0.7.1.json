{"uploader":"hdgarrood","packageMeta":{"repository":{"url":"git://github.com/hdgarrood/purescript-prim","type":"git"},"name":"purescript-prim"},"modules":[{"reExports":[],"name":"Prim.Cheat","comments":"The Prim module is embedded in the PureScript compiler, in order to\nprovide compiler support for certain types &mdash; for example, value\nliterals, or syntax sugar.\n","declarations":[{"children":[],"comments":"A JavaScript function, which takes values of the first type, and\nreturns values of the second.\n\nThe type constructor `(->)` is syntactic sugar for this type constructor.\nIt is recommended to use `(->)` rather than `Function`, where possible.\n\nThat is, prefer this:\n\n* `f :: Number -> Number`\n\nto either of these:\n\n* `f :: Function Number Number`\n* `f :: (->) Number Number`\n","title":"Function","fixity":null,"info":{"kind":{"tag":"FunKind","contents":[{"tag":"Star","contents":[]},{"tag":"FunKind","contents":[{"tag":"Star","contents":[]},{"tag":"Star","contents":[]}]}]},"declType":"externData"},"sourceSpan":{"start":[22,1],"name":"src/Prim.purs","end":[28,1]}},{"children":[],"comments":"A JavaScript Array.\n\nConstruct values using literals:\n* `x = [1,2,3,4,5] :: Array Int`\n","title":"Array","fixity":null,"info":{"kind":{"tag":"FunKind","contents":[{"tag":"Star","contents":[]},{"tag":"Star","contents":[]}]},"declType":"externData"},"sourceSpan":{"start":[28,1],"name":"src/Prim.purs","end":[40,1]}},{"children":[],"comments":"A JavaScript Object.\n\nThe type signature here means that the `Object` type constructor takes\na row of concrete types. For example:\n\n* `type Person = Object (name :: String, age :: Number)`\n\nThe syntactic sugar with curly braces `{ }` is generally preferred:\n\n* `type Person = { name :: String, age :: Number }`\n","title":"Object","fixity":null,"info":{"kind":{"tag":"FunKind","contents":[{"tag":"Row","contents":{"tag":"Star","contents":[]}},{"tag":"Star","contents":[]}]},"declType":"externData"},"sourceSpan":{"start":[40,1],"name":"src/Prim.purs","end":[47,1]}},{"children":[],"comments":"A JavaScript 32-bit signed integer. See the purescript-integers package\nfor more details.\n\nConstruct values of this type with literals:\n* `x = 23 :: Int`\n","title":"Int","fixity":null,"info":{"kind":{"tag":"Star","contents":[]},"declType":"externData"},"sourceSpan":{"start":[47,1],"name":"src/Prim.purs","end":[54,1]}},{"children":[],"comments":"A JavaScript Number: double precision floating point (IEEE 754).\n\nConstruct values of this type with literals:\n* `y = 35.23 :: Number`\n* `z = 1.224e6 :: Number`\n","title":"Number","fixity":null,"info":{"kind":{"tag":"Star","contents":[]},"declType":"externData"},"sourceSpan":{"start":[54,1],"name":"src/Prim.purs","end":[61,1]}},{"children":[],"comments":"A single character. The JavaScript representation is a normal String,\nwhich is guaranteed to contain one character by use of the type system.\n\nConstruct values of this type with literals, using single quotes `'`:\n* `x = '0' :: Char`\n","title":"Char","fixity":null,"info":{"kind":{"tag":"Star","contents":[]},"declType":"externData"},"sourceSpan":{"start":[61,1],"name":"src/Prim.purs","end":[69,1]}},{"children":[],"comments":"A JavaScript String.\n\nConstruct values of this type with literals, using double quotes `\"`:\n* `x = \"hello, world\" :: String`\n\nMulti-line string literals are also supported with triple quotes (`\"\"\"`).\n","title":"String","fixity":null,"info":{"kind":{"tag":"Star","contents":[]},"declType":"externData"},"sourceSpan":{"start":[69,1],"name":"src/Prim.purs","end":[74,1]}},{"children":[],"comments":"A JavaScript Boolean value.\n\nConstruct values of this type with the literals `true` and `false`.\n","title":"Boolean","fixity":null,"info":{"kind":{"tag":"Star","contents":[]},"declType":"externData"},"sourceSpan":{"start":[74,1],"name":"src/Prim.purs","end":[74,32]}}]}],"resolvedDependencies":{},"bookmarks":[{"package":null,"item":["Prim.Cheat","Function"]},{"package":null,"item":["Prim.Cheat","Array"]},{"package":null,"item":["Prim.Cheat","Object"]},{"package":null,"item":["Prim.Cheat","Int"]},{"package":null,"item":["Prim.Cheat","Number"]},{"package":null,"item":["Prim.Cheat","Char"]},{"package":null,"item":["Prim.Cheat","String"]},{"package":null,"item":["Prim.Cheat","Boolean"]}],"version":"0.7.1","github":["hdgarrood","purescript-prim"],"versionTag":"v0.7.1","compilerVersion":"0.8.0.0"}