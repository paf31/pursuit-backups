{"uploader":"sharkdp","packageMeta":{"homepage":"https://github.com/sharkdp/purescript-quantities","repository":{"url":"git://github.com/sharkdp/purescript-quantities.git","type":"git"},"ignore":["**/.*","node_modules","bower_components","output"],"devDependencies":{"purescript-test-unit":"^7.0.0","purescript-psci-support":"^1.0.0"},"authors":[{"email":"mail@david-peter.de","name":"David Peter"}],"dependencies":{"purescript-monoid":"^1.0.0","purescript-nonempty":"^1.0.0","purescript-lists":"^1.0.0"},"name":"purescript-quantities","license":["MIT"],"description":"Physical quantities and units"},"modules":[{"reExports":[],"name":"Data.Quantity","comments":null,"declarations":[{"children":[{"comments":null,"title":"eqQuantity","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Eq"],"Eq"]},{"tag":"TypeConstructor","contents":[["Data","Quantity"],"Quantity"]}]}},"sourceSpan":{"start":[58,1],"name":"src/Data/Quantity.purs","end":[62,26]}},{"comments":null,"title":"showQuantity","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Show"],"Show"]},{"tag":"TypeConstructor","contents":[["Data","Quantity"],"Quantity"]}]}},"sourceSpan":{"start":[64,1],"name":"src/Data/Quantity.purs","end":[65,55]}}],"comments":"Representation of a physical quantity as a (product of a) numerical value\nand a physical unit.\n","title":"Quantity","info":{"declType":"data","dataDeclType":"data","typeArguments":[]},"sourceSpan":{"start":[43,1],"name":"src/Data/Quantity.purs","end":[43,44]}},{"children":[],"comments":"Construct a physical quantity from a numerical value and the physical\nunit.\n","title":"quantity","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}]},{"tag":"TypeConstructor","contents":[["Data","Quantity"],"Quantity"]}]}]}},"sourceSpan":{"start":[50,1],"name":"src/Data/Quantity.purs","end":[50,44]}},{"children":[],"comments":null,"title":"(.*)","info":{"declType":"alias","alias":[["Data","Quantity"],{"Right":{"Left":{"Ident":"quantity"}}}],"fixity":{"associativity":"infix","precedence":5}},"sourceSpan":{"start":[56,1],"name":"src/Data/Quantity.purs","end":[56,23]}},{"children":[],"comments":"The unit of a physical quantity.\n","title":"derivedUnit","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Quantity"],"Quantity"]}]},{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}]}},"sourceSpan":{"start":[73,1],"name":"src/Data/Quantity.purs","end":[73,38]}},{"children":[],"comments":"Convert a quantity to its standard representation.\n","title":"toStandard","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Quantity"],"Quantity"]}]},{"tag":"TypeConstructor","contents":[["Data","Quantity"],"Quantity"]}]}},"sourceSpan":{"start":[77,1],"name":"src/Data/Quantity.purs","end":[77,34]}},{"children":[],"comments":"Check whether two quantities have matching units (or can be converted\nto the same representation) and test if the numerical are approximately\nequal.\n","title":"approximatelyEqual","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Quantity"],"Quantity"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Quantity"],"Quantity"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}]}]}},"sourceSpan":{"start":[85,1],"name":"src/Data/Quantity.purs","end":[85,61]}},{"children":[{"comments":null,"title":"eqUnificationError","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Eq"],"Eq"]},{"tag":"TypeConstructor","contents":[["Data","Quantity"],"UnificationError"]}]}},"sourceSpan":{"start":[99,1],"name":"src/Data/Quantity.purs","end":[99,58]}},{"comments":null,"title":"showUnificationError","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Show"],"Show"]},{"tag":"TypeConstructor","contents":[["Data","Quantity"],"UnificationError"]}]}},"sourceSpan":{"start":[101,1],"name":"src/Data/Quantity.purs","end":[105,1]}}],"comments":"A unit conversion error that appears if two given units cannot be\nconverted into each other.\n","title":"UnificationError","info":{"declType":"data","dataDeclType":"data","typeArguments":[]},"sourceSpan":{"start":[97,1],"name":"src/Data/Quantity.purs","end":[97,65]}},{"children":[],"comments":"Textual representation of a unit conversion error.\n","title":"errorMessage","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Quantity"],"UnificationError"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}},"sourceSpan":{"start":[106,1],"name":"src/Data/Quantity.purs","end":[106,42]}},{"children":[],"comments":"Create a scalar (i.e. dimensionless) quantity from a number.\n","title":"scalar","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]},{"tag":"TypeConstructor","contents":[["Data","Quantity"],"Quantity"]}]}},"sourceSpan":{"start":[111,1],"name":"src/Data/Quantity.purs","end":[111,28]}},{"children":[],"comments":"Attempt to convert a physical quantity to a given target unit. Returns a\n`UnificationError` if the conversion fails.\n","title":"convert","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Quantity"],"Quantity"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Either"],"Either"]},{"tag":"TypeConstructor","contents":[["Data","Quantity"],"UnificationError"]}]},{"tag":"TypeConstructor","contents":[["Data","Quantity"],"Quantity"]}]}]}]}},"sourceSpan":{"start":[116,1],"name":"src/Data/Quantity.purs","end":[116,69]}},{"children":[],"comments":"Flipped version of `convert`.\n","title":"convertTo","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Quantity"],"Quantity"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Either"],"Either"]},{"tag":"TypeConstructor","contents":[["Data","Quantity"],"UnificationError"]}]},{"tag":"TypeConstructor","contents":[["Data","Quantity"],"Quantity"]}]}]}]}},"sourceSpan":{"start":[130,1],"name":"src/Data/Quantity.purs","end":[130,71]}},{"children":[],"comments":"Get the numerical value of a physical quantity in a given unit. Returns a\n`UnificationError` if the conversion fails.\n","title":"asValueIn","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Quantity"],"Quantity"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Either"],"Either"]},{"tag":"TypeConstructor","contents":[["Data","Quantity"],"UnificationError"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]}]}]}},"sourceSpan":{"start":[135,1],"name":"src/Data/Quantity.purs","end":[135,69]}},{"children":[],"comments":"Attempt to add two quantities. If the units can not be unified, an error\nis returned.\n","title":"qAdd","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Quantity"],"Quantity"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Quantity"],"Quantity"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Either"],"Either"]},{"tag":"TypeConstructor","contents":[["Data","Quantity"],"UnificationError"]}]},{"tag":"TypeConstructor","contents":[["Data","Quantity"],"Quantity"]}]}]}]}},"sourceSpan":{"start":[140,1],"name":"src/Data/Quantity.purs","end":[140,63]}},{"children":[],"comments":null,"title":"(⊕)","info":{"declType":"alias","alias":[["Data","Quantity"],{"Right":{"Left":{"Ident":"qAdd"}}}],"fixity":{"associativity":"infixl","precedence":3}},"sourceSpan":{"start":[146,1],"name":"src/Data/Quantity.purs","end":[146,19]}},{"children":[],"comments":"Attempt to subtract two quantities. If the units can not be unified, an\nerror is returned.\n","title":"qSubtract","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Quantity"],"Quantity"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Quantity"],"Quantity"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Either"],"Either"]},{"tag":"TypeConstructor","contents":[["Data","Quantity"],"UnificationError"]}]},{"tag":"TypeConstructor","contents":[["Data","Quantity"],"Quantity"]}]}]}]}},"sourceSpan":{"start":[150,1],"name":"src/Data/Quantity.purs","end":[150,68]}},{"children":[],"comments":null,"title":"(⊖)","info":{"declType":"alias","alias":[["Data","Quantity"],{"Right":{"Left":{"Ident":"qSubtract"}}}],"fixity":{"associativity":"infixl","precedence":3}},"sourceSpan":{"start":[153,1],"name":"src/Data/Quantity.purs","end":[153,24]}},{"children":[],"comments":"Multiply two quantities.\n","title":"qMultiply","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Quantity"],"Quantity"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Quantity"],"Quantity"]}]},{"tag":"TypeConstructor","contents":[["Data","Quantity"],"Quantity"]}]}]}},"sourceSpan":{"start":[156,1],"name":"src/Data/Quantity.purs","end":[156,44]}},{"children":[],"comments":null,"title":"(⊗)","info":{"declType":"alias","alias":[["Data","Quantity"],{"Right":{"Left":{"Ident":"qMultiply"}}}],"fixity":{"associativity":"infixl","precedence":4}},"sourceSpan":{"start":[159,1],"name":"src/Data/Quantity.purs","end":[159,24]}},{"children":[],"comments":"Divide two quantities.\n","title":"qDivide","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Quantity"],"Quantity"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Quantity"],"Quantity"]}]},{"tag":"TypeConstructor","contents":[["Data","Quantity"],"Quantity"]}]}]}},"sourceSpan":{"start":[162,1],"name":"src/Data/Quantity.purs","end":[162,42]}},{"children":[],"comments":null,"title":"(⊘)","info":{"declType":"alias","alias":[["Data","Quantity"],{"Right":{"Left":{"Ident":"qDivide"}}}],"fixity":{"associativity":"infixl","precedence":4}},"sourceSpan":{"start":[165,1],"name":"src/Data/Quantity.purs","end":[165,22]}},{"children":[],"comments":"Raise a quantity to a given power.\n","title":"pow","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Quantity"],"Quantity"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]},{"tag":"TypeConstructor","contents":[["Data","Quantity"],"Quantity"]}]}]}},"sourceSpan":{"start":[168,1],"name":"src/Data/Quantity.purs","end":[168,36]}},{"children":[],"comments":"The absolute value of a quantity.\n","title":"abs","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Quantity"],"Quantity"]}]},{"tag":"TypeConstructor","contents":[["Data","Quantity"],"Quantity"]}]}},"sourceSpan":{"start":[172,1],"name":"src/Data/Quantity.purs","end":[172,27]}},{"children":[],"comments":"The square root of a quantity.\n","title":"sqrt","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Quantity"],"Quantity"]}]},{"tag":"TypeConstructor","contents":[["Data","Quantity"],"Quantity"]}]}},"sourceSpan":{"start":[176,1],"name":"src/Data/Quantity.purs","end":[176,28]}}]},{"reExports":[],"name":"Data.Units","comments":null,"declarations":[{"children":[{"comments":null,"title":"eqDerivedUnit","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Eq"],"Eq"]},{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}]}},"sourceSpan":{"start":[146,1],"name":"src/Data/Units.purs","end":[152,43]}},{"comments":null,"title":"showDerivedUnit","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Show"],"Show"]},{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}]}},"sourceSpan":{"start":[154,1],"name":"src/Data/Units.purs","end":[166,75]}},{"comments":null,"title":"semigroupDerivedUnit","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Semigroup"],"Semigroup"]},{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}]}},"sourceSpan":{"start":[168,1],"name":"src/Data/Units.purs","end":[170,48]}},{"comments":null,"title":"monoidDerivedUnit","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Monoid"],"Monoid"]},{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}]}},"sourceSpan":{"start":[172,1],"name":"src/Data/Units.purs","end":[173,17]}}],"comments":"A `DerivedUnit` is a product of `BaseUnits`, raised to arbitrary powers.\nThe `Semigroup`/`Monoid` instance implements multiplication of units. A\n`DerivedUnit` also has a `Prefix` value, which represents a numerical\nprefix as a power of ten.\n","title":"DerivedUnit","info":{"declType":"data","dataDeclType":"data","typeArguments":[]},"sourceSpan":{"start":[117,1],"name":"src/Data/Units.purs","end":[117,66]}},{"children":[],"comments":"Helper function to create a standard unit.\n","title":"makeStandard","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}]}]}},"sourceSpan":{"start":[176,1],"name":"src/Data/Units.purs","end":[176,46]}},{"children":[],"comments":"Helper function to create a non-standard unit.\n","title":"makeNonStandard","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Units"],"ConversionFactor"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}]},{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}]}]}]}]}},"sourceSpan":{"start":[181,1],"name":"src/Data/Units.purs","end":[182,33]}},{"children":[],"comments":"Convert all contained units to standard units and return the global\nconversion factor.\n","title":"toStandardUnit","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Tuple"],"Tuple"]},{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}]},{"tag":"TypeConstructor","contents":[["Data","Units"],"ConversionFactor"]}]}]}},"sourceSpan":{"start":[188,1],"name":"src/Data/Units.purs","end":[188,67]}},{"children":[],"comments":"A `String` representation of a `DerivedUnit`.\n","title":"toString","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}},"sourceSpan":{"start":[222,1],"name":"src/Data/Units.purs","end":[222,33]}},{"children":[],"comments":"Raise a unit to the given power.\n","title":"power","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]},{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}]}]}},"sourceSpan":{"start":[231,1],"name":"src/Data/Units.purs","end":[231,44]}},{"children":[],"comments":null,"title":"(.^)","info":{"declType":"alias","alias":[["Data","Units"],{"Right":{"Left":{"Ident":"power"}}}],"fixity":{"associativity":"infixl","precedence":9}},"sourceSpan":{"start":[236,1],"name":"src/Data/Units.purs","end":[236,21]}},{"children":[],"comments":"Divide two units.\n","title":"divideUnits","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}]},{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}]}]}},"sourceSpan":{"start":[239,1],"name":"src/Data/Units.purs","end":[239,55]}},{"children":[],"comments":null,"title":"(./)","info":{"declType":"alias","alias":[["Data","Units"],{"Right":{"Left":{"Ident":"divideUnits"}}}],"fixity":{"associativity":"infixl","precedence":6}},"sourceSpan":{"start":[242,1],"name":"src/Data/Units.purs","end":[242,27]}},{"children":[],"comments":"A `DerivedUnit` corresponding to `1`, i.e. the unit of scalar\n(or dimensionless) values.\n","title":"unity","info":{"declType":"value","type":{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}},"sourceSpan":{"start":[246,1],"name":"src/Data/Units.purs","end":[246,21]}},{"children":[],"comments":null,"title":"atto","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}]},{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}]}},"sourceSpan":{"start":[256,1],"name":"src/Data/Units.purs","end":[256,34]}},{"children":[],"comments":null,"title":"femto","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}]},{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}]}},"sourceSpan":{"start":[259,1],"name":"src/Data/Units.purs","end":[259,35]}},{"children":[],"comments":null,"title":"pico","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}]},{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}]}},"sourceSpan":{"start":[262,1],"name":"src/Data/Units.purs","end":[262,34]}},{"children":[],"comments":null,"title":"nano","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}]},{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}]}},"sourceSpan":{"start":[265,1],"name":"src/Data/Units.purs","end":[265,34]}},{"children":[],"comments":null,"title":"micro","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}]},{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}]}},"sourceSpan":{"start":[268,1],"name":"src/Data/Units.purs","end":[268,35]}},{"children":[],"comments":null,"title":"milli","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}]},{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}]}},"sourceSpan":{"start":[271,1],"name":"src/Data/Units.purs","end":[271,35]}},{"children":[],"comments":null,"title":"centi","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}]},{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}]}},"sourceSpan":{"start":[274,1],"name":"src/Data/Units.purs","end":[274,35]}},{"children":[],"comments":null,"title":"deci","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}]},{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}]}},"sourceSpan":{"start":[277,1],"name":"src/Data/Units.purs","end":[277,34]}},{"children":[],"comments":null,"title":"hecto","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}]},{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}]}},"sourceSpan":{"start":[280,1],"name":"src/Data/Units.purs","end":[280,35]}},{"children":[],"comments":null,"title":"kilo","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}]},{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}]}},"sourceSpan":{"start":[283,1],"name":"src/Data/Units.purs","end":[283,34]}},{"children":[],"comments":null,"title":"mega","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}]},{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}]}},"sourceSpan":{"start":[286,1],"name":"src/Data/Units.purs","end":[286,34]}},{"children":[],"comments":null,"title":"giga","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}]},{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}]}},"sourceSpan":{"start":[289,1],"name":"src/Data/Units.purs","end":[289,34]}},{"children":[],"comments":null,"title":"tera","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}]},{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}]}},"sourceSpan":{"start":[292,1],"name":"src/Data/Units.purs","end":[292,34]}},{"children":[],"comments":null,"title":"peta","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}]},{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}]}},"sourceSpan":{"start":[295,1],"name":"src/Data/Units.purs","end":[295,34]}},{"children":[],"comments":null,"title":"exa","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}]},{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}]}},"sourceSpan":{"start":[298,1],"name":"src/Data/Units.purs","end":[298,33]}}]},{"reExports":[],"name":"Data.Units.Bit","comments":null,"declarations":[{"children":[],"comments":"Unit of digital information.\n","title":"bit","info":{"declType":"value","type":{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}},"sourceSpan":{"start":[6,1],"name":"src/Data/Units/Bit.purs","end":[6,19]}},{"children":[],"comments":"Unit of digital information, *1byte = 8bit*.\n","title":"byte","info":{"declType":"value","type":{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}},"sourceSpan":{"start":[10,1],"name":"src/Data/Units/Bit.purs","end":[10,20]}}]},{"reExports":[],"name":"Data.Units.Imperial","comments":"A collection units of the imperial system.\n","declarations":[{"children":[],"comments":"Unit of length, *1in = 0.0254m*.\n","title":"inch","info":{"declType":"value","type":{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}},"sourceSpan":{"start":[10,1],"name":"src/Data/Units/Imperial.purs","end":[10,20]}},{"children":[],"comments":"Unit of length, *1ft = 0.3048m*.\n","title":"foot","info":{"declType":"value","type":{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}},"sourceSpan":{"start":[14,1],"name":"src/Data/Units/Imperial.purs","end":[14,20]}},{"children":[],"comments":"Unit of length, *1yd = 0.9144m*.\n","title":"yard","info":{"declType":"value","type":{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}},"sourceSpan":{"start":[18,1],"name":"src/Data/Units/Imperial.purs","end":[18,20]}},{"children":[],"comments":"Unit of length, *1mi = 1609.344m*.\n","title":"mile","info":{"declType":"value","type":{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}},"sourceSpan":{"start":[22,1],"name":"src/Data/Units/Imperial.purs","end":[22,20]}},{"children":[],"comments":"Unit of mass, *1oz = 28.35g*.\n","title":"ounce","info":{"declType":"value","type":{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}},"sourceSpan":{"start":[26,1],"name":"src/Data/Units/Imperial.purs","end":[26,21]}},{"children":[],"comments":"Unit of mass, *1lb = 453.6g*.\n","title":"pound","info":{"declType":"value","type":{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}},"sourceSpan":{"start":[30,1],"name":"src/Data/Units/Imperial.purs","end":[30,21]}}]},{"reExports":[],"name":"Data.Units.SI","comments":"A collection of standardized SI units.\n","declarations":[{"children":[],"comments":"Standard unit of lenght.\n","title":"meter","info":{"declType":"value","type":{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}},"sourceSpan":{"start":[7,1],"name":"src/Data/Units/SI.purs","end":[7,21]}},{"children":[],"comments":"Standard unit of mass.\n","title":"gram","info":{"declType":"value","type":{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}},"sourceSpan":{"start":[11,1],"name":"src/Data/Units/SI.purs","end":[11,20]}},{"children":[],"comments":"Standard unit of time.\n","title":"second","info":{"declType":"value","type":{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}},"sourceSpan":{"start":[15,1],"name":"src/Data/Units/SI.purs","end":[15,22]}}]},{"reExports":[],"name":"Data.Units.SI.Derived","comments":"A collection of units that are derived from SI units.\n","declarations":[{"children":[],"comments":"Unit for frequency, *1 Hz = 1 / s*.\n","title":"hertz","info":{"declType":"value","type":{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}},"sourceSpan":{"start":[10,1],"name":"src/Data/Units/SI/Derived.purs","end":[10,21]}},{"children":[],"comments":"'Dimensionless' unit for angles *1 rad = 1m / 1m*.\n","title":"radian","info":{"declType":"value","type":{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}},"sourceSpan":{"start":[14,1],"name":"src/Data/Units/SI/Derived.purs","end":[14,22]}},{"children":[],"comments":"'Dimensionless' unit for solid angles *1 sr = 1m² / 1m²*.\n","title":"steradian","info":{"declType":"value","type":{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}},"sourceSpan":{"start":[18,1],"name":"src/Data/Units/SI/Derived.purs","end":[18,25]}},{"children":[],"comments":"Unit for force, *1N = 1kg⋅m/s²*.\n","title":"newton","info":{"declType":"value","type":{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}},"sourceSpan":{"start":[22,1],"name":"src/Data/Units/SI/Derived.purs","end":[22,22]}},{"children":[],"comments":"Unit for energy, *1J = 1N·m*.\n","title":"joule","info":{"declType":"value","type":{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}},"sourceSpan":{"start":[26,1],"name":"src/Data/Units/SI/Derived.purs","end":[26,21]}},{"children":[],"comments":"Unit for power, *1W = 1J/s*.\n","title":"watt","info":{"declType":"value","type":{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}},"sourceSpan":{"start":[30,1],"name":"src/Data/Units/SI/Derived.purs","end":[30,20]}}]},{"reExports":[],"name":"Data.Units.Time","comments":"A collection of units for time durations.\n","declarations":[{"children":[],"comments":"Unit of time, *1min = 60sec*.\n","title":"minute","info":{"declType":"value","type":{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}},"sourceSpan":{"start":[10,1],"name":"src/Data/Units/Time.purs","end":[10,22]}},{"children":[],"comments":"Unit of time, *1hour = 60min*.\n","title":"hour","info":{"declType":"value","type":{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}},"sourceSpan":{"start":[14,1],"name":"src/Data/Units/Time.purs","end":[14,20]}},{"children":[],"comments":"Unit of time, *1day = 24hour*.\n","title":"day","info":{"declType":"value","type":{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}},"sourceSpan":{"start":[18,1],"name":"src/Data/Units/Time.purs","end":[18,19]}},{"children":[],"comments":"Unit of time, *1week = 7days*.\n","title":"week","info":{"declType":"value","type":{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}},"sourceSpan":{"start":[22,1],"name":"src/Data/Units/Time.purs","end":[22,20]}}]},{"reExports":[{"moduleName":["Data","Quantity"],"declarations":[{"children":[{"comments":null,"title":"eqUnificationError","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Eq"],"Eq"]},{"tag":"TypeConstructor","contents":[["Data","Quantity"],"UnificationError"]}]}},"sourceSpan":{"start":[99,1],"name":"src/Data/Quantity.purs","end":[99,58]}},{"comments":null,"title":"showUnificationError","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Show"],"Show"]},{"tag":"TypeConstructor","contents":[["Data","Quantity"],"UnificationError"]}]}},"sourceSpan":{"start":[101,1],"name":"src/Data/Quantity.purs","end":[105,1]}}],"comments":"A unit conversion error that appears if two given units cannot be\nconverted into each other.\n","title":"UnificationError","info":{"declType":"data","dataDeclType":"data","typeArguments":[]},"sourceSpan":{"start":[97,1],"name":"src/Data/Quantity.purs","end":[97,65]}},{"children":[{"comments":null,"title":"eqQuantity","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Eq"],"Eq"]},{"tag":"TypeConstructor","contents":[["Data","Quantity"],"Quantity"]}]}},"sourceSpan":{"start":[58,1],"name":"src/Data/Quantity.purs","end":[62,26]}},{"comments":null,"title":"showQuantity","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Show"],"Show"]},{"tag":"TypeConstructor","contents":[["Data","Quantity"],"Quantity"]}]}},"sourceSpan":{"start":[64,1],"name":"src/Data/Quantity.purs","end":[65,55]}}],"comments":"Representation of a physical quantity as a (product of a) numerical value\nand a physical unit.\n","title":"Quantity","info":{"declType":"data","dataDeclType":"data","typeArguments":[]},"sourceSpan":{"start":[43,1],"name":"src/Data/Quantity.purs","end":[43,44]}},{"children":[],"comments":"Convert a quantity to its standard representation.\n","title":"toStandard","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Quantity"],"Quantity"]}]},{"tag":"TypeConstructor","contents":[["Data","Quantity"],"Quantity"]}]}},"sourceSpan":{"start":[77,1],"name":"src/Data/Quantity.purs","end":[77,34]}},{"children":[],"comments":"The square root of a quantity.\n","title":"sqrt","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Quantity"],"Quantity"]}]},{"tag":"TypeConstructor","contents":[["Data","Quantity"],"Quantity"]}]}},"sourceSpan":{"start":[176,1],"name":"src/Data/Quantity.purs","end":[176,28]}},{"children":[],"comments":"Create a scalar (i.e. dimensionless) quantity from a number.\n","title":"scalar","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]},{"tag":"TypeConstructor","contents":[["Data","Quantity"],"Quantity"]}]}},"sourceSpan":{"start":[111,1],"name":"src/Data/Quantity.purs","end":[111,28]}},{"children":[],"comments":"Construct a physical quantity from a numerical value and the physical\nunit.\n","title":"quantity","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}]},{"tag":"TypeConstructor","contents":[["Data","Quantity"],"Quantity"]}]}]}},"sourceSpan":{"start":[50,1],"name":"src/Data/Quantity.purs","end":[50,44]}},{"children":[],"comments":"Attempt to subtract two quantities. If the units can not be unified, an\nerror is returned.\n","title":"qSubtract","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Quantity"],"Quantity"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Quantity"],"Quantity"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Either"],"Either"]},{"tag":"TypeConstructor","contents":[["Data","Quantity"],"UnificationError"]}]},{"tag":"TypeConstructor","contents":[["Data","Quantity"],"Quantity"]}]}]}]}},"sourceSpan":{"start":[150,1],"name":"src/Data/Quantity.purs","end":[150,68]}},{"children":[],"comments":"Multiply two quantities.\n","title":"qMultiply","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Quantity"],"Quantity"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Quantity"],"Quantity"]}]},{"tag":"TypeConstructor","contents":[["Data","Quantity"],"Quantity"]}]}]}},"sourceSpan":{"start":[156,1],"name":"src/Data/Quantity.purs","end":[156,44]}},{"children":[],"comments":"Divide two quantities.\n","title":"qDivide","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Quantity"],"Quantity"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Quantity"],"Quantity"]}]},{"tag":"TypeConstructor","contents":[["Data","Quantity"],"Quantity"]}]}]}},"sourceSpan":{"start":[162,1],"name":"src/Data/Quantity.purs","end":[162,42]}},{"children":[],"comments":"Attempt to add two quantities. If the units can not be unified, an error\nis returned.\n","title":"qAdd","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Quantity"],"Quantity"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Quantity"],"Quantity"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Either"],"Either"]},{"tag":"TypeConstructor","contents":[["Data","Quantity"],"UnificationError"]}]},{"tag":"TypeConstructor","contents":[["Data","Quantity"],"Quantity"]}]}]}]}},"sourceSpan":{"start":[140,1],"name":"src/Data/Quantity.purs","end":[140,63]}},{"children":[],"comments":"Raise a quantity to a given power.\n","title":"pow","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Quantity"],"Quantity"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]},{"tag":"TypeConstructor","contents":[["Data","Quantity"],"Quantity"]}]}]}},"sourceSpan":{"start":[168,1],"name":"src/Data/Quantity.purs","end":[168,36]}},{"children":[],"comments":"Textual representation of a unit conversion error.\n","title":"errorMessage","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Quantity"],"UnificationError"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}},"sourceSpan":{"start":[106,1],"name":"src/Data/Quantity.purs","end":[106,42]}},{"children":[],"comments":"The unit of a physical quantity.\n","title":"derivedUnit","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Quantity"],"Quantity"]}]},{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}]}},"sourceSpan":{"start":[73,1],"name":"src/Data/Quantity.purs","end":[73,38]}},{"children":[],"comments":"Flipped version of `convert`.\n","title":"convertTo","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Quantity"],"Quantity"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Either"],"Either"]},{"tag":"TypeConstructor","contents":[["Data","Quantity"],"UnificationError"]}]},{"tag":"TypeConstructor","contents":[["Data","Quantity"],"Quantity"]}]}]}]}},"sourceSpan":{"start":[130,1],"name":"src/Data/Quantity.purs","end":[130,71]}},{"children":[],"comments":"Attempt to convert a physical quantity to a given target unit. Returns a\n`UnificationError` if the conversion fails.\n","title":"convert","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Quantity"],"Quantity"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Either"],"Either"]},{"tag":"TypeConstructor","contents":[["Data","Quantity"],"UnificationError"]}]},{"tag":"TypeConstructor","contents":[["Data","Quantity"],"Quantity"]}]}]}]}},"sourceSpan":{"start":[116,1],"name":"src/Data/Quantity.purs","end":[116,69]}},{"children":[],"comments":"Get the numerical value of a physical quantity in a given unit. Returns a\n`UnificationError` if the conversion fails.\n","title":"asValueIn","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Quantity"],"Quantity"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Either"],"Either"]},{"tag":"TypeConstructor","contents":[["Data","Quantity"],"UnificationError"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]}]}]}},"sourceSpan":{"start":[135,1],"name":"src/Data/Quantity.purs","end":[135,69]}},{"children":[],"comments":"Check whether two quantities have matching units (or can be converted\nto the same representation) and test if the numerical are approximately\nequal.\n","title":"approximatelyEqual","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Quantity"],"Quantity"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Quantity"],"Quantity"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}]}]}},"sourceSpan":{"start":[85,1],"name":"src/Data/Quantity.purs","end":[85,61]}},{"children":[],"comments":"The absolute value of a quantity.\n","title":"abs","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Quantity"],"Quantity"]}]},{"tag":"TypeConstructor","contents":[["Data","Quantity"],"Quantity"]}]}},"sourceSpan":{"start":[172,1],"name":"src/Data/Quantity.purs","end":[172,27]}},{"children":[],"comments":null,"title":"(⊘)","info":{"declType":"alias","alias":[["Data","Quantity"],{"Right":{"Left":{"Ident":"qDivide"}}}],"fixity":{"associativity":"infixl","precedence":4}},"sourceSpan":{"start":[165,1],"name":"src/Data/Quantity.purs","end":[165,22]}},{"children":[],"comments":null,"title":"(⊗)","info":{"declType":"alias","alias":[["Data","Quantity"],{"Right":{"Left":{"Ident":"qMultiply"}}}],"fixity":{"associativity":"infixl","precedence":4}},"sourceSpan":{"start":[159,1],"name":"src/Data/Quantity.purs","end":[159,24]}},{"children":[],"comments":null,"title":"(⊖)","info":{"declType":"alias","alias":[["Data","Quantity"],{"Right":{"Left":{"Ident":"qSubtract"}}}],"fixity":{"associativity":"infixl","precedence":3}},"sourceSpan":{"start":[153,1],"name":"src/Data/Quantity.purs","end":[153,24]}},{"children":[],"comments":null,"title":"(⊕)","info":{"declType":"alias","alias":[["Data","Quantity"],{"Right":{"Left":{"Ident":"qAdd"}}}],"fixity":{"associativity":"infixl","precedence":3}},"sourceSpan":{"start":[146,1],"name":"src/Data/Quantity.purs","end":[146,19]}},{"children":[],"comments":null,"title":"(.*)","info":{"declType":"alias","alias":[["Data","Quantity"],{"Right":{"Left":{"Ident":"quantity"}}}],"fixity":{"associativity":"infix","precedence":5}},"sourceSpan":{"start":[56,1],"name":"src/Data/Quantity.purs","end":[56,23]}}]},{"moduleName":["Data","Units"],"declarations":[{"children":[{"comments":null,"title":"eqDerivedUnit","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Eq"],"Eq"]},{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}]}},"sourceSpan":{"start":[146,1],"name":"src/Data/Units.purs","end":[152,43]}},{"comments":null,"title":"showDerivedUnit","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Show"],"Show"]},{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}]}},"sourceSpan":{"start":[154,1],"name":"src/Data/Units.purs","end":[166,75]}},{"comments":null,"title":"semigroupDerivedUnit","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Semigroup"],"Semigroup"]},{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}]}},"sourceSpan":{"start":[168,1],"name":"src/Data/Units.purs","end":[170,48]}},{"comments":null,"title":"monoidDerivedUnit","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Monoid"],"Monoid"]},{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}]}},"sourceSpan":{"start":[172,1],"name":"src/Data/Units.purs","end":[173,17]}}],"comments":"A `DerivedUnit` is a product of `BaseUnits`, raised to arbitrary powers.\nThe `Semigroup`/`Monoid` instance implements multiplication of units. A\n`DerivedUnit` also has a `Prefix` value, which represents a numerical\nprefix as a power of ten.\n","title":"DerivedUnit","info":{"declType":"data","dataDeclType":"data","typeArguments":[]},"sourceSpan":{"start":[117,1],"name":"src/Data/Units.purs","end":[117,66]}},{"children":[],"comments":"A `DerivedUnit` corresponding to `1`, i.e. the unit of scalar\n(or dimensionless) values.\n","title":"unity","info":{"declType":"value","type":{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}},"sourceSpan":{"start":[246,1],"name":"src/Data/Units.purs","end":[246,21]}},{"children":[],"comments":"A `String` representation of a `DerivedUnit`.\n","title":"toString","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}},"sourceSpan":{"start":[222,1],"name":"src/Data/Units.purs","end":[222,33]}},{"children":[],"comments":"Convert all contained units to standard units and return the global\nconversion factor.\n","title":"toStandardUnit","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Tuple"],"Tuple"]},{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}]},{"tag":"TypeConstructor","contents":[["Data","Units"],"ConversionFactor"]}]}]}},"sourceSpan":{"start":[188,1],"name":"src/Data/Units.purs","end":[188,67]}},{"children":[],"comments":null,"title":"tera","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}]},{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}]}},"sourceSpan":{"start":[292,1],"name":"src/Data/Units.purs","end":[292,34]}},{"children":[],"comments":"Raise a unit to the given power.\n","title":"power","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]},{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}]}]}},"sourceSpan":{"start":[231,1],"name":"src/Data/Units.purs","end":[231,44]}},{"children":[],"comments":null,"title":"pico","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}]},{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}]}},"sourceSpan":{"start":[262,1],"name":"src/Data/Units.purs","end":[262,34]}},{"children":[],"comments":null,"title":"peta","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}]},{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}]}},"sourceSpan":{"start":[295,1],"name":"src/Data/Units.purs","end":[295,34]}},{"children":[],"comments":null,"title":"nano","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}]},{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}]}},"sourceSpan":{"start":[265,1],"name":"src/Data/Units.purs","end":[265,34]}},{"children":[],"comments":null,"title":"milli","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}]},{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}]}},"sourceSpan":{"start":[271,1],"name":"src/Data/Units.purs","end":[271,35]}},{"children":[],"comments":null,"title":"micro","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}]},{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}]}},"sourceSpan":{"start":[268,1],"name":"src/Data/Units.purs","end":[268,35]}},{"children":[],"comments":null,"title":"mega","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}]},{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}]}},"sourceSpan":{"start":[286,1],"name":"src/Data/Units.purs","end":[286,34]}},{"children":[],"comments":"Helper function to create a standard unit.\n","title":"makeStandard","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}]}]}},"sourceSpan":{"start":[176,1],"name":"src/Data/Units.purs","end":[176,46]}},{"children":[],"comments":"Helper function to create a non-standard unit.\n","title":"makeNonStandard","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Units"],"ConversionFactor"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}]},{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}]}]}]}]}},"sourceSpan":{"start":[181,1],"name":"src/Data/Units.purs","end":[182,33]}},{"children":[],"comments":null,"title":"kilo","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}]},{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}]}},"sourceSpan":{"start":[283,1],"name":"src/Data/Units.purs","end":[283,34]}},{"children":[],"comments":null,"title":"hecto","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}]},{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}]}},"sourceSpan":{"start":[280,1],"name":"src/Data/Units.purs","end":[280,35]}},{"children":[],"comments":null,"title":"giga","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}]},{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}]}},"sourceSpan":{"start":[289,1],"name":"src/Data/Units.purs","end":[289,34]}},{"children":[],"comments":null,"title":"femto","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}]},{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}]}},"sourceSpan":{"start":[259,1],"name":"src/Data/Units.purs","end":[259,35]}},{"children":[],"comments":null,"title":"exa","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}]},{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}]}},"sourceSpan":{"start":[298,1],"name":"src/Data/Units.purs","end":[298,33]}},{"children":[],"comments":"Divide two units.\n","title":"divideUnits","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}]},{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}]}]}},"sourceSpan":{"start":[239,1],"name":"src/Data/Units.purs","end":[239,55]}},{"children":[],"comments":null,"title":"deci","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}]},{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}]}},"sourceSpan":{"start":[277,1],"name":"src/Data/Units.purs","end":[277,34]}},{"children":[],"comments":null,"title":"centi","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}]},{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}]}},"sourceSpan":{"start":[274,1],"name":"src/Data/Units.purs","end":[274,35]}},{"children":[],"comments":null,"title":"atto","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}]},{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}]}},"sourceSpan":{"start":[256,1],"name":"src/Data/Units.purs","end":[256,34]}},{"children":[],"comments":null,"title":"(.^)","info":{"declType":"alias","alias":[["Data","Units"],{"Right":{"Left":{"Ident":"power"}}}],"fixity":{"associativity":"infixl","precedence":9}},"sourceSpan":{"start":[236,1],"name":"src/Data/Units.purs","end":[236,21]}},{"children":[],"comments":null,"title":"(./)","info":{"declType":"alias","alias":[["Data","Units"],{"Right":{"Left":{"Ident":"divideUnits"}}}],"fixity":{"associativity":"infixl","precedence":6}},"sourceSpan":{"start":[242,1],"name":"src/Data/Units.purs","end":[242,27]}}]},{"moduleName":["Data","Units","Bit"],"declarations":[{"children":[],"comments":"Unit of digital information, *1byte = 8bit*.\n","title":"byte","info":{"declType":"value","type":{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}},"sourceSpan":{"start":[10,1],"name":"src/Data/Units/Bit.purs","end":[10,20]}},{"children":[],"comments":"Unit of digital information.\n","title":"bit","info":{"declType":"value","type":{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}},"sourceSpan":{"start":[6,1],"name":"src/Data/Units/Bit.purs","end":[6,19]}}]},{"moduleName":["Data","Units","Imperial"],"declarations":[{"children":[],"comments":"Unit of length, *1yd = 0.9144m*.\n","title":"yard","info":{"declType":"value","type":{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}},"sourceSpan":{"start":[18,1],"name":"src/Data/Units/Imperial.purs","end":[18,20]}},{"children":[],"comments":"Unit of mass, *1lb = 453.6g*.\n","title":"pound","info":{"declType":"value","type":{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}},"sourceSpan":{"start":[30,1],"name":"src/Data/Units/Imperial.purs","end":[30,21]}},{"children":[],"comments":"Unit of mass, *1oz = 28.35g*.\n","title":"ounce","info":{"declType":"value","type":{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}},"sourceSpan":{"start":[26,1],"name":"src/Data/Units/Imperial.purs","end":[26,21]}},{"children":[],"comments":"Unit of length, *1mi = 1609.344m*.\n","title":"mile","info":{"declType":"value","type":{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}},"sourceSpan":{"start":[22,1],"name":"src/Data/Units/Imperial.purs","end":[22,20]}},{"children":[],"comments":"Unit of length, *1in = 0.0254m*.\n","title":"inch","info":{"declType":"value","type":{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}},"sourceSpan":{"start":[10,1],"name":"src/Data/Units/Imperial.purs","end":[10,20]}},{"children":[],"comments":"Unit of length, *1ft = 0.3048m*.\n","title":"foot","info":{"declType":"value","type":{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}},"sourceSpan":{"start":[14,1],"name":"src/Data/Units/Imperial.purs","end":[14,20]}}]},{"moduleName":["Data","Units","SI"],"declarations":[{"children":[],"comments":"Standard unit of time.\n","title":"second","info":{"declType":"value","type":{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}},"sourceSpan":{"start":[15,1],"name":"src/Data/Units/SI.purs","end":[15,22]}},{"children":[],"comments":"Standard unit of lenght.\n","title":"meter","info":{"declType":"value","type":{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}},"sourceSpan":{"start":[7,1],"name":"src/Data/Units/SI.purs","end":[7,21]}},{"children":[],"comments":"Standard unit of mass.\n","title":"gram","info":{"declType":"value","type":{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}},"sourceSpan":{"start":[11,1],"name":"src/Data/Units/SI.purs","end":[11,20]}}]},{"moduleName":["Data","Units","SI","Derived"],"declarations":[{"children":[],"comments":"Unit for power, *1W = 1J/s*.\n","title":"watt","info":{"declType":"value","type":{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}},"sourceSpan":{"start":[30,1],"name":"src/Data/Units/SI/Derived.purs","end":[30,20]}},{"children":[],"comments":"'Dimensionless' unit for solid angles *1 sr = 1m² / 1m²*.\n","title":"steradian","info":{"declType":"value","type":{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}},"sourceSpan":{"start":[18,1],"name":"src/Data/Units/SI/Derived.purs","end":[18,25]}},{"children":[],"comments":"'Dimensionless' unit for angles *1 rad = 1m / 1m*.\n","title":"radian","info":{"declType":"value","type":{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}},"sourceSpan":{"start":[14,1],"name":"src/Data/Units/SI/Derived.purs","end":[14,22]}},{"children":[],"comments":"Unit for force, *1N = 1kg⋅m/s²*.\n","title":"newton","info":{"declType":"value","type":{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}},"sourceSpan":{"start":[22,1],"name":"src/Data/Units/SI/Derived.purs","end":[22,22]}},{"children":[],"comments":"Unit for energy, *1J = 1N·m*.\n","title":"joule","info":{"declType":"value","type":{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}},"sourceSpan":{"start":[26,1],"name":"src/Data/Units/SI/Derived.purs","end":[26,21]}},{"children":[],"comments":"Unit for frequency, *1 Hz = 1 / s*.\n","title":"hertz","info":{"declType":"value","type":{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}},"sourceSpan":{"start":[10,1],"name":"src/Data/Units/SI/Derived.purs","end":[10,21]}}]},{"moduleName":["Data","Units","Time"],"declarations":[{"children":[],"comments":"Unit of time, *1week = 7days*.\n","title":"week","info":{"declType":"value","type":{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}},"sourceSpan":{"start":[22,1],"name":"src/Data/Units/Time.purs","end":[22,20]}},{"children":[],"comments":"Unit of time, *1min = 60sec*.\n","title":"minute","info":{"declType":"value","type":{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}},"sourceSpan":{"start":[10,1],"name":"src/Data/Units/Time.purs","end":[10,22]}},{"children":[],"comments":"Unit of time, *1hour = 60min*.\n","title":"hour","info":{"declType":"value","type":{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}},"sourceSpan":{"start":[14,1],"name":"src/Data/Units/Time.purs","end":[14,20]}},{"children":[],"comments":"Unit of time, *1day = 24hour*.\n","title":"day","info":{"declType":"value","type":{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}},"sourceSpan":{"start":[18,1],"name":"src/Data/Units/Time.purs","end":[18,19]}}]},{"moduleName":["Prelude"],"declarations":[{"children":[{"comments":null,"title":"showVoid","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Show"],"Show"]},{"tag":"TypeConstructor","contents":[["Data","Void"],"Void"]}]}},"sourceSpan":{"start":[7,1],"name":"bower_components/purescript-prelude/src/Data/Void.purs","end":[8,16]}}],"comments":null,"title":"Void","info":{"declType":"data","dataDeclType":"newtype","typeArguments":[]},"sourceSpan":{"start":[5,1],"name":"bower_components/purescript-prelude/src/Data/Void.purs","end":[5,25]}},{"children":[{"comments":null,"title":"showUnit","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Show"],"Show"]},{"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}},"sourceSpan":{"start":[16,1],"name":"bower_components/purescript-prelude/src/Data/Unit.purs","end":[17,12]}}],"comments":"The `Unit` type has a single inhabitant, called `unit`. It represents\nvalues with no computational content.\n\n`Unit` is often used, wrapped in a monadic type constructor, as the\nreturn type of a computation where only\nthe _effects_ are important.\n","title":"Unit","info":{"kind":{"tag":"Star","contents":[]},"declType":"externData"},"sourceSpan":{"start":[11,1],"name":"bower_components/purescript-prelude/src/Data/Unit.purs","end":[11,30]}},{"children":[{"comments":null,"title":"LT","info":{"arguments":[],"declType":"dataConstructor"},"sourceSpan":null},{"comments":null,"title":"GT","info":{"arguments":[],"declType":"dataConstructor"},"sourceSpan":null},{"comments":null,"title":"EQ","info":{"arguments":[],"declType":"dataConstructor"},"sourceSpan":null},{"comments":null,"title":"eqOrdering","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Eq"],"Eq"]},{"tag":"TypeConstructor","contents":[["Data","Ordering"],"Ordering"]}]}},"sourceSpan":{"start":[15,1],"name":"bower_components/purescript-prelude/src/Data/Ordering.purs","end":[19,19]}},{"comments":null,"title":"semigroupOrdering","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Semigroup"],"Semigroup"]},{"tag":"TypeConstructor","contents":[["Data","Ordering"],"Ordering"]}]}},"sourceSpan":{"start":[21,1],"name":"bower_components/purescript-prelude/src/Data/Ordering.purs","end":[24,18]}},{"comments":null,"title":"showOrdering","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Show"],"Show"]},{"tag":"TypeConstructor","contents":[["Data","Ordering"],"Ordering"]}]}},"sourceSpan":{"start":[26,1],"name":"bower_components/purescript-prelude/src/Data/Ordering.purs","end":[31,1]}}],"comments":"The `Ordering` data type represents the three possible outcomes of\ncomparing two values:\n\n`LT` - The first value is _less than_ the second.\n`GT` - The first value is _greater than_ the second.\n`EQ` - The first value is _equal to_ the second.\n","title":"Ordering","info":{"declType":"data","dataDeclType":"data","typeArguments":[]},"sourceSpan":{"start":[13,1],"name":"bower_components/purescript-prelude/src/Data/Ordering.purs","end":[13,29]}},{"children":[{"comments":null,"title":"pure","info":{"declType":"typeClassMember","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}]},null]}},"sourceSpan":null},{"comments":null,"title":"applicativeFn","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Applicative"],"Applicative"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"r"}]}}]}},"sourceSpan":{"start":[35,1],"name":"bower_components/purescript-prelude/src/Control/Applicative.purs","end":[36,15]}},{"comments":null,"title":"applicativeArray","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Applicative"],"Applicative"]},{"tag":"TypeConstructor","contents":[["Prim"],"Array"]}]}},"sourceSpan":{"start":[38,1],"name":"bower_components/purescript-prelude/src/Control/Applicative.purs","end":[39,15]}}],"comments":"The `Applicative` type class extends the [`Apply`](#apply) type class\nwith a `pure` function, which can be used to create values of type `f a`\nfrom values of type `a`.\n\nWhere [`Apply`](#apply) provides the ability to lift functions of two or\nmore arguments to functions whose arguments are wrapped using `f`, and\n[`Functor`](#functor) provides the ability to lift functions of one\nargument, `pure` can be seen as the function which lifts functions of\n_zero_ arguments. That is, `Applicative` functors support a lifting\noperation for any number of function arguments.\n\nInstances must satisfy the following laws in addition to the `Apply`\nlaws:\n\n- Identity: `(pure id) <*> v = v`\n- Composition: `(pure <<<) <*> f <*> g <*> h = f <*> (g <*> h)`\n- Homomorphism: `(pure f) <*> (pure x) = pure (f x)`\n- Interchange: `u <*> (pure y) = (pure ($ y)) <*> u`\n","title":"Applicative","info":{"arguments":[["f",null]],"declType":"typeClass","superclasses":[{"constraintClass":[["Control","Apply"],"Apply"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}],"constraintData":null}]},"sourceSpan":{"start":[32,1],"name":"bower_components/purescript-prelude/src/Control/Applicative.purs","end":[33,29]}},{"children":[{"comments":null,"title":"apply","info":{"declType":"typeClassMember","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"b"}]}]}]},null]},null]}},"sourceSpan":null},{"comments":null,"title":"applyFn","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Apply"],"Apply"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"r"}]}}]}},"sourceSpan":{"start":[40,1],"name":"bower_components/purescript-prelude/src/Control/Apply.purs","end":[41,26]}},{"comments":null,"title":"applyArray","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Apply"],"Apply"]},{"tag":"TypeConstructor","contents":[["Prim"],"Array"]}]}},"sourceSpan":{"start":[43,1],"name":"bower_components/purescript-prelude/src/Control/Apply.purs","end":[44,21]}}],"comments":"The `Apply` class provides the `(<*>)` which is used to apply a function\nto an argument under a type constructor.\n\n`Apply` can be used to lift functions of two or more arguments to work on\nvalues wrapped with the type constructor `f`. It might also be understood\nin terms of the `lift2` function:\n\n```purescript\nlift2 :: forall f a b c. Apply f => (a -> b -> c) -> f a -> f b -> f c\nlift2 f a b = f <$> a <*> b\n```\n\n`(<*>)` is recovered from `lift2` as `lift2 ($)`. That is, `(<*>)` lifts\nthe function application operator `($)` to arguments wrapped with the\ntype constructor `f`.\n\nInstances must satisfy the following law in addition to the `Functor`\nlaws:\n\n- Associative composition: `(<<<) <$> f <*> g <*> h = f <*> (g <*> h)`\n\nFormally, `Apply` represents a strong lax semi-monoidal endofunctor.\n","title":"Apply","info":{"arguments":[["f",null]],"declType":"typeClass","superclasses":[{"constraintClass":[["Data","Functor"],"Functor"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}],"constraintData":null}]},"sourceSpan":{"start":[35,1],"name":"bower_components/purescript-prelude/src/Control/Apply.purs","end":[36,48]}},{"children":[{"comments":null,"title":"bind","info":{"declType":"typeClassMember","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"m"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"m"},{"tag":"TypeVar","contents":"b"}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"m"},{"tag":"TypeVar","contents":"b"}]}]}]},null]},null]}},"sourceSpan":null},{"comments":null,"title":"bindFn","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Bind"],"Bind"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"r"}]}}]}},"sourceSpan":{"start":[61,1],"name":"bower_components/purescript-prelude/src/Control/Bind.purs","end":[62,25]}},{"comments":null,"title":"bindArray","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Bind"],"Bind"]},{"tag":"TypeConstructor","contents":[["Prim"],"Array"]}]}},"sourceSpan":{"start":[64,1],"name":"bower_components/purescript-prelude/src/Control/Bind.purs","end":[65,19]}}],"comments":"The `Bind` type class extends the [`Apply`](#apply) type class with a\n\"bind\" operation `(>>=)` which composes computations in sequence, using\nthe return value of one computation to determine the next computation.\n\nThe `>>=` operator can also be expressed using `do` notation, as follows:\n\n```purescript\nx >>= f = do y <- x\n             f y\n```\n\nwhere the function argument of `f` is given the name `y`.\n\nInstances must satisfy the following law in addition to the `Apply`\nlaws:\n\n- Associativity: `(x >>= f) >>= g = x >>= (\\k -> f k >>= g)`\n\nAssociativity tells us that we can regroup operations which use `do`\nnotation so that we can unambiguously write, for example:\n\n```purescript\ndo x <- m1\n   y <- m2 x\n   m3 x y\n```\n","title":"Bind","info":{"arguments":[["m",null]],"declType":"typeClass","superclasses":[{"constraintClass":[["Control","Apply"],"Apply"],"constraintArgs":[{"tag":"TypeVar","contents":"m"}],"constraintData":null}]},"sourceSpan":{"start":[46,1],"name":"bower_components/purescript-prelude/src/Control/Bind.purs","end":[47,47]}},{"children":[{"comments":null,"title":"booleanAlgebraBoolean","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","BooleanAlgebra"],"BooleanAlgebra"]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}},"sourceSpan":{"start":[19,1],"name":"bower_components/purescript-prelude/src/Data/BooleanAlgebra.purs","end":[19,57]}},{"comments":null,"title":"booleanAlgebraUnit","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","BooleanAlgebra"],"BooleanAlgebra"]},{"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}},"sourceSpan":{"start":[20,1],"name":"bower_components/purescript-prelude/src/Data/BooleanAlgebra.purs","end":[20,47]}}],"comments":"The `BooleanAlgebra` type class represents types that behave like boolean\nvalues.\n\nInstances should satisfy the following laws in addition to the\n`HeytingAlgebra` law:\n\n- Excluded middle:\n  - `a || not a = tt`\n","title":"BooleanAlgebra","info":{"arguments":[["a",null]],"declType":"typeClass","superclasses":[{"constraintClass":[["Data","HeytingAlgebra"],"HeytingAlgebra"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}]},"sourceSpan":{"start":[17,1],"name":"bower_components/purescript-prelude/src/Data/BooleanAlgebra.purs","end":[17,43]}},{"children":[{"comments":null,"title":"top","info":{"declType":"typeClassMember","type":{"tag":"TypeVar","contents":"a"}},"sourceSpan":null},{"comments":null,"title":"bottom","info":{"declType":"typeClassMember","type":{"tag":"TypeVar","contents":"a"}},"sourceSpan":null},{"comments":null,"title":"boundedBoolean","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Bounded"],"Bounded"]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}},"sourceSpan":{"start":[21,1],"name":"bower_components/purescript-prelude/src/Data/Bounded.purs","end":[23,17]}},{"comments":null,"title":"boundedInt","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Bounded"],"Bounded"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}},"sourceSpan":{"start":[25,1],"name":"bower_components/purescript-prelude/src/Data/Bounded.purs","end":[27,21]}},{"comments":"Characters fall within the Unicode range.\n","title":"boundedChar","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Bounded"],"Bounded"]},{"tag":"TypeConstructor","contents":[["Prim"],"Char"]}]}},"sourceSpan":{"start":[33,1],"name":"bower_components/purescript-prelude/src/Data/Bounded.purs","end":[35,22]}},{"comments":null,"title":"boundedOrdering","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Bounded"],"Bounded"]},{"tag":"TypeConstructor","contents":[["Data","Ordering"],"Ordering"]}]}},"sourceSpan":{"start":[40,1],"name":"bower_components/purescript-prelude/src/Data/Bounded.purs","end":[42,14]}},{"comments":null,"title":"boundedUnit","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Bounded"],"Bounded"]},{"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}},"sourceSpan":{"start":[44,1],"name":"bower_components/purescript-prelude/src/Data/Bounded.purs","end":[46,12]}}],"comments":"The `Bounded` type class represents totally ordered types that have an\nupper and lower boundary.\n\nInstances should satisfy the following law in addition to the `Ord` laws:\n\n- Bounded: `bottom <= a <= top`\n","title":"Bounded","info":{"arguments":[["a",null]],"declType":"typeClass","superclasses":[{"constraintClass":[["Data","Ord"],"Ord"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}]},"sourceSpan":{"start":[17,1],"name":"bower_components/purescript-prelude/src/Data/Bounded.purs","end":[19,14]}},{"children":[{"comments":null,"title":"id","info":{"declType":"typeClassMember","type":{"tag":"ForAll","contents":["t",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"a"},{"tag":"TypeVar","contents":"t"}]},{"tag":"TypeVar","contents":"t"}]},null]}},"sourceSpan":null},{"comments":null,"title":"categoryFn","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Category"],"Category"]},{"tag":"TypeConstructor","contents":[["Prim"],"Function"]}]}},"sourceSpan":{"start":[19,1],"name":"bower_components/purescript-prelude/src/Control/Category.purs","end":[20,10]}}],"comments":"`Category`s consist of objects and composable morphisms between them, and\nas such are [`Semigroupoids`](#semigroupoid), but unlike `semigroupoids`\nmust have an identity element.\n\nInstances must satisfy the following law in addition to the\n`Semigroupoid` law:\n\n- Identity: `id <<< p = p <<< id = p`\n","title":"Category","info":{"arguments":[["a",null]],"declType":"typeClass","superclasses":[{"constraintClass":[["Control","Semigroupoid"],"Semigroupoid"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}]},"sourceSpan":{"start":[16,1],"name":"bower_components/purescript-prelude/src/Control/Category.purs","end":[17,24]}},{"children":[{"comments":null,"title":"commutativeRingInt","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","CommutativeRing"],"CommutativeRing"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}},"sourceSpan":{"start":[20,1],"name":"bower_components/purescript-prelude/src/Data/CommutativeRing.purs","end":[20,51]}},{"comments":null,"title":"commutativeRingNumber","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","CommutativeRing"],"CommutativeRing"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]}},"sourceSpan":{"start":[21,1],"name":"bower_components/purescript-prelude/src/Data/CommutativeRing.purs","end":[21,57]}},{"comments":null,"title":"commutativeRingUnit","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","CommutativeRing"],"CommutativeRing"]},{"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}},"sourceSpan":{"start":[22,1],"name":"bower_components/purescript-prelude/src/Data/CommutativeRing.purs","end":[22,49]}}],"comments":"The `CommutativeRing` class is for rings where multiplication is\ncommutative.\n\nInstances must satisfy the following law in addition to the `Ring`\nlaws:\n\n- Commutative multiplication: `a * b = b * a`\n","title":"CommutativeRing","info":{"arguments":[["a",null]],"declType":"typeClass","superclasses":[{"constraintClass":[["Data","Ring"],"Ring"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}]},"sourceSpan":{"start":[18,1],"name":"bower_components/purescript-prelude/src/Data/CommutativeRing.purs","end":[18,34]}},{"children":[{"comments":null,"title":"eq","info":{"declType":"typeClassMember","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}]}},"sourceSpan":null},{"comments":null,"title":"eqBoolean","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Eq"],"Eq"]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}},"sourceSpan":{"start":[25,1],"name":"bower_components/purescript-prelude/src/Data/Eq.purs","end":[26,13]}},{"comments":null,"title":"eqInt","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Eq"],"Eq"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}},"sourceSpan":{"start":[28,1],"name":"bower_components/purescript-prelude/src/Data/Eq.purs","end":[29,13]}},{"comments":null,"title":"eqNumber","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Eq"],"Eq"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]}},"sourceSpan":{"start":[31,1],"name":"bower_components/purescript-prelude/src/Data/Eq.purs","end":[32,13]}},{"comments":null,"title":"eqChar","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Eq"],"Eq"]},{"tag":"TypeConstructor","contents":[["Prim"],"Char"]}]}},"sourceSpan":{"start":[34,1],"name":"bower_components/purescript-prelude/src/Data/Eq.purs","end":[35,13]}},{"comments":null,"title":"eqString","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Eq"],"Eq"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}},"sourceSpan":{"start":[37,1],"name":"bower_components/purescript-prelude/src/Data/Eq.purs","end":[38,13]}},{"comments":null,"title":"eqUnit","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Eq"],"Eq"]},{"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}},"sourceSpan":{"start":[40,1],"name":"bower_components/purescript-prelude/src/Data/Eq.purs","end":[41,16]}},{"comments":null,"title":"eqVoid","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Eq"],"Eq"]},{"tag":"TypeConstructor","contents":[["Data","Void"],"Void"]}]}},"sourceSpan":{"start":[43,1],"name":"bower_components/purescript-prelude/src/Data/Eq.purs","end":[44,16]}},{"comments":null,"title":"eqArray","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","Eq"],"Eq"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Eq"],"Eq"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[46,1],"name":"bower_components/purescript-prelude/src/Data/Eq.purs","end":[47,22]}}],"comments":"The `Eq` type class represents types which support decidable equality.\n\n`Eq` instances should satisfy the following laws:\n\n- Reflexivity: `x == x = true`\n- Symmetry: `x == y = y == x`\n- Transitivity: if `x == y` and `y == z` then `x == z`\n","title":"Eq","info":{"arguments":[["a",null]],"declType":"typeClass","superclasses":[]},"sourceSpan":{"start":[13,1],"name":"bower_components/purescript-prelude/src/Data/Eq.purs","end":[14,26]}},{"children":[{"comments":null,"title":"degree","info":{"declType":"typeClassMember","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}},"sourceSpan":null},{"comments":null,"title":"div","info":{"declType":"typeClassMember","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":null},{"comments":null,"title":"mod","info":{"declType":"typeClassMember","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":null},{"comments":null,"title":"euclideanRingInt","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","EuclideanRing"],"EuclideanRing"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}},"sourceSpan":{"start":[28,1],"name":"bower_components/purescript-prelude/src/Data/EuclideanRing.purs","end":[31,15]}},{"comments":null,"title":"euclideanRingNumber","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","EuclideanRing"],"EuclideanRing"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]}},"sourceSpan":{"start":[33,1],"name":"bower_components/purescript-prelude/src/Data/EuclideanRing.purs","end":[38,1]}},{"comments":null,"title":"euclideanRingUnit","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","EuclideanRing"],"EuclideanRing"]},{"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}},"sourceSpan":{"start":[38,1],"name":"bower_components/purescript-prelude/src/Data/EuclideanRing.purs","end":[41,17]}}],"comments":"The `EuclideanRing` class is for commutative rings that support division.\n\nInstances must satisfy the following law in addition to the `Ring`\nlaws:\n\n- Integral domain: `a /= 0` and `b /= 0` implies `a * b /= 0`\n- Multiplicative Euclidean function: ``a = (a / b) * b + (a `mod` b)``\n  where `degree a > 0` and `degree a <= degree (a * b)`\n","title":"EuclideanRing","info":{"arguments":[["a",null]],"declType":"typeClass","superclasses":[{"constraintClass":[["Data","CommutativeRing"],"CommutativeRing"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}]},"sourceSpan":{"start":[21,1],"name":"bower_components/purescript-prelude/src/Data/EuclideanRing.purs","end":[24,21]}},{"children":[{"comments":null,"title":"fieldNumber","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Field"],"Field"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]}},"sourceSpan":{"start":[23,1],"name":"bower_components/purescript-prelude/src/Data/Field.purs","end":[23,37]}},{"comments":null,"title":"fieldUnit","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Field"],"Field"]},{"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}},"sourceSpan":{"start":[24,1],"name":"bower_components/purescript-prelude/src/Data/Field.purs","end":[24,29]}}],"comments":"The `Field` class is for types that are commutative fields.\n\nInstances must satisfy the following law in addition to the\n`EuclideanRing` laws:\n\n- Non-zero multiplicative inverse: ``a `mod` b = 0` for all `a` and `b`\n","title":"Field","info":{"arguments":[["a",null]],"declType":"typeClass","superclasses":[{"constraintClass":[["Data","EuclideanRing"],"EuclideanRing"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}]},"sourceSpan":{"start":[21,1],"name":"bower_components/purescript-prelude/src/Data/Field.purs","end":[21,33]}},{"children":[{"comments":null,"title":"map","info":{"declType":"typeClassMember","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"b"}]}]}]},null]},null]}},"sourceSpan":null},{"comments":null,"title":"functorFn","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Functor"],"Functor"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"r"}]}}]}},"sourceSpan":{"start":[38,1],"name":"bower_components/purescript-prelude/src/Data/Functor.purs","end":[39,16]}},{"comments":null,"title":"functorArray","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Functor"],"Functor"]},{"tag":"TypeConstructor","contents":[["Prim"],"Array"]}]}},"sourceSpan":{"start":[41,1],"name":"bower_components/purescript-prelude/src/Data/Functor.purs","end":[42,17]}}],"comments":"A `Functor` is a type constructor which supports a mapping operation\n`(<$>)`.\n\n`(<$>)` can be used to turn functions `a -> b` into functions\n`f a -> f b` whose argument and return types use the type constructor `f`\nto represent some computational context.\n\nInstances must satisfy the following laws:\n\n- Identity: `(<$>) id = id`\n- Composition: `(<$>) (f <<< g) = (f <$>) <<< (g <$>)`\n","title":"Functor","info":{"arguments":[["f",null]],"declType":"typeClass","superclasses":[]},"sourceSpan":{"start":[23,1],"name":"bower_components/purescript-prelude/src/Data/Functor.purs","end":[24,44]}},{"children":[{"comments":null,"title":"conj","info":{"declType":"typeClassMember","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":null},{"comments":null,"title":"disj","info":{"declType":"typeClassMember","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":null},{"comments":null,"title":"not","info":{"declType":"typeClassMember","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"a"}]}},"sourceSpan":null},{"comments":null,"title":"heytingAlgebraBoolean","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","HeytingAlgebra"],"HeytingAlgebra"]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}},"sourceSpan":{"start":[44,1],"name":"bower_components/purescript-prelude/src/Data/HeytingAlgebra.purs","end":[50,16]}},{"comments":null,"title":"heytingAlgebraUnit","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","HeytingAlgebra"],"HeytingAlgebra"]},{"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}},"sourceSpan":{"start":[52,1],"name":"bower_components/purescript-prelude/src/Data/HeytingAlgebra.purs","end":[58,15]}},{"comments":null,"title":"heytingAlgebraFunction","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","HeytingAlgebra"],"HeytingAlgebra"],"constraintArgs":[{"tag":"TypeVar","contents":"b"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","HeytingAlgebra"],"HeytingAlgebra"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}},"sourceSpan":{"start":[60,1],"name":"bower_components/purescript-prelude/src/Data/HeytingAlgebra.purs","end":[66,22]}}],"comments":"The `HeytingAlgebra` type class represents types are bounded lattices with\nan implication operator such that the following laws hold:\n\n- Associativity:\n  - `a || (b || c) = (a || b) || c`\n  - `a && (b && c) = (a && b) && c`\n- Commutativity:\n  - `a || b = b || a`\n  - `a && b = b && a`\n- Absorption:\n  - `a || (a && b) = a`\n  - `a && (a || b) = a`\n- Idempotent:\n  - `a || a = a`\n  - `a && a = a`\n- Identity:\n  - `a || ff = a`\n  - `a && tt = a`\n- Implication:\n  - ``a `implies` a = tt``\n  - ``a && (a `implies` b) = a && b``\n  - ``b && (a `implies` b) = b``\n  - ``a `implies` (b && c) = (a `implies` b) && (a `implies` c)``\n- Complemented:\n  - ``not a = a `implies` ff``\n","title":"HeytingAlgebra","info":{"arguments":[["a",null]],"declType":"typeClass","superclasses":[]},"sourceSpan":{"start":[33,1],"name":"bower_components/purescript-prelude/src/Data/HeytingAlgebra.purs","end":[39,16]}},{"children":[{"comments":null,"title":"monadFn","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad"],"Monad"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"r"}]}}]}},"sourceSpan":{"start":[29,1],"name":"bower_components/purescript-prelude/src/Control/Monad.purs","end":[29,35]}},{"comments":null,"title":"monadArray","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad"],"Monad"]},{"tag":"TypeConstructor","contents":[["Prim"],"Array"]}]}},"sourceSpan":{"start":[30,1],"name":"bower_components/purescript-prelude/src/Control/Monad.purs","end":[30,35]}}],"comments":"The `Monad` type class combines the operations of the `Bind` and\n`Applicative` type classes. Therefore, `Monad` instances represent type\nconstructors which support sequential composition, and also lifting of\nfunctions of arbitrary arity.\n\nInstances must satisfy the following laws in addition to the\n`Applicative` and `Bind` laws:\n\n- Left Identity: `pure x >>= f = f x`\n- Right Identity: `x >>= pure = x`\n","title":"Monad","info":{"arguments":[["m",null]],"declType":"typeClass","superclasses":[{"constraintClass":[["Control","Applicative"],"Applicative"],"constraintArgs":[{"tag":"TypeVar","contents":"m"}],"constraintData":null},{"constraintClass":[["Control","Bind"],"Bind"],"constraintArgs":[{"tag":"TypeVar","contents":"m"}],"constraintData":null}]},"sourceSpan":{"start":[27,1],"name":"bower_components/purescript-prelude/src/Control/Monad.purs","end":[27,41]}},{"children":[{"comments":null,"title":"compare","info":{"declType":"typeClassMember","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeConstructor","contents":[["Data","Ordering"],"Ordering"]}]}]}},"sourceSpan":null},{"comments":null,"title":"ordBoolean","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Ord"],"Ord"]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}},"sourceSpan":{"start":[35,1],"name":"bower_components/purescript-prelude/src/Data/Ord.purs","end":[36,26]}},{"comments":null,"title":"ordInt","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Ord"],"Ord"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}},"sourceSpan":{"start":[38,1],"name":"bower_components/purescript-prelude/src/Data/Ord.purs","end":[39,26]}},{"comments":null,"title":"ordNumber","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Ord"],"Ord"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]}},"sourceSpan":{"start":[41,1],"name":"bower_components/purescript-prelude/src/Data/Ord.purs","end":[42,26]}},{"comments":null,"title":"ordString","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Ord"],"Ord"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}},"sourceSpan":{"start":[44,1],"name":"bower_components/purescript-prelude/src/Data/Ord.purs","end":[45,26]}},{"comments":null,"title":"ordChar","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Ord"],"Ord"]},{"tag":"TypeConstructor","contents":[["Prim"],"Char"]}]}},"sourceSpan":{"start":[47,1],"name":"bower_components/purescript-prelude/src/Data/Ord.purs","end":[48,26]}},{"comments":null,"title":"ordUnit","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Ord"],"Ord"]},{"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}},"sourceSpan":{"start":[50,1],"name":"bower_components/purescript-prelude/src/Data/Ord.purs","end":[51,19]}},{"comments":null,"title":"ordVoid","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Ord"],"Ord"]},{"tag":"TypeConstructor","contents":[["Data","Void"],"Void"]}]}},"sourceSpan":{"start":[53,1],"name":"bower_components/purescript-prelude/src/Data/Ord.purs","end":[54,19]}},{"comments":null,"title":"ordArray","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","Ord"],"Ord"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Ord"],"Ord"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[56,1],"name":"bower_components/purescript-prelude/src/Data/Ord.purs","end":[65,1]}},{"comments":null,"title":"ordOrdering","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Ord"],"Ord"]},{"tag":"TypeConstructor","contents":[["Data","Ordering"],"Ordering"]}]}},"sourceSpan":{"start":[67,1],"name":"bower_components/purescript-prelude/src/Data/Ord.purs","end":[74,21]}}],"comments":"The `Ord` type class represents types which support comparisons with a\n_total order_.\n\n`Ord` instances should satisfy the laws of total orderings:\n\n- Reflexivity: `a <= a`\n- Antisymmetry: if `a <= b` and `b <= a` then `a = b`\n- Transitivity: if `a <= b` and `b <= c` then `a <= c`\n","title":"Ord","info":{"arguments":[["a",null]],"declType":"typeClass","superclasses":[{"constraintClass":[["Data","Eq"],"Eq"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}]},"sourceSpan":{"start":[32,1],"name":"bower_components/purescript-prelude/src/Data/Ord.purs","end":[33,32]}},{"children":[{"comments":null,"title":"sub","info":{"declType":"typeClassMember","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":null},{"comments":null,"title":"ringInt","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Ring"],"Ring"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}},"sourceSpan":{"start":[21,1],"name":"bower_components/purescript-prelude/src/Data/Ring.purs","end":[22,15]}},{"comments":null,"title":"ringNumber","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Ring"],"Ring"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]}},"sourceSpan":{"start":[24,1],"name":"bower_components/purescript-prelude/src/Data/Ring.purs","end":[25,15]}},{"comments":null,"title":"ringUnit","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Ring"],"Ring"]},{"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}},"sourceSpan":{"start":[27,1],"name":"bower_components/purescript-prelude/src/Data/Ring.purs","end":[28,17]}}],"comments":"The `Ring` class is for types that support addition, multiplication,\nand subtraction operations.\n\nInstances must satisfy the following law in addition to the `Semiring`\nlaws:\n\n- Additive inverse: `a - a = (zero - a) + a = zero`\n","title":"Ring","info":{"arguments":[["a",null]],"declType":"typeClass","superclasses":[{"constraintClass":[["Data","Semiring"],"Semiring"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}]},"sourceSpan":{"start":[16,1],"name":"bower_components/purescript-prelude/src/Data/Ring.purs","end":[17,21]}},{"children":[{"comments":null,"title":"append","info":{"declType":"typeClassMember","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":null},{"comments":null,"title":"semigroupString","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Semigroup"],"Semigroup"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}},"sourceSpan":{"start":[19,1],"name":"bower_components/purescript-prelude/src/Data/Semigroup.purs","end":[20,24]}},{"comments":null,"title":"semigroupUnit","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Semigroup"],"Semigroup"]},{"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}},"sourceSpan":{"start":[22,1],"name":"bower_components/purescript-prelude/src/Data/Semigroup.purs","end":[23,20]}},{"comments":null,"title":"semigroupVoid","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Semigroup"],"Semigroup"]},{"tag":"TypeConstructor","contents":[["Data","Void"],"Void"]}]}},"sourceSpan":{"start":[25,1],"name":"bower_components/purescript-prelude/src/Data/Semigroup.purs","end":[26,20]}},{"comments":null,"title":"semigroupFn","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","Semigroup"],"Semigroup"],"constraintArgs":[{"tag":"TypeVar","contents":"s'"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Semigroup"],"Semigroup"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"s"}]},{"tag":"TypeVar","contents":"s'"}]}}]}},"sourceSpan":{"start":[28,1],"name":"bower_components/purescript-prelude/src/Data/Semigroup.purs","end":[29,28]}},{"comments":null,"title":"semigroupArray","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Semigroup"],"Semigroup"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[31,1],"name":"bower_components/purescript-prelude/src/Data/Semigroup.purs","end":[32,23]}}],"comments":"The `Semigroup` type class identifies an associative operation on a type.\n\nInstances are required to satisfy the following law:\n\n- Associativity: `(x <> y) <> z = x <> (y <> z)`\n\nOne example of a `Semigroup` is `String`, with `(<>)` defined as string\nconcatenation.\n","title":"Semigroup","info":{"arguments":[["a",null]],"declType":"typeClass","superclasses":[]},"sourceSpan":{"start":[14,1],"name":"bower_components/purescript-prelude/src/Data/Semigroup.purs","end":[15,24]}},{"children":[{"comments":null,"title":"compose","info":{"declType":"typeClassMember","type":{"tag":"ForAll","contents":["d",{"tag":"ForAll","contents":["c",{"tag":"ForAll","contents":["b",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"a"},{"tag":"TypeVar","contents":"c"}]},{"tag":"TypeVar","contents":"d"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"a"},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeVar","contents":"c"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"a"},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeVar","contents":"d"}]}]}]},null]},null]},null]}},"sourceSpan":null},{"comments":null,"title":"semigroupoidFn","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Semigroupoid"],"Semigroupoid"]},{"tag":"TypeConstructor","contents":[["Prim"],"Function"]}]}},"sourceSpan":{"start":[15,1],"name":"bower_components/purescript-prelude/src/Control/Semigroupoid.purs","end":[16,26]}}],"comments":"A `Semigroupoid` is similar to a [`Category`](#category) but does not\nrequire an identity element `id`, just composable morphisms.\n\n`Semigroupoid`s must satisfy the following law:\n\n- Associativity: `p <<< (q <<< r) = (p <<< q) <<< r`\n\nOne example of a `Semigroupoid` is the function type constructor `(->)`,\nwith `(<<<)` defined as function composition.\n","title":"Semigroupoid","info":{"arguments":[["a",null]],"declType":"typeClass","superclasses":[]},"sourceSpan":{"start":[12,1],"name":"bower_components/purescript-prelude/src/Control/Semigroupoid.purs","end":[13,51]}},{"children":[{"comments":null,"title":"add","info":{"declType":"typeClassMember","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":null},{"comments":null,"title":"zero","info":{"declType":"typeClassMember","type":{"tag":"TypeVar","contents":"a"}},"sourceSpan":null},{"comments":null,"title":"mul","info":{"declType":"typeClassMember","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":null},{"comments":null,"title":"one","info":{"declType":"typeClassMember","type":{"tag":"TypeVar","contents":"a"}},"sourceSpan":null},{"comments":null,"title":"semiringInt","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Semiring"],"Semiring"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}},"sourceSpan":{"start":[30,1],"name":"bower_components/purescript-prelude/src/Data/Semiring.purs","end":[36,1]}},{"comments":null,"title":"semiringNumber","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Semiring"],"Semiring"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]}},"sourceSpan":{"start":[36,1],"name":"bower_components/purescript-prelude/src/Data/Semiring.purs","end":[42,1]}},{"comments":null,"title":"semiringUnit","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Semiring"],"Semiring"]},{"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}},"sourceSpan":{"start":[42,1],"name":"bower_components/purescript-prelude/src/Data/Semiring.purs","end":[46,13]}}],"comments":"The `Semiring` class is for types that support an addition and\nmultiplication operation.\n\nInstances must satisfy the following laws:\n\n- Commutative monoid under addition:\n  - Associativity: `(a + b) + c = a + (b + c)`\n  - Identity: `zero + a = a + zero = a`\n  - Commutative: `a + b = b + a`\n- Monoid under multiplication:\n  - Associativity: `(a * b) * c = a * (b * c)`\n  - Identity: `one * a = a * one = a`\n- Multiplication distributes over addition:\n  - Left distributivity: `a * (b + c) = (a * b) + (a * c)`\n  - Right distributivity: `(a + b) * c = (a * c) + (b * c)`\n- Annihiliation: `zero * a = a * zero = zero`\n","title":"Semiring","info":{"arguments":[["a",null]],"declType":"typeClass","superclasses":[]},"sourceSpan":{"start":[21,1],"name":"bower_components/purescript-prelude/src/Data/Semiring.purs","end":[25,12]}},{"children":[{"comments":null,"title":"show","info":{"declType":"typeClassMember","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}},"sourceSpan":null},{"comments":null,"title":"showBoolean","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Show"],"Show"]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}},"sourceSpan":{"start":[12,1],"name":"bower_components/purescript-prelude/src/Data/Show.purs","end":[16,1]}},{"comments":null,"title":"showInt","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Show"],"Show"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}},"sourceSpan":{"start":[16,1],"name":"bower_components/purescript-prelude/src/Data/Show.purs","end":[17,21]}},{"comments":null,"title":"showNumber","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Show"],"Show"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]}},"sourceSpan":{"start":[19,1],"name":"bower_components/purescript-prelude/src/Data/Show.purs","end":[20,24]}},{"comments":null,"title":"showChar","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Show"],"Show"]},{"tag":"TypeConstructor","contents":[["Prim"],"Char"]}]}},"sourceSpan":{"start":[22,1],"name":"bower_components/purescript-prelude/src/Data/Show.purs","end":[23,22]}},{"comments":null,"title":"showString","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Show"],"Show"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}},"sourceSpan":{"start":[25,1],"name":"bower_components/purescript-prelude/src/Data/Show.purs","end":[26,24]}},{"comments":null,"title":"showArray","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","Show"],"Show"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Show"],"Show"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[28,1],"name":"bower_components/purescript-prelude/src/Data/Show.purs","end":[29,28]}}],"comments":"The `Show` type class represents those types which can be converted into\na human-readable `String` representation.\n\nWhile not required, it is recommended that for any expression `x`, the\nstring `show x` be executable PureScript code which evaluates to the same\nvalue as the expression `x`.\n","title":"Show","info":{"arguments":[["a",null]],"declType":"typeClass","superclasses":[]},"sourceSpan":{"start":[9,1],"name":"bower_components/purescript-prelude/src/Data/Show.purs","end":[10,22]}},{"children":[],"comments":"Perform a applicative action when a condition is true.\n","title":"when","info":{"declType":"value","type":{"tag":"ForAll","contents":["m",{"tag":"ConstrainedType","contents":[[{"constraintClass":[["Control","Applicative"],"Applicative"],"constraintArgs":[{"tag":"TypeVar","contents":"m"}],"constraintData":null}],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"m"},{"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"m"},{"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}]}]}]},null]}},"sourceSpan":{"start":[57,1],"name":"bower_components/purescript-prelude/src/Control/Applicative.purs","end":[57,63]}},{"children":[],"comments":"The `void` function is used to ignore the type wrapped by a\n[`Functor`](#functor), replacing it with `Unit` and keeping only the type\ninformation provided by the type constructor itself.\n\n`void` is often useful when using `do` notation to change the return type\nof a monadic computation:\n\n```purescript\nmain = forE 1 10 \\n -> void do\n  print n\n  print (n * n)\n```\n","title":"void","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["f",{"tag":"ConstrainedType","contents":[[{"constraintClass":[["Data","Functor"],"Functor"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}],"constraintData":null}],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}]}]},null]},null]}},"sourceSpan":{"start":[58,1],"name":"bower_components/purescript-prelude/src/Data/Functor.purs","end":[58,47]}},{"children":[],"comments":"Perform a applicative action unless a condition is true.\n","title":"unless","info":{"declType":"value","type":{"tag":"ForAll","contents":["m",{"tag":"ConstrainedType","contents":[[{"constraintClass":[["Control","Applicative"],"Applicative"],"constraintArgs":[{"tag":"TypeVar","contents":"m"}],"constraintData":null}],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"m"},{"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"m"},{"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}]}]}]},null]}},"sourceSpan":{"start":[62,1],"name":"bower_components/purescript-prelude/src/Control/Applicative.purs","end":[62,65]}},{"children":[],"comments":"`unit` is the sole inhabitant of the `Unit` type.\n","title":"unit","info":{"declType":"value","type":{"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}},"sourceSpan":{"start":[14,1],"name":"bower_components/purescript-prelude/src/Data/Unit.purs","end":[14,28]}},{"children":[],"comments":"An alias for `true`, which can be useful in guard clauses:\n\n```purescript\nmax x y | x >= y    = x\n        | otherwise = y\n```\n","title":"otherwise","info":{"declType":"value","type":{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}},"sourceSpan":{"start":[9,1],"name":"bower_components/purescript-prelude/src/Data/Boolean.purs","end":[9,21]}},{"children":[],"comments":"`notEq` tests whether one value is _not equal_ to another. Shorthand for\n`not (eq x y)`.\n","title":"notEq","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[[{"constraintClass":[["Data","Eq"],"Eq"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}]}]},null]}},"sourceSpan":{"start":[20,1],"name":"bower_components/purescript-prelude/src/Data/Eq.purs","end":[20,45]}},{"children":[],"comments":"`negate x` can be used as a shorthand for `zero - x`.\n","title":"negate","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[[{"constraintClass":[["Data","Ring"],"Ring"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"a"}]}]},null]}},"sourceSpan":{"start":[31,1],"name":"bower_components/purescript-prelude/src/Data/Ring.purs","end":[31,37]}},{"children":[],"comments":"Take the minimum of two values. If they are considered equal, the first\nargument is chosen.\n","title":"min","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[[{"constraintClass":[["Data","Ord"],"Ord"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"a"}]}]}]},null]}},"sourceSpan":{"start":[111,1],"name":"bower_components/purescript-prelude/src/Data/Ord.purs","end":[111,38]}},{"children":[],"comments":"Take the maximum of two values. If they are considered equal, the first\nargument is chosen.\n","title":"max","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[[{"constraintClass":[["Data","Ord"],"Ord"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"a"}]}]}]},null]}},"sourceSpan":{"start":[120,1],"name":"bower_components/purescript-prelude/src/Data/Ord.purs","end":[120,38]}},{"children":[],"comments":"`liftM1` provides a default implementation of `(<$>)` for any\n[`Monad`](#monad), without using `(<$>)` as provided by the\n[`Functor`](#functor)-[`Monad`](#monad) superclass relationship.\n\n`liftM1` can therefore be used to write [`Functor`](#functor) instances\nas follows:\n\n```purescript\ninstance functorF :: Functor F where\n  map = liftM1\n```\n","title":"liftM1","info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["m",{"tag":"ConstrainedType","contents":[[{"constraintClass":[["Control","Monad"],"Monad"],"constraintArgs":[{"tag":"TypeVar","contents":"m"}],"constraintData":null}],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"m"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"m"},{"tag":"TypeVar","contents":"b"}]}]}]}]},null]},null]},null]}},"sourceSpan":{"start":[43,1],"name":"bower_components/purescript-prelude/src/Control/Monad.purs","end":[43,58]}},{"children":[],"comments":"`liftA1` provides a default implementation of `(<$>)` for any\n[`Applicative`](#applicative) functor, without using `(<$>)` as provided\nby the [`Functor`](#functor)-[`Applicative`](#applicative) superclass\nrelationship.\n\n`liftA1` can therefore be used to write [`Functor`](#functor) instances\nas follows:\n\n```purescript\ninstance functorF :: Functor F where\n  map = liftA1\n```\n","title":"liftA1","info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["f",{"tag":"ConstrainedType","contents":[[{"constraintClass":[["Control","Applicative"],"Applicative"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}],"constraintData":null}],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"b"}]}]}]}]},null]},null]},null]}},"sourceSpan":{"start":[53,1],"name":"bower_components/purescript-prelude/src/Control/Applicative.purs","end":[53,64]}},{"children":[],"comments":"Collapse two applications of a monadic type constructor into one.\n","title":"join","info":{"declType":"value","type":{"tag":"ForAll","contents":["m",{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[[{"constraintClass":[["Control","Bind"],"Bind"],"constraintArgs":[{"tag":"TypeVar","contents":"m"}],"constraintData":null}],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"m"},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"m"},{"tag":"TypeVar","contents":"a"}]}}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"m"},{"tag":"TypeVar","contents":"a"}]}]}]},null]},null]}},"sourceSpan":{"start":[70,1],"name":"bower_components/purescript-prelude/src/Control/Bind.purs","end":[70,45]}},{"children":[],"comments":"Execute a monadic action if a condition holds.\n\nFor example:\n\n```purescript\nmain = ifM ((< 0.5) <$> random)\n         (trace \"Heads\")\n         (trace \"Tails\")\n```\n","title":"ifM","info":{"declType":"value","type":{"tag":"ForAll","contents":["m",{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[[{"constraintClass":[["Control","Bind"],"Bind"],"constraintArgs":[{"tag":"TypeVar","contents":"m"}],"constraintData":null}],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"m"},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"m"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"m"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"m"},{"tag":"TypeVar","contents":"a"}]}]}]}]}]},null]},null]}},"sourceSpan":{"start":[102,1],"name":"bower_components/purescript-prelude/src/Control/Bind.purs","end":[102,60]}},{"children":[],"comments":"Flips the order of the arguments to a function of two arguments.\n\n```purescript\nflip const 1 2 = const 2 1 = 2\n```\n","title":"flip","info":{"declType":"value","type":{"tag":"ForAll","contents":["c",{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeVar","contents":"c"}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"c"}]}]}]},null]},null]},null]}},"sourceSpan":{"start":[17,1],"name":"bower_components/purescript-prelude/src/Data/Function.purs","end":[17,51]}},{"children":[],"comments":"Returns its first argument and ignores its second.\n\n```purescript\nconst 1 \"hello\" = 1\n```\n","title":"const","info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeVar","contents":"a"}]}]},null]},null]}},"sourceSpan":{"start":[25,1],"name":"bower_components/purescript-prelude/src/Data/Function.purs","end":[25,33]}},{"children":[],"comments":"Compares two values by mapping them to a type with an `Ord` instance.\n","title":"comparing","info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[[{"constraintClass":[["Data","Ord"],"Ord"],"constraintArgs":[{"tag":"TypeVar","contents":"b"}],"constraintData":null}],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeConstructor","contents":[["Data","Ordering"],"Ordering"]}]}]}}]}]},null]},null]}},"sourceSpan":{"start":[106,1],"name":"bower_components/purescript-prelude/src/Data/Ord.purs","end":[106,67]}},{"children":[],"comments":"Clamp a value between a minimum and a maximum. For example:\n\n``` purescript\nlet f = clamp 0 10\nf (-5) == 0\nf 5    == 5\nf 15   == 10\n```\n","title":"clamp","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[[{"constraintClass":[["Data","Ord"],"Ord"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"a"}]}]}]}]},null]}},"sourceSpan":{"start":[135,1],"name":"bower_components/purescript-prelude/src/Data/Ord.purs","end":[135,45]}},{"children":[],"comments":"Test whether a value is between a minimum and a maximum (inclusive).\nFor example:\n\n``` purescript\nlet f = between 0 10\nf 0    == true\nf (-5) == false\nf 5    == true\nf 10   == true\nf 15   == false\n```\n","title":"between","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[[{"constraintClass":[["Data","Ord"],"Ord"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}]}]}]},null]}},"sourceSpan":{"start":[149,1],"name":"bower_components/purescript-prelude/src/Data/Ord.purs","end":[149,53]}},{"children":[],"comments":"`ap` provides a default implementation of `(<*>)` for any\n[`Monad`](#monad), without using `(<*>)` as provided by the\n[`Apply`](#apply)-[`Monad`](#monad) superclass relationship.\n\n`ap` can therefore be used to write [`Apply`](#apply) instances as\nfollows:\n\n```purescript\ninstance applyF :: Apply F where\n  apply = ap\n```\n","title":"ap","info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["m",{"tag":"ConstrainedType","contents":[[{"constraintClass":[["Control","Monad"],"Monad"],"constraintArgs":[{"tag":"TypeVar","contents":"m"}],"constraintData":null}],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"m"},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"m"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"m"},{"tag":"TypeVar","contents":"b"}]}]}]}]},null]},null]},null]}},"sourceSpan":{"start":[59,1],"name":"bower_components/purescript-prelude/src/Control/Monad.purs","end":[59,56]}},{"children":[],"comments":null,"title":"absurd","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Void"],"Void"]}]},{"tag":"TypeVar","contents":"a"}]},null]}},"sourceSpan":{"start":[10,1],"name":"bower_components/purescript-prelude/src/Data/Void.purs","end":[10,30]}},{"children":[],"comments":null,"title":"(||)","info":{"declType":"alias","alias":[["Data","HeytingAlgebra"],{"Right":{"Left":{"Ident":"disj"}}}],"fixity":{"associativity":"infixr","precedence":2}},"sourceSpan":{"start":[42,1],"name":"bower_components/purescript-prelude/src/Data/HeytingAlgebra.purs","end":[42,20]}},{"children":[],"comments":null,"title":"(>>>)","info":{"declType":"alias","alias":[["Control","Semigroupoid"],{"Right":{"Left":{"Ident":"composeFlipped"}}}],"fixity":{"associativity":"infixr","precedence":9}},"sourceSpan":{"start":[24,1],"name":"bower_components/purescript-prelude/src/Control/Semigroupoid.purs","end":[24,28]}},{"children":[],"comments":null,"title":"(>>=)","info":{"declType":"alias","alias":[["Control","Bind"],{"Right":{"Left":{"Ident":"bind"}}}],"fixity":{"associativity":"infixl","precedence":1}},"sourceSpan":{"start":[49,1],"name":"bower_components/purescript-prelude/src/Control/Bind.purs","end":[49,21]}},{"children":[],"comments":null,"title":"(>=>)","info":{"declType":"alias","alias":[["Control","Bind"],{"Right":{"Left":{"Ident":"composeKleisli"}}}],"fixity":{"associativity":"infixr","precedence":1}},"sourceSpan":{"start":[85,1],"name":"bower_components/purescript-prelude/src/Control/Bind.purs","end":[85,31]}},{"children":[],"comments":null,"title":"(>=)","info":{"declType":"alias","alias":[["Data","Ord"],{"Right":{"Left":{"Ident":"greaterThanOrEq"}}}],"fixity":{"associativity":"infixl","precedence":4}},"sourceSpan":{"start":[103,1],"name":"bower_components/purescript-prelude/src/Data/Ord.purs","end":[103,31]}},{"children":[],"comments":null,"title":"(>)","info":{"declType":"alias","alias":[["Data","Ord"],{"Right":{"Left":{"Ident":"greaterThan"}}}],"fixity":{"associativity":"infixl","precedence":4}},"sourceSpan":{"start":[102,1],"name":"bower_components/purescript-prelude/src/Data/Ord.purs","end":[102,26]}},{"children":[],"comments":null,"title":"(==)","info":{"declType":"alias","alias":[["Data","Eq"],{"Right":{"Left":{"Ident":"eq"}}}],"fixity":{"associativity":"infix","precedence":4}},"sourceSpan":{"start":[16,1],"name":"bower_components/purescript-prelude/src/Data/Eq.purs","end":[16,17]}},{"children":[],"comments":null,"title":"(=<<)","info":{"declType":"alias","alias":[["Control","Bind"],{"Right":{"Left":{"Ident":"bindFlipped"}}}],"fixity":{"associativity":"infixl","precedence":1}},"sourceSpan":{"start":[59,1],"name":"bower_components/purescript-prelude/src/Control/Bind.purs","end":[59,28]}},{"children":[],"comments":null,"title":"(<>)","info":{"declType":"alias","alias":[["Data","Semigroup"],{"Right":{"Left":{"Ident":"append"}}}],"fixity":{"associativity":"infixr","precedence":5}},"sourceSpan":{"start":[17,1],"name":"bower_components/purescript-prelude/src/Data/Semigroup.purs","end":[17,22]}},{"children":[],"comments":null,"title":"(<=<)","info":{"declType":"alias","alias":[["Control","Bind"],{"Right":{"Left":{"Ident":"composeKleisliFlipped"}}}],"fixity":{"associativity":"infixr","precedence":1}},"sourceSpan":{"start":[91,1],"name":"bower_components/purescript-prelude/src/Control/Bind.purs","end":[91,38]}},{"children":[],"comments":null,"title":"(<=)","info":{"declType":"alias","alias":[["Data","Ord"],{"Right":{"Left":{"Ident":"lessThanOrEq"}}}],"fixity":{"associativity":"infixl","precedence":4}},"sourceSpan":{"start":[101,1],"name":"bower_components/purescript-prelude/src/Data/Ord.purs","end":[101,28]}},{"children":[],"comments":null,"title":"(<<<)","info":{"declType":"alias","alias":[["Control","Semigroupoid"],{"Right":{"Left":{"Ident":"compose"}}}],"fixity":{"associativity":"infixr","precedence":9}},"sourceSpan":{"start":[18,1],"name":"bower_components/purescript-prelude/src/Control/Semigroupoid.purs","end":[18,24]}},{"children":[],"comments":null,"title":"(<*>)","info":{"declType":"alias","alias":[["Control","Apply"],{"Right":{"Left":{"Ident":"apply"}}}],"fixity":{"associativity":"infixl","precedence":4}},"sourceSpan":{"start":[38,1],"name":"bower_components/purescript-prelude/src/Control/Apply.purs","end":[38,22]}},{"children":[],"comments":null,"title":"(<*)","info":{"declType":"alias","alias":[["Control","Apply"],{"Right":{"Left":{"Ident":"applyFirst"}}}],"fixity":{"associativity":"infixl","precedence":4}},"sourceSpan":{"start":[52,1],"name":"bower_components/purescript-prelude/src/Control/Apply.purs","end":[52,26]}},{"children":[],"comments":null,"title":"(<$>)","info":{"declType":"alias","alias":[["Data","Functor"],{"Right":{"Left":{"Ident":"map"}}}],"fixity":{"associativity":"infixl","precedence":4}},"sourceSpan":{"start":[26,1],"name":"bower_components/purescript-prelude/src/Data/Functor.purs","end":[26,20]}},{"children":[],"comments":null,"title":"(<$)","info":{"declType":"alias","alias":[["Data","Functor"],{"Right":{"Left":{"Ident":"voidRight"}}}],"fixity":{"associativity":"infixl","precedence":4}},"sourceSpan":{"start":[66,1],"name":"bower_components/purescript-prelude/src/Data/Functor.purs","end":[66,25]}},{"children":[],"comments":null,"title":"(<#>)","info":{"declType":"alias","alias":[["Data","Functor"],{"Right":{"Left":{"Ident":"mapFlipped"}}}],"fixity":{"associativity":"infixl","precedence":1}},"sourceSpan":{"start":[36,1],"name":"bower_components/purescript-prelude/src/Data/Functor.purs","end":[36,27]}},{"children":[],"comments":null,"title":"(<)","info":{"declType":"alias","alias":[["Data","Ord"],{"Right":{"Left":{"Ident":"lessThan"}}}],"fixity":{"associativity":"infixl","precedence":4}},"sourceSpan":{"start":[100,1],"name":"bower_components/purescript-prelude/src/Data/Ord.purs","end":[100,23]}},{"children":[],"comments":null,"title":"(/=)","info":{"declType":"alias","alias":[["Data","Eq"],{"Right":{"Left":{"Ident":"notEq"}}}],"fixity":{"associativity":"infix","precedence":4}},"sourceSpan":{"start":[23,1],"name":"bower_components/purescript-prelude/src/Data/Eq.purs","end":[23,20]}},{"children":[],"comments":null,"title":"(/)","info":{"declType":"alias","alias":[["Data","EuclideanRing"],{"Right":{"Left":{"Ident":"div"}}}],"fixity":{"associativity":"infixl","precedence":7}},"sourceSpan":{"start":[26,1],"name":"bower_components/purescript-prelude/src/Data/EuclideanRing.purs","end":[26,18]}},{"children":[],"comments":null,"title":"(-)","info":{"declType":"alias","alias":[["Data","Ring"],{"Right":{"Left":{"Ident":"sub"}}}],"fixity":{"associativity":"infixl","precedence":6}},"sourceSpan":{"start":[19,1],"name":"bower_components/purescript-prelude/src/Data/Ring.purs","end":[19,18]}},{"children":[],"comments":null,"title":"(+)","info":{"declType":"alias","alias":[["Data","Semiring"],{"Right":{"Left":{"Ident":"add"}}}],"fixity":{"associativity":"infixl","precedence":6}},"sourceSpan":{"start":[27,1],"name":"bower_components/purescript-prelude/src/Data/Semiring.purs","end":[27,18]}},{"children":[],"comments":null,"title":"(*>)","info":{"declType":"alias","alias":[["Control","Apply"],{"Right":{"Left":{"Ident":"applySecond"}}}],"fixity":{"associativity":"infixl","precedence":4}},"sourceSpan":{"start":[58,1],"name":"bower_components/purescript-prelude/src/Control/Apply.purs","end":[58,27]}},{"children":[],"comments":null,"title":"(*)","info":{"declType":"alias","alias":[["Data","Semiring"],{"Right":{"Left":{"Ident":"mul"}}}],"fixity":{"associativity":"infixl","precedence":7}},"sourceSpan":{"start":[28,1],"name":"bower_components/purescript-prelude/src/Data/Semiring.purs","end":[28,18]}},{"children":[],"comments":null,"title":"(&&)","info":{"declType":"alias","alias":[["Data","HeytingAlgebra"],{"Right":{"Left":{"Ident":"conj"}}}],"fixity":{"associativity":"infixr","precedence":3}},"sourceSpan":{"start":[41,1],"name":"bower_components/purescript-prelude/src/Data/HeytingAlgebra.purs","end":[41,20]}},{"children":[],"comments":null,"title":"($>)","info":{"declType":"alias","alias":[["Data","Functor"],{"Right":{"Left":{"Ident":"voidLeft"}}}],"fixity":{"associativity":"infixl","precedence":4}},"sourceSpan":{"start":[72,1],"name":"bower_components/purescript-prelude/src/Data/Functor.purs","end":[72,22]}},{"children":[],"comments":"Applies a function to an argument: the reverse of `(#)`.\n\n```purescript\nlength $ groupBy productCategory $ filter isInStock $ products\n```\n\nis equivalent to:\n\n```purescript\nlength (groupBy productCategory (filter isInStock products))\n```\n\nOr another alternative equivalent, applying chain of composed functions to\na value:\n\n```purescript\nlength <<< groupBy productCategory <<< filter isInStock $ products\n```\n","title":"($)","info":{"declType":"alias","alias":[["Data","Function"],{"Right":{"Left":{"Ident":"apply"}}}],"fixity":{"associativity":"infixr","precedence":0}},"sourceSpan":{"start":[52,1],"name":"bower_components/purescript-prelude/src/Data/Function.purs","end":[52,20]}},{"children":[],"comments":"Applies an argument to a function: the reverse of `($)`.\n\n```purescript\nproducts # filter isInStock # groupBy productCategory # length\n```\n\nis equivalent to:\n\n```purescript\nlength (groupBy productCategory (filter isInStock products))\n```\n\nOr another alternative equivalent, applying a value to a chain of composed\nfunctions:\n\n```purescript\nproducts # filter isInStock >>> groupBy productCategory >>> length\n```\n","title":"(#)","info":{"declType":"alias","alias":[["Data","Function"],{"Right":{"Left":{"Ident":"applyFlipped"}}}],"fixity":{"associativity":"infixl","precedence":1}},"sourceSpan":{"start":[78,1],"name":"bower_components/purescript-prelude/src/Data/Function.purs","end":[78,27]}},{"children":[],"comments":null,"title":"type (~>)","info":{"declType":"alias","alias":[["Data","NaturalTransformation"],{"Left":"NaturalTransformation"}],"fixity":{"associativity":"infixr","precedence":4}},"sourceSpan":{"start":[19,1],"name":"bower_components/purescript-prelude/src/Data/NaturalTransformation.purs","end":[19,40]}}]}],"name":"Quantities","comments":"A helper module which re-exports all sub-modules.\n","declarations":[]}],"resolvedDependencies":{"purescript-free":"1.2.0","purescript-proxy":"1.0.0","purescript-exceptions":"1.0.0","purescript-control":"1.0.0","purescript-console":"1.0.0","purescript-either":"1.0.0","purescript-arrays":"1.1.0","purescript-maybe":"1.0.0","purescript-exists":"1.0.0","purescript-distributive":"1.0.0","purescript-unfoldable":"1.0.0","purescript-invariant":"1.0.0","purescript-lazy":"1.0.0","purescript-monoid":"1.0.0","purescript-aff":"1.0.0","purescript-foldable-traversable":"1.0.0","purescript-tailrec":"1.0.0","purescript-prelude":"1.0.1","purescript-inject":"1.0.0","purescript-st":"1.0.0","purescript-bifunctors":"1.0.0","purescript-nonempty":"1.1.0","purescript-generics":"1.0.1","purescript-unsafe-coerce":"1.0.0","purescript-refs":"1.0.0","purescript-integers":"1.1.0","purescript-eff":"1.0.0","purescript-test-unit":"7.0.1","purescript-transformers":"1.0.0","purescript-math":"2.0.0","purescript-psci-support":"1.0.0","purescript-catenable-lists":"1.1.0","purescript-random":"1.0.0","purescript-parallel":"1.1.0","purescript-tuples":"1.0.0","purescript-partial":"1.1.2","purescript-quickcheck":"1.0.0","purescript-strings":"1.1.0","purescript-identity":"1.1.0","purescript-functor-coproducts":"1.1.0","purescript-lists":"1.0.1","purescript-functions":"1.0.0"},"bookmarks":[{"package":null,"item":["Data.Quantity","Quantity"]},{"package":null,"item":["Data.Quantity","quantity"]},{"package":null,"item":["Data.Quantity","(.*)"]},{"package":null,"item":["Data.Quantity","derivedUnit"]},{"package":null,"item":["Data.Quantity","toStandard"]},{"package":null,"item":["Data.Quantity","approximatelyEqual"]},{"package":null,"item":["Data.Quantity","UnificationError"]},{"package":null,"item":["Data.Quantity","errorMessage"]},{"package":null,"item":["Data.Quantity","scalar"]},{"package":null,"item":["Data.Quantity","convert"]},{"package":null,"item":["Data.Quantity","convertTo"]},{"package":null,"item":["Data.Quantity","asValueIn"]},{"package":null,"item":["Data.Quantity","qAdd"]},{"package":null,"item":["Data.Quantity","(⊕)"]},{"package":null,"item":["Data.Quantity","qSubtract"]},{"package":null,"item":["Data.Quantity","(⊖)"]},{"package":null,"item":["Data.Quantity","qMultiply"]},{"package":null,"item":["Data.Quantity","(⊗)"]},{"package":null,"item":["Data.Quantity","qDivide"]},{"package":null,"item":["Data.Quantity","(⊘)"]},{"package":null,"item":["Data.Quantity","pow"]},{"package":null,"item":["Data.Quantity","abs"]},{"package":null,"item":["Data.Quantity","sqrt"]},{"package":null,"item":["Data.Units","DerivedUnit"]},{"package":null,"item":["Data.Units","makeStandard"]},{"package":null,"item":["Data.Units","makeNonStandard"]},{"package":null,"item":["Data.Units","toStandardUnit"]},{"package":null,"item":["Data.Units","toString"]},{"package":null,"item":["Data.Units","power"]},{"package":null,"item":["Data.Units","(.^)"]},{"package":null,"item":["Data.Units","divideUnits"]},{"package":null,"item":["Data.Units","(./)"]},{"package":null,"item":["Data.Units","unity"]},{"package":null,"item":["Data.Units","atto"]},{"package":null,"item":["Data.Units","femto"]},{"package":null,"item":["Data.Units","pico"]},{"package":null,"item":["Data.Units","nano"]},{"package":null,"item":["Data.Units","micro"]},{"package":null,"item":["Data.Units","milli"]},{"package":null,"item":["Data.Units","centi"]},{"package":null,"item":["Data.Units","deci"]},{"package":null,"item":["Data.Units","hecto"]},{"package":null,"item":["Data.Units","kilo"]},{"package":null,"item":["Data.Units","mega"]},{"package":null,"item":["Data.Units","giga"]},{"package":null,"item":["Data.Units","tera"]},{"package":null,"item":["Data.Units","peta"]},{"package":null,"item":["Data.Units","exa"]},{"package":null,"item":["Data.Units.Bit","bit"]},{"package":null,"item":["Data.Units.Bit","byte"]},{"package":null,"item":["Data.Units.Imperial","inch"]},{"package":null,"item":["Data.Units.Imperial","foot"]},{"package":null,"item":["Data.Units.Imperial","yard"]},{"package":null,"item":["Data.Units.Imperial","mile"]},{"package":null,"item":["Data.Units.Imperial","ounce"]},{"package":null,"item":["Data.Units.Imperial","pound"]},{"package":null,"item":["Data.Units.SI","meter"]},{"package":null,"item":["Data.Units.SI","gram"]},{"package":null,"item":["Data.Units.SI","second"]},{"package":null,"item":["Data.Units.Time","minute"]},{"package":null,"item":["Data.Units.Time","hour"]},{"package":null,"item":["Data.Units.Time","day"]},{"package":null,"item":["Data.Units.Time","week"]},{"package":null,"item":["Data.Units.SI.Derived","hertz"]},{"package":null,"item":["Data.Units.SI.Derived","radian"]},{"package":null,"item":["Data.Units.SI.Derived","steradian"]},{"package":null,"item":["Data.Units.SI.Derived","newton"]},{"package":null,"item":["Data.Units.SI.Derived","joule"]},{"package":null,"item":["Data.Units.SI.Derived","watt"]},{"package":"purescript-strings","item":["Data.String","charAt"]},{"package":"purescript-strings","item":["Data.String","singleton"]},{"package":"purescript-strings","item":["Data.String","charCodeAt"]},{"package":"purescript-strings","item":["Data.String","toChar"]},{"package":"purescript-strings","item":["Data.String","null"]},{"package":"purescript-strings","item":["Data.String","uncons"]},{"package":"purescript-strings","item":["Data.String","uncons"]},{"package":"purescript-strings","item":["Data.String","takeWhile"]},{"package":"purescript-strings","item":["Data.String","dropWhile"]},{"package":"purescript-strings","item":["Data.String","stripPrefix"]},{"package":"purescript-strings","item":["Data.String","stripSuffix"]},{"package":"purescript-strings","item":["Data.String","fromCharArray"]},{"package":"purescript-strings","item":["Data.String","contains"]},{"package":"purescript-strings","item":["Data.String","indexOf"]},{"package":"purescript-strings","item":["Data.String","indexOf'"]},{"package":"purescript-strings","item":["Data.String","lastIndexOf"]},{"package":"purescript-strings","item":["Data.String","lastIndexOf'"]},{"package":"purescript-strings","item":["Data.String","length"]},{"package":"purescript-strings","item":["Data.String","localeCompare"]},{"package":"purescript-strings","item":["Data.String","replace"]},{"package":"purescript-strings","item":["Data.String","take"]},{"package":"purescript-strings","item":["Data.String","drop"]},{"package":"purescript-strings","item":["Data.String","count"]},{"package":"purescript-strings","item":["Data.String","split"]},{"package":"purescript-strings","item":["Data.String","toCharArray"]},{"package":"purescript-strings","item":["Data.String","toLower"]},{"package":"purescript-strings","item":["Data.String","toUpper"]},{"package":"purescript-strings","item":["Data.String","trim"]},{"package":"purescript-strings","item":["Data.String","joinWith"]},{"package":"purescript-strings","item":["Data.Char","toCharCode"]},{"package":"purescript-strings","item":["Data.Char","fromCharCode"]},{"package":"purescript-strings","item":["Data.Char","toLower"]},{"package":"purescript-strings","item":["Data.Char","toUpper"]},{"package":"purescript-strings","item":["Data.String.Regex","Regex"]},{"package":"purescript-strings","item":["Data.String.Regex","RegexFlags"]},{"package":"purescript-strings","item":["Data.String.Regex","noFlags"]},{"package":"purescript-strings","item":["Data.String.Regex","regex"]},{"package":"purescript-strings","item":["Data.String.Regex","source"]},{"package":"purescript-strings","item":["Data.String.Regex","flags"]},{"package":"purescript-strings","item":["Data.String.Regex","renderFlags"]},{"package":"purescript-strings","item":["Data.String.Regex","parseFlags"]},{"package":"purescript-strings","item":["Data.String.Regex","test"]},{"package":"purescript-strings","item":["Data.String.Regex","match"]},{"package":"purescript-strings","item":["Data.String.Regex","replace"]},{"package":"purescript-strings","item":["Data.String.Regex","replace'"]},{"package":"purescript-strings","item":["Data.String.Regex","search"]},{"package":"purescript-strings","item":["Data.String.Regex","split"]},{"package":"purescript-strings","item":["Data.String.Unsafe","charCodeAt"]},{"package":"purescript-strings","item":["Data.String.Unsafe","charAt"]},{"package":"purescript-strings","item":["Data.String.Unsafe","char"]},{"package":"purescript-distributive","item":["Data.Distributive","Distributive"]},{"package":"purescript-distributive","item":["Data.Distributive","distributiveIdentity"]},{"package":"purescript-distributive","item":["Data.Distributive","distributiveFunction"]},{"package":"purescript-distributive","item":["Data.Distributive","distributeDefault"]},{"package":"purescript-distributive","item":["Data.Distributive","collectDefault"]},{"package":"purescript-distributive","item":["Data.Distributive","cotraverse"]},{"package":"purescript-aff","item":["Control.Monad.Aff","Aff"]},{"package":"purescript-aff","item":["Control.Monad.Aff","PureAff"]},{"package":"purescript-aff","item":["Control.Monad.Aff","Canceler"]},{"package":"purescript-aff","item":["Control.Monad.Aff","cancel"]},{"package":"purescript-aff","item":["Control.Monad.Aff","cancelWith"]},{"package":"purescript-aff","item":["Control.Monad.Aff","launchAff"]},{"package":"purescript-aff","item":["Control.Monad.Aff","runAff"]},{"package":"purescript-aff","item":["Control.Monad.Aff","makeAff"]},{"package":"purescript-aff","item":["Control.Monad.Aff","makeAff'"]},{"package":"purescript-aff","item":["Control.Monad.Aff","later"]},{"package":"purescript-aff","item":["Control.Monad.Aff","later'"]},{"package":"purescript-aff","item":["Control.Monad.Aff","finally"]},{"package":"purescript-aff","item":["Control.Monad.Aff","forkAff"]},{"package":"purescript-aff","item":["Control.Monad.Aff","forkAll"]},{"package":"purescript-aff","item":["Control.Monad.Aff","attempt"]},{"package":"purescript-aff","item":["Control.Monad.Aff","apathize"]},{"package":"purescript-aff","item":["Control.Monad.Aff","liftEff'"]},{"package":"purescript-aff","item":["Control.Monad.Aff","nonCanceler"]},{"package":"purescript-aff","item":["Control.Monad.Aff.Internal","AVar"]},{"package":"purescript-aff","item":["Control.Monad.Aff.Internal","AVBox"]},{"package":"purescript-aff","item":["Control.Monad.Aff.Internal","_makeVar"]},{"package":"purescript-aff","item":["Control.Monad.Aff.Internal","_takeVar"]},{"package":"purescript-aff","item":["Control.Monad.Aff.Internal","_putVar"]},{"package":"purescript-aff","item":["Control.Monad.Aff.Internal","_killVar"]},{"package":"purescript-aff","item":["Control.Monad.Aff.Class","MonadAff"]},{"package":"purescript-aff","item":["Control.Monad.Aff.Class","monadAffAff"]},{"package":"purescript-aff","item":["Control.Monad.Aff.Class","monadAffContT"]},{"package":"purescript-aff","item":["Control.Monad.Aff.Class","monadAffExceptT"]},{"package":"purescript-aff","item":["Control.Monad.Aff.Class","monadAffListT"]},{"package":"purescript-aff","item":["Control.Monad.Aff.Class","monadAffMaybe"]},{"package":"purescript-aff","item":["Control.Monad.Aff.Class","monadAffReader"]},{"package":"purescript-aff","item":["Control.Monad.Aff.Class","monadAffRWS"]},{"package":"purescript-aff","item":["Control.Monad.Aff.Class","monadAffState"]},{"package":"purescript-aff","item":["Control.Monad.Aff.Class","monadAffWriter"]},{"package":"purescript-aff","item":["Control.Monad.Aff.Unsafe","unsafeTrace"]},{"package":"purescript-aff","item":["Control.Monad.Aff.Unsafe","unsafeInterleaveAff"]},{"package":"purescript-aff","item":["Control.Monad.Aff.Console","log"]},{"package":"purescript-aff","item":["Control.Monad.Aff.Console","logShow"]},{"package":"purescript-aff","item":["Control.Monad.Aff.AVar","AVAR"]},{"package":"purescript-aff","item":["Control.Monad.Aff.AVar","AffAVar"]},{"package":"purescript-aff","item":["Control.Monad.Aff.AVar","makeVar"]},{"package":"purescript-aff","item":["Control.Monad.Aff.AVar","makeVar'"]},{"package":"purescript-aff","item":["Control.Monad.Aff.AVar","takeVar"]},{"package":"purescript-aff","item":["Control.Monad.Aff.AVar","putVar"]},{"package":"purescript-aff","item":["Control.Monad.Aff.AVar","modifyVar"]},{"package":"purescript-aff","item":["Control.Monad.Aff.AVar","killVar"]},{"package":"purescript-st","item":["Control.Monad.ST","ST"]},{"package":"purescript-st","item":["Control.Monad.ST","STRef"]},{"package":"purescript-st","item":["Control.Monad.ST","newSTRef"]},{"package":"purescript-st","item":["Control.Monad.ST","readSTRef"]},{"package":"purescript-st","item":["Control.Monad.ST","modifySTRef"]},{"package":"purescript-st","item":["Control.Monad.ST","writeSTRef"]},{"package":"purescript-st","item":["Control.Monad.ST","runST"]},{"package":"purescript-st","item":["Control.Monad.ST","pureST"]},{"package":"purescript-eff","item":["Control.Monad.Eff","Eff"]},{"package":"purescript-eff","item":["Control.Monad.Eff","Pure"]},{"package":"purescript-eff","item":["Control.Monad.Eff","runPure"]},{"package":"purescript-eff","item":["Control.Monad.Eff","untilE"]},{"package":"purescript-eff","item":["Control.Monad.Eff","whileE"]},{"package":"purescript-eff","item":["Control.Monad.Eff","forE"]},{"package":"purescript-eff","item":["Control.Monad.Eff","foreachE"]},{"package":"purescript-eff","item":["Control.Monad.Eff.Class","MonadEff"]},{"package":"purescript-eff","item":["Control.Monad.Eff.Class","monadEffEff"]},{"package":"purescript-eff","item":["Control.Monad.Eff.Unsafe","unsafeInterleaveEff"]},{"package":"purescript-eff","item":["Control.Monad.Eff.Unsafe","unsafePerformEff"]},{"package":"purescript-maybe","item":["Data.Maybe","Maybe"]},{"package":"purescript-maybe","item":["Data.Maybe","functorMaybe"]},{"package":"purescript-maybe","item":["Data.Maybe","applyMaybe"]},{"package":"purescript-maybe","item":["Data.Maybe","applicativeMaybe"]},{"package":"purescript-maybe","item":["Data.Maybe","altMaybe"]},{"package":"purescript-maybe","item":["Data.Maybe","plusMaybe"]},{"package":"purescript-maybe","item":["Data.Maybe","alternativeMaybe"]},{"package":"purescript-maybe","item":["Data.Maybe","bindMaybe"]},{"package":"purescript-maybe","item":["Data.Maybe","monadMaybe"]},{"package":"purescript-maybe","item":["Data.Maybe","monadZeroMaybe"]},{"package":"purescript-maybe","item":["Data.Maybe","extendMaybe"]},{"package":"purescript-maybe","item":["Data.Maybe","invariantMaybe"]},{"package":"purescript-maybe","item":["Data.Maybe","semigroupMaybe"]},{"package":"purescript-maybe","item":["Data.Maybe","monoidMaybe"]},{"package":"purescript-maybe","item":["Data.Maybe","eqMaybe"]},{"package":"purescript-maybe","item":["Data.Maybe","ordMaybe"]},{"package":"purescript-maybe","item":["Data.Maybe","boundedMaybe"]},{"package":"purescript-maybe","item":["Data.Maybe","showMaybe"]},{"package":"purescript-maybe","item":["Data.Maybe","maybe"]},{"package":"purescript-maybe","item":["Data.Maybe","maybe"]},{"package":"purescript-maybe","item":["Data.Maybe","maybe'"]},{"package":"purescript-maybe","item":["Data.Maybe","maybe'"]},{"package":"purescript-maybe","item":["Data.Maybe","fromMaybe"]},{"package":"purescript-maybe","item":["Data.Maybe","fromMaybe'"]},{"package":"purescript-maybe","item":["Data.Maybe","isJust"]},{"package":"purescript-maybe","item":["Data.Maybe","isNothing"]},{"package":"purescript-maybe","item":["Data.Maybe","fromJust"]},{"package":"purescript-maybe","item":["Data.Maybe.First","First"]},{"package":"purescript-maybe","item":["Data.Maybe.First","runFirst"]},{"package":"purescript-maybe","item":["Data.Maybe.First","eqFirst"]},{"package":"purescript-maybe","item":["Data.Maybe.First","ordFirst"]},{"package":"purescript-maybe","item":["Data.Maybe.First","boundedFirst"]},{"package":"purescript-maybe","item":["Data.Maybe.First","functorFirst"]},{"package":"purescript-maybe","item":["Data.Maybe.First","invariantFirst"]},{"package":"purescript-maybe","item":["Data.Maybe.First","applyFirst"]},{"package":"purescript-maybe","item":["Data.Maybe.First","applicativeFirst"]},{"package":"purescript-maybe","item":["Data.Maybe.First","bindFirst"]},{"package":"purescript-maybe","item":["Data.Maybe.First","monadFirst"]},{"package":"purescript-maybe","item":["Data.Maybe.First","extendFirst"]},{"package":"purescript-maybe","item":["Data.Maybe.First","showFirst"]},{"package":"purescript-maybe","item":["Data.Maybe.First","semigroupFirst"]},{"package":"purescript-maybe","item":["Data.Maybe.First","monoidFirst"]},{"package":"purescript-maybe","item":["Data.Maybe.Last","Last"]},{"package":"purescript-maybe","item":["Data.Maybe.Last","runLast"]},{"package":"purescript-maybe","item":["Data.Maybe.Last","eqLast"]},{"package":"purescript-maybe","item":["Data.Maybe.Last","ordLast"]},{"package":"purescript-maybe","item":["Data.Maybe.Last","boundedLast"]},{"package":"purescript-maybe","item":["Data.Maybe.Last","functorLast"]},{"package":"purescript-maybe","item":["Data.Maybe.Last","invariantLast"]},{"package":"purescript-maybe","item":["Data.Maybe.Last","applyLast"]},{"package":"purescript-maybe","item":["Data.Maybe.Last","applicativeLast"]},{"package":"purescript-maybe","item":["Data.Maybe.Last","bindLast"]},{"package":"purescript-maybe","item":["Data.Maybe.Last","monadLast"]},{"package":"purescript-maybe","item":["Data.Maybe.Last","extendLast"]},{"package":"purescript-maybe","item":["Data.Maybe.Last","showLast"]},{"package":"purescript-maybe","item":["Data.Maybe.Last","semigroupLast"]},{"package":"purescript-maybe","item":["Data.Maybe.Last","monoidLast"]},{"package":"purescript-monoid","item":["Data.Monoid","Monoid"]},{"package":"purescript-monoid","item":["Data.Monoid","monoidFn"]},{"package":"purescript-monoid","item":["Data.Monoid.Endo","Endo"]},{"package":"purescript-monoid","item":["Data.Monoid.Endo","runEndo"]},{"package":"purescript-monoid","item":["Data.Monoid.Endo","invariantEndo"]},{"package":"purescript-monoid","item":["Data.Monoid.Endo","semigroupEndo"]},{"package":"purescript-monoid","item":["Data.Monoid.Endo","monoidEndo"]},{"package":"purescript-monoid","item":["Data.Monoid.Dual","Dual"]},{"package":"purescript-monoid","item":["Data.Monoid.Dual","runDual"]},{"package":"purescript-monoid","item":["Data.Monoid.Dual","eqDual"]},{"package":"purescript-monoid","item":["Data.Monoid.Dual","ordDual"]},{"package":"purescript-monoid","item":["Data.Monoid.Dual","boundedDual"]},{"package":"purescript-monoid","item":["Data.Monoid.Dual","functorDual"]},{"package":"purescript-monoid","item":["Data.Monoid.Dual","invariantDual"]},{"package":"purescript-monoid","item":["Data.Monoid.Dual","applyDual"]},{"package":"purescript-monoid","item":["Data.Monoid.Dual","applicativeDual"]},{"package":"purescript-monoid","item":["Data.Monoid.Dual","bindDual"]},{"package":"purescript-monoid","item":["Data.Monoid.Dual","monadDual"]},{"package":"purescript-monoid","item":["Data.Monoid.Dual","extendDual"]},{"package":"purescript-monoid","item":["Data.Monoid.Dual","comonadDual"]},{"package":"purescript-monoid","item":["Data.Monoid.Dual","showDual"]},{"package":"purescript-monoid","item":["Data.Monoid.Dual","semigroupDual"]},{"package":"purescript-monoid","item":["Data.Monoid.Dual","monoidDual"]},{"package":"purescript-monoid","item":["Data.Monoid.Multiplicative","Multiplicative"]},{"package":"purescript-monoid","item":["Data.Monoid.Multiplicative","runMultiplicative"]},{"package":"purescript-monoid","item":["Data.Monoid.Multiplicative","eqMultiplicative"]},{"package":"purescript-monoid","item":["Data.Monoid.Multiplicative","ordMultiplicative"]},{"package":"purescript-monoid","item":["Data.Monoid.Multiplicative","boundedMultiplicative"]},{"package":"purescript-monoid","item":["Data.Monoid.Multiplicative","functorMultiplicative"]},{"package":"purescript-monoid","item":["Data.Monoid.Multiplicative","invariantMultiplicative"]},{"package":"purescript-monoid","item":["Data.Monoid.Multiplicative","applyMultiplicative"]},{"package":"purescript-monoid","item":["Data.Monoid.Multiplicative","applicativeMultiplicative"]},{"package":"purescript-monoid","item":["Data.Monoid.Multiplicative","bindMultiplicative"]},{"package":"purescript-monoid","item":["Data.Monoid.Multiplicative","monadMultiplicative"]},{"package":"purescript-monoid","item":["Data.Monoid.Multiplicative","extendMultiplicative"]},{"package":"purescript-monoid","item":["Data.Monoid.Multiplicative","comonadMultiplicative"]},{"package":"purescript-monoid","item":["Data.Monoid.Multiplicative","showMultiplicative"]},{"package":"purescript-monoid","item":["Data.Monoid.Multiplicative","semigroupMultiplicative"]},{"package":"purescript-monoid","item":["Data.Monoid.Multiplicative","monoidMultiplicative"]},{"package":"purescript-monoid","item":["Data.Monoid.Additive","Additive"]},{"package":"purescript-monoid","item":["Data.Monoid.Additive","runAdditive"]},{"package":"purescript-monoid","item":["Data.Monoid.Additive","eqAdditive"]},{"package":"purescript-monoid","item":["Data.Monoid.Additive","ordAdditive"]},{"package":"purescript-monoid","item":["Data.Monoid.Additive","boundedAdditive"]},{"package":"purescript-monoid","item":["Data.Monoid.Additive","functorAdditive"]},{"package":"purescript-monoid","item":["Data.Monoid.Additive","invariantAdditive"]},{"package":"purescript-monoid","item":["Data.Monoid.Additive","applyAdditive"]},{"package":"purescript-monoid","item":["Data.Monoid.Additive","applicativeAdditive"]},{"package":"purescript-monoid","item":["Data.Monoid.Additive","bindAdditive"]},{"package":"purescript-monoid","item":["Data.Monoid.Additive","monadAdditive"]},{"package":"purescript-monoid","item":["Data.Monoid.Additive","extendAdditive"]},{"package":"purescript-monoid","item":["Data.Monoid.Additive","comonadAdditive"]},{"package":"purescript-monoid","item":["Data.Monoid.Additive","showAdditive"]},{"package":"purescript-monoid","item":["Data.Monoid.Additive","semigroupAdditive"]},{"package":"purescript-monoid","item":["Data.Monoid.Additive","monoidAdditive"]},{"package":"purescript-monoid","item":["Data.Monoid.Conj","Conj"]},{"package":"purescript-monoid","item":["Data.Monoid.Conj","runConj"]},{"package":"purescript-monoid","item":["Data.Monoid.Conj","eqConj"]},{"package":"purescript-monoid","item":["Data.Monoid.Conj","ordConj"]},{"package":"purescript-monoid","item":["Data.Monoid.Conj","boundedConj"]},{"package":"purescript-monoid","item":["Data.Monoid.Conj","functorConj"]},{"package":"purescript-monoid","item":["Data.Monoid.Conj","invariantConj"]},{"package":"purescript-monoid","item":["Data.Monoid.Conj","applyConj"]},{"package":"purescript-monoid","item":["Data.Monoid.Conj","applicativeConj"]},{"package":"purescript-monoid","item":["Data.Monoid.Conj","bindConj"]},{"package":"purescript-monoid","item":["Data.Monoid.Conj","monadConj"]},{"package":"purescript-monoid","item":["Data.Monoid.Conj","extendConj"]},{"package":"purescript-monoid","item":["Data.Monoid.Conj","comonadConj"]},{"package":"purescript-monoid","item":["Data.Monoid.Conj","showConj"]},{"package":"purescript-monoid","item":["Data.Monoid.Conj","semigroupConj"]},{"package":"purescript-monoid","item":["Data.Monoid.Conj","monoidConj"]},{"package":"purescript-monoid","item":["Data.Monoid.Conj","semiringConj"]},{"package":"purescript-monoid","item":["Data.Monoid.Disj","Disj"]},{"package":"purescript-monoid","item":["Data.Monoid.Disj","runDisj"]},{"package":"purescript-monoid","item":["Data.Monoid.Disj","eqDisj"]},{"package":"purescript-monoid","item":["Data.Monoid.Disj","ordDisj"]},{"package":"purescript-monoid","item":["Data.Monoid.Disj","boundedDisj"]},{"package":"purescript-monoid","item":["Data.Monoid.Disj","functorDisj"]},{"package":"purescript-monoid","item":["Data.Monoid.Disj","applyDisj"]},{"package":"purescript-monoid","item":["Data.Monoid.Disj","applicativeDisj"]},{"package":"purescript-monoid","item":["Data.Monoid.Disj","bindDisj"]},{"package":"purescript-monoid","item":["Data.Monoid.Disj","monadDisj"]},{"package":"purescript-monoid","item":["Data.Monoid.Disj","extendDisj"]},{"package":"purescript-monoid","item":["Data.Monoid.Disj","comonadDisj"]},{"package":"purescript-monoid","item":["Data.Monoid.Disj","showDisj"]},{"package":"purescript-monoid","item":["Data.Monoid.Disj","semigroupDisj"]},{"package":"purescript-monoid","item":["Data.Monoid.Disj","monoidDisj"]},{"package":"purescript-monoid","item":["Data.Monoid.Disj","semiringDisj"]},{"package":"purescript-refs","item":["Control.Monad.Eff.Ref","REF"]},{"package":"purescript-refs","item":["Control.Monad.Eff.Ref","Ref"]},{"package":"purescript-refs","item":["Control.Monad.Eff.Ref","newRef"]},{"package":"purescript-refs","item":["Control.Monad.Eff.Ref","readRef"]},{"package":"purescript-refs","item":["Control.Monad.Eff.Ref","modifyRef'"]},{"package":"purescript-refs","item":["Control.Monad.Eff.Ref","modifyRef"]},{"package":"purescript-refs","item":["Control.Monad.Eff.Ref","writeRef"]},{"package":"purescript-refs","item":["Control.Monad.Eff.Ref.Unsafe","unsafeRunRef"]},{"package":"purescript-transformers","item":["Control.Monad.Writer","Writer"]},{"package":"purescript-transformers","item":["Control.Monad.Writer","runWriter"]},{"package":"purescript-transformers","item":["Control.Monad.Writer","execWriter"]},{"package":"purescript-transformers","item":["Control.Monad.Writer","mapWriter"]},{"package":"purescript-transformers","item":["Control.Monad.Reader","Reader"]},{"package":"purescript-transformers","item":["Control.Monad.Reader","runReader"]},{"package":"purescript-transformers","item":["Control.Monad.Reader","withReader"]},{"package":"purescript-transformers","item":["Control.Monad.Reader","mapReader"]},{"package":"purescript-transformers","item":["Control.Monad.Trans","MonadTrans"]},{"package":"purescript-transformers","item":["Control.Monad.Cont","Cont"]},{"package":"purescript-transformers","item":["Control.Monad.Cont","cont"]},{"package":"purescript-transformers","item":["Control.Monad.Cont","runCont"]},{"package":"purescript-transformers","item":["Control.Monad.Except","Except"]},{"package":"purescript-transformers","item":["Control.Monad.Except","runExcept"]},{"package":"purescript-transformers","item":["Control.Monad.Except","mapExcept"]},{"package":"purescript-transformers","item":["Control.Monad.Except","withExcept"]},{"package":"purescript-transformers","item":["Control.Monad.State","State"]},{"package":"purescript-transformers","item":["Control.Monad.State","runState"]},{"package":"purescript-transformers","item":["Control.Monad.State","evalState"]},{"package":"purescript-transformers","item":["Control.Monad.State","execState"]},{"package":"purescript-transformers","item":["Control.Monad.State","mapState"]},{"package":"purescript-transformers","item":["Control.Monad.State","withState"]},{"package":"purescript-transformers","item":["Control.Monad.RWS","RWS"]},{"package":"purescript-transformers","item":["Control.Monad.RWS","rws"]},{"package":"purescript-transformers","item":["Control.Monad.RWS","runRWS"]},{"package":"purescript-transformers","item":["Control.Monad.RWS","evalRWS"]},{"package":"purescript-transformers","item":["Control.Monad.RWS","execRWS"]},{"package":"purescript-transformers","item":["Control.Monad.RWS","mapRWS"]},{"package":"purescript-transformers","item":["Control.Monad.RWS","withRWS"]},{"package":"purescript-transformers","item":["Control.Monad.List.Trans","ListT"]},{"package":"purescript-transformers","item":["Control.Monad.List.Trans","nil"]},{"package":"purescript-transformers","item":["Control.Monad.List.Trans","cons"]},{"package":"purescript-transformers","item":["Control.Monad.List.Trans","prepend'"]},{"package":"purescript-transformers","item":["Control.Monad.List.Trans","prepend"]},{"package":"purescript-transformers","item":["Control.Monad.List.Trans","singleton"]},{"package":"purescript-transformers","item":["Control.Monad.List.Trans","fromEffect"]},{"package":"purescript-transformers","item":["Control.Monad.List.Trans","wrapEffect"]},{"package":"purescript-transformers","item":["Control.Monad.List.Trans","wrapLazy"]},{"package":"purescript-transformers","item":["Control.Monad.List.Trans","unfold"]},{"package":"purescript-transformers","item":["Control.Monad.List.Trans","iterate"]},{"package":"purescript-transformers","item":["Control.Monad.List.Trans","repeat"]},{"package":"purescript-transformers","item":["Control.Monad.List.Trans","take"]},{"package":"purescript-transformers","item":["Control.Monad.List.Trans","take"]},{"package":"purescript-transformers","item":["Control.Monad.List.Trans","takeWhile"]},{"package":"purescript-transformers","item":["Control.Monad.List.Trans","drop"]},{"package":"purescript-transformers","item":["Control.Monad.List.Trans","drop"]},{"package":"purescript-transformers","item":["Control.Monad.List.Trans","dropWhile"]},{"package":"purescript-transformers","item":["Control.Monad.List.Trans","filter"]},{"package":"purescript-transformers","item":["Control.Monad.List.Trans","mapMaybe"]},{"package":"purescript-transformers","item":["Control.Monad.List.Trans","catMaybes"]},{"package":"purescript-transformers","item":["Control.Monad.List.Trans","uncons"]},{"package":"purescript-transformers","item":["Control.Monad.List.Trans","head"]},{"package":"purescript-transformers","item":["Control.Monad.List.Trans","tail"]},{"package":"purescript-transformers","item":["Control.Monad.List.Trans","foldl'"]},{"package":"purescript-transformers","item":["Control.Monad.List.Trans","foldl"]},{"package":"purescript-transformers","item":["Control.Monad.List.Trans","scanl"]},{"package":"purescript-transformers","item":["Control.Monad.List.Trans","zipWith'"]},{"package":"purescript-transformers","item":["Control.Monad.List.Trans","zipWith"]},{"package":"purescript-transformers","item":["Control.Monad.RWS.Class","MonadRWS"]},{"package":"purescript-transformers","item":["Control.Monad.RWS.Trans","RWSResult"]},{"package":"purescript-transformers","item":["Control.Monad.RWS.Trans","RWST"]},{"package":"purescript-transformers","item":["Control.Monad.RWS.Trans","runRWST"]},{"package":"purescript-transformers","item":["Control.Monad.RWS.Trans","evalRWST"]},{"package":"purescript-transformers","item":["Control.Monad.RWS.Trans","execRWST"]},{"package":"purescript-transformers","item":["Control.Monad.RWS.Trans","mapRWST"]},{"package":"purescript-transformers","item":["Control.Monad.RWS.Trans","withRWST"]},{"package":"purescript-transformers","item":["Control.Monad.Maybe.Trans","MaybeT"]},{"package":"purescript-transformers","item":["Control.Monad.Maybe.Trans","runMaybeT"]},{"package":"purescript-transformers","item":["Control.Monad.Maybe.Trans","mapMaybeT"]},{"package":"purescript-transformers","item":["Control.Monad.Except.Trans","ExceptT"]},{"package":"purescript-transformers","item":["Control.Monad.Except.Trans","runExceptT"]},{"package":"purescript-transformers","item":["Control.Monad.Except.Trans","withExceptT"]},{"package":"purescript-transformers","item":["Control.Monad.Except.Trans","mapExceptT"]},{"package":"purescript-transformers","item":["Control.Monad.Except.Trans","except"]},{"package":"purescript-transformers","item":["Control.Monad.State.Class","MonadState"]},{"package":"purescript-transformers","item":["Control.Monad.State.Class","get"]},{"package":"purescript-transformers","item":["Control.Monad.State.Class","gets"]},{"package":"purescript-transformers","item":["Control.Monad.State.Class","put"]},{"package":"purescript-transformers","item":["Control.Monad.State.Class","modify"]},{"package":"purescript-transformers","item":["Control.Monad.State.Trans","StateT"]},{"package":"purescript-transformers","item":["Control.Monad.State.Trans","runStateT"]},{"package":"purescript-transformers","item":["Control.Monad.State.Trans","evalStateT"]},{"package":"purescript-transformers","item":["Control.Monad.State.Trans","execStateT"]},{"package":"purescript-transformers","item":["Control.Monad.State.Trans","mapStateT"]},{"package":"purescript-transformers","item":["Control.Monad.State.Trans","withStateT"]},{"package":"purescript-transformers","item":["Control.Monad.Reader.Class","MonadReader"]},{"package":"purescript-transformers","item":["Control.Monad.Reader.Class","reader"]},{"package":"purescript-transformers","item":["Control.Monad.Reader.Class","monadReaderFun"]},{"package":"purescript-transformers","item":["Control.Monad.Reader.Trans","ReaderT"]},{"package":"purescript-transformers","item":["Control.Monad.Reader.Trans","runReaderT"]},{"package":"purescript-transformers","item":["Control.Monad.Reader.Trans","mapReaderT"]},{"package":"purescript-transformers","item":["Control.Monad.Reader.Trans","withReaderT"]},{"package":"purescript-transformers","item":["Control.Monad.Error.Class","MonadError"]},{"package":"purescript-transformers","item":["Control.Monad.Error.Class","catchJust"]},{"package":"purescript-transformers","item":["Control.Monad.Error.Class","monadErrorEither"]},{"package":"purescript-transformers","item":["Control.Monad.Error.Class","monadErrorMaybe"]},{"package":"purescript-transformers","item":["Control.Monad.Writer.Class","MonadWriter"]},{"package":"purescript-transformers","item":["Control.Monad.Writer.Class","tell"]},{"package":"purescript-transformers","item":["Control.Monad.Writer.Class","listens"]},{"package":"purescript-transformers","item":["Control.Monad.Writer.Class","censor"]},{"package":"purescript-transformers","item":["Control.Monad.Writer.Trans","WriterT"]},{"package":"purescript-transformers","item":["Control.Monad.Writer.Trans","runWriterT"]},{"package":"purescript-transformers","item":["Control.Monad.Writer.Trans","execWriterT"]},{"package":"purescript-transformers","item":["Control.Monad.Writer.Trans","mapWriterT"]},{"package":"purescript-transformers","item":["Control.Monad.Cont.Class","MonadCont"]},{"package":"purescript-transformers","item":["Control.Monad.Cont.Trans","ContT"]},{"package":"purescript-transformers","item":["Control.Monad.Cont.Trans","runContT"]},{"package":"purescript-transformers","item":["Control.Monad.Cont.Trans","mapContT"]},{"package":"purescript-transformers","item":["Control.Monad.Cont.Trans","withContT"]},{"package":"purescript-transformers","item":["Control.Comonad.Env","Env"]},{"package":"purescript-transformers","item":["Control.Comonad.Env","runEnv"]},{"package":"purescript-transformers","item":["Control.Comonad.Env","withEnv"]},{"package":"purescript-transformers","item":["Control.Comonad.Env","mapEnv"]},{"package":"purescript-transformers","item":["Control.Comonad.Env","env"]},{"package":"purescript-transformers","item":["Control.Comonad.Trans","ComonadTrans"]},{"package":"purescript-transformers","item":["Control.Comonad.Store","Store"]},{"package":"purescript-transformers","item":["Control.Comonad.Store","runStore"]},{"package":"purescript-transformers","item":["Control.Comonad.Store","store"]},{"package":"purescript-transformers","item":["Control.Comonad.Traced","Traced"]},{"package":"purescript-transformers","item":["Control.Comonad.Traced","runTraced"]},{"package":"purescript-transformers","item":["Control.Comonad.Traced","traced"]},{"package":"purescript-transformers","item":["Control.Comonad.Traced.Class","ComonadTraced"]},{"package":"purescript-transformers","item":["Control.Comonad.Traced.Class","tracks"]},{"package":"purescript-transformers","item":["Control.Comonad.Traced.Class","listen"]},{"package":"purescript-transformers","item":["Control.Comonad.Traced.Class","listens"]},{"package":"purescript-transformers","item":["Control.Comonad.Traced.Class","censor"]},{"package":"purescript-transformers","item":["Control.Comonad.Traced.Class","comonadTracedTracedT"]},{"package":"purescript-transformers","item":["Control.Comonad.Traced.Trans","TracedT"]},{"package":"purescript-transformers","item":["Control.Comonad.Traced.Trans","runTracedT"]},{"package":"purescript-transformers","item":["Control.Comonad.Traced.Trans","functorTracedT"]},{"package":"purescript-transformers","item":["Control.Comonad.Traced.Trans","extendTracedT"]},{"package":"purescript-transformers","item":["Control.Comonad.Traced.Trans","comonadTracedT"]},{"package":"purescript-transformers","item":["Control.Comonad.Traced.Trans","comonadTransTracedT"]},{"package":"purescript-transformers","item":["Control.Comonad.Store.Class","ComonadStore"]},{"package":"purescript-transformers","item":["Control.Comonad.Store.Class","experiment"]},{"package":"purescript-transformers","item":["Control.Comonad.Store.Class","peeks"]},{"package":"purescript-transformers","item":["Control.Comonad.Store.Class","seek"]},{"package":"purescript-transformers","item":["Control.Comonad.Store.Class","seeks"]},{"package":"purescript-transformers","item":["Control.Comonad.Store.Class","comonadStoreStoreT"]},{"package":"purescript-transformers","item":["Control.Comonad.Store.Trans","StoreT"]},{"package":"purescript-transformers","item":["Control.Comonad.Store.Trans","runStoreT"]},{"package":"purescript-transformers","item":["Control.Comonad.Store.Trans","functorStoreT"]},{"package":"purescript-transformers","item":["Control.Comonad.Store.Trans","extendStoreT"]},{"package":"purescript-transformers","item":["Control.Comonad.Store.Trans","comonadStoreT"]},{"package":"purescript-transformers","item":["Control.Comonad.Store.Trans","comonadTransStoreT"]},{"package":"purescript-transformers","item":["Control.Comonad.Env.Class","ComonadEnv"]},{"package":"purescript-transformers","item":["Control.Comonad.Env.Class","asks"]},{"package":"purescript-transformers","item":["Control.Comonad.Env.Class","comonadEnvTuple"]},{"package":"purescript-transformers","item":["Control.Comonad.Env.Class","comonadEnvEnvT"]},{"package":"purescript-transformers","item":["Control.Comonad.Env.Trans","EnvT"]},{"package":"purescript-transformers","item":["Control.Comonad.Env.Trans","runEnvT"]},{"package":"purescript-transformers","item":["Control.Comonad.Env.Trans","withEnvT"]},{"package":"purescript-transformers","item":["Control.Comonad.Env.Trans","mapEnvT"]},{"package":"purescript-transformers","item":["Control.Comonad.Env.Trans","functorEnvT"]},{"package":"purescript-transformers","item":["Control.Comonad.Env.Trans","extendEnvT"]},{"package":"purescript-transformers","item":["Control.Comonad.Env.Trans","comonadEnvT"]},{"package":"purescript-transformers","item":["Control.Comonad.Env.Trans","comonadTransEnvT"]},{"package":"purescript-exceptions","item":["Control.Monad.Eff.Exception","EXCEPTION"]},{"package":"purescript-exceptions","item":["Control.Monad.Eff.Exception","Error"]},{"package":"purescript-exceptions","item":["Control.Monad.Eff.Exception","error"]},{"package":"purescript-exceptions","item":["Control.Monad.Eff.Exception","message"]},{"package":"purescript-exceptions","item":["Control.Monad.Eff.Exception","stack"]},{"package":"purescript-exceptions","item":["Control.Monad.Eff.Exception","throwException"]},{"package":"purescript-exceptions","item":["Control.Monad.Eff.Exception","catchException"]},{"package":"purescript-exceptions","item":["Control.Monad.Eff.Exception","throw"]},{"package":"purescript-exceptions","item":["Control.Monad.Eff.Exception","try"]},{"package":"purescript-exceptions","item":["Control.Monad.Eff.Exception.Unsafe","unsafeThrowException"]},{"package":"purescript-exceptions","item":["Control.Monad.Eff.Exception.Unsafe","unsafeThrow"]},{"package":"purescript-tailrec","item":["Control.Monad.Rec.Class","MonadRec"]},{"package":"purescript-tailrec","item":["Control.Monad.Rec.Class","tailRecM2"]},{"package":"purescript-tailrec","item":["Control.Monad.Rec.Class","tailRecM3"]},{"package":"purescript-tailrec","item":["Control.Monad.Rec.Class","tailRec"]},{"package":"purescript-tailrec","item":["Control.Monad.Rec.Class","forever"]},{"package":"purescript-test-unit","item":["Test.Unit","TIMER"]},{"package":"purescript-test-unit","item":["Test.Unit","Test"]},{"package":"purescript-test-unit","item":["Test.Unit","success"]},{"package":"purescript-test-unit","item":["Test.Unit","failure"]},{"package":"purescript-test-unit","item":["Test.Unit","timeout"]},{"package":"purescript-test-unit","item":["Test.Unit","Group"]},{"package":"purescript-test-unit","item":["Test.Unit","TestF"]},{"package":"purescript-test-unit","item":["Test.Unit","TestGroup"]},{"package":"purescript-test-unit","item":["Test.Unit","TestSuite"]},{"package":"purescript-test-unit","item":["Test.Unit","suite"]},{"package":"purescript-test-unit","item":["Test.Unit","test"]},{"package":"purescript-test-unit","item":["Test.Unit","collectTests"]},{"package":"purescript-test-unit","item":["Test.Unit","collectResults"]},{"package":"purescript-test-unit","item":["Test.Unit","keepErrors"]},{"package":"purescript-test-unit","item":["Test.Unit","collectErrors"]},{"package":"purescript-test-unit","item":["Test.Unit.Assert","assert"]},{"package":"purescript-test-unit","item":["Test.Unit.Assert","assert"]},{"package":"purescript-test-unit","item":["Test.Unit.Assert","assertFalse"]},{"package":"purescript-test-unit","item":["Test.Unit.Assert","assertFalse"]},{"package":"purescript-test-unit","item":["Test.Unit.Assert","expectFailure"]},{"package":"purescript-test-unit","item":["Test.Unit.Assert","equal"]},{"package":"purescript-test-unit","item":["Test.Unit.Assert","equal'"]},{"package":"purescript-test-unit","item":["Test.Unit.QuickCheck","quickCheck'"]},{"package":"purescript-test-unit","item":["Test.Unit.QuickCheck","quickCheck"]},{"package":"purescript-test-unit","item":["Test.Unit.Console","TESTOUTPUT"]},{"package":"purescript-test-unit","item":["Test.Unit.Console","hasStderr"]},{"package":"purescript-test-unit","item":["Test.Unit.Console","hasColours"]},{"package":"purescript-test-unit","item":["Test.Unit.Console","consoleLog"]},{"package":"purescript-test-unit","item":["Test.Unit.Console","consoleError"]},{"package":"purescript-test-unit","item":["Test.Unit.Console","savePos"]},{"package":"purescript-test-unit","item":["Test.Unit.Console","restorePos"]},{"package":"purescript-test-unit","item":["Test.Unit.Console","eraseLine"]},{"package":"purescript-test-unit","item":["Test.Unit.Console","print"]},{"package":"purescript-test-unit","item":["Test.Unit.Console","printLabel"]},{"package":"purescript-test-unit","item":["Test.Unit.Console","printFail"]},{"package":"purescript-test-unit","item":["Test.Unit.Console","printPass"]},{"package":"purescript-test-unit","item":["Test.Unit.Main","exit"]},{"package":"purescript-test-unit","item":["Test.Unit.Main","run"]},{"package":"purescript-test-unit","item":["Test.Unit.Main","runTestWith"]},{"package":"purescript-test-unit","item":["Test.Unit.Main","runTest"]},{"package":"purescript-test-unit","item":["Test.Unit.Output.Fancy","runTest"]},{"package":"purescript-test-unit","item":["Test.Unit.Output.Simple","runTest"]},{"package":"purescript-test-unit","item":["Test.Unit.Output.TAP","requested"]},{"package":"purescript-test-unit","item":["Test.Unit.Output.TAP","runTest"]},{"package":"purescript-console","item":["Control.Monad.Eff.Console","CONSOLE"]},{"package":"purescript-console","item":["Control.Monad.Eff.Console","log"]},{"package":"purescript-console","item":["Control.Monad.Eff.Console","logShow"]},{"package":"purescript-console","item":["Control.Monad.Eff.Console","warn"]},{"package":"purescript-console","item":["Control.Monad.Eff.Console","warnShow"]},{"package":"purescript-console","item":["Control.Monad.Eff.Console","error"]},{"package":"purescript-console","item":["Control.Monad.Eff.Console","errorShow"]},{"package":"purescript-console","item":["Control.Monad.Eff.Console","info"]},{"package":"purescript-console","item":["Control.Monad.Eff.Console","infoShow"]},{"package":"purescript-bifunctors","item":["Control.Biapplicative","Biapplicative"]},{"package":"purescript-bifunctors","item":["Control.Biapply","(<<$>>)"]},{"package":"purescript-bifunctors","item":["Control.Biapply","Biapply"]},{"package":"purescript-bifunctors","item":["Control.Biapply","(<<*>>)"]},{"package":"purescript-bifunctors","item":["Control.Biapply","biapplyFirst"]},{"package":"purescript-bifunctors","item":["Control.Biapply","(*>>)"]},{"package":"purescript-bifunctors","item":["Control.Biapply","biapplySecond"]},{"package":"purescript-bifunctors","item":["Control.Biapply","(<<*)"]},{"package":"purescript-bifunctors","item":["Control.Biapply","bilift2"]},{"package":"purescript-bifunctors","item":["Control.Biapply","bilift3"]},{"package":"purescript-bifunctors","item":["Data.Bifunctor","Bifunctor"]},{"package":"purescript-bifunctors","item":["Data.Bifunctor","lmap"]},{"package":"purescript-bifunctors","item":["Data.Bifunctor","rmap"]},{"package":"purescript-bifunctors","item":["Data.Bifunctor.Joker","Joker"]},{"package":"purescript-bifunctors","item":["Data.Bifunctor.Joker","runJoker"]},{"package":"purescript-bifunctors","item":["Data.Bifunctor.Joker","functorJoker"]},{"package":"purescript-bifunctors","item":["Data.Bifunctor.Joker","bifunctorJoker"]},{"package":"purescript-bifunctors","item":["Data.Bifunctor.Joker","biapplyJoker"]},{"package":"purescript-bifunctors","item":["Data.Bifunctor.Joker","biapplicativeJoker"]},{"package":"purescript-bifunctors","item":["Data.Bifunctor.Flip","Flip"]},{"package":"purescript-bifunctors","item":["Data.Bifunctor.Flip","runFlip"]},{"package":"purescript-bifunctors","item":["Data.Bifunctor.Flip","functorFlip"]},{"package":"purescript-bifunctors","item":["Data.Bifunctor.Flip","bifunctorFlip"]},{"package":"purescript-bifunctors","item":["Data.Bifunctor.Flip","biapplyFlip"]},{"package":"purescript-bifunctors","item":["Data.Bifunctor.Flip","biapplicativeFlip"]},{"package":"purescript-bifunctors","item":["Data.Bifunctor.Wrap","Wrap"]},{"package":"purescript-bifunctors","item":["Data.Bifunctor.Wrap","unwrap"]},{"package":"purescript-bifunctors","item":["Data.Bifunctor.Wrap","bifunctorWrap"]},{"package":"purescript-bifunctors","item":["Data.Bifunctor.Wrap","functorWrap"]},{"package":"purescript-bifunctors","item":["Data.Bifunctor.Wrap","biapplyWrap"]},{"package":"purescript-bifunctors","item":["Data.Bifunctor.Wrap","biapplicativeWrap"]},{"package":"purescript-bifunctors","item":["Data.Bifunctor.Join","Join"]},{"package":"purescript-bifunctors","item":["Data.Bifunctor.Join","runJoin"]},{"package":"purescript-bifunctors","item":["Data.Bifunctor.Join","bifunctorJoin"]},{"package":"purescript-bifunctors","item":["Data.Bifunctor.Join","biapplyJoin"]},{"package":"purescript-bifunctors","item":["Data.Bifunctor.Join","biapplicativeJoin"]},{"package":"purescript-bifunctors","item":["Data.Bifunctor.Product","Product"]},{"package":"purescript-bifunctors","item":["Data.Bifunctor.Product","bifunctorProduct"]},{"package":"purescript-bifunctors","item":["Data.Bifunctor.Product","biapplyProduct"]},{"package":"purescript-bifunctors","item":["Data.Bifunctor.Product","biapplicativeProduct"]},{"package":"purescript-bifunctors","item":["Data.Bifunctor.Clown","Clown"]},{"package":"purescript-bifunctors","item":["Data.Bifunctor.Clown","runClown"]},{"package":"purescript-bifunctors","item":["Data.Bifunctor.Clown","bifunctorClown"]},{"package":"purescript-bifunctors","item":["Data.Bifunctor.Clown","functorClown"]},{"package":"purescript-bifunctors","item":["Data.Bifunctor.Clown","biapplyClown"]},{"package":"purescript-bifunctors","item":["Data.Bifunctor.Clown","biapplicativeClown"]},{"package":"purescript-proxy","item":["Type.Proxy","Proxy"]},{"package":"purescript-proxy","item":["Type.Proxy","Proxy2"]},{"package":"purescript-proxy","item":["Type.Proxy","Proxy3"]},{"package":"purescript-unsafe-coerce","item":["Unsafe.Coerce","unsafeCoerce"]},{"package":"purescript-random","item":["Control.Monad.Eff.Random","RANDOM"]},{"package":"purescript-random","item":["Control.Monad.Eff.Random","random"]},{"package":"purescript-random","item":["Control.Monad.Eff.Random","randomInt"]},{"package":"purescript-random","item":["Control.Monad.Eff.Random","randomRange"]},{"package":"purescript-random","item":["Control.Monad.Eff.Random","randomBool"]},{"package":"purescript-inject","item":["Data.Inject","Inject"]},{"package":"purescript-inject","item":["Data.Inject","injectReflexive"]},{"package":"purescript-either","item":["Data.Either","Either"]},{"package":"purescript-either","item":["Data.Either","functorEither"]},{"package":"purescript-either","item":["Data.Either","invariantEither"]},{"package":"purescript-either","item":["Data.Either","bifunctorEither"]},{"package":"purescript-either","item":["Data.Either","applyEither"]},{"package":"purescript-either","item":["Data.Either","applicativeEither"]},{"package":"purescript-either","item":["Data.Either","altEither"]},{"package":"purescript-either","item":["Data.Either","bindEither"]},{"package":"purescript-either","item":["Data.Either","monadEither"]},{"package":"purescript-either","item":["Data.Either","extendEither"]},{"package":"purescript-either","item":["Data.Either","showEither"]},{"package":"purescript-either","item":["Data.Either","eqEither"]},{"package":"purescript-either","item":["Data.Either","ordEither"]},{"package":"purescript-either","item":["Data.Either","boundedEither"]},{"package":"purescript-either","item":["Data.Either","foldableEither"]},{"package":"purescript-either","item":["Data.Either","bifoldableEither"]},{"package":"purescript-either","item":["Data.Either","traversableEither"]},{"package":"purescript-either","item":["Data.Either","bitraversableEither"]},{"package":"purescript-either","item":["Data.Either","semiringEither"]},{"package":"purescript-either","item":["Data.Either","semigroupEither"]},{"package":"purescript-either","item":["Data.Either","either"]},{"package":"purescript-either","item":["Data.Either","either"]},{"package":"purescript-either","item":["Data.Either","isLeft"]},{"package":"purescript-either","item":["Data.Either","isRight"]},{"package":"purescript-either","item":["Data.Either","fromLeft"]},{"package":"purescript-either","item":["Data.Either","fromRight"]},{"package":"purescript-either","item":["Data.Either.Nested","Either2"]},{"package":"purescript-either","item":["Data.Either.Nested","Either3"]},{"package":"purescript-either","item":["Data.Either.Nested","Either4"]},{"package":"purescript-either","item":["Data.Either.Nested","Either5"]},{"package":"purescript-either","item":["Data.Either.Nested","Either6"]},{"package":"purescript-either","item":["Data.Either.Nested","Either7"]},{"package":"purescript-either","item":["Data.Either.Nested","Either8"]},{"package":"purescript-either","item":["Data.Either.Nested","Either9"]},{"package":"purescript-either","item":["Data.Either.Nested","Either10"]},{"package":"purescript-either","item":["Data.Either.Nested","either1of2"]},{"package":"purescript-either","item":["Data.Either.Nested","either2of2"]},{"package":"purescript-either","item":["Data.Either.Nested","either1of3"]},{"package":"purescript-either","item":["Data.Either.Nested","either2of3"]},{"package":"purescript-either","item":["Data.Either.Nested","either3of3"]},{"package":"purescript-either","item":["Data.Either.Nested","either1of4"]},{"package":"purescript-either","item":["Data.Either.Nested","either2of4"]},{"package":"purescript-either","item":["Data.Either.Nested","either3of4"]},{"package":"purescript-either","item":["Data.Either.Nested","either4of4"]},{"package":"purescript-either","item":["Data.Either.Nested","either1of5"]},{"package":"purescript-either","item":["Data.Either.Nested","either2of5"]},{"package":"purescript-either","item":["Data.Either.Nested","either3of5"]},{"package":"purescript-either","item":["Data.Either.Nested","either4of5"]},{"package":"purescript-either","item":["Data.Either.Nested","either5of5"]},{"package":"purescript-either","item":["Data.Either.Nested","either1of6"]},{"package":"purescript-either","item":["Data.Either.Nested","either2of6"]},{"package":"purescript-either","item":["Data.Either.Nested","either3of6"]},{"package":"purescript-either","item":["Data.Either.Nested","either4of6"]},{"package":"purescript-either","item":["Data.Either.Nested","either5of6"]},{"package":"purescript-either","item":["Data.Either.Nested","either6of6"]},{"package":"purescript-either","item":["Data.Either.Nested","either1of7"]},{"package":"purescript-either","item":["Data.Either.Nested","either2of7"]},{"package":"purescript-either","item":["Data.Either.Nested","either3of7"]},{"package":"purescript-either","item":["Data.Either.Nested","either4of7"]},{"package":"purescript-either","item":["Data.Either.Nested","either5of7"]},{"package":"purescript-either","item":["Data.Either.Nested","either6of7"]},{"package":"purescript-either","item":["Data.Either.Nested","either7of7"]},{"package":"purescript-either","item":["Data.Either.Nested","either1of8"]},{"package":"purescript-either","item":["Data.Either.Nested","either2of8"]},{"package":"purescript-either","item":["Data.Either.Nested","either3of8"]},{"package":"purescript-either","item":["Data.Either.Nested","either4of8"]},{"package":"purescript-either","item":["Data.Either.Nested","either5of8"]},{"package":"purescript-either","item":["Data.Either.Nested","either6of8"]},{"package":"purescript-either","item":["Data.Either.Nested","either7of8"]},{"package":"purescript-either","item":["Data.Either.Nested","either8of8"]},{"package":"purescript-either","item":["Data.Either.Nested","either1of9"]},{"package":"purescript-either","item":["Data.Either.Nested","either2of9"]},{"package":"purescript-either","item":["Data.Either.Nested","either3of9"]},{"package":"purescript-either","item":["Data.Either.Nested","either4of9"]},{"package":"purescript-either","item":["Data.Either.Nested","either5of9"]},{"package":"purescript-either","item":["Data.Either.Nested","either6of9"]},{"package":"purescript-either","item":["Data.Either.Nested","either7of9"]},{"package":"purescript-either","item":["Data.Either.Nested","either8of9"]},{"package":"purescript-either","item":["Data.Either.Nested","either9of9"]},{"package":"purescript-either","item":["Data.Either.Nested","either1of10"]},{"package":"purescript-either","item":["Data.Either.Nested","either2of10"]},{"package":"purescript-either","item":["Data.Either.Nested","either3of10"]},{"package":"purescript-either","item":["Data.Either.Nested","either4of10"]},{"package":"purescript-either","item":["Data.Either.Nested","either5of10"]},{"package":"purescript-either","item":["Data.Either.Nested","either6of10"]},{"package":"purescript-either","item":["Data.Either.Nested","either7of10"]},{"package":"purescript-either","item":["Data.Either.Nested","either8of10"]},{"package":"purescript-either","item":["Data.Either.Nested","either9of10"]},{"package":"purescript-either","item":["Data.Either.Nested","either10of10"]},{"package":"purescript-either","item":["Data.Either.Nested","either2"]},{"package":"purescript-either","item":["Data.Either.Nested","either3"]},{"package":"purescript-either","item":["Data.Either.Nested","either4"]},{"package":"purescript-either","item":["Data.Either.Nested","either5"]},{"package":"purescript-either","item":["Data.Either.Nested","either6"]},{"package":"purescript-either","item":["Data.Either.Nested","either7"]},{"package":"purescript-either","item":["Data.Either.Nested","either8"]},{"package":"purescript-either","item":["Data.Either.Nested","either9"]},{"package":"purescript-either","item":["Data.Either.Nested","either10"]},{"package":"purescript-lists","item":["Data.List","List"]},{"package":"purescript-lists","item":["Data.List","toUnfoldable"]},{"package":"purescript-lists","item":["Data.List","fromFoldable"]},{"package":"purescript-lists","item":["Data.List","singleton"]},{"package":"purescript-lists","item":["Data.List","(..)"]},{"package":"purescript-lists","item":["Data.List","range"]},{"package":"purescript-lists","item":["Data.List","some"]},{"package":"purescript-lists","item":["Data.List","many"]},{"package":"purescript-lists","item":["Data.List","null"]},{"package":"purescript-lists","item":["Data.List","null"]},{"package":"purescript-lists","item":["Data.List","length"]},{"package":"purescript-lists","item":["Data.List","(:)"]},{"package":"purescript-lists","item":["Data.List","snoc"]},{"package":"purescript-lists","item":["Data.List","insert"]},{"package":"purescript-lists","item":["Data.List","insertBy"]},{"package":"purescript-lists","item":["Data.List","insertBy"]},{"package":"purescript-lists","item":["Data.List","head"]},{"package":"purescript-lists","item":["Data.List","head"]},{"package":"purescript-lists","item":["Data.List","last"]},{"package":"purescript-lists","item":["Data.List","last"]},{"package":"purescript-lists","item":["Data.List","last"]},{"package":"purescript-lists","item":["Data.List","tail"]},{"package":"purescript-lists","item":["Data.List","tail"]},{"package":"purescript-lists","item":["Data.List","init"]},{"package":"purescript-lists","item":["Data.List","init"]},{"package":"purescript-lists","item":["Data.List","uncons"]},{"package":"purescript-lists","item":["Data.List","uncons"]},{"package":"purescript-lists","item":["Data.List","index"]},{"package":"purescript-lists","item":["Data.List","index"]},{"package":"purescript-lists","item":["Data.List","index"]},{"package":"purescript-lists","item":["Data.List","(!!)"]},{"package":"purescript-lists","item":["Data.List","elemIndex"]},{"package":"purescript-lists","item":["Data.List","elemLastIndex"]},{"package":"purescript-lists","item":["Data.List","findIndex"]},{"package":"purescript-lists","item":["Data.List","findLastIndex"]},{"package":"purescript-lists","item":["Data.List","insertAt"]},{"package":"purescript-lists","item":["Data.List","insertAt"]},{"package":"purescript-lists","item":["Data.List","insertAt"]},{"package":"purescript-lists","item":["Data.List","deleteAt"]},{"package":"purescript-lists","item":["Data.List","deleteAt"]},{"package":"purescript-lists","item":["Data.List","deleteAt"]},{"package":"purescript-lists","item":["Data.List","updateAt"]},{"package":"purescript-lists","item":["Data.List","updateAt"]},{"package":"purescript-lists","item":["Data.List","updateAt"]},{"package":"purescript-lists","item":["Data.List","modifyAt"]},{"package":"purescript-lists","item":["Data.List","alterAt"]},{"package":"purescript-lists","item":["Data.List","alterAt"]},{"package":"purescript-lists","item":["Data.List","alterAt"]},{"package":"purescript-lists","item":["Data.List","reverse"]},{"package":"purescript-lists","item":["Data.List","concat"]},{"package":"purescript-lists","item":["Data.List","concatMap"]},{"package":"purescript-lists","item":["Data.List","concatMap"]},{"package":"purescript-lists","item":["Data.List","filter"]},{"package":"purescript-lists","item":["Data.List","filterM"]},{"package":"purescript-lists","item":["Data.List","filterM"]},{"package":"purescript-lists","item":["Data.List","mapMaybe"]},{"package":"purescript-lists","item":["Data.List","catMaybes"]},{"package":"purescript-lists","item":["Data.List","mapWithIndex"]},{"package":"purescript-lists","item":["Data.List","sort"]},{"package":"purescript-lists","item":["Data.List","sortBy"]},{"package":"purescript-lists","item":["Data.List","slice"]},{"package":"purescript-lists","item":["Data.List","take"]},{"package":"purescript-lists","item":["Data.List","takeWhile"]},{"package":"purescript-lists","item":["Data.List","drop"]},{"package":"purescript-lists","item":["Data.List","drop"]},{"package":"purescript-lists","item":["Data.List","drop"]},{"package":"purescript-lists","item":["Data.List","dropWhile"]},{"package":"purescript-lists","item":["Data.List","span"]},{"package":"purescript-lists","item":["Data.List","span"]},{"package":"purescript-lists","item":["Data.List","group"]},{"package":"purescript-lists","item":["Data.List","group'"]},{"package":"purescript-lists","item":["Data.List","groupBy"]},{"package":"purescript-lists","item":["Data.List","groupBy"]},{"package":"purescript-lists","item":["Data.List","nub"]},{"package":"purescript-lists","item":["Data.List","nubBy"]},{"package":"purescript-lists","item":["Data.List","nubBy"]},{"package":"purescript-lists","item":["Data.List","union"]},{"package":"purescript-lists","item":["Data.List","unionBy"]},{"package":"purescript-lists","item":["Data.List","delete"]},{"package":"purescript-lists","item":["Data.List","deleteBy"]},{"package":"purescript-lists","item":["Data.List","deleteBy"]},{"package":"purescript-lists","item":["Data.List","deleteBy"]},{"package":"purescript-lists","item":["Data.List","(\\\\)"]},{"package":"purescript-lists","item":["Data.List","difference"]},{"package":"purescript-lists","item":["Data.List","intersect"]},{"package":"purescript-lists","item":["Data.List","intersectBy"]},{"package":"purescript-lists","item":["Data.List","intersectBy"]},{"package":"purescript-lists","item":["Data.List","intersectBy"]},{"package":"purescript-lists","item":["Data.List","zipWith"]},{"package":"purescript-lists","item":["Data.List","zipWithA"]},{"package":"purescript-lists","item":["Data.List","zip"]},{"package":"purescript-lists","item":["Data.List","unzip"]},{"package":"purescript-lists","item":["Data.List","transpose"]},{"package":"purescript-lists","item":["Data.List","transpose"]},{"package":"purescript-lists","item":["Data.List","transpose"]},{"package":"purescript-lists","item":["Data.List","foldM"]},{"package":"purescript-lists","item":["Data.List","foldM"]},{"package":"purescript-lists","item":["Data.List.Partial","head"]},{"package":"purescript-lists","item":["Data.List.Partial","tail"]},{"package":"purescript-lists","item":["Data.List.Partial","last"]},{"package":"purescript-lists","item":["Data.List.Partial","last"]},{"package":"purescript-lists","item":["Data.List.Partial","init"]},{"package":"purescript-lists","item":["Data.List.Partial","init"]},{"package":"purescript-lists","item":["Data.List.Lazy","List"]},{"package":"purescript-lists","item":["Data.List.Lazy","runList"]},{"package":"purescript-lists","item":["Data.List.Lazy","toUnfoldable"]},{"package":"purescript-lists","item":["Data.List.Lazy","fromFoldable"]},{"package":"purescript-lists","item":["Data.List.Lazy","Step"]},{"package":"purescript-lists","item":["Data.List.Lazy","step"]},{"package":"purescript-lists","item":["Data.List.Lazy","nil"]},{"package":"purescript-lists","item":["Data.List.Lazy","singleton"]},{"package":"purescript-lists","item":["Data.List.Lazy","(..)"]},{"package":"purescript-lists","item":["Data.List.Lazy","range"]},{"package":"purescript-lists","item":["Data.List.Lazy","replicate"]},{"package":"purescript-lists","item":["Data.List.Lazy","replicateM"]},{"package":"purescript-lists","item":["Data.List.Lazy","repeat"]},{"package":"purescript-lists","item":["Data.List.Lazy","iterate"]},{"package":"purescript-lists","item":["Data.List.Lazy","cycle"]},{"package":"purescript-lists","item":["Data.List.Lazy","null"]},{"package":"purescript-lists","item":["Data.List.Lazy","length"]},{"package":"purescript-lists","item":["Data.List.Lazy","cons"]},{"package":"purescript-lists","item":["Data.List.Lazy","(:)"]},{"package":"purescript-lists","item":["Data.List.Lazy","snoc"]},{"package":"purescript-lists","item":["Data.List.Lazy","insert"]},{"package":"purescript-lists","item":["Data.List.Lazy","insertBy"]},{"package":"purescript-lists","item":["Data.List.Lazy","head"]},{"package":"purescript-lists","item":["Data.List.Lazy","last"]},{"package":"purescript-lists","item":["Data.List.Lazy","tail"]},{"package":"purescript-lists","item":["Data.List.Lazy","init"]},{"package":"purescript-lists","item":["Data.List.Lazy","uncons"]},{"package":"purescript-lists","item":["Data.List.Lazy","index"]},{"package":"purescript-lists","item":["Data.List.Lazy","(!!)"]},{"package":"purescript-lists","item":["Data.List.Lazy","elemIndex"]},{"package":"purescript-lists","item":["Data.List.Lazy","elemLastIndex"]},{"package":"purescript-lists","item":["Data.List.Lazy","findIndex"]},{"package":"purescript-lists","item":["Data.List.Lazy","findLastIndex"]},{"package":"purescript-lists","item":["Data.List.Lazy","insertAt"]},{"package":"purescript-lists","item":["Data.List.Lazy","insertAt"]},{"package":"purescript-lists","item":["Data.List.Lazy","deleteAt"]},{"package":"purescript-lists","item":["Data.List.Lazy","updateAt"]},{"package":"purescript-lists","item":["Data.List.Lazy","modifyAt"]},{"package":"purescript-lists","item":["Data.List.Lazy","alterAt"]},{"package":"purescript-lists","item":["Data.List.Lazy","reverse"]},{"package":"purescript-lists","item":["Data.List.Lazy","concat"]},{"package":"purescript-lists","item":["Data.List.Lazy","concatMap"]},{"package":"purescript-lists","item":["Data.List.Lazy","filter"]},{"package":"purescript-lists","item":["Data.List.Lazy","filterM"]},{"package":"purescript-lists","item":["Data.List.Lazy","mapMaybe"]},{"package":"purescript-lists","item":["Data.List.Lazy","catMaybes"]},{"package":"purescript-lists","item":["Data.List.Lazy","slice"]},{"package":"purescript-lists","item":["Data.List.Lazy","take"]},{"package":"purescript-lists","item":["Data.List.Lazy","takeWhile"]},{"package":"purescript-lists","item":["Data.List.Lazy","drop"]},{"package":"purescript-lists","item":["Data.List.Lazy","dropWhile"]},{"package":"purescript-lists","item":["Data.List.Lazy","span"]},{"package":"purescript-lists","item":["Data.List.Lazy","group"]},{"package":"purescript-lists","item":["Data.List.Lazy","groupBy"]},{"package":"purescript-lists","item":["Data.List.Lazy","nub"]},{"package":"purescript-lists","item":["Data.List.Lazy","nubBy"]},{"package":"purescript-lists","item":["Data.List.Lazy","union"]},{"package":"purescript-lists","item":["Data.List.Lazy","unionBy"]},{"package":"purescript-lists","item":["Data.List.Lazy","delete"]},{"package":"purescript-lists","item":["Data.List.Lazy","deleteBy"]},{"package":"purescript-lists","item":["Data.List.Lazy","difference"]},{"package":"purescript-lists","item":["Data.List.Lazy","(\\\\)"]},{"package":"purescript-lists","item":["Data.List.Lazy","intersect"]},{"package":"purescript-lists","item":["Data.List.Lazy","intersectBy"]},{"package":"purescript-lists","item":["Data.List.Lazy","zipWith"]},{"package":"purescript-lists","item":["Data.List.Lazy","zipWithA"]},{"package":"purescript-lists","item":["Data.List.Lazy","zip"]},{"package":"purescript-lists","item":["Data.List.Lazy","unzip"]},{"package":"purescript-lists","item":["Data.List.Lazy","transpose"]},{"package":"purescript-lists","item":["Data.List.Lazy","foldM"]},{"package":"purescript-lists","item":["Data.List.Lazy","lazyList"]},{"package":"purescript-lists","item":["Data.List.ZipList","ZipList"]},{"package":"purescript-lists","item":["Data.List.ZipList","runZipList"]},{"package":"purescript-psci-support","item":["PSCI.Support","Eval"]},{"package":"purescript-psci-support","item":["PSCI.Support","evalShow"]},{"package":"purescript-psci-support","item":["PSCI.Support","evalEff"]},{"package":"purescript-lazy","item":["Data.Lazy","Lazy"]},{"package":"purescript-lazy","item":["Data.Lazy","defer"]},{"package":"purescript-lazy","item":["Data.Lazy","force"]},{"package":"purescript-lazy","item":["Data.Lazy","semiringLazy"]},{"package":"purescript-lazy","item":["Data.Lazy","ringLazy"]},{"package":"purescript-lazy","item":["Data.Lazy","commutativeRingLazy"]},{"package":"purescript-lazy","item":["Data.Lazy","euclideanRingLazy"]},{"package":"purescript-lazy","item":["Data.Lazy","fieldLazy"]},{"package":"purescript-lazy","item":["Data.Lazy","eqLazy"]},{"package":"purescript-lazy","item":["Data.Lazy","ordLazy"]},{"package":"purescript-lazy","item":["Data.Lazy","boundedLazy"]},{"package":"purescript-lazy","item":["Data.Lazy","semigroupLazy"]},{"package":"purescript-lazy","item":["Data.Lazy","monoidLazy"]},{"package":"purescript-lazy","item":["Data.Lazy","heytingAlgebraLazy"]},{"package":"purescript-lazy","item":["Data.Lazy","booleanAlgebraLazy"]},{"package":"purescript-lazy","item":["Data.Lazy","functorLazy"]},{"package":"purescript-lazy","item":["Data.Lazy","applyLazy"]},{"package":"purescript-lazy","item":["Data.Lazy","applicativeLazy"]},{"package":"purescript-lazy","item":["Data.Lazy","bindLazy"]},{"package":"purescript-lazy","item":["Data.Lazy","monadLazy"]},{"package":"purescript-lazy","item":["Data.Lazy","extendLazy"]},{"package":"purescript-lazy","item":["Data.Lazy","comonadLazy"]},{"package":"purescript-lazy","item":["Data.Lazy","showLazy"]},{"package":"purescript-lazy","item":["Data.Lazy","lazyLazy"]},{"package":"purescript-nonempty","item":["Data.NonEmpty","NonEmpty"]},{"package":"purescript-nonempty","item":["Data.NonEmpty","(:|)"]},{"package":"purescript-nonempty","item":["Data.NonEmpty","singleton"]},{"package":"purescript-nonempty","item":["Data.NonEmpty","foldl1"]},{"package":"purescript-nonempty","item":["Data.NonEmpty","foldMap1"]},{"package":"purescript-nonempty","item":["Data.NonEmpty","fold1"]},{"package":"purescript-nonempty","item":["Data.NonEmpty","fromNonEmpty"]},{"package":"purescript-nonempty","item":["Data.NonEmpty","oneOf"]},{"package":"purescript-nonempty","item":["Data.NonEmpty","head"]},{"package":"purescript-nonempty","item":["Data.NonEmpty","tail"]},{"package":"purescript-tuples","item":["Data.Tuple","Tuple"]},{"package":"purescript-tuples","item":["Data.Tuple","showTuple"]},{"package":"purescript-tuples","item":["Data.Tuple","eqTuple"]},{"package":"purescript-tuples","item":["Data.Tuple","ordTuple"]},{"package":"purescript-tuples","item":["Data.Tuple","boundedTuple"]},{"package":"purescript-tuples","item":["Data.Tuple","semigroupoidTuple"]},{"package":"purescript-tuples","item":["Data.Tuple","semigroupTuple"]},{"package":"purescript-tuples","item":["Data.Tuple","monoidTuple"]},{"package":"purescript-tuples","item":["Data.Tuple","semiringTuple"]},{"package":"purescript-tuples","item":["Data.Tuple","ringTuple"]},{"package":"purescript-tuples","item":["Data.Tuple","commutativeRingTuple"]},{"package":"purescript-tuples","item":["Data.Tuple","heytingAlgebraTuple"]},{"package":"purescript-tuples","item":["Data.Tuple","booleanAlgebraTuple"]},{"package":"purescript-tuples","item":["Data.Tuple","functorTuple"]},{"package":"purescript-tuples","item":["Data.Tuple","invariantTuple"]},{"package":"purescript-tuples","item":["Data.Tuple","bifunctorTuple"]},{"package":"purescript-tuples","item":["Data.Tuple","applyTuple"]},{"package":"purescript-tuples","item":["Data.Tuple","biapplyTuple"]},{"package":"purescript-tuples","item":["Data.Tuple","applicativeTuple"]},{"package":"purescript-tuples","item":["Data.Tuple","biapplicativeTuple"]},{"package":"purescript-tuples","item":["Data.Tuple","bindTuple"]},{"package":"purescript-tuples","item":["Data.Tuple","monadTuple"]},{"package":"purescript-tuples","item":["Data.Tuple","extendTuple"]},{"package":"purescript-tuples","item":["Data.Tuple","comonadTuple"]},{"package":"purescript-tuples","item":["Data.Tuple","lazyTuple"]},{"package":"purescript-tuples","item":["Data.Tuple","foldableTuple"]},{"package":"purescript-tuples","item":["Data.Tuple","bifoldableTuple"]},{"package":"purescript-tuples","item":["Data.Tuple","traversableTuple"]},{"package":"purescript-tuples","item":["Data.Tuple","bitraversableTuple"]},{"package":"purescript-tuples","item":["Data.Tuple","fst"]},{"package":"purescript-tuples","item":["Data.Tuple","snd"]},{"package":"purescript-tuples","item":["Data.Tuple","curry"]},{"package":"purescript-tuples","item":["Data.Tuple","uncurry"]},{"package":"purescript-tuples","item":["Data.Tuple","swap"]},{"package":"purescript-tuples","item":["Data.Tuple","lookup"]},{"package":"purescript-tuples","item":["Data.Tuple.Nested","(/\\)"]},{"package":"purescript-tuples","item":["Data.Tuple.Nested","Tuple2"]},{"package":"purescript-tuples","item":["Data.Tuple.Nested","Tuple3"]},{"package":"purescript-tuples","item":["Data.Tuple.Nested","Tuple4"]},{"package":"purescript-tuples","item":["Data.Tuple.Nested","Tuple5"]},{"package":"purescript-tuples","item":["Data.Tuple.Nested","Tuple6"]},{"package":"purescript-tuples","item":["Data.Tuple.Nested","Tuple7"]},{"package":"purescript-tuples","item":["Data.Tuple.Nested","Tuple8"]},{"package":"purescript-tuples","item":["Data.Tuple.Nested","Tuple9"]},{"package":"purescript-tuples","item":["Data.Tuple.Nested","Tuple10"]},{"package":"purescript-tuples","item":["Data.Tuple.Nested","tuple2"]},{"package":"purescript-tuples","item":["Data.Tuple.Nested","tuple3"]},{"package":"purescript-tuples","item":["Data.Tuple.Nested","tuple4"]},{"package":"purescript-tuples","item":["Data.Tuple.Nested","tuple5"]},{"package":"purescript-tuples","item":["Data.Tuple.Nested","tuple6"]},{"package":"purescript-tuples","item":["Data.Tuple.Nested","tuple7"]},{"package":"purescript-tuples","item":["Data.Tuple.Nested","tuple8"]},{"package":"purescript-tuples","item":["Data.Tuple.Nested","tuple9"]},{"package":"purescript-tuples","item":["Data.Tuple.Nested","tuple10"]},{"package":"purescript-tuples","item":["Data.Tuple.Nested","uncurry2"]},{"package":"purescript-tuples","item":["Data.Tuple.Nested","curry2"]},{"package":"purescript-tuples","item":["Data.Tuple.Nested","uncurry3"]},{"package":"purescript-tuples","item":["Data.Tuple.Nested","curry3"]},{"package":"purescript-tuples","item":["Data.Tuple.Nested","uncurry4"]},{"package":"purescript-tuples","item":["Data.Tuple.Nested","curry4"]},{"package":"purescript-tuples","item":["Data.Tuple.Nested","uncurry5"]},{"package":"purescript-tuples","item":["Data.Tuple.Nested","curry5"]},{"package":"purescript-tuples","item":["Data.Tuple.Nested","uncurry6"]},{"package":"purescript-tuples","item":["Data.Tuple.Nested","curry6"]},{"package":"purescript-tuples","item":["Data.Tuple.Nested","uncurry7"]},{"package":"purescript-tuples","item":["Data.Tuple.Nested","curry7"]},{"package":"purescript-tuples","item":["Data.Tuple.Nested","uncurry8"]},{"package":"purescript-tuples","item":["Data.Tuple.Nested","curry8"]},{"package":"purescript-tuples","item":["Data.Tuple.Nested","uncurry9"]},{"package":"purescript-tuples","item":["Data.Tuple.Nested","curry9"]},{"package":"purescript-tuples","item":["Data.Tuple.Nested","uncurry10"]},{"package":"purescript-tuples","item":["Data.Tuple.Nested","curry10"]},{"package":"purescript-foldable-traversable","item":["Data.Foldable","Foldable"]},{"package":"purescript-foldable-traversable","item":["Data.Foldable","foldrDefault"]},{"package":"purescript-foldable-traversable","item":["Data.Foldable","foldlDefault"]},{"package":"purescript-foldable-traversable","item":["Data.Foldable","foldMapDefaultR"]},{"package":"purescript-foldable-traversable","item":["Data.Foldable","foldMapDefaultL"]},{"package":"purescript-foldable-traversable","item":["Data.Foldable","fold"]},{"package":"purescript-foldable-traversable","item":["Data.Foldable","traverse_"]},{"package":"purescript-foldable-traversable","item":["Data.Foldable","for_"]},{"package":"purescript-foldable-traversable","item":["Data.Foldable","sequence_"]},{"package":"purescript-foldable-traversable","item":["Data.Foldable","oneOf"]},{"package":"purescript-foldable-traversable","item":["Data.Foldable","intercalate"]},{"package":"purescript-foldable-traversable","item":["Data.Foldable","and"]},{"package":"purescript-foldable-traversable","item":["Data.Foldable","or"]},{"package":"purescript-foldable-traversable","item":["Data.Foldable","all"]},{"package":"purescript-foldable-traversable","item":["Data.Foldable","any"]},{"package":"purescript-foldable-traversable","item":["Data.Foldable","sum"]},{"package":"purescript-foldable-traversable","item":["Data.Foldable","product"]},{"package":"purescript-foldable-traversable","item":["Data.Foldable","elem"]},{"package":"purescript-foldable-traversable","item":["Data.Foldable","notElem"]},{"package":"purescript-foldable-traversable","item":["Data.Foldable","find"]},{"package":"purescript-foldable-traversable","item":["Data.Foldable","maximum"]},{"package":"purescript-foldable-traversable","item":["Data.Foldable","maximumBy"]},{"package":"purescript-foldable-traversable","item":["Data.Foldable","minimum"]},{"package":"purescript-foldable-traversable","item":["Data.Foldable","minimumBy"]},{"package":"purescript-foldable-traversable","item":["Data.Traversable","Traversable"]},{"package":"purescript-foldable-traversable","item":["Data.Traversable","traverseDefault"]},{"package":"purescript-foldable-traversable","item":["Data.Traversable","sequenceDefault"]},{"package":"purescript-foldable-traversable","item":["Data.Traversable","for"]},{"package":"purescript-foldable-traversable","item":["Data.Traversable","Accum"]},{"package":"purescript-foldable-traversable","item":["Data.Traversable","scanl"]},{"package":"purescript-foldable-traversable","item":["Data.Traversable","mapAccumL"]},{"package":"purescript-foldable-traversable","item":["Data.Traversable","scanr"]},{"package":"purescript-foldable-traversable","item":["Data.Traversable","mapAccumR"]},{"package":"purescript-foldable-traversable","item":["Data.Bitraversable","Bitraversable"]},{"package":"purescript-foldable-traversable","item":["Data.Bitraversable","bitraverseDefault"]},{"package":"purescript-foldable-traversable","item":["Data.Bitraversable","bisequenceDefault"]},{"package":"purescript-foldable-traversable","item":["Data.Bitraversable","bifor"]},{"package":"purescript-foldable-traversable","item":["Data.Bifoldable","Bifoldable"]},{"package":"purescript-foldable-traversable","item":["Data.Bifoldable","bifoldrDefault"]},{"package":"purescript-foldable-traversable","item":["Data.Bifoldable","bifoldlDefault"]},{"package":"purescript-foldable-traversable","item":["Data.Bifoldable","bifoldMapDefaultR"]},{"package":"purescript-foldable-traversable","item":["Data.Bifoldable","bifoldMapDefaultL"]},{"package":"purescript-foldable-traversable","item":["Data.Bifoldable","bifold"]},{"package":"purescript-foldable-traversable","item":["Data.Bifoldable","bitraverse_"]},{"package":"purescript-foldable-traversable","item":["Data.Bifoldable","bifor_"]},{"package":"purescript-foldable-traversable","item":["Data.Bifoldable","bisequence_"]},{"package":"purescript-foldable-traversable","item":["Data.Bifoldable","biany"]},{"package":"purescript-foldable-traversable","item":["Data.Bifoldable","biall"]},{"package":"purescript-invariant","item":["Data.Functor.Invariant","Invariant"]},{"package":"purescript-invariant","item":["Data.Functor.Invariant","invariantFn"]},{"package":"purescript-invariant","item":["Data.Functor.Invariant","invariantArray"]},{"package":"purescript-invariant","item":["Data.Functor.Invariant","imapF"]},{"package":"purescript-exists","item":["Data.Exists","Exists"]},{"package":"purescript-exists","item":["Data.Exists","mkExists"]},{"package":"purescript-exists","item":["Data.Exists","runExists"]},{"package":"purescript-quickcheck","item":["Test.QuickCheck","QC"]},{"package":"purescript-quickcheck","item":["Test.QuickCheck","quickCheck"]},{"package":"purescript-quickcheck","item":["Test.QuickCheck","quickCheck'"]},{"package":"purescript-quickcheck","item":["Test.QuickCheck","quickCheckPure"]},{"package":"purescript-quickcheck","item":["Test.QuickCheck","Testable"]},{"package":"purescript-quickcheck","item":["Test.QuickCheck","testableResult"]},{"package":"purescript-quickcheck","item":["Test.QuickCheck","testableBoolean"]},{"package":"purescript-quickcheck","item":["Test.QuickCheck","testableFunction"]},{"package":"purescript-quickcheck","item":["Test.QuickCheck","Result"]},{"package":"purescript-quickcheck","item":["Test.QuickCheck","showResult"]},{"package":"purescript-quickcheck","item":["Test.QuickCheck","withHelp"]},{"package":"purescript-quickcheck","item":["Test.QuickCheck","withHelp"]},{"package":"purescript-quickcheck","item":["Test.QuickCheck","(<?>)"]},{"package":"purescript-quickcheck","item":["Test.QuickCheck","assertEquals"]},{"package":"purescript-quickcheck","item":["Test.QuickCheck","(===)"]},{"package":"purescript-quickcheck","item":["Test.QuickCheck","assertNotEquals"]},{"package":"purescript-quickcheck","item":["Test.QuickCheck","(/==)"]},{"package":"purescript-quickcheck","item":["Test.QuickCheck.Gen","Size"]},{"package":"purescript-quickcheck","item":["Test.QuickCheck.Gen","GenState"]},{"package":"purescript-quickcheck","item":["Test.QuickCheck.Gen","Gen"]},{"package":"purescript-quickcheck","item":["Test.QuickCheck.Gen","repeatable"]},{"package":"purescript-quickcheck","item":["Test.QuickCheck.Gen","stateful"]},{"package":"purescript-quickcheck","item":["Test.QuickCheck.Gen","variant"]},{"package":"purescript-quickcheck","item":["Test.QuickCheck.Gen","sized"]},{"package":"purescript-quickcheck","item":["Test.QuickCheck.Gen","resize"]},{"package":"purescript-quickcheck","item":["Test.QuickCheck.Gen","choose"]},{"package":"purescript-quickcheck","item":["Test.QuickCheck.Gen","chooseInt"]},{"package":"purescript-quickcheck","item":["Test.QuickCheck.Gen","oneOf"]},{"package":"purescript-quickcheck","item":["Test.QuickCheck.Gen","frequency"]},{"package":"purescript-quickcheck","item":["Test.QuickCheck.Gen","arrayOf"]},{"package":"purescript-quickcheck","item":["Test.QuickCheck.Gen","arrayOf1"]},{"package":"purescript-quickcheck","item":["Test.QuickCheck.Gen","listOf"]},{"package":"purescript-quickcheck","item":["Test.QuickCheck.Gen","vectorOf"]},{"package":"purescript-quickcheck","item":["Test.QuickCheck.Gen","elements"]},{"package":"purescript-quickcheck","item":["Test.QuickCheck.Gen","runGen"]},{"package":"purescript-quickcheck","item":["Test.QuickCheck.Gen","evalGen"]},{"package":"purescript-quickcheck","item":["Test.QuickCheck.Gen","sample"]},{"package":"purescript-quickcheck","item":["Test.QuickCheck.Gen","randomSample'"]},{"package":"purescript-quickcheck","item":["Test.QuickCheck.Gen","randomSample"]},{"package":"purescript-quickcheck","item":["Test.QuickCheck.Gen","uniform"]},{"package":"purescript-quickcheck","item":["Test.QuickCheck.Gen","perturbGen"]},{"package":"purescript-quickcheck","item":["Test.QuickCheck.LCG","lcgM"]},{"package":"purescript-quickcheck","item":["Test.QuickCheck.LCG","lcgC"]},{"package":"purescript-quickcheck","item":["Test.QuickCheck.LCG","lcgN"]},{"package":"purescript-quickcheck","item":["Test.QuickCheck.LCG","lcgPerturb"]},{"package":"purescript-quickcheck","item":["Test.QuickCheck.LCG","lcgNext"]},{"package":"purescript-quickcheck","item":["Test.QuickCheck.LCG","randomSeed"]},{"package":"purescript-quickcheck","item":["Test.QuickCheck.LCG","Seed"]},{"package":"purescript-quickcheck","item":["Test.QuickCheck.LCG","mkSeed"]},{"package":"purescript-quickcheck","item":["Test.QuickCheck.LCG","runSeed"]},{"package":"purescript-quickcheck","item":["Test.QuickCheck.Arbitrary","Arbitrary"]},{"package":"purescript-quickcheck","item":["Test.QuickCheck.Arbitrary","Coarbitrary"]},{"package":"purescript-quickcheck","item":["Test.QuickCheck.Arbitrary","arbBoolean"]},{"package":"purescript-quickcheck","item":["Test.QuickCheck.Arbitrary","coarbBoolean"]},{"package":"purescript-quickcheck","item":["Test.QuickCheck.Arbitrary","arbNumber"]},{"package":"purescript-quickcheck","item":["Test.QuickCheck.Arbitrary","coarbNumber"]},{"package":"purescript-quickcheck","item":["Test.QuickCheck.Arbitrary","arbInt"]},{"package":"purescript-quickcheck","item":["Test.QuickCheck.Arbitrary","coarbInt"]},{"package":"purescript-quickcheck","item":["Test.QuickCheck.Arbitrary","arbString"]},{"package":"purescript-quickcheck","item":["Test.QuickCheck.Arbitrary","coarbString"]},{"package":"purescript-quickcheck","item":["Test.QuickCheck.Arbitrary","arbChar"]},{"package":"purescript-quickcheck","item":["Test.QuickCheck.Arbitrary","coarbChar"]},{"package":"purescript-quickcheck","item":["Test.QuickCheck.Arbitrary","arbUnit"]},{"package":"purescript-quickcheck","item":["Test.QuickCheck.Arbitrary","coarbUnit"]},{"package":"purescript-quickcheck","item":["Test.QuickCheck.Arbitrary","arbOrdering"]},{"package":"purescript-quickcheck","item":["Test.QuickCheck.Arbitrary","coarbOrdering"]},{"package":"purescript-quickcheck","item":["Test.QuickCheck.Arbitrary","arbArray"]},{"package":"purescript-quickcheck","item":["Test.QuickCheck.Arbitrary","coarbArray"]},{"package":"purescript-quickcheck","item":["Test.QuickCheck.Arbitrary","arbFunction"]},{"package":"purescript-quickcheck","item":["Test.QuickCheck.Arbitrary","coarbFunction"]},{"package":"purescript-quickcheck","item":["Test.QuickCheck.Arbitrary","arbTuple"]},{"package":"purescript-quickcheck","item":["Test.QuickCheck.Arbitrary","coarbTuple"]},{"package":"purescript-quickcheck","item":["Test.QuickCheck.Arbitrary","arbMaybe"]},{"package":"purescript-quickcheck","item":["Test.QuickCheck.Arbitrary","coarbMaybe"]},{"package":"purescript-quickcheck","item":["Test.QuickCheck.Arbitrary","arbEither"]},{"package":"purescript-quickcheck","item":["Test.QuickCheck.Arbitrary","coarbEither"]},{"package":"purescript-quickcheck","item":["Test.QuickCheck.Arbitrary","arbitraryList"]},{"package":"purescript-quickcheck","item":["Test.QuickCheck.Arbitrary","coarbList"]},{"package":"purescript-quickcheck","item":["Test.QuickCheck.Arbitrary","arbitraryIdentity"]},{"package":"purescript-quickcheck","item":["Test.QuickCheck.Arbitrary","coarbIdentity"]},{"package":"purescript-quickcheck","item":["Test.QuickCheck.Arbitrary","arbitraryLazy"]},{"package":"purescript-quickcheck","item":["Test.QuickCheck.Arbitrary","coarbLazy"]},{"package":"purescript-quickcheck","item":["Test.QuickCheck.Data.ApproxNumber","ApproxNumber"]},{"package":"purescript-quickcheck","item":["Test.QuickCheck.Data.ApproxNumber","approximateEqual"]},{"package":"purescript-quickcheck","item":["Test.QuickCheck.Data.ApproxNumber","(=~=)"]},{"package":"purescript-quickcheck","item":["Test.QuickCheck.Data.ApproxNumber","arbitraryApproxNumber"]},{"package":"purescript-quickcheck","item":["Test.QuickCheck.Data.ApproxNumber","coarbitraryApproxNumber"]},{"package":"purescript-quickcheck","item":["Test.QuickCheck.Data.ApproxNumber","eqApproxNumber"]},{"package":"purescript-quickcheck","item":["Test.QuickCheck.Data.ApproxNumber","ordApproxNumber"]},{"package":"purescript-quickcheck","item":["Test.QuickCheck.Data.ApproxNumber","semiringApproxNumber"]},{"package":"purescript-quickcheck","item":["Test.QuickCheck.Data.ApproxNumber","ringApproxNumber"]},{"package":"purescript-quickcheck","item":["Test.QuickCheck.Data.ApproxNumber","commutativeRingApproxNumber"]},{"package":"purescript-quickcheck","item":["Test.QuickCheck.Data.ApproxNumber","euclideanRingApproxNumber"]},{"package":"purescript-quickcheck","item":["Test.QuickCheck.Data.ApproxNumber","fieldApproxNumber"]},{"package":"purescript-quickcheck","item":["Test.QuickCheck.Data.AlphaNumString","AlphaNumString"]},{"package":"purescript-quickcheck","item":["Test.QuickCheck.Data.AlphaNumString","runAlphaNumString"]},{"package":"purescript-quickcheck","item":["Test.QuickCheck.Data.AlphaNumString","arbAlphaNumString"]},{"package":"purescript-quickcheck","item":["Test.QuickCheck.Data.AlphaNumString","coarbAlphaNumString"]},{"package":"purescript-arrays","item":["Data.Array","toUnfoldable"]},{"package":"purescript-arrays","item":["Data.Array","fromFoldable"]},{"package":"purescript-arrays","item":["Data.Array","singleton"]},{"package":"purescript-arrays","item":["Data.Array","range"]},{"package":"purescript-arrays","item":["Data.Array","(..)"]},{"package":"purescript-arrays","item":["Data.Array","some"]},{"package":"purescript-arrays","item":["Data.Array","many"]},{"package":"purescript-arrays","item":["Data.Array","null"]},{"package":"purescript-arrays","item":["Data.Array","length"]},{"package":"purescript-arrays","item":["Data.Array","cons"]},{"package":"purescript-arrays","item":["Data.Array","(:)"]},{"package":"purescript-arrays","item":["Data.Array","snoc"]},{"package":"purescript-arrays","item":["Data.Array","insert"]},{"package":"purescript-arrays","item":["Data.Array","insertBy"]},{"package":"purescript-arrays","item":["Data.Array","head"]},{"package":"purescript-arrays","item":["Data.Array","last"]},{"package":"purescript-arrays","item":["Data.Array","tail"]},{"package":"purescript-arrays","item":["Data.Array","init"]},{"package":"purescript-arrays","item":["Data.Array","uncons"]},{"package":"purescript-arrays","item":["Data.Array","index"]},{"package":"purescript-arrays","item":["Data.Array","(!!)"]},{"package":"purescript-arrays","item":["Data.Array","elemIndex"]},{"package":"purescript-arrays","item":["Data.Array","elemLastIndex"]},{"package":"purescript-arrays","item":["Data.Array","findIndex"]},{"package":"purescript-arrays","item":["Data.Array","findLastIndex"]},{"package":"purescript-arrays","item":["Data.Array","insertAt"]},{"package":"purescript-arrays","item":["Data.Array","deleteAt"]},{"package":"purescript-arrays","item":["Data.Array","updateAt"]},{"package":"purescript-arrays","item":["Data.Array","modifyAt"]},{"package":"purescript-arrays","item":["Data.Array","alterAt"]},{"package":"purescript-arrays","item":["Data.Array","reverse"]},{"package":"purescript-arrays","item":["Data.Array","concat"]},{"package":"purescript-arrays","item":["Data.Array","concatMap"]},{"package":"purescript-arrays","item":["Data.Array","filter"]},{"package":"purescript-arrays","item":["Data.Array","partition"]},{"package":"purescript-arrays","item":["Data.Array","filterM"]},{"package":"purescript-arrays","item":["Data.Array","mapMaybe"]},{"package":"purescript-arrays","item":["Data.Array","catMaybes"]},{"package":"purescript-arrays","item":["Data.Array","mapWithIndex"]},{"package":"purescript-arrays","item":["Data.Array","sort"]},{"package":"purescript-arrays","item":["Data.Array","sortBy"]},{"package":"purescript-arrays","item":["Data.Array","slice"]},{"package":"purescript-arrays","item":["Data.Array","take"]},{"package":"purescript-arrays","item":["Data.Array","takeWhile"]},{"package":"purescript-arrays","item":["Data.Array","drop"]},{"package":"purescript-arrays","item":["Data.Array","dropWhile"]},{"package":"purescript-arrays","item":["Data.Array","span"]},{"package":"purescript-arrays","item":["Data.Array","group"]},{"package":"purescript-arrays","item":["Data.Array","group'"]},{"package":"purescript-arrays","item":["Data.Array","groupBy"]},{"package":"purescript-arrays","item":["Data.Array","nub"]},{"package":"purescript-arrays","item":["Data.Array","nubBy"]},{"package":"purescript-arrays","item":["Data.Array","union"]},{"package":"purescript-arrays","item":["Data.Array","unionBy"]},{"package":"purescript-arrays","item":["Data.Array","delete"]},{"package":"purescript-arrays","item":["Data.Array","deleteBy"]},{"package":"purescript-arrays","item":["Data.Array","deleteBy"]},{"package":"purescript-arrays","item":["Data.Array","difference"]},{"package":"purescript-arrays","item":["Data.Array","(\\\\)"]},{"package":"purescript-arrays","item":["Data.Array","intersect"]},{"package":"purescript-arrays","item":["Data.Array","intersectBy"]},{"package":"purescript-arrays","item":["Data.Array","zipWith"]},{"package":"purescript-arrays","item":["Data.Array","zipWithA"]},{"package":"purescript-arrays","item":["Data.Array","zip"]},{"package":"purescript-arrays","item":["Data.Array","unzip"]},{"package":"purescript-arrays","item":["Data.Array","foldM"]},{"package":"purescript-arrays","item":["Data.Array.Partial","unsafeIndex"]},{"package":"purescript-arrays","item":["Data.Array.Partial","head"]},{"package":"purescript-arrays","item":["Data.Array.Partial","tail"]},{"package":"purescript-arrays","item":["Data.Array.Partial","last"]},{"package":"purescript-arrays","item":["Data.Array.Partial","init"]},{"package":"purescript-arrays","item":["Data.Array.ST","STArray"]},{"package":"purescript-arrays","item":["Data.Array.ST","Assoc"]},{"package":"purescript-arrays","item":["Data.Array.ST","runSTArray"]},{"package":"purescript-arrays","item":["Data.Array.ST","emptySTArray"]},{"package":"purescript-arrays","item":["Data.Array.ST","thaw"]},{"package":"purescript-arrays","item":["Data.Array.ST","freeze"]},{"package":"purescript-arrays","item":["Data.Array.ST","peekSTArray"]},{"package":"purescript-arrays","item":["Data.Array.ST","pokeSTArray"]},{"package":"purescript-arrays","item":["Data.Array.ST","pushSTArray"]},{"package":"purescript-arrays","item":["Data.Array.ST","pushAllSTArray"]},{"package":"purescript-arrays","item":["Data.Array.ST","spliceSTArray"]},{"package":"purescript-arrays","item":["Data.Array.ST","toAssocArray"]},{"package":"purescript-partial","item":["Partial.Unsafe","unsafePartial"]},{"package":"purescript-partial","item":["Partial.Unsafe","unsafeCrashWith"]},{"package":"purescript-partial","item":["Partial","crash"]},{"package":"purescript-partial","item":["Partial","crashWith"]},{"package":"purescript-integers","item":["Data.Int","fromNumber"]},{"package":"purescript-integers","item":["Data.Int","floor"]},{"package":"purescript-integers","item":["Data.Int","ceil"]},{"package":"purescript-integers","item":["Data.Int","round"]},{"package":"purescript-integers","item":["Data.Int","toNumber"]},{"package":"purescript-integers","item":["Data.Int","fromString"]},{"package":"purescript-integers","item":["Data.Int","even"]},{"package":"purescript-integers","item":["Data.Int","odd"]},{"package":"purescript-integers","item":["Data.Int","Radix"]},{"package":"purescript-integers","item":["Data.Int","binary"]},{"package":"purescript-integers","item":["Data.Int","octal"]},{"package":"purescript-integers","item":["Data.Int","decimal"]},{"package":"purescript-integers","item":["Data.Int","hexadecimal"]},{"package":"purescript-integers","item":["Data.Int","base36"]},{"package":"purescript-integers","item":["Data.Int","radix"]},{"package":"purescript-integers","item":["Data.Int","fromStringAs"]},{"package":"purescript-integers","item":["Data.Int","toStringAs"]},{"package":"purescript-integers","item":["Data.Int.Bits","and"]},{"package":"purescript-integers","item":["Data.Int.Bits","(.&.)"]},{"package":"purescript-integers","item":["Data.Int.Bits","or"]},{"package":"purescript-integers","item":["Data.Int.Bits","(.|.)"]},{"package":"purescript-integers","item":["Data.Int.Bits","xor"]},{"package":"purescript-integers","item":["Data.Int.Bits","(.^.)"]},{"package":"purescript-integers","item":["Data.Int.Bits","shl"]},{"package":"purescript-integers","item":["Data.Int.Bits","shr"]},{"package":"purescript-integers","item":["Data.Int.Bits","zshr"]},{"package":"purescript-integers","item":["Data.Int.Bits","complement"]},{"package":"purescript-math","item":["Math","Radians"]},{"package":"purescript-math","item":["Math","abs"]},{"package":"purescript-math","item":["Math","acos"]},{"package":"purescript-math","item":["Math","asin"]},{"package":"purescript-math","item":["Math","atan"]},{"package":"purescript-math","item":["Math","atan2"]},{"package":"purescript-math","item":["Math","ceil"]},{"package":"purescript-math","item":["Math","cos"]},{"package":"purescript-math","item":["Math","exp"]},{"package":"purescript-math","item":["Math","floor"]},{"package":"purescript-math","item":["Math","log"]},{"package":"purescript-math","item":["Math","max"]},{"package":"purescript-math","item":["Math","min"]},{"package":"purescript-math","item":["Math","pow"]},{"package":"purescript-math","item":["Math","round"]},{"package":"purescript-math","item":["Math","sin"]},{"package":"purescript-math","item":["Math","sqrt"]},{"package":"purescript-math","item":["Math","tan"]},{"package":"purescript-math","item":["Math","trunc"]},{"package":"purescript-math","item":["Math","remainder"]},{"package":"purescript-math","item":["Math","(%)"]},{"package":"purescript-math","item":["Math","e"]},{"package":"purescript-math","item":["Math","ln2"]},{"package":"purescript-math","item":["Math","ln10"]},{"package":"purescript-math","item":["Math","log2e"]},{"package":"purescript-math","item":["Math","log10e"]},{"package":"purescript-math","item":["Math","pi"]},{"package":"purescript-math","item":["Math","sqrt1_2"]},{"package":"purescript-math","item":["Math","sqrt2"]},{"package":"purescript-identity","item":["Data.Identity","Identity"]},{"package":"purescript-identity","item":["Data.Identity","runIdentity"]},{"package":"purescript-identity","item":["Data.Identity","eqIdentity"]},{"package":"purescript-identity","item":["Data.Identity","ordIdentity"]},{"package":"purescript-identity","item":["Data.Identity","boundedIdentity"]},{"package":"purescript-identity","item":["Data.Identity","heytingAlgebraIdentity"]},{"package":"purescript-identity","item":["Data.Identity","booleanAlgebraIdentity"]},{"package":"purescript-identity","item":["Data.Identity","semigroupIdenity"]},{"package":"purescript-identity","item":["Data.Identity","monoidIdentity"]},{"package":"purescript-identity","item":["Data.Identity","semiringIdentity"]},{"package":"purescript-identity","item":["Data.Identity","euclideanRingIdentity"]},{"package":"purescript-identity","item":["Data.Identity","ringIdentity"]},{"package":"purescript-identity","item":["Data.Identity","commutativeRingIdentity"]},{"package":"purescript-identity","item":["Data.Identity","fieldIdentity"]},{"package":"purescript-identity","item":["Data.Identity","showIdentity"]},{"package":"purescript-identity","item":["Data.Identity","functorIdentity"]},{"package":"purescript-identity","item":["Data.Identity","invariantIdentity"]},{"package":"purescript-identity","item":["Data.Identity","altIdentity"]},{"package":"purescript-identity","item":["Data.Identity","applyIdentity"]},{"package":"purescript-identity","item":["Data.Identity","applicativeIdentity"]},{"package":"purescript-identity","item":["Data.Identity","bindIdentity"]},{"package":"purescript-identity","item":["Data.Identity","monadIdentity"]},{"package":"purescript-identity","item":["Data.Identity","extendIdentity"]},{"package":"purescript-identity","item":["Data.Identity","comonadIdentity"]},{"package":"purescript-identity","item":["Data.Identity","foldableIdentity"]},{"package":"purescript-identity","item":["Data.Identity","traversableIdentity"]},{"package":"purescript-functor-coproducts","item":["Data.Functor.Coproduct","Coproduct"]},{"package":"purescript-functor-coproducts","item":["Data.Functor.Coproduct","unCoproduct"]},{"package":"purescript-functor-coproducts","item":["Data.Functor.Coproduct","left"]},{"package":"purescript-functor-coproducts","item":["Data.Functor.Coproduct","right"]},{"package":"purescript-functor-coproducts","item":["Data.Functor.Coproduct","coproduct"]},{"package":"purescript-functor-coproducts","item":["Data.Functor.Coproduct","bihoistCoproduct"]},{"package":"purescript-functor-coproducts","item":["Data.Functor.Coproduct","functorCoproduct"]},{"package":"purescript-functor-coproducts","item":["Data.Functor.Coproduct","foldableCoproduct"]},{"package":"purescript-functor-coproducts","item":["Data.Functor.Coproduct","traversableCoproduct"]},{"package":"purescript-functor-coproducts","item":["Data.Functor.Coproduct.Nested","Coproduct2"]},{"package":"purescript-functor-coproducts","item":["Data.Functor.Coproduct.Nested","Coproduct3"]},{"package":"purescript-functor-coproducts","item":["Data.Functor.Coproduct.Nested","Coproduct4"]},{"package":"purescript-functor-coproducts","item":["Data.Functor.Coproduct.Nested","Coproduct5"]},{"package":"purescript-functor-coproducts","item":["Data.Functor.Coproduct.Nested","Coproduct6"]},{"package":"purescript-functor-coproducts","item":["Data.Functor.Coproduct.Nested","Coproduct7"]},{"package":"purescript-functor-coproducts","item":["Data.Functor.Coproduct.Nested","Coproduct8"]},{"package":"purescript-functor-coproducts","item":["Data.Functor.Coproduct.Nested","Coproduct9"]},{"package":"purescript-functor-coproducts","item":["Data.Functor.Coproduct.Nested","Coproduct10"]},{"package":"purescript-functor-coproducts","item":["Data.Functor.Coproduct.Nested","coproduct1of2"]},{"package":"purescript-functor-coproducts","item":["Data.Functor.Coproduct.Nested","coproduct2of2"]},{"package":"purescript-functor-coproducts","item":["Data.Functor.Coproduct.Nested","coproduct1of3"]},{"package":"purescript-functor-coproducts","item":["Data.Functor.Coproduct.Nested","coproduct2of3"]},{"package":"purescript-functor-coproducts","item":["Data.Functor.Coproduct.Nested","coproduct3of3"]},{"package":"purescript-functor-coproducts","item":["Data.Functor.Coproduct.Nested","coproduct1of4"]},{"package":"purescript-functor-coproducts","item":["Data.Functor.Coproduct.Nested","coproduct2of4"]},{"package":"purescript-functor-coproducts","item":["Data.Functor.Coproduct.Nested","coproduct3of4"]},{"package":"purescript-functor-coproducts","item":["Data.Functor.Coproduct.Nested","coproduct4of4"]},{"package":"purescript-functor-coproducts","item":["Data.Functor.Coproduct.Nested","coproduct1of5"]},{"package":"purescript-functor-coproducts","item":["Data.Functor.Coproduct.Nested","coproduct2of5"]},{"package":"purescript-functor-coproducts","item":["Data.Functor.Coproduct.Nested","coproduct3of5"]},{"package":"purescript-functor-coproducts","item":["Data.Functor.Coproduct.Nested","coproduct4of5"]},{"package":"purescript-functor-coproducts","item":["Data.Functor.Coproduct.Nested","coproduct5of5"]},{"package":"purescript-functor-coproducts","item":["Data.Functor.Coproduct.Nested","coproduct1of6"]},{"package":"purescript-functor-coproducts","item":["Data.Functor.Coproduct.Nested","coproduct2of6"]},{"package":"purescript-functor-coproducts","item":["Data.Functor.Coproduct.Nested","coproduct3of6"]},{"package":"purescript-functor-coproducts","item":["Data.Functor.Coproduct.Nested","coproduct4of6"]},{"package":"purescript-functor-coproducts","item":["Data.Functor.Coproduct.Nested","coproduct5of6"]},{"package":"purescript-functor-coproducts","item":["Data.Functor.Coproduct.Nested","coproduct6of6"]},{"package":"purescript-functor-coproducts","item":["Data.Functor.Coproduct.Nested","coproduct1of7"]},{"package":"purescript-functor-coproducts","item":["Data.Functor.Coproduct.Nested","coproduct2of7"]},{"package":"purescript-functor-coproducts","item":["Data.Functor.Coproduct.Nested","coproduct3of7"]},{"package":"purescript-functor-coproducts","item":["Data.Functor.Coproduct.Nested","coproduct4of7"]},{"package":"purescript-functor-coproducts","item":["Data.Functor.Coproduct.Nested","coproduct5of7"]},{"package":"purescript-functor-coproducts","item":["Data.Functor.Coproduct.Nested","coproduct6of7"]},{"package":"purescript-functor-coproducts","item":["Data.Functor.Coproduct.Nested","coproduct7of7"]},{"package":"purescript-functor-coproducts","item":["Data.Functor.Coproduct.Nested","coproduct1of8"]},{"package":"purescript-functor-coproducts","item":["Data.Functor.Coproduct.Nested","coproduct2of8"]},{"package":"purescript-functor-coproducts","item":["Data.Functor.Coproduct.Nested","coproduct3of8"]},{"package":"purescript-functor-coproducts","item":["Data.Functor.Coproduct.Nested","coproduct4of8"]},{"package":"purescript-functor-coproducts","item":["Data.Functor.Coproduct.Nested","coproduct5of8"]},{"package":"purescript-functor-coproducts","item":["Data.Functor.Coproduct.Nested","coproduct6of8"]},{"package":"purescript-functor-coproducts","item":["Data.Functor.Coproduct.Nested","coproduct7of8"]},{"package":"purescript-functor-coproducts","item":["Data.Functor.Coproduct.Nested","coproduct8of8"]},{"package":"purescript-functor-coproducts","item":["Data.Functor.Coproduct.Nested","coproduct1of9"]},{"package":"purescript-functor-coproducts","item":["Data.Functor.Coproduct.Nested","coproduct2of9"]},{"package":"purescript-functor-coproducts","item":["Data.Functor.Coproduct.Nested","coproduct3of9"]},{"package":"purescript-functor-coproducts","item":["Data.Functor.Coproduct.Nested","coproduct4of9"]},{"package":"purescript-functor-coproducts","item":["Data.Functor.Coproduct.Nested","coproduct5of9"]},{"package":"purescript-functor-coproducts","item":["Data.Functor.Coproduct.Nested","coproduct6of9"]},{"package":"purescript-functor-coproducts","item":["Data.Functor.Coproduct.Nested","coproduct7of9"]},{"package":"purescript-functor-coproducts","item":["Data.Functor.Coproduct.Nested","coproduct8of9"]},{"package":"purescript-functor-coproducts","item":["Data.Functor.Coproduct.Nested","coproduct9of9"]},{"package":"purescript-functor-coproducts","item":["Data.Functor.Coproduct.Nested","coproduct1of10"]},{"package":"purescript-functor-coproducts","item":["Data.Functor.Coproduct.Nested","coproduct2of10"]},{"package":"purescript-functor-coproducts","item":["Data.Functor.Coproduct.Nested","coproduct3of10"]},{"package":"purescript-functor-coproducts","item":["Data.Functor.Coproduct.Nested","coproduct4of10"]},{"package":"purescript-functor-coproducts","item":["Data.Functor.Coproduct.Nested","coproduct5of10"]},{"package":"purescript-functor-coproducts","item":["Data.Functor.Coproduct.Nested","coproduct6of10"]},{"package":"purescript-functor-coproducts","item":["Data.Functor.Coproduct.Nested","coproduct7of10"]},{"package":"purescript-functor-coproducts","item":["Data.Functor.Coproduct.Nested","coproduct8of10"]},{"package":"purescript-functor-coproducts","item":["Data.Functor.Coproduct.Nested","coproduct9of10"]},{"package":"purescript-functor-coproducts","item":["Data.Functor.Coproduct.Nested","coproduct10of10"]},{"package":"purescript-functor-coproducts","item":["Data.Functor.Coproduct.Nested","coproduct2"]},{"package":"purescript-functor-coproducts","item":["Data.Functor.Coproduct.Nested","coproduct3"]},{"package":"purescript-functor-coproducts","item":["Data.Functor.Coproduct.Nested","coproduct4"]},{"package":"purescript-functor-coproducts","item":["Data.Functor.Coproduct.Nested","coproduct5"]},{"package":"purescript-functor-coproducts","item":["Data.Functor.Coproduct.Nested","coproduct6"]},{"package":"purescript-functor-coproducts","item":["Data.Functor.Coproduct.Nested","coproduct7"]},{"package":"purescript-functor-coproducts","item":["Data.Functor.Coproduct.Nested","coproduct8"]},{"package":"purescript-functor-coproducts","item":["Data.Functor.Coproduct.Nested","coproduct9"]},{"package":"purescript-functor-coproducts","item":["Data.Functor.Coproduct.Nested","coproduct10"]},{"package":"purescript-unfoldable","item":["Data.Unfoldable","Unfoldable"]},{"package":"purescript-unfoldable","item":["Data.Unfoldable","replicate"]},{"package":"purescript-unfoldable","item":["Data.Unfoldable","replicateA"]},{"package":"purescript-unfoldable","item":["Data.Unfoldable","none"]},{"package":"purescript-unfoldable","item":["Data.Unfoldable","singleton"]},{"package":"purescript-parallel","item":["Control.Parallel.Class","MonadPar"]},{"package":"purescript-parallel","item":["Control.Parallel.Class","parTraverse_"]},{"package":"purescript-parallel","item":["Control.Parallel.Class","parTraverse"]},{"package":"purescript-parallel","item":["Control.Parallel.Class","MonadRace"]},{"package":"purescript-parallel","item":["Control.Parallel.Class","Parallel"]},{"package":"purescript-parallel","item":["Control.Parallel.Class","parallel"]},{"package":"purescript-parallel","item":["Control.Parallel.Class","runParallel"]},{"package":"purescript-generics","item":["Data.Generic","Generic"]},{"package":"purescript-generics","item":["Data.Generic","GenericSpine"]},{"package":"purescript-generics","item":["Data.Generic","GenericSignature"]},{"package":"purescript-generics","item":["Data.Generic","DataConstructor"]},{"package":"purescript-generics","item":["Data.Generic","showDataConstructor"]},{"package":"purescript-generics","item":["Data.Generic","showSignature"]},{"package":"purescript-generics","item":["Data.Generic","isValidSpine"]},{"package":"purescript-generics","item":["Data.Generic","isValidSpine"]},{"package":"purescript-generics","item":["Data.Generic","isValidSpine"]},{"package":"purescript-generics","item":["Data.Generic","isValidSpine"]},{"package":"purescript-generics","item":["Data.Generic","isValidSpine"]},{"package":"purescript-generics","item":["Data.Generic","isValidSpine"]},{"package":"purescript-generics","item":["Data.Generic","isValidSpine"]},{"package":"purescript-generics","item":["Data.Generic","isValidSpine"]},{"package":"purescript-generics","item":["Data.Generic","isValidSpine"]},{"package":"purescript-generics","item":["Data.Generic","isValidSpine"]},{"package":"purescript-generics","item":["Data.Generic","gShow"]},{"package":"purescript-generics","item":["Data.Generic","gEq"]},{"package":"purescript-generics","item":["Data.Generic","gCompare"]},{"package":"purescript-free","item":["Control.Monad.Free","Free"]},{"package":"purescript-free","item":["Control.Monad.Free","liftF"]},{"package":"purescript-free","item":["Control.Monad.Free","liftFI"]},{"package":"purescript-free","item":["Control.Monad.Free","suspendF"]},{"package":"purescript-free","item":["Control.Monad.Free","hoistFree"]},{"package":"purescript-free","item":["Control.Monad.Free","injF"]},{"package":"purescript-free","item":["Control.Monad.Free","foldFree"]},{"package":"purescript-free","item":["Control.Monad.Free","substFree"]},{"package":"purescript-free","item":["Control.Monad.Free","runFree"]},{"package":"purescript-free","item":["Control.Monad.Free","runFreeM"]},{"package":"purescript-free","item":["Control.Monad.Free","resume"]},{"package":"purescript-free","item":["Control.Monad.Trampoline","Trampoline"]},{"package":"purescript-free","item":["Control.Monad.Trampoline","done"]},{"package":"purescript-free","item":["Control.Monad.Trampoline","suspend"]},{"package":"purescript-free","item":["Control.Monad.Trampoline","delay'"]},{"package":"purescript-free","item":["Control.Monad.Trampoline","delay"]},{"package":"purescript-free","item":["Control.Monad.Trampoline","runTrampoline"]},{"package":"purescript-free","item":["Control.Comonad.Cofree","Cofree"]},{"package":"purescript-free","item":["Control.Comonad.Cofree","mkCofree"]},{"package":"purescript-free","item":["Control.Comonad.Cofree","head"]},{"package":"purescript-free","item":["Control.Comonad.Cofree","tail"]},{"package":"purescript-free","item":["Data.Coyoneda","CoyonedaF"]},{"package":"purescript-free","item":["Data.Coyoneda","Coyoneda"]},{"package":"purescript-free","item":["Data.Coyoneda","coyoneda"]},{"package":"purescript-free","item":["Data.Coyoneda","liftCoyoneda"]},{"package":"purescript-free","item":["Data.Coyoneda","lowerCoyoneda"]},{"package":"purescript-free","item":["Data.Coyoneda","hoistCoyoneda"]},{"package":"purescript-free","item":["Data.Yoneda","Yoneda"]},{"package":"purescript-free","item":["Data.Yoneda","runYoneda"]},{"package":"purescript-free","item":["Data.Yoneda","liftYoneda"]},{"package":"purescript-free","item":["Data.Yoneda","lowerYoneda"]},{"package":"purescript-free","item":["Data.Yoneda","hoistYoneda"]},{"package":"purescript-catenable-lists","item":["Data.CatList","CatList"]},{"package":"purescript-catenable-lists","item":["Data.CatList","empty"]},{"package":"purescript-catenable-lists","item":["Data.CatList","null"]},{"package":"purescript-catenable-lists","item":["Data.CatList","null"]},{"package":"purescript-catenable-lists","item":["Data.CatList","append"]},{"package":"purescript-catenable-lists","item":["Data.CatList","append"]},{"package":"purescript-catenable-lists","item":["Data.CatList","append"]},{"package":"purescript-catenable-lists","item":["Data.CatList","cons"]},{"package":"purescript-catenable-lists","item":["Data.CatList","snoc"]},{"package":"purescript-catenable-lists","item":["Data.CatList","uncons"]},{"package":"purescript-catenable-lists","item":["Data.CatList","uncons"]},{"package":"purescript-catenable-lists","item":["Data.CatList","fromFoldable"]},{"package":"purescript-catenable-lists","item":["Data.CatQueue","CatQueue"]},{"package":"purescript-catenable-lists","item":["Data.CatQueue","empty"]},{"package":"purescript-catenable-lists","item":["Data.CatQueue","null"]},{"package":"purescript-catenable-lists","item":["Data.CatQueue","null"]},{"package":"purescript-catenable-lists","item":["Data.CatQueue","snoc"]},{"package":"purescript-catenable-lists","item":["Data.CatQueue","uncons"]},{"package":"purescript-catenable-lists","item":["Data.CatQueue","uncons"]},{"package":"purescript-catenable-lists","item":["Data.CatQueue","uncons"]},{"package":"purescript-functions","item":["Data.Function.Uncurried","Fn0"]},{"package":"purescript-functions","item":["Data.Function.Uncurried","Fn1"]},{"package":"purescript-functions","item":["Data.Function.Uncurried","Fn2"]},{"package":"purescript-functions","item":["Data.Function.Uncurried","Fn3"]},{"package":"purescript-functions","item":["Data.Function.Uncurried","Fn4"]},{"package":"purescript-functions","item":["Data.Function.Uncurried","Fn5"]},{"package":"purescript-functions","item":["Data.Function.Uncurried","Fn6"]},{"package":"purescript-functions","item":["Data.Function.Uncurried","Fn7"]},{"package":"purescript-functions","item":["Data.Function.Uncurried","Fn8"]},{"package":"purescript-functions","item":["Data.Function.Uncurried","Fn9"]},{"package":"purescript-functions","item":["Data.Function.Uncurried","Fn10"]},{"package":"purescript-functions","item":["Data.Function.Uncurried","mkFn0"]},{"package":"purescript-functions","item":["Data.Function.Uncurried","mkFn1"]},{"package":"purescript-functions","item":["Data.Function.Uncurried","mkFn2"]},{"package":"purescript-functions","item":["Data.Function.Uncurried","mkFn3"]},{"package":"purescript-functions","item":["Data.Function.Uncurried","mkFn4"]},{"package":"purescript-functions","item":["Data.Function.Uncurried","mkFn5"]},{"package":"purescript-functions","item":["Data.Function.Uncurried","mkFn6"]},{"package":"purescript-functions","item":["Data.Function.Uncurried","mkFn7"]},{"package":"purescript-functions","item":["Data.Function.Uncurried","mkFn8"]},{"package":"purescript-functions","item":["Data.Function.Uncurried","mkFn9"]},{"package":"purescript-functions","item":["Data.Function.Uncurried","mkFn10"]},{"package":"purescript-functions","item":["Data.Function.Uncurried","runFn0"]},{"package":"purescript-functions","item":["Data.Function.Uncurried","runFn1"]},{"package":"purescript-functions","item":["Data.Function.Uncurried","runFn2"]},{"package":"purescript-functions","item":["Data.Function.Uncurried","runFn3"]},{"package":"purescript-functions","item":["Data.Function.Uncurried","runFn4"]},{"package":"purescript-functions","item":["Data.Function.Uncurried","runFn5"]},{"package":"purescript-functions","item":["Data.Function.Uncurried","runFn6"]},{"package":"purescript-functions","item":["Data.Function.Uncurried","runFn7"]},{"package":"purescript-functions","item":["Data.Function.Uncurried","runFn8"]},{"package":"purescript-functions","item":["Data.Function.Uncurried","runFn9"]},{"package":"purescript-functions","item":["Data.Function.Uncurried","runFn10"]},{"package":"purescript-control","item":["Control.MonadZero","MonadZero"]},{"package":"purescript-control","item":["Control.MonadZero","guard"]},{"package":"purescript-control","item":["Control.MonadZero","guard"]},{"package":"purescript-control","item":["Control.Comonad","Comonad"]},{"package":"purescript-control","item":["Control.Lazy","Lazy"]},{"package":"purescript-control","item":["Control.Lazy","fix"]},{"package":"purescript-control","item":["Control.Extend","Extend"]},{"package":"purescript-control","item":["Control.Extend","(<<=)"]},{"package":"purescript-control","item":["Control.Extend","extendFlipped"]},{"package":"purescript-control","item":["Control.Extend","(=>>)"]},{"package":"purescript-control","item":["Control.Extend","composeCoKleisli"]},{"package":"purescript-control","item":["Control.Extend","(=>=)"]},{"package":"purescript-control","item":["Control.Extend","composeCoKleisliFlipped"]},{"package":"purescript-control","item":["Control.Extend","(=<=)"]},{"package":"purescript-control","item":["Control.Extend","duplicate"]},{"package":"purescript-control","item":["Control.MonadPlus","MonadPlus"]},{"package":"purescript-control","item":["Control.Alternative","Alternative"]},{"package":"purescript-control","item":["Control.Plus","Plus"]},{"package":"purescript-control","item":["Control.Alt","Alt"]},{"package":"purescript-control","item":["Control.Alt","(<|>)"]},{"package":"purescript-prelude","item":["Control.Applicative","Applicative"]},{"package":"purescript-prelude","item":["Control.Applicative","applicativeFn"]},{"package":"purescript-prelude","item":["Control.Applicative","liftA1"]},{"package":"purescript-prelude","item":["Control.Applicative","when"]},{"package":"purescript-prelude","item":["Control.Applicative","when"]},{"package":"purescript-prelude","item":["Control.Applicative","unless"]},{"package":"purescript-prelude","item":["Control.Applicative","unless"]},{"package":"purescript-prelude","item":["Control.Bind","Bind"]},{"package":"purescript-prelude","item":["Control.Bind","(>>=)"]},{"package":"purescript-prelude","item":["Control.Bind","bindFlipped"]},{"package":"purescript-prelude","item":["Control.Bind","(=<<)"]},{"package":"purescript-prelude","item":["Control.Bind","bindFn"]},{"package":"purescript-prelude","item":["Control.Bind","join"]},{"package":"purescript-prelude","item":["Control.Bind","composeKleisli"]},{"package":"purescript-prelude","item":["Control.Bind","(>=>)"]},{"package":"purescript-prelude","item":["Control.Bind","composeKleisliFlipped"]},{"package":"purescript-prelude","item":["Control.Bind","(<=<)"]},{"package":"purescript-prelude","item":["Control.Bind","ifM"]},{"package":"purescript-prelude","item":["Control.Category","Category"]},{"package":"purescript-prelude","item":["Control.Category","categoryFn"]},{"package":"purescript-prelude","item":["Control.Monad","Monad"]},{"package":"purescript-prelude","item":["Control.Monad","monadFn"]},{"package":"purescript-prelude","item":["Control.Monad","liftM1"]},{"package":"purescript-prelude","item":["Control.Monad","ap"]},{"package":"purescript-prelude","item":["Control.Apply","Apply"]},{"package":"purescript-prelude","item":["Control.Apply","(<*>)"]},{"package":"purescript-prelude","item":["Control.Apply","applyFn"]},{"package":"purescript-prelude","item":["Control.Apply","applyFirst"]},{"package":"purescript-prelude","item":["Control.Apply","(<*)"]},{"package":"purescript-prelude","item":["Control.Apply","applySecond"]},{"package":"purescript-prelude","item":["Control.Apply","(*>)"]},{"package":"purescript-prelude","item":["Control.Apply","lift2"]},{"package":"purescript-prelude","item":["Control.Apply","lift3"]},{"package":"purescript-prelude","item":["Control.Apply","lift4"]},{"package":"purescript-prelude","item":["Control.Apply","lift5"]},{"package":"purescript-prelude","item":["Control.Semigroupoid","Semigroupoid"]},{"package":"purescript-prelude","item":["Control.Semigroupoid","semigroupoidFn"]},{"package":"purescript-prelude","item":["Control.Semigroupoid","(<<<)"]},{"package":"purescript-prelude","item":["Control.Semigroupoid","composeFlipped"]},{"package":"purescript-prelude","item":["Control.Semigroupoid","(>>>)"]},{"package":"purescript-prelude","item":["Data.Boolean","otherwise"]},{"package":"purescript-prelude","item":["Data.Functor","Functor"]},{"package":"purescript-prelude","item":["Data.Functor","(<$>)"]},{"package":"purescript-prelude","item":["Data.Functor","mapFlipped"]},{"package":"purescript-prelude","item":["Data.Functor","(<#>)"]},{"package":"purescript-prelude","item":["Data.Functor","functorFn"]},{"package":"purescript-prelude","item":["Data.Functor","void"]},{"package":"purescript-prelude","item":["Data.Functor","voidRight"]},{"package":"purescript-prelude","item":["Data.Functor","(<$)"]},{"package":"purescript-prelude","item":["Data.Functor","voidLeft"]},{"package":"purescript-prelude","item":["Data.Functor","($>)"]},{"package":"purescript-prelude","item":["Data.EuclideanRing","EuclideanRing"]},{"package":"purescript-prelude","item":["Data.EuclideanRing","(/)"]},{"package":"purescript-prelude","item":["Data.NaturalTransformation","NaturalTransformation"]},{"package":"purescript-prelude","item":["Data.NaturalTransformation","type (~>)"]},{"package":"purescript-prelude","item":["Data.Ring","Ring"]},{"package":"purescript-prelude","item":["Data.Ring","(-)"]},{"package":"purescript-prelude","item":["Data.Ring","negate"]},{"package":"purescript-prelude","item":["Data.Field","Field"]},{"package":"purescript-prelude","item":["Data.HeytingAlgebra","HeytingAlgebra"]},{"package":"purescript-prelude","item":["Data.HeytingAlgebra","(&&)"]},{"package":"purescript-prelude","item":["Data.HeytingAlgebra","(||)"]},{"package":"purescript-prelude","item":["Data.HeytingAlgebra","heytingAlgebraFunction"]},{"package":"purescript-prelude","item":["Data.Unit","Unit"]},{"package":"purescript-prelude","item":["Data.Unit","unit"]},{"package":"purescript-prelude","item":["Data.Unit","showUnit"]},{"package":"purescript-prelude","item":["Data.Void","Void"]},{"package":"purescript-prelude","item":["Data.Void","absurd"]},{"package":"purescript-prelude","item":["Data.CommutativeRing","CommutativeRing"]},{"package":"purescript-prelude","item":["Data.Ord","Ord"]},{"package":"purescript-prelude","item":["Data.Ord","lessThan"]},{"package":"purescript-prelude","item":["Data.Ord","greaterThan"]},{"package":"purescript-prelude","item":["Data.Ord","lessThanOrEq"]},{"package":"purescript-prelude","item":["Data.Ord","greaterThanOrEq"]},{"package":"purescript-prelude","item":["Data.Ord","(<)"]},{"package":"purescript-prelude","item":["Data.Ord","(<=)"]},{"package":"purescript-prelude","item":["Data.Ord","(>)"]},{"package":"purescript-prelude","item":["Data.Ord","(>=)"]},{"package":"purescript-prelude","item":["Data.Ord","comparing"]},{"package":"purescript-prelude","item":["Data.Ord","min"]},{"package":"purescript-prelude","item":["Data.Ord","max"]},{"package":"purescript-prelude","item":["Data.Ord","clamp"]},{"package":"purescript-prelude","item":["Data.Ord","between"]},{"package":"purescript-prelude","item":["Data.Ord","abs"]},{"package":"purescript-prelude","item":["Data.Ord","signum"]},{"package":"purescript-prelude","item":["Data.Function","flip"]},{"package":"purescript-prelude","item":["Data.Function","const"]},{"package":"purescript-prelude","item":["Data.Function","apply"]},{"package":"purescript-prelude","item":["Data.Function","($)"]},{"package":"purescript-prelude","item":["Data.Function","applyFlipped"]},{"package":"purescript-prelude","item":["Data.Function","(#)"]},{"package":"purescript-prelude","item":["Data.Function","on"]},{"package":"purescript-prelude","item":["Data.Semigroup","Semigroup"]},{"package":"purescript-prelude","item":["Data.Semigroup","(<>)"]},{"package":"purescript-prelude","item":["Data.Semigroup","semigroupFn"]},{"package":"purescript-prelude","item":["Data.Eq","Eq"]},{"package":"purescript-prelude","item":["Data.Eq","(==)"]},{"package":"purescript-prelude","item":["Data.Eq","notEq"]},{"package":"purescript-prelude","item":["Data.Eq","(/=)"]},{"package":"purescript-prelude","item":["Data.Show","Show"]},{"package":"purescript-prelude","item":["Data.Ordering","Ordering"]},{"package":"purescript-prelude","item":["Data.Ordering","invert"]},{"package":"purescript-prelude","item":["Data.Ordering","invert"]},{"package":"purescript-prelude","item":["Data.Ordering","invert"]},{"package":"purescript-prelude","item":["Data.Bounded","Bounded"]},{"package":"purescript-prelude","item":["Data.BooleanAlgebra","BooleanAlgebra"]},{"package":"purescript-prelude","item":["Data.Semiring","Semiring"]},{"package":"purescript-prelude","item":["Data.Semiring","(+)"]},{"package":"purescript-prelude","item":["Data.Semiring","(*)"]},{"package":"purescript-prelude","item":["Data.Ord.Unsafe","unsafeCompare"]}],"version":"1.0.0","github":["sharkdp","purescript-quantities"],"versionTag":"v1.0.0","compilerVersion":"0.9.1"}