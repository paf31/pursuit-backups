{"uploader":"sharkdp","packageMeta":{"homepage":"https://github.com/sharkdp/purescript-quantities","repository":{"url":"git://github.com/sharkdp/purescript-quantities.git","type":"git"},"ignore":["**/.*","node_modules","bower_components","output"],"devDependencies":{"purescript-test-unit":"^10.0.0","purescript-psci-support":"^2.0.0"},"authors":[{"email":"mail@david-peter.de","name":"David Peter"}],"dependencies":{"purescript-monoid":"^2.0.0","purescript-nonempty":"^3.0.0","purescript-numbers":"^3.0.0","purescript-lists":"^3.0.0"},"name":"purescript-quantities","license":["MIT"],"description":"Physical quantities and units"},"tagTime":"2017-03-03T18:34:33+0000","modules":[{"reExports":[],"name":"Data.Quantity","comments":null,"declarations":[{"children":[{"comments":null,"title":"eqQuantity","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Eq"],"Eq"]},{"tag":"TypeConstructor","contents":[["Data","Quantity"],"Quantity"]}]}},"sourceSpan":{"start":[61,1],"name":"src/Data/Quantity.purs","end":[65,26]}},{"comments":null,"title":"showQuantity","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Show"],"Show"]},{"tag":"TypeConstructor","contents":[["Data","Quantity"],"Quantity"]}]}},"sourceSpan":{"start":[67,1],"name":"src/Data/Quantity.purs","end":[70,1]}}],"comments":"Representation of a physical quantity as a (product of a) numerical value\nand a physical unit.\n","title":"Quantity","info":{"declType":"data","dataDeclType":"data","typeArguments":[]},"sourceSpan":{"start":[46,1],"name":"src/Data/Quantity.purs","end":[46,44]}},{"children":[],"comments":"Construct a physical quantity from a numerical value and the physical\nunit.\n","title":"quantity","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}]},{"tag":"TypeConstructor","contents":[["Data","Quantity"],"Quantity"]}]}]}},"sourceSpan":{"start":[53,1],"name":"src/Data/Quantity.purs","end":[53,44]}},{"children":[],"comments":null,"title":"(.*)","info":{"declType":"alias","alias":[["Data","Quantity"],{"Right":{"Left":{"Ident":"quantity"}}}],"fixity":{"associativity":"infix","precedence":5}},"sourceSpan":{"start":[59,1],"name":"src/Data/Quantity.purs","end":[59,23]}},{"children":[],"comments":"Show a physical quantity in a human-readable form.\n","title":"prettyPrint","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Quantity"],"Quantity"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}},"sourceSpan":{"start":[71,1],"name":"src/Data/Quantity.purs","end":[71,33]}},{"children":[],"comments":"Show the (possibly failed) result of a computation in human-readable form.\n","title":"showResult","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Either"],"Either"]},{"tag":"TypeConstructor","contents":[["Data","Quantity"],"UnificationError"]}]},{"tag":"TypeConstructor","contents":[["Data","Quantity"],"Quantity"]}]}]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}},"sourceSpan":{"start":[78,1],"name":"src/Data/Quantity.purs","end":[78,56]}},{"children":[],"comments":"The unit of a physical quantity.\n","title":"derivedUnit","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Quantity"],"Quantity"]}]},{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}]}},"sourceSpan":{"start":[88,1],"name":"src/Data/Quantity.purs","end":[88,38]}},{"children":[],"comments":"Convert a quantity to its standard representation.\n","title":"toStandard","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Quantity"],"Quantity"]}]},{"tag":"TypeConstructor","contents":[["Data","Quantity"],"Quantity"]}]}},"sourceSpan":{"start":[92,1],"name":"src/Data/Quantity.purs","end":[92,34]}},{"children":[],"comments":"Check whether two quantities have matching units (or can be converted\nto the same representation) and test if the numerical are approximately\nequal.\n","title":"approximatelyEqual","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Quantity"],"Quantity"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Quantity"],"Quantity"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}]}]}},"sourceSpan":{"start":[100,1],"name":"src/Data/Quantity.purs","end":[100,61]}},{"children":[{"comments":null,"title":"eqUnificationError","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Eq"],"Eq"]},{"tag":"TypeConstructor","contents":[["Data","Quantity"],"UnificationError"]}]}},"sourceSpan":{"start":[114,1],"name":"src/Data/Quantity.purs","end":[114,58]}},{"comments":null,"title":"showUnificationError","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Show"],"Show"]},{"tag":"TypeConstructor","contents":[["Data","Quantity"],"UnificationError"]}]}},"sourceSpan":{"start":[116,1],"name":"src/Data/Quantity.purs","end":[120,1]}}],"comments":"A unit conversion error that appears if two given units cannot be\nconverted into each other.\n","title":"UnificationError","info":{"declType":"data","dataDeclType":"data","typeArguments":[]},"sourceSpan":{"start":[112,1],"name":"src/Data/Quantity.purs","end":[112,65]}},{"children":[],"comments":"Textual representation of a unit conversion error.\n","title":"errorMessage","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Quantity"],"UnificationError"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}},"sourceSpan":{"start":[121,1],"name":"src/Data/Quantity.purs","end":[121,42]}},{"children":[],"comments":"Create a scalar (i.e. dimensionless) quantity from a number.\n","title":"scalar","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]},{"tag":"TypeConstructor","contents":[["Data","Quantity"],"Quantity"]}]}},"sourceSpan":{"start":[131,1],"name":"src/Data/Quantity.purs","end":[131,28]}},{"children":[],"comments":"Attempt to convert a physical quantity to a given target unit. Returns a\n`UnificationError` if the conversion fails.\n","title":"convert","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Quantity"],"Quantity"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Either"],"Either"]},{"tag":"TypeConstructor","contents":[["Data","Quantity"],"UnificationError"]}]},{"tag":"TypeConstructor","contents":[["Data","Quantity"],"Quantity"]}]}]}]}},"sourceSpan":{"start":[136,1],"name":"src/Data/Quantity.purs","end":[136,69]}},{"children":[],"comments":"Flipped version of `convert`.\n","title":"convertTo","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Quantity"],"Quantity"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Either"],"Either"]},{"tag":"TypeConstructor","contents":[["Data","Quantity"],"UnificationError"]}]},{"tag":"TypeConstructor","contents":[["Data","Quantity"],"Quantity"]}]}]}]}},"sourceSpan":{"start":[151,1],"name":"src/Data/Quantity.purs","end":[151,71]}},{"children":[],"comments":"Get the numerical value of a physical quantity in a given unit. Returns a\n`UnificationError` if the conversion fails.\n","title":"asValueIn","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Quantity"],"Quantity"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Either"],"Either"]},{"tag":"TypeConstructor","contents":[["Data","Quantity"],"UnificationError"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]}]}]}},"sourceSpan":{"start":[156,1],"name":"src/Data/Quantity.purs","end":[156,69]}},{"children":[],"comments":"Attempt to add two quantities. If the units can not be unified, an error\nis returned.\n","title":"qAdd","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Quantity"],"Quantity"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Quantity"],"Quantity"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Either"],"Either"]},{"tag":"TypeConstructor","contents":[["Data","Quantity"],"UnificationError"]}]},{"tag":"TypeConstructor","contents":[["Data","Quantity"],"Quantity"]}]}]}]}},"sourceSpan":{"start":[161,1],"name":"src/Data/Quantity.purs","end":[161,63]}},{"children":[],"comments":null,"title":"(⊕)","info":{"declType":"alias","alias":[["Data","Quantity"],{"Right":{"Left":{"Ident":"qAdd"}}}],"fixity":{"associativity":"infixl","precedence":3}},"sourceSpan":{"start":[167,1],"name":"src/Data/Quantity.purs","end":[167,19]}},{"children":[],"comments":"Attempt to subtract two quantities. If the units can not be unified, an\nerror is returned.\n","title":"qSubtract","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Quantity"],"Quantity"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Quantity"],"Quantity"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Either"],"Either"]},{"tag":"TypeConstructor","contents":[["Data","Quantity"],"UnificationError"]}]},{"tag":"TypeConstructor","contents":[["Data","Quantity"],"Quantity"]}]}]}]}},"sourceSpan":{"start":[171,1],"name":"src/Data/Quantity.purs","end":[171,68]}},{"children":[],"comments":null,"title":"(⊖)","info":{"declType":"alias","alias":[["Data","Quantity"],{"Right":{"Left":{"Ident":"qSubtract"}}}],"fixity":{"associativity":"infixl","precedence":3}},"sourceSpan":{"start":[174,1],"name":"src/Data/Quantity.purs","end":[174,24]}},{"children":[],"comments":"Multiply two quantities.\n","title":"qMultiply","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Quantity"],"Quantity"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Quantity"],"Quantity"]}]},{"tag":"TypeConstructor","contents":[["Data","Quantity"],"Quantity"]}]}]}},"sourceSpan":{"start":[177,1],"name":"src/Data/Quantity.purs","end":[177,44]}},{"children":[],"comments":null,"title":"(⊗)","info":{"declType":"alias","alias":[["Data","Quantity"],{"Right":{"Left":{"Ident":"qMultiply"}}}],"fixity":{"associativity":"infixl","precedence":4}},"sourceSpan":{"start":[180,1],"name":"src/Data/Quantity.purs","end":[180,24]}},{"children":[],"comments":"Divide two quantities.\n","title":"qDivide","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Quantity"],"Quantity"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Quantity"],"Quantity"]}]},{"tag":"TypeConstructor","contents":[["Data","Quantity"],"Quantity"]}]}]}},"sourceSpan":{"start":[183,1],"name":"src/Data/Quantity.purs","end":[183,42]}},{"children":[],"comments":null,"title":"(⊘)","info":{"declType":"alias","alias":[["Data","Quantity"],{"Right":{"Left":{"Ident":"qDivide"}}}],"fixity":{"associativity":"infixl","precedence":4}},"sourceSpan":{"start":[186,1],"name":"src/Data/Quantity.purs","end":[186,22]}},{"children":[],"comments":"Raise a quantity to a given power.\n","title":"pow","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Quantity"],"Quantity"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]},{"tag":"TypeConstructor","contents":[["Data","Quantity"],"Quantity"]}]}]}},"sourceSpan":{"start":[189,1],"name":"src/Data/Quantity.purs","end":[189,36]}},{"children":[],"comments":"The absolute value of a quantity.\n","title":"abs","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Quantity"],"Quantity"]}]},{"tag":"TypeConstructor","contents":[["Data","Quantity"],"Quantity"]}]}},"sourceSpan":{"start":[193,1],"name":"src/Data/Quantity.purs","end":[193,27]}},{"children":[],"comments":"The square root of a quantity.\n","title":"sqrt","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Quantity"],"Quantity"]}]},{"tag":"TypeConstructor","contents":[["Data","Quantity"],"Quantity"]}]}},"sourceSpan":{"start":[197,1],"name":"src/Data/Quantity.purs","end":[197,28]}}]},{"reExports":[],"name":"Data.Quantity.Math","comments":null,"declarations":[{"children":[],"comments":null,"title":"acos","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Quantity"],"Quantity"]}]},{"tag":"TypeConstructor","contents":[["Data","Quantity","Math"],"Result"]}]}},"sourceSpan":{"start":[30,1],"name":"src/Data/Quantity/Math.purs","end":[30,26]}},{"children":[],"comments":null,"title":"asin","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Quantity"],"Quantity"]}]},{"tag":"TypeConstructor","contents":[["Data","Quantity","Math"],"Result"]}]}},"sourceSpan":{"start":[33,1],"name":"src/Data/Quantity/Math.purs","end":[33,26]}},{"children":[],"comments":null,"title":"atan","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Quantity"],"Quantity"]}]},{"tag":"TypeConstructor","contents":[["Data","Quantity","Math"],"Result"]}]}},"sourceSpan":{"start":[36,1],"name":"src/Data/Quantity/Math.purs","end":[36,26]}},{"children":[],"comments":null,"title":"atan2","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Quantity"],"Quantity"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Quantity"],"Quantity"]}]},{"tag":"TypeConstructor","contents":[["Data","Quantity","Math"],"Result"]}]}]}},"sourceSpan":{"start":[39,1],"name":"src/Data/Quantity/Math.purs","end":[39,38]}},{"children":[],"comments":null,"title":"cos","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Quantity"],"Quantity"]}]},{"tag":"TypeConstructor","contents":[["Data","Quantity","Math"],"Result"]}]}},"sourceSpan":{"start":[42,1],"name":"src/Data/Quantity/Math.purs","end":[42,25]}},{"children":[],"comments":null,"title":"exp","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Quantity"],"Quantity"]}]},{"tag":"TypeConstructor","contents":[["Data","Quantity","Math"],"Result"]}]}},"sourceSpan":{"start":[45,1],"name":"src/Data/Quantity/Math.purs","end":[45,25]}},{"children":[],"comments":null,"title":"log","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Quantity"],"Quantity"]}]},{"tag":"TypeConstructor","contents":[["Data","Quantity","Math"],"Result"]}]}},"sourceSpan":{"start":[48,1],"name":"src/Data/Quantity/Math.purs","end":[48,25]}},{"children":[],"comments":null,"title":"sin","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Quantity"],"Quantity"]}]},{"tag":"TypeConstructor","contents":[["Data","Quantity","Math"],"Result"]}]}},"sourceSpan":{"start":[51,1],"name":"src/Data/Quantity/Math.purs","end":[51,25]}},{"children":[],"comments":null,"title":"tan","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Quantity"],"Quantity"]}]},{"tag":"TypeConstructor","contents":[["Data","Quantity","Math"],"Result"]}]}},"sourceSpan":{"start":[54,1],"name":"src/Data/Quantity/Math.purs","end":[54,25]}},{"children":[],"comments":null,"title":"pi","info":{"declType":"value","type":{"tag":"TypeConstructor","contents":[["Data","Quantity"],"Quantity"]}},"sourceSpan":{"start":[57,1],"name":"src/Data/Quantity/Math.purs","end":[57,14]}},{"children":[],"comments":null,"title":"e","info":{"declType":"value","type":{"tag":"TypeConstructor","contents":[["Data","Quantity"],"Quantity"]}},"sourceSpan":{"start":[60,1],"name":"src/Data/Quantity/Math.purs","end":[60,13]}}]},{"reExports":[],"name":"Data.Quantity.Physics","comments":null,"declarations":[{"children":[],"comments":"The speed of light in vacuum.\n","title":"speedOfLight","info":{"declType":"value","type":{"tag":"TypeConstructor","contents":[["Data","Quantity"],"Quantity"]}},"sourceSpan":{"start":[18,1],"name":"src/Data/Quantity/Physics.purs","end":[18,24]}},{"children":[],"comments":"The Newtonian constant of gravitation.\n","title":"gravitationalConstant","info":{"declType":"value","type":{"tag":"TypeConstructor","contents":[["Data","Quantity"],"Quantity"]}},"sourceSpan":{"start":[22,1],"name":"src/Data/Quantity/Physics.purs","end":[22,33]}},{"children":[],"comments":"The Planck constant.\n","title":"planckConstant","info":{"declType":"value","type":{"tag":"TypeConstructor","contents":[["Data","Quantity"],"Quantity"]}},"sourceSpan":{"start":[26,1],"name":"src/Data/Quantity/Physics.purs","end":[26,26]}},{"children":[],"comments":"The reduced Planck constant.\n","title":"hbar","info":{"declType":"value","type":{"tag":"TypeConstructor","contents":[["Data","Quantity"],"Quantity"]}},"sourceSpan":{"start":[30,1],"name":"src/Data/Quantity/Physics.purs","end":[30,16]}}]},{"reExports":[],"name":"Data.Units","comments":null,"declarations":[{"children":[],"comments":null,"title":"Prefix","info":{"arguments":[],"declType":"typeSynonym","type":{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}},"sourceSpan":{"start":[112,1],"name":"src/Data/Units.purs","end":[112,21]}},{"children":[{"comments":null,"title":"eqDerivedUnit","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Eq"],"Eq"]},{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}]}},"sourceSpan":{"start":[162,1],"name":"src/Data/Units.purs","end":[174,89]}},{"comments":null,"title":"showDerivedUnit","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Show"],"Show"]},{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}]}},"sourceSpan":{"start":[176,1],"name":"src/Data/Units.purs","end":[203,1]}},{"comments":null,"title":"semigroupDerivedUnit","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Semigroup"],"Semigroup"]},{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}]}},"sourceSpan":{"start":[203,1],"name":"src/Data/Units.purs","end":[205,38]}},{"comments":null,"title":"monoidDerivedUnit","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Monoid"],"Monoid"]},{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}]}},"sourceSpan":{"start":[207,1],"name":"src/Data/Units.purs","end":[208,17]}}],"comments":"A `DerivedUnit` is a product of `BaseUnits`, raised to arbitrary powers.\nThe `Semigroup`/`Monoid` instance implements multiplication of units. A\n`DerivedUnit` also has a `Prefix` value, which represents a numerical\nprefix as a power of ten.\n","title":"DerivedUnit","info":{"declType":"data","dataDeclType":"data","typeArguments":[]},"sourceSpan":{"start":[125,1],"name":"src/Data/Units.purs","end":[125,59]}},{"children":[],"comments":"Add a given prefix value to a unit. `withPrefix 3.0 meter = kilo meter`.\n","title":"withPrefix","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Units"],"Prefix"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}]},{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}]}]}},"sourceSpan":{"start":[132,1],"name":"src/Data/Units.purs","end":[132,49]}},{"children":[],"comments":"Helper function to create a standard unit.\n","title":"makeStandard","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}]}]}},"sourceSpan":{"start":[211,1],"name":"src/Data/Units.purs","end":[211,46]}},{"children":[],"comments":"Helper function to create a non-standard unit.\n","title":"makeNonStandard","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Units"],"ConversionFactor"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}]},{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}]}]}]}]}},"sourceSpan":{"start":[216,1],"name":"src/Data/Units.purs","end":[217,33]}},{"children":[],"comments":"Convert all contained units to standard units and return the global\nconversion factor.\n","title":"toStandardUnit","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Tuple"],"Tuple"]},{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}]},{"tag":"TypeConstructor","contents":[["Data","Units"],"ConversionFactor"]}]}]}},"sourceSpan":{"start":[223,1],"name":"src/Data/Units.purs","end":[223,67]}},{"children":[],"comments":"Get the name of a SI-prefix.\n","title":"prefixName","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Units"],"Prefix"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}]}},"sourceSpan":{"start":[237,1],"name":"src/Data/Units.purs","end":[237,36]}},{"children":[],"comments":"A human-readable `String` representation of a `DerivedUnit`, including\na prefix string if the unit needs to be combined with a numerical value.\n","title":"toStringWithPrefix","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Record"]},{"tag":"RCons","contents":["prefix",{"tag":"TypeConstructor","contents":[["Prim"],"String"]},{"tag":"RCons","contents":["value",{"tag":"TypeConstructor","contents":[["Prim"],"String"]},{"tag":"REmpty","contents":[]}]}]}]}]}},"sourceSpan":{"start":[272,1],"name":"src/Data/Units.purs","end":[272,74]}},{"children":[],"comments":"A human-readable `String` representation of a `DerivedUnit`.\n","title":"toString","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}},"sourceSpan":{"start":[302,1],"name":"src/Data/Units.purs","end":[302,33]}},{"children":[],"comments":"Raise a unit to the given power.\n","title":"power","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]},{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}]}]}},"sourceSpan":{"start":[306,1],"name":"src/Data/Units.purs","end":[306,44]}},{"children":[],"comments":null,"title":"(.^)","info":{"declType":"alias","alias":[["Data","Units"],{"Right":{"Left":{"Ident":"power"}}}],"fixity":{"associativity":"infixl","precedence":9}},"sourceSpan":{"start":[311,1],"name":"src/Data/Units.purs","end":[311,21]}},{"children":[],"comments":"Divide two units.\n","title":"divideUnits","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}]},{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}]}]}},"sourceSpan":{"start":[314,1],"name":"src/Data/Units.purs","end":[314,55]}},{"children":[],"comments":null,"title":"(./)","info":{"declType":"alias","alias":[["Data","Units"],{"Right":{"Left":{"Ident":"divideUnits"}}}],"fixity":{"associativity":"infixl","precedence":6}},"sourceSpan":{"start":[317,1],"name":"src/Data/Units.purs","end":[317,27]}},{"children":[],"comments":"A `DerivedUnit` corresponding to `1`, i.e. the unit of scalar\n(or dimensionless) values.\n","title":"unity","info":{"declType":"value","type":{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}},"sourceSpan":{"start":[326,1],"name":"src/Data/Units.purs","end":[326,21]}},{"children":[],"comments":null,"title":"atto","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}]},{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}]}},"sourceSpan":{"start":[333,1],"name":"src/Data/Units.purs","end":[333,34]}},{"children":[],"comments":null,"title":"femto","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}]},{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}]}},"sourceSpan":{"start":[336,1],"name":"src/Data/Units.purs","end":[336,35]}},{"children":[],"comments":null,"title":"pico","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}]},{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}]}},"sourceSpan":{"start":[339,1],"name":"src/Data/Units.purs","end":[339,34]}},{"children":[],"comments":null,"title":"nano","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}]},{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}]}},"sourceSpan":{"start":[342,1],"name":"src/Data/Units.purs","end":[342,34]}},{"children":[],"comments":null,"title":"micro","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}]},{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}]}},"sourceSpan":{"start":[345,1],"name":"src/Data/Units.purs","end":[345,35]}},{"children":[],"comments":null,"title":"milli","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}]},{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}]}},"sourceSpan":{"start":[348,1],"name":"src/Data/Units.purs","end":[348,35]}},{"children":[],"comments":null,"title":"centi","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}]},{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}]}},"sourceSpan":{"start":[351,1],"name":"src/Data/Units.purs","end":[351,35]}},{"children":[],"comments":null,"title":"deci","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}]},{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}]}},"sourceSpan":{"start":[354,1],"name":"src/Data/Units.purs","end":[354,34]}},{"children":[],"comments":null,"title":"hecto","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}]},{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}]}},"sourceSpan":{"start":[357,1],"name":"src/Data/Units.purs","end":[357,35]}},{"children":[],"comments":null,"title":"kilo","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}]},{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}]}},"sourceSpan":{"start":[360,1],"name":"src/Data/Units.purs","end":[360,34]}},{"children":[],"comments":null,"title":"mega","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}]},{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}]}},"sourceSpan":{"start":[363,1],"name":"src/Data/Units.purs","end":[363,34]}},{"children":[],"comments":null,"title":"giga","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}]},{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}]}},"sourceSpan":{"start":[366,1],"name":"src/Data/Units.purs","end":[366,34]}},{"children":[],"comments":null,"title":"tera","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}]},{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}]}},"sourceSpan":{"start":[369,1],"name":"src/Data/Units.purs","end":[369,34]}},{"children":[],"comments":null,"title":"peta","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}]},{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}]}},"sourceSpan":{"start":[372,1],"name":"src/Data/Units.purs","end":[372,34]}},{"children":[],"comments":null,"title":"exa","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}]},{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}]}},"sourceSpan":{"start":[375,1],"name":"src/Data/Units.purs","end":[375,33]}}]},{"reExports":[],"name":"Data.Units.Bit","comments":null,"declarations":[{"children":[],"comments":"Unit of digital information.\n","title":"bit","info":{"declType":"value","type":{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}},"sourceSpan":{"start":[6,1],"name":"src/Data/Units/Bit.purs","end":[6,19]}},{"children":[],"comments":"Unit of digital information, *1byte = 8bit*.\n","title":"byte","info":{"declType":"value","type":{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}},"sourceSpan":{"start":[10,1],"name":"src/Data/Units/Bit.purs","end":[10,20]}}]},{"reExports":[],"name":"Data.Units.Imperial","comments":"A collection units of the imperial system.\n","declarations":[{"children":[],"comments":"Unit of length, *1in = 0.0254m*.\n","title":"inch","info":{"declType":"value","type":{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}},"sourceSpan":{"start":[8,1],"name":"src/Data/Units/Imperial.purs","end":[8,20]}},{"children":[],"comments":"Unit of length, *1ft = 0.3048m*.\n","title":"foot","info":{"declType":"value","type":{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}},"sourceSpan":{"start":[12,1],"name":"src/Data/Units/Imperial.purs","end":[12,20]}},{"children":[],"comments":"Unit of length, *1yd = 0.9144m*.\n","title":"yard","info":{"declType":"value","type":{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}},"sourceSpan":{"start":[16,1],"name":"src/Data/Units/Imperial.purs","end":[16,20]}},{"children":[],"comments":"Unit of length, *1mi = 1609.344m*.\n","title":"mile","info":{"declType":"value","type":{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}},"sourceSpan":{"start":[20,1],"name":"src/Data/Units/Imperial.purs","end":[20,20]}},{"children":[],"comments":"Unit of mass, *1oz = 28.35g*.\n","title":"ounce","info":{"declType":"value","type":{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}},"sourceSpan":{"start":[24,1],"name":"src/Data/Units/Imperial.purs","end":[24,21]}},{"children":[],"comments":"Unit of mass, *1lb = 453.6g*.\n","title":"pound","info":{"declType":"value","type":{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}},"sourceSpan":{"start":[28,1],"name":"src/Data/Units/Imperial.purs","end":[28,21]}}]},{"reExports":[],"name":"Data.Units.SI","comments":"A collection of standardized SI units.\n","declarations":[{"children":[],"comments":"The meter is the standard unit of length.\n","title":"meter","info":{"declType":"value","type":{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}},"sourceSpan":{"start":[12,1],"name":"src/Data/Units/SI.purs","end":[12,21]}},{"children":[],"comments":"The kilogram is the standard unit of mass.\n","title":"kilogram","info":{"declType":"value","type":{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}},"sourceSpan":{"start":[16,1],"name":"src/Data/Units/SI.purs","end":[16,24]}},{"children":[],"comments":"The second is the standard unit of time.\n","title":"second","info":{"declType":"value","type":{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}},"sourceSpan":{"start":[20,1],"name":"src/Data/Units/SI.purs","end":[20,22]}},{"children":[],"comments":"One gram equals one-thousandth of a *kilogram*.\n","title":"gram","info":{"declType":"value","type":{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}},"sourceSpan":{"start":[24,1],"name":"src/Data/Units/SI.purs","end":[24,20]}}]},{"reExports":[],"name":"Data.Units.SI.Accepted","comments":"A collection of non-SI units that are accepted by the SI brochure.\n","declarations":[{"children":[],"comments":"'Dimensionless' unit for angles *360 degree = 2 pi rad*.\n","title":"degree","info":{"declType":"value","type":{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}},"sourceSpan":{"start":[12,1],"name":"src/Data/Units/SI/Accepted.purs","end":[12,22]}}]},{"reExports":[],"name":"Data.Units.SI.Derived","comments":"A collection of units that are derived from SI units.\n","declarations":[{"children":[],"comments":"Unit for frequency, *1 Hz = 1 / s*.\n","title":"hertz","info":{"declType":"value","type":{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}},"sourceSpan":{"start":[10,1],"name":"src/Data/Units/SI/Derived.purs","end":[10,21]}},{"children":[],"comments":"'Dimensionless' unit for angles *1 rad = 1m / 1m*.\n","title":"radian","info":{"declType":"value","type":{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}},"sourceSpan":{"start":[14,1],"name":"src/Data/Units/SI/Derived.purs","end":[14,22]}},{"children":[],"comments":"'Dimensionless' unit for solid angles *1 sr = 1m² / 1m²*.\n","title":"steradian","info":{"declType":"value","type":{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}},"sourceSpan":{"start":[18,1],"name":"src/Data/Units/SI/Derived.purs","end":[18,25]}},{"children":[],"comments":"Unit for force, *1N = 1kg⋅m/s²*.\n","title":"newton","info":{"declType":"value","type":{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}},"sourceSpan":{"start":[22,1],"name":"src/Data/Units/SI/Derived.purs","end":[22,22]}},{"children":[],"comments":"Unit for energy, *1J = 1N·m*.\n","title":"joule","info":{"declType":"value","type":{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}},"sourceSpan":{"start":[26,1],"name":"src/Data/Units/SI/Derived.purs","end":[26,21]}},{"children":[],"comments":"Unit for power, *1W = 1J/s*.\n","title":"watt","info":{"declType":"value","type":{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}},"sourceSpan":{"start":[30,1],"name":"src/Data/Units/SI/Derived.purs","end":[30,20]}}]},{"reExports":[],"name":"Data.Units.Time","comments":"A collection of units for time durations.\n","declarations":[{"children":[],"comments":"Unit of time, *1min = 60sec*.\n","title":"minute","info":{"declType":"value","type":{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}},"sourceSpan":{"start":[10,1],"name":"src/Data/Units/Time.purs","end":[10,22]}},{"children":[],"comments":"Unit of time, *1hour = 60min*.\n","title":"hour","info":{"declType":"value","type":{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}},"sourceSpan":{"start":[14,1],"name":"src/Data/Units/Time.purs","end":[14,20]}},{"children":[],"comments":"Unit of time, *1day = 24hour*.\n","title":"day","info":{"declType":"value","type":{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}},"sourceSpan":{"start":[18,1],"name":"src/Data/Units/Time.purs","end":[18,19]}},{"children":[],"comments":"Unit of time, *1week = 7days*.\n","title":"week","info":{"declType":"value","type":{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}},"sourceSpan":{"start":[22,1],"name":"src/Data/Units/Time.purs","end":[22,20]}}]},{"reExports":[{"moduleName":{"package":null,"item":["Data","Quantity"]},"declarations":[{"children":[{"comments":null,"title":"eqUnificationError","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Eq"],"Eq"]},{"tag":"TypeConstructor","contents":[["Data","Quantity"],"UnificationError"]}]}},"sourceSpan":{"start":[114,1],"name":"src/Data/Quantity.purs","end":[114,58]}},{"comments":null,"title":"showUnificationError","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Show"],"Show"]},{"tag":"TypeConstructor","contents":[["Data","Quantity"],"UnificationError"]}]}},"sourceSpan":{"start":[116,1],"name":"src/Data/Quantity.purs","end":[120,1]}}],"comments":"A unit conversion error that appears if two given units cannot be\nconverted into each other.\n","title":"UnificationError","info":{"declType":"data","dataDeclType":"data","typeArguments":[]},"sourceSpan":{"start":[112,1],"name":"src/Data/Quantity.purs","end":[112,65]}},{"children":[{"comments":null,"title":"eqQuantity","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Eq"],"Eq"]},{"tag":"TypeConstructor","contents":[["Data","Quantity"],"Quantity"]}]}},"sourceSpan":{"start":[61,1],"name":"src/Data/Quantity.purs","end":[65,26]}},{"comments":null,"title":"showQuantity","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Show"],"Show"]},{"tag":"TypeConstructor","contents":[["Data","Quantity"],"Quantity"]}]}},"sourceSpan":{"start":[67,1],"name":"src/Data/Quantity.purs","end":[70,1]}}],"comments":"Representation of a physical quantity as a (product of a) numerical value\nand a physical unit.\n","title":"Quantity","info":{"declType":"data","dataDeclType":"data","typeArguments":[]},"sourceSpan":{"start":[46,1],"name":"src/Data/Quantity.purs","end":[46,44]}},{"children":[],"comments":"Convert a quantity to its standard representation.\n","title":"toStandard","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Quantity"],"Quantity"]}]},{"tag":"TypeConstructor","contents":[["Data","Quantity"],"Quantity"]}]}},"sourceSpan":{"start":[92,1],"name":"src/Data/Quantity.purs","end":[92,34]}},{"children":[],"comments":"The square root of a quantity.\n","title":"sqrt","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Quantity"],"Quantity"]}]},{"tag":"TypeConstructor","contents":[["Data","Quantity"],"Quantity"]}]}},"sourceSpan":{"start":[197,1],"name":"src/Data/Quantity.purs","end":[197,28]}},{"children":[],"comments":"Show the (possibly failed) result of a computation in human-readable form.\n","title":"showResult","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Either"],"Either"]},{"tag":"TypeConstructor","contents":[["Data","Quantity"],"UnificationError"]}]},{"tag":"TypeConstructor","contents":[["Data","Quantity"],"Quantity"]}]}]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}},"sourceSpan":{"start":[78,1],"name":"src/Data/Quantity.purs","end":[78,56]}},{"children":[],"comments":"Create a scalar (i.e. dimensionless) quantity from a number.\n","title":"scalar","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]},{"tag":"TypeConstructor","contents":[["Data","Quantity"],"Quantity"]}]}},"sourceSpan":{"start":[131,1],"name":"src/Data/Quantity.purs","end":[131,28]}},{"children":[],"comments":"Construct a physical quantity from a numerical value and the physical\nunit.\n","title":"quantity","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}]},{"tag":"TypeConstructor","contents":[["Data","Quantity"],"Quantity"]}]}]}},"sourceSpan":{"start":[53,1],"name":"src/Data/Quantity.purs","end":[53,44]}},{"children":[],"comments":"Attempt to subtract two quantities. If the units can not be unified, an\nerror is returned.\n","title":"qSubtract","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Quantity"],"Quantity"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Quantity"],"Quantity"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Either"],"Either"]},{"tag":"TypeConstructor","contents":[["Data","Quantity"],"UnificationError"]}]},{"tag":"TypeConstructor","contents":[["Data","Quantity"],"Quantity"]}]}]}]}},"sourceSpan":{"start":[171,1],"name":"src/Data/Quantity.purs","end":[171,68]}},{"children":[],"comments":"Multiply two quantities.\n","title":"qMultiply","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Quantity"],"Quantity"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Quantity"],"Quantity"]}]},{"tag":"TypeConstructor","contents":[["Data","Quantity"],"Quantity"]}]}]}},"sourceSpan":{"start":[177,1],"name":"src/Data/Quantity.purs","end":[177,44]}},{"children":[],"comments":"Divide two quantities.\n","title":"qDivide","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Quantity"],"Quantity"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Quantity"],"Quantity"]}]},{"tag":"TypeConstructor","contents":[["Data","Quantity"],"Quantity"]}]}]}},"sourceSpan":{"start":[183,1],"name":"src/Data/Quantity.purs","end":[183,42]}},{"children":[],"comments":"Attempt to add two quantities. If the units can not be unified, an error\nis returned.\n","title":"qAdd","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Quantity"],"Quantity"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Quantity"],"Quantity"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Either"],"Either"]},{"tag":"TypeConstructor","contents":[["Data","Quantity"],"UnificationError"]}]},{"tag":"TypeConstructor","contents":[["Data","Quantity"],"Quantity"]}]}]}]}},"sourceSpan":{"start":[161,1],"name":"src/Data/Quantity.purs","end":[161,63]}},{"children":[],"comments":"Show a physical quantity in a human-readable form.\n","title":"prettyPrint","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Quantity"],"Quantity"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}},"sourceSpan":{"start":[71,1],"name":"src/Data/Quantity.purs","end":[71,33]}},{"children":[],"comments":"Raise a quantity to a given power.\n","title":"pow","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Quantity"],"Quantity"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]},{"tag":"TypeConstructor","contents":[["Data","Quantity"],"Quantity"]}]}]}},"sourceSpan":{"start":[189,1],"name":"src/Data/Quantity.purs","end":[189,36]}},{"children":[],"comments":"Textual representation of a unit conversion error.\n","title":"errorMessage","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Quantity"],"UnificationError"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}},"sourceSpan":{"start":[121,1],"name":"src/Data/Quantity.purs","end":[121,42]}},{"children":[],"comments":"The unit of a physical quantity.\n","title":"derivedUnit","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Quantity"],"Quantity"]}]},{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}]}},"sourceSpan":{"start":[88,1],"name":"src/Data/Quantity.purs","end":[88,38]}},{"children":[],"comments":"Flipped version of `convert`.\n","title":"convertTo","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Quantity"],"Quantity"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Either"],"Either"]},{"tag":"TypeConstructor","contents":[["Data","Quantity"],"UnificationError"]}]},{"tag":"TypeConstructor","contents":[["Data","Quantity"],"Quantity"]}]}]}]}},"sourceSpan":{"start":[151,1],"name":"src/Data/Quantity.purs","end":[151,71]}},{"children":[],"comments":"Attempt to convert a physical quantity to a given target unit. Returns a\n`UnificationError` if the conversion fails.\n","title":"convert","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Quantity"],"Quantity"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Either"],"Either"]},{"tag":"TypeConstructor","contents":[["Data","Quantity"],"UnificationError"]}]},{"tag":"TypeConstructor","contents":[["Data","Quantity"],"Quantity"]}]}]}]}},"sourceSpan":{"start":[136,1],"name":"src/Data/Quantity.purs","end":[136,69]}},{"children":[],"comments":"Get the numerical value of a physical quantity in a given unit. Returns a\n`UnificationError` if the conversion fails.\n","title":"asValueIn","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Quantity"],"Quantity"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Either"],"Either"]},{"tag":"TypeConstructor","contents":[["Data","Quantity"],"UnificationError"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]}]}]}},"sourceSpan":{"start":[156,1],"name":"src/Data/Quantity.purs","end":[156,69]}},{"children":[],"comments":"Check whether two quantities have matching units (or can be converted\nto the same representation) and test if the numerical are approximately\nequal.\n","title":"approximatelyEqual","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Quantity"],"Quantity"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Quantity"],"Quantity"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}]}]}},"sourceSpan":{"start":[100,1],"name":"src/Data/Quantity.purs","end":[100,61]}},{"children":[],"comments":"The absolute value of a quantity.\n","title":"abs","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Quantity"],"Quantity"]}]},{"tag":"TypeConstructor","contents":[["Data","Quantity"],"Quantity"]}]}},"sourceSpan":{"start":[193,1],"name":"src/Data/Quantity.purs","end":[193,27]}},{"children":[],"comments":null,"title":"(⊘)","info":{"declType":"alias","alias":[["Data","Quantity"],{"Right":{"Left":{"Ident":"qDivide"}}}],"fixity":{"associativity":"infixl","precedence":4}},"sourceSpan":{"start":[186,1],"name":"src/Data/Quantity.purs","end":[186,22]}},{"children":[],"comments":null,"title":"(⊗)","info":{"declType":"alias","alias":[["Data","Quantity"],{"Right":{"Left":{"Ident":"qMultiply"}}}],"fixity":{"associativity":"infixl","precedence":4}},"sourceSpan":{"start":[180,1],"name":"src/Data/Quantity.purs","end":[180,24]}},{"children":[],"comments":null,"title":"(⊖)","info":{"declType":"alias","alias":[["Data","Quantity"],{"Right":{"Left":{"Ident":"qSubtract"}}}],"fixity":{"associativity":"infixl","precedence":3}},"sourceSpan":{"start":[174,1],"name":"src/Data/Quantity.purs","end":[174,24]}},{"children":[],"comments":null,"title":"(⊕)","info":{"declType":"alias","alias":[["Data","Quantity"],{"Right":{"Left":{"Ident":"qAdd"}}}],"fixity":{"associativity":"infixl","precedence":3}},"sourceSpan":{"start":[167,1],"name":"src/Data/Quantity.purs","end":[167,19]}},{"children":[],"comments":null,"title":"(.*)","info":{"declType":"alias","alias":[["Data","Quantity"],{"Right":{"Left":{"Ident":"quantity"}}}],"fixity":{"associativity":"infix","precedence":5}},"sourceSpan":{"start":[59,1],"name":"src/Data/Quantity.purs","end":[59,23]}}]},{"moduleName":{"package":null,"item":["Data","Quantity","Math"]},"declarations":[{"children":[],"comments":null,"title":"tan","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Quantity"],"Quantity"]}]},{"tag":"TypeConstructor","contents":[["Data","Quantity","Math"],"Result"]}]}},"sourceSpan":{"start":[54,1],"name":"src/Data/Quantity/Math.purs","end":[54,25]}},{"children":[],"comments":null,"title":"sin","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Quantity"],"Quantity"]}]},{"tag":"TypeConstructor","contents":[["Data","Quantity","Math"],"Result"]}]}},"sourceSpan":{"start":[51,1],"name":"src/Data/Quantity/Math.purs","end":[51,25]}},{"children":[],"comments":null,"title":"pi","info":{"declType":"value","type":{"tag":"TypeConstructor","contents":[["Data","Quantity"],"Quantity"]}},"sourceSpan":{"start":[57,1],"name":"src/Data/Quantity/Math.purs","end":[57,14]}},{"children":[],"comments":null,"title":"log","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Quantity"],"Quantity"]}]},{"tag":"TypeConstructor","contents":[["Data","Quantity","Math"],"Result"]}]}},"sourceSpan":{"start":[48,1],"name":"src/Data/Quantity/Math.purs","end":[48,25]}},{"children":[],"comments":null,"title":"exp","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Quantity"],"Quantity"]}]},{"tag":"TypeConstructor","contents":[["Data","Quantity","Math"],"Result"]}]}},"sourceSpan":{"start":[45,1],"name":"src/Data/Quantity/Math.purs","end":[45,25]}},{"children":[],"comments":null,"title":"e","info":{"declType":"value","type":{"tag":"TypeConstructor","contents":[["Data","Quantity"],"Quantity"]}},"sourceSpan":{"start":[60,1],"name":"src/Data/Quantity/Math.purs","end":[60,13]}},{"children":[],"comments":null,"title":"cos","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Quantity"],"Quantity"]}]},{"tag":"TypeConstructor","contents":[["Data","Quantity","Math"],"Result"]}]}},"sourceSpan":{"start":[42,1],"name":"src/Data/Quantity/Math.purs","end":[42,25]}},{"children":[],"comments":null,"title":"atan2","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Quantity"],"Quantity"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Quantity"],"Quantity"]}]},{"tag":"TypeConstructor","contents":[["Data","Quantity","Math"],"Result"]}]}]}},"sourceSpan":{"start":[39,1],"name":"src/Data/Quantity/Math.purs","end":[39,38]}},{"children":[],"comments":null,"title":"atan","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Quantity"],"Quantity"]}]},{"tag":"TypeConstructor","contents":[["Data","Quantity","Math"],"Result"]}]}},"sourceSpan":{"start":[36,1],"name":"src/Data/Quantity/Math.purs","end":[36,26]}},{"children":[],"comments":null,"title":"asin","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Quantity"],"Quantity"]}]},{"tag":"TypeConstructor","contents":[["Data","Quantity","Math"],"Result"]}]}},"sourceSpan":{"start":[33,1],"name":"src/Data/Quantity/Math.purs","end":[33,26]}},{"children":[],"comments":null,"title":"acos","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Quantity"],"Quantity"]}]},{"tag":"TypeConstructor","contents":[["Data","Quantity","Math"],"Result"]}]}},"sourceSpan":{"start":[30,1],"name":"src/Data/Quantity/Math.purs","end":[30,26]}}]},{"moduleName":{"package":null,"item":["Data","Quantity","Physics"]},"declarations":[{"children":[],"comments":"The speed of light in vacuum.\n","title":"speedOfLight","info":{"declType":"value","type":{"tag":"TypeConstructor","contents":[["Data","Quantity"],"Quantity"]}},"sourceSpan":{"start":[18,1],"name":"src/Data/Quantity/Physics.purs","end":[18,24]}},{"children":[],"comments":"The Planck constant.\n","title":"planckConstant","info":{"declType":"value","type":{"tag":"TypeConstructor","contents":[["Data","Quantity"],"Quantity"]}},"sourceSpan":{"start":[26,1],"name":"src/Data/Quantity/Physics.purs","end":[26,26]}},{"children":[],"comments":"The reduced Planck constant.\n","title":"hbar","info":{"declType":"value","type":{"tag":"TypeConstructor","contents":[["Data","Quantity"],"Quantity"]}},"sourceSpan":{"start":[30,1],"name":"src/Data/Quantity/Physics.purs","end":[30,16]}},{"children":[],"comments":"The Newtonian constant of gravitation.\n","title":"gravitationalConstant","info":{"declType":"value","type":{"tag":"TypeConstructor","contents":[["Data","Quantity"],"Quantity"]}},"sourceSpan":{"start":[22,1],"name":"src/Data/Quantity/Physics.purs","end":[22,33]}}]},{"moduleName":{"package":null,"item":["Data","Units"]},"declarations":[{"children":[],"comments":null,"title":"Prefix","info":{"arguments":[],"declType":"typeSynonym","type":{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}},"sourceSpan":{"start":[112,1],"name":"src/Data/Units.purs","end":[112,21]}},{"children":[{"comments":null,"title":"eqDerivedUnit","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Eq"],"Eq"]},{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}]}},"sourceSpan":{"start":[162,1],"name":"src/Data/Units.purs","end":[174,89]}},{"comments":null,"title":"showDerivedUnit","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Show"],"Show"]},{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}]}},"sourceSpan":{"start":[176,1],"name":"src/Data/Units.purs","end":[203,1]}},{"comments":null,"title":"semigroupDerivedUnit","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Semigroup"],"Semigroup"]},{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}]}},"sourceSpan":{"start":[203,1],"name":"src/Data/Units.purs","end":[205,38]}},{"comments":null,"title":"monoidDerivedUnit","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Monoid"],"Monoid"]},{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}]}},"sourceSpan":{"start":[207,1],"name":"src/Data/Units.purs","end":[208,17]}}],"comments":"A `DerivedUnit` is a product of `BaseUnits`, raised to arbitrary powers.\nThe `Semigroup`/`Monoid` instance implements multiplication of units. A\n`DerivedUnit` also has a `Prefix` value, which represents a numerical\nprefix as a power of ten.\n","title":"DerivedUnit","info":{"declType":"data","dataDeclType":"data","typeArguments":[]},"sourceSpan":{"start":[125,1],"name":"src/Data/Units.purs","end":[125,59]}},{"children":[],"comments":"Add a given prefix value to a unit. `withPrefix 3.0 meter = kilo meter`.\n","title":"withPrefix","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Units"],"Prefix"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}]},{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}]}]}},"sourceSpan":{"start":[132,1],"name":"src/Data/Units.purs","end":[132,49]}},{"children":[],"comments":"A `DerivedUnit` corresponding to `1`, i.e. the unit of scalar\n(or dimensionless) values.\n","title":"unity","info":{"declType":"value","type":{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}},"sourceSpan":{"start":[326,1],"name":"src/Data/Units.purs","end":[326,21]}},{"children":[],"comments":"A human-readable `String` representation of a `DerivedUnit`, including\na prefix string if the unit needs to be combined with a numerical value.\n","title":"toStringWithPrefix","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Record"]},{"tag":"RCons","contents":["prefix",{"tag":"TypeConstructor","contents":[["Prim"],"String"]},{"tag":"RCons","contents":["value",{"tag":"TypeConstructor","contents":[["Prim"],"String"]},{"tag":"REmpty","contents":[]}]}]}]}]}},"sourceSpan":{"start":[272,1],"name":"src/Data/Units.purs","end":[272,74]}},{"children":[],"comments":"A human-readable `String` representation of a `DerivedUnit`.\n","title":"toString","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}},"sourceSpan":{"start":[302,1],"name":"src/Data/Units.purs","end":[302,33]}},{"children":[],"comments":"Convert all contained units to standard units and return the global\nconversion factor.\n","title":"toStandardUnit","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Tuple"],"Tuple"]},{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}]},{"tag":"TypeConstructor","contents":[["Data","Units"],"ConversionFactor"]}]}]}},"sourceSpan":{"start":[223,1],"name":"src/Data/Units.purs","end":[223,67]}},{"children":[],"comments":null,"title":"tera","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}]},{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}]}},"sourceSpan":{"start":[369,1],"name":"src/Data/Units.purs","end":[369,34]}},{"children":[],"comments":"Get the name of a SI-prefix.\n","title":"prefixName","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Units"],"Prefix"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}]}},"sourceSpan":{"start":[237,1],"name":"src/Data/Units.purs","end":[237,36]}},{"children":[],"comments":"Raise a unit to the given power.\n","title":"power","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]},{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}]}]}},"sourceSpan":{"start":[306,1],"name":"src/Data/Units.purs","end":[306,44]}},{"children":[],"comments":null,"title":"pico","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}]},{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}]}},"sourceSpan":{"start":[339,1],"name":"src/Data/Units.purs","end":[339,34]}},{"children":[],"comments":null,"title":"peta","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}]},{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}]}},"sourceSpan":{"start":[372,1],"name":"src/Data/Units.purs","end":[372,34]}},{"children":[],"comments":null,"title":"nano","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}]},{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}]}},"sourceSpan":{"start":[342,1],"name":"src/Data/Units.purs","end":[342,34]}},{"children":[],"comments":null,"title":"milli","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}]},{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}]}},"sourceSpan":{"start":[348,1],"name":"src/Data/Units.purs","end":[348,35]}},{"children":[],"comments":null,"title":"micro","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}]},{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}]}},"sourceSpan":{"start":[345,1],"name":"src/Data/Units.purs","end":[345,35]}},{"children":[],"comments":null,"title":"mega","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}]},{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}]}},"sourceSpan":{"start":[363,1],"name":"src/Data/Units.purs","end":[363,34]}},{"children":[],"comments":"Helper function to create a standard unit.\n","title":"makeStandard","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}]}]}},"sourceSpan":{"start":[211,1],"name":"src/Data/Units.purs","end":[211,46]}},{"children":[],"comments":"Helper function to create a non-standard unit.\n","title":"makeNonStandard","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Units"],"ConversionFactor"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}]},{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}]}]}]}]}},"sourceSpan":{"start":[216,1],"name":"src/Data/Units.purs","end":[217,33]}},{"children":[],"comments":null,"title":"kilo","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}]},{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}]}},"sourceSpan":{"start":[360,1],"name":"src/Data/Units.purs","end":[360,34]}},{"children":[],"comments":null,"title":"hecto","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}]},{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}]}},"sourceSpan":{"start":[357,1],"name":"src/Data/Units.purs","end":[357,35]}},{"children":[],"comments":null,"title":"giga","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}]},{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}]}},"sourceSpan":{"start":[366,1],"name":"src/Data/Units.purs","end":[366,34]}},{"children":[],"comments":null,"title":"femto","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}]},{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}]}},"sourceSpan":{"start":[336,1],"name":"src/Data/Units.purs","end":[336,35]}},{"children":[],"comments":null,"title":"exa","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}]},{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}]}},"sourceSpan":{"start":[375,1],"name":"src/Data/Units.purs","end":[375,33]}},{"children":[],"comments":"Divide two units.\n","title":"divideUnits","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}]},{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}]}]}},"sourceSpan":{"start":[314,1],"name":"src/Data/Units.purs","end":[314,55]}},{"children":[],"comments":null,"title":"deci","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}]},{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}]}},"sourceSpan":{"start":[354,1],"name":"src/Data/Units.purs","end":[354,34]}},{"children":[],"comments":null,"title":"centi","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}]},{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}]}},"sourceSpan":{"start":[351,1],"name":"src/Data/Units.purs","end":[351,35]}},{"children":[],"comments":null,"title":"atto","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}]},{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}]}},"sourceSpan":{"start":[333,1],"name":"src/Data/Units.purs","end":[333,34]}},{"children":[],"comments":null,"title":"(.^)","info":{"declType":"alias","alias":[["Data","Units"],{"Right":{"Left":{"Ident":"power"}}}],"fixity":{"associativity":"infixl","precedence":9}},"sourceSpan":{"start":[311,1],"name":"src/Data/Units.purs","end":[311,21]}},{"children":[],"comments":null,"title":"(./)","info":{"declType":"alias","alias":[["Data","Units"],{"Right":{"Left":{"Ident":"divideUnits"}}}],"fixity":{"associativity":"infixl","precedence":6}},"sourceSpan":{"start":[317,1],"name":"src/Data/Units.purs","end":[317,27]}}]},{"moduleName":{"package":null,"item":["Data","Units","Bit"]},"declarations":[{"children":[],"comments":"Unit of digital information, *1byte = 8bit*.\n","title":"byte","info":{"declType":"value","type":{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}},"sourceSpan":{"start":[10,1],"name":"src/Data/Units/Bit.purs","end":[10,20]}},{"children":[],"comments":"Unit of digital information.\n","title":"bit","info":{"declType":"value","type":{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}},"sourceSpan":{"start":[6,1],"name":"src/Data/Units/Bit.purs","end":[6,19]}}]},{"moduleName":{"package":null,"item":["Data","Units","Imperial"]},"declarations":[{"children":[],"comments":"Unit of length, *1yd = 0.9144m*.\n","title":"yard","info":{"declType":"value","type":{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}},"sourceSpan":{"start":[16,1],"name":"src/Data/Units/Imperial.purs","end":[16,20]}},{"children":[],"comments":"Unit of mass, *1lb = 453.6g*.\n","title":"pound","info":{"declType":"value","type":{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}},"sourceSpan":{"start":[28,1],"name":"src/Data/Units/Imperial.purs","end":[28,21]}},{"children":[],"comments":"Unit of mass, *1oz = 28.35g*.\n","title":"ounce","info":{"declType":"value","type":{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}},"sourceSpan":{"start":[24,1],"name":"src/Data/Units/Imperial.purs","end":[24,21]}},{"children":[],"comments":"Unit of length, *1mi = 1609.344m*.\n","title":"mile","info":{"declType":"value","type":{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}},"sourceSpan":{"start":[20,1],"name":"src/Data/Units/Imperial.purs","end":[20,20]}},{"children":[],"comments":"Unit of length, *1in = 0.0254m*.\n","title":"inch","info":{"declType":"value","type":{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}},"sourceSpan":{"start":[8,1],"name":"src/Data/Units/Imperial.purs","end":[8,20]}},{"children":[],"comments":"Unit of length, *1ft = 0.3048m*.\n","title":"foot","info":{"declType":"value","type":{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}},"sourceSpan":{"start":[12,1],"name":"src/Data/Units/Imperial.purs","end":[12,20]}}]},{"moduleName":{"package":null,"item":["Data","Units","SI"]},"declarations":[{"children":[],"comments":"The second is the standard unit of time.\n","title":"second","info":{"declType":"value","type":{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}},"sourceSpan":{"start":[20,1],"name":"src/Data/Units/SI.purs","end":[20,22]}},{"children":[],"comments":"The meter is the standard unit of length.\n","title":"meter","info":{"declType":"value","type":{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}},"sourceSpan":{"start":[12,1],"name":"src/Data/Units/SI.purs","end":[12,21]}},{"children":[],"comments":"The kilogram is the standard unit of mass.\n","title":"kilogram","info":{"declType":"value","type":{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}},"sourceSpan":{"start":[16,1],"name":"src/Data/Units/SI.purs","end":[16,24]}},{"children":[],"comments":"One gram equals one-thousandth of a *kilogram*.\n","title":"gram","info":{"declType":"value","type":{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}},"sourceSpan":{"start":[24,1],"name":"src/Data/Units/SI.purs","end":[24,20]}}]},{"moduleName":{"package":null,"item":["Data","Units","SI","Accepted"]},"declarations":[{"children":[],"comments":"'Dimensionless' unit for angles *360 degree = 2 pi rad*.\n","title":"degree","info":{"declType":"value","type":{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}},"sourceSpan":{"start":[12,1],"name":"src/Data/Units/SI/Accepted.purs","end":[12,22]}}]},{"moduleName":{"package":null,"item":["Data","Units","SI","Derived"]},"declarations":[{"children":[],"comments":"Unit for power, *1W = 1J/s*.\n","title":"watt","info":{"declType":"value","type":{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}},"sourceSpan":{"start":[30,1],"name":"src/Data/Units/SI/Derived.purs","end":[30,20]}},{"children":[],"comments":"'Dimensionless' unit for solid angles *1 sr = 1m² / 1m²*.\n","title":"steradian","info":{"declType":"value","type":{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}},"sourceSpan":{"start":[18,1],"name":"src/Data/Units/SI/Derived.purs","end":[18,25]}},{"children":[],"comments":"'Dimensionless' unit for angles *1 rad = 1m / 1m*.\n","title":"radian","info":{"declType":"value","type":{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}},"sourceSpan":{"start":[14,1],"name":"src/Data/Units/SI/Derived.purs","end":[14,22]}},{"children":[],"comments":"Unit for force, *1N = 1kg⋅m/s²*.\n","title":"newton","info":{"declType":"value","type":{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}},"sourceSpan":{"start":[22,1],"name":"src/Data/Units/SI/Derived.purs","end":[22,22]}},{"children":[],"comments":"Unit for energy, *1J = 1N·m*.\n","title":"joule","info":{"declType":"value","type":{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}},"sourceSpan":{"start":[26,1],"name":"src/Data/Units/SI/Derived.purs","end":[26,21]}},{"children":[],"comments":"Unit for frequency, *1 Hz = 1 / s*.\n","title":"hertz","info":{"declType":"value","type":{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}},"sourceSpan":{"start":[10,1],"name":"src/Data/Units/SI/Derived.purs","end":[10,21]}}]},{"moduleName":{"package":null,"item":["Data","Units","Time"]},"declarations":[{"children":[],"comments":"Unit of time, *1week = 7days*.\n","title":"week","info":{"declType":"value","type":{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}},"sourceSpan":{"start":[22,1],"name":"src/Data/Units/Time.purs","end":[22,20]}},{"children":[],"comments":"Unit of time, *1min = 60sec*.\n","title":"minute","info":{"declType":"value","type":{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}},"sourceSpan":{"start":[10,1],"name":"src/Data/Units/Time.purs","end":[10,22]}},{"children":[],"comments":"Unit of time, *1hour = 60min*.\n","title":"hour","info":{"declType":"value","type":{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}},"sourceSpan":{"start":[14,1],"name":"src/Data/Units/Time.purs","end":[14,20]}},{"children":[],"comments":"Unit of time, *1day = 24hour*.\n","title":"day","info":{"declType":"value","type":{"tag":"TypeConstructor","contents":[["Data","Units"],"DerivedUnit"]}},"sourceSpan":{"start":[18,1],"name":"src/Data/Units/Time.purs","end":[18,19]}}]},{"moduleName":{"package":"purescript-prelude","item":["Prelude"]},"declarations":[{"children":[{"comments":null,"title":"showVoid","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Show"],"Show"]},{"tag":"TypeConstructor","contents":[["Data","Void"],"Void"]}]}},"sourceSpan":{"start":[7,1],"name":"bower_components/purescript-prelude/src/Data/Void.purs","end":[8,16]}}],"comments":null,"title":"Void","info":{"declType":"data","dataDeclType":"newtype","typeArguments":[]},"sourceSpan":{"start":[5,1],"name":"bower_components/purescript-prelude/src/Data/Void.purs","end":[5,25]}},{"children":[{"comments":null,"title":"showUnit","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Show"],"Show"]},{"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}},"sourceSpan":{"start":[16,1],"name":"bower_components/purescript-prelude/src/Data/Unit.purs","end":[17,12]}}],"comments":"The `Unit` type has a single inhabitant, called `unit`. It represents\nvalues with no computational content.\n\n`Unit` is often used, wrapped in a monadic type constructor, as the\nreturn type of a computation where only\nthe _effects_ are important.\n","title":"Unit","info":{"kind":{"tag":"NamedKind","contents":[["Prim"],"Type"]},"declType":"externData"},"sourceSpan":{"start":[11,1],"name":"bower_components/purescript-prelude/src/Data/Unit.purs","end":[11,30]}},{"children":[{"comments":null,"title":"LT","info":{"arguments":[],"declType":"dataConstructor"},"sourceSpan":null},{"comments":null,"title":"GT","info":{"arguments":[],"declType":"dataConstructor"},"sourceSpan":null},{"comments":null,"title":"EQ","info":{"arguments":[],"declType":"dataConstructor"},"sourceSpan":null},{"comments":null,"title":"eqOrdering","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Eq"],"Eq"]},{"tag":"TypeConstructor","contents":[["Data","Ordering"],"Ordering"]}]}},"sourceSpan":{"start":[15,1],"name":"bower_components/purescript-prelude/src/Data/Ordering.purs","end":[19,19]}},{"comments":null,"title":"semigroupOrdering","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Semigroup"],"Semigroup"]},{"tag":"TypeConstructor","contents":[["Data","Ordering"],"Ordering"]}]}},"sourceSpan":{"start":[21,1],"name":"bower_components/purescript-prelude/src/Data/Ordering.purs","end":[24,18]}},{"comments":null,"title":"showOrdering","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Show"],"Show"]},{"tag":"TypeConstructor","contents":[["Data","Ordering"],"Ordering"]}]}},"sourceSpan":{"start":[26,1],"name":"bower_components/purescript-prelude/src/Data/Ordering.purs","end":[31,1]}}],"comments":"The `Ordering` data type represents the three possible outcomes of\ncomparing two values:\n\n`LT` - The first value is _less than_ the second.\n`GT` - The first value is _greater than_ the second.\n`EQ` - The first value is _equal to_ the second.\n","title":"Ordering","info":{"declType":"data","dataDeclType":"data","typeArguments":[]},"sourceSpan":{"start":[13,1],"name":"bower_components/purescript-prelude/src/Data/Ordering.purs","end":[13,29]}},{"children":[{"comments":null,"title":"pure","info":{"declType":"typeClassMember","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}]},null]}},"sourceSpan":null},{"comments":null,"title":"applicativeFn","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Applicative"],"Applicative"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"r"}]}}]}},"sourceSpan":{"start":[35,1],"name":"bower_components/purescript-prelude/src/Control/Applicative.purs","end":[36,15]}},{"comments":null,"title":"applicativeArray","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Applicative"],"Applicative"]},{"tag":"TypeConstructor","contents":[["Prim"],"Array"]}]}},"sourceSpan":{"start":[38,1],"name":"bower_components/purescript-prelude/src/Control/Applicative.purs","end":[39,15]}}],"comments":"The `Applicative` type class extends the [`Apply`](#apply) type class\nwith a `pure` function, which can be used to create values of type `f a`\nfrom values of type `a`.\n\nWhere [`Apply`](#apply) provides the ability to lift functions of two or\nmore arguments to functions whose arguments are wrapped using `f`, and\n[`Functor`](#functor) provides the ability to lift functions of one\nargument, `pure` can be seen as the function which lifts functions of\n_zero_ arguments. That is, `Applicative` functors support a lifting\noperation for any number of function arguments.\n\nInstances must satisfy the following laws in addition to the `Apply`\nlaws:\n\n- Identity: `(pure id) <*> v = v`\n- Composition: `(pure <<<) <*> f <*> g <*> h = f <*> (g <*> h)`\n- Homomorphism: `(pure f) <*> (pure x) = pure (f x)`\n- Interchange: `u <*> (pure y) = (pure ($ y)) <*> u`\n","title":"Applicative","info":{"fundeps":[],"arguments":[["f",null]],"declType":"typeClass","superclasses":[{"constraintClass":[["Control","Apply"],"Apply"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}],"constraintData":null}]},"sourceSpan":{"start":[32,1],"name":"bower_components/purescript-prelude/src/Control/Applicative.purs","end":[33,29]}},{"children":[{"comments":null,"title":"apply","info":{"declType":"typeClassMember","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"b"}]}]}]},null]},null]}},"sourceSpan":null},{"comments":null,"title":"applyFn","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Apply"],"Apply"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"r"}]}}]}},"sourceSpan":{"start":[40,1],"name":"bower_components/purescript-prelude/src/Control/Apply.purs","end":[41,26]}},{"comments":null,"title":"applyArray","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Apply"],"Apply"]},{"tag":"TypeConstructor","contents":[["Prim"],"Array"]}]}},"sourceSpan":{"start":[43,1],"name":"bower_components/purescript-prelude/src/Control/Apply.purs","end":[44,21]}}],"comments":"The `Apply` class provides the `(<*>)` which is used to apply a function\nto an argument under a type constructor.\n\n`Apply` can be used to lift functions of two or more arguments to work on\nvalues wrapped with the type constructor `f`. It might also be understood\nin terms of the `lift2` function:\n\n```purescript\nlift2 :: forall f a b c. Apply f => (a -> b -> c) -> f a -> f b -> f c\nlift2 f a b = f <$> a <*> b\n```\n\n`(<*>)` is recovered from `lift2` as `lift2 ($)`. That is, `(<*>)` lifts\nthe function application operator `($)` to arguments wrapped with the\ntype constructor `f`.\n\nInstances must satisfy the following law in addition to the `Functor`\nlaws:\n\n- Associative composition: `(<<<) <$> f <*> g <*> h = f <*> (g <*> h)`\n\nFormally, `Apply` represents a strong lax semi-monoidal endofunctor.\n","title":"Apply","info":{"fundeps":[],"arguments":[["f",null]],"declType":"typeClass","superclasses":[{"constraintClass":[["Data","Functor"],"Functor"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}],"constraintData":null}]},"sourceSpan":{"start":[35,1],"name":"bower_components/purescript-prelude/src/Control/Apply.purs","end":[36,48]}},{"children":[{"comments":null,"title":"bind","info":{"declType":"typeClassMember","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"m"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"m"},{"tag":"TypeVar","contents":"b"}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"m"},{"tag":"TypeVar","contents":"b"}]}]}]},null]},null]}},"sourceSpan":null},{"comments":null,"title":"bindFn","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Bind"],"Bind"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"r"}]}}]}},"sourceSpan":{"start":[61,1],"name":"bower_components/purescript-prelude/src/Control/Bind.purs","end":[62,25]}},{"comments":null,"title":"bindArray","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Bind"],"Bind"]},{"tag":"TypeConstructor","contents":[["Prim"],"Array"]}]}},"sourceSpan":{"start":[64,1],"name":"bower_components/purescript-prelude/src/Control/Bind.purs","end":[65,19]}}],"comments":"The `Bind` type class extends the [`Apply`](#apply) type class with a\n\"bind\" operation `(>>=)` which composes computations in sequence, using\nthe return value of one computation to determine the next computation.\n\nThe `>>=` operator can also be expressed using `do` notation, as follows:\n\n```purescript\nx >>= f = do y <- x\n             f y\n```\n\nwhere the function argument of `f` is given the name `y`.\n\nInstances must satisfy the following law in addition to the `Apply`\nlaws:\n\n- Associativity: `(x >>= f) >>= g = x >>= (\\k -> f k >>= g)`\n\nAssociativity tells us that we can regroup operations which use `do`\nnotation so that we can unambiguously write, for example:\n\n```purescript\ndo x <- m1\n   y <- m2 x\n   m3 x y\n```\n","title":"Bind","info":{"fundeps":[],"arguments":[["m",null]],"declType":"typeClass","superclasses":[{"constraintClass":[["Control","Apply"],"Apply"],"constraintArgs":[{"tag":"TypeVar","contents":"m"}],"constraintData":null}]},"sourceSpan":{"start":[46,1],"name":"bower_components/purescript-prelude/src/Control/Bind.purs","end":[47,47]}},{"children":[{"comments":null,"title":"booleanAlgebraBoolean","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","BooleanAlgebra"],"BooleanAlgebra"]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}},"sourceSpan":{"start":[19,1],"name":"bower_components/purescript-prelude/src/Data/BooleanAlgebra.purs","end":[19,57]}},{"comments":null,"title":"booleanAlgebraUnit","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","BooleanAlgebra"],"BooleanAlgebra"]},{"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}},"sourceSpan":{"start":[20,1],"name":"bower_components/purescript-prelude/src/Data/BooleanAlgebra.purs","end":[20,47]}}],"comments":"The `BooleanAlgebra` type class represents types that behave like boolean\nvalues.\n\nInstances should satisfy the following laws in addition to the\n`HeytingAlgebra` law:\n\n- Excluded middle:\n  - `a || not a = tt`\n","title":"BooleanAlgebra","info":{"fundeps":[],"arguments":[["a",null]],"declType":"typeClass","superclasses":[{"constraintClass":[["Data","HeytingAlgebra"],"HeytingAlgebra"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}]},"sourceSpan":{"start":[17,1],"name":"bower_components/purescript-prelude/src/Data/BooleanAlgebra.purs","end":[17,43]}},{"children":[{"comments":null,"title":"top","info":{"declType":"typeClassMember","type":{"tag":"TypeVar","contents":"a"}},"sourceSpan":null},{"comments":null,"title":"bottom","info":{"declType":"typeClassMember","type":{"tag":"TypeVar","contents":"a"}},"sourceSpan":null},{"comments":null,"title":"boundedBoolean","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Bounded"],"Bounded"]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}},"sourceSpan":{"start":[21,1],"name":"bower_components/purescript-prelude/src/Data/Bounded.purs","end":[23,17]}},{"comments":null,"title":"boundedInt","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Bounded"],"Bounded"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}},"sourceSpan":{"start":[25,1],"name":"bower_components/purescript-prelude/src/Data/Bounded.purs","end":[27,21]}},{"comments":"Characters fall within the Unicode range.\n","title":"boundedChar","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Bounded"],"Bounded"]},{"tag":"TypeConstructor","contents":[["Prim"],"Char"]}]}},"sourceSpan":{"start":[33,1],"name":"bower_components/purescript-prelude/src/Data/Bounded.purs","end":[35,22]}},{"comments":null,"title":"boundedOrdering","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Bounded"],"Bounded"]},{"tag":"TypeConstructor","contents":[["Data","Ordering"],"Ordering"]}]}},"sourceSpan":{"start":[40,1],"name":"bower_components/purescript-prelude/src/Data/Bounded.purs","end":[42,14]}},{"comments":null,"title":"boundedUnit","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Bounded"],"Bounded"]},{"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}},"sourceSpan":{"start":[44,1],"name":"bower_components/purescript-prelude/src/Data/Bounded.purs","end":[46,12]}}],"comments":"The `Bounded` type class represents totally ordered types that have an\nupper and lower boundary.\n\nInstances should satisfy the following law in addition to the `Ord` laws:\n\n- Bounded: `bottom <= a <= top`\n","title":"Bounded","info":{"fundeps":[],"arguments":[["a",null]],"declType":"typeClass","superclasses":[{"constraintClass":[["Data","Ord"],"Ord"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}]},"sourceSpan":{"start":[17,1],"name":"bower_components/purescript-prelude/src/Data/Bounded.purs","end":[19,14]}},{"children":[{"comments":null,"title":"id","info":{"declType":"typeClassMember","type":{"tag":"ForAll","contents":["t",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"a"},{"tag":"TypeVar","contents":"t"}]},{"tag":"TypeVar","contents":"t"}]},null]}},"sourceSpan":null},{"comments":null,"title":"categoryFn","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Category"],"Category"]},{"tag":"TypeConstructor","contents":[["Prim"],"Function"]}]}},"sourceSpan":{"start":[19,1],"name":"bower_components/purescript-prelude/src/Control/Category.purs","end":[20,10]}}],"comments":"`Category`s consist of objects and composable morphisms between them, and\nas such are [`Semigroupoids`](#semigroupoid), but unlike `semigroupoids`\nmust have an identity element.\n\nInstances must satisfy the following law in addition to the\n`Semigroupoid` law:\n\n- Identity: `id <<< p = p <<< id = p`\n","title":"Category","info":{"fundeps":[],"arguments":[["a",null]],"declType":"typeClass","superclasses":[{"constraintClass":[["Control","Semigroupoid"],"Semigroupoid"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}]},"sourceSpan":{"start":[16,1],"name":"bower_components/purescript-prelude/src/Control/Category.purs","end":[17,24]}},{"children":[{"comments":null,"title":"commutativeRingInt","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","CommutativeRing"],"CommutativeRing"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}},"sourceSpan":{"start":[20,1],"name":"bower_components/purescript-prelude/src/Data/CommutativeRing.purs","end":[20,51]}},{"comments":null,"title":"commutativeRingNumber","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","CommutativeRing"],"CommutativeRing"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]}},"sourceSpan":{"start":[21,1],"name":"bower_components/purescript-prelude/src/Data/CommutativeRing.purs","end":[21,57]}},{"comments":null,"title":"commutativeRingUnit","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","CommutativeRing"],"CommutativeRing"]},{"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}},"sourceSpan":{"start":[22,1],"name":"bower_components/purescript-prelude/src/Data/CommutativeRing.purs","end":[22,49]}}],"comments":"The `CommutativeRing` class is for rings where multiplication is\ncommutative.\n\nInstances must satisfy the following law in addition to the `Ring`\nlaws:\n\n- Commutative multiplication: `a * b = b * a`\n","title":"CommutativeRing","info":{"fundeps":[],"arguments":[["a",null]],"declType":"typeClass","superclasses":[{"constraintClass":[["Data","Ring"],"Ring"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}]},"sourceSpan":{"start":[18,1],"name":"bower_components/purescript-prelude/src/Data/CommutativeRing.purs","end":[18,34]}},{"children":[{"comments":null,"title":"eq","info":{"declType":"typeClassMember","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}]}},"sourceSpan":null},{"comments":null,"title":"eqBoolean","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Eq"],"Eq"]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}},"sourceSpan":{"start":[30,1],"name":"bower_components/purescript-prelude/src/Data/Eq.purs","end":[31,13]}},{"comments":null,"title":"eqInt","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Eq"],"Eq"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}},"sourceSpan":{"start":[33,1],"name":"bower_components/purescript-prelude/src/Data/Eq.purs","end":[34,13]}},{"comments":null,"title":"eqNumber","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Eq"],"Eq"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]}},"sourceSpan":{"start":[36,1],"name":"bower_components/purescript-prelude/src/Data/Eq.purs","end":[37,13]}},{"comments":null,"title":"eqChar","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Eq"],"Eq"]},{"tag":"TypeConstructor","contents":[["Prim"],"Char"]}]}},"sourceSpan":{"start":[39,1],"name":"bower_components/purescript-prelude/src/Data/Eq.purs","end":[40,13]}},{"comments":null,"title":"eqString","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Eq"],"Eq"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}},"sourceSpan":{"start":[42,1],"name":"bower_components/purescript-prelude/src/Data/Eq.purs","end":[43,13]}},{"comments":null,"title":"eqUnit","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Eq"],"Eq"]},{"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}},"sourceSpan":{"start":[45,1],"name":"bower_components/purescript-prelude/src/Data/Eq.purs","end":[46,16]}},{"comments":null,"title":"eqVoid","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Eq"],"Eq"]},{"tag":"TypeConstructor","contents":[["Data","Void"],"Void"]}]}},"sourceSpan":{"start":[48,1],"name":"bower_components/purescript-prelude/src/Data/Eq.purs","end":[49,16]}},{"comments":null,"title":"eqArray","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","Eq"],"Eq"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Eq"],"Eq"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[51,1],"name":"bower_components/purescript-prelude/src/Data/Eq.purs","end":[52,22]}}],"comments":"The `Eq` type class represents types which support decidable equality.\n\n`Eq` instances should satisfy the following laws:\n\n- Reflexivity: `x == x = true`\n- Symmetry: `x == y = y == x`\n- Transitivity: if `x == y` and `y == z` then `x == z`\n\n**Note:** The `Number` type is not an entirely law abiding member of this\nclass due to the presence of `NaN`, since `NaN /= NaN`. Additionally,\ncomputing with `Number` can result in a loss of precision, so sometimes\nvalues that should be equivalent are not.\n","title":"Eq","info":{"fundeps":[],"arguments":[["a",null]],"declType":"typeClass","superclasses":[]},"sourceSpan":{"start":[18,1],"name":"bower_components/purescript-prelude/src/Data/Eq.purs","end":[19,26]}},{"children":[{"comments":null,"title":"degree","info":{"declType":"typeClassMember","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}},"sourceSpan":null},{"comments":null,"title":"div","info":{"declType":"typeClassMember","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":null},{"comments":null,"title":"mod","info":{"declType":"typeClassMember","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":null},{"comments":null,"title":"euclideanRingInt","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","EuclideanRing"],"EuclideanRing"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}},"sourceSpan":{"start":[28,1],"name":"bower_components/purescript-prelude/src/Data/EuclideanRing.purs","end":[31,15]}},{"comments":null,"title":"euclideanRingNumber","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","EuclideanRing"],"EuclideanRing"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]}},"sourceSpan":{"start":[33,1],"name":"bower_components/purescript-prelude/src/Data/EuclideanRing.purs","end":[38,1]}},{"comments":null,"title":"euclideanRingUnit","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","EuclideanRing"],"EuclideanRing"]},{"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}},"sourceSpan":{"start":[38,1],"name":"bower_components/purescript-prelude/src/Data/EuclideanRing.purs","end":[41,17]}}],"comments":"The `EuclideanRing` class is for commutative rings that support division.\n\nInstances must satisfy the following law in addition to the `Ring`\nlaws:\n\n- Integral domain: `a /= 0` and `b /= 0` implies `a * b /= 0`\n- Multiplicative Euclidean function: ``a = (a / b) * b + (a `mod` b)``\n  where `degree a > 0` and `degree a <= degree (a * b)`\n","title":"EuclideanRing","info":{"fundeps":[],"arguments":[["a",null]],"declType":"typeClass","superclasses":[{"constraintClass":[["Data","CommutativeRing"],"CommutativeRing"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}]},"sourceSpan":{"start":[21,1],"name":"bower_components/purescript-prelude/src/Data/EuclideanRing.purs","end":[24,21]}},{"children":[{"comments":null,"title":"fieldNumber","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Field"],"Field"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]}},"sourceSpan":{"start":[23,1],"name":"bower_components/purescript-prelude/src/Data/Field.purs","end":[23,37]}},{"comments":null,"title":"fieldUnit","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Field"],"Field"]},{"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}},"sourceSpan":{"start":[24,1],"name":"bower_components/purescript-prelude/src/Data/Field.purs","end":[24,29]}}],"comments":"The `Field` class is for types that are commutative fields.\n\nInstances must satisfy the following law in addition to the\n`EuclideanRing` laws:\n\n- Non-zero multiplicative inverse: ``a `mod` b = 0` for all `a` and `b` ``\n","title":"Field","info":{"fundeps":[],"arguments":[["a",null]],"declType":"typeClass","superclasses":[{"constraintClass":[["Data","EuclideanRing"],"EuclideanRing"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}]},"sourceSpan":{"start":[21,1],"name":"bower_components/purescript-prelude/src/Data/Field.purs","end":[21,33]}},{"children":[{"comments":null,"title":"map","info":{"declType":"typeClassMember","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"b"}]}]}]},null]},null]}},"sourceSpan":null},{"comments":null,"title":"functorFn","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Functor"],"Functor"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"r"}]}}]}},"sourceSpan":{"start":[39,1],"name":"bower_components/purescript-prelude/src/Data/Functor.purs","end":[40,16]}},{"comments":null,"title":"functorArray","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Functor"],"Functor"]},{"tag":"TypeConstructor","contents":[["Prim"],"Array"]}]}},"sourceSpan":{"start":[42,1],"name":"bower_components/purescript-prelude/src/Data/Functor.purs","end":[43,17]}}],"comments":"A `Functor` is a type constructor which supports a mapping operation\n`(<$>)`.\n\n`(<$>)` can be used to turn functions `a -> b` into functions\n`f a -> f b` whose argument and return types use the type constructor `f`\nto represent some computational context.\n\nInstances must satisfy the following laws:\n\n- Identity: `(<$>) id = id`\n- Composition: `(<$>) (f <<< g) = (f <$>) <<< (g <$>)`\n","title":"Functor","info":{"fundeps":[],"arguments":[["f",null]],"declType":"typeClass","superclasses":[]},"sourceSpan":{"start":[24,1],"name":"bower_components/purescript-prelude/src/Data/Functor.purs","end":[25,44]}},{"children":[{"comments":null,"title":"conj","info":{"declType":"typeClassMember","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":null},{"comments":null,"title":"disj","info":{"declType":"typeClassMember","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":null},{"comments":null,"title":"not","info":{"declType":"typeClassMember","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"a"}]}},"sourceSpan":null},{"comments":null,"title":"heytingAlgebraBoolean","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","HeytingAlgebra"],"HeytingAlgebra"]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}},"sourceSpan":{"start":[44,1],"name":"bower_components/purescript-prelude/src/Data/HeytingAlgebra.purs","end":[50,16]}},{"comments":null,"title":"heytingAlgebraUnit","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","HeytingAlgebra"],"HeytingAlgebra"]},{"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}},"sourceSpan":{"start":[52,1],"name":"bower_components/purescript-prelude/src/Data/HeytingAlgebra.purs","end":[58,15]}},{"comments":null,"title":"heytingAlgebraFunction","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","HeytingAlgebra"],"HeytingAlgebra"],"constraintArgs":[{"tag":"TypeVar","contents":"b"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","HeytingAlgebra"],"HeytingAlgebra"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}},"sourceSpan":{"start":[60,1],"name":"bower_components/purescript-prelude/src/Data/HeytingAlgebra.purs","end":[66,22]}}],"comments":"The `HeytingAlgebra` type class represents types are bounded lattices with\nan implication operator such that the following laws hold:\n\n- Associativity:\n  - `a || (b || c) = (a || b) || c`\n  - `a && (b && c) = (a && b) && c`\n- Commutativity:\n  - `a || b = b || a`\n  - `a && b = b && a`\n- Absorption:\n  - `a || (a && b) = a`\n  - `a && (a || b) = a`\n- Idempotent:\n  - `a || a = a`\n  - `a && a = a`\n- Identity:\n  - `a || ff = a`\n  - `a && tt = a`\n- Implication:\n  - ``a `implies` a = tt``\n  - ``a && (a `implies` b) = a && b``\n  - ``b && (a `implies` b) = b``\n  - ``a `implies` (b && c) = (a `implies` b) && (a `implies` c)``\n- Complemented:\n  - ``not a = a `implies` ff``\n","title":"HeytingAlgebra","info":{"fundeps":[],"arguments":[["a",null]],"declType":"typeClass","superclasses":[]},"sourceSpan":{"start":[33,1],"name":"bower_components/purescript-prelude/src/Data/HeytingAlgebra.purs","end":[39,16]}},{"children":[{"comments":null,"title":"monadFn","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad"],"Monad"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"r"}]}}]}},"sourceSpan":{"start":[32,1],"name":"bower_components/purescript-prelude/src/Control/Monad.purs","end":[32,35]}},{"comments":null,"title":"monadArray","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad"],"Monad"]},{"tag":"TypeConstructor","contents":[["Prim"],"Array"]}]}},"sourceSpan":{"start":[33,1],"name":"bower_components/purescript-prelude/src/Control/Monad.purs","end":[33,35]}}],"comments":"The `Monad` type class combines the operations of the `Bind` and\n`Applicative` type classes. Therefore, `Monad` instances represent type\nconstructors which support sequential composition, and also lifting of\nfunctions of arbitrary arity.\n\nInstances must satisfy the following laws in addition to the\n`Applicative` and `Bind` laws:\n\n- Left Identity: `pure x >>= f = f x`\n- Right Identity: `x >>= pure = x`\n","title":"Monad","info":{"fundeps":[],"arguments":[["m",null]],"declType":"typeClass","superclasses":[{"constraintClass":[["Control","Applicative"],"Applicative"],"constraintArgs":[{"tag":"TypeVar","contents":"m"}],"constraintData":null},{"constraintClass":[["Control","Bind"],"Bind"],"constraintArgs":[{"tag":"TypeVar","contents":"m"}],"constraintData":null}]},"sourceSpan":{"start":[30,1],"name":"bower_components/purescript-prelude/src/Control/Monad.purs","end":[30,41]}},{"children":[{"comments":null,"title":"compare","info":{"declType":"typeClassMember","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeConstructor","contents":[["Data","Ordering"],"Ordering"]}]}]}},"sourceSpan":null},{"comments":null,"title":"ordBoolean","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Ord"],"Ord"]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}},"sourceSpan":{"start":[35,1],"name":"bower_components/purescript-prelude/src/Data/Ord.purs","end":[36,26]}},{"comments":null,"title":"ordInt","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Ord"],"Ord"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}},"sourceSpan":{"start":[38,1],"name":"bower_components/purescript-prelude/src/Data/Ord.purs","end":[39,26]}},{"comments":null,"title":"ordNumber","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Ord"],"Ord"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]}},"sourceSpan":{"start":[41,1],"name":"bower_components/purescript-prelude/src/Data/Ord.purs","end":[42,26]}},{"comments":null,"title":"ordString","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Ord"],"Ord"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}},"sourceSpan":{"start":[44,1],"name":"bower_components/purescript-prelude/src/Data/Ord.purs","end":[45,26]}},{"comments":null,"title":"ordChar","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Ord"],"Ord"]},{"tag":"TypeConstructor","contents":[["Prim"],"Char"]}]}},"sourceSpan":{"start":[47,1],"name":"bower_components/purescript-prelude/src/Data/Ord.purs","end":[48,26]}},{"comments":null,"title":"ordUnit","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Ord"],"Ord"]},{"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}},"sourceSpan":{"start":[50,1],"name":"bower_components/purescript-prelude/src/Data/Ord.purs","end":[51,19]}},{"comments":null,"title":"ordVoid","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Ord"],"Ord"]},{"tag":"TypeConstructor","contents":[["Data","Void"],"Void"]}]}},"sourceSpan":{"start":[53,1],"name":"bower_components/purescript-prelude/src/Data/Ord.purs","end":[54,19]}},{"comments":null,"title":"ordArray","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","Ord"],"Ord"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Ord"],"Ord"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[56,1],"name":"bower_components/purescript-prelude/src/Data/Ord.purs","end":[65,1]}},{"comments":null,"title":"ordOrdering","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Ord"],"Ord"]},{"tag":"TypeConstructor","contents":[["Data","Ordering"],"Ordering"]}]}},"sourceSpan":{"start":[67,1],"name":"bower_components/purescript-prelude/src/Data/Ord.purs","end":[74,21]}}],"comments":"The `Ord` type class represents types which support comparisons with a\n_total order_.\n\n`Ord` instances should satisfy the laws of total orderings:\n\n- Reflexivity: `a <= a`\n- Antisymmetry: if `a <= b` and `b <= a` then `a = b`\n- Transitivity: if `a <= b` and `b <= c` then `a <= c`\n","title":"Ord","info":{"fundeps":[],"arguments":[["a",null]],"declType":"typeClass","superclasses":[{"constraintClass":[["Data","Eq"],"Eq"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}]},"sourceSpan":{"start":[32,1],"name":"bower_components/purescript-prelude/src/Data/Ord.purs","end":[33,32]}},{"children":[{"comments":null,"title":"sub","info":{"declType":"typeClassMember","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":null},{"comments":null,"title":"ringInt","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Ring"],"Ring"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}},"sourceSpan":{"start":[21,1],"name":"bower_components/purescript-prelude/src/Data/Ring.purs","end":[22,15]}},{"comments":null,"title":"ringNumber","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Ring"],"Ring"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]}},"sourceSpan":{"start":[24,1],"name":"bower_components/purescript-prelude/src/Data/Ring.purs","end":[25,15]}},{"comments":null,"title":"ringUnit","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Ring"],"Ring"]},{"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}},"sourceSpan":{"start":[27,1],"name":"bower_components/purescript-prelude/src/Data/Ring.purs","end":[28,17]}}],"comments":"The `Ring` class is for types that support addition, multiplication,\nand subtraction operations.\n\nInstances must satisfy the following law in addition to the `Semiring`\nlaws:\n\n- Additive inverse: `a - a = (zero - a) + a = zero`\n","title":"Ring","info":{"fundeps":[],"arguments":[["a",null]],"declType":"typeClass","superclasses":[{"constraintClass":[["Data","Semiring"],"Semiring"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}]},"sourceSpan":{"start":[16,1],"name":"bower_components/purescript-prelude/src/Data/Ring.purs","end":[17,21]}},{"children":[{"comments":null,"title":"append","info":{"declType":"typeClassMember","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":null},{"comments":null,"title":"semigroupString","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Semigroup"],"Semigroup"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}},"sourceSpan":{"start":[19,1],"name":"bower_components/purescript-prelude/src/Data/Semigroup.purs","end":[20,24]}},{"comments":null,"title":"semigroupUnit","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Semigroup"],"Semigroup"]},{"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}},"sourceSpan":{"start":[22,1],"name":"bower_components/purescript-prelude/src/Data/Semigroup.purs","end":[23,20]}},{"comments":null,"title":"semigroupVoid","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Semigroup"],"Semigroup"]},{"tag":"TypeConstructor","contents":[["Data","Void"],"Void"]}]}},"sourceSpan":{"start":[25,1],"name":"bower_components/purescript-prelude/src/Data/Semigroup.purs","end":[26,20]}},{"comments":null,"title":"semigroupFn","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","Semigroup"],"Semigroup"],"constraintArgs":[{"tag":"TypeVar","contents":"s'"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Semigroup"],"Semigroup"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"s"}]},{"tag":"TypeVar","contents":"s'"}]}}]}},"sourceSpan":{"start":[28,1],"name":"bower_components/purescript-prelude/src/Data/Semigroup.purs","end":[29,28]}},{"comments":null,"title":"semigroupArray","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Semigroup"],"Semigroup"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[31,1],"name":"bower_components/purescript-prelude/src/Data/Semigroup.purs","end":[32,23]}}],"comments":"The `Semigroup` type class identifies an associative operation on a type.\n\nInstances are required to satisfy the following law:\n\n- Associativity: `(x <> y) <> z = x <> (y <> z)`\n\nOne example of a `Semigroup` is `String`, with `(<>)` defined as string\nconcatenation.\n","title":"Semigroup","info":{"fundeps":[],"arguments":[["a",null]],"declType":"typeClass","superclasses":[]},"sourceSpan":{"start":[14,1],"name":"bower_components/purescript-prelude/src/Data/Semigroup.purs","end":[15,24]}},{"children":[{"comments":null,"title":"compose","info":{"declType":"typeClassMember","type":{"tag":"ForAll","contents":["d",{"tag":"ForAll","contents":["c",{"tag":"ForAll","contents":["b",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"a"},{"tag":"TypeVar","contents":"c"}]},{"tag":"TypeVar","contents":"d"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"a"},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeVar","contents":"c"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"a"},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeVar","contents":"d"}]}]}]},null]},null]},null]}},"sourceSpan":null},{"comments":null,"title":"semigroupoidFn","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Semigroupoid"],"Semigroupoid"]},{"tag":"TypeConstructor","contents":[["Prim"],"Function"]}]}},"sourceSpan":{"start":[15,1],"name":"bower_components/purescript-prelude/src/Control/Semigroupoid.purs","end":[16,26]}}],"comments":"A `Semigroupoid` is similar to a [`Category`](#category) but does not\nrequire an identity element `id`, just composable morphisms.\n\n`Semigroupoid`s must satisfy the following law:\n\n- Associativity: `p <<< (q <<< r) = (p <<< q) <<< r`\n\nOne example of a `Semigroupoid` is the function type constructor `(->)`,\nwith `(<<<)` defined as function composition.\n","title":"Semigroupoid","info":{"fundeps":[],"arguments":[["a",null]],"declType":"typeClass","superclasses":[]},"sourceSpan":{"start":[12,1],"name":"bower_components/purescript-prelude/src/Control/Semigroupoid.purs","end":[13,51]}},{"children":[{"comments":null,"title":"add","info":{"declType":"typeClassMember","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":null},{"comments":null,"title":"zero","info":{"declType":"typeClassMember","type":{"tag":"TypeVar","contents":"a"}},"sourceSpan":null},{"comments":null,"title":"mul","info":{"declType":"typeClassMember","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":null},{"comments":null,"title":"one","info":{"declType":"typeClassMember","type":{"tag":"TypeVar","contents":"a"}},"sourceSpan":null},{"comments":null,"title":"semiringInt","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Semiring"],"Semiring"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}},"sourceSpan":{"start":[35,1],"name":"bower_components/purescript-prelude/src/Data/Semiring.purs","end":[41,1]}},{"comments":null,"title":"semiringNumber","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Semiring"],"Semiring"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]}},"sourceSpan":{"start":[41,1],"name":"bower_components/purescript-prelude/src/Data/Semiring.purs","end":[47,1]}},{"comments":null,"title":"semiringUnit","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Semiring"],"Semiring"]},{"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}},"sourceSpan":{"start":[47,1],"name":"bower_components/purescript-prelude/src/Data/Semiring.purs","end":[51,13]}}],"comments":"The `Semiring` class is for types that support an addition and\nmultiplication operation.\n\nInstances must satisfy the following laws:\n\n- Commutative monoid under addition:\n  - Associativity: `(a + b) + c = a + (b + c)`\n  - Identity: `zero + a = a + zero = a`\n  - Commutative: `a + b = b + a`\n- Monoid under multiplication:\n  - Associativity: `(a * b) * c = a * (b * c)`\n  - Identity: `one * a = a * one = a`\n- Multiplication distributes over addition:\n  - Left distributivity: `a * (b + c) = (a * b) + (a * c)`\n  - Right distributivity: `(a + b) * c = (a * c) + (b * c)`\n- Annihilation: `zero * a = a * zero = zero`\n\n**Note:** The `Number` and `Int` types are not fully law abiding\nmembers of this class hierarchy due to the potential for arithmetic\noverflows, and in the case of `Number`, the presence of `NaN` and\n`Infinity` values. The behaviour is unspecified in these cases.\n","title":"Semiring","info":{"fundeps":[],"arguments":[["a",null]],"declType":"typeClass","superclasses":[]},"sourceSpan":{"start":[26,1],"name":"bower_components/purescript-prelude/src/Data/Semiring.purs","end":[30,12]}},{"children":[{"comments":null,"title":"show","info":{"declType":"typeClassMember","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}},"sourceSpan":null},{"comments":null,"title":"showBoolean","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Show"],"Show"]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}},"sourceSpan":{"start":[12,1],"name":"bower_components/purescript-prelude/src/Data/Show.purs","end":[16,1]}},{"comments":null,"title":"showInt","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Show"],"Show"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}},"sourceSpan":{"start":[16,1],"name":"bower_components/purescript-prelude/src/Data/Show.purs","end":[17,21]}},{"comments":null,"title":"showNumber","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Show"],"Show"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]}},"sourceSpan":{"start":[19,1],"name":"bower_components/purescript-prelude/src/Data/Show.purs","end":[20,24]}},{"comments":null,"title":"showChar","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Show"],"Show"]},{"tag":"TypeConstructor","contents":[["Prim"],"Char"]}]}},"sourceSpan":{"start":[22,1],"name":"bower_components/purescript-prelude/src/Data/Show.purs","end":[23,22]}},{"comments":null,"title":"showString","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Show"],"Show"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}},"sourceSpan":{"start":[25,1],"name":"bower_components/purescript-prelude/src/Data/Show.purs","end":[26,24]}},{"comments":null,"title":"showArray","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","Show"],"Show"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Show"],"Show"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[28,1],"name":"bower_components/purescript-prelude/src/Data/Show.purs","end":[29,28]}}],"comments":"The `Show` type class represents those types which can be converted into\na human-readable `String` representation.\n\nWhile not required, it is recommended that for any expression `x`, the\nstring `show x` be executable PureScript code which evaluates to the same\nvalue as the expression `x`.\n","title":"Show","info":{"fundeps":[],"arguments":[["a",null]],"declType":"typeClass","superclasses":[]},"sourceSpan":{"start":[9,1],"name":"bower_components/purescript-prelude/src/Data/Show.purs","end":[10,22]}},{"children":[],"comments":"Perform a monadic action when a condition is true, where the conditional\nvalue is also in a monadic context.\n","title":"whenM","info":{"declType":"value","type":{"tag":"ForAll","contents":["m",{"tag":"ConstrainedType","contents":[[{"constraintClass":[["Control","Monad"],"Monad"],"constraintArgs":[{"tag":"TypeVar","contents":"m"}],"constraintData":null}],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"m"},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"m"},{"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"m"},{"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}]}]}]},null]}},"sourceSpan":{"start":[70,1],"name":"bower_components/purescript-prelude/src/Control/Monad.purs","end":[70,60]}},{"children":[],"comments":"Perform a applicative action when a condition is true.\n","title":"when","info":{"declType":"value","type":{"tag":"ForAll","contents":["m",{"tag":"ConstrainedType","contents":[[{"constraintClass":[["Control","Applicative"],"Applicative"],"constraintArgs":[{"tag":"TypeVar","contents":"m"}],"constraintData":null}],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"m"},{"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"m"},{"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}]}]}]},null]}},"sourceSpan":{"start":[57,1],"name":"bower_components/purescript-prelude/src/Control/Applicative.purs","end":[57,63]}},{"children":[],"comments":"The `void` function is used to ignore the type wrapped by a\n[`Functor`](#functor), replacing it with `Unit` and keeping only the type\ninformation provided by the type constructor itself.\n\n`void` is often useful when using `do` notation to change the return type\nof a monadic computation:\n\n```purescript\nmain = forE 1 10 \\n -> void do\n  print n\n  print (n * n)\n```\n","title":"void","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["f",{"tag":"ConstrainedType","contents":[[{"constraintClass":[["Data","Functor"],"Functor"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}],"constraintData":null}],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}]}]},null]},null]}},"sourceSpan":{"start":[59,1],"name":"bower_components/purescript-prelude/src/Data/Functor.purs","end":[59,47]}},{"children":[],"comments":"Perform a monadic action unless a condition is true, where the conditional\nvalue is also in a monadic context.\n","title":"unlessM","info":{"declType":"value","type":{"tag":"ForAll","contents":["m",{"tag":"ConstrainedType","contents":[[{"constraintClass":[["Control","Monad"],"Monad"],"constraintArgs":[{"tag":"TypeVar","contents":"m"}],"constraintData":null}],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"m"},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"m"},{"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"m"},{"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}]}]}]},null]}},"sourceSpan":{"start":[77,1],"name":"bower_components/purescript-prelude/src/Control/Monad.purs","end":[77,62]}},{"children":[],"comments":"Perform a applicative action unless a condition is true.\n","title":"unless","info":{"declType":"value","type":{"tag":"ForAll","contents":["m",{"tag":"ConstrainedType","contents":[[{"constraintClass":[["Control","Applicative"],"Applicative"],"constraintArgs":[{"tag":"TypeVar","contents":"m"}],"constraintData":null}],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"m"},{"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"m"},{"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}]}]}]},null]}},"sourceSpan":{"start":[62,1],"name":"bower_components/purescript-prelude/src/Control/Applicative.purs","end":[62,65]}},{"children":[],"comments":"`unit` is the sole inhabitant of the `Unit` type.\n","title":"unit","info":{"declType":"value","type":{"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}},"sourceSpan":{"start":[14,1],"name":"bower_components/purescript-prelude/src/Data/Unit.purs","end":[14,28]}},{"children":[],"comments":"An alias for `true`, which can be useful in guard clauses:\n\n```purescript\nmax x y | x >= y    = x\n        | otherwise = y\n```\n","title":"otherwise","info":{"declType":"value","type":{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}},"sourceSpan":{"start":[9,1],"name":"bower_components/purescript-prelude/src/Data/Boolean.purs","end":[9,21]}},{"children":[],"comments":"`notEq` tests whether one value is _not equal_ to another. Shorthand for\n`not (eq x y)`.\n","title":"notEq","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[[{"constraintClass":[["Data","Eq"],"Eq"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}]}]},null]}},"sourceSpan":{"start":[25,1],"name":"bower_components/purescript-prelude/src/Data/Eq.purs","end":[25,45]}},{"children":[],"comments":"`negate x` can be used as a shorthand for `zero - x`.\n","title":"negate","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[[{"constraintClass":[["Data","Ring"],"Ring"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"a"}]}]},null]}},"sourceSpan":{"start":[31,1],"name":"bower_components/purescript-prelude/src/Data/Ring.purs","end":[31,37]}},{"children":[],"comments":"Take the minimum of two values. If they are considered equal, the first\nargument is chosen.\n","title":"min","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[[{"constraintClass":[["Data","Ord"],"Ord"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"a"}]}]}]},null]}},"sourceSpan":{"start":[111,1],"name":"bower_components/purescript-prelude/src/Data/Ord.purs","end":[111,38]}},{"children":[],"comments":"Take the maximum of two values. If they are considered equal, the first\nargument is chosen.\n","title":"max","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[[{"constraintClass":[["Data","Ord"],"Ord"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"a"}]}]}]},null]}},"sourceSpan":{"start":[120,1],"name":"bower_components/purescript-prelude/src/Data/Ord.purs","end":[120,38]}},{"children":[],"comments":"`liftM1` provides a default implementation of `(<$>)` for any\n[`Monad`](#monad), without using `(<$>)` as provided by the\n[`Functor`](#functor)-[`Monad`](#monad) superclass relationship.\n\n`liftM1` can therefore be used to write [`Functor`](#functor) instances\nas follows:\n\n```purescript\ninstance functorF :: Functor F where\n  map = liftM1\n```\n","title":"liftM1","info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["m",{"tag":"ConstrainedType","contents":[[{"constraintClass":[["Control","Monad"],"Monad"],"constraintArgs":[{"tag":"TypeVar","contents":"m"}],"constraintData":null}],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"m"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"m"},{"tag":"TypeVar","contents":"b"}]}]}]}]},null]},null]},null]}},"sourceSpan":{"start":[46,1],"name":"bower_components/purescript-prelude/src/Control/Monad.purs","end":[46,58]}},{"children":[],"comments":"`liftA1` provides a default implementation of `(<$>)` for any\n[`Applicative`](#applicative) functor, without using `(<$>)` as provided\nby the [`Functor`](#functor)-[`Applicative`](#applicative) superclass\nrelationship.\n\n`liftA1` can therefore be used to write [`Functor`](#functor) instances\nas follows:\n\n```purescript\ninstance functorF :: Functor F where\n  map = liftA1\n```\n","title":"liftA1","info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["f",{"tag":"ConstrainedType","contents":[[{"constraintClass":[["Control","Applicative"],"Applicative"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}],"constraintData":null}],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"b"}]}]}]}]},null]},null]},null]}},"sourceSpan":{"start":[53,1],"name":"bower_components/purescript-prelude/src/Control/Applicative.purs","end":[53,64]}},{"children":[],"comments":"Collapse two applications of a monadic type constructor into one.\n","title":"join","info":{"declType":"value","type":{"tag":"ForAll","contents":["m",{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[[{"constraintClass":[["Control","Bind"],"Bind"],"constraintArgs":[{"tag":"TypeVar","contents":"m"}],"constraintData":null}],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"m"},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"m"},{"tag":"TypeVar","contents":"a"}]}}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"m"},{"tag":"TypeVar","contents":"a"}]}]}]},null]},null]}},"sourceSpan":{"start":[70,1],"name":"bower_components/purescript-prelude/src/Control/Bind.purs","end":[70,45]}},{"children":[],"comments":"Execute a monadic action if a condition holds.\n\nFor example:\n\n```purescript\nmain = ifM ((< 0.5) <$> random)\n         (trace \"Heads\")\n         (trace \"Tails\")\n```\n","title":"ifM","info":{"declType":"value","type":{"tag":"ForAll","contents":["m",{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[[{"constraintClass":[["Control","Bind"],"Bind"],"constraintArgs":[{"tag":"TypeVar","contents":"m"}],"constraintData":null}],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"m"},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"m"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"m"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"m"},{"tag":"TypeVar","contents":"a"}]}]}]}]}]},null]},null]}},"sourceSpan":{"start":[102,1],"name":"bower_components/purescript-prelude/src/Control/Bind.purs","end":[102,60]}},{"children":[],"comments":"Flips the order of the arguments to a function of two arguments.\n\n```purescript\nflip const 1 2 = const 2 1 = 2\n```\n","title":"flip","info":{"declType":"value","type":{"tag":"ForAll","contents":["c",{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeVar","contents":"c"}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"c"}]}]}]},null]},null]},null]}},"sourceSpan":{"start":[17,1],"name":"bower_components/purescript-prelude/src/Data/Function.purs","end":[17,51]}},{"children":[],"comments":"Apply a value in a computational context to a value in no context.\n\nGeneralizes `flip`.\n\n```purescript\nlongEnough :: String -> Bool\nhasSymbol :: String -> Bool\nhasDigit :: String -> Bool\npassword :: String\n\nvalidate :: String -> List Bool\nvalidate = flap [longEnough, hasSymbol, hasDigit]\n```\n\n```purescript\nflap (-) 3 4 == 1\nthreeve <$> Just 1 <@> 'a' <*> Just true == Just (threeve 1 'a' true)\n```\n","title":"flap","info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["f",{"tag":"ConstrainedType","contents":[[{"constraintClass":[["Data","Functor"],"Functor"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}],"constraintData":null}],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"b"}]}]}]}]},null]},null]},null]}},"sourceSpan":{"start":[93,1],"name":"bower_components/purescript-prelude/src/Data/Functor.purs","end":[93,58]}},{"children":[],"comments":"Returns its first argument and ignores its second.\n\n```purescript\nconst 1 \"hello\" = 1\n```\n","title":"const","info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeVar","contents":"a"}]}]},null]},null]}},"sourceSpan":{"start":[25,1],"name":"bower_components/purescript-prelude/src/Data/Function.purs","end":[25,33]}},{"children":[],"comments":"Compares two values by mapping them to a type with an `Ord` instance.\n","title":"comparing","info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[[{"constraintClass":[["Data","Ord"],"Ord"],"constraintArgs":[{"tag":"TypeVar","contents":"b"}],"constraintData":null}],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeConstructor","contents":[["Data","Ordering"],"Ordering"]}]}]}}]}]},null]},null]}},"sourceSpan":{"start":[106,1],"name":"bower_components/purescript-prelude/src/Data/Ord.purs","end":[106,67]}},{"children":[],"comments":"Clamp a value between a minimum and a maximum. For example:\n\n``` purescript\nlet f = clamp 0 10\nf (-5) == 0\nf 5    == 5\nf 15   == 10\n```\n","title":"clamp","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[[{"constraintClass":[["Data","Ord"],"Ord"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"a"}]}]}]}]},null]}},"sourceSpan":{"start":[135,1],"name":"bower_components/purescript-prelude/src/Data/Ord.purs","end":[135,45]}},{"children":[],"comments":"Test whether a value is between a minimum and a maximum (inclusive).\nFor example:\n\n``` purescript\nlet f = between 0 10\nf 0    == true\nf (-5) == false\nf 5    == true\nf 10   == true\nf 15   == false\n```\n","title":"between","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[[{"constraintClass":[["Data","Ord"],"Ord"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}]}]}]},null]}},"sourceSpan":{"start":[149,1],"name":"bower_components/purescript-prelude/src/Data/Ord.purs","end":[149,53]}},{"children":[],"comments":"`ap` provides a default implementation of `(<*>)` for any\n[`Monad`](#monad), without using `(<*>)` as provided by the\n[`Apply`](#apply)-[`Monad`](#monad) superclass relationship.\n\n`ap` can therefore be used to write [`Apply`](#apply) instances as\nfollows:\n\n```purescript\ninstance applyF :: Apply F where\n  apply = ap\n```\n","title":"ap","info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["m",{"tag":"ConstrainedType","contents":[[{"constraintClass":[["Control","Monad"],"Monad"],"constraintArgs":[{"tag":"TypeVar","contents":"m"}],"constraintData":null}],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"m"},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"m"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"m"},{"tag":"TypeVar","contents":"b"}]}]}]}]},null]},null]},null]}},"sourceSpan":{"start":[62,1],"name":"bower_components/purescript-prelude/src/Control/Monad.purs","end":[62,56]}},{"children":[],"comments":null,"title":"absurd","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Void"],"Void"]}]},{"tag":"TypeVar","contents":"a"}]},null]}},"sourceSpan":{"start":[10,1],"name":"bower_components/purescript-prelude/src/Data/Void.purs","end":[10,30]}},{"children":[],"comments":null,"title":"(||)","info":{"declType":"alias","alias":[["Data","HeytingAlgebra"],{"Right":{"Left":{"Ident":"disj"}}}],"fixity":{"associativity":"infixr","precedence":2}},"sourceSpan":{"start":[42,1],"name":"bower_components/purescript-prelude/src/Data/HeytingAlgebra.purs","end":[42,20]}},{"children":[],"comments":null,"title":"(>>>)","info":{"declType":"alias","alias":[["Control","Semigroupoid"],{"Right":{"Left":{"Ident":"composeFlipped"}}}],"fixity":{"associativity":"infixr","precedence":9}},"sourceSpan":{"start":[24,1],"name":"bower_components/purescript-prelude/src/Control/Semigroupoid.purs","end":[24,28]}},{"children":[],"comments":null,"title":"(>>=)","info":{"declType":"alias","alias":[["Control","Bind"],{"Right":{"Left":{"Ident":"bind"}}}],"fixity":{"associativity":"infixl","precedence":1}},"sourceSpan":{"start":[49,1],"name":"bower_components/purescript-prelude/src/Control/Bind.purs","end":[49,21]}},{"children":[],"comments":null,"title":"(>=>)","info":{"declType":"alias","alias":[["Control","Bind"],{"Right":{"Left":{"Ident":"composeKleisli"}}}],"fixity":{"associativity":"infixr","precedence":1}},"sourceSpan":{"start":[85,1],"name":"bower_components/purescript-prelude/src/Control/Bind.purs","end":[85,31]}},{"children":[],"comments":null,"title":"(>=)","info":{"declType":"alias","alias":[["Data","Ord"],{"Right":{"Left":{"Ident":"greaterThanOrEq"}}}],"fixity":{"associativity":"infixl","precedence":4}},"sourceSpan":{"start":[103,1],"name":"bower_components/purescript-prelude/src/Data/Ord.purs","end":[103,31]}},{"children":[],"comments":null,"title":"(>)","info":{"declType":"alias","alias":[["Data","Ord"],{"Right":{"Left":{"Ident":"greaterThan"}}}],"fixity":{"associativity":"infixl","precedence":4}},"sourceSpan":{"start":[102,1],"name":"bower_components/purescript-prelude/src/Data/Ord.purs","end":[102,26]}},{"children":[],"comments":null,"title":"(==)","info":{"declType":"alias","alias":[["Data","Eq"],{"Right":{"Left":{"Ident":"eq"}}}],"fixity":{"associativity":"infix","precedence":4}},"sourceSpan":{"start":[21,1],"name":"bower_components/purescript-prelude/src/Data/Eq.purs","end":[21,17]}},{"children":[],"comments":null,"title":"(=<<)","info":{"declType":"alias","alias":[["Control","Bind"],{"Right":{"Left":{"Ident":"bindFlipped"}}}],"fixity":{"associativity":"infixr","precedence":1}},"sourceSpan":{"start":[59,1],"name":"bower_components/purescript-prelude/src/Control/Bind.purs","end":[59,28]}},{"children":[],"comments":null,"title":"(<@>)","info":{"declType":"alias","alias":[["Data","Functor"],{"Right":{"Left":{"Ident":"flap"}}}],"fixity":{"associativity":"infixl","precedence":4}},"sourceSpan":{"start":[96,1],"name":"bower_components/purescript-prelude/src/Data/Functor.purs","end":[96,18]}},{"children":[],"comments":null,"title":"(<>)","info":{"declType":"alias","alias":[["Data","Semigroup"],{"Right":{"Left":{"Ident":"append"}}}],"fixity":{"associativity":"infixr","precedence":5}},"sourceSpan":{"start":[17,1],"name":"bower_components/purescript-prelude/src/Data/Semigroup.purs","end":[17,22]}},{"children":[],"comments":null,"title":"(<=<)","info":{"declType":"alias","alias":[["Control","Bind"],{"Right":{"Left":{"Ident":"composeKleisliFlipped"}}}],"fixity":{"associativity":"infixr","precedence":1}},"sourceSpan":{"start":[91,1],"name":"bower_components/purescript-prelude/src/Control/Bind.purs","end":[91,38]}},{"children":[],"comments":null,"title":"(<=)","info":{"declType":"alias","alias":[["Data","Ord"],{"Right":{"Left":{"Ident":"lessThanOrEq"}}}],"fixity":{"associativity":"infixl","precedence":4}},"sourceSpan":{"start":[101,1],"name":"bower_components/purescript-prelude/src/Data/Ord.purs","end":[101,28]}},{"children":[],"comments":null,"title":"(<<<)","info":{"declType":"alias","alias":[["Control","Semigroupoid"],{"Right":{"Left":{"Ident":"compose"}}}],"fixity":{"associativity":"infixr","precedence":9}},"sourceSpan":{"start":[18,1],"name":"bower_components/purescript-prelude/src/Control/Semigroupoid.purs","end":[18,24]}},{"children":[],"comments":null,"title":"(<*>)","info":{"declType":"alias","alias":[["Control","Apply"],{"Right":{"Left":{"Ident":"apply"}}}],"fixity":{"associativity":"infixl","precedence":4}},"sourceSpan":{"start":[38,1],"name":"bower_components/purescript-prelude/src/Control/Apply.purs","end":[38,22]}},{"children":[],"comments":null,"title":"(<*)","info":{"declType":"alias","alias":[["Control","Apply"],{"Right":{"Left":{"Ident":"applyFirst"}}}],"fixity":{"associativity":"infixl","precedence":4}},"sourceSpan":{"start":[52,1],"name":"bower_components/purescript-prelude/src/Control/Apply.purs","end":[52,26]}},{"children":[],"comments":null,"title":"(<$>)","info":{"declType":"alias","alias":[["Data","Functor"],{"Right":{"Left":{"Ident":"map"}}}],"fixity":{"associativity":"infixl","precedence":4}},"sourceSpan":{"start":[27,1],"name":"bower_components/purescript-prelude/src/Data/Functor.purs","end":[27,20]}},{"children":[],"comments":null,"title":"(<$)","info":{"declType":"alias","alias":[["Data","Functor"],{"Right":{"Left":{"Ident":"voidRight"}}}],"fixity":{"associativity":"infixl","precedence":4}},"sourceSpan":{"start":[67,1],"name":"bower_components/purescript-prelude/src/Data/Functor.purs","end":[67,25]}},{"children":[],"comments":null,"title":"(<#>)","info":{"declType":"alias","alias":[["Data","Functor"],{"Right":{"Left":{"Ident":"mapFlipped"}}}],"fixity":{"associativity":"infixl","precedence":1}},"sourceSpan":{"start":[37,1],"name":"bower_components/purescript-prelude/src/Data/Functor.purs","end":[37,27]}},{"children":[],"comments":null,"title":"(<)","info":{"declType":"alias","alias":[["Data","Ord"],{"Right":{"Left":{"Ident":"lessThan"}}}],"fixity":{"associativity":"infixl","precedence":4}},"sourceSpan":{"start":[100,1],"name":"bower_components/purescript-prelude/src/Data/Ord.purs","end":[100,23]}},{"children":[],"comments":null,"title":"(/=)","info":{"declType":"alias","alias":[["Data","Eq"],{"Right":{"Left":{"Ident":"notEq"}}}],"fixity":{"associativity":"infix","precedence":4}},"sourceSpan":{"start":[28,1],"name":"bower_components/purescript-prelude/src/Data/Eq.purs","end":[28,20]}},{"children":[],"comments":null,"title":"(/)","info":{"declType":"alias","alias":[["Data","EuclideanRing"],{"Right":{"Left":{"Ident":"div"}}}],"fixity":{"associativity":"infixl","precedence":7}},"sourceSpan":{"start":[26,1],"name":"bower_components/purescript-prelude/src/Data/EuclideanRing.purs","end":[26,18]}},{"children":[],"comments":null,"title":"(-)","info":{"declType":"alias","alias":[["Data","Ring"],{"Right":{"Left":{"Ident":"sub"}}}],"fixity":{"associativity":"infixl","precedence":6}},"sourceSpan":{"start":[19,1],"name":"bower_components/purescript-prelude/src/Data/Ring.purs","end":[19,18]}},{"children":[],"comments":null,"title":"(+)","info":{"declType":"alias","alias":[["Data","Semiring"],{"Right":{"Left":{"Ident":"add"}}}],"fixity":{"associativity":"infixl","precedence":6}},"sourceSpan":{"start":[32,1],"name":"bower_components/purescript-prelude/src/Data/Semiring.purs","end":[32,18]}},{"children":[],"comments":null,"title":"(*>)","info":{"declType":"alias","alias":[["Control","Apply"],{"Right":{"Left":{"Ident":"applySecond"}}}],"fixity":{"associativity":"infixl","precedence":4}},"sourceSpan":{"start":[58,1],"name":"bower_components/purescript-prelude/src/Control/Apply.purs","end":[58,27]}},{"children":[],"comments":null,"title":"(*)","info":{"declType":"alias","alias":[["Data","Semiring"],{"Right":{"Left":{"Ident":"mul"}}}],"fixity":{"associativity":"infixl","precedence":7}},"sourceSpan":{"start":[33,1],"name":"bower_components/purescript-prelude/src/Data/Semiring.purs","end":[33,18]}},{"children":[],"comments":null,"title":"(&&)","info":{"declType":"alias","alias":[["Data","HeytingAlgebra"],{"Right":{"Left":{"Ident":"conj"}}}],"fixity":{"associativity":"infixr","precedence":3}},"sourceSpan":{"start":[41,1],"name":"bower_components/purescript-prelude/src/Data/HeytingAlgebra.purs","end":[41,20]}},{"children":[],"comments":null,"title":"($>)","info":{"declType":"alias","alias":[["Data","Functor"],{"Right":{"Left":{"Ident":"voidLeft"}}}],"fixity":{"associativity":"infixl","precedence":4}},"sourceSpan":{"start":[73,1],"name":"bower_components/purescript-prelude/src/Data/Functor.purs","end":[73,24]}},{"children":[],"comments":"Applies a function to an argument: the reverse of `(#)`.\n\n```purescript\nlength $ groupBy productCategory $ filter isInStock $ products\n```\n\nis equivalent to:\n\n```purescript\nlength (groupBy productCategory (filter isInStock products))\n```\n\nOr another alternative equivalent, applying chain of composed functions to\na value:\n\n```purescript\nlength <<< groupBy productCategory <<< filter isInStock $ products\n```\n","title":"($)","info":{"declType":"alias","alias":[["Data","Function"],{"Right":{"Left":{"Ident":"apply"}}}],"fixity":{"associativity":"infixr","precedence":0}},"sourceSpan":{"start":[52,1],"name":"bower_components/purescript-prelude/src/Data/Function.purs","end":[52,20]}},{"children":[],"comments":"Applies an argument to a function: the reverse of `($)`.\n\n```purescript\nproducts # filter isInStock # groupBy productCategory # length\n```\n\nis equivalent to:\n\n```purescript\nlength (groupBy productCategory (filter isInStock products))\n```\n\nOr another alternative equivalent, applying a value to a chain of composed\nfunctions:\n\n```purescript\nproducts # filter isInStock >>> groupBy productCategory >>> length\n```\n","title":"(#)","info":{"declType":"alias","alias":[["Data","Function"],{"Right":{"Left":{"Ident":"applyFlipped"}}}],"fixity":{"associativity":"infixl","precedence":1}},"sourceSpan":{"start":[78,1],"name":"bower_components/purescript-prelude/src/Data/Function.purs","end":[78,27]}},{"children":[],"comments":null,"title":"type (~>)","info":{"declType":"alias","alias":[["Data","NaturalTransformation"],{"Left":"NaturalTransformation"}],"fixity":{"associativity":"infixr","precedence":4}},"sourceSpan":{"start":[19,1],"name":"bower_components/purescript-prelude/src/Data/NaturalTransformation.purs","end":[19,40]}}]}],"name":"Quantities","comments":"A helper module which re-exports all sub-modules.\n","declarations":[]}],"resolvedDependencies":{"purescript-free":"3.0.0","purescript-proxy":"1.0.0","purescript-exceptions":"2.0.0","purescript-newtype":"1.1.0","purescript-control":"2.0.0","purescript-console":"2.0.0","purescript-either":"2.0.0","purescript-arrays":"3.0.0","purescript-maybe":"2.0.1","purescript-js-timers":"2.0.0","purescript-exists":"2.0.0","purescript-distributive":"2.0.0","purescript-unfoldable":"2.0.0","purescript-invariant":"2.0.0","purescript-lazy":"2.0.0","purescript-monoid":"2.0.0","purescript-aff":"2.0.1","purescript-foldable-traversable":"2.0.0","purescript-tailrec":"2.0.0","purescript-functors":"1.0.0","purescript-prelude":"2.1.0","purescript-inject":"3.0.0","purescript-st":"2.0.0","purescript-bifunctors":"2.0.0","purescript-nonempty":"3.0.0","purescript-contravariant":"2.0.0","purescript-generics":"3.1.0","purescript-unsafe-coerce":"2.0.0","purescript-refs":"2.0.0","purescript-integers":"2.0.0","purescript-eff":"2.0.0","purescript-test-unit":"10.0.1","purescript-const":"2.0.0","purescript-transformers":"2.0.1","purescript-numbers":"3.0.0","purescript-math":"2.0.0","purescript-psci-support":"2.0.0","purescript-catenable-lists":"3.0.0","purescript-random":"2.0.0","purescript-parallel":"2.0.0","purescript-tuples":"3.0.0","purescript-partial":"1.1.2","purescript-quickcheck":"3.0.0","purescript-strings":"2.0.2","purescript-identity":"2.0.0","purescript-lists":"3.1.0","purescript-functions":"2.0.0"},"version":"2.1.0","github":["sharkdp","purescript-quantities"],"versionTag":"v2.1.0","moduleMap":{"Data.BooleanAlgebra":"purescript-prelude","Data.Decide":"purescript-contravariant","Data.Ring":"purescript-prelude","Control.Monad.Trans.Class":"purescript-transformers","Data.Functor.Product":"purescript-functors","Data.NonEmpty":"purescript-nonempty","Control.Monad.Eff.Ref":"purescript-refs","Control.Monad.Aff.Class":"purescript-aff","Data.Generic":"purescript-generics","Control.Comonad.Env":"purescript-transformers","Control.Comonad.Traced.Class":"purescript-transformers","Control.Monad.Eff.Unsafe":"purescript-eff","Data.Functor.Compose":"purescript-functors","Data.Int.Bits":"purescript-integers","Data.Bifunctor.Flip":"purescript-bifunctors","Data.Ord":"purescript-prelude","Data.Monoid.Dual":"purescript-monoid","Control.Monad.Rec.Class":"purescript-tailrec","Data.Bitraversable":"purescript-foldable-traversable","Test.Unit.Assert":"purescript-test-unit","Data.Boolean":"purescript-prelude","Control.Biapplicative":"purescript-bifunctors","Data.CatList":"purescript-catenable-lists","Control.Parallel.Class":"purescript-parallel","Type.Proxy":"purescript-proxy","Test.Unit.Output.Fancy":"purescript-test-unit","Data.Coyoneda":"purescript-free","Data.Bounded":"purescript-prelude","Control.Monad.State.Trans":"purescript-transformers","Data.Int":"purescript-integers","Data.Show":"purescript-prelude","Data.Bifunctor.Clown":"purescript-bifunctors","Control.Monad.Writer.Trans":"purescript-transformers","Data.Foldable":"purescript-foldable-traversable","Data.Divide":"purescript-contravariant","Control.Comonad.Store.Class":"purescript-transformers","Data.Number":"purescript-numbers","Control.Monad.Trampoline":"purescript-free","Control.Monad.Aff.AVar":"purescript-aff","Control.Apply":"purescript-prelude","Data.Functor.Contravariant":"purescript-contravariant","Data.Tuple.Nested":"purescript-tuples","Test.QuickCheck.LCG":"purescript-quickcheck","Control.Monad":"purescript-prelude","Data.Lazy":"purescript-lazy","Data.Monoid":"purescript-monoid","Control.Monad.List.Trans":"purescript-transformers","Control.Monad.RWS":"purescript-transformers","Data.Maybe.First":"purescript-maybe","Control.Bind":"purescript-prelude","Data.Monoid.Additive":"purescript-monoid","Data.String.Regex":"purescript-strings","Data.HeytingAlgebra":"purescript-prelude","Control.Alt":"purescript-control","Control.Monad.Maybe.Trans":"purescript-transformers","Control.Monad.Cont":"purescript-transformers","Data.List.ZipList":"purescript-lists","Data.Functor.Coproduct.Nested":"purescript-functors","Data.Ord.Unsafe":"purescript-prelude","Data.Semigroup":"purescript-prelude","Control.Monad.Reader":"purescript-transformers","Test.Unit.QuickCheck":"purescript-test-unit","Data.Const":"purescript-const","Control.Monad.Eff":"purescript-eff","Control.Comonad.Traced.Trans":"purescript-transformers","Data.Tuple":"purescript-tuples","Control.Biapply":"purescript-bifunctors","Data.Distributive":"purescript-distributive","Control.Alternative":"purescript-control","Data.Semiring":"purescript-prelude","Data.Exists":"purescript-exists","Data.CommutativeRing":"purescript-prelude","Data.NaturalTransformation":"purescript-prelude","Data.Monoid.Conj":"purescript-monoid","Data.Yoneda":"purescript-free","Control.Monad.Aff.Internal":"purescript-aff","Data.Unfoldable":"purescript-unfoldable","Control.Monad.Eff.Random":"purescript-random","Control.Comonad.Store.Trans":"purescript-transformers","Control.Monad.ST":"purescript-st","Control.Monad.State.Class":"purescript-transformers","Data.Inject":"purescript-inject","Data.List.Types":"purescript-lists","Data.Functor":"purescript-prelude","Unsafe.Coerce":"purescript-unsafe-coerce","Control.Monad.Writer.Class":"purescript-transformers","Data.CatQueue":"purescript-catenable-lists","Control.Monad.Except":"purescript-transformers","Data.List.Lazy.Types":"purescript-lists","Control.Category":"purescript-prelude","Test.QuickCheck.Arbitrary":"purescript-quickcheck","Control.Monad.RWS.Trans":"purescript-transformers","Test.QuickCheck.Data.AlphaNumString":"purescript-quickcheck","Control.Monad.Cont.Trans":"purescript-transformers","Data.Maybe":"purescript-maybe","Control.Comonad":"purescript-control","Data.Function":"purescript-prelude","Data.List":"purescript-lists","Data.Field":"purescript-prelude","Data.List.Lazy":"purescript-lists","Test.Unit.Output.TAP":"purescript-test-unit","Data.EuclideanRing":"purescript-prelude","Data.Functor.Invariant":"purescript-invariant","Control.Comonad.Traced":"purescript-transformers","Data.Comparison":"purescript-contravariant","Data.String.Unsafe":"purescript-strings","Prelude":"purescript-prelude","Control.Monad.Aff":"purescript-aff","Data.Predicate":"purescript-contravariant","Partial.Unsafe":"purescript-partial","Data.Array":"purescript-arrays","Data.Bifunctor.Product":"purescript-bifunctors","Control.Extend":"purescript-control","Test.Unit.Console":"purescript-test-unit","Control.Lazy":"purescript-control","Data.Function.Uncurried":"purescript-functions","Control.Monad.Reader.Trans":"purescript-transformers","Data.Functor.Product.Nested":"purescript-functors","Test.Unit.Output.Simple":"purescript-test-unit","Control.Comonad.Env.Class":"purescript-transformers","Data.Eq":"purescript-prelude","Data.Either.Nested":"purescript-either","Control.Comonad.Cofree":"purescript-free","Data.Newtype":"purescript-newtype","Control.Monad.Eff.Console":"purescript-console","Data.Bifunctor":"purescript-bifunctors","Data.Monoid.Disj":"purescript-monoid","Control.Monad.Eff.Exception":"purescript-exceptions","Control.Monad.Eff.Timer":"purescript-js-timers","Data.Array.Partial":"purescript-arrays","Data.String.CaseInsensitive":"purescript-strings","Control.Monad.Free":"purescript-free","Control.Parallel":"purescript-parallel","Control.MonadPlus":"purescript-control","Data.Void":"purescript-prelude","Control.MonadZero":"purescript-control","Control.Comonad.Store":"purescript-transformers","Control.Monad.Except.Trans":"purescript-transformers","Data.Bifunctor.Joker":"purescript-bifunctors","Data.Divisible":"purescript-contravariant","Data.Bifunctor.Wrap":"purescript-bifunctors","PSCI.Support":"purescript-psci-support","Data.Equivalence":"purescript-contravariant","Data.Maybe.Last":"purescript-maybe","Data.Unit":"purescript-prelude","Control.Monad.Eff.Ref.Unsafe":"purescript-refs","Data.List.NonEmpty":"purescript-lists","Data.List.Lazy.NonEmpty":"purescript-lists","Data.Ordering":"purescript-prelude","Data.Functor.Coproduct":"purescript-functors","Control.Monad.Cont.Class":"purescript-transformers","Data.Identity":"purescript-identity","Math":"purescript-math","Control.Comonad.Trans.Class":"purescript-transformers","Data.String":"purescript-strings","Control.Plus":"purescript-control","Control.Monad.Eff.Class":"purescript-eff","Test.QuickCheck":"purescript-quickcheck","Test.Unit.Main":"purescript-test-unit","Partial":"purescript-partial","Control.Comonad.Env.Trans":"purescript-transformers","Control.Monad.Reader.Class":"purescript-transformers","Data.Decidable":"purescript-contravariant","Control.Monad.Aff.Unsafe":"purescript-aff","Data.Monoid.Multiplicative":"purescript-monoid","Data.Array.ST":"purescript-arrays","Control.Monad.Error.Class":"purescript-transformers","Test.Unit":"purescript-test-unit","Control.Monad.Aff.Console":"purescript-aff","Control.Semigroupoid":"purescript-prelude","Data.Char":"purescript-strings","Data.Bifunctor.Join":"purescript-bifunctors","Control.Monad.Eff.Exception.Unsafe":"purescript-exceptions","Data.Bifoldable":"purescript-foldable-traversable","Data.Monoid.Endo":"purescript-monoid","Control.Monad.State":"purescript-transformers","Data.List.Partial":"purescript-lists","Data.String.Regex.Flags":"purescript-strings","Data.Either":"purescript-either","Control.Applicative":"purescript-prelude","Data.Op":"purescript-contravariant","Test.QuickCheck.Gen":"purescript-quickcheck","Control.Monad.Writer":"purescript-transformers","Data.Traversable":"purescript-foldable-traversable"},"compilerVersion":"0.10.7"}