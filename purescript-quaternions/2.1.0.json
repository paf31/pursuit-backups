{"uploader":"hdgarrood","packageMeta":{"repository":{"url":"git://github.com/hdgarrood/purescript-quaternions","type":"git"},"ignore":["**/.*","node_modules","bower_components","output"],"devDependencies":{"purescript-psci-support":"^3.0.0","purescript-quickcheck":"^4.0.0"},"dependencies":{"purescript-console":"^3.0.0","purescript-matrix":"^2.0.0","purescript-prelude":"^3.1.0","purescript-math":"^2.0.0","purescript-vector":"^2.0.0"},"name":"purescript-quaternions","license":["MIT"],"description":"A small library providing a Quaternion data type, as well as quaternion-based 3D rotations."},"tagTime":"2017-07-20T15:05:44+0000","modules":[{"reExports":[],"name":"Data.Quaternion","comments":"The quaternions are a number system which generalise the complex numbers,\nin a similar way to how the complex numbers generalise the real numbers.\nOne interesting aspect of the quaternions is that they satisfy all but one\nof the requirements to be a field; they only fail to be a field because\ntheir multiplication is non-commutative.\n\nJust as complex numbers can be thought of as pairs of real numbers, where\nthe first is the \"real part\" and the second is the \"imaginary part\",\nquaternions can be thought of as a pair containing a \"real part\", which is\nagain simply a real number, and a \"vector part\", which is a vector in R^3.\nAddition of quaternions is then easy to define: the sum of two quaternions\nhas a real part equal to the sum of the operands' real parts, and a vector\npart equal to the sum of the operands' vector parts.\n\nThere are four particularly important quaternions, which are known as the\n\"basis elements\". The first is `1`, which (when considered as a\nquaternion) has a real part of `1` and a vector part of `0` (i.e. the zero\nvector). The standard basis vectors in R^3 are commonly written as `e_1`,\n`e_2`, and `e_3`; the quaternions with a real part of 0 and a vector part\nof `e_1`, `e_2`, and `e_3` are called `i`, `j`, and `k` respectively, and\nform the other three basis elements.\n\nThese four elements are called the basis elements because every quaternion\ncan be written as `a + bi + cj + dk` for a choice of real numbers `a`,\n`b`, `c`, and `d`.\n\nNow, we can define multiplication on quaternions just by defining\nmultiplication on the basis elements `1`, `i`, `j`, and `k`, for which we\nuse the formula:\n\n```\ni^2 = j^2 = k^2 = ijk = -1\n```\n\nOne of the first things we can deduce is that the multiplicative inverse\nof `i` is `-i` (just as with complex numbers), and also that the inverses\nof `j` and `k` are `-j` and `-k` respectively.\n\nFrom here we can calculate products between any two basis elements. For\nexample, to calculate the product `jk`, we notice that `i^2 = ijk` and\ntherefore we can cancel `i` on the left to yield `i = jk`. As another\nexample, to calculate the product `ik`, we may start with the equation\n`i = jk` and multiply both sides by `k`, yielding `ik = jk^2 = -j`. All\nother products of basis elements may be obtained in a similar fashion.\n\nKnowing the products of basis elements and using the distributive law, we\ncan find the product of any two quaternions:\n\n```\n(a + bi + cj + dk) * (e + fi + gj + hk)\n= ae + afi + agj + ahk\n  + bei + bf(i^2) + bg(ij) + bh(ik)\n  + cej + cf(ji) + cg(j^2) + ch(jk)\n  + dek + df(ki) + dg(kj) + dh(k^2)\n= ae - bf - cg - dh\n  + (af + be + ch - dg) i\n  + (ag - bh + ce + df) j\n  + (ah + bg - cf + de) k\n```\n\nNote that quaternion multiplication is not commutative; that is, `p * q`\nis usually not the same as `q * p`. For example, `ij = k`, but `ji = -k`.\n\nLike the real numbers, however, each quaternion does have a multiplicative\ninverse, i.e. for each quaternion `p` there exists a unique quaternion `q`\nsuch that `p * q = q * p = 1`.\n\nThis means that there are two ways of dividing quaternions. If we want to\ndivide a quaternion `p` by another quaternion `q`, we can multiply `p` by\nthe multiplicative inverse of `q`, which can be written `q^-1`. Of course,\nwe have two ways of doing this; `p * q^-1` and `q^-1 * p` will not\nnecessarily be the same, so we are really dealing with two different\noperations here. We call the operation taking `p` and `q` to `q^-1 * p`\n\"left-division\", and the alternative operation which yields `p * q^-1`\n\"right-division\".\n\nThe most important application of quaternions in computing is for\nrepresenting orientations and rotations in 3D space; see the\nData.Quaternion.Rotation module for more details of this.\n","declarations":[{"children":[{"comments":null,"title":"Quaternion","info":{"arguments":[{"tag":"TypeVar","contents":"a"},{"tag":"TypeVar","contents":"a"},{"tag":"TypeVar","contents":"a"},{"tag":"TypeVar","contents":"a"}],"declType":"dataConstructor"},"sourceSpan":null},{"comments":null,"title":"eqQuaternion","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","Eq"],"Eq"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Eq"],"Eq"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Quaternion"],"Quaternion"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[101,1],"name":"/home/harry/code/purescript-quaternions/src/Data/Quaternion.purs","end":[101,51]}},{"comments":null,"title":"showQuaternion","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","Show"],"Show"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Show"],"Show"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Quaternion"],"Quaternion"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[105,1],"name":"/home/harry/code/purescript-quaternions/src/Data/Quaternion.purs","end":[105,57]}},{"comments":null,"title":"semiringQuaternion","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","Ring"],"Ring"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Semiring"],"Semiring"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Quaternion"],"Quaternion"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[113,1],"name":"/home/harry/code/purescript-quaternions/src/Data/Quaternion.purs","end":[113,65]}},{"comments":null,"title":"ringQuaternion","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","Ring"],"Ring"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Ring"],"Ring"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Quaternion"],"Quaternion"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[127,1],"name":"/home/harry/code/purescript-quaternions/src/Data/Quaternion.purs","end":[127,57]}},{"comments":null,"title":"functorQuaternion","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Functor"],"Functor"]},{"tag":"TypeConstructor","contents":[["Data","Quaternion"],"Quaternion"]}]}},"sourceSpan":{"start":[132,1],"name":"/home/harry/code/purescript-quaternions/src/Data/Quaternion.purs","end":[132,49]}},{"comments":null,"title":"divisionRingQuaternion","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","DivisionRing"],"DivisionRing"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","DivisionRing"],"DivisionRing"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Quaternion"],"Quaternion"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[135,1],"name":"/home/harry/code/purescript-quaternions/src/Data/Quaternion.purs","end":[135,81]}}],"comments":"A quaternion. The type parameter denotes the underlying type. Note that\nthe underlying type should be a reasonable approximation of the real\nnumbers; if this is not the case, some of the functions may exhibit\nstrange behaviour.\n\nBecause multiplication of quaternions is non-commutative, there is no\n`CommutativeRing` instance, and consequently no `EuclideanRing` or `Field`\ninstance either.\n\nThis means, amongst other things, that the `(/)` operator from Prelude\ncannot be used with `Quaternion` values. However, `Quaternion` does have\na `DivisionRing` instance, so you can use `leftDiv` and `rightDiv` from\nthe module `Data.DivisionRing` from the `prelude` library instead.\n","title":"Quaternion","info":{"declType":"data","dataDeclType":"data","typeArguments":[["a",null]]},"sourceSpan":{"start":[99,1],"name":"/home/harry/code/purescript-quaternions/src/Data/Quaternion.purs","end":[99,39]}},{"children":[],"comments":null,"title":"realPart","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Quaternion"],"Quaternion"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeVar","contents":"a"}]},null]}},"sourceSpan":{"start":[139,1],"name":"/home/harry/code/purescript-quaternions/src/Data/Quaternion.purs","end":[139,40]}},{"children":[],"comments":null,"title":"vectorPart","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Quaternion"],"Quaternion"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Vector3"],"Vec3"]},{"tag":"TypeVar","contents":"a"}]}]},null]}},"sourceSpan":{"start":[142,1],"name":"/home/harry/code/purescript-quaternions/src/Data/Quaternion.purs","end":[142,47]}},{"children":[],"comments":"The conjugate of a quaternion. This operation negates the vector part of\nthe quaternion.\n","title":"conjugate","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Ring"],"Ring"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Quaternion"],"Quaternion"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Quaternion"],"Quaternion"]},{"tag":"TypeVar","contents":"a"}]}]}]},null]}},"sourceSpan":{"start":[147,1],"name":"/home/harry/code/purescript-quaternions/src/Data/Quaternion.purs","end":[147,62]}},{"children":[],"comments":"The conjugate of a quaternion by another quaternion. Defined as\n`conjBy p q = q * p * recip q`.\n","title":"conjugateBy","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","DivisionRing"],"DivisionRing"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Quaternion"],"Quaternion"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Quaternion"],"Quaternion"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Quaternion"],"Quaternion"]},{"tag":"TypeVar","contents":"a"}]}]}]}]},null]}},"sourceSpan":{"start":[153,1],"name":"/home/harry/code/purescript-quaternions/src/Data/Quaternion.purs","end":[153,88]}},{"children":[],"comments":null,"title":"norm","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Quaternion"],"Quaternion"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]}},"sourceSpan":{"start":[156,1],"name":"/home/harry/code/purescript-quaternions/src/Data/Quaternion.purs","end":[156,36]}},{"children":[],"comments":"The square of the norm of a quaternion. This is slightly easier to compute\nthan the actual norm, so may be useful in cases where you are worried\nabout performance.\n","title":"normSquare","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Semiring"],"Semiring"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Quaternion"],"Quaternion"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeVar","contents":"a"}]}]},null]}},"sourceSpan":{"start":[162,1],"name":"/home/harry/code/purescript-quaternions/src/Data/Quaternion.purs","end":[162,56]}},{"children":[],"comments":null,"title":"i","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Semiring"],"Semiring"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Quaternion"],"Quaternion"]},{"tag":"TypeVar","contents":"a"}]}]},null]}},"sourceSpan":{"start":[165,1],"name":"/home/harry/code/purescript-quaternions/src/Data/Quaternion.purs","end":[165,42]}},{"children":[],"comments":null,"title":"j","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Semiring"],"Semiring"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Quaternion"],"Quaternion"]},{"tag":"TypeVar","contents":"a"}]}]},null]}},"sourceSpan":{"start":[168,1],"name":"/home/harry/code/purescript-quaternions/src/Data/Quaternion.purs","end":[168,42]}},{"children":[],"comments":null,"title":"k","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Semiring"],"Semiring"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Quaternion"],"Quaternion"]},{"tag":"TypeVar","contents":"a"}]}]},null]}},"sourceSpan":{"start":[171,1],"name":"/home/harry/code/purescript-quaternions/src/Data/Quaternion.purs","end":[171,42]}},{"children":[],"comments":"Multiplies both the real part and the vector part by the given scalar.\n","title":"scalarMul","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Semiring"],"Semiring"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Quaternion"],"Quaternion"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Quaternion"],"Quaternion"]},{"tag":"TypeVar","contents":"a"}]}]}]}]},null]}},"sourceSpan":{"start":[175,1],"name":"/home/harry/code/purescript-quaternions/src/Data/Quaternion.purs","end":[175,71]}},{"children":[],"comments":"Scales the given quaternion, returning a quaternion pointing in the same\ndirection of unit norm; multiplying this by the original quaternion's\nnorm will give you back the original quaternion.\n","title":"versor","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Quaternion"],"Quaternion"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Quaternion"],"Quaternion"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]}]}},"sourceSpan":{"start":[182,1],"name":"/home/harry/code/purescript-quaternions/src/Data/Quaternion.purs","end":[182,49]}},{"children":[],"comments":"Approximate equality of quaternions, given an epsilon value specifying the\nmaximum amount that any of the four components is allowed to differ by.\n","title":"approxEq","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Ord"],"Ord"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Ring"],"Ring"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Quaternion"],"Quaternion"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Quaternion"],"Quaternion"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}]}]}]}]},null]}},"sourceSpan":{"start":[187,1],"name":"/home/harry/code/purescript-quaternions/src/Data/Quaternion.purs","end":[187,86]}}]},{"reExports":[],"name":"Data.Quaternion.Rotation","comments":"This module provides rotations in 3D space based on quaternions. It is\nintended to be imported qualified, for example like this:\n\n    import Data.Quaternion.Rotation (Rotation)\n    import Data.Quaternion.Rotation as Rotation\n","declarations":[{"children":[{"comments":null,"title":"semigroupRotation","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","Ring"],"Ring"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Semigroup"],"Semigroup"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Quaternion","Rotation"],"Rotation"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[76,1],"name":"/home/harry/code/purescript-quaternions/src/Data/Quaternion/Rotation.purs","end":[76,63]}},{"comments":null,"title":"monoidRotation","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","Ring"],"Ring"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Monoid"],"Monoid"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Quaternion","Rotation"],"Rotation"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[80,1],"name":"/home/harry/code/purescript-quaternions/src/Data/Quaternion/Rotation.purs","end":[80,57]}},{"comments":null,"title":"eqRotation","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","Eq"],"Eq"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Eq"],"Eq"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Quaternion","Rotation"],"Rotation"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[83,1],"name":"/home/harry/code/purescript-quaternions/src/Data/Quaternion/Rotation.purs","end":[83,47]}},{"comments":null,"title":"showRotation","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","Show"],"Show"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Show"],"Show"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Quaternion","Rotation"],"Rotation"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[86,1],"name":"/home/harry/code/purescript-quaternions/src/Data/Quaternion/Rotation.purs","end":[86,53]}}],"comments":"A rotation in three-dimensional space, represented by a unit quaternion\n(also known as a versor).\n\nThe constructor is not exported to ensure that only valid rotations can\nbe constructed.\n\nThe semigroup instance provides composition of rotations; `p <> q` gives\na rotation representating the rotation `q` followed by the rotation `p`.\nNote that in general, this is not the same as `p` followed by `q`!\n","title":"Rotation","info":{"declType":"data","dataDeclType":"newtype","typeArguments":[["a",null]]},"sourceSpan":{"start":[41,1],"name":"/home/harry/code/purescript-quaternions/src/Data/Quaternion/Rotation.purs","end":[41,45]}},{"children":[],"comments":"Construct a Rotation from any Quaternion, by normalizing to a versor.\n","title":"fromQuaternion","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Quaternion"],"Quaternion"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Quaternion","Rotation"],"Rotation"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]}]}},"sourceSpan":{"start":[44,1],"name":"/home/harry/code/purescript-quaternions/src/Data/Quaternion/Rotation.purs","end":[44,55]}},{"children":[],"comments":"Get the underlying versor.\n","title":"toQuaternion","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Quaternion","Rotation"],"Rotation"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Quaternion"],"Quaternion"]},{"tag":"TypeVar","contents":"a"}]}]},null]}},"sourceSpan":{"start":[48,1],"name":"/home/harry/code/purescript-quaternions/src/Data/Quaternion/Rotation.purs","end":[48,53]}},{"children":[],"comments":"Construct a `Rotation` representing the rotation by the specified angle\n(in radians) about the specified axis. The rotation is clockwise from the\npoint of view of someone looking along the direction of the rotation axis.\n","title":"fromAngleAxis","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Record"]},{"tag":"RCons","contents":["angle",{"tag":"TypeConstructor","contents":[["Prim"],"Number"]},{"tag":"RCons","contents":["axis",{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Vector3"],"Vec3"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]},{"tag":"REmpty"}]}]}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Quaternion","Rotation"],"Rotation"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]}]}},"sourceSpan":{"start":[54,1],"name":"/home/harry/code/purescript-quaternions/src/Data/Quaternion/Rotation.purs","end":[54,77]}},{"children":[],"comments":"Gives the angle and axis that a rotation represents. This is the inverse\nof `fromAngleAxis`.\n","title":"toAngleAxis","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Quaternion","Rotation"],"Rotation"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Record"]},{"tag":"RCons","contents":["angle",{"tag":"TypeConstructor","contents":[["Prim"],"Number"]},{"tag":"RCons","contents":["axis",{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Vector3"],"Vec3"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]},{"tag":"REmpty"}]}]}]}]}},"sourceSpan":{"start":[66,1],"name":"/home/harry/code/purescript-quaternions/src/Data/Quaternion/Rotation.purs","end":[66,75]}},{"children":[],"comments":"An alternative string representation, which can be useful for debugging.\n","title":"showAngleAxis","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Quaternion","Rotation"],"Rotation"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]}]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}},"sourceSpan":{"start":[90,1],"name":"/home/harry/code/purescript-quaternions/src/Data/Quaternion/Rotation.purs","end":[90,43]}},{"children":[],"comments":"The inverse of a rotation. The following should hold for any rotation `p`:\n\n* `inverse p <> p == mempty`\n* `p <> inverse p == mempty`\n","title":"inverse","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","DivisionRing"],"DivisionRing"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Quaternion","Rotation"],"Rotation"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Quaternion","Rotation"],"Rotation"]},{"tag":"TypeVar","contents":"a"}]}]}]},null]}},"sourceSpan":{"start":[102,1],"name":"/home/harry/code/purescript-quaternions/src/Data/Quaternion/Rotation.purs","end":[102,64]}},{"children":[],"comments":"The action of a rotation on a vector in 3D space. This is a group action,\nwhich means that the following hold:\n\n* Identity: `act mempty == id`\n* Compatibility: `act p (act q v) = act (p <> q) v`\n","title":"act","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","DivisionRing"],"DivisionRing"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Quaternion","Rotation"],"Rotation"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Vector3"],"Vec3"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Vector3"],"Vec3"]},{"tag":"TypeVar","contents":"a"}]}]}]}]},null]}},"sourceSpan":{"start":[110,1],"name":"/home/harry/code/purescript-quaternions/src/Data/Quaternion/Rotation.purs","end":[110,66]}},{"children":[],"comments":"Though all functions in this library which create a `Rotation` ensure that\nthe underlying `Quaternion` has magnitude 1, after a sufficient number of\narithmetic operations the magnitude may drift away from 1. In this case\n`normalize` can be used; `normalize` takes a possibly-drifted `Rotation`\nand rescales if it necessary, so that its magnitude returns to 1.\n","title":"normalize","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Quaternion","Rotation"],"Rotation"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Quaternion","Rotation"],"Rotation"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]}]}},"sourceSpan":{"start":[121,1],"name":"/home/harry/code/purescript-quaternions/src/Data/Quaternion/Rotation.purs","end":[121,48]}},{"children":[],"comments":null,"title":"toMat4","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Quaternion","Rotation"],"Rotation"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]}]},{"tag":"TypeConstructor","contents":[["Data","Matrix4"],"Mat4"]}]}},"sourceSpan":{"start":[124,1],"name":"/home/harry/code/purescript-quaternions/src/Data/Quaternion/Rotation.purs","end":[124,34]}}]}],"resolvedDependencies":{"purescript-proxy":"2.1.0","purescript-exceptions":"3.0.0","purescript-newtype":"2.0.0","purescript-control":"3.3.0","purescript-console":"3.0.0","purescript-either":"3.1.0","purescript-arrays":"4.1.2","purescript-extensions":"2.0.0","purescript-maybe":"3.0.0","purescript-symbols":"3.0.0","purescript-type-equality":"2.1.0","purescript-distributive":"3.0.0","purescript-unfoldable":"3.0.0","purescript-invariant":"3.0.0","purescript-matrix":"2.0.0","purescript-lazy":"3.0.0","purescript-monoid":"3.1.0","purescript-foldable-traversable":"3.4.0","purescript-tailrec":"3.3.0","purescript-gen":"1.1.0","purescript-prelude":"3.1.0","purescript-st":"3.0.0","purescript-bifunctors":"3.0.0","purescript-nonempty":"4.0.0","purescript-unsafe-coerce":"3.0.0","purescript-integers":"3.1.0","purescript-eff":"3.1.0","purescript-transformers":"3.4.0","purescript-globals":"3.0.0","purescript-generics-rep":"5.1.0","purescript-math":"2.1.0","purescript-enums":"3.2.0","purescript-foreign-clone":"0.0.1","purescript-psci-support":"3.0.0","purescript-random":"3.0.0","purescript-tuples":"4.1.0","purescript-partial":"1.2.1","purescript-quickcheck":"4.4.0","purescript-strings":"3.3.0","purescript-identity":"3.1.0","purescript-foreign":"4.0.1","purescript-lists":"4.9.0","purescript-functions":"3.0.0","purescript-vector":"2.0.0"},"version":"2.1.0","github":["hdgarrood","purescript-quaternions"],"versionTag":"v2.1.0","moduleMap":{"Data.BooleanAlgebra":"purescript-prelude","Data.Ring":"purescript-prelude","Control.Monad.Trans.Class":"purescript-transformers","Data.NonEmpty":"purescript-nonempty","Data.Vector3":"purescript-vector","Data.Char.Gen":"purescript-strings","Data.ST.Matrix":"purescript-matrix","Data.Traversable.Accum.Internal":"purescript-foldable-traversable","Data.Enum.Gen":"purescript-enums","Control.Comonad.Env":"purescript-transformers","Control.Comonad.Traced.Class":"purescript-transformers","Control.Monad.Eff.Unsafe":"purescript-eff","Data.Int.Bits":"purescript-integers","Data.Vector":"purescript-vector","Data.Bifunctor.Flip":"purescript-bifunctors","Data.String.CodePoints":"purescript-strings","Data.Ord":"purescript-prelude","Control.Monad.Gen":"purescript-gen","Data.Monoid.Dual":"purescript-monoid","Control.Monad.Rec.Class":"purescript-tailrec","Data.Bitraversable":"purescript-foldable-traversable","Data.Boolean":"purescript-prelude","Control.Biapplicative":"purescript-bifunctors","Type.Proxy":"purescript-proxy","Data.Array.ST.Iterator":"purescript-arrays","Extensions":"purescript-extensions","Data.Bounded":"purescript-prelude","Data.Vector2":"purescript-vector","Control.Monad.State.Trans":"purescript-transformers","Data.TraversableWithIndex":"purescript-foldable-traversable","Data.Int":"purescript-integers","Data.Show":"purescript-prelude","Data.Bifunctor.Clown":"purescript-bifunctors","Control.Monad.Writer.Trans":"purescript-transformers","Data.Foldable":"purescript-foldable-traversable","Control.Comonad.Store.Class":"purescript-transformers","Data.Enum":"purescript-enums","Control.Apply":"purescript-prelude","Data.Tuple.Nested":"purescript-tuples","Data.Generic.Rep.Semigroup":"purescript-generics-rep","Test.QuickCheck.LCG":"purescript-quickcheck","Control.Monad":"purescript-prelude","Data.Lazy":"purescript-lazy","Data.Monoid":"purescript-monoid","Control.Monad.Eff.Uncurried":"purescript-eff","Control.Monad.List.Trans":"purescript-transformers","Control.Monad.RWS":"purescript-transformers","Data.Maybe.First":"purescript-maybe","Control.Bind":"purescript-prelude","Data.Foreign.Index":"purescript-foreign","Data.Monoid.Additive":"purescript-monoid","Data.Symbol":"purescript-symbols","Data.String.Regex":"purescript-strings","Data.HeytingAlgebra":"purescript-prelude","Control.Alt":"purescript-control","Control.Monad.Maybe.Trans":"purescript-transformers","Control.Monad.Cont":"purescript-transformers","Data.List.ZipList":"purescript-lists","Data.Ord.Unsafe":"purescript-prelude","Data.Semigroup":"purescript-prelude","Data.CForeign.Index":"purescript-foreign-clone","Control.Monad.Reader":"purescript-transformers","Data.CForeign.Class":"purescript-foreign-clone","Data.Generic.Rep.Bounded":"purescript-generics-rep","Data.Vector4":"purescript-vector","Control.Monad.Eff":"purescript-eff","Control.Comonad.Traced.Trans":"purescript-transformers","Data.Array.ST.Partial":"purescript-arrays","Data.Generic.Rep.Show":"purescript-generics-rep","Data.Tuple":"purescript-tuples","Data.Matrix3":"purescript-matrix","Data.Semigroup.Foldable":"purescript-foldable-traversable","Control.Biapply":"purescript-bifunctors","Data.Distributive":"purescript-distributive","Type.Equality":"purescript-type-equality","Control.Alternative":"purescript-control","Data.Semiring":"purescript-prelude","Data.JSON":"purescript-extensions","Data.CForeign.Null":"purescript-foreign-clone","Data.Traversable.Accum":"purescript-foldable-traversable","Data.CommutativeRing":"purescript-prelude","Data.NaturalTransformation":"purescript-prelude","Data.Monoid.Conj":"purescript-monoid","Data.Unfoldable":"purescript-unfoldable","Control.Monad.Eff.Random":"purescript-random","Control.Comonad.Store.Trans":"purescript-transformers","Control.Monad.ST":"purescript-st","Control.Monad.State.Class":"purescript-transformers","Data.CForeign.NullOrUndefined":"purescript-foreign-clone","Data.List.Types":"purescript-lists","Data.Functor":"purescript-prelude","Unsafe.Coerce":"purescript-unsafe-coerce","Control.Monad.Writer.Class":"purescript-transformers","Data.Generic.Rep.Ord":"purescript-generics-rep","Data.CForeign.Keys":"purescript-foreign-clone","Control.Monad.Except":"purescript-transformers","Data.List.Lazy.Types":"purescript-lists","Control.Category":"purescript-prelude","Test.QuickCheck.Arbitrary":"purescript-quickcheck","Control.Monad.Gen.Common":"purescript-gen","Control.Monad.RWS.Trans":"purescript-transformers","Test.QuickCheck.Data.AlphaNumString":"purescript-quickcheck","Control.Monad.Cont.Trans":"purescript-transformers","Data.Maybe":"purescript-maybe","Data.String.Regex.Unsafe":"purescript-strings","Control.Comonad":"purescript-control","Data.Function":"purescript-prelude","Data.List":"purescript-lists","Data.Field":"purescript-prelude","Data.List.Lazy":"purescript-lists","Data.Generic.Rep.Eq":"purescript-generics-rep","Data.EuclideanRing":"purescript-prelude","Data.Functor.Invariant":"purescript-invariant","Control.Comonad.Traced":"purescript-transformers","Global.Unsafe":"purescript-globals","Data.String.Unsafe":"purescript-strings","Prelude":"purescript-prelude","Partial.Unsafe":"purescript-partial","Data.CForeign.Undefined":"purescript-foreign-clone","Data.Array":"purescript-arrays","Data.Bifunctor.Product":"purescript-bifunctors","Control.Extend":"purescript-control","Control.Lazy":"purescript-control","Data.Function.Uncurried":"purescript-functions","Control.Monad.Reader.Trans":"purescript-transformers","Control.Comonad.Env.Class":"purescript-transformers","Data.Eq":"purescript-prelude","Data.Either.Nested":"purescript-either","Data.Newtype":"purescript-newtype","Control.Monad.Eff.Console":"purescript-console","Data.Semigroup.Traversable":"purescript-foldable-traversable","Data.Bifunctor":"purescript-bifunctors","Data.Monoid.Disj":"purescript-monoid","Control.Monad.Eff.Exception":"purescript-exceptions","Control.Monad.Gen.Class":"purescript-gen","Data.Array.Partial":"purescript-arrays","Data.Foreign.Keys":"purescript-foreign","Data.String.CaseInsensitive":"purescript-strings","Control.MonadPlus":"purescript-control","Data.Void":"purescript-prelude","Control.MonadZero":"purescript-control","Data.Matrix":"purescript-matrix","Control.Comonad.Store":"purescript-transformers","Control.Monad.Except.Trans":"purescript-transformers","Data.TypeNat":"purescript-vector","Data.Bifunctor.Joker":"purescript-bifunctors","Data.FunctorWithIndex":"purescript-foldable-traversable","Data.DivisionRing":"purescript-prelude","Data.Bifunctor.Wrap":"purescript-bifunctors","PSCI.Support":"purescript-psci-support","Data.Maybe.Last":"purescript-maybe","Data.Unit":"purescript-prelude","Data.List.NonEmpty":"purescript-lists","Data.List.Lazy.NonEmpty":"purescript-lists","Data.Foreign":"purescript-foreign","Data.Ordering":"purescript-prelude","Control.Monad.Cont.Class":"purescript-transformers","Data.Identity":"purescript-identity","Math":"purescript-math","Data.ST.Matrix4":"purescript-matrix","Control.Comonad.Trans.Class":"purescript-transformers","Data.String":"purescript-strings","Control.Plus":"purescript-control","Control.Monad.Eff.Class":"purescript-eff","Test.QuickCheck":"purescript-quickcheck","Data.CForeign":"purescript-foreign-clone","Type.Row.Effect.Equality":"purescript-type-equality","Partial":"purescript-partial","Control.Comonad.Env.Trans":"purescript-transformers","Global":"purescript-globals","Control.Monad.Reader.Class":"purescript-transformers","Data.Monoid.Multiplicative":"purescript-monoid","Data.Array.ST":"purescript-arrays","Control.Monad.Error.Class":"purescript-transformers","Data.Generic.Rep.Monoid":"purescript-generics-rep","Control.Semigroupoid":"purescript-prelude","Data.Monoid.Alternate":"purescript-monoid","Data.Char":"purescript-strings","Data.Generic.Rep":"purescript-generics-rep","Data.Bifunctor.Join":"purescript-bifunctors","Control.Monad.Eff.Exception.Unsafe":"purescript-exceptions","Data.Bifoldable":"purescript-foldable-traversable","Data.Monoid.Endo":"purescript-monoid","Control.Monad.State":"purescript-transformers","Data.List.Partial":"purescript-lists","Data.String.Regex.Flags":"purescript-strings","Data.Either":"purescript-either","Control.Applicative":"purescript-prelude","Data.FoldableWithIndex":"purescript-foldable-traversable","Test.QuickCheck.Gen":"purescript-quickcheck","Control.Monad.Writer":"purescript-transformers","Data.Matrix4":"purescript-matrix","Data.Traversable":"purescript-foldable-traversable","Data.String.Gen":"purescript-strings"},"compilerVersion":"0.11.4"}