{"uploader":"hdgarrood","packageMeta":{"homepage":"https://github.com/purescript/purescript-quickcheck","repository":{"url":"git://github.com/purescript/purescript-quickcheck.git","type":"git"},"ignore":["**/.*","bower_components","node_modules","output","test","bower.json","package.json"],"authors":[{"homepage":"http://degoes.net","email":"john@degoes.net","name":"John A. De Goes"},{"email":"freeman.phil@gmail.com","name":"Phil Freeman"}],"dependencies":{"purescript-exceptions":"^3.0.0","purescript-console":"^3.0.0","purescript-either":"^3.0.0","purescript-arrays":"^4.0.0","purescript-gen":"^1.0.0","purescript-nonempty":"^4.0.0","purescript-transformers":"^3.0.0","purescript-enums":"^3.0.0","purescript-random":"^3.0.0","purescript-partial":"^1.2.0","purescript-strings":"^3.0.0","purescript-lists":"^4.0.0"},"name":"purescript-quickcheck","license":["MIT"]},"tagTime":"2017-05-28T10:20:39+0000","modules":[{"reExports":[{"moduleName":{"package":null,"item":["Test","QuickCheck","Arbitrary"]},"declarations":[{"children":[{"comments":null,"title":"arbitrary","info":{"declType":"typeClassMember","type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Test","QuickCheck","Gen"],"Gen"]},{"tag":"TypeVar","contents":"t"}]}},"sourceSpan":null},{"comments":null,"title":"arbBoolean","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Test","QuickCheck","Arbitrary"],"Arbitrary"]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}},"sourceSpan":{"start":[49,1],"name":"/tmp/tmp.GUqlBBaMMz/src/Test/QuickCheck/Arbitrary.purs","end":[50,25]}},{"comments":null,"title":"arbNumber","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Test","QuickCheck","Arbitrary"],"Arbitrary"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]}},"sourceSpan":{"start":[56,1],"name":"/tmp/tmp.GUqlBBaMMz/src/Test/QuickCheck/Arbitrary.purs","end":[57,22]}},{"comments":null,"title":"arbInt","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Test","QuickCheck","Arbitrary"],"Arbitrary"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}},"sourceSpan":{"start":[62,1],"name":"/tmp/tmp.GUqlBBaMMz/src/Test/QuickCheck/Arbitrary.purs","end":[65,1]}},{"comments":null,"title":"arbString","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Test","QuickCheck","Arbitrary"],"Arbitrary"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}},"sourceSpan":{"start":[68,1],"name":"/tmp/tmp.GUqlBBaMMz/src/Test/QuickCheck/Arbitrary.purs","end":[69,42]}},{"comments":null,"title":"arbChar","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Test","QuickCheck","Arbitrary"],"Arbitrary"]},{"tag":"TypeConstructor","contents":[["Prim"],"Char"]}]}},"sourceSpan":{"start":[74,1],"name":"/tmp/tmp.GUqlBBaMMz/src/Test/QuickCheck/Arbitrary.purs","end":[77,1]}},{"comments":null,"title":"arbUnit","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Test","QuickCheck","Arbitrary"],"Arbitrary"]},{"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}},"sourceSpan":{"start":[80,1],"name":"/tmp/tmp.GUqlBBaMMz/src/Test/QuickCheck/Arbitrary.purs","end":[81,24]}},{"comments":null,"title":"arbOrdering","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Test","QuickCheck","Arbitrary"],"Arbitrary"]},{"tag":"TypeConstructor","contents":[["Data","Ordering"],"Ordering"]}]}},"sourceSpan":{"start":[86,1],"name":"/tmp/tmp.GUqlBBaMMz/src/Test/QuickCheck/Arbitrary.purs","end":[87,40]}},{"comments":null,"title":"arbArray","info":{"declType":"instance","dependencies":[{"constraintClass":[["Test","QuickCheck","Arbitrary"],"Arbitrary"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Test","QuickCheck","Arbitrary"],"Arbitrary"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[94,1],"name":"/tmp/tmp.GUqlBBaMMz/src/Test/QuickCheck/Arbitrary.purs","end":[95,32]}},{"comments":null,"title":"arbFunction","info":{"declType":"instance","dependencies":[{"constraintClass":[["Test","QuickCheck","Arbitrary"],"Coarbitrary"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"constraintClass":[["Test","QuickCheck","Arbitrary"],"Arbitrary"],"constraintArgs":[{"tag":"TypeVar","contents":"b"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Test","QuickCheck","Arbitrary"],"Arbitrary"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}},"sourceSpan":{"start":[100,1],"name":"/tmp/tmp.GUqlBBaMMz/src/Test/QuickCheck/Arbitrary.purs","end":[101,57]}},{"comments":null,"title":"arbTuple","info":{"declType":"instance","dependencies":[{"constraintClass":[["Test","QuickCheck","Arbitrary"],"Arbitrary"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"constraintClass":[["Test","QuickCheck","Arbitrary"],"Arbitrary"],"constraintArgs":[{"tag":"TypeVar","contents":"b"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Test","QuickCheck","Arbitrary"],"Arbitrary"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Tuple"],"Tuple"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}},"sourceSpan":{"start":[108,1],"name":"/tmp/tmp.GUqlBBaMMz/src/Test/QuickCheck/Arbitrary.purs","end":[109,48]}},{"comments":null,"title":"arbMaybe","info":{"declType":"instance","dependencies":[{"constraintClass":[["Test","QuickCheck","Arbitrary"],"Arbitrary"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Test","QuickCheck","Arbitrary"],"Arbitrary"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[114,1],"name":"/tmp/tmp.GUqlBBaMMz/src/Test/QuickCheck/Arbitrary.purs","end":[115,37]}},{"comments":null,"title":"arbEither","info":{"declType":"instance","dependencies":[{"constraintClass":[["Test","QuickCheck","Arbitrary"],"Arbitrary"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"constraintClass":[["Test","QuickCheck","Arbitrary"],"Arbitrary"],"constraintArgs":[{"tag":"TypeVar","contents":"b"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Test","QuickCheck","Arbitrary"],"Arbitrary"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Either"],"Either"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}},"sourceSpan":{"start":[121,1],"name":"/tmp/tmp.GUqlBBaMMz/src/Test/QuickCheck/Arbitrary.purs","end":[122,48]}},{"comments":null,"title":"arbitraryList","info":{"declType":"instance","dependencies":[{"constraintClass":[["Test","QuickCheck","Arbitrary"],"Arbitrary"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Test","QuickCheck","Arbitrary"],"Arbitrary"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","List","Types"],"List"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[128,1],"name":"/tmp/tmp.GUqlBBaMMz/src/Test/QuickCheck/Arbitrary.purs","end":[129,69]}},{"comments":null,"title":"arbitraryIdentity","info":{"declType":"instance","dependencies":[{"constraintClass":[["Test","QuickCheck","Arbitrary"],"Arbitrary"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Test","QuickCheck","Arbitrary"],"Arbitrary"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Identity"],"Identity"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[134,1],"name":"/tmp/tmp.GUqlBBaMMz/src/Test/QuickCheck/Arbitrary.purs","end":[135,37]}},{"comments":null,"title":"arbitraryLazy","info":{"declType":"instance","dependencies":[{"constraintClass":[["Test","QuickCheck","Arbitrary"],"Arbitrary"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Test","QuickCheck","Arbitrary"],"Arbitrary"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Lazy"],"Lazy"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[140,1],"name":"/tmp/tmp.GUqlBBaMMz/src/Test/QuickCheck/Arbitrary.purs","end":[141,53]}},{"comments":null,"title":"arbNonEmpty","info":{"declType":"instance","dependencies":[{"constraintClass":[["Test","QuickCheck","Arbitrary"],"Arbitrary"],"constraintArgs":[{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}}],"constraintData":null},{"constraintClass":[["Test","QuickCheck","Arbitrary"],"Arbitrary"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Test","QuickCheck","Arbitrary"],"Arbitrary"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","NonEmpty"],"NonEmpty"]},{"tag":"TypeVar","contents":"f"}]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[146,1],"name":"/tmp/tmp.GUqlBBaMMz/src/Test/QuickCheck/Arbitrary.purs","end":[147,51]}},{"comments":null,"title":"arbNonEmptyList","info":{"declType":"instance","dependencies":[{"constraintClass":[["Test","QuickCheck","Arbitrary"],"Arbitrary"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Test","QuickCheck","Arbitrary"],"Arbitrary"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","List","Types"],"NonEmptyList"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[152,1],"name":"/tmp/tmp.GUqlBBaMMz/src/Test/QuickCheck/Arbitrary.purs","end":[153,41]}}],"comments":"The `Arbitrary` class represents those types whose values can be\n_randomly-generated_.\n\n`arbitrary` uses the `Gen` monad to express a random generator for\nthe type `t`. Combinators in the `Test.QuickCheck.Gen`\nmodule can be used to construct random generators.\n","title":"Arbitrary","info":{"fundeps":[],"arguments":[["t",null]],"declType":"typeClass","superclasses":[]},"sourceSpan":{"start":[35,1],"name":"/tmp/tmp.GUqlBBaMMz/src/Test/QuickCheck/Arbitrary.purs","end":[36,21]}},{"children":[{"comments":null,"title":"coarbitrary","info":{"declType":"typeClassMember","type":{"tag":"ForAll","contents":["r",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"t"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Test","QuickCheck","Gen"],"Gen"]},{"tag":"TypeVar","contents":"r"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Test","QuickCheck","Gen"],"Gen"]},{"tag":"TypeVar","contents":"r"}]}]}]},null]}},"sourceSpan":null},{"comments":null,"title":"coarbBoolean","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Test","QuickCheck","Arbitrary"],"Coarbitrary"]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}},"sourceSpan":{"start":[52,1],"name":"/tmp/tmp.GUqlBBaMMz/src/Test/QuickCheck/Arbitrary.purs","end":[56,1]}},{"comments":null,"title":"coarbNumber","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Test","QuickCheck","Arbitrary"],"Coarbitrary"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]}},"sourceSpan":{"start":[59,1],"name":"/tmp/tmp.GUqlBBaMMz/src/Test/QuickCheck/Arbitrary.purs","end":[60,27]}},{"comments":null,"title":"coarbInt","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Test","QuickCheck","Arbitrary"],"Coarbitrary"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}},"sourceSpan":{"start":[65,1],"name":"/tmp/tmp.GUqlBBaMMz/src/Test/QuickCheck/Arbitrary.purs","end":[66,40]}},{"comments":null,"title":"coarbString","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Test","QuickCheck","Arbitrary"],"Coarbitrary"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}},"sourceSpan":{"start":[71,1],"name":"/tmp/tmp.GUqlBBaMMz/src/Test/QuickCheck/Arbitrary.purs","end":[72,72]}},{"comments":null,"title":"coarbChar","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Test","QuickCheck","Arbitrary"],"Coarbitrary"]},{"tag":"TypeConstructor","contents":[["Prim"],"Char"]}]}},"sourceSpan":{"start":[77,1],"name":"/tmp/tmp.GUqlBBaMMz/src/Test/QuickCheck/Arbitrary.purs","end":[78,45]}},{"comments":null,"title":"coarbUnit","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Test","QuickCheck","Arbitrary"],"Coarbitrary"]},{"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}},"sourceSpan":{"start":[83,1],"name":"/tmp/tmp.GUqlBBaMMz/src/Test/QuickCheck/Arbitrary.purs","end":[86,1]}},{"comments":null,"title":"coarbOrdering","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Test","QuickCheck","Arbitrary"],"Coarbitrary"]},{"tag":"TypeConstructor","contents":[["Data","Ordering"],"Ordering"]}]}},"sourceSpan":{"start":[89,1],"name":"/tmp/tmp.GUqlBBaMMz/src/Test/QuickCheck/Arbitrary.purs","end":[94,1]}},{"comments":null,"title":"coarbArray","info":{"declType":"instance","dependencies":[{"constraintClass":[["Test","QuickCheck","Arbitrary"],"Coarbitrary"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Test","QuickCheck","Arbitrary"],"Coarbitrary"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[97,1],"name":"/tmp/tmp.GUqlBBaMMz/src/Test/QuickCheck/Arbitrary.purs","end":[98,55]}},{"comments":null,"title":"coarbFunction","info":{"declType":"instance","dependencies":[{"constraintClass":[["Test","QuickCheck","Arbitrary"],"Arbitrary"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"constraintClass":[["Test","QuickCheck","Arbitrary"],"Coarbitrary"],"constraintArgs":[{"tag":"TypeVar","contents":"b"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Test","QuickCheck","Arbitrary"],"Coarbitrary"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}},"sourceSpan":{"start":[103,1],"name":"/tmp/tmp.GUqlBBaMMz/src/Test/QuickCheck/Arbitrary.purs","end":[106,44]}},{"comments":null,"title":"coarbTuple","info":{"declType":"instance","dependencies":[{"constraintClass":[["Test","QuickCheck","Arbitrary"],"Coarbitrary"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"constraintClass":[["Test","QuickCheck","Arbitrary"],"Coarbitrary"],"constraintArgs":[{"tag":"TypeVar","contents":"b"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Test","QuickCheck","Arbitrary"],"Coarbitrary"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Tuple"],"Tuple"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}},"sourceSpan":{"start":[111,1],"name":"/tmp/tmp.GUqlBBaMMz/src/Test/QuickCheck/Arbitrary.purs","end":[112,60]}},{"comments":null,"title":"coarbMaybe","info":{"declType":"instance","dependencies":[{"constraintClass":[["Test","QuickCheck","Arbitrary"],"Coarbitrary"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Test","QuickCheck","Arbitrary"],"Coarbitrary"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[117,1],"name":"/tmp/tmp.GUqlBBaMMz/src/Test/QuickCheck/Arbitrary.purs","end":[119,39]}},{"comments":null,"title":"coarbEither","info":{"declType":"instance","dependencies":[{"constraintClass":[["Test","QuickCheck","Arbitrary"],"Coarbitrary"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"constraintClass":[["Test","QuickCheck","Arbitrary"],"Coarbitrary"],"constraintArgs":[{"tag":"TypeVar","contents":"b"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Test","QuickCheck","Arbitrary"],"Coarbitrary"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Either"],"Either"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}},"sourceSpan":{"start":[124,1],"name":"/tmp/tmp.GUqlBBaMMz/src/Test/QuickCheck/Arbitrary.purs","end":[126,40]}},{"comments":null,"title":"coarbList","info":{"declType":"instance","dependencies":[{"constraintClass":[["Test","QuickCheck","Arbitrary"],"Coarbitrary"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Test","QuickCheck","Arbitrary"],"Coarbitrary"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","List","Types"],"List"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[131,1],"name":"/tmp/tmp.GUqlBBaMMz/src/Test/QuickCheck/Arbitrary.purs","end":[132,55]}},{"comments":null,"title":"coarbIdentity","info":{"declType":"instance","dependencies":[{"constraintClass":[["Test","QuickCheck","Arbitrary"],"Coarbitrary"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Test","QuickCheck","Arbitrary"],"Coarbitrary"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Identity"],"Identity"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[137,1],"name":"/tmp/tmp.GUqlBBaMMz/src/Test/QuickCheck/Arbitrary.purs","end":[138,43]}},{"comments":null,"title":"coarbLazy","info":{"declType":"instance","dependencies":[{"constraintClass":[["Test","QuickCheck","Arbitrary"],"Coarbitrary"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Test","QuickCheck","Arbitrary"],"Coarbitrary"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Lazy"],"Lazy"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[143,1],"name":"/tmp/tmp.GUqlBBaMMz/src/Test/QuickCheck/Arbitrary.purs","end":[144,40]}},{"comments":null,"title":"coarbNonEmpty","info":{"declType":"instance","dependencies":[{"constraintClass":[["Test","QuickCheck","Arbitrary"],"Coarbitrary"],"constraintArgs":[{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}}],"constraintData":null},{"constraintClass":[["Test","QuickCheck","Arbitrary"],"Coarbitrary"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Test","QuickCheck","Arbitrary"],"Coarbitrary"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","NonEmpty"],"NonEmpty"]},{"tag":"TypeVar","contents":"f"}]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[149,1],"name":"/tmp/tmp.GUqlBBaMMz/src/Test/QuickCheck/Arbitrary.purs","end":[150,75]}},{"comments":null,"title":"coarbNonEmptyList","info":{"declType":"instance","dependencies":[{"constraintClass":[["Test","QuickCheck","Arbitrary"],"Coarbitrary"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Test","QuickCheck","Arbitrary"],"Coarbitrary"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","List","Types"],"NonEmptyList"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[155,1],"name":"/tmp/tmp.GUqlBBaMMz/src/Test/QuickCheck/Arbitrary.purs","end":[156,48]}}],"comments":"The `Coarbitrary` class represents types which appear on the left of\nan `Arbitrary` function arrow.\n\nTo construct an `Arbitrary` instance for the type `a -> b`, we need to\nuse the input of type `a` to _perturb_ a random generator for `b`. This\nis the role of the `coarbitrary` function.\n\n`Coarbitrary` instances can be written using the `perturbGen` function.\n","title":"Coarbitrary","info":{"fundeps":[],"arguments":[["t",null]],"declType":"typeClass","superclasses":[]},"sourceSpan":{"start":[46,1],"name":"/tmp/tmp.GUqlBBaMMz/src/Test/QuickCheck/Arbitrary.purs","end":[47,47]}}]},{"moduleName":{"package":null,"item":["Test","QuickCheck","LCG"]},"declarations":[{"children":[{"comments":null,"title":"showSeed","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Show"],"Show"]},{"tag":"TypeConstructor","contents":[["Test","QuickCheck","LCG"],"Seed"]}]}},"sourceSpan":{"start":[82,1],"name":"/tmp/tmp.GUqlBBaMMz/src/Test/QuickCheck/LCG.purs","end":[83,36]}},{"comments":null,"title":"eqSeed","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Eq"],"Eq"]},{"tag":"TypeConstructor","contents":[["Test","QuickCheck","LCG"],"Seed"]}]}},"sourceSpan":{"start":[85,1],"name":"/tmp/tmp.GUqlBBaMMz/src/Test/QuickCheck/LCG.purs","end":[86,31]}}],"comments":"A seed for the linear congruential generator. We omit a `Semiring`\ninstance because there is no `zero` value, as 0 is not an acceptable\nseed for the generator.\n","title":"Seed","info":{"declType":"data","dataDeclType":"newtype","typeArguments":[]},"sourceSpan":{"start":[66,1],"name":"/tmp/tmp.GUqlBBaMMz/src/Test/QuickCheck/LCG.purs","end":[66,24]}},{"children":[],"comments":null,"title":"runSeed","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Test","QuickCheck","LCG"],"Seed"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}},"sourceSpan":{"start":[71,1],"name":"/tmp/tmp.GUqlBBaMMz/src/Test/QuickCheck/LCG.purs","end":[71,23]}},{"children":[],"comments":"Create a random seed\n","title":"randomSeed","info":{"declType":"value","type":{"tag":"ForAll","contents":["e",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad","Eff"],"Eff"]},{"tag":"RCons","contents":["random",{"tag":"TypeConstructor","contents":[["Control","Monad","Eff","Random"],"RANDOM"]},{"tag":"TypeVar","contents":"e"}]}]},{"tag":"TypeConstructor","contents":[["Test","QuickCheck","LCG"],"Seed"]}]},null]}},"sourceSpan":{"start":[52,1],"name":"/tmp/tmp.GUqlBBaMMz/src/Test/QuickCheck/LCG.purs","end":[52,56]}}]}],"name":"Test.QuickCheck","comments":"This module is a partial port of the Haskell QuickCheck library.\n\nQuickCheck provides a way to write _property-based_ tests.\n\nThe `Arbitrary` and `CoArbitrary` type classes allow us to create\nrandom data with which we can run our tests. This module provides\ninstances of both classes for PureScript's core data structures,\nas well as functions for writing new instances.\n\nTest suites can use the `quickCheck` and `quickCheckPure` functions\nto test properties.\n\nFor example:\n\n```purescript\nmain = quickCheck \\n -> n + 1 > n\n```\n","declarations":[{"children":[],"comments":"A type synonym which represents the effects used by the `quickCheck` function.\n","title":"QC","info":{"arguments":[["eff",null],["a",null]],"declType":"typeSynonym","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad","Eff"],"Eff"]},{"tag":"RCons","contents":["console",{"tag":"TypeConstructor","contents":[["Control","Monad","Eff","Console"],"CONSOLE"]},{"tag":"RCons","contents":["random",{"tag":"TypeConstructor","contents":[["Control","Monad","Eff","Random"],"RANDOM"]},{"tag":"RCons","contents":["exception",{"tag":"TypeConstructor","contents":[["Control","Monad","Eff","Exception"],"EXCEPTION"]},{"tag":"TypeVar","contents":"eff"}]}]}]}]},{"tag":"TypeVar","contents":"a"}]}},"sourceSpan":{"start":[58,1],"name":"/tmp/tmp.GUqlBBaMMz/src/Test/QuickCheck.purs","end":[58,91]}},{"children":[],"comments":"Test a property.\n\nThis function generates a new random seed, runs 100 tests and\nprints the test results to the console.\n","title":"quickCheck","info":{"declType":"value","type":{"tag":"ForAll","contents":["prop",{"tag":"ForAll","contents":["eff",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Test","QuickCheck"],"Testable"],"constraintArgs":[{"tag":"TypeVar","contents":"prop"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"prop"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Test","QuickCheck"],"QC"]},{"tag":"TypeVar","contents":"eff"}]},{"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}]}]},null]},null]}},"sourceSpan":{"start":[64,1],"name":"/tmp/tmp.GUqlBBaMMz/src/Test/QuickCheck.purs","end":[64,68]}},{"children":[],"comments":"A variant of the `quickCheck` function which accepts an extra parameter\nrepresenting the number of tests which should be run.\n","title":"quickCheck'","info":{"declType":"value","type":{"tag":"ForAll","contents":["prop",{"tag":"ForAll","contents":["eff",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Test","QuickCheck"],"Testable"],"constraintArgs":[{"tag":"TypeVar","contents":"prop"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"prop"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Test","QuickCheck"],"QC"]},{"tag":"TypeVar","contents":"eff"}]},{"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}]}]}]},null]},null]}},"sourceSpan":{"start":[69,1],"name":"/tmp/tmp.GUqlBBaMMz/src/Test/QuickCheck.purs","end":[69,76]}},{"children":[],"comments":"A variant of the `quickCheck'` function that accepts a specific seed as\nwell as the number tests that should be run.\n","title":"quickCheckWithSeed","info":{"declType":"value","type":{"tag":"ForAll","contents":["prop",{"tag":"ForAll","contents":["eff",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Test","QuickCheck"],"Testable"],"constraintArgs":[{"tag":"TypeVar","contents":"prop"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Test","QuickCheck","LCG"],"Seed"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"prop"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Test","QuickCheck"],"QC"]},{"tag":"TypeVar","contents":"eff"}]},{"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}]}]}]}]},null]},null]}},"sourceSpan":{"start":[76,1],"name":"/tmp/tmp.GUqlBBaMMz/src/Test/QuickCheck.purs","end":[77,74]}},{"children":[],"comments":"Test a property, returning all test results as an array.\n\nThe first argument is the _random seed_ to be passed to the random generator.\nThe second argument is the number of tests to run.\n","title":"quickCheckPure","info":{"declType":"value","type":{"tag":"ForAll","contents":["prop",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Test","QuickCheck"],"Testable"],"constraintArgs":[{"tag":"TypeVar","contents":"prop"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Test","QuickCheck","LCG"],"Seed"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"prop"}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","List","Types"],"List"]},{"tag":"TypeConstructor","contents":[["Test","QuickCheck"],"Result"]}]}]}]}]}]},null]}},"sourceSpan":{"start":[119,1],"name":"/tmp/tmp.GUqlBBaMMz/src/Test/QuickCheck.purs","end":[119,83]}},{"children":[{"comments":null,"title":"test","info":{"declType":"typeClassMember","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"prop"}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Test","QuickCheck","Gen"],"Gen"]},{"tag":"TypeConstructor","contents":[["Test","QuickCheck"],"Result"]}]}]}},"sourceSpan":null},{"comments":null,"title":"testableResult","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Test","QuickCheck"],"Testable"]},{"tag":"TypeConstructor","contents":[["Test","QuickCheck"],"Result"]}]}},"sourceSpan":{"start":[131,1],"name":"/tmp/tmp.GUqlBBaMMz/src/Test/QuickCheck.purs","end":[132,14]}},{"comments":null,"title":"testableBoolean","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Test","QuickCheck"],"Testable"]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}},"sourceSpan":{"start":[134,1],"name":"/tmp/tmp.GUqlBBaMMz/src/Test/QuickCheck.purs","end":[138,1]}},{"comments":null,"title":"testableFunction","info":{"declType":"instance","dependencies":[{"constraintClass":[["Test","QuickCheck","Arbitrary"],"Arbitrary"],"constraintArgs":[{"tag":"TypeVar","contents":"t"}],"constraintData":null},{"constraintClass":[["Test","QuickCheck"],"Testable"],"constraintArgs":[{"tag":"TypeVar","contents":"prop"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Test","QuickCheck"],"Testable"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"t"}]},{"tag":"TypeVar","contents":"prop"}]}}]}},"sourceSpan":{"start":[138,1],"name":"/tmp/tmp.GUqlBBaMMz/src/Test/QuickCheck.purs","end":[139,36]}},{"comments":null,"title":"testableGen","info":{"declType":"instance","dependencies":[{"constraintClass":[["Test","QuickCheck"],"Testable"],"constraintArgs":[{"tag":"TypeVar","contents":"prop"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Test","QuickCheck"],"Testable"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Test","QuickCheck","Gen"],"Gen"]},{"tag":"TypeVar","contents":"prop"}]}}]}},"sourceSpan":{"start":[141,1],"name":"/tmp/tmp.GUqlBBaMMz/src/Test/QuickCheck.purs","end":[142,24]}}],"comments":"The `Testable` class represents _testable properties_.\n\nA testable property is a function of zero or more `Arbitrary` arguments,\nreturning a `Boolean` or `Result`.\n\nTestable properties can be passed to the `quickCheck` function.\n","title":"Testable","info":{"fundeps":[],"arguments":[["prop",null]],"declType":"typeClass","superclasses":[]},"sourceSpan":{"start":[128,1],"name":"/tmp/tmp.GUqlBBaMMz/src/Test/QuickCheck.purs","end":[129,29]}},{"children":[{"comments":null,"title":"Success","info":{"arguments":[],"declType":"dataConstructor"},"sourceSpan":null},{"comments":null,"title":"Failed","info":{"arguments":[{"tag":"TypeConstructor","contents":[["Prim"],"String"]}],"declType":"dataConstructor"},"sourceSpan":null},{"comments":null,"title":"testableResult","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Test","QuickCheck"],"Testable"]},{"tag":"TypeConstructor","contents":[["Test","QuickCheck"],"Result"]}]}},"sourceSpan":{"start":[131,1],"name":"/tmp/tmp.GUqlBBaMMz/src/Test/QuickCheck.purs","end":[132,14]}},{"comments":null,"title":"showResult","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Show"],"Show"]},{"tag":"TypeConstructor","contents":[["Test","QuickCheck"],"Result"]}]}},"sourceSpan":{"start":[147,1],"name":"/tmp/tmp.GUqlBBaMMz/src/Test/QuickCheck.purs","end":[149,40]}}],"comments":"The result of a test: success or failure (with an error message).\n","title":"Result","info":{"declType":"data","dataDeclType":"data","typeArguments":[]},"sourceSpan":{"start":[145,1],"name":"/tmp/tmp.GUqlBBaMMz/src/Test/QuickCheck.purs","end":[145,38]}},{"children":[],"comments":"This operator attaches an error message to a failed test.\n\nFor example:\n\n```purescript\ntest x = myProperty x <?> (\"myProperty did not hold for \" <> show x)\n```\n","title":"withHelp","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeConstructor","contents":[["Test","QuickCheck"],"Result"]}]}]}},"sourceSpan":{"start":[158,1],"name":"/tmp/tmp.GUqlBBaMMz/src/Test/QuickCheck.purs","end":[158,40]}},{"children":[],"comments":null,"title":"(<?>)","info":{"declType":"alias","alias":[["Test","QuickCheck"],{"Right":{"Left":{"Ident":"withHelp"}}}],"fixity":{"associativity":"infix","precedence":2}},"sourceSpan":{"start":[162,1],"name":"/tmp/tmp.GUqlBBaMMz/src/Test/QuickCheck.purs","end":[162,24]}},{"children":[],"comments":"Self-documenting equality assertion\n","title":"assertEquals","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Eq"],"Eq"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Show"],"Show"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeConstructor","contents":[["Test","QuickCheck"],"Result"]}]}]}]}]},null]}},"sourceSpan":{"start":[165,1],"name":"/tmp/tmp.GUqlBBaMMz/src/Test/QuickCheck.purs","end":[165,61]}},{"children":[],"comments":null,"title":"(===)","info":{"declType":"alias","alias":[["Test","QuickCheck"],{"Right":{"Left":{"Ident":"assertEquals"}}}],"fixity":{"associativity":"infix","precedence":2}},"sourceSpan":{"start":[168,1],"name":"/tmp/tmp.GUqlBBaMMz/src/Test/QuickCheck.purs","end":[168,28]}},{"children":[],"comments":"Self-documenting inequality assertion\n","title":"assertNotEquals","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Eq"],"Eq"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Show"],"Show"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeConstructor","contents":[["Test","QuickCheck"],"Result"]}]}]}]}]},null]}},"sourceSpan":{"start":[171,1],"name":"/tmp/tmp.GUqlBBaMMz/src/Test/QuickCheck.purs","end":[171,64]}},{"children":[],"comments":null,"title":"(/==)","info":{"declType":"alias","alias":[["Test","QuickCheck"],{"Right":{"Left":{"Ident":"assertNotEquals"}}}],"fixity":{"associativity":"infix","precedence":2}},"sourceSpan":{"start":[174,1],"name":"/tmp/tmp.GUqlBBaMMz/src/Test/QuickCheck.purs","end":[174,28]}}]},{"reExports":[],"name":"Test.QuickCheck.Arbitrary","comments":null,"declarations":[{"children":[{"comments":null,"title":"arbitrary","info":{"declType":"typeClassMember","type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Test","QuickCheck","Gen"],"Gen"]},{"tag":"TypeVar","contents":"t"}]}},"sourceSpan":null},{"comments":null,"title":"arbBoolean","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Test","QuickCheck","Arbitrary"],"Arbitrary"]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}},"sourceSpan":{"start":[49,1],"name":"/tmp/tmp.GUqlBBaMMz/src/Test/QuickCheck/Arbitrary.purs","end":[50,25]}},{"comments":null,"title":"arbNumber","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Test","QuickCheck","Arbitrary"],"Arbitrary"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]}},"sourceSpan":{"start":[56,1],"name":"/tmp/tmp.GUqlBBaMMz/src/Test/QuickCheck/Arbitrary.purs","end":[57,22]}},{"comments":null,"title":"arbInt","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Test","QuickCheck","Arbitrary"],"Arbitrary"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}},"sourceSpan":{"start":[62,1],"name":"/tmp/tmp.GUqlBBaMMz/src/Test/QuickCheck/Arbitrary.purs","end":[65,1]}},{"comments":null,"title":"arbString","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Test","QuickCheck","Arbitrary"],"Arbitrary"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}},"sourceSpan":{"start":[68,1],"name":"/tmp/tmp.GUqlBBaMMz/src/Test/QuickCheck/Arbitrary.purs","end":[69,42]}},{"comments":null,"title":"arbChar","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Test","QuickCheck","Arbitrary"],"Arbitrary"]},{"tag":"TypeConstructor","contents":[["Prim"],"Char"]}]}},"sourceSpan":{"start":[74,1],"name":"/tmp/tmp.GUqlBBaMMz/src/Test/QuickCheck/Arbitrary.purs","end":[77,1]}},{"comments":null,"title":"arbUnit","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Test","QuickCheck","Arbitrary"],"Arbitrary"]},{"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}},"sourceSpan":{"start":[80,1],"name":"/tmp/tmp.GUqlBBaMMz/src/Test/QuickCheck/Arbitrary.purs","end":[81,24]}},{"comments":null,"title":"arbOrdering","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Test","QuickCheck","Arbitrary"],"Arbitrary"]},{"tag":"TypeConstructor","contents":[["Data","Ordering"],"Ordering"]}]}},"sourceSpan":{"start":[86,1],"name":"/tmp/tmp.GUqlBBaMMz/src/Test/QuickCheck/Arbitrary.purs","end":[87,40]}},{"comments":null,"title":"arbArray","info":{"declType":"instance","dependencies":[{"constraintClass":[["Test","QuickCheck","Arbitrary"],"Arbitrary"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Test","QuickCheck","Arbitrary"],"Arbitrary"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[94,1],"name":"/tmp/tmp.GUqlBBaMMz/src/Test/QuickCheck/Arbitrary.purs","end":[95,32]}},{"comments":null,"title":"arbFunction","info":{"declType":"instance","dependencies":[{"constraintClass":[["Test","QuickCheck","Arbitrary"],"Coarbitrary"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"constraintClass":[["Test","QuickCheck","Arbitrary"],"Arbitrary"],"constraintArgs":[{"tag":"TypeVar","contents":"b"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Test","QuickCheck","Arbitrary"],"Arbitrary"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}},"sourceSpan":{"start":[100,1],"name":"/tmp/tmp.GUqlBBaMMz/src/Test/QuickCheck/Arbitrary.purs","end":[101,57]}},{"comments":null,"title":"arbTuple","info":{"declType":"instance","dependencies":[{"constraintClass":[["Test","QuickCheck","Arbitrary"],"Arbitrary"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"constraintClass":[["Test","QuickCheck","Arbitrary"],"Arbitrary"],"constraintArgs":[{"tag":"TypeVar","contents":"b"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Test","QuickCheck","Arbitrary"],"Arbitrary"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Tuple"],"Tuple"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}},"sourceSpan":{"start":[108,1],"name":"/tmp/tmp.GUqlBBaMMz/src/Test/QuickCheck/Arbitrary.purs","end":[109,48]}},{"comments":null,"title":"arbMaybe","info":{"declType":"instance","dependencies":[{"constraintClass":[["Test","QuickCheck","Arbitrary"],"Arbitrary"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Test","QuickCheck","Arbitrary"],"Arbitrary"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[114,1],"name":"/tmp/tmp.GUqlBBaMMz/src/Test/QuickCheck/Arbitrary.purs","end":[115,37]}},{"comments":null,"title":"arbEither","info":{"declType":"instance","dependencies":[{"constraintClass":[["Test","QuickCheck","Arbitrary"],"Arbitrary"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"constraintClass":[["Test","QuickCheck","Arbitrary"],"Arbitrary"],"constraintArgs":[{"tag":"TypeVar","contents":"b"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Test","QuickCheck","Arbitrary"],"Arbitrary"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Either"],"Either"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}},"sourceSpan":{"start":[121,1],"name":"/tmp/tmp.GUqlBBaMMz/src/Test/QuickCheck/Arbitrary.purs","end":[122,48]}},{"comments":null,"title":"arbitraryList","info":{"declType":"instance","dependencies":[{"constraintClass":[["Test","QuickCheck","Arbitrary"],"Arbitrary"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Test","QuickCheck","Arbitrary"],"Arbitrary"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","List","Types"],"List"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[128,1],"name":"/tmp/tmp.GUqlBBaMMz/src/Test/QuickCheck/Arbitrary.purs","end":[129,69]}},{"comments":null,"title":"arbitraryIdentity","info":{"declType":"instance","dependencies":[{"constraintClass":[["Test","QuickCheck","Arbitrary"],"Arbitrary"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Test","QuickCheck","Arbitrary"],"Arbitrary"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Identity"],"Identity"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[134,1],"name":"/tmp/tmp.GUqlBBaMMz/src/Test/QuickCheck/Arbitrary.purs","end":[135,37]}},{"comments":null,"title":"arbitraryLazy","info":{"declType":"instance","dependencies":[{"constraintClass":[["Test","QuickCheck","Arbitrary"],"Arbitrary"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Test","QuickCheck","Arbitrary"],"Arbitrary"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Lazy"],"Lazy"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[140,1],"name":"/tmp/tmp.GUqlBBaMMz/src/Test/QuickCheck/Arbitrary.purs","end":[141,53]}},{"comments":null,"title":"arbNonEmpty","info":{"declType":"instance","dependencies":[{"constraintClass":[["Test","QuickCheck","Arbitrary"],"Arbitrary"],"constraintArgs":[{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}}],"constraintData":null},{"constraintClass":[["Test","QuickCheck","Arbitrary"],"Arbitrary"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Test","QuickCheck","Arbitrary"],"Arbitrary"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","NonEmpty"],"NonEmpty"]},{"tag":"TypeVar","contents":"f"}]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[146,1],"name":"/tmp/tmp.GUqlBBaMMz/src/Test/QuickCheck/Arbitrary.purs","end":[147,51]}},{"comments":null,"title":"arbNonEmptyList","info":{"declType":"instance","dependencies":[{"constraintClass":[["Test","QuickCheck","Arbitrary"],"Arbitrary"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Test","QuickCheck","Arbitrary"],"Arbitrary"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","List","Types"],"NonEmptyList"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[152,1],"name":"/tmp/tmp.GUqlBBaMMz/src/Test/QuickCheck/Arbitrary.purs","end":[153,41]}}],"comments":"The `Arbitrary` class represents those types whose values can be\n_randomly-generated_.\n\n`arbitrary` uses the `Gen` monad to express a random generator for\nthe type `t`. Combinators in the `Test.QuickCheck.Gen`\nmodule can be used to construct random generators.\n","title":"Arbitrary","info":{"fundeps":[],"arguments":[["t",null]],"declType":"typeClass","superclasses":[]},"sourceSpan":{"start":[35,1],"name":"/tmp/tmp.GUqlBBaMMz/src/Test/QuickCheck/Arbitrary.purs","end":[36,21]}},{"children":[{"comments":null,"title":"coarbitrary","info":{"declType":"typeClassMember","type":{"tag":"ForAll","contents":["r",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"t"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Test","QuickCheck","Gen"],"Gen"]},{"tag":"TypeVar","contents":"r"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Test","QuickCheck","Gen"],"Gen"]},{"tag":"TypeVar","contents":"r"}]}]}]},null]}},"sourceSpan":null},{"comments":null,"title":"coarbBoolean","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Test","QuickCheck","Arbitrary"],"Coarbitrary"]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}},"sourceSpan":{"start":[52,1],"name":"/tmp/tmp.GUqlBBaMMz/src/Test/QuickCheck/Arbitrary.purs","end":[56,1]}},{"comments":null,"title":"coarbNumber","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Test","QuickCheck","Arbitrary"],"Coarbitrary"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]}},"sourceSpan":{"start":[59,1],"name":"/tmp/tmp.GUqlBBaMMz/src/Test/QuickCheck/Arbitrary.purs","end":[60,27]}},{"comments":null,"title":"coarbInt","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Test","QuickCheck","Arbitrary"],"Coarbitrary"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}},"sourceSpan":{"start":[65,1],"name":"/tmp/tmp.GUqlBBaMMz/src/Test/QuickCheck/Arbitrary.purs","end":[66,40]}},{"comments":null,"title":"coarbString","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Test","QuickCheck","Arbitrary"],"Coarbitrary"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}},"sourceSpan":{"start":[71,1],"name":"/tmp/tmp.GUqlBBaMMz/src/Test/QuickCheck/Arbitrary.purs","end":[72,72]}},{"comments":null,"title":"coarbChar","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Test","QuickCheck","Arbitrary"],"Coarbitrary"]},{"tag":"TypeConstructor","contents":[["Prim"],"Char"]}]}},"sourceSpan":{"start":[77,1],"name":"/tmp/tmp.GUqlBBaMMz/src/Test/QuickCheck/Arbitrary.purs","end":[78,45]}},{"comments":null,"title":"coarbUnit","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Test","QuickCheck","Arbitrary"],"Coarbitrary"]},{"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}},"sourceSpan":{"start":[83,1],"name":"/tmp/tmp.GUqlBBaMMz/src/Test/QuickCheck/Arbitrary.purs","end":[86,1]}},{"comments":null,"title":"coarbOrdering","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Test","QuickCheck","Arbitrary"],"Coarbitrary"]},{"tag":"TypeConstructor","contents":[["Data","Ordering"],"Ordering"]}]}},"sourceSpan":{"start":[89,1],"name":"/tmp/tmp.GUqlBBaMMz/src/Test/QuickCheck/Arbitrary.purs","end":[94,1]}},{"comments":null,"title":"coarbArray","info":{"declType":"instance","dependencies":[{"constraintClass":[["Test","QuickCheck","Arbitrary"],"Coarbitrary"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Test","QuickCheck","Arbitrary"],"Coarbitrary"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[97,1],"name":"/tmp/tmp.GUqlBBaMMz/src/Test/QuickCheck/Arbitrary.purs","end":[98,55]}},{"comments":null,"title":"coarbFunction","info":{"declType":"instance","dependencies":[{"constraintClass":[["Test","QuickCheck","Arbitrary"],"Arbitrary"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"constraintClass":[["Test","QuickCheck","Arbitrary"],"Coarbitrary"],"constraintArgs":[{"tag":"TypeVar","contents":"b"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Test","QuickCheck","Arbitrary"],"Coarbitrary"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}},"sourceSpan":{"start":[103,1],"name":"/tmp/tmp.GUqlBBaMMz/src/Test/QuickCheck/Arbitrary.purs","end":[106,44]}},{"comments":null,"title":"coarbTuple","info":{"declType":"instance","dependencies":[{"constraintClass":[["Test","QuickCheck","Arbitrary"],"Coarbitrary"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"constraintClass":[["Test","QuickCheck","Arbitrary"],"Coarbitrary"],"constraintArgs":[{"tag":"TypeVar","contents":"b"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Test","QuickCheck","Arbitrary"],"Coarbitrary"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Tuple"],"Tuple"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}},"sourceSpan":{"start":[111,1],"name":"/tmp/tmp.GUqlBBaMMz/src/Test/QuickCheck/Arbitrary.purs","end":[112,60]}},{"comments":null,"title":"coarbMaybe","info":{"declType":"instance","dependencies":[{"constraintClass":[["Test","QuickCheck","Arbitrary"],"Coarbitrary"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Test","QuickCheck","Arbitrary"],"Coarbitrary"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[117,1],"name":"/tmp/tmp.GUqlBBaMMz/src/Test/QuickCheck/Arbitrary.purs","end":[119,39]}},{"comments":null,"title":"coarbEither","info":{"declType":"instance","dependencies":[{"constraintClass":[["Test","QuickCheck","Arbitrary"],"Coarbitrary"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"constraintClass":[["Test","QuickCheck","Arbitrary"],"Coarbitrary"],"constraintArgs":[{"tag":"TypeVar","contents":"b"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Test","QuickCheck","Arbitrary"],"Coarbitrary"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Either"],"Either"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}},"sourceSpan":{"start":[124,1],"name":"/tmp/tmp.GUqlBBaMMz/src/Test/QuickCheck/Arbitrary.purs","end":[126,40]}},{"comments":null,"title":"coarbList","info":{"declType":"instance","dependencies":[{"constraintClass":[["Test","QuickCheck","Arbitrary"],"Coarbitrary"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Test","QuickCheck","Arbitrary"],"Coarbitrary"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","List","Types"],"List"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[131,1],"name":"/tmp/tmp.GUqlBBaMMz/src/Test/QuickCheck/Arbitrary.purs","end":[132,55]}},{"comments":null,"title":"coarbIdentity","info":{"declType":"instance","dependencies":[{"constraintClass":[["Test","QuickCheck","Arbitrary"],"Coarbitrary"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Test","QuickCheck","Arbitrary"],"Coarbitrary"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Identity"],"Identity"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[137,1],"name":"/tmp/tmp.GUqlBBaMMz/src/Test/QuickCheck/Arbitrary.purs","end":[138,43]}},{"comments":null,"title":"coarbLazy","info":{"declType":"instance","dependencies":[{"constraintClass":[["Test","QuickCheck","Arbitrary"],"Coarbitrary"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Test","QuickCheck","Arbitrary"],"Coarbitrary"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Lazy"],"Lazy"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[143,1],"name":"/tmp/tmp.GUqlBBaMMz/src/Test/QuickCheck/Arbitrary.purs","end":[144,40]}},{"comments":null,"title":"coarbNonEmpty","info":{"declType":"instance","dependencies":[{"constraintClass":[["Test","QuickCheck","Arbitrary"],"Coarbitrary"],"constraintArgs":[{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}}],"constraintData":null},{"constraintClass":[["Test","QuickCheck","Arbitrary"],"Coarbitrary"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Test","QuickCheck","Arbitrary"],"Coarbitrary"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","NonEmpty"],"NonEmpty"]},{"tag":"TypeVar","contents":"f"}]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[149,1],"name":"/tmp/tmp.GUqlBBaMMz/src/Test/QuickCheck/Arbitrary.purs","end":[150,75]}},{"comments":null,"title":"coarbNonEmptyList","info":{"declType":"instance","dependencies":[{"constraintClass":[["Test","QuickCheck","Arbitrary"],"Coarbitrary"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Test","QuickCheck","Arbitrary"],"Coarbitrary"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","List","Types"],"NonEmptyList"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[155,1],"name":"/tmp/tmp.GUqlBBaMMz/src/Test/QuickCheck/Arbitrary.purs","end":[156,48]}}],"comments":"The `Coarbitrary` class represents types which appear on the left of\nan `Arbitrary` function arrow.\n\nTo construct an `Arbitrary` instance for the type `a -> b`, we need to\nuse the input of type `a` to _perturb_ a random generator for `b`. This\nis the role of the `coarbitrary` function.\n\n`Coarbitrary` instances can be written using the `perturbGen` function.\n","title":"Coarbitrary","info":{"fundeps":[],"arguments":[["t",null]],"declType":"typeClass","superclasses":[]},"sourceSpan":{"start":[46,1],"name":"/tmp/tmp.GUqlBBaMMz/src/Test/QuickCheck/Arbitrary.purs","end":[47,47]}}]},{"reExports":[],"name":"Test.QuickCheck.Data.AlphaNumString","comments":null,"declarations":[{"children":[{"comments":null,"title":"AlphaNumString","info":{"arguments":[{"tag":"TypeConstructor","contents":[["Prim"],"String"]}],"declType":"dataConstructor"},"sourceSpan":null},{"comments":null,"title":"newtypeAlphaNumString","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Newtype"],"Newtype"]},{"tag":"TypeConstructor","contents":[["Test","QuickCheck","Data","AlphaNumString"],"AlphaNumString"]}]},{"tag":"TypeWildcard","contents":{"start":[18,65],"name":"/tmp/tmp.GUqlBBaMMz/src/Test/QuickCheck/Data/AlphaNumString.purs","end":[18,66]}}]}},"sourceSpan":{"start":[18,1],"name":"/tmp/tmp.GUqlBBaMMz/src/Test/QuickCheck/Data/AlphaNumString.purs","end":[18,66]}},{"comments":null,"title":"eqAlphaNumString","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Eq"],"Eq"]},{"tag":"TypeConstructor","contents":[["Test","QuickCheck","Data","AlphaNumString"],"AlphaNumString"]}]}},"sourceSpan":{"start":[19,1],"name":"/tmp/tmp.GUqlBBaMMz/src/Test/QuickCheck/Data/AlphaNumString.purs","end":[19,62]}},{"comments":null,"title":"ordAlphaNumString","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Ord"],"Ord"]},{"tag":"TypeConstructor","contents":[["Test","QuickCheck","Data","AlphaNumString"],"AlphaNumString"]}]}},"sourceSpan":{"start":[20,1],"name":"/tmp/tmp.GUqlBBaMMz/src/Test/QuickCheck/Data/AlphaNumString.purs","end":[20,64]}},{"comments":null,"title":"arbAlphaNumString","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Test","QuickCheck","Arbitrary"],"Arbitrary"]},{"tag":"TypeConstructor","contents":[["Test","QuickCheck","Data","AlphaNumString"],"AlphaNumString"]}]}},"sourceSpan":{"start":[22,1],"name":"/tmp/tmp.GUqlBBaMMz/src/Test/QuickCheck/Data/AlphaNumString.purs","end":[29,52]}},{"comments":null,"title":"coarbAlphaNumString","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Test","QuickCheck","Arbitrary"],"Coarbitrary"]},{"tag":"TypeConstructor","contents":[["Test","QuickCheck","Data","AlphaNumString"],"AlphaNumString"]}]}},"sourceSpan":{"start":[31,1],"name":"/tmp/tmp.GUqlBBaMMz/src/Test/QuickCheck/Data/AlphaNumString.purs","end":[31,60]}}],"comments":"A newtype for `String` whose `Arbitrary` instance generated random\nalphanumeric strings.\n","title":"AlphaNumString","info":{"declType":"data","dataDeclType":"newtype","typeArguments":[]},"sourceSpan":{"start":[16,1],"name":"/tmp/tmp.GUqlBBaMMz/src/Test/QuickCheck/Data/AlphaNumString.purs","end":[16,47]}}]},{"reExports":[],"name":"Test.QuickCheck.Gen","comments":"This module defines the random generator monad used by the `Test.QuickCheck`\nmodule, as well as helper functions for constructing random generators.\n","declarations":[{"children":[],"comments":"Tests are parameterized by the `Size` of the randomly-generated data,\nthe meaning of which depends on the particular generator used.\n","title":"Size","info":{"arguments":[],"declType":"typeSynonym","type":{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}},"sourceSpan":{"start":[61,1],"name":"/tmp/tmp.GUqlBBaMMz/src/Test/QuickCheck/Gen.purs","end":[61,16]}},{"children":[],"comments":"The state of the random generator monad\n","title":"GenState","info":{"arguments":[],"declType":"typeSynonym","type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Record"]},{"tag":"RCons","contents":["newSeed",{"tag":"TypeConstructor","contents":[["Test","QuickCheck","LCG"],"Seed"]},{"tag":"RCons","contents":["size",{"tag":"TypeConstructor","contents":[["Test","QuickCheck","Gen"],"Size"]},{"tag":"REmpty"}]}]}]}},"sourceSpan":{"start":[64,1],"name":"/tmp/tmp.GUqlBBaMMz/src/Test/QuickCheck/Gen.purs","end":[64,50]}},{"children":[{"comments":null,"title":"functorGen","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Functor"],"Functor"]},{"tag":"TypeConstructor","contents":[["Test","QuickCheck","Gen"],"Gen"]}]}},"sourceSpan":{"start":[71,1],"name":"/tmp/tmp.GUqlBBaMMz/src/Test/QuickCheck/Gen.purs","end":[71,50]}},{"comments":null,"title":"applyGen","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Apply"],"Apply"]},{"tag":"TypeConstructor","contents":[["Test","QuickCheck","Gen"],"Gen"]}]}},"sourceSpan":{"start":[72,1],"name":"/tmp/tmp.GUqlBBaMMz/src/Test/QuickCheck/Gen.purs","end":[72,46]}},{"comments":null,"title":"applicativeGen","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Applicative"],"Applicative"]},{"tag":"TypeConstructor","contents":[["Test","QuickCheck","Gen"],"Gen"]}]}},"sourceSpan":{"start":[73,1],"name":"/tmp/tmp.GUqlBBaMMz/src/Test/QuickCheck/Gen.purs","end":[73,58]}},{"comments":null,"title":"bindGen","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Bind"],"Bind"]},{"tag":"TypeConstructor","contents":[["Test","QuickCheck","Gen"],"Gen"]}]}},"sourceSpan":{"start":[74,1],"name":"/tmp/tmp.GUqlBBaMMz/src/Test/QuickCheck/Gen.purs","end":[74,44]}},{"comments":null,"title":"monadGen","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad"],"Monad"]},{"tag":"TypeConstructor","contents":[["Test","QuickCheck","Gen"],"Gen"]}]}},"sourceSpan":{"start":[75,1],"name":"/tmp/tmp.GUqlBBaMMz/src/Test/QuickCheck/Gen.purs","end":[75,46]}},{"comments":null,"title":"altGen","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Alt"],"Alt"]},{"tag":"TypeConstructor","contents":[["Test","QuickCheck","Gen"],"Gen"]}]}},"sourceSpan":{"start":[76,1],"name":"/tmp/tmp.GUqlBBaMMz/src/Test/QuickCheck/Gen.purs","end":[76,42]}},{"comments":null,"title":"monadRecGen","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad","Rec","Class"],"MonadRec"]},{"tag":"TypeConstructor","contents":[["Test","QuickCheck","Gen"],"Gen"]}]}},"sourceSpan":{"start":[77,1],"name":"/tmp/tmp.GUqlBBaMMz/src/Test/QuickCheck/Gen.purs","end":[77,52]}},{"comments":null,"title":"monadGenGen","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad","Gen","Class"],"MonadGen"]},{"tag":"TypeConstructor","contents":[["Test","QuickCheck","Gen"],"Gen"]}]}},"sourceSpan":{"start":[79,1],"name":"/tmp/tmp.GUqlBBaMMz/src/Test/QuickCheck/Gen.purs","end":[84,16]}}],"comments":"The random generator monad\n\n`Gen` is a state monad which encodes a linear congruential generator.\n","title":"Gen","info":{"declType":"data","dataDeclType":"newtype","typeArguments":[["a",null]]},"sourceSpan":{"start":[69,1],"name":"/tmp/tmp.GUqlBBaMMz/src/Test/QuickCheck/Gen.purs","end":[69,39]}},{"children":[],"comments":"Exposes the underlying State implementation.\n","title":"unGen","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Test","QuickCheck","Gen"],"Gen"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad","State"],"State"]},{"tag":"TypeConstructor","contents":[["Test","QuickCheck","Gen"],"GenState"]}]},{"tag":"TypeVar","contents":"a"}]}]},null]}},"sourceSpan":{"start":[87,1],"name":"/tmp/tmp.GUqlBBaMMz/src/Test/QuickCheck/Gen.purs","end":[87,45]}},{"children":[],"comments":"Create a random generator for a function type.\n","title":"repeatable","info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Test","QuickCheck","Gen"],"Gen"]},{"tag":"TypeVar","contents":"b"}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Test","QuickCheck","Gen"],"Gen"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}]},null]},null]}},"sourceSpan":{"start":[91,1],"name":"/tmp/tmp.GUqlBBaMMz/src/Test/QuickCheck/Gen.purs","end":[91,55]}},{"children":[],"comments":"Create a random generator which uses the generator state explicitly.\n","title":"stateful","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Test","QuickCheck","Gen"],"GenState"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Test","QuickCheck","Gen"],"Gen"]},{"tag":"TypeVar","contents":"a"}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Test","QuickCheck","Gen"],"Gen"]},{"tag":"TypeVar","contents":"a"}]}]},null]}},"sourceSpan":{"start":[95,1],"name":"/tmp/tmp.GUqlBBaMMz/src/Test/QuickCheck/Gen.purs","end":[95,51]}},{"children":[],"comments":"Modify a random generator by setting a new random seed.\n","title":"variant","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Test","QuickCheck","LCG"],"Seed"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Test","QuickCheck","Gen"],"Gen"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Test","QuickCheck","Gen"],"Gen"]},{"tag":"TypeVar","contents":"a"}]}]}]},null]}},"sourceSpan":{"start":[99,1],"name":"/tmp/tmp.GUqlBBaMMz/src/Test/QuickCheck/Gen.purs","end":[99,44]}},{"children":[],"comments":"Ensure that a generator only produces values that match a predicate. If\nthe predicate always returns false the generator will loop forever.\n","title":"suchThat","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Test","QuickCheck","Gen"],"Gen"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Test","QuickCheck","Gen"],"Gen"]},{"tag":"TypeVar","contents":"a"}]}]}]},null]}},"sourceSpan":{"start":[104,1],"name":"/tmp/tmp.GUqlBBaMMz/src/Test/QuickCheck/Gen.purs","end":[104,55]}},{"children":[],"comments":"Create a random generator which depends on the size parameter.\n","title":"sized","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Test","QuickCheck","Gen"],"Size"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Test","QuickCheck","Gen"],"Gen"]},{"tag":"TypeVar","contents":"a"}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Test","QuickCheck","Gen"],"Gen"]},{"tag":"TypeVar","contents":"a"}]}]},null]}},"sourceSpan":{"start":[113,1],"name":"/tmp/tmp.GUqlBBaMMz/src/Test/QuickCheck/Gen.purs","end":[113,44]}},{"children":[],"comments":"Modify a random generator by setting a new size parameter.\n","title":"resize","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Test","QuickCheck","Gen"],"Size"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Test","QuickCheck","Gen"],"Gen"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Test","QuickCheck","Gen"],"Gen"]},{"tag":"TypeVar","contents":"a"}]}]}]},null]}},"sourceSpan":{"start":[117,1],"name":"/tmp/tmp.GUqlBBaMMz/src/Test/QuickCheck/Gen.purs","end":[117,43]}},{"children":[],"comments":"Create a random generator which samples a range of `Number`s i\nwith uniform probability.\n","title":"choose","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Test","QuickCheck","Gen"],"Gen"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]}]}]}},"sourceSpan":{"start":[122,1],"name":"/tmp/tmp.GUqlBBaMMz/src/Test/QuickCheck/Gen.purs","end":[122,41]}},{"children":[],"comments":"Create a random generator which chooses uniformly distributed\nintegers from the closed interval `[a, b]`.\nNote that very large intervals will cause a loss of uniformity.\n","title":"chooseInt","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Test","QuickCheck","Gen"],"Gen"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}]}]}},"sourceSpan":{"start":[130,1],"name":"/tmp/tmp.GUqlBBaMMz/src/Test/QuickCheck/Gen.purs","end":[130,35]}},{"children":[],"comments":"Create a random generator which selects and executes a random generator from\na non-empty array of random generators with uniform probability.\n","title":"oneOf","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","NonEmpty"],"NonEmpty"]},{"tag":"TypeConstructor","contents":[["Prim"],"Array"]}]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Test","QuickCheck","Gen"],"Gen"]},{"tag":"TypeVar","contents":"a"}]}}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Test","QuickCheck","Gen"],"Gen"]},{"tag":"TypeVar","contents":"a"}]}]},null]}},"sourceSpan":{"start":[152,1],"name":"/tmp/tmp.GUqlBBaMMz/src/Test/QuickCheck/Gen.purs","end":[152,51]}},{"children":[],"comments":"Create a random generator which selects and executes a random generator from\na non-empty, weighted list of random generators.\n","title":"frequency","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","NonEmpty"],"NonEmpty"]},{"tag":"TypeConstructor","contents":[["Data","List","Types"],"List"]}]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Tuple"],"Tuple"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Test","QuickCheck","Gen"],"Gen"]},{"tag":"TypeVar","contents":"a"}]}}]}}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Test","QuickCheck","Gen"],"Gen"]},{"tag":"TypeVar","contents":"a"}]}]},null]}},"sourceSpan":{"start":[159,1],"name":"/tmp/tmp.GUqlBBaMMz/src/Test/QuickCheck/Gen.purs","end":[159,69]}},{"children":[],"comments":"Create a random generator which generates an array of random values.\n","title":"arrayOf","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Test","QuickCheck","Gen"],"Gen"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Test","QuickCheck","Gen"],"Gen"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]}}]}]},null]}},"sourceSpan":{"start":[170,1],"name":"/tmp/tmp.GUqlBBaMMz/src/Test/QuickCheck/Gen.purs","end":[170,44]}},{"children":[],"comments":"Create a random generator which generates a non-empty array of random values.\n","title":"arrayOf1","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Test","QuickCheck","Gen"],"Gen"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Test","QuickCheck","Gen"],"Gen"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","NonEmpty"],"NonEmpty"]},{"tag":"TypeConstructor","contents":[["Prim"],"Array"]}]},{"tag":"TypeVar","contents":"a"}]}}]}]},null]}},"sourceSpan":{"start":[176,1],"name":"/tmp/tmp.GUqlBBaMMz/src/Test/QuickCheck/Gen.purs","end":[176,54]}},{"children":[],"comments":"Create a random generator which generates a list of random values of the specified size.\n","title":"listOf","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Test","QuickCheck","Gen"],"Gen"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Test","QuickCheck","Gen"],"Gen"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","List","Types"],"List"]},{"tag":"TypeVar","contents":"a"}]}}]}]}]},null]}},"sourceSpan":{"start":[201,1],"name":"/tmp/tmp.GUqlBBaMMz/src/Test/QuickCheck/Gen.purs","end":[201,49]}},{"children":[],"comments":"Create a random generator which generates a vector of random values of a specified size.\n","title":"vectorOf","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Test","QuickCheck","Gen"],"Gen"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Test","QuickCheck","Gen"],"Gen"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]}}]}]}]},null]}},"sourceSpan":{"start":[205,1],"name":"/tmp/tmp.GUqlBBaMMz/src/Test/QuickCheck/Gen.purs","end":[205,52]}},{"children":[],"comments":"Create a random generator which selects a value from a non-empty array with\nuniform probability.\n","title":"elements","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","NonEmpty"],"NonEmpty"]},{"tag":"TypeConstructor","contents":[["Prim"],"Array"]}]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Test","QuickCheck","Gen"],"Gen"]},{"tag":"TypeVar","contents":"a"}]}]},null]}},"sourceSpan":{"start":[210,1],"name":"/tmp/tmp.GUqlBBaMMz/src/Test/QuickCheck/Gen.purs","end":[210,48]}},{"children":[],"comments":"Run a random generator\n","title":"runGen","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Test","QuickCheck","Gen"],"Gen"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Test","QuickCheck","Gen"],"GenState"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Tuple"],"Tuple"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeConstructor","contents":[["Test","QuickCheck","Gen"],"GenState"]}]}]}]},null]}},"sourceSpan":{"start":[216,1],"name":"/tmp/tmp.GUqlBBaMMz/src/Test/QuickCheck/Gen.purs","end":[216,58]}},{"children":[],"comments":"Run a random generator, keeping only the randomly-generated result\n","title":"evalGen","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Test","QuickCheck","Gen"],"Gen"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Test","QuickCheck","Gen"],"GenState"]}]},{"tag":"TypeVar","contents":"a"}]}]},null]}},"sourceSpan":{"start":[220,1],"name":"/tmp/tmp.GUqlBBaMMz/src/Test/QuickCheck/Gen.purs","end":[220,44]}},{"children":[],"comments":"Sample a random generator\n","title":"sample","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Test","QuickCheck","LCG"],"Seed"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Test","QuickCheck","Gen"],"Size"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Test","QuickCheck","Gen"],"Gen"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]}]}]}]},null]}},"sourceSpan":{"start":[224,1],"name":"/tmp/tmp.GUqlBBaMMz/src/Test/QuickCheck/Gen.purs","end":[224,53]}},{"children":[],"comments":"Sample a random generator, using a randomly generated seed\n","title":"randomSample'","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["r",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Test","QuickCheck","Gen"],"Size"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Test","QuickCheck","Gen"],"Gen"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad","Eff"],"Eff"]},{"tag":"RCons","contents":["random",{"tag":"TypeConstructor","contents":[["Control","Monad","Eff","Random"],"RANDOM"]},{"tag":"TypeVar","contents":"r"}]}]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]}}]}]}]},null]},null]}},"sourceSpan":{"start":[228,1],"name":"/tmp/tmp.GUqlBBaMMz/src/Test/QuickCheck/Gen.purs","end":[228,83]}},{"children":[],"comments":"Get a random sample of 10 values\n","title":"randomSample","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["r",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Test","QuickCheck","Gen"],"Gen"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad","Eff"],"Eff"]},{"tag":"RCons","contents":["random",{"tag":"TypeConstructor","contents":[["Control","Monad","Eff","Random"],"RANDOM"]},{"tag":"TypeVar","contents":"r"}]}]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]}}]}]},null]},null]}},"sourceSpan":{"start":[234,1],"name":"/tmp/tmp.GUqlBBaMMz/src/Test/QuickCheck/Gen.purs","end":[234,74]}},{"children":[],"comments":"A random generator which approximates a uniform random variable on `[0, 1]`\n","title":"uniform","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Test","QuickCheck","Gen"],"Gen"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]}},"sourceSpan":{"start":[243,1],"name":"/tmp/tmp.GUqlBBaMMz/src/Test/QuickCheck/Gen.purs","end":[243,22]}},{"children":[],"comments":"Perturb a random generator by modifying the current seed\n","title":"perturbGen","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Test","QuickCheck","Gen"],"Gen"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Test","QuickCheck","Gen"],"Gen"]},{"tag":"TypeVar","contents":"a"}]}]}]},null]}},"sourceSpan":{"start":[249,1],"name":"/tmp/tmp.GUqlBBaMMz/src/Test/QuickCheck/Gen.purs","end":[249,49]}}]},{"reExports":[],"name":"Test.QuickCheck.LCG","comments":null,"declarations":[{"children":[],"comments":"The *multiplier*: a magic constant for the linear congruential generator\n","title":"lcgM","info":{"declType":"value","type":{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}},"sourceSpan":{"start":[26,1],"name":"/tmp/tmp.GUqlBBaMMz/src/Test/QuickCheck/LCG.purs","end":[26,12]}},{"children":[],"comments":"The *increment*: a magic constant for the linear congruential generator\n","title":"lcgC","info":{"declType":"value","type":{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}},"sourceSpan":{"start":[30,1],"name":"/tmp/tmp.GUqlBBaMMz/src/Test/QuickCheck/LCG.purs","end":[30,12]}},{"children":[],"comments":"The *modulus*: a magic constant for the linear congruential generator.\nIt is equal to 2^31 - 1, a Mersenne prime. It is useful for this value to\nbe prime, because then the requirement of the initial seed being coprime\nto the modulus is satisfied when the seed is between 1 and lcgN - 1.\n","title":"lcgN","info":{"declType":"value","type":{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}},"sourceSpan":{"start":[37,1],"name":"/tmp/tmp.GUqlBBaMMz/src/Test/QuickCheck/LCG.purs","end":[37,12]}},{"children":[],"comments":"Perturb a seed value\n","title":"lcgPerturb","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Test","QuickCheck","LCG"],"Seed"]}]},{"tag":"TypeConstructor","contents":[["Test","QuickCheck","LCG"],"Seed"]}]}]}},"sourceSpan":{"start":[41,1],"name":"/tmp/tmp.GUqlBBaMMz/src/Test/QuickCheck/LCG.purs","end":[41,37]}},{"children":[],"comments":"Step the linear congruential generator\n","title":"lcgNext","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Test","QuickCheck","LCG"],"Seed"]}]},{"tag":"TypeConstructor","contents":[["Test","QuickCheck","LCG"],"Seed"]}]}},"sourceSpan":{"start":[48,1],"name":"/tmp/tmp.GUqlBBaMMz/src/Test/QuickCheck/LCG.purs","end":[48,24]}},{"children":[],"comments":"Create a random seed\n","title":"randomSeed","info":{"declType":"value","type":{"tag":"ForAll","contents":["e",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad","Eff"],"Eff"]},{"tag":"RCons","contents":["random",{"tag":"TypeConstructor","contents":[["Control","Monad","Eff","Random"],"RANDOM"]},{"tag":"TypeVar","contents":"e"}]}]},{"tag":"TypeConstructor","contents":[["Test","QuickCheck","LCG"],"Seed"]}]},null]}},"sourceSpan":{"start":[52,1],"name":"/tmp/tmp.GUqlBBaMMz/src/Test/QuickCheck/LCG.purs","end":[52,56]}},{"children":[{"comments":null,"title":"showSeed","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Show"],"Show"]},{"tag":"TypeConstructor","contents":[["Test","QuickCheck","LCG"],"Seed"]}]}},"sourceSpan":{"start":[82,1],"name":"/tmp/tmp.GUqlBBaMMz/src/Test/QuickCheck/LCG.purs","end":[83,36]}},{"comments":null,"title":"eqSeed","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Eq"],"Eq"]},{"tag":"TypeConstructor","contents":[["Test","QuickCheck","LCG"],"Seed"]}]}},"sourceSpan":{"start":[85,1],"name":"/tmp/tmp.GUqlBBaMMz/src/Test/QuickCheck/LCG.purs","end":[86,31]}}],"comments":"A seed for the linear congruential generator. We omit a `Semiring`\ninstance because there is no `zero` value, as 0 is not an acceptable\nseed for the generator.\n","title":"Seed","info":{"declType":"data","dataDeclType":"newtype","typeArguments":[]},"sourceSpan":{"start":[66,1],"name":"/tmp/tmp.GUqlBBaMMz/src/Test/QuickCheck/LCG.purs","end":[66,24]}},{"children":[],"comments":null,"title":"mkSeed","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeConstructor","contents":[["Test","QuickCheck","LCG"],"Seed"]}]}},"sourceSpan":{"start":[68,1],"name":"/tmp/tmp.GUqlBBaMMz/src/Test/QuickCheck/LCG.purs","end":[68,22]}},{"children":[],"comments":null,"title":"runSeed","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Test","QuickCheck","LCG"],"Seed"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}},"sourceSpan":{"start":[71,1],"name":"/tmp/tmp.GUqlBBaMMz/src/Test/QuickCheck/LCG.purs","end":[71,23]}}]}],"resolvedDependencies":{"purescript-exceptions":"3.0.0","purescript-newtype":"2.0.0","purescript-control":"3.3.0","purescript-console":"3.0.0","purescript-either":"3.0.0","purescript-arrays":"4.1.0","purescript-maybe":"3.0.0","purescript-type-equality":"2.1.0","purescript-distributive":"3.0.0","purescript-unfoldable":"3.0.0","purescript-invariant":"3.0.0","purescript-lazy":"3.0.0","purescript-monoid":"3.0.0","purescript-foldable-traversable":"3.3.0","purescript-tailrec":"3.3.0","purescript-gen":"1.1.0","purescript-prelude":"3.0.0","purescript-st":"3.0.0","purescript-bifunctors":"3.0.0","purescript-nonempty":"4.0.0","purescript-unsafe-coerce":"3.0.0","purescript-integers":"3.0.0","purescript-eff":"3.1.0","purescript-transformers":"3.4.0","purescript-globals":"3.0.0","purescript-math":"2.0.0","purescript-enums":"3.2.0","purescript-random":"3.0.0","purescript-tuples":"4.1.0","purescript-partial":"1.2.0","purescript-strings":"3.2.1","purescript-identity":"3.1.0","purescript-lists":"4.6.1"},"version":"4.1.0","github":["purescript","purescript-quickcheck"],"versionTag":"v4.1.0","moduleMap":{"Data.BooleanAlgebra":"purescript-prelude","Data.Ring":"purescript-prelude","Control.Monad.Trans.Class":"purescript-transformers","Data.NonEmpty":"purescript-nonempty","Data.Char.Gen":"purescript-strings","Data.Enum.Gen":"purescript-enums","Control.Comonad.Env":"purescript-transformers","Control.Comonad.Traced.Class":"purescript-transformers","Control.Monad.Eff.Unsafe":"purescript-eff","Data.Int.Bits":"purescript-integers","Data.Bifunctor.Flip":"purescript-bifunctors","Data.Ord":"purescript-prelude","Control.Monad.Gen":"purescript-gen","Data.Monoid.Dual":"purescript-monoid","Control.Monad.Rec.Class":"purescript-tailrec","Data.Bitraversable":"purescript-foldable-traversable","Data.Boolean":"purescript-prelude","Control.Biapplicative":"purescript-bifunctors","Data.Array.ST.Iterator":"purescript-arrays","Data.Bounded":"purescript-prelude","Control.Monad.State.Trans":"purescript-transformers","Data.Int":"purescript-integers","Data.Show":"purescript-prelude","Data.Bifunctor.Clown":"purescript-bifunctors","Control.Monad.Writer.Trans":"purescript-transformers","Data.Foldable":"purescript-foldable-traversable","Control.Comonad.Store.Class":"purescript-transformers","Data.Enum":"purescript-enums","Control.Apply":"purescript-prelude","Data.Tuple.Nested":"purescript-tuples","Control.Monad":"purescript-prelude","Data.Lazy":"purescript-lazy","Data.Monoid":"purescript-monoid","Control.Monad.Eff.Uncurried":"purescript-eff","Control.Monad.List.Trans":"purescript-transformers","Control.Monad.RWS":"purescript-transformers","Data.Maybe.First":"purescript-maybe","Control.Bind":"purescript-prelude","Data.Monoid.Additive":"purescript-monoid","Data.String.Regex":"purescript-strings","Data.HeytingAlgebra":"purescript-prelude","Control.Alt":"purescript-control","Control.Monad.Maybe.Trans":"purescript-transformers","Control.Monad.Cont":"purescript-transformers","Data.List.ZipList":"purescript-lists","Data.Ord.Unsafe":"purescript-prelude","Data.Semigroup":"purescript-prelude","Control.Monad.Reader":"purescript-transformers","Control.Monad.Eff":"purescript-eff","Control.Comonad.Traced.Trans":"purescript-transformers","Data.Array.ST.Partial":"purescript-arrays","Data.Tuple":"purescript-tuples","Data.Semigroup.Foldable":"purescript-foldable-traversable","Control.Biapply":"purescript-bifunctors","Data.Distributive":"purescript-distributive","Type.Equality":"purescript-type-equality","Control.Alternative":"purescript-control","Data.Semiring":"purescript-prelude","Data.CommutativeRing":"purescript-prelude","Data.NaturalTransformation":"purescript-prelude","Data.Monoid.Conj":"purescript-monoid","Data.Unfoldable":"purescript-unfoldable","Control.Monad.Eff.Random":"purescript-random","Control.Comonad.Store.Trans":"purescript-transformers","Control.Monad.ST":"purescript-st","Control.Monad.State.Class":"purescript-transformers","Data.List.Types":"purescript-lists","Data.Functor":"purescript-prelude","Unsafe.Coerce":"purescript-unsafe-coerce","Control.Monad.Writer.Class":"purescript-transformers","Control.Monad.Except":"purescript-transformers","Data.List.Lazy.Types":"purescript-lists","Control.Category":"purescript-prelude","Control.Monad.Gen.Common":"purescript-gen","Control.Monad.RWS.Trans":"purescript-transformers","Control.Monad.Cont.Trans":"purescript-transformers","Data.Maybe":"purescript-maybe","Data.String.Regex.Unsafe":"purescript-strings","Control.Comonad":"purescript-control","Data.Function":"purescript-prelude","Data.List":"purescript-lists","Data.Field":"purescript-prelude","Data.List.Lazy":"purescript-lists","Data.EuclideanRing":"purescript-prelude","Data.Functor.Invariant":"purescript-invariant","Control.Comonad.Traced":"purescript-transformers","Global.Unsafe":"purescript-globals","Data.String.Unsafe":"purescript-strings","Prelude":"purescript-prelude","Partial.Unsafe":"purescript-partial","Data.Array":"purescript-arrays","Data.Bifunctor.Product":"purescript-bifunctors","Control.Extend":"purescript-control","Control.Lazy":"purescript-control","Control.Monad.Reader.Trans":"purescript-transformers","Control.Comonad.Env.Class":"purescript-transformers","Data.Eq":"purescript-prelude","Data.Either.Nested":"purescript-either","Data.Newtype":"purescript-newtype","Control.Monad.Eff.Console":"purescript-console","Data.Semigroup.Traversable":"purescript-foldable-traversable","Data.Bifunctor":"purescript-bifunctors","Data.Monoid.Disj":"purescript-monoid","Control.Monad.Eff.Exception":"purescript-exceptions","Control.Monad.Gen.Class":"purescript-gen","Data.Array.Partial":"purescript-arrays","Data.String.CaseInsensitive":"purescript-strings","Control.MonadPlus":"purescript-control","Data.Void":"purescript-prelude","Control.MonadZero":"purescript-control","Control.Comonad.Store":"purescript-transformers","Control.Monad.Except.Trans":"purescript-transformers","Data.Bifunctor.Joker":"purescript-bifunctors","Data.Bifunctor.Wrap":"purescript-bifunctors","Data.Maybe.Last":"purescript-maybe","Data.Unit":"purescript-prelude","Data.List.NonEmpty":"purescript-lists","Data.List.Lazy.NonEmpty":"purescript-lists","Data.Ordering":"purescript-prelude","Control.Monad.Cont.Class":"purescript-transformers","Data.Identity":"purescript-identity","Math":"purescript-math","Control.Comonad.Trans.Class":"purescript-transformers","Data.String":"purescript-strings","Control.Plus":"purescript-control","Control.Monad.Eff.Class":"purescript-eff","Type.Row.Effect.Equality":"purescript-type-equality","Partial":"purescript-partial","Control.Comonad.Env.Trans":"purescript-transformers","Global":"purescript-globals","Control.Monad.Reader.Class":"purescript-transformers","Data.Monoid.Multiplicative":"purescript-monoid","Data.Array.ST":"purescript-arrays","Control.Monad.Error.Class":"purescript-transformers","Control.Semigroupoid":"purescript-prelude","Data.Monoid.Alternate":"purescript-monoid","Data.Char":"purescript-strings","Data.Bifunctor.Join":"purescript-bifunctors","Control.Monad.Eff.Exception.Unsafe":"purescript-exceptions","Data.Bifoldable":"purescript-foldable-traversable","Data.Monoid.Endo":"purescript-monoid","Control.Monad.State":"purescript-transformers","Data.List.Partial":"purescript-lists","Data.String.Regex.Flags":"purescript-strings","Data.Either":"purescript-either","Control.Applicative":"purescript-prelude","Control.Monad.Writer":"purescript-transformers","Data.Traversable":"purescript-foldable-traversable","Data.String.Gen":"purescript-strings"},"compilerVersion":"0.11.4"}