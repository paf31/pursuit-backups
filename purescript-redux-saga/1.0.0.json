{"uploader":"felixSchl","packageMeta":{"repository":{"url":"git://github.com/felixschl/purescript-redux-saga.git","type":"git"},"ignore":["**/.*","node_modules","bower_components","output"],"devDependencies":{"purescript-debug":"^3.0.0","purescript-spec":"^2.0.0","purescript-psci-support":"^3.0.0"},"dependencies":{"purescript-safely":"^3.0.0","purescript-console":"^3.0.0","purescript-react-redux":"^6.1.0","purescript-pipes-aff":"^0.5.0","purescript-io":"^5.0.0","purescript-aff":"^4.0.0","purescript-prelude":"^3.1.0","purescript-pipes":"^5.0.0"},"name":"purescript-redux-saga","license":["MIT"]},"tagTime":"2018-04-23T01:17:57+0000","modules":[{"reExports":[],"name":"Redux.Saga","comments":null,"declarations":[{"children":[],"comments":"\n","title":"sagaMiddleware","info":{"declType":"value","type":{"tag":"ForAll","contents":["eff",{"tag":"ForAll","contents":["state",{"tag":"ForAll","contents":["action",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Redux","Saga"],"Saga'"]},{"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]},{"tag":"TypeVar","contents":"state"}]},{"tag":"TypeVar","contents":"action"}]},{"tag":"TypeVar","contents":"action"}]},{"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["React","Redux","Middleware"],"Middleware"]},{"tag":"TypeVar","contents":"eff"}]},{"tag":"TypeVar","contents":"state"}]},{"tag":"TypeVar","contents":"action"}]},{"tag":"TypeWildcard","contents":{"start":[862,40],"name":"/home/felix/projects/purescript-redux-saga/src/Redux/Saga.purs","end":[862,41]}}]},{"tag":"TypeWildcard","contents":{"start":[862,42],"name":"/home/felix/projects/purescript-redux-saga/src/Redux/Saga.purs","end":[862,43]}}]}]},null]},null]},null]}},"sourceSpan":{"start":[859,1],"name":"/home/felix/projects/purescript-redux-saga/src/Redux/Saga.purs","end":[862,43]}},{"children":[],"comments":"Simplified `Saga'` alias where the input and output is the same.\n","title":"Saga","info":{"arguments":[["env",null],["state",null],["action",null],["a",null]],"declType":"typeSynonym","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Redux","Saga"],"Saga'"]},{"tag":"TypeVar","contents":"env"}]},{"tag":"TypeVar","contents":"state"}]},{"tag":"TypeVar","contents":"action"}]},{"tag":"TypeVar","contents":"action"}]},{"tag":"TypeVar","contents":"a"}]}},"sourceSpan":{"start":[645,1],"name":"/home/felix/projects/purescript-redux-saga/src/Redux/Saga.purs","end":[645,63]}},{"children":[{"comments":null,"title":"newtypeSaga'","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Newtype"],"Newtype"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Redux","Saga"],"Saga'"]},{"tag":"TypeVar","contents":"env"}]},{"tag":"TypeVar","contents":"state"}]},{"tag":"TypeVar","contents":"input"}]},{"tag":"TypeVar","contents":"action"}]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeWildcard","contents":{"start":[767,74],"name":"/home/felix/projects/purescript-redux-saga/src/Redux/Saga.purs","end":[767,75]}}]}},"sourceSpan":{"start":[767,8],"name":"/home/felix/projects/purescript-redux-saga/src/Redux/Saga.purs","end":[767,75]}},{"comments":null,"title":"applicativeSaga","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Applicative"],"Applicative"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Redux","Saga"],"Saga'"]},{"tag":"TypeVar","contents":"env"}]},{"tag":"TypeVar","contents":"state"}]},{"tag":"TypeVar","contents":"input"}]},{"tag":"TypeVar","contents":"action"}]}]}},"sourceSpan":{"start":[768,16],"name":"/home/felix/projects/purescript-redux-saga/src/Redux/Saga.purs","end":[768,86]}},{"comments":null,"title":"functorSaga","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Functor"],"Functor"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Redux","Saga"],"Saga'"]},{"tag":"TypeVar","contents":"env"}]},{"tag":"TypeVar","contents":"state"}]},{"tag":"TypeVar","contents":"input"}]},{"tag":"TypeVar","contents":"action"}]}]}},"sourceSpan":{"start":[769,16],"name":"/home/felix/projects/purescript-redux-saga/src/Redux/Saga.purs","end":[769,78]}},{"comments":null,"title":"applySaga","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Apply"],"Apply"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Redux","Saga"],"Saga'"]},{"tag":"TypeVar","contents":"env"}]},{"tag":"TypeVar","contents":"state"}]},{"tag":"TypeVar","contents":"input"}]},{"tag":"TypeVar","contents":"action"}]}]}},"sourceSpan":{"start":[770,16],"name":"/home/felix/projects/purescript-redux-saga/src/Redux/Saga.purs","end":[770,74]}},{"comments":null,"title":"bindSaga","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Bind"],"Bind"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Redux","Saga"],"Saga'"]},{"tag":"TypeVar","contents":"env"}]},{"tag":"TypeVar","contents":"state"}]},{"tag":"TypeVar","contents":"input"}]},{"tag":"TypeVar","contents":"action"}]}]}},"sourceSpan":{"start":[771,16],"name":"/home/felix/projects/purescript-redux-saga/src/Redux/Saga.purs","end":[771,72]}},{"comments":null,"title":"monadSaga","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad"],"Monad"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Redux","Saga"],"Saga'"]},{"tag":"TypeVar","contents":"env"}]},{"tag":"TypeVar","contents":"state"}]},{"tag":"TypeVar","contents":"input"}]},{"tag":"TypeVar","contents":"action"}]}]}},"sourceSpan":{"start":[772,16],"name":"/home/felix/projects/purescript-redux-saga/src/Redux/Saga.purs","end":[772,74]}},{"comments":null,"title":"monadRecSaga","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad","Rec","Class"],"MonadRec"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Redux","Saga"],"Saga'"]},{"tag":"TypeVar","contents":"env"}]},{"tag":"TypeVar","contents":"state"}]},{"tag":"TypeVar","contents":"input"}]},{"tag":"TypeVar","contents":"action"}]}]}},"sourceSpan":{"start":[773,16],"name":"/home/felix/projects/purescript-redux-saga/src/Redux/Saga.purs","end":[773,80]}},{"comments":null,"title":"monadThrowSaga","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad","Error","Class"],"MonadThrow"]},{"tag":"TypeConstructor","contents":[["Control","Monad","Eff","Exception"],"Error"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Redux","Saga"],"Saga'"]},{"tag":"TypeVar","contents":"env"}]},{"tag":"TypeVar","contents":"state"}]},{"tag":"TypeVar","contents":"input"}]},{"tag":"TypeVar","contents":"action"}]}]}},"sourceSpan":{"start":[774,16],"name":"/home/felix/projects/purescript-redux-saga/src/Redux/Saga.purs","end":[774,90]}},{"comments":null,"title":"monadErrorSaga","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad","Error","Class"],"MonadError"]},{"tag":"TypeConstructor","contents":[["Control","Monad","Eff","Exception"],"Error"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Redux","Saga"],"Saga'"]},{"tag":"TypeVar","contents":"env"}]},{"tag":"TypeVar","contents":"state"}]},{"tag":"TypeVar","contents":"input"}]},{"tag":"TypeVar","contents":"action"}]}]}},"sourceSpan":{"start":[775,16],"name":"/home/felix/projects/purescript-redux-saga/src/Redux/Saga.purs","end":[775,90]}},{"comments":"Races two sagas in parallel\nThe losing saga will be canceled via `cancelTask`\n","title":"altSaga","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Alt"],"Alt"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Redux","Saga"],"Saga'"]},{"tag":"TypeVar","contents":"env"}]},{"tag":"TypeVar","contents":"state"}]},{"tag":"TypeVar","contents":"input"}]},{"tag":"TypeVar","contents":"action"}]}]}},"sourceSpan":{"start":[779,1],"name":"/home/felix/projects/purescript-redux-saga/src/Redux/Saga.purs","end":[779,55]}},{"comments":null,"title":"monadAskSaga","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad","Reader","Class"],"MonadAsk"]},{"tag":"TypeVar","contents":"env"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Redux","Saga"],"Saga'"]},{"tag":"TypeVar","contents":"env"}]},{"tag":"TypeVar","contents":"state"}]},{"tag":"TypeVar","contents":"input"}]},{"tag":"TypeVar","contents":"action"}]}]}},"sourceSpan":{"start":[791,1],"name":"/home/felix/projects/purescript-redux-saga/src/Redux/Saga.purs","end":[791,69]}},{"comments":null,"title":"monadReaderSaga","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad","Reader","Class"],"MonadReader"]},{"tag":"TypeVar","contents":"env"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Redux","Saga"],"Saga'"]},{"tag":"TypeVar","contents":"env"}]},{"tag":"TypeVar","contents":"state"}]},{"tag":"TypeVar","contents":"input"}]},{"tag":"TypeVar","contents":"action"}]}]}},"sourceSpan":{"start":[794,1],"name":"/home/felix/projects/purescript-redux-saga/src/Redux/Saga.purs","end":[794,75]}},{"comments":null,"title":"monadIOSaga","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad","IO","Class"],"MonadIO"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Redux","Saga"],"Saga'"]},{"tag":"TypeVar","contents":"env"}]},{"tag":"TypeVar","contents":"state"}]},{"tag":"TypeVar","contents":"input"}]},{"tag":"TypeVar","contents":"action"}]}]}},"sourceSpan":{"start":[799,1],"name":"/home/felix/projects/purescript-redux-saga/src/Redux/Saga.purs","end":[799,63]}},{"comments":null,"title":"monadEffSaga","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad","Eff","Class"],"MonadEff"]},{"tag":"TypeVar","contents":"eff"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Redux","Saga"],"Saga'"]},{"tag":"TypeVar","contents":"env"}]},{"tag":"TypeVar","contents":"state"}]},{"tag":"TypeVar","contents":"input"}]},{"tag":"TypeVar","contents":"action"}]}]}},"sourceSpan":{"start":[802,1],"name":"/home/felix/projects/purescript-redux-saga/src/Redux/Saga.purs","end":[802,69]}},{"comments":null,"title":"monadAffSaga","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad","Aff","Class"],"MonadAff"]},{"tag":"TypeVar","contents":"eff"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Redux","Saga"],"Saga'"]},{"tag":"TypeVar","contents":"env"}]},{"tag":"TypeVar","contents":"state"}]},{"tag":"TypeVar","contents":"input"}]},{"tag":"TypeVar","contents":"action"}]}]}},"sourceSpan":{"start":[805,1],"name":"/home/felix/projects/purescript-redux-saga/src/Redux/Saga.purs","end":[805,69]}}],"comments":"The `Saga` monad is an opinionated, closed monad with a range of\nfunctionality.\n\n               read-only environment, accessible via `MonadAsk` instance\n               /   your state container type (reducer)\n               |    /    the type this saga consumes (i.e. actions)\n               |    |     /    the type of output this saga produces (i.e. actions)\n               |    |     |     /    the return value of this Saga\n               |    |     |     |     /\nnewtype Saga' env state input output a = ...\n\n### The `env` parameter\n\nThe `env` parameter gives us access to a read-only environment, accessible via\n`MonadAsk` instance. Forked computations have the opportunity to change this\nenvironment for the execution of the fork without affecting the current thread's\n`env`.\n\n``` purescript\ntype MyConfig = { apiUrl :: String }\n\nlogApiUrl :: ∀ state input output. Saga' MyConfig state input output Unit\nlogApiUrl = void do\n    { apiUrl } <- ask\n    liftIO $ Console.log apiUrl\n```\n\n### The `state` parameter\n\nThe `state` parameter gives us read access to the current application state via\nthe `select` combinator. This value may change over time.\n\n``` purescript\ntype MyState = { currentUser :: String }\n\nlogUser :: ∀ env input output. Saga' env MyState input output Unit\nlogUser = void do\n    { currentUser } <- select\n    liftIO $ Console.log currentUser\n```\n\n### The `input` parameter\n\nThe `input` parameter denotes the type of input this saga consumes. This in\ncombination with the `output` parameter exposes sagas for what they naturally\nare: pipes consuming `input` and producing `output`. Typically this input type\nwould correspond to your application's actions type.\n\n``` purescript\ndata MyAction\n  = LoginRequest Username Password\n  | LogoutRequest\n\nloginFlow :: ∀ env state output. Saga' env state MyAction MyAction Unit\nloginFlow = forever do\n  take case _ of\n    LoginRequest user pw -> do\n      ...\n    _ -> Nothing -- ignore other actions\n```\n\n### The `output` parameter\n\nThe `output` parameter denotes the type of output this saga produces. Typically\nthis input type would correspond to your application's actions type. The\n`output` sagas produce is fed back into redux cycle by dispatching it to the\nstore.\n\n``` purescript\ndata MyAction\n  = LoginRequest Username Password\n  | LogoutSuccess Username\n  | LogoutFailure Error\n  | LogoutRequest\n\nloginFlow :: ∀ env state. Saga' env state MyAction MyAction Unit\nloginFlow = forever do\n  take case _ of\n    LoginRequest user pw -> do\n      liftAff (attempt {- some I/O -}) >>= case _ of\n        Left err -> put $ LoginFailure err\n        Right v  -> put $ LoginSuccess user\n    _ -> Nothing -- ignore other actions\n```\n\n### The `a` parameter\n\nThe `a` parameter allows every saga to return a value, making it composable.\nHere's an example of a contrived combinator\n\n``` purescript\ntype MyAppConf = { apiUrl :: String }\ntype Account = { id :: String, email :: String }\n\ngetAccount\n  :: ∀ state input output\n    . String\n  -> Saga' MyAppConf state input output Account\ngetAccount id = do\n  { apiUrl } <- ask\n  liftAff (API.getAccounts apiUrl)\n\n-- later ...\n\nsaga\n  :: ∀ state input output\n   . Saga' MyAppConf state input output Unit\nsaga = do\n  account <- getAccount \"123-dfa-123\"\n  liftEff $ Console.log $ show account.email\n```\n","title":"Saga'","info":{"declType":"data","dataDeclType":"newtype","typeArguments":[["env",null],["state",null],["input",null],["output",null],["a",null]]},"sourceSpan":{"start":[758,1],"name":"/home/felix/projects/purescript-redux-saga/src/Redux/Saga.purs","end":[765,6]}},{"children":[],"comments":null,"title":"SagaPipe","info":{"arguments":[["env",null],["state",null],["input",null],["action",null],["a",null]],"declType":"typeSynonym","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Pipes","Core"],"Pipe"]},{"tag":"TypeVar","contents":"input"}]},{"tag":"TypeVar","contents":"action"}]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad","Reader","Trans"],"ReaderT"]},{"tag":"ParensInType","contents":{"tag":"BinaryNoParensType","contents":[{"tag":"TypeOp","contents":[["Data","Tuple","Nested"],"/\\"]},{"tag":"TypeVar","contents":"env"},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Redux","Saga"],"ThreadContext"]},{"tag":"TypeVar","contents":"state"}]},{"tag":"TypeVar","contents":"input"}]},{"tag":"TypeVar","contents":"action"}]}}]}}]},{"tag":"TypeConstructor","contents":[["Control","Monad","IO"],"IO"]}]}}]},{"tag":"TypeVar","contents":"a"}]}},"sourceSpan":{"start":[808,1],"name":"/home/felix/projects/purescript-redux-saga/src/Redux/Saga.purs","end":[813,8]}},{"children":[],"comments":"A `SagaFiber` is a single computation.\n","title":"SagaFiber","info":{"declType":"data","dataDeclType":"newtype","typeArguments":[["input",null],["a",null]]},"sourceSpan":{"start":[821,1],"name":"/home/felix/projects/purescript-redux-saga/src/Redux/Saga.purs","end":[826,8]}},{"children":[],"comments":"A `ThreadContext` is a collection of saga fibers.\n","title":"ThreadContext","info":{"arguments":[["state",null],["input",null],["action",null]],"declType":"typeSynonym","type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Record"]},{"tag":"RCons","contents":["global",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Redux","Saga"],"GlobalState"]},{"tag":"TypeVar","contents":"state"}]},{"tag":"TypeVar","contents":"action"}]},{"tag":"RCons","contents":["tag",{"tag":"TypeConstructor","contents":[["Prim"],"String"]},{"tag":"RCons","contents":["fibersRef",{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad","Eff","Ref"],"Ref"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Redux","Saga"],"SagaFiber"]},{"tag":"TypeVar","contents":"input"}]},{"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}}]}}]},{"tag":"RCons","contents":["newFiberVar",{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad","Eff","AVar"],"AVar"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Redux","Saga"],"SagaFiber"]},{"tag":"TypeVar","contents":"input"}]},{"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}}]}}]},{"tag":"REmpty"}]}]}]}]}]}},"sourceSpan":{"start":[829,1],"name":"/home/felix/projects/purescript-redux-saga/src/Redux/Saga.purs","end":[834,6]}},{"children":[],"comments":null,"title":"IdSupply","info":{"declType":"data","dataDeclType":"newtype","typeArguments":[]},"sourceSpan":{"start":[841,1],"name":"/home/felix/projects/purescript-redux-saga/src/Redux/Saga.purs","end":[841,38]}},{"children":[],"comments":null,"title":"KeepAlive","info":{"arguments":[],"declType":"typeSynonym","type":{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}},"sourceSpan":{"start":[82,1],"name":"/home/felix/projects/purescript-redux-saga/src/Redux/Saga.purs","end":[82,25]}},{"children":[],"comments":null,"title":"Label","info":{"arguments":[],"declType":"typeSynonym","type":{"tag":"TypeConstructor","contents":[["Prim"],"String"]}},"sourceSpan":{"start":[83,1],"name":"/home/felix/projects/purescript-redux-saga/src/Redux/Saga.purs","end":[83,20]}},{"children":[],"comments":null,"title":"GlobalState","info":{"arguments":[["state",null],["action",null]],"declType":"typeSynonym","type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Record"]},{"tag":"RCons","contents":["idSupply",{"tag":"TypeConstructor","contents":[["Redux","Saga"],"IdSupply"]},{"tag":"RCons","contents":["api",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["React","Redux","Middleware"],"MiddlewareAPI"]},{"tag":"RCons","contents":["infinity",{"tag":"TypeConstructor","contents":[["Control","Monad","IO","Effect"],"INFINITY"]},{"tag":"REmpty"}]}]},{"tag":"TypeVar","contents":"state"}]},{"tag":"TypeVar","contents":"action"}]},{"tag":"REmpty"}]}]}]}},"sourceSpan":{"start":[815,1],"name":"/home/felix/projects/purescript-redux-saga/src/Redux/Saga.purs","end":[818,6]}},{"children":[],"comments":"`take` blocks to receive an input value for which the given function\nreturns `Just` a saga to execute. This saga is then executed on the same\nthread, blocking until it finished running.\n\n#### Example\n\n``` purescript\ndata Action = SayFoo | SayBar\n\nsayOnlyBar\n  :: ∀ env state Action Action\n   . Saga' env state Action Action Unit\nsayOnlyBar = do\n  take case _ of\n    SayFoo -> Nothing\n    SayBar -> Just do\n      liftEff $ Console.log \"Bar!\"\n```\n","title":"take","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["output",{"tag":"ForAll","contents":["input",{"tag":"ForAll","contents":["state",{"tag":"ForAll","contents":["env",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"input"}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Redux","Saga"],"Saga'"]},{"tag":"TypeVar","contents":"env"}]},{"tag":"TypeVar","contents":"state"}]},{"tag":"TypeVar","contents":"input"}]},{"tag":"TypeVar","contents":"output"}]},{"tag":"TypeVar","contents":"a"}]}}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Redux","Saga"],"Saga'"]},{"tag":"TypeVar","contents":"env"}]},{"tag":"TypeVar","contents":"state"}]},{"tag":"TypeVar","contents":"input"}]},{"tag":"TypeVar","contents":"output"}]},{"tag":"TypeVar","contents":"a"}]}]},null]},null]},null]},null]},null]}},"sourceSpan":{"start":[128,1],"name":"/home/felix/projects/purescript-redux-saga/src/Redux/Saga.purs","end":[131,36]}},{"children":[],"comments":"Similar to `take` but runs indefinitely, replacing previously spawned tasks\nwith new ones.\n","title":"takeLatest","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["output",{"tag":"ForAll","contents":["input",{"tag":"ForAll","contents":["state",{"tag":"ForAll","contents":["env",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"input"}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Redux","Saga"],"Saga'"]},{"tag":"TypeVar","contents":"env"}]},{"tag":"TypeVar","contents":"state"}]},{"tag":"TypeVar","contents":"input"}]},{"tag":"TypeVar","contents":"output"}]},{"tag":"TypeVar","contents":"a"}]}}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Redux","Saga"],"Saga'"]},{"tag":"TypeVar","contents":"env"}]},{"tag":"TypeVar","contents":"state"}]},{"tag":"TypeVar","contents":"input"}]},{"tag":"TypeVar","contents":"output"}]},{"tag":"TypeVar","contents":"a"}]}]},null]},null]},null]},null]},null]}},"sourceSpan":{"start":[140,1],"name":"/home/felix/projects/purescript-redux-saga/src/Redux/Saga.purs","end":[143,36]}},{"children":[],"comments":"`fork` puts a saga in the background\n\n#### Example\n\n``` purescript\nhelloWorld\n  :: ∀ env state input output\n   . Saga' env state input output Unit\nhelloWorld = do\n  fork $ do\n    liftAff $ delay $ 10000.0 # Milliseconds\n    liftAff $ Console.log \"World!\"\n  liftEff $ Console.log \"Hello\"\n\n-- >> Hello\n-- >> World!\n```\n\n`fork` returns a `SagaTask a`, which can later be joined using `joinTask` or\ncanceled using `cancelTask`.\n\n**important**: A saga thread won't finish running until all attached forks have\nfinished running!\n","title":"fork","info":{"declType":"value","type":{"tag":"ForAll","contents":["eff",{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["output",{"tag":"ForAll","contents":["input",{"tag":"ForAll","contents":["state",{"tag":"ForAll","contents":["env",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Redux","Saga"],"Saga'"]},{"tag":"TypeVar","contents":"env"}]},{"tag":"TypeVar","contents":"state"}]},{"tag":"TypeVar","contents":"input"}]},{"tag":"TypeVar","contents":"output"}]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Redux","Saga"],"Saga'"]},{"tag":"TypeVar","contents":"env"}]},{"tag":"TypeVar","contents":"state"}]},{"tag":"TypeVar","contents":"input"}]},{"tag":"TypeVar","contents":"output"}]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Redux","Saga"],"SagaFiber"]},{"tag":"TypeVar","contents":"input"}]},{"tag":"TypeVar","contents":"a"}]}}]}]},null]},null]},null]},null]},null]},null]}},"sourceSpan":{"start":[318,1],"name":"/home/felix/projects/purescript-redux-saga/src/Redux/Saga.purs","end":[321,54]}},{"children":[],"comments":"Same as `fork`, but allows setting a name tag\n","title":"forkNamed","info":{"declType":"value","type":{"tag":"ForAll","contents":["eff",{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["output",{"tag":"ForAll","contents":["input",{"tag":"ForAll","contents":["state",{"tag":"ForAll","contents":["env",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Redux","Saga"],"NameTag"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Redux","Saga"],"Saga'"]},{"tag":"TypeVar","contents":"env"}]},{"tag":"TypeVar","contents":"state"}]},{"tag":"TypeVar","contents":"input"}]},{"tag":"TypeVar","contents":"output"}]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Redux","Saga"],"Saga'"]},{"tag":"TypeVar","contents":"env"}]},{"tag":"TypeVar","contents":"state"}]},{"tag":"TypeVar","contents":"input"}]},{"tag":"TypeVar","contents":"output"}]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Redux","Saga"],"SagaFiber"]},{"tag":"TypeVar","contents":"input"}]},{"tag":"TypeVar","contents":"a"}]}}]}]}]},null]},null]},null]},null]},null]},null]}},"sourceSpan":{"start":[333,1],"name":"/home/felix/projects/purescript-redux-saga/src/Redux/Saga.purs","end":[337,54]}},{"children":[],"comments":"Same as `fork`, but allows setting a custom environment\n","title":"fork'","info":{"declType":"value","type":{"tag":"ForAll","contents":["eff",{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["output",{"tag":"ForAll","contents":["input",{"tag":"ForAll","contents":["state",{"tag":"ForAll","contents":["newEnv",{"tag":"ForAll","contents":["env",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"newEnv"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Redux","Saga"],"Saga'"]},{"tag":"TypeVar","contents":"newEnv"}]},{"tag":"TypeVar","contents":"state"}]},{"tag":"TypeVar","contents":"input"}]},{"tag":"TypeVar","contents":"output"}]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Redux","Saga"],"Saga'"]},{"tag":"TypeVar","contents":"env"}]},{"tag":"TypeVar","contents":"state"}]},{"tag":"TypeVar","contents":"input"}]},{"tag":"TypeVar","contents":"output"}]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Redux","Saga"],"SagaFiber"]},{"tag":"TypeVar","contents":"input"}]},{"tag":"TypeVar","contents":"a"}]}}]}]}]},null]},null]},null]},null]},null]},null]},null]}},"sourceSpan":{"start":[325,1],"name":"/home/felix/projects/purescript-redux-saga/src/Redux/Saga.purs","end":[329,54]}},{"children":[],"comments":"Same as `fork'`, but allows setting a name tag\n","title":"forkNamed'","info":{"declType":"value","type":{"tag":"ForAll","contents":["eff",{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["output",{"tag":"ForAll","contents":["input",{"tag":"ForAll","contents":["state",{"tag":"ForAll","contents":["newEnv",{"tag":"ForAll","contents":["env",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"newEnv"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Redux","Saga"],"Saga'"]},{"tag":"TypeVar","contents":"newEnv"}]},{"tag":"TypeVar","contents":"state"}]},{"tag":"TypeVar","contents":"input"}]},{"tag":"TypeVar","contents":"output"}]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Redux","Saga"],"Saga'"]},{"tag":"TypeVar","contents":"env"}]},{"tag":"TypeVar","contents":"state"}]},{"tag":"TypeVar","contents":"input"}]},{"tag":"TypeVar","contents":"output"}]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Redux","Saga"],"SagaFiber"]},{"tag":"TypeVar","contents":"input"}]},{"tag":"TypeVar","contents":"a"}]}}]}]}]}]},null]},null]},null]},null]},null]},null]},null]}},"sourceSpan":{"start":[343,1],"name":"/home/felix/projects/purescript-redux-saga/src/Redux/Saga.purs","end":[348,54]}},{"children":[],"comments":"`put` emits an `output` which gets dispatched to your redux store and in\nturn becomes available to sagas.\n\n#### Example\n\n``` purescript\ndata Action = SayFoo | SayBar\n\nsayOnlyBar\n  :: ∀ env state\n   . Saga' env state Action Action Unit\nsayOnlyBar = do\n\n  put SayBar -- ^ trigger a `SayBar` action right away.\n\n  take case _ of\n    SayFoo -> Nothing\n    SayBar -> Just do\n      liftEff $ Console.log \"Bar!\"\n\n-- >> Bar!\n```\n","title":"put","info":{"declType":"value","type":{"tag":"ForAll","contents":["state",{"tag":"ForAll","contents":["action",{"tag":"ForAll","contents":["input",{"tag":"ForAll","contents":["env",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"action"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Redux","Saga"],"Saga'"]},{"tag":"TypeVar","contents":"env"}]},{"tag":"TypeVar","contents":"state"}]},{"tag":"TypeVar","contents":"input"}]},{"tag":"TypeVar","contents":"action"}]},{"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}]},null]},null]},null]},null]}},"sourceSpan":{"start":[175,1],"name":"/home/felix/projects/purescript-redux-saga/src/Redux/Saga.purs","end":[178,39]}},{"children":[],"comments":"`select` gives access the the current application state and it's output\nvaries over time as the application state changes.\n\n#### Example\n\n``` purescript\nprintState\n  :: ∀ env state input output\n  => Show state\n   . Saga' env state input output Unit\nprintState = do\n  state <- select\n  liftAff $ Console.log $ show state\n```\n","title":"select","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["output",{"tag":"ForAll","contents":["input",{"tag":"ForAll","contents":["state",{"tag":"ForAll","contents":["env",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Redux","Saga"],"Saga'"]},{"tag":"TypeVar","contents":"env"}]},{"tag":"TypeVar","contents":"state"}]},{"tag":"TypeVar","contents":"input"}]},{"tag":"TypeVar","contents":"output"}]},{"tag":"TypeVar","contents":"state"}]},null]},null]},null]},null]},null]}},"sourceSpan":{"start":[253,1],"name":"/home/felix/projects/purescript-redux-saga/src/Redux/Saga.purs","end":[255,40]}},{"children":[],"comments":"`joinTask` blocks until a given `SagaTask` returns.\n\n*NOTE:* Canceling the joining of a task will also cancel the task itself.\n\n#### Example\n\n``` purescript\nhelloWorld\n  :: ∀ env state input output\n   . Saga' env state input output Unit\nhelloWorld = do\n  task <- fork $ do\n    liftAff $ delay $ 10000.0 # Milliseconds\n    liftAff $ Console.log \"World!\"\n  joinTask task\n  liftEff $ Console.log \"Hello\"\n\n-- >> World!\n-- >> Hello\n```\n","title":"joinTask","info":{"declType":"value","type":{"tag":"ForAll","contents":["eff",{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["output",{"tag":"ForAll","contents":["input",{"tag":"ForAll","contents":["state",{"tag":"ForAll","contents":["env",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Redux","Saga"],"SagaFiber"]},{"tag":"TypeWildcard","contents":{"start":[205,16],"name":"/home/felix/projects/purescript-redux-saga/src/Redux/Saga.purs","end":[205,17]}}]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Redux","Saga"],"Saga'"]},{"tag":"TypeVar","contents":"env"}]},{"tag":"TypeVar","contents":"state"}]},{"tag":"TypeVar","contents":"input"}]},{"tag":"TypeVar","contents":"output"}]},{"tag":"TypeVar","contents":"a"}]}]},null]},null]},null]},null]},null]},null]}},"sourceSpan":{"start":[203,1],"name":"/home/felix/projects/purescript-redux-saga/src/Redux/Saga.purs","end":[206,36]}},{"children":[],"comments":"`cancelTask` cancels a given `SagaTask`.\n\n#### Example\n\n``` purescript\nhelloWorld\n  :: ∀ env state input output\n   . Saga' env state input output Unit\nhelloWorld = do\n  task <- fork $ do\n    liftAff $ delay $ 10000.0 # Milliseconds\n    liftAff $ Console.log \"World!\"\n  cancelTask task\n  liftEff $ Console.log \"Hello\"\n\n-- >> Hello\n```\n","title":"cancelTask","info":{"declType":"value","type":{"tag":"ForAll","contents":["eff",{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["output",{"tag":"ForAll","contents":["input",{"tag":"ForAll","contents":["state",{"tag":"ForAll","contents":["env",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Redux","Saga"],"SagaFiber"]},{"tag":"TypeWildcard","contents":{"start":[234,16],"name":"/home/felix/projects/purescript-redux-saga/src/Redux/Saga.purs","end":[234,17]}}]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Redux","Saga"],"Saga'"]},{"tag":"TypeVar","contents":"env"}]},{"tag":"TypeVar","contents":"state"}]},{"tag":"TypeVar","contents":"input"}]},{"tag":"TypeVar","contents":"output"}]},{"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}]},null]},null]},null]},null]},null]},null]}},"sourceSpan":{"start":[232,1],"name":"/home/felix/projects/purescript-redux-saga/src/Redux/Saga.purs","end":[235,39]}},{"children":[],"comments":"Forks a new saga, providing the caller with an `Emitter`, allowing them to\ninject arbitrary values into the forked saga. To discern between upstream\nvalues and injected values, values are tagged `Left` and `Right`\nrespectively.\n","title":"channel","info":{"declType":"value","type":{"tag":"ForAll","contents":["eff",{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["state",{"tag":"ForAll","contents":["action",{"tag":"ForAll","contents":["input'",{"tag":"ForAll","contents":["input",{"tag":"ForAll","contents":["env",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Redux","Saga"],"NameTag"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Redux","Saga"],"Emitter"]},{"tag":"TypeVar","contents":"input'"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad","IO"],"IO"]},{"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Redux","Saga"],"Saga'"]},{"tag":"TypeVar","contents":"env"}]},{"tag":"TypeVar","contents":"state"}]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Either"],"Either"]},{"tag":"TypeVar","contents":"input"}]},{"tag":"TypeVar","contents":"input'"}]}}]},{"tag":"TypeVar","contents":"action"}]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Redux","Saga"],"Saga'"]},{"tag":"TypeVar","contents":"env"}]},{"tag":"TypeVar","contents":"state"}]},{"tag":"TypeVar","contents":"input"}]},{"tag":"TypeVar","contents":"action"}]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Redux","Saga"],"SagaFiber"]},{"tag":"TypeVar","contents":"input"}]},{"tag":"TypeVar","contents":"a"}]}}]}]}]}]},null]},null]},null]},null]},null]},null]},null]}},"sourceSpan":{"start":[95,1],"name":"/home/felix/projects/purescript-redux-saga/src/Redux/Saga.purs","end":[100,54]}},{"children":[],"comments":"`localEnv` runs a saga in a modified environment. This allows us to combine\nsagas in multiple environments. For example, we could write sagas that\nrequire access to certain values like account information without worrying\nabout \"how\" to manually pass those values along.\n\n#### Example\n\n``` purescript\nprintEnv\n  :: ∀ env state input output\n  => Show env\n   . Saga' env state input output Unit\nprintEnv = do\n  env <- ask\n  liftEff $ Console.log $ show env\n\nsaga\n  :: ∀ env state input output\n   . Saga' env state input output Unit\nsaga = do\n  localEnv (const \"Hello\") printEnv\n  localEnv (const \"World!\") printEnv\n\n-- >> Hello\n-- >> World!\n```\n","title":"localEnv","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["output",{"tag":"ForAll","contents":["input",{"tag":"ForAll","contents":["state",{"tag":"ForAll","contents":["env2",{"tag":"ForAll","contents":["env",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"env"}]},{"tag":"TypeVar","contents":"env2"}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Redux","Saga"],"Saga'"]},{"tag":"TypeVar","contents":"env2"}]},{"tag":"TypeVar","contents":"state"}]},{"tag":"TypeVar","contents":"input"}]},{"tag":"TypeVar","contents":"output"}]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Redux","Saga"],"Saga'"]},{"tag":"TypeVar","contents":"env"}]},{"tag":"TypeVar","contents":"state"}]},{"tag":"TypeVar","contents":"input"}]},{"tag":"TypeVar","contents":"output"}]},{"tag":"TypeVar","contents":"a"}]}]}]},null]},null]},null]},null]},null]},null]}},"sourceSpan":{"start":[286,1],"name":"/home/felix/projects/purescript-redux-saga/src/Redux/Saga.purs","end":[290,36]}}]},{"reExports":[],"name":"Redux.Saga.Combinators","comments":null,"declarations":[{"children":[],"comments":null,"title":"debounce","info":{"declType":"value","type":{"tag":"ForAll","contents":["duration",{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["output",{"tag":"ForAll","contents":["input",{"tag":"ForAll","contents":["state",{"tag":"ForAll","contents":["env",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Time","Duration"],"Duration"],"constraintArgs":[{"tag":"TypeVar","contents":"duration"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"duration"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"input"}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Redux","Saga"],"Saga'"]},{"tag":"TypeVar","contents":"env"}]},{"tag":"TypeVar","contents":"state"}]},{"tag":"TypeVar","contents":"input"}]},{"tag":"TypeVar","contents":"output"}]},{"tag":"TypeVar","contents":"a"}]}}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Redux","Saga"],"Saga'"]},{"tag":"TypeVar","contents":"env"}]},{"tag":"TypeVar","contents":"state"}]},{"tag":"TypeVar","contents":"input"}]},{"tag":"TypeVar","contents":"output"}]},{"tag":"TypeVar","contents":"a"}]}]}]}]},null]},null]},null]},null]},null]},null]}},"sourceSpan":{"start":[13,1],"name":"/home/felix/projects/purescript-redux-saga/src/Redux/Saga/Combinators.purs","end":[18,36]}}]}],"resolvedDependencies":{"purescript-safely":"3.0.0","purescript-free":"4.3.0","purescript-proxy":"2.1.0","purescript-exceptions":"3.1.0","purescript-newtype":"2.0.0","purescript-maps":"3.6.0","purescript-control":"3.3.1","purescript-console":"3.0.0","purescript-either":"3.2.0","purescript-react-redux":"6.1.0","purescript-arrays":"4.3.0","purescript-maybe":"3.1.0","purescript-type-equality":"2.1.0","purescript-exists":"3.0.0","purescript-distributive":"3.0.0","purescript-unfoldable":"3.2.0","purescript-invariant":"3.0.0","purescript-pipes-aff":"0.5.0","purescript-io":"5.0.0","purescript-lazy":"3.0.0","purescript-monoid":"3.3.0","purescript-aff":"4.1.1","purescript-react":"3.0.0","purescript-foldable-traversable":"3.7.1","purescript-debug":"3.0.0","purescript-tailrec":"3.3.0","purescript-avar":"2.0.1","purescript-gen":"1.3.1","purescript-functors":"2.2.0","purescript-prelude":"3.3.0","purescript-st":"3.0.0","purescript-bifunctors":"3.0.0","purescript-pipes":"5.0.0","purescript-nonempty":"4.2.0","purescript-contravariant":"3.2.0","purescript-generics":"4.0.0","purescript-unsafe-coerce":"3.0.0","purescript-refs":"3.0.0","purescript-integers":"3.2.0","purescript-eff":"3.2.1","purescript-mmorph":"3.0.0","purescript-ansi":"4.0.0","purescript-const":"3.2.0","purescript-spec":"2.0.0","purescript-freet":"3.0.0","purescript-transformers":"3.6.0","purescript-globals":"3.0.0","purescript-math":"2.1.0","purescript-enums":"3.2.1","purescript-psci-support":"3.0.0","purescript-catenable-lists":"4.0.0","purescript-parallel":"3.3.1","purescript-tuples":"4.1.0","purescript-partial":"1.2.1","purescript-strings":"3.5.0","purescript-identity":"3.1.0","purescript-lists":"4.12.0","purescript-nullable":"3.0.0","purescript-datetime":"3.4.1","purescript-functions":"3.0.0"},"version":"1.0.0","github":["felixschl","purescript-redux-saga"],"versionTag":"v1.0.0","moduleMap":{"Data.BooleanAlgebra":"purescript-prelude","Ansi.Output":"purescript-ansi","Data.Decide":"purescript-contravariant","Data.Ring":"purescript-prelude","Control.Monad.Trans.Class":"purescript-transformers","Data.Functor.Product":"purescript-functors","Data.NonEmpty":"purescript-nonempty","Test.Spec.Console":"purescript-spec","Control.Monad.Eff.Ref":"purescript-refs","Data.Char.Gen":"purescript-strings","Data.String.NonEmpty":"purescript-strings","Control.Monad.Aff.Class":"purescript-aff","Data.Generic":"purescript-generics","Data.Traversable.Accum.Internal":"purescript-foldable-traversable","Data.Enum.Gen":"purescript-enums","Data.Nullable":"purescript-nullable","Control.Comonad.Env":"purescript-transformers","Control.Comonad.Traced.Class":"purescript-transformers","Data.StrMap":"purescript-maps","Test.Spec.Summary":"purescript-spec","Control.Monad.Eff.Unsafe":"purescript-eff","Data.Functor.Compose":"purescript-functors","Data.Int.Bits":"purescript-integers","Data.DateTime":"purescript-datetime","Control.Monad.IOSync.Class":"purescript-io","Data.Bifunctor.Flip":"purescript-bifunctors","Data.String.CodePoints":"purescript-strings","Data.Ord":"purescript-prelude","Control.Monad.Gen":"purescript-gen","Data.Date":"purescript-datetime","Data.Monoid.Dual":"purescript-monoid","Control.Monad.Rec.Class":"purescript-tailrec","Data.StrMap.ST.Unsafe":"purescript-maps","Data.Time.Component":"purescript-datetime","Data.Bitraversable":"purescript-foldable-traversable","Data.Boolean":"purescript-prelude","Data.Map":"purescript-maps","Control.Biapplicative":"purescript-bifunctors","Data.CatList":"purescript-catenable-lists","Control.Parallel.Class":"purescript-parallel","Type.Proxy":"purescript-proxy","Pipes.Core":"purescript-pipes","Data.Coyoneda":"purescript-free","Data.Array.ST.Iterator":"purescript-arrays","Data.DateTime.Gen":"purescript-datetime","Test.Spec.Assertions.Aff":"purescript-spec","Data.Bounded":"purescript-prelude","Control.Monad.State.Trans":"purescript-transformers","Data.TraversableWithIndex":"purescript-foldable-traversable","Data.Int":"purescript-integers","Control.Safely":"purescript-safely","React.DOM.SVG":"purescript-react","Data.StrMap.Gen":"purescript-maps","Data.Show":"purescript-prelude","Data.Bifunctor.Clown":"purescript-bifunctors","Control.Monad.Writer.Trans":"purescript-transformers","Data.Foldable":"purescript-foldable-traversable","Data.Divide":"purescript-contravariant","Control.Comonad.Store.Class":"purescript-transformers","Data.Enum":"purescript-enums","Control.Monad.Trampoline":"purescript-free","Control.Monad.Aff.AVar":"purescript-aff","Control.Apply":"purescript-prelude","Data.Functor.Contravariant":"purescript-contravariant","Data.Tuple.Nested":"purescript-tuples","Control.Monad":"purescript-prelude","Data.Lazy":"purescript-lazy","Data.Monoid":"purescript-monoid","Control.Monad.Eff.Uncurried":"purescript-eff","Control.Monad.List.Trans":"purescript-transformers","React.Redux.Internal":"purescript-react-redux","Control.Monad.RWS":"purescript-transformers","Data.Maybe.First":"purescript-maybe","Control.Bind":"purescript-prelude","Pipes.Aff":"purescript-pipes-aff","Control.Monad.IO":"purescript-io","Data.Monoid.Additive":"purescript-monoid","Data.Map.Gen":"purescript-maps","Data.String.Regex":"purescript-strings","Data.HeytingAlgebra":"purescript-prelude","Control.Alt":"purescript-control","Data.Date.Gen":"purescript-datetime","Control.Monad.Maybe.Trans":"purescript-transformers","Control.Monad.Cont":"purescript-transformers","Data.Time.Component.Gen":"purescript-datetime","Data.List.ZipList":"purescript-lists","Test.Spec.Runner":"purescript-spec","Data.Functor.Coproduct.Nested":"purescript-functors","Data.Ord.Unsafe":"purescript-prelude","Data.Semigroup":"purescript-prelude","Data.Array.NonEmpty":"purescript-arrays","React.Redux.Middleware":"purescript-react-redux","Control.Monad.Reader":"purescript-transformers","Data.Const":"purescript-const","Test.Spec.Reporter.Console":"purescript-spec","Control.Monad.Eff":"purescript-eff","Control.Comonad.Traced.Trans":"purescript-transformers","Test.Spec.Reporter.Dot":"purescript-spec","Data.Array.ST.Partial":"purescript-arrays","Data.StrMap.Unsafe":"purescript-maps","Pipes.Internal":"purescript-pipes","Control.Monad.Morph":"purescript-mmorph","Data.Tuple":"purescript-tuples","Data.Semigroup.Foldable":"purescript-foldable-traversable","Control.Biapply":"purescript-bifunctors","Data.Distributive":"purescript-distributive","Type.Equality":"purescript-type-equality","Control.Alternative":"purescript-control","Data.Semiring":"purescript-prelude","Data.StrMap.ST":"purescript-maps","Pipes.Prelude":"purescript-pipes","Data.Exists":"purescript-exists","Data.Traversable.Accum":"purescript-foldable-traversable","Data.CommutativeRing":"purescript-prelude","Data.NaturalTransformation":"purescript-prelude","Data.Monoid.Conj":"purescript-monoid","React.DOM.SVG.Dynamic":"purescript-react","Data.Yoneda":"purescript-free","Data.Functor.App":"purescript-functors","Data.Unfoldable":"purescript-unfoldable","React.DOM.Props":"purescript-react","Control.Comonad.Store.Trans":"purescript-transformers","Test.Spec.Assertions.String":"purescript-spec","Control.Monad.ST":"purescript-st","Control.Monad.State.Class":"purescript-transformers","Data.List.Types":"purescript-lists","React":"purescript-react","Data.Functor":"purescript-prelude","Unsafe.Coerce":"purescript-unsafe-coerce","Control.Monad.Writer.Class":"purescript-transformers","React.Redux":"purescript-react-redux","Test.Spec.Reporter.Base":"purescript-spec","Data.CatQueue":"purescript-catenable-lists","Control.Monad.Except":"purescript-transformers","Data.Interval":"purescript-datetime","Data.List.Lazy.Types":"purescript-lists","Data.DateTime.Locale":"purescript-datetime","Control.Category":"purescript-prelude","Test.Spec.Reporter.Tap":"purescript-spec","React.DOM":"purescript-react","Data.Interval.Duration":"purescript-datetime","Control.Monad.Gen.Common":"purescript-gen","Control.Monad.RWS.Trans":"purescript-transformers","Test.Spec.Speed":"purescript-spec","Control.Monad.Cont.Trans":"purescript-transformers","Data.Maybe":"purescript-maybe","Data.String.Regex.Unsafe":"purescript-strings","React.Redux.Types":"purescript-react-redux","Control.Comonad":"purescript-control","Data.Function":"purescript-prelude","Data.List":"purescript-lists","Data.Field":"purescript-prelude","Data.List.Lazy":"purescript-lists","Data.EuclideanRing":"purescript-prelude","Data.Functor.Invariant":"purescript-invariant","Control.Comonad.Traced":"purescript-transformers","Global.Unsafe":"purescript-globals","Data.Comparison":"purescript-contravariant","Data.String.Unsafe":"purescript-strings","Prelude":"purescript-prelude","Control.Monad.Aff":"purescript-aff","Data.Predicate":"purescript-contravariant","Partial.Unsafe":"purescript-partial","Data.Array":"purescript-arrays","Data.Bifunctor.Product":"purescript-bifunctors","Control.Extend":"purescript-control","Pipes":"purescript-pipes","Data.Unfoldable1":"purescript-unfoldable","Control.Lazy":"purescript-control","Data.Function.Uncurried":"purescript-functions","Control.Monad.Reader.Trans":"purescript-transformers","Data.Functor.Product.Nested":"purescript-functors","Pipes.ListT":"purescript-pipes","Control.Comonad.Env.Class":"purescript-transformers","Control.Monad.IOSync":"purescript-io","Data.Interval.Duration.Iso":"purescript-datetime","Data.Eq":"purescript-prelude","Data.Either.Nested":"purescript-either","Control.Comonad.Cofree":"purescript-free","Data.Newtype":"purescript-newtype","Control.Monad.Eff.Console":"purescript-console","Data.Semigroup.Traversable":"purescript-foldable-traversable","Test.Spec.Assertions":"purescript-spec","Data.Bifunctor":"purescript-bifunctors","Test.Spec.Reporter":"purescript-spec","Data.Monoid.Disj":"purescript-monoid","Control.Monad.Eff.Exception":"purescript-exceptions","Control.Monad.Gen.Class":"purescript-gen","Data.Array.Partial":"purescript-arrays","Data.String.CaseInsensitive":"purescript-strings","Control.Monad.Free":"purescript-free","Control.Parallel":"purescript-parallel","Control.MonadPlus":"purescript-control","React.DOM.Dynamic":"purescript-react","Data.Void":"purescript-prelude","Control.MonadZero":"purescript-control","Data.DateTime.Instant":"purescript-datetime","Control.Comonad.Store":"purescript-transformers","Control.Monad.Except.Trans":"purescript-transformers","Control.Monad.Aff.Compat":"purescript-aff","Ansi.Codes":"purescript-ansi","Test.Spec":"purescript-spec","Data.Bifunctor.Joker":"purescript-bifunctors","Data.FunctorWithIndex":"purescript-foldable-traversable","Data.Divisible":"purescript-contravariant","React.Redux.Reducer":"purescript-react-redux","Data.DivisionRing":"purescript-prelude","Data.Bifunctor.Wrap":"purescript-bifunctors","PSCI.Support":"purescript-psci-support","Data.Equivalence":"purescript-contravariant","Data.Maybe.Last":"purescript-maybe","Data.Unit":"purescript-prelude","Control.Monad.Eff.Ref.Unsafe":"purescript-refs","Data.List.NonEmpty":"purescript-lists","Data.List.Lazy.NonEmpty":"purescript-lists","Data.Ordering":"purescript-prelude","Data.Functor.Coproduct":"purescript-functors","Control.Monad.Cont.Class":"purescript-transformers","Data.Identity":"purescript-identity","Control.Monad.IO.Class":"purescript-io","Math":"purescript-math","Control.Comonad.Trans.Class":"purescript-transformers","Data.String":"purescript-strings","Control.Plus":"purescript-control","Control.Monad.Eff.Class":"purescript-eff","Data.Time":"purescript-datetime","Type.Row.Effect.Equality":"purescript-type-equality","Data.Time.Duration":"purescript-datetime","Data.Date.Component":"purescript-datetime","Partial":"purescript-partial","Control.Comonad.Env.Trans":"purescript-transformers","Global":"purescript-globals","Control.Monad.Reader.Class":"purescript-transformers","Data.Decidable":"purescript-contravariant","Control.Monad.Aff.Unsafe":"purescript-aff","Data.Monoid.Multiplicative":"purescript-monoid","Data.Array.ST":"purescript-arrays","Control.Monad.Error.Class":"purescript-transformers","Control.Monad.Aff.Console":"purescript-aff","Control.Semigroupoid":"purescript-prelude","Debug.Trace":"purescript-debug","Data.Monoid.Alternate":"purescript-monoid","Data.Char":"purescript-strings","Control.Monad.Free.Trans":"purescript-freet","Data.Bifunctor.Join":"purescript-bifunctors","Control.Monad.Eff.Exception.Unsafe":"purescript-exceptions","Data.Bifoldable":"purescript-foldable-traversable","Data.Monoid.Endo":"purescript-monoid","Test.Spec.Color":"purescript-spec","Control.Monad.State":"purescript-transformers","Data.List.Partial":"purescript-lists","Test.Spec.Runner.Event":"purescript-spec","Data.String.Regex.Flags":"purescript-strings","Data.Either":"purescript-either","Data.Time.Duration.Gen":"purescript-datetime","Data.Date.Component.Gen":"purescript-datetime","Control.Applicative":"purescript-prelude","Data.FoldableWithIndex":"purescript-foldable-traversable","Data.Op":"purescript-contravariant","Control.Monad.IO.Effect":"purescript-io","Control.Monad.Eff.AVar":"purescript-avar","Control.Monad.Writer":"purescript-transformers","Test.Spec.Reporter.Spec":"purescript-spec","Data.Time.Gen":"purescript-datetime","Data.Traversable":"purescript-foldable-traversable","Data.String.Gen":"purescript-strings"},"compilerVersion":"0.11.7"}