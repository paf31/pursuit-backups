{"uploader":"paf31","packageMeta":{"homepage":"https://github.com/purescript/purescript-refs","repository":{"url":"git://github.com/purescript/purescript-refs.git","type":"git"},"ignore":["**/.*","bower_components","node_modules","output","test","bower.json","package.json"],"dependencies":{"purescript-eff":"^3.0.0"},"name":"purescript-refs","license":["MIT"],"description":"Mutable value references"},"tagTime":"2017-03-26T02:10:03+0000","modules":[{"reExports":[],"name":"Control.Monad.Eff.Ref","comments":"This module defines an effect and actions for working with\nglobal mutable variables.\n\n_Note_: The `Control.Monad.ST` provides a _safe_ alternative\nto global mutable variables when mutation is restricted to a\nlocal scope.\n","declarations":[{"children":[],"comments":"The effect associated with the use of global mutable variables.\n","title":"REF","info":{"kind":{"tag":"NamedKind","contents":[["Control","Monad","Eff"],"Effect"]},"declType":"externData"},"sourceSpan":{"start":[13,1],"name":"/private/tmp/pursuit-staging/.psc-package/psc-0.11.3/refs/v3.0.0/src/Control/Monad/Eff/Ref.purs","end":[13,34]}},{"children":[],"comments":"A value of type `Ref a` represents a mutable reference\nwhich holds a value of type `a`.\n","title":"Ref","info":{"kind":{"tag":"FunKind","contents":[{"tag":"NamedKind","contents":[["Prim"],"Type"]},{"tag":"NamedKind","contents":[["Prim"],"Type"]}]},"declType":"externData"},"sourceSpan":{"start":[17,1],"name":"/private/tmp/pursuit-staging/.psc-package/psc-0.11.3/refs/v3.0.0/src/Control/Monad/Eff/Ref.purs","end":[17,40]}},{"children":[],"comments":"Create a new mutable reference containing the specified value.\n","title":"newRef","info":{"declType":"value","type":{"tag":"ForAll","contents":["r",{"tag":"ForAll","contents":["s",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"s"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad","Eff"],"Eff"]},{"tag":"RCons","contents":["ref",{"tag":"TypeConstructor","contents":[["Control","Monad","Eff","Ref"],"REF"]},{"tag":"TypeVar","contents":"r"}]}]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad","Eff","Ref"],"Ref"]},{"tag":"TypeVar","contents":"s"}]}}]}]},null]},null]}},"sourceSpan":{"start":[20,1],"name":"/private/tmp/pursuit-staging/.psc-package/psc-0.11.3/refs/v3.0.0/src/Control/Monad/Eff/Ref.purs","end":[20,71]}},{"children":[],"comments":"Read the current value of a mutable reference\n","title":"readRef","info":{"declType":"value","type":{"tag":"ForAll","contents":["r",{"tag":"ForAll","contents":["s",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad","Eff","Ref"],"Ref"]},{"tag":"TypeVar","contents":"s"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad","Eff"],"Eff"]},{"tag":"RCons","contents":["ref",{"tag":"TypeConstructor","contents":[["Control","Monad","Eff","Ref"],"REF"]},{"tag":"TypeVar","contents":"r"}]}]},{"tag":"TypeVar","contents":"s"}]}]},null]},null]}},"sourceSpan":{"start":[23,1],"name":"/private/tmp/pursuit-staging/.psc-package/psc-0.11.3/refs/v3.0.0/src/Control/Monad/Eff/Ref.purs","end":[23,70]}},{"children":[],"comments":"Update the value of a mutable reference by applying a function\nto the current value.\n","title":"modifyRef'","info":{"declType":"value","type":{"tag":"ForAll","contents":["r",{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["s",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad","Eff","Ref"],"Ref"]},{"tag":"TypeVar","contents":"s"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"s"}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Record"]},{"tag":"RCons","contents":["state",{"tag":"TypeVar","contents":"s"},{"tag":"RCons","contents":["value",{"tag":"TypeVar","contents":"b"},{"tag":"REmpty"}]}]}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad","Eff"],"Eff"]},{"tag":"RCons","contents":["ref",{"tag":"TypeConstructor","contents":[["Control","Monad","Eff","Ref"],"REF"]},{"tag":"TypeVar","contents":"r"}]}]},{"tag":"TypeVar","contents":"b"}]}]}]},null]},null]},null]}},"sourceSpan":{"start":[27,1],"name":"/private/tmp/pursuit-staging/.psc-package/psc-0.11.3/refs/v3.0.0/src/Control/Monad/Eff/Ref.purs","end":[27,112]}},{"children":[],"comments":"Update the value of a mutable reference by applying a function\nto the current value.\n","title":"modifyRef","info":{"declType":"value","type":{"tag":"ForAll","contents":["r",{"tag":"ForAll","contents":["s",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad","Eff","Ref"],"Ref"]},{"tag":"TypeVar","contents":"s"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"s"}]},{"tag":"TypeVar","contents":"s"}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad","Eff"],"Eff"]},{"tag":"RCons","contents":["ref",{"tag":"TypeConstructor","contents":[["Control","Monad","Eff","Ref"],"REF"]},{"tag":"TypeVar","contents":"r"}]}]},{"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}]}]},null]},null]}},"sourceSpan":{"start":[31,1],"name":"/private/tmp/pursuit-staging/.psc-package/psc-0.11.3/refs/v3.0.0/src/Control/Monad/Eff/Ref.purs","end":[31,72]}},{"children":[],"comments":"Update the value of a mutable reference to the specified value.\n","title":"writeRef","info":{"declType":"value","type":{"tag":"ForAll","contents":["r",{"tag":"ForAll","contents":["s",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad","Eff","Ref"],"Ref"]},{"tag":"TypeVar","contents":"s"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"s"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad","Eff"],"Eff"]},{"tag":"RCons","contents":["ref",{"tag":"TypeConstructor","contents":[["Control","Monad","Eff","Ref"],"REF"]},{"tag":"TypeVar","contents":"r"}]}]},{"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}]}]},null]},null]}},"sourceSpan":{"start":[35,1],"name":"/private/tmp/pursuit-staging/.psc-package/psc-0.11.3/refs/v3.0.0/src/Control/Monad/Eff/Ref.purs","end":[35,75]}}]},{"reExports":[],"name":"Control.Monad.Eff.Ref.Unsafe","comments":"Unsafe functions for working with mutable references.\n","declarations":[{"children":[],"comments":"This handler function unsafely removes the `Ref` effect from an\neffectful action.\n\nThis function might be used when it is impossible to prove to the\ntypechecker that a particular mutable reference does not escape\nits scope.\n","title":"unsafeRunRef","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["eff",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad","Eff"],"Eff"]},{"tag":"RCons","contents":["ref",{"tag":"TypeConstructor","contents":[["Control","Monad","Eff","Ref"],"REF"]},{"tag":"TypeVar","contents":"eff"}]}]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad","Eff"],"Eff"]},{"tag":"TypeVar","contents":"eff"}]},{"tag":"TypeVar","contents":"a"}]}]},null]},null]}},"sourceSpan":{"start":[15,1],"name":"/private/tmp/pursuit-staging/.psc-package/psc-0.11.3/refs/v3.0.0/src/Control/Monad/Eff/Ref/Unsafe.purs","end":[15,68]}}]}],"resolvedDependencies":{"purescript-prelude":"3.0.0","purescript-eff":"3.1.0"},"version":"3.0.0","github":["purescript","purescript-refs"],"versionTag":"v3.0.0","moduleMap":{"Data.BooleanAlgebra":"purescript-prelude","Data.Ring":"purescript-prelude","Control.Monad.Eff.Unsafe":"purescript-eff","Data.Ord":"purescript-prelude","Data.Boolean":"purescript-prelude","Data.Bounded":"purescript-prelude","Data.Show":"purescript-prelude","Control.Apply":"purescript-prelude","Control.Monad":"purescript-prelude","Control.Monad.Eff.Uncurried":"purescript-eff","Control.Bind":"purescript-prelude","Data.HeytingAlgebra":"purescript-prelude","Data.Ord.Unsafe":"purescript-prelude","Data.Semigroup":"purescript-prelude","Control.Monad.Eff":"purescript-eff","Data.Semiring":"purescript-prelude","Data.CommutativeRing":"purescript-prelude","Data.NaturalTransformation":"purescript-prelude","Data.Functor":"purescript-prelude","Control.Category":"purescript-prelude","Data.Function":"purescript-prelude","Data.Field":"purescript-prelude","Data.EuclideanRing":"purescript-prelude","Prelude":"purescript-prelude","Data.Eq":"purescript-prelude","Data.Void":"purescript-prelude","Data.Unit":"purescript-prelude","Data.Ordering":"purescript-prelude","Control.Monad.Eff.Class":"purescript-eff","Control.Semigroupoid":"purescript-prelude","Control.Applicative":"purescript-prelude"},"compilerVersion":"0.11.3"}