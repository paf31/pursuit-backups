{"uploader":"ad-si","packageMeta":{"homepage":"https://github.com/adius/purescript-result","repository":{"url":"git://github.com/adius/purescript-result.git","type":"git"},"ignore":["**/.*","bower_components","node_modules","output","test","bower.json","package.json"],"devDependencies":{"purescript-exceptions":"^4.0.0","purescript-console":"^4.1.0"},"dependencies":{"purescript-either":"^4.0.0","purescript-foldable-traversable":"^4.0.0","purescript-prelude":"^4.1.0"},"name":"purescript-result","license":["MIT"],"description":"Values with two possibilities"},"tagTime":"2019-05-08T20:58:54+0000","modules":[{"reExports":[],"name":"Data.Result","comments":null,"declarations":[{"children":[{"comments":null,"title":"Error","info":{"arguments":[{"annotation":[],"tag":"TypeVar","contents":"error"}],"declType":"dataConstructor"},"sourceSpan":null},{"comments":null,"title":"Ok","info":{"arguments":[{"annotation":[],"tag":"TypeVar","contents":"value"}],"declType":"dataConstructor"},"sourceSpan":null},{"comments":null,"title":"functorResult","info":{"declType":"instance","dependencies":[],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Functor"],"Functor"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Result"],"Result"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[34,8],"name":"/Users/adrian/Projects/purescript-result/src/Data/Result.purs","end":[34,52]}},{"comments":null,"title":"invariantResult","info":{"declType":"instance","dependencies":[],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Functor","Invariant"],"Invariant"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Result"],"Result"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[36,1],"name":"/Users/adrian/Projects/purescript-result/src/Data/Result.purs","end":[36,49]}},{"comments":null,"title":"bifunctorResult","info":{"declType":"instance","dependencies":[],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Bifunctor"],"Bifunctor"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Result"],"Result"]}]}},"sourceSpan":{"start":[39,1],"name":"/Users/adrian/Projects/purescript-result/src/Data/Result.purs","end":[39,45]}},{"comments":"The `Apply` instance allows functions contained within a `Ok` to\ntransform a value contained within a `Ok` using the `(<*>)` operator:\n\n``` purescript\nOk f <*> Ok x == Ok (f x)\n```\n\n`Error` values are left untouched:\n\n``` purescript\nError f <*> Ok x == Error x\nOk f <*> Error y == Error y\n```\n\nCombining `Functor`'s `<$>` with `Apply`'s `<*>` can be used to transform a\npure function to take `Result`-typed arguments so `f :: a -> b -> c`\nbecomes `f :: Result l a -> Result l b -> Result l c`:\n\n``` purescript\nf <$> Ok x <*> Ok y == Ok (f x y)\n```\n\nThe `Error`-preserving behaviour of both operators means the result of\nan expression like the above but where any one of the values is `Error`\nmeans the whole result becomes `Error` also, taking the first `Error` value\nfound:\n\n``` purescript\nf <$> Error x <*> Ok y == Error x\nf <$> Ok x <*> Error y == Error y\nf <$> Error x <*> Error y == Error x\n```\n","title":"applyResult","info":{"declType":"instance","dependencies":[],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Control","Apply"],"Apply"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Result"],"Result"]},{"annotation":[],"tag":"TypeVar","contents":"e"}]}]}},"sourceSpan":{"start":[75,1],"name":"/Users/adrian/Projects/purescript-result/src/Data/Result.purs","end":[75,41]}},{"comments":"The `Applicative` instance enables lifting of values into `Result` with the\n`pure` function:\n\n``` purescript\npure x :: Result _ _ == Ok x\n```\n\nCombining `Functor`'s `<$>` with `Apply`'s `<*>` and `Applicative`'s\n`pure` can be used to pass a mixture of `Result` and non-`Result` typed\nvalues to a function that does not usually expect them, by using `pure`\nfor any value that is not already `Result` typed:\n\n``` purescript\nf <$> Ok x <*> pure y == Ok (f x y)\n```\n\nEven though `pure = Ok` it is recommended to use `pure` in situations\nlike this as it allows the choice of `Applicative` to be changed later\nwithout having to go through and replace `Ok` with a new constructor.\n","title":"applicativeResult","info":{"declType":"instance","dependencies":[],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Control","Applicative"],"Applicative"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Result"],"Result"]},{"annotation":[],"tag":"TypeVar","contents":"e"}]}]}},"sourceSpan":{"start":[98,1],"name":"/Users/adrian/Projects/purescript-result/src/Data/Result.purs","end":[98,53]}},{"comments":"The `Alt` instance allows for a choice to be made between two `Result`\nvalues with the `<|>` operator, where the first `Ok` encountered\nis taken.\n\n``` purescript\nOk x <|> Ok y == Ok x\nError x <|> Ok y == Ok y\nError x <|> Error y == Error y\n```\n","title":"altResult","info":{"declType":"instance","dependencies":[],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Control","Alt"],"Alt"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Result"],"Result"]},{"annotation":[],"tag":"TypeVar","contents":"e"}]}]}},"sourceSpan":{"start":[110,1],"name":"/Users/adrian/Projects/purescript-result/src/Data/Result.purs","end":[110,37]}},{"comments":"The `Bind` instance allows sequencing of `Result` values and functions that\nreturn an `Result` by using the `>>=` operator:\n\n``` purescript\nError x >>= f = Error x\nOk x >>= f = f x\n```\n","title":"bindResult","info":{"declType":"instance","dependencies":[],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Control","Bind"],"Bind"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Result"],"Result"]},{"annotation":[],"tag":"TypeVar","contents":"e"}]}]}},"sourceSpan":{"start":[121,1],"name":"/Users/adrian/Projects/purescript-result/src/Data/Result.purs","end":[121,39]}},{"comments":"The `Monad` instance guarantees that there are both `Applicative` and\n`Bind` instances for `Result`. This also enables the `do` syntactic sugar:\n\n``` purescript\ndo\n  x' <- x\n  y' <- y\n  pure (f x' y')\n```\n\nWhich is equivalent to:\n\n``` purescript\nx >>= (\\x' -> y >>= (\\y' -> pure (f x' y')))\n```\n","title":"monadResult","info":{"declType":"instance","dependencies":[],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Control","Monad"],"Monad"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Result"],"Result"]},{"annotation":[],"tag":"TypeVar","contents":"e"}]}]}},"sourceSpan":{"start":[139,1],"name":"/Users/adrian/Projects/purescript-result/src/Data/Result.purs","end":[139,41]}},{"comments":"The `Extend` instance allows sequencing of `Result` values and functions\nthat accept an `Result` and return a non-`Result` result using the\n`<<=` operator.\n\n``` purescript\nf <<= Error x = Error x\nf <<= Ok x = Ok (f (Ok x))\n```\n","title":"extendResult","info":{"declType":"instance","dependencies":[],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Control","Extend"],"Extend"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Result"],"Result"]},{"annotation":[],"tag":"TypeVar","contents":"e"}]}]}},"sourceSpan":{"start":[149,1],"name":"/Users/adrian/Projects/purescript-result/src/Data/Result.purs","end":[149,43]}},{"comments":"The `Show` instance allows `Result` values to be rendered as a string with\n`show` whenever there is an `Show` instance for both type the `Result` can\ncontain.\n","title":"showResult","info":{"declType":"instance","dependencies":[{"constraintAnn":[],"constraintClass":[["Data","Show"],"Show"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"a"}],"constraintData":null},{"constraintAnn":[],"constraintClass":[["Data","Show"],"Show"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"b"}],"constraintData":null}],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Show"],"Show"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Result"],"Result"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]},{"annotation":[],"tag":"TypeVar","contents":"b"}]}]}},"sourceSpan":{"start":[156,1],"name":"/Users/adrian/Projects/purescript-result/src/Data/Result.purs","end":[156,61]}},{"comments":null,"title":"eqResult","info":{"declType":"instance","dependencies":[{"constraintAnn":[],"constraintClass":[["Data","Eq"],"Eq"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"a"}],"constraintData":null},{"constraintAnn":[],"constraintClass":[["Data","Eq"],"Eq"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"b"}],"constraintData":null}],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Eq"],"Eq"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Result"],"Result"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]},{"annotation":[],"tag":"TypeVar","contents":"b"}]}]}},"sourceSpan":{"start":[163,8],"name":"/Users/adrian/Projects/purescript-result/src/Data/Result.purs","end":[163,60]}},{"comments":null,"title":"eq1Result","info":{"declType":"instance","dependencies":[{"constraintAnn":[],"constraintClass":[["Data","Eq"],"Eq"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"a"}],"constraintData":null}],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Eq"],"Eq1"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Result"],"Result"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[165,8],"name":"/Users/adrian/Projects/purescript-result/src/Data/Result.purs","end":[165,52]}},{"comments":null,"title":"ordResult","info":{"declType":"instance","dependencies":[{"constraintAnn":[],"constraintClass":[["Data","Ord"],"Ord"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"a"}],"constraintData":null},{"constraintAnn":[],"constraintClass":[["Data","Ord"],"Ord"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"b"}],"constraintData":null}],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Ord"],"Ord"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Result"],"Result"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]},{"annotation":[],"tag":"TypeVar","contents":"b"}]}]}},"sourceSpan":{"start":[172,8],"name":"/Users/adrian/Projects/purescript-result/src/Data/Result.purs","end":[172,64]}},{"comments":null,"title":"ord1Result","info":{"declType":"instance","dependencies":[{"constraintAnn":[],"constraintClass":[["Data","Ord"],"Ord"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"a"}],"constraintData":null}],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Ord"],"Ord1"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Result"],"Result"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[174,8],"name":"/Users/adrian/Projects/purescript-result/src/Data/Result.purs","end":[174,55]}},{"comments":null,"title":"boundedResult","info":{"declType":"instance","dependencies":[{"constraintAnn":[],"constraintClass":[["Data","Bounded"],"Bounded"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"a"}],"constraintData":null},{"constraintAnn":[],"constraintClass":[["Data","Bounded"],"Bounded"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"b"}],"constraintData":null}],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Bounded"],"Bounded"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Result"],"Result"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]},{"annotation":[],"tag":"TypeVar","contents":"b"}]}]}},"sourceSpan":{"start":[176,1],"name":"/Users/adrian/Projects/purescript-result/src/Data/Result.purs","end":[176,73]}},{"comments":null,"title":"foldableResult","info":{"declType":"instance","dependencies":[],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Foldable"],"Foldable"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Result"],"Result"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[180,1],"name":"/Users/adrian/Projects/purescript-result/src/Data/Result.purs","end":[180,47]}},{"comments":null,"title":"bifoldableResult","info":{"declType":"instance","dependencies":[],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Bifoldable"],"Bifoldable"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Result"],"Result"]}]}},"sourceSpan":{"start":[188,1],"name":"/Users/adrian/Projects/purescript-result/src/Data/Result.purs","end":[188,47]}},{"comments":null,"title":"traversableResult","info":{"declType":"instance","dependencies":[],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Traversable"],"Traversable"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Result"],"Result"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[196,1],"name":"/Users/adrian/Projects/purescript-result/src/Data/Result.purs","end":[196,53]}},{"comments":null,"title":"bitraversableResult","info":{"declType":"instance","dependencies":[],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Bitraversable"],"Bitraversable"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Result"],"Result"]}]}},"sourceSpan":{"start":[202,1],"name":"/Users/adrian/Projects/purescript-result/src/Data/Result.purs","end":[202,53]}},{"comments":null,"title":"semigroupResult","info":{"declType":"instance","dependencies":[{"constraintAnn":[],"constraintClass":[["Data","Semigroup"],"Semigroup"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"b"}],"constraintData":null}],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Semigroup"],"Semigroup"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Result"],"Result"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]},{"annotation":[],"tag":"TypeVar","contents":"b"}]}]}},"sourceSpan":{"start":[208,1],"name":"/Users/adrian/Projects/purescript-result/src/Data/Result.purs","end":[208,68]}}],"comments":"The `Result` type is used to represent computations\nthat may succeed or fail.\n","title":"Result","info":{"declType":"data","dataDeclType":"data","typeArguments":[["error",null],["value",null]]},"sourceSpan":{"start":[20,1],"name":"/Users/adrian/Projects/purescript-result/src/Data/Result.purs","end":[20,49]}},{"children":[],"comments":"Convert an `Either` to a `Result`.\n\n```purescript\nfromEither (Left \"error\") == Error \"error\"\nfromEither (Right \"value\") == Ok \"value\"\n```\n","title":"fromEither","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["v",{"annotation":[],"tag":"ForAll","contents":["e",{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Either"],"Either"]},{"annotation":[],"tag":"TypeVar","contents":"e"}]},{"annotation":[],"tag":"TypeVar","contents":"v"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Result"],"Result"]},{"annotation":[],"tag":"TypeVar","contents":"e"}]},{"annotation":[],"tag":"TypeVar","contents":"v"}]}]},null]},null]}},"sourceSpan":{"start":[218,1],"name":"/Users/adrian/Projects/purescript-result/src/Data/Result.purs","end":[218,51]}},{"children":[],"comments":"Convert a `Result` to an `Either`.\n\n```purescript\ntoEither (Error \"error\") == Left \"error\"\ntoEither (Ok \"value\") == Right \"value\"\n```\n","title":"toEither","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["v",{"annotation":[],"tag":"ForAll","contents":["e",{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Result"],"Result"]},{"annotation":[],"tag":"TypeVar","contents":"e"}]},{"annotation":[],"tag":"TypeVar","contents":"v"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Either"],"Either"]},{"annotation":[],"tag":"TypeVar","contents":"e"}]},{"annotation":[],"tag":"TypeVar","contents":"v"}]}]},null]},null]}},"sourceSpan":{"start":[229,1],"name":"/Users/adrian/Projects/purescript-result/src/Data/Result.purs","end":[229,49]}},{"children":[],"comments":"Takes two functions and an `Result` value, if the value is a `Error` the\ninner value is applied to the first function, if the value is a `Ok`\nthe inner value is applied to the second function.\n\n``` purescript\nResult f g (Error x) == f x\nResult f g (Ok y) == g y\n```\n","title":"result","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["c",{"annotation":[],"tag":"ForAll","contents":["b",{"annotation":[],"tag":"ForAll","contents":["a",{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]},{"annotation":[],"tag":"TypeVar","contents":"c"}]}}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeVar","contents":"b"}]},{"annotation":[],"tag":"TypeVar","contents":"c"}]}}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Result"],"Result"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]},{"annotation":[],"tag":"TypeVar","contents":"b"}]}]},{"annotation":[],"tag":"TypeVar","contents":"c"}]}]}]},null]},null]},null]}},"sourceSpan":{"start":[243,1],"name":"/Users/adrian/Projects/purescript-result/src/Data/Result.purs","end":[243,64]}},{"children":[],"comments":"Combine two alternatives.\n","title":"choose","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["b",{"annotation":[],"tag":"ForAll","contents":["a",{"annotation":[],"tag":"ForAll","contents":["m",{"annotation":[],"tag":"ConstrainedType","contents":[{"constraintAnn":[],"constraintClass":[["Control","Alt"],"Alt"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"m"}],"constraintData":null},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeVar","contents":"m"},{"annotation":[],"tag":"TypeVar","contents":"a"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeVar","contents":"m"},{"annotation":[],"tag":"TypeVar","contents":"b"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeVar","contents":"m"},{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Result"],"Result"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]},{"annotation":[],"tag":"TypeVar","contents":"b"}]}}]}]}]}]},null]},null]},null]}},"sourceSpan":{"start":[248,1],"name":"/Users/adrian/Projects/purescript-result/src/Data/Result.purs","end":[248,62]}},{"children":[],"comments":"Returns `true` when the `Result` value was constructed with `Error`.\n","title":"isError","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["b",{"annotation":[],"tag":"ForAll","contents":["a",{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Result"],"Result"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]},{"annotation":[],"tag":"TypeVar","contents":"b"}]}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]},null]},null]}},"sourceSpan":{"start":[252,1],"name":"/Users/adrian/Projects/purescript-result/src/Data/Result.purs","end":[252,45]}},{"children":[],"comments":"Returns `true` when the `Result` value was constructed with `Ok`.\n","title":"isOk","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["b",{"annotation":[],"tag":"ForAll","contents":["a",{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Result"],"Result"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]},{"annotation":[],"tag":"TypeVar","contents":"b"}]}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]},null]},null]}},"sourceSpan":{"start":[256,1],"name":"/Users/adrian/Projects/purescript-result/src/Data/Result.purs","end":[256,42]}},{"children":[],"comments":"A partial function that extracts the value\nfrom the `Error` data constructor.\nPassing a `Ok` to `fromError` will throw an error at runtime.\n","title":"fromError","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["b",{"annotation":[],"tag":"ForAll","contents":["a",{"annotation":[],"tag":"ConstrainedType","contents":[{"constraintAnn":[],"constraintClass":[["Prim"],"Partial"],"constraintArgs":[],"constraintData":null},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Result"],"Result"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]},{"annotation":[],"tag":"TypeVar","contents":"b"}]}]},{"annotation":[],"tag":"TypeVar","contents":"a"}]}]},null]},null]}},"sourceSpan":{"start":[262,1],"name":"/Users/adrian/Projects/purescript-result/src/Data/Result.purs","end":[262,52]}},{"children":[],"comments":"A partial function that extracts the value from the `Ok` data constructor.\nPassing a `Error` to `fromOk` will throw an error at runtime.\n","title":"fromOk","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["b",{"annotation":[],"tag":"ForAll","contents":["a",{"annotation":[],"tag":"ConstrainedType","contents":[{"constraintAnn":[],"constraintClass":[["Prim"],"Partial"],"constraintArgs":[],"constraintData":null},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Result"],"Result"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]},{"annotation":[],"tag":"TypeVar","contents":"b"}]}]},{"annotation":[],"tag":"TypeVar","contents":"b"}]}]},null]},null]}},"sourceSpan":{"start":[267,1],"name":"/Users/adrian/Projects/purescript-result/src/Data/Result.purs","end":[267,49]}},{"children":[],"comments":"Takes a default and a `Maybe` value, if the value is a `Just`, turn it into\na `Ok`, if the value is a `Nothing` use the provided default as a `Error`\n\n```purescript\nnote \"default\" Nothing = Error \"default\"\nnote \"default\" (Just 1) = Ok 1\n```\n","title":"note","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["b",{"annotation":[],"tag":"ForAll","contents":["a",{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"annotation":[],"tag":"TypeVar","contents":"b"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Result"],"Result"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]},{"annotation":[],"tag":"TypeVar","contents":"b"}]}]}]},null]},null]}},"sourceSpan":{"start":[277,1],"name":"/Users/adrian/Projects/purescript-result/src/Data/Result.purs","end":[277,47]}},{"children":[],"comments":"Turns an `Result` into a `Maybe`,\nby throwing eventual `Error` values away and converting\nthem into `Nothing`.\n`Ok` values get turned into `Just`s.\n\n```purescript\nhush (Error \"ParseError\") = Nothing\nhush (Ok 42) = Just 42\n```\n","title":"hush","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["b",{"annotation":[],"tag":"ForAll","contents":["a",{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Result"],"Result"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]},{"annotation":[],"tag":"TypeVar","contents":"b"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"annotation":[],"tag":"TypeVar","contents":"b"}]}]},null]},null]}},"sourceSpan":{"start":[289,1],"name":"/Users/adrian/Projects/purescript-result/src/Data/Result.purs","end":[289,42]}}]}],"resolvedDependencies":{"purescript-exceptions":"4.0.0","purescript-newtype":"3.0.0","purescript-effect":"2.0.1","purescript-control":"4.1.0","purescript-console":"4.2.0","purescript-either":"4.1.1","purescript-maybe":"4.0.1","purescript-invariant":"4.1.0","purescript-foldable-traversable":"4.1.1","purescript-prelude":"4.1.1","purescript-bifunctors":"4.0.0","purescript-orders":"4.0.0"},"version":"1.0.2","github":["adius","purescript-result"],"versionTag":"v1.0.2","moduleMap":{"Data.BooleanAlgebra":"purescript-prelude","Data.Ring":"purescript-prelude","Effect.Uncurried":"purescript-effect","Effect":"purescript-effect","Data.Traversable.Accum.Internal":"purescript-foldable-traversable","Data.Bifunctor.Flip":"purescript-bifunctors","Data.Ord":"purescript-prelude","Type.Data.Row":"purescript-prelude","Data.Monoid.Dual":"purescript-prelude","Data.Bitraversable":"purescript-foldable-traversable","Data.Boolean":"purescript-prelude","Control.Biapplicative":"purescript-bifunctors","Effect.Exception.Unsafe":"purescript-exceptions","Data.Bounded":"purescript-prelude","Data.TraversableWithIndex":"purescript-foldable-traversable","Data.Show":"purescript-prelude","Data.Bifunctor.Clown":"purescript-bifunctors","Data.Foldable":"purescript-foldable-traversable","Control.Apply":"purescript-prelude","Control.Monad":"purescript-prelude","Data.Monoid":"purescript-prelude","Data.Maybe.First":"purescript-maybe","Control.Bind":"purescript-prelude","Data.Monoid.Additive":"purescript-prelude","Data.Symbol":"purescript-prelude","Data.HeytingAlgebra":"purescript-prelude","Control.Alt":"purescript-control","Type.Data.RowList":"purescript-prelude","Data.Either.Inject":"purescript-either","Data.Ord.Min":"purescript-orders","Data.Ord.Unsafe":"purescript-prelude","Data.Semigroup":"purescript-prelude","Data.Ord.Down":"purescript-orders","Effect.Unsafe":"purescript-effect","Data.Semigroup.Foldable":"purescript-foldable-traversable","Control.Biapply":"purescript-bifunctors","Effect.Exception":"purescript-exceptions","Control.Alternative":"purescript-control","Data.Semiring":"purescript-prelude","Effect.Console":"purescript-console","Data.Traversable.Accum":"purescript-foldable-traversable","Data.CommutativeRing":"purescript-prelude","Data.NaturalTransformation":"purescript-prelude","Data.Monoid.Conj":"purescript-prelude","Data.Functor":"purescript-prelude","Control.Category":"purescript-prelude","Data.Maybe":"purescript-maybe","Control.Comonad":"purescript-control","Data.Function":"purescript-prelude","Data.Field":"purescript-prelude","Data.EuclideanRing":"purescript-prelude","Data.Semigroup.Last":"purescript-prelude","Data.Semigroup.First":"purescript-prelude","Data.Functor.Invariant":"purescript-invariant","Prelude":"purescript-prelude","Effect.Class":"purescript-effect","Data.Bifunctor.Product":"purescript-bifunctors","Control.Extend":"purescript-control","Control.Lazy":"purescript-control","Data.Eq":"purescript-prelude","Data.Either.Nested":"purescript-either","Data.Newtype":"purescript-newtype","Data.Semigroup.Traversable":"purescript-foldable-traversable","Data.Bifunctor":"purescript-bifunctors","Data.Monoid.Disj":"purescript-prelude","Control.MonadPlus":"purescript-control","Data.Void":"purescript-prelude","Control.MonadZero":"purescript-control","Data.Ord.Max":"purescript-orders","Data.Bifunctor.Joker":"purescript-bifunctors","Data.FunctorWithIndex":"purescript-foldable-traversable","Data.DivisionRing":"purescript-prelude","Data.Bifunctor.Wrap":"purescript-bifunctors","Data.Maybe.Last":"purescript-maybe","Data.Unit":"purescript-prelude","Data.Ordering":"purescript-prelude","Control.Plus":"purescript-control","Data.Monoid.Multiplicative":"purescript-prelude","Control.Semigroupoid":"purescript-prelude","Data.Monoid.Alternate":"purescript-control","Effect.Class.Console":"purescript-console","Data.Bifunctor.Join":"purescript-bifunctors","Data.Bifoldable":"purescript-foldable-traversable","Data.Monoid.Endo":"purescript-prelude","Data.Either":"purescript-either","Control.Applicative":"purescript-prelude","Data.FoldableWithIndex":"purescript-foldable-traversable","Record.Unsafe":"purescript-prelude","Data.Traversable":"purescript-foldable-traversable"},"compilerVersion":"0.12.2"}