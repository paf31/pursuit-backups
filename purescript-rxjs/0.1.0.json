{"uploader":"jasonzoladz","packageMeta":{"repository":{"url":"git://github.com/jasonzoladz/purescript-rxjs.git","type":"git"},"resolutions":{"purescript-quickcheck":"^3.1.1"},"ignore":["**/.*","node_modules","bower_components","output"],"devDependencies":{"purescript-debug":"^2.0.0","purescript-test-unit":"^10.0.1","purescript-psci-support":"^2.0.0","purescript-quickcheck":"^3.1.1"},"dependencies":{"purescript-exceptions":"^2.0.0","purescript-maps":"^2.1.2","purescript-console":"^2.0.0","purescript-arrays":"^3.1.0","purescript-dom":"^3.3.1","purescript-aff":"^2.0.2","purescript-prelude":"^2.1.0","purescript-st":"^2.0.0","purescript-quickcheck":"^3.1.1","purescript-eff-functions":"^2.0.0","purescript-functions":"^2.0.0"},"name":"purescript-rxjs","license":["MIT"]},"tagTime":"2017-03-13T14:04:54+0000","modules":[{"reExports":[],"name":"RxJS.AsyncSubject","comments":null,"declarations":[{"children":[{"comments":null,"title":"functorAsyncSubject","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Functor"],"Functor"]},{"tag":"TypeConstructor","contents":[["RxJS","AsyncSubject"],"AsyncSubject"]}]}},"sourceSpan":{"start":[101,1],"name":"src/RxJS/AsyncSubject.purs","end":[102,13]}},{"comments":null,"title":"applyAsyncSubject","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Apply"],"Apply"]},{"tag":"TypeConstructor","contents":[["RxJS","AsyncSubject"],"AsyncSubject"]}]}},"sourceSpan":{"start":[104,1],"name":"src/RxJS/AsyncSubject.purs","end":[105,27]}},{"comments":null,"title":"applicativeAsyncSubject","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Applicative"],"Applicative"]},{"tag":"TypeConstructor","contents":[["RxJS","AsyncSubject"],"AsyncSubject"]}]}},"sourceSpan":{"start":[107,1],"name":"src/RxJS/AsyncSubject.purs","end":[108,14]}},{"comments":null,"title":"bindAsyncSubject","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Bind"],"Bind"]},{"tag":"TypeConstructor","contents":[["RxJS","AsyncSubject"],"AsyncSubject"]}]}},"sourceSpan":{"start":[110,1],"name":"src/RxJS/AsyncSubject.purs","end":[111,18]}},{"comments":null,"title":"monadAsyncSubject","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad"],"Monad"]},{"tag":"TypeConstructor","contents":[["RxJS","AsyncSubject"],"AsyncSubject"]}]}},"sourceSpan":{"start":[113,1],"name":"src/RxJS/AsyncSubject.purs","end":[113,49]}},{"comments":"NOTE: The semigroup instance uses `merge` NOT `concat`.\n","title":"semigroupAsyncSubject","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Semigroup"],"Semigroup"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","AsyncSubject"],"AsyncSubject"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[116,1],"name":"src/RxJS/AsyncSubject.purs","end":[117,17]}},{"comments":null,"title":"altAsyncSubject","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Alt"],"Alt"]},{"tag":"TypeConstructor","contents":[["RxJS","AsyncSubject"],"AsyncSubject"]}]}},"sourceSpan":{"start":[119,1],"name":"src/RxJS/AsyncSubject.purs","end":[120,14]}},{"comments":null,"title":"plusAsyncSubject","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Plus"],"Plus"]},{"tag":"TypeConstructor","contents":[["RxJS","AsyncSubject"],"AsyncSubject"]}]}},"sourceSpan":{"start":[122,1],"name":"src/RxJS/AsyncSubject.purs","end":[123,22]}},{"comments":null,"title":"alternativeAsyncSubject","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Alternative"],"Alternative"]},{"tag":"TypeConstructor","contents":[["RxJS","AsyncSubject"],"AsyncSubject"]}]}},"sourceSpan":{"start":[125,1],"name":"src/RxJS/AsyncSubject.purs","end":[125,61]}},{"comments":null,"title":"monadZeroAsyncSubject","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","MonadZero"],"MonadZero"]},{"tag":"TypeConstructor","contents":[["RxJS","AsyncSubject"],"AsyncSubject"]}]}},"sourceSpan":{"start":[127,1],"name":"src/RxJS/AsyncSubject.purs","end":[127,57]}},{"comments":null,"title":"monadPlusAsyncSubject","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","MonadPlus"],"MonadPlus"]},{"tag":"TypeConstructor","contents":[["RxJS","AsyncSubject"],"AsyncSubject"]}]}},"sourceSpan":{"start":[129,1],"name":"src/RxJS/AsyncSubject.purs","end":[129,57]}}],"comments":"Please see [RxJS Version 5.* documentation](http://reactivex.io/rxjs/) for\nadditional details on proper usage of the library.\n","title":"AsyncSubject","info":{"kind":{"tag":"FunKind","contents":[{"tag":"NamedKind","contents":[["Prim"],"Type"]},{"tag":"NamedKind","contents":[["Prim"],"Type"]}]},"declType":"externData"},"sourceSpan":{"start":[99,1],"name":"src/RxJS/AsyncSubject.purs","end":[99,43]}},{"children":[],"comments":"Makes every `next` call run in the new Scheduler.\n","title":"observeOn","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["RxJS","Scheduler"],"Scheduler"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","AsyncSubject"],"AsyncSubject"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","AsyncSubject"],"AsyncSubject"]},{"tag":"TypeVar","contents":"a"}]}]}]},null]}},"sourceSpan":{"start":[134,1],"name":"src/RxJS/AsyncSubject.purs","end":[134,84]}},{"children":[],"comments":"Makes subscription happen on a given Scheduler.\n","title":"subscribeOn","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["RxJS","Scheduler"],"Scheduler"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","AsyncSubject"],"AsyncSubject"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","AsyncSubject"],"AsyncSubject"]},{"tag":"TypeVar","contents":"a"}]}]}]},null]}},"sourceSpan":{"start":[137,1],"name":"src/RxJS/AsyncSubject.purs","end":[137,86]}},{"children":[],"comments":"Subscribing to an AsyncSubject is like calling a function, providing\n`next`, `error` and `completed` effects to which the data will be delivered.\n","title":"subscribe","info":{"declType":"value","type":{"tag":"ForAll","contents":["e",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Subscriber"],"Subscriber"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","AsyncSubject"],"AsyncSubject"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad","Eff"],"Eff"]},{"tag":"TypeVar","contents":"e"}]},{"tag":"TypeConstructor","contents":[["RxJS","Subscription"],"Subscription"]}]}]}]},null]},null]}},"sourceSpan":{"start":[143,1],"name":"src/RxJS/AsyncSubject.purs","end":[143,97]}},{"children":[],"comments":null,"title":"subscribeNext","info":{"declType":"value","type":{"tag":"ForAll","contents":["e",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad","Eff"],"Eff"]},{"tag":"TypeVar","contents":"e"}]},{"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","AsyncSubject"],"AsyncSubject"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad","Eff"],"Eff"]},{"tag":"TypeVar","contents":"e"}]},{"tag":"TypeConstructor","contents":[["RxJS","Subscription"],"Subscription"]}]}]}]},null]},null]}},"sourceSpan":{"start":[148,1],"name":"src/RxJS/AsyncSubject.purs","end":[151,27]}},{"children":[],"comments":"Creates an AsyncSubject that emits the value specify,\nand then emits a complete notification.  An alias for `of`.\n","title":"just","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","AsyncSubject"],"AsyncSubject"]},{"tag":"TypeVar","contents":"a"}]}]},null]}},"sourceSpan":{"start":[160,1],"name":"src/RxJS/AsyncSubject.purs","end":[160,53]}},{"children":[],"comments":"Create an Observable from a AsyncSubject\n","title":"asObservable","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","AsyncSubject"],"AsyncSubject"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"Observable"]},{"tag":"TypeVar","contents":"a"}]}]},null]}},"sourceSpan":{"start":[165,1],"name":"src/RxJS/AsyncSubject.purs","end":[165,72]}},{"children":[],"comments":"Collects values from the first AsyncSubject into an Array, and emits that array only when\nsecond AsyncSubject emits.\n","title":"buffer","info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","AsyncSubject"],"AsyncSubject"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","AsyncSubject"],"AsyncSubject"]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","AsyncSubject"],"AsyncSubject"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]}}]}]}]},null]},null]}},"sourceSpan":{"start":[172,1],"name":"src/RxJS/AsyncSubject.purs","end":[172,96]}},{"children":[],"comments":"Collects values from the past as an array, emits that array when\nits size (arg1) reaches the specified buffer size, and starts a new buffer.\nThe new buffer starts with nth (arg2) element of the AsyncSubject counting\nfrom the beginning of the *last* buffer.\n","title":"bufferCount","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","AsyncSubject"],"AsyncSubject"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","AsyncSubject"],"AsyncSubject"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]}}]}]}]}]},null]}},"sourceSpan":{"start":[178,1],"name":"src/RxJS/AsyncSubject.purs","end":[178,95]}},{"children":[],"comments":"Collects values from the source AsyncSubject (arg1) as an array. Starts collecting only when\nthe opening (arg2) AsyncSubject emits, and calls the closingSelector function (arg3) to get an AsyncSubject\nthat decides when to close the buffer.  Another buffer opens when the\nopening AsyncSubject emits its next value.\n","title":"bufferToggle","info":{"declType":"value","type":{"tag":"ForAll","contents":["c",{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","AsyncSubject"],"AsyncSubject"]},{"tag":"TypeVar","contents":"a"}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","AsyncSubject"],"AsyncSubject"]},{"tag":"TypeVar","contents":"b"}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","AsyncSubject"],"AsyncSubject"]},{"tag":"TypeVar","contents":"c"}]}]}}]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","AsyncSubject"],"AsyncSubject"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]}}]}}]}]}]},null]},null]},null]}},"sourceSpan":{"start":[193,1],"name":"src/RxJS/AsyncSubject.purs","end":[197,30]}},{"children":[],"comments":"Collects values from the past as an array. When it starts collecting values,\nit calls a function that returns an AsyncSubject that emits to close the\nbuffer and restart collecting.\n","title":"bufferWhen","info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","AsyncSubject"],"AsyncSubject"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","AsyncSubject"],"AsyncSubject"]},{"tag":"TypeVar","contents":"b"}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","AsyncSubject"],"AsyncSubject"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]}}]}]}]},null]},null]}},"sourceSpan":{"start":[207,1],"name":"src/RxJS/AsyncSubject.purs","end":[207,107]}},{"children":[],"comments":"Equivalent to mergeMap (a.k.a, `>>=`) EXCEPT that, unlike mergeMap,\nthe next bind will not run until the AsyncSubject generated by the projection function (arg2)\ncompletes.  That is, composition is sequential, not concurrent.\nWarning: if source values arrive endlessly and faster than their corresponding\ninner AsyncSubjects can complete, it will result in memory issues as inner\nAsyncSubjects amass in an unbounded buffer waiting for their turn to be subscribed to.\n","title":"concatMap","info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","AsyncSubject"],"AsyncSubject"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","AsyncSubject"],"AsyncSubject"]},{"tag":"TypeVar","contents":"b"}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","AsyncSubject"],"AsyncSubject"]},{"tag":"TypeVar","contents":"b"}]}]}]},null]},null]}},"sourceSpan":{"start":[215,1],"name":"src/RxJS/AsyncSubject.purs","end":[215,98]}},{"children":[],"comments":"The type signature explains it best.  Warning: Like `concatMap`, composition is sequential.\n","title":"concatMapTo","info":{"declType":"value","type":{"tag":"ForAll","contents":["c",{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","AsyncSubject"],"AsyncSubject"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","AsyncSubject"],"AsyncSubject"]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","AsyncSubject"],"AsyncSubject"]},{"tag":"TypeVar","contents":"c"}]}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","AsyncSubject"],"AsyncSubject"]},{"tag":"TypeVar","contents":"c"}]}]}]}]},null]},null]},null]}},"sourceSpan":{"start":[218,1],"name":"src/RxJS/AsyncSubject.purs","end":[219,100]}},{"children":[],"comments":"It's Like concatMap (a.k.a, `>>=`) EXCEPT that it ignores every new projected\nAsyncSubject if the previous projected AsyncSubject has not yet completed.\n","title":"exhaustMap","info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","AsyncSubject"],"AsyncSubject"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","AsyncSubject"],"AsyncSubject"]},{"tag":"TypeVar","contents":"b"}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","AsyncSubject"],"AsyncSubject"]},{"tag":"TypeVar","contents":"b"}]}]}]},null]},null]}},"sourceSpan":{"start":[223,1],"name":"src/RxJS/AsyncSubject.purs","end":[223,99]}},{"children":[],"comments":"It's similar to mergeMap, but applies the projection function to every source\nvalue as well as every output value. It's recursive.\n","title":"expand","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","AsyncSubject"],"AsyncSubject"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","AsyncSubject"],"AsyncSubject"]},{"tag":"TypeVar","contents":"a"}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","AsyncSubject"],"AsyncSubject"]},{"tag":"TypeVar","contents":"a"}]}]}]},null]}},"sourceSpan":{"start":[227,1],"name":"src/RxJS/AsyncSubject.purs","end":[227,93]}},{"children":[],"comments":"Groups the items emitted by an AsyncSubject (arg2) according to the value\nreturned by the grouping function (arg1).  Each group becomes its own\nAsyncSubject.\n","title":"groupBy","info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","AsyncSubject"],"AsyncSubject"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","AsyncSubject"],"AsyncSubject"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","AsyncSubject"],"AsyncSubject"]},{"tag":"TypeVar","contents":"a"}]}}]}]}]},null]},null]}},"sourceSpan":{"start":[232,1],"name":"src/RxJS/AsyncSubject.purs","end":[232,98]}},{"children":[],"comments":"Emits the given constant value on the output AsyncSubject every time\nthe source AsyncSubject emits a value.\n","title":"mapTo","info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","AsyncSubject"],"AsyncSubject"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","AsyncSubject"],"AsyncSubject"]},{"tag":"TypeVar","contents":"b"}]}]}]},null]},null]}},"sourceSpan":{"start":[238,1],"name":"src/RxJS/AsyncSubject.purs","end":[238,74]}},{"children":[],"comments":"Maps each value to an AsyncSubject, then flattens all of these AsyncSubjects\nusing mergeAll.  It's just monadic `bind`.\n","title":"mergeMap","info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","AsyncSubject"],"AsyncSubject"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","AsyncSubject"],"AsyncSubject"]},{"tag":"TypeVar","contents":"b"}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","AsyncSubject"],"AsyncSubject"]},{"tag":"TypeVar","contents":"b"}]}]}]},null]},null]}},"sourceSpan":{"start":[242,1],"name":"src/RxJS/AsyncSubject.purs","end":[242,97]}},{"children":[],"comments":"Maps each value of the AsyncSubject (arg1) to the same inner AsyncSubject (arg2),\nthen flattens the result.\n","title":"mergeMapTo","info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","AsyncSubject"],"AsyncSubject"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","AsyncSubject"],"AsyncSubject"]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","AsyncSubject"],"AsyncSubject"]},{"tag":"TypeVar","contents":"b"}]}]}]},null]},null]}},"sourceSpan":{"start":[246,1],"name":"src/RxJS/AsyncSubject.purs","end":[246,92]}},{"children":[],"comments":"Puts the current value and previous value together as an array, and emits that.\n","title":"pairwise","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","AsyncSubject"],"AsyncSubject"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","AsyncSubject"],"AsyncSubject"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]}}]}]},null]}},"sourceSpan":{"start":[249,1],"name":"src/RxJS/AsyncSubject.purs","end":[249,78]}},{"children":[],"comments":"Given a predicate function (arg1), and an AsyncSubject (arg2), it outputs a\ntwo element array of partitioned values\n(i.e., [ AsyncSubject valuesThatPassPredicate, AsyncSubject valuesThatFailPredicate ]).\n","title":"partition","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","AsyncSubject"],"AsyncSubject"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","AsyncSubject"],"AsyncSubject"]},{"tag":"TypeVar","contents":"a"}]}}]}]}]},null]}},"sourceSpan":{"start":[254,1],"name":"src/RxJS/AsyncSubject.purs","end":[254,97]}},{"children":[],"comments":"Given an accumulator function (arg1), an initial value (arg2), and\na source AsyncSubject (arg3), it returns an AsyncSubject that emits the current\naccumlation whenever the source emits a value.\n","title":"scan","info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeVar","contents":"b"}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","AsyncSubject"],"AsyncSubject"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","AsyncSubject"],"AsyncSubject"]},{"tag":"TypeVar","contents":"b"}]}]}]}]},null]},null]}},"sourceSpan":{"start":[259,1],"name":"src/RxJS/AsyncSubject.purs","end":[259,90]}},{"children":[],"comments":"Projects each source value to an AsyncSubject which is merged in the output\nAsyncSubject, emitting values only from the most recently projected AsyncSubject.\n","title":"switchMap","info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","AsyncSubject"],"AsyncSubject"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","AsyncSubject"],"AsyncSubject"]},{"tag":"TypeVar","contents":"b"}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","AsyncSubject"],"AsyncSubject"]},{"tag":"TypeVar","contents":"b"}]}]}]},null]},null]}},"sourceSpan":{"start":[263,1],"name":"src/RxJS/AsyncSubject.purs","end":[263,98]}},{"children":[],"comments":"It's like switchMap, but maps each value to the same inner AsyncSubject.\n","title":"switchMapTo","info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","AsyncSubject"],"AsyncSubject"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","AsyncSubject"],"AsyncSubject"]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","AsyncSubject"],"AsyncSubject"]},{"tag":"TypeVar","contents":"b"}]}]}]},null]},null]}},"sourceSpan":{"start":[266,1],"name":"src/RxJS/AsyncSubject.purs","end":[266,93]}},{"children":[],"comments":"It's like buffer, but emits a nested AsyncSubject instead of an array.\n","title":"window","info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","AsyncSubject"],"AsyncSubject"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","AsyncSubject"],"AsyncSubject"]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","AsyncSubject"],"AsyncSubject"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","AsyncSubject"],"AsyncSubject"]},{"tag":"TypeVar","contents":"a"}]}}]}]}]},null]},null]}},"sourceSpan":{"start":[269,1],"name":"src/RxJS/AsyncSubject.purs","end":[269,103]}},{"children":[],"comments":"It's like bufferCount, but emits a nested AsyncSubject instead of an array.\n","title":"windowCount","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","AsyncSubject"],"AsyncSubject"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","AsyncSubject"],"AsyncSubject"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","AsyncSubject"],"AsyncSubject"]},{"tag":"TypeVar","contents":"a"}]}}]}]}]}]},null]}},"sourceSpan":{"start":[272,1],"name":"src/RxJS/AsyncSubject.purs","end":[272,102]}},{"children":[],"comments":"It's like bufferTime, but emits a nested AsyncSubject instead of an array,\nand it doesn't take a maximum size parameter.  arg1 is how long to\nbuffer items into a new AsyncSubject, arg2 is the when the next buffer should begin,\nand arg3 is the source AsyncSubject.\n","title":"windowTime","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","AsyncSubject"],"AsyncSubject"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","AsyncSubject"],"AsyncSubject"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","AsyncSubject"],"AsyncSubject"]},{"tag":"TypeVar","contents":"a"}]}}]}]}]}]},null]}},"sourceSpan":{"start":[278,1],"name":"src/RxJS/AsyncSubject.purs","end":[278,101]}},{"children":[],"comments":"It's like bufferToggle, but emits a nested AsyncSubject instead of an array.\n","title":"windowToggle","info":{"declType":"value","type":{"tag":"ForAll","contents":["c",{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","AsyncSubject"],"AsyncSubject"]},{"tag":"TypeVar","contents":"a"}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","AsyncSubject"],"AsyncSubject"]},{"tag":"TypeVar","contents":"b"}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","AsyncSubject"],"AsyncSubject"]},{"tag":"TypeVar","contents":"c"}]}]}}]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","AsyncSubject"],"AsyncSubject"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]}}]}}]}]}]},null]},null]},null]}},"sourceSpan":{"start":[281,1],"name":"src/RxJS/AsyncSubject.purs","end":[285,30]}},{"children":[],"comments":"It's like bufferWhen, but emits a nested AsyncSubject instead of an array.\n","title":"windowWhen","info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","AsyncSubject"],"AsyncSubject"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","AsyncSubject"],"AsyncSubject"]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","AsyncSubject"],"AsyncSubject"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","AsyncSubject"],"AsyncSubject"]},{"tag":"TypeVar","contents":"a"}]}}]}]}]},null]},null]}},"sourceSpan":{"start":[292,1],"name":"src/RxJS/AsyncSubject.purs","end":[292,107]}},{"children":[],"comments":"It's like auditTime, but the silencing duration is determined by a second AsyncSubject.\n","title":"audit","info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","AsyncSubject"],"AsyncSubject"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","AsyncSubject"],"AsyncSubject"]},{"tag":"TypeVar","contents":"b"}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","AsyncSubject"],"AsyncSubject"]},{"tag":"TypeVar","contents":"a"}]}]}]},null]},null]}},"sourceSpan":{"start":[297,1],"name":"src/RxJS/AsyncSubject.purs","end":[297,94]}},{"children":[],"comments":"Ignores source values for duration milliseconds,\nthen emits the most recent value from the source AsyncSubject, then repeats this process.\n","title":"auditTime","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","AsyncSubject"],"AsyncSubject"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","AsyncSubject"],"AsyncSubject"]},{"tag":"TypeVar","contents":"a"}]}]}]},null]}},"sourceSpan":{"start":[301,1],"name":"src/RxJS/AsyncSubject.purs","end":[301,78]}},{"children":[],"comments":"It's like debounceTime, but the time span of emission silence is determined\nby a second AsyncSubject.  Allows for a variable debounce rate.\n","title":"debounce","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","AsyncSubject"],"AsyncSubject"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","AsyncSubject"],"AsyncSubject"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","AsyncSubject"],"AsyncSubject"]},{"tag":"TypeVar","contents":"a"}]}]}]},null]}},"sourceSpan":{"start":[305,1],"name":"src/RxJS/AsyncSubject.purs","end":[305,97]}},{"children":[],"comments":"It's like delay, but passes only the most recent value from each burst of emissions.\n","title":"debounceTime","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","AsyncSubject"],"AsyncSubject"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","AsyncSubject"],"AsyncSubject"]},{"tag":"TypeVar","contents":"a"}]}]}]},null]}},"sourceSpan":{"start":[308,1],"name":"src/RxJS/AsyncSubject.purs","end":[308,81]}},{"children":[],"comments":"Returns an AsyncSubject that emits all items emitted by the source AsyncSubject\nthat are distinct by comparison from previous items.\n","title":"distinct","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","AsyncSubject"],"AsyncSubject"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","AsyncSubject"],"AsyncSubject"]},{"tag":"TypeVar","contents":"a"}]}]},null]}},"sourceSpan":{"start":[312,1],"name":"src/RxJS/AsyncSubject.purs","end":[312,70]}},{"children":[],"comments":"Returns an AsyncSubject that emits all items emitted by the source AsyncSubject\nthat are distinct by comparison from the previous item.\n","title":"distinctUntilChanged","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","AsyncSubject"],"AsyncSubject"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","AsyncSubject"],"AsyncSubject"]},{"tag":"TypeVar","contents":"a"}]}]},null]}},"sourceSpan":{"start":[316,1],"name":"src/RxJS/AsyncSubject.purs","end":[316,82]}},{"children":[],"comments":"Emits the single value at the specified index in a sequence of emissions\nfrom the source AsyncSubject.\n","title":"elementAt","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","AsyncSubject"],"AsyncSubject"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","AsyncSubject"],"AsyncSubject"]},{"tag":"TypeVar","contents":"a"}]}]}]},null]}},"sourceSpan":{"start":[320,1],"name":"src/RxJS/AsyncSubject.purs","end":[320,78]}},{"children":[],"comments":"Filter items emitted by the source AsyncSubject by only emitting those that\nsatisfy a specified predicate.\n","title":"filter","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","AsyncSubject"],"AsyncSubject"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","AsyncSubject"],"AsyncSubject"]},{"tag":"TypeVar","contents":"a"}]}]}]},null]}},"sourceSpan":{"start":[324,1],"name":"src/RxJS/AsyncSubject.purs","end":[324,86]}},{"children":[],"comments":"Ignores all items emitted by the source AsyncSubject and only passes calls of complete or error.\n","title":"ignoreElements","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","AsyncSubject"],"AsyncSubject"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","AsyncSubject"],"AsyncSubject"]},{"tag":"TypeVar","contents":"a"}]}]},null]}},"sourceSpan":{"start":[327,1],"name":"src/RxJS/AsyncSubject.purs","end":[327,76]}},{"children":[],"comments":"Returns an AsyncSubject that emits only the last item emitted by the source AsyncSubject.\n","title":"last","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","AsyncSubject"],"AsyncSubject"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","AsyncSubject"],"AsyncSubject"]},{"tag":"TypeVar","contents":"a"}]}]},null]}},"sourceSpan":{"start":[330,1],"name":"src/RxJS/AsyncSubject.purs","end":[330,66]}},{"children":[],"comments":"It's like sampleTime, but samples whenever the notifier AsyncSubject emits something.\n","title":"sample","info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","AsyncSubject"],"AsyncSubject"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","AsyncSubject"],"AsyncSubject"]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","AsyncSubject"],"AsyncSubject"]},{"tag":"TypeVar","contents":"a"}]}]}]},null]},null]}},"sourceSpan":{"start":[333,1],"name":"src/RxJS/AsyncSubject.purs","end":[333,88]}},{"children":[],"comments":"Periodically looks at the source AsyncSubject and emits whichever\nvalue it has most recently emitted since the previous sampling, unless the source has not emitted anything since the previous sampling.\n","title":"sampleTime","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","AsyncSubject"],"AsyncSubject"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","AsyncSubject"],"AsyncSubject"]},{"tag":"TypeVar","contents":"a"}]}]}]},null]}},"sourceSpan":{"start":[337,1],"name":"src/RxJS/AsyncSubject.purs","end":[337,79]}},{"children":[],"comments":"Returns an AsyncSubject that skips n items emitted by an AsyncSubject.\n","title":"skip","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","AsyncSubject"],"AsyncSubject"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","AsyncSubject"],"AsyncSubject"]},{"tag":"TypeVar","contents":"a"}]}]}]},null]}},"sourceSpan":{"start":[340,1],"name":"src/RxJS/AsyncSubject.purs","end":[340,73]}},{"children":[],"comments":"Returns an AsyncSubject that skips items emitted by the source AsyncSubject until a second AsyncSubject emits an item.\n","title":"skipUntil","info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","AsyncSubject"],"AsyncSubject"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","AsyncSubject"],"AsyncSubject"]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","AsyncSubject"],"AsyncSubject"]},{"tag":"TypeVar","contents":"a"}]}]}]},null]},null]}},"sourceSpan":{"start":[343,1],"name":"src/RxJS/AsyncSubject.purs","end":[343,91]}},{"children":[],"comments":"Returns an AsyncSubject that skips all items emitted\nby the source AsyncSubject as long as a specified condition holds true,\nbut emits all further source items as soon as the condition becomes false.\n","title":"skipWhile","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","AsyncSubject"],"AsyncSubject"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","AsyncSubject"],"AsyncSubject"]},{"tag":"TypeVar","contents":"a"}]}]}]},null]}},"sourceSpan":{"start":[348,1],"name":"src/RxJS/AsyncSubject.purs","end":[348,89]}},{"children":[],"comments":"Emits only the first n values emitted by the source AsyncSubject.\n","title":"take","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","AsyncSubject"],"AsyncSubject"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","AsyncSubject"],"AsyncSubject"]},{"tag":"TypeVar","contents":"a"}]}]}]},null]}},"sourceSpan":{"start":[351,1],"name":"src/RxJS/AsyncSubject.purs","end":[351,73]}},{"children":[],"comments":"Lets values pass until a second AsyncSubject emits something. Then, it completes.\n","title":"takeUntil","info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","AsyncSubject"],"AsyncSubject"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","AsyncSubject"],"AsyncSubject"]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","AsyncSubject"],"AsyncSubject"]},{"tag":"TypeVar","contents":"a"}]}]}]},null]},null]}},"sourceSpan":{"start":[354,1],"name":"src/RxJS/AsyncSubject.purs","end":[354,91]}},{"children":[],"comments":"Emits values emitted by the source AsyncSubject so long as each value satisfies\nthe given predicate, and then completes as soon as this predicate is not satisfied.\n","title":"takeWhile","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","AsyncSubject"],"AsyncSubject"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","AsyncSubject"],"AsyncSubject"]},{"tag":"TypeVar","contents":"a"}]}]}]},null]}},"sourceSpan":{"start":[358,1],"name":"src/RxJS/AsyncSubject.purs","end":[358,89]}},{"children":[],"comments":"It's like throttleTime, but the silencing duration is determined by a second AsyncSubject.\n","title":"throttle","info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","AsyncSubject"],"AsyncSubject"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","AsyncSubject"],"AsyncSubject"]},{"tag":"TypeVar","contents":"b"}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","AsyncSubject"],"AsyncSubject"]},{"tag":"TypeVar","contents":"a"}]}]}]},null]},null]}},"sourceSpan":{"start":[361,1],"name":"src/RxJS/AsyncSubject.purs","end":[361,97]}},{"children":[],"comments":"Emits a value from the source AsyncSubject, then ignores subsequent source values\nfor duration milliseconds, then repeats this process.\n","title":"throttleTime","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","AsyncSubject"],"AsyncSubject"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","AsyncSubject"],"AsyncSubject"]},{"tag":"TypeVar","contents":"a"}]}]}]},null]}},"sourceSpan":{"start":[365,1],"name":"src/RxJS/AsyncSubject.purs","end":[365,81]}},{"children":[],"comments":"An AsyncSubject of projected values from the most recent values from each input AsyncSubject.\n","title":"combineLatest","info":{"declType":"value","type":{"tag":"ForAll","contents":["c",{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeVar","contents":"c"}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","AsyncSubject"],"AsyncSubject"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","AsyncSubject"],"AsyncSubject"]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","AsyncSubject"],"AsyncSubject"]},{"tag":"TypeVar","contents":"c"}]}]}]}]},null]},null]},null]}},"sourceSpan":{"start":[371,1],"name":"src/RxJS/AsyncSubject.purs","end":[372,87]}},{"children":[],"comments":"Concatenates two AsyncSubjects together by sequentially emitting their values, one AsyncSubject after the other.\n","title":"concat","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","AsyncSubject"],"AsyncSubject"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","AsyncSubject"],"AsyncSubject"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","AsyncSubject"],"AsyncSubject"]},{"tag":"TypeVar","contents":"a"}]}]}]},null]}},"sourceSpan":{"start":[375,1],"name":"src/RxJS/AsyncSubject.purs","end":[375,86]}},{"children":[],"comments":"Converts a higher-order AsyncSubject into a first-order AsyncSubject by concatenating the inner AsyncSubjects in order.\n","title":"concatAll","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","AsyncSubject"],"AsyncSubject"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","AsyncSubject"],"AsyncSubject"]},{"tag":"TypeVar","contents":"a"}]}}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","AsyncSubject"],"AsyncSubject"]},{"tag":"TypeVar","contents":"a"}]}]},null]}},"sourceSpan":{"start":[378,1],"name":"src/RxJS/AsyncSubject.purs","end":[378,86]}},{"children":[],"comments":"Flattens an AsyncSubject-of-AsyncSubjects by dropping the next inner AsyncSubjects\nwhile the current inner is still executing.\n","title":"exhaust","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","AsyncSubject"],"AsyncSubject"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","AsyncSubject"],"AsyncSubject"]},{"tag":"TypeVar","contents":"a"}]}}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","AsyncSubject"],"AsyncSubject"]},{"tag":"TypeVar","contents":"a"}]}]},null]}},"sourceSpan":{"start":[382,1],"name":"src/RxJS/AsyncSubject.purs","end":[382,84]}},{"children":[],"comments":"Creates an output AsyncSubject which concurrently emits all values from each input AsyncSubject.\n","title":"merge","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","AsyncSubject"],"AsyncSubject"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","AsyncSubject"],"AsyncSubject"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","AsyncSubject"],"AsyncSubject"]},{"tag":"TypeVar","contents":"a"}]}]}]},null]}},"sourceSpan":{"start":[385,1],"name":"src/RxJS/AsyncSubject.purs","end":[385,85]}},{"children":[],"comments":"Converts a higher-order AsyncSubject into a first-order AsyncSubject\nwhich concurrently delivers all values that are emitted on the inner AsyncSubjects.\n","title":"mergeAll","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","AsyncSubject"],"AsyncSubject"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","AsyncSubject"],"AsyncSubject"]},{"tag":"TypeVar","contents":"a"}]}}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","AsyncSubject"],"AsyncSubject"]},{"tag":"TypeVar","contents":"a"}]}]},null]}},"sourceSpan":{"start":[389,1],"name":"src/RxJS/AsyncSubject.purs","end":[389,85]}},{"children":[],"comments":"Returns an AsyncSubject that mirrors the first source AsyncSubject to emit an\nitem from the array of AsyncSubjects.\n","title":"race","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","AsyncSubject"],"AsyncSubject"]},{"tag":"TypeVar","contents":"a"}]}}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","AsyncSubject"],"AsyncSubject"]},{"tag":"TypeVar","contents":"a"}]}]},null]}},"sourceSpan":{"start":[393,1],"name":"src/RxJS/AsyncSubject.purs","end":[393,74]}},{"children":[],"comments":"Returns an AsyncSubject that emits the items in the given Array before\nit begins to emit items emitted by the source AsyncSubject.\n","title":"startWith","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","AsyncSubject"],"AsyncSubject"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","AsyncSubject"],"AsyncSubject"]},{"tag":"TypeVar","contents":"a"}]}]}]},null]}},"sourceSpan":{"start":[397,1],"name":"src/RxJS/AsyncSubject.purs","end":[397,82]}},{"children":[],"comments":"Combines each value from the source AsyncSubjects using a project function to\ndetermine the value to be emitted on the output AsyncSubject.\n","title":"withLatestFrom","info":{"declType":"value","type":{"tag":"ForAll","contents":["c",{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeVar","contents":"c"}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","AsyncSubject"],"AsyncSubject"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","AsyncSubject"],"AsyncSubject"]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","AsyncSubject"],"AsyncSubject"]},{"tag":"TypeVar","contents":"c"}]}]}]}]},null]},null]},null]}},"sourceSpan":{"start":[401,1],"name":"src/RxJS/AsyncSubject.purs","end":[402,87]}},{"children":[],"comments":"Waits for each AsyncSubject to emit a value. Once this occurs, all values\nwith the corresponding index will be emitted. This will continue until at\nleast one inner AsyncSubject completes.\n","title":"zip","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","AsyncSubject"],"AsyncSubject"]},{"tag":"TypeVar","contents":"a"}]}}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","AsyncSubject"],"AsyncSubject"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]}}]}]},null]}},"sourceSpan":{"start":[407,1],"name":"src/RxJS/AsyncSubject.purs","end":[407,81]}},{"children":[],"comments":null,"title":"catch","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","AsyncSubject"],"AsyncSubject"]},{"tag":"TypeVar","contents":"a"}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Control","Monad","Eff","Exception"],"Error"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","AsyncSubject"],"AsyncSubject"]},{"tag":"TypeVar","contents":"a"}]}]}}]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","AsyncSubject"],"AsyncSubject"]},{"tag":"TypeVar","contents":"a"}]}}]}]},null]}},"sourceSpan":{"start":[411,1],"name":"src/RxJS/AsyncSubject.purs","end":[411,100]}},{"children":[],"comments":"If the source AsyncSubject calls error, this method will resubscribe to the\nsource AsyncSubject n times rather than propagating the error call.\n","title":"retry","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","AsyncSubject"],"AsyncSubject"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","AsyncSubject"],"AsyncSubject"]},{"tag":"TypeVar","contents":"a"}]}]}]},null]}},"sourceSpan":{"start":[415,1],"name":"src/RxJS/AsyncSubject.purs","end":[415,74]}},{"children":[],"comments":"Time shifts each item by some specified amount of milliseconds.\n","title":"delay","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","AsyncSubject"],"AsyncSubject"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","AsyncSubject"],"AsyncSubject"]},{"tag":"TypeVar","contents":"a"}]}]}]},null]}},"sourceSpan":{"start":[420,1],"name":"src/RxJS/AsyncSubject.purs","end":[420,74]}},{"children":[],"comments":"Delays the emission of items from the source AsyncSubject by a given time\nspan determined by the emissions of another AsyncSubject.\n","title":"delayWhen","info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","AsyncSubject"],"AsyncSubject"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","AsyncSubject"],"AsyncSubject"]},{"tag":"TypeVar","contents":"b"}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","AsyncSubject"],"AsyncSubject"]},{"tag":"TypeVar","contents":"a"}]}]}]},null]},null]}},"sourceSpan":{"start":[424,1],"name":"src/RxJS/AsyncSubject.purs","end":[424,98]}},{"children":[],"comments":null,"title":"dematerialize","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","AsyncSubject"],"AsyncSubject"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Notification"],"Notification"]},{"tag":"TypeVar","contents":"a"}]}}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","AsyncSubject"],"AsyncSubject"]},{"tag":"TypeVar","contents":"a"}]}]},null]}},"sourceSpan":{"start":[426,1],"name":"src/RxJS/AsyncSubject.purs","end":[426,90]}},{"children":[],"comments":null,"title":"materialize","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","AsyncSubject"],"AsyncSubject"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","AsyncSubject"],"AsyncSubject"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Notification"],"Notification"]},{"tag":"TypeVar","contents":"a"}]}}]}]},null]}},"sourceSpan":{"start":[437,1],"name":"src/RxJS/AsyncSubject.purs","end":[437,73]}},{"children":[],"comments":"Performs the effect on each value of the AsyncSubject.  An alias for `do`.\nUseful for testing (transparently performing an effect outside of a subscription).\n","title":"performEach","info":{"declType":"value","type":{"tag":"ForAll","contents":["e",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","AsyncSubject"],"AsyncSubject"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad","Eff"],"Eff"]},{"tag":"TypeVar","contents":"e"}]},{"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad","Eff"],"Eff"]},{"tag":"TypeVar","contents":"e"}]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","AsyncSubject"],"AsyncSubject"]},{"tag":"TypeVar","contents":"a"}]}}]}]}]},null]},null]}},"sourceSpan":{"start":[442,1],"name":"src/RxJS/AsyncSubject.purs","end":[442,110]}},{"children":[],"comments":null,"title":"toArray","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","AsyncSubject"],"AsyncSubject"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","AsyncSubject"],"AsyncSubject"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]}}]}]},null]}},"sourceSpan":{"start":[444,1],"name":"src/RxJS/AsyncSubject.purs","end":[444,77]}},{"children":[],"comments":"Counts the number of emissions on the source and emits that number when the source completes.\n","title":"count","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","AsyncSubject"],"AsyncSubject"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","AsyncSubject"],"AsyncSubject"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}]},null]}},"sourceSpan":{"start":[449,1],"name":"src/RxJS/AsyncSubject.purs","end":[449,69]}}]},{"reExports":[],"name":"RxJS.BehaviorSubject","comments":null,"declarations":[{"children":[{"comments":null,"title":"functorBehaviorSubject","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Functor"],"Functor"]},{"tag":"TypeConstructor","contents":[["RxJS","BehaviorSubject"],"BehaviorSubject"]}]}},"sourceSpan":{"start":[103,1],"name":"src/RxJS/BehaviorSubject.purs","end":[104,13]}},{"comments":null,"title":"applyBehaviorSubject","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Apply"],"Apply"]},{"tag":"TypeConstructor","contents":[["RxJS","BehaviorSubject"],"BehaviorSubject"]}]}},"sourceSpan":{"start":[106,1],"name":"src/RxJS/BehaviorSubject.purs","end":[107,27]}},{"comments":null,"title":"applicativeBehaviorSubject","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Applicative"],"Applicative"]},{"tag":"TypeConstructor","contents":[["RxJS","BehaviorSubject"],"BehaviorSubject"]}]}},"sourceSpan":{"start":[109,1],"name":"src/RxJS/BehaviorSubject.purs","end":[110,14]}},{"comments":null,"title":"bindBehaviorSubject","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Bind"],"Bind"]},{"tag":"TypeConstructor","contents":[["RxJS","BehaviorSubject"],"BehaviorSubject"]}]}},"sourceSpan":{"start":[112,1],"name":"src/RxJS/BehaviorSubject.purs","end":[113,18]}},{"comments":null,"title":"monadBehaviorSubject","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad"],"Monad"]},{"tag":"TypeConstructor","contents":[["RxJS","BehaviorSubject"],"BehaviorSubject"]}]}},"sourceSpan":{"start":[115,1],"name":"src/RxJS/BehaviorSubject.purs","end":[115,55]}},{"comments":"NOTE: The semigroup instance uses `merge` NOT `concat`.\n","title":"semigroupBehaviorSubject","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Semigroup"],"Semigroup"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","BehaviorSubject"],"BehaviorSubject"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[118,1],"name":"src/RxJS/BehaviorSubject.purs","end":[119,17]}},{"comments":null,"title":"altBehaviorSubject","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Alt"],"Alt"]},{"tag":"TypeConstructor","contents":[["RxJS","BehaviorSubject"],"BehaviorSubject"]}]}},"sourceSpan":{"start":[121,1],"name":"src/RxJS/BehaviorSubject.purs","end":[122,14]}}],"comments":"Please see [RxJS Version 5.* documentation](http://reactivex.io/rxjs/) for\nadditional details on proper usage of the library.\n","title":"BehaviorSubject","info":{"kind":{"tag":"FunKind","contents":[{"tag":"NamedKind","contents":[["Prim"],"Type"]},{"tag":"NamedKind","contents":[["Prim"],"Type"]}]},"declType":"externData"},"sourceSpan":{"start":[101,1],"name":"src/RxJS/BehaviorSubject.purs","end":[101,46]}},{"children":[],"comments":"Makes every `next` call run in the new Scheduler.\n","title":"observeOn","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["RxJS","Scheduler"],"Scheduler"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","BehaviorSubject"],"BehaviorSubject"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","BehaviorSubject"],"BehaviorSubject"]},{"tag":"TypeVar","contents":"a"}]}]}]},null]}},"sourceSpan":{"start":[127,1],"name":"src/RxJS/BehaviorSubject.purs","end":[127,90]}},{"children":[],"comments":"Makes subscription happen on a given Scheduler.\n","title":"subscribeOn","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["RxJS","Scheduler"],"Scheduler"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","BehaviorSubject"],"BehaviorSubject"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","BehaviorSubject"],"BehaviorSubject"]},{"tag":"TypeVar","contents":"a"}]}]}]},null]}},"sourceSpan":{"start":[130,1],"name":"src/RxJS/BehaviorSubject.purs","end":[130,92]}},{"children":[],"comments":"Subscribing to an BehaviorSubject is like calling a function, providing\n`next`, `error` and `completed` effects to which the data will be delivered.\n","title":"subscribe","info":{"declType":"value","type":{"tag":"ForAll","contents":["e",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Subscriber"],"Subscriber"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","BehaviorSubject"],"BehaviorSubject"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad","Eff"],"Eff"]},{"tag":"TypeVar","contents":"e"}]},{"tag":"TypeConstructor","contents":[["RxJS","Subscription"],"Subscription"]}]}]}]},null]},null]}},"sourceSpan":{"start":[137,1],"name":"src/RxJS/BehaviorSubject.purs","end":[137,100]}},{"children":[],"comments":null,"title":"subscribeNext","info":{"declType":"value","type":{"tag":"ForAll","contents":["e",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad","Eff"],"Eff"]},{"tag":"TypeVar","contents":"e"}]},{"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","BehaviorSubject"],"BehaviorSubject"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad","Eff"],"Eff"]},{"tag":"TypeVar","contents":"e"}]},{"tag":"TypeConstructor","contents":[["RxJS","Subscription"],"Subscription"]}]}]}]},null]},null]}},"sourceSpan":{"start":[142,1],"name":"src/RxJS/BehaviorSubject.purs","end":[145,27]}},{"children":[],"comments":"Creates an BehaviorSubject that emits the value specify,\nand then emits a complete notification.  An alias for `of`.\n","title":"just","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","BehaviorSubject"],"BehaviorSubject"]},{"tag":"TypeVar","contents":"a"}]}]},null]}},"sourceSpan":{"start":[152,1],"name":"src/RxJS/BehaviorSubject.purs","end":[152,56]}},{"children":[],"comments":"Send a new value to a BehaviorSubject\n","title":"next","info":{"declType":"value","type":{"tag":"ForAll","contents":["e",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","BehaviorSubject"],"BehaviorSubject"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad","Eff"],"Eff"]},{"tag":"TypeVar","contents":"e"}]},{"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}]}]},null]},null]}},"sourceSpan":{"start":[157,1],"name":"src/RxJS/BehaviorSubject.purs","end":[157,72]}},{"children":[],"comments":"An alias for next\n","title":"send","info":{"declType":"value","type":{"tag":"ForAll","contents":["e",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","BehaviorSubject"],"BehaviorSubject"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad","Eff"],"Eff"]},{"tag":"TypeVar","contents":"e"}]},{"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}]}]},null]},null]}},"sourceSpan":{"start":[160,1],"name":"src/RxJS/BehaviorSubject.purs","end":[160,57]}},{"children":[],"comments":"Create an Observable from a BehaviorSubject\n","title":"asObservable","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","BehaviorSubject"],"BehaviorSubject"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"Observable"]},{"tag":"TypeVar","contents":"a"}]}]},null]}},"sourceSpan":{"start":[164,1],"name":"src/RxJS/BehaviorSubject.purs","end":[164,75]}},{"children":[],"comments":"Obtain the current value of a BehaviorSubject\n","title":"getValue","info":{"declType":"value","type":{"tag":"ForAll","contents":["e",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","BehaviorSubject"],"BehaviorSubject"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad","Eff"],"Eff"]},{"tag":"TypeVar","contents":"e"}]},{"tag":"TypeVar","contents":"a"}]}]},null]},null]}},"sourceSpan":{"start":[167,1],"name":"src/RxJS/BehaviorSubject.purs","end":[167,68]}},{"children":[],"comments":"Collects values from the first BehaviorSubject into an Array, and emits that array only when\nsecond BehaviorSubject emits.\n","title":"buffer","info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","BehaviorSubject"],"BehaviorSubject"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","BehaviorSubject"],"BehaviorSubject"]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","BehaviorSubject"],"BehaviorSubject"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]}}]}]}]},null]},null]}},"sourceSpan":{"start":[173,1],"name":"src/RxJS/BehaviorSubject.purs","end":[173,105]}},{"children":[],"comments":"Collects values from the past as an array, emits that array when\nits size (arg1) reaches the specified buffer size, and starts a new buffer.\nThe new buffer starts with nth (arg2) element of the BehaviorSubject counting\nfrom the beginning of the *last* buffer.\n","title":"bufferCount","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","BehaviorSubject"],"BehaviorSubject"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","BehaviorSubject"],"BehaviorSubject"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]}}]}]}]}]},null]}},"sourceSpan":{"start":[179,1],"name":"src/RxJS/BehaviorSubject.purs","end":[179,101]}},{"children":[],"comments":"Collects values from the source BehaviorSubject (arg1) as an array. Starts collecting only when\nthe opening (arg2) BehaviorSubject emits, and calls the closingSelector function (arg3) to get an BehaviorSubject\nthat decides when to close the buffer.  Another buffer opens when the\nopening BehaviorSubject emits its next value.\n","title":"bufferToggle","info":{"declType":"value","type":{"tag":"ForAll","contents":["c",{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","BehaviorSubject"],"BehaviorSubject"]},{"tag":"TypeVar","contents":"a"}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","BehaviorSubject"],"BehaviorSubject"]},{"tag":"TypeVar","contents":"b"}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","BehaviorSubject"],"BehaviorSubject"]},{"tag":"TypeVar","contents":"c"}]}]}}]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","BehaviorSubject"],"BehaviorSubject"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]}}]}}]}]}]},null]},null]},null]}},"sourceSpan":{"start":[194,1],"name":"src/RxJS/BehaviorSubject.purs","end":[198,33]}},{"children":[],"comments":"Collects values from the past as an array. When it starts collecting values,\nit calls a function that returns an BehaviorSubject that emits to close the\nbuffer and restart collecting.\n","title":"bufferWhen","info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","BehaviorSubject"],"BehaviorSubject"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","BehaviorSubject"],"BehaviorSubject"]},{"tag":"TypeVar","contents":"b"}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","BehaviorSubject"],"BehaviorSubject"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]}}]}]}]},null]},null]}},"sourceSpan":{"start":[208,1],"name":"src/RxJS/BehaviorSubject.purs","end":[208,116]}},{"children":[],"comments":"Equivalent to mergeMap (a.k.a, `>>=`) EXCEPT that, unlike mergeMap,\nthe next bind will not run until the BehaviorSubject generated by the projection function (arg2)\ncompletes.  That is, composition is sequential, not concurrent.\nWarning: if source values arrive endlessly and faster than their corresponding\ninner BehaviorSubjects can complete, it will result in memory issues as inner\nBehaviorSubjects amass in an unbounded buffer waiting for their turn to be subscribed to.\n","title":"concatMap","info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","BehaviorSubject"],"BehaviorSubject"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","BehaviorSubject"],"BehaviorSubject"]},{"tag":"TypeVar","contents":"b"}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","BehaviorSubject"],"BehaviorSubject"]},{"tag":"TypeVar","contents":"b"}]}]}]},null]},null]}},"sourceSpan":{"start":[216,1],"name":"src/RxJS/BehaviorSubject.purs","end":[216,107]}},{"children":[],"comments":"The type signature explains it best.  Warning: Like `concatMap`, composition is sequential.\n","title":"concatMapTo","info":{"declType":"value","type":{"tag":"ForAll","contents":["c",{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","BehaviorSubject"],"BehaviorSubject"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","BehaviorSubject"],"BehaviorSubject"]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","BehaviorSubject"],"BehaviorSubject"]},{"tag":"TypeVar","contents":"c"}]}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","BehaviorSubject"],"BehaviorSubject"]},{"tag":"TypeVar","contents":"c"}]}]}]}]},null]},null]},null]}},"sourceSpan":{"start":[219,1],"name":"src/RxJS/BehaviorSubject.purs","end":[220,112]}},{"children":[],"comments":"It's Like concatMap (a.k.a, `>>=`) EXCEPT that it ignores every new projected\nBehaviorSubject if the previous projected BehaviorSubject has not yet completed.\n","title":"exhaustMap","info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","BehaviorSubject"],"BehaviorSubject"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","BehaviorSubject"],"BehaviorSubject"]},{"tag":"TypeVar","contents":"b"}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","BehaviorSubject"],"BehaviorSubject"]},{"tag":"TypeVar","contents":"b"}]}]}]},null]},null]}},"sourceSpan":{"start":[224,1],"name":"src/RxJS/BehaviorSubject.purs","end":[224,108]}},{"children":[],"comments":"It's similar to mergeMap, but applies the projection function to every source\nvalue as well as every output value. It's recursive.\n","title":"expand","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","BehaviorSubject"],"BehaviorSubject"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","BehaviorSubject"],"BehaviorSubject"]},{"tag":"TypeVar","contents":"a"}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","BehaviorSubject"],"BehaviorSubject"]},{"tag":"TypeVar","contents":"a"}]}]}]},null]}},"sourceSpan":{"start":[228,1],"name":"src/RxJS/BehaviorSubject.purs","end":[228,102]}},{"children":[],"comments":"Groups the items emitted by an BehaviorSubject (arg2) according to the value\nreturned by the grouping function (arg1).  Each group becomes its own\nBehaviorSubject.\n","title":"groupBy","info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","BehaviorSubject"],"BehaviorSubject"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","BehaviorSubject"],"BehaviorSubject"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","BehaviorSubject"],"BehaviorSubject"]},{"tag":"TypeVar","contents":"a"}]}}]}]}]},null]},null]}},"sourceSpan":{"start":[233,1],"name":"src/RxJS/BehaviorSubject.purs","end":[233,107]}},{"children":[],"comments":"Emits the given constant value on the output BehaviorSubject every time\nthe source BehaviorSubject emits a value.\n","title":"mapTo","info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","BehaviorSubject"],"BehaviorSubject"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","BehaviorSubject"],"BehaviorSubject"]},{"tag":"TypeVar","contents":"b"}]}]}]},null]},null]}},"sourceSpan":{"start":[239,1],"name":"src/RxJS/BehaviorSubject.purs","end":[239,80]}},{"children":[],"comments":"Maps each value to an BehaviorSubject, then flattens all of these BehaviorSubjects\nusing mergeAll.  It's just monadic `bind`.\n","title":"mergeMap","info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","BehaviorSubject"],"BehaviorSubject"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","BehaviorSubject"],"BehaviorSubject"]},{"tag":"TypeVar","contents":"b"}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","BehaviorSubject"],"BehaviorSubject"]},{"tag":"TypeVar","contents":"b"}]}]}]},null]},null]}},"sourceSpan":{"start":[243,1],"name":"src/RxJS/BehaviorSubject.purs","end":[243,106]}},{"children":[],"comments":"Maps each value of the BehaviorSubject (arg1) to the same inner BehaviorSubject (arg2),\nthen flattens the result.\n","title":"mergeMapTo","info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","BehaviorSubject"],"BehaviorSubject"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","BehaviorSubject"],"BehaviorSubject"]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","BehaviorSubject"],"BehaviorSubject"]},{"tag":"TypeVar","contents":"b"}]}]}]},null]},null]}},"sourceSpan":{"start":[247,1],"name":"src/RxJS/BehaviorSubject.purs","end":[247,101]}},{"children":[],"comments":"Puts the current value and previous value together as an array, and emits that.\n","title":"pairwise","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","BehaviorSubject"],"BehaviorSubject"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","BehaviorSubject"],"BehaviorSubject"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]}}]}]},null]}},"sourceSpan":{"start":[250,1],"name":"src/RxJS/BehaviorSubject.purs","end":[250,84]}},{"children":[],"comments":"Given a predicate function (arg1), and an BehaviorSubject (arg2), it outputs a\ntwo element array of partitioned values\n(i.e., [ BehaviorSubject valuesThatPassPredicate, BehaviorSubject valuesThatFailPredicate ]).\n","title":"partition","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","BehaviorSubject"],"BehaviorSubject"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","BehaviorSubject"],"BehaviorSubject"]},{"tag":"TypeVar","contents":"a"}]}}]}]}]},null]}},"sourceSpan":{"start":[255,1],"name":"src/RxJS/BehaviorSubject.purs","end":[255,103]}},{"children":[],"comments":"Given an accumulator function (arg1), an initial value (arg2), and\na source BehaviorSubject (arg3), it returns an BehaviorSubject that emits the current\naccumlation whenever the source emits a value.\n","title":"scan","info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeVar","contents":"b"}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","BehaviorSubject"],"BehaviorSubject"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","BehaviorSubject"],"BehaviorSubject"]},{"tag":"TypeVar","contents":"b"}]}]}]}]},null]},null]}},"sourceSpan":{"start":[260,1],"name":"src/RxJS/BehaviorSubject.purs","end":[260,96]}},{"children":[],"comments":"Projects each source value to an BehaviorSubject which is merged in the output\nBehaviorSubject, emitting values only from the most recently projected BehaviorSubject.\n","title":"switchMap","info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","BehaviorSubject"],"BehaviorSubject"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","BehaviorSubject"],"BehaviorSubject"]},{"tag":"TypeVar","contents":"b"}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","BehaviorSubject"],"BehaviorSubject"]},{"tag":"TypeVar","contents":"b"}]}]}]},null]},null]}},"sourceSpan":{"start":[264,1],"name":"src/RxJS/BehaviorSubject.purs","end":[264,107]}},{"children":[],"comments":"It's like switchMap, but maps each value to the same inner BehaviorSubject.\n","title":"switchMapTo","info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","BehaviorSubject"],"BehaviorSubject"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","BehaviorSubject"],"BehaviorSubject"]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","BehaviorSubject"],"BehaviorSubject"]},{"tag":"TypeVar","contents":"b"}]}]}]},null]},null]}},"sourceSpan":{"start":[267,1],"name":"src/RxJS/BehaviorSubject.purs","end":[267,102]}},{"children":[],"comments":"It's like buffer, but emits a nested BehaviorSubject instead of an array.\n","title":"window","info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","BehaviorSubject"],"BehaviorSubject"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","BehaviorSubject"],"BehaviorSubject"]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","BehaviorSubject"],"BehaviorSubject"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","BehaviorSubject"],"BehaviorSubject"]},{"tag":"TypeVar","contents":"a"}]}}]}]}]},null]},null]}},"sourceSpan":{"start":[270,1],"name":"src/RxJS/BehaviorSubject.purs","end":[270,115]}},{"children":[],"comments":"It's like bufferCount, but emits a nested BehaviorSubject instead of an array.\n","title":"windowCount","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","BehaviorSubject"],"BehaviorSubject"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","BehaviorSubject"],"BehaviorSubject"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","BehaviorSubject"],"BehaviorSubject"]},{"tag":"TypeVar","contents":"a"}]}}]}]}]}]},null]}},"sourceSpan":{"start":[273,1],"name":"src/RxJS/BehaviorSubject.purs","end":[273,111]}},{"children":[],"comments":"It's like bufferTime, but emits a nested BehaviorSubject instead of an array,\nand it doesn't take a maximum size parameter.  arg1 is how long to\nbuffer items into a new BehaviorSubject, arg2 is the when the next buffer should begin,\nand arg3 is the source BehaviorSubject.\n","title":"windowTime","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","BehaviorSubject"],"BehaviorSubject"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","BehaviorSubject"],"BehaviorSubject"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","BehaviorSubject"],"BehaviorSubject"]},{"tag":"TypeVar","contents":"a"}]}}]}]}]}]},null]}},"sourceSpan":{"start":[279,1],"name":"src/RxJS/BehaviorSubject.purs","end":[279,110]}},{"children":[],"comments":"It's like bufferToggle, but emits a nested BehaviorSubject instead of an array.\n","title":"windowToggle","info":{"declType":"value","type":{"tag":"ForAll","contents":["c",{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","BehaviorSubject"],"BehaviorSubject"]},{"tag":"TypeVar","contents":"a"}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","BehaviorSubject"],"BehaviorSubject"]},{"tag":"TypeVar","contents":"b"}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","BehaviorSubject"],"BehaviorSubject"]},{"tag":"TypeVar","contents":"c"}]}]}}]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","BehaviorSubject"],"BehaviorSubject"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]}}]}}]}]}]},null]},null]},null]}},"sourceSpan":{"start":[282,1],"name":"src/RxJS/BehaviorSubject.purs","end":[286,33]}},{"children":[],"comments":"It's like bufferWhen, but emits a nested BehaviorSubject instead of an array.\n","title":"windowWhen","info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","BehaviorSubject"],"BehaviorSubject"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","BehaviorSubject"],"BehaviorSubject"]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","BehaviorSubject"],"BehaviorSubject"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","BehaviorSubject"],"BehaviorSubject"]},{"tag":"TypeVar","contents":"a"}]}}]}]}]},null]},null]}},"sourceSpan":{"start":[293,1],"name":"src/RxJS/BehaviorSubject.purs","end":[293,119]}},{"children":[],"comments":"It's like auditTime, but the silencing duration is determined by a second BehaviorSubject.\n","title":"audit","info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","BehaviorSubject"],"BehaviorSubject"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","BehaviorSubject"],"BehaviorSubject"]},{"tag":"TypeVar","contents":"b"}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","BehaviorSubject"],"BehaviorSubject"]},{"tag":"TypeVar","contents":"a"}]}]}]},null]},null]}},"sourceSpan":{"start":[298,1],"name":"src/RxJS/BehaviorSubject.purs","end":[298,103]}},{"children":[],"comments":"Ignores source values for duration milliseconds,\nthen emits the most recent value from the source BehaviorSubject, then repeats this process.\n","title":"auditTime","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","BehaviorSubject"],"BehaviorSubject"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","BehaviorSubject"],"BehaviorSubject"]},{"tag":"TypeVar","contents":"a"}]}]}]},null]}},"sourceSpan":{"start":[302,1],"name":"src/RxJS/BehaviorSubject.purs","end":[302,84]}},{"children":[],"comments":"It's like debounceTime, but the time span of emission silence is determined\nby a second BehaviorSubject.  Allows for a variable debounce rate.\n","title":"debounce","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","BehaviorSubject"],"BehaviorSubject"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","BehaviorSubject"],"BehaviorSubject"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","BehaviorSubject"],"BehaviorSubject"]},{"tag":"TypeVar","contents":"a"}]}]}]},null]}},"sourceSpan":{"start":[306,1],"name":"src/RxJS/BehaviorSubject.purs","end":[306,106]}},{"children":[],"comments":"It's like delay, but passes only the most recent value from each burst of emissions.\n","title":"debounceTime","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","BehaviorSubject"],"BehaviorSubject"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","BehaviorSubject"],"BehaviorSubject"]},{"tag":"TypeVar","contents":"a"}]}]}]},null]}},"sourceSpan":{"start":[309,1],"name":"src/RxJS/BehaviorSubject.purs","end":[309,87]}},{"children":[],"comments":"Returns an BehaviorSubject that emits all items emitted by the source BehaviorSubject\nthat are distinct by comparison from previous items.\n","title":"distinct","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","BehaviorSubject"],"BehaviorSubject"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","BehaviorSubject"],"BehaviorSubject"]},{"tag":"TypeVar","contents":"a"}]}]},null]}},"sourceSpan":{"start":[313,1],"name":"src/RxJS/BehaviorSubject.purs","end":[313,76]}},{"children":[],"comments":"Returns an BehaviorSubject that emits all items emitted by the source BehaviorSubject\nthat are distinct by comparison from the previous item.\n","title":"distinctUntilChanged","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","BehaviorSubject"],"BehaviorSubject"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","BehaviorSubject"],"BehaviorSubject"]},{"tag":"TypeVar","contents":"a"}]}]},null]}},"sourceSpan":{"start":[317,1],"name":"src/RxJS/BehaviorSubject.purs","end":[317,88]}},{"children":[],"comments":"Emits the single value at the specified index in a sequence of emissions\nfrom the source BehaviorSubject.\n","title":"elementAt","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","BehaviorSubject"],"BehaviorSubject"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","BehaviorSubject"],"BehaviorSubject"]},{"tag":"TypeVar","contents":"a"}]}]}]},null]}},"sourceSpan":{"start":[321,1],"name":"src/RxJS/BehaviorSubject.purs","end":[321,84]}},{"children":[],"comments":"Filter items emitted by the source BehaviorSubject by only emitting those that\nsatisfy a specified predicate.\n","title":"filter","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","BehaviorSubject"],"BehaviorSubject"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","BehaviorSubject"],"BehaviorSubject"]},{"tag":"TypeVar","contents":"a"}]}]}]},null]}},"sourceSpan":{"start":[325,1],"name":"src/RxJS/BehaviorSubject.purs","end":[325,92]}},{"children":[],"comments":"Ignores all items emitted by the source BehaviorSubject and only passes calls of complete or error.\n","title":"ignoreElements","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","BehaviorSubject"],"BehaviorSubject"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","BehaviorSubject"],"BehaviorSubject"]},{"tag":"TypeVar","contents":"a"}]}]},null]}},"sourceSpan":{"start":[328,1],"name":"src/RxJS/BehaviorSubject.purs","end":[328,82]}},{"children":[],"comments":"Returns an BehaviorSubject that emits only the last item emitted by the source BehaviorSubject.\n","title":"last","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","BehaviorSubject"],"BehaviorSubject"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","BehaviorSubject"],"BehaviorSubject"]},{"tag":"TypeVar","contents":"a"}]}]},null]}},"sourceSpan":{"start":[331,1],"name":"src/RxJS/BehaviorSubject.purs","end":[331,72]}},{"children":[],"comments":"It's like sampleTime, but samples whenever the notifier BehaviorSubject emits something.\n","title":"sample","info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","BehaviorSubject"],"BehaviorSubject"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","BehaviorSubject"],"BehaviorSubject"]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","BehaviorSubject"],"BehaviorSubject"]},{"tag":"TypeVar","contents":"a"}]}]}]},null]},null]}},"sourceSpan":{"start":[334,1],"name":"src/RxJS/BehaviorSubject.purs","end":[334,97]}},{"children":[],"comments":"Periodically looks at the source BehaviorSubject and emits whichever\nvalue it has most recently emitted since the previous sampling, unless the source has not emitted anything since the previous sampling.\n","title":"sampleTime","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","BehaviorSubject"],"BehaviorSubject"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","BehaviorSubject"],"BehaviorSubject"]},{"tag":"TypeVar","contents":"a"}]}]}]},null]}},"sourceSpan":{"start":[338,1],"name":"src/RxJS/BehaviorSubject.purs","end":[338,85]}},{"children":[],"comments":"Returns an BehaviorSubject that skips n items emitted by an BehaviorSubject.\n","title":"skip","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","BehaviorSubject"],"BehaviorSubject"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","BehaviorSubject"],"BehaviorSubject"]},{"tag":"TypeVar","contents":"a"}]}]}]},null]}},"sourceSpan":{"start":[341,1],"name":"src/RxJS/BehaviorSubject.purs","end":[341,79]}},{"children":[],"comments":"Returns an BehaviorSubject that skips items emitted by the source BehaviorSubject until a second BehaviorSubject emits an item.\n","title":"skipUntil","info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","BehaviorSubject"],"BehaviorSubject"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","BehaviorSubject"],"BehaviorSubject"]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","BehaviorSubject"],"BehaviorSubject"]},{"tag":"TypeVar","contents":"a"}]}]}]},null]},null]}},"sourceSpan":{"start":[344,1],"name":"src/RxJS/BehaviorSubject.purs","end":[344,100]}},{"children":[],"comments":"Returns an BehaviorSubject that skips all items emitted\nby the source BehaviorSubject as long as a specified condition holds true,\nbut emits all further source items as soon as the condition becomes false.\n","title":"skipWhile","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","BehaviorSubject"],"BehaviorSubject"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","BehaviorSubject"],"BehaviorSubject"]},{"tag":"TypeVar","contents":"a"}]}]}]},null]}},"sourceSpan":{"start":[349,1],"name":"src/RxJS/BehaviorSubject.purs","end":[349,95]}},{"children":[],"comments":"Emits only the first n values emitted by the source BehaviorSubject.\n","title":"take","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","BehaviorSubject"],"BehaviorSubject"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","BehaviorSubject"],"BehaviorSubject"]},{"tag":"TypeVar","contents":"a"}]}]}]},null]}},"sourceSpan":{"start":[352,1],"name":"src/RxJS/BehaviorSubject.purs","end":[352,79]}},{"children":[],"comments":"Lets values pass until a second BehaviorSubject emits something. Then, it completes.\n","title":"takeUntil","info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","BehaviorSubject"],"BehaviorSubject"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","BehaviorSubject"],"BehaviorSubject"]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","BehaviorSubject"],"BehaviorSubject"]},{"tag":"TypeVar","contents":"a"}]}]}]},null]},null]}},"sourceSpan":{"start":[355,1],"name":"src/RxJS/BehaviorSubject.purs","end":[355,100]}},{"children":[],"comments":"Emits values emitted by the source BehaviorSubject so long as each value satisfies\nthe given predicate, and then completes as soon as this predicate is not satisfied.\n","title":"takeWhile","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","BehaviorSubject"],"BehaviorSubject"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","BehaviorSubject"],"BehaviorSubject"]},{"tag":"TypeVar","contents":"a"}]}]}]},null]}},"sourceSpan":{"start":[359,1],"name":"src/RxJS/BehaviorSubject.purs","end":[359,95]}},{"children":[],"comments":"It's like throttleTime, but the silencing duration is determined by a second BehaviorSubject.\n","title":"throttle","info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","BehaviorSubject"],"BehaviorSubject"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","BehaviorSubject"],"BehaviorSubject"]},{"tag":"TypeVar","contents":"b"}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","BehaviorSubject"],"BehaviorSubject"]},{"tag":"TypeVar","contents":"a"}]}]}]},null]},null]}},"sourceSpan":{"start":[362,1],"name":"src/RxJS/BehaviorSubject.purs","end":[362,106]}},{"children":[],"comments":"Emits a value from the source BehaviorSubject, then ignores subsequent source values\nfor duration milliseconds, then repeats this process.\n","title":"throttleTime","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","BehaviorSubject"],"BehaviorSubject"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","BehaviorSubject"],"BehaviorSubject"]},{"tag":"TypeVar","contents":"a"}]}]}]},null]}},"sourceSpan":{"start":[366,1],"name":"src/RxJS/BehaviorSubject.purs","end":[366,87]}},{"children":[],"comments":"An BehaviorSubject of projected values from the most recent values from each input BehaviorSubject.\n","title":"combineLatest","info":{"declType":"value","type":{"tag":"ForAll","contents":["c",{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeVar","contents":"c"}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","BehaviorSubject"],"BehaviorSubject"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","BehaviorSubject"],"BehaviorSubject"]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","BehaviorSubject"],"BehaviorSubject"]},{"tag":"TypeVar","contents":"c"}]}]}]}]},null]},null]},null]}},"sourceSpan":{"start":[372,1],"name":"src/RxJS/BehaviorSubject.purs","end":[373,96]}},{"children":[],"comments":"Concatenates two BehaviorSubjects together by sequentially emitting their values, one BehaviorSubject after the other.\n","title":"concat","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","BehaviorSubject"],"BehaviorSubject"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","BehaviorSubject"],"BehaviorSubject"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","BehaviorSubject"],"BehaviorSubject"]},{"tag":"TypeVar","contents":"a"}]}]}]},null]}},"sourceSpan":{"start":[376,1],"name":"src/RxJS/BehaviorSubject.purs","end":[376,95]}},{"children":[],"comments":"Converts a higher-order BehaviorSubject into a first-order BehaviorSubject by concatenating the inner BehaviorSubjects in order.\n","title":"concatAll","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","BehaviorSubject"],"BehaviorSubject"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","BehaviorSubject"],"BehaviorSubject"]},{"tag":"TypeVar","contents":"a"}]}}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","BehaviorSubject"],"BehaviorSubject"]},{"tag":"TypeVar","contents":"a"}]}]},null]}},"sourceSpan":{"start":[379,1],"name":"src/RxJS/BehaviorSubject.purs","end":[379,95]}},{"children":[],"comments":"Flattens an BehaviorSubject-of-BehaviorSubjects by dropping the next inner BehaviorSubjects\nwhile the current inner is still executing.\n","title":"exhaust","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","BehaviorSubject"],"BehaviorSubject"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","BehaviorSubject"],"BehaviorSubject"]},{"tag":"TypeVar","contents":"a"}]}}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","BehaviorSubject"],"BehaviorSubject"]},{"tag":"TypeVar","contents":"a"}]}]},null]}},"sourceSpan":{"start":[383,1],"name":"src/RxJS/BehaviorSubject.purs","end":[383,93]}},{"children":[],"comments":"Creates an output BehaviorSubject which concurrently emits all values from each input BehaviorSubject.\n","title":"merge","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","BehaviorSubject"],"BehaviorSubject"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","BehaviorSubject"],"BehaviorSubject"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","BehaviorSubject"],"BehaviorSubject"]},{"tag":"TypeVar","contents":"a"}]}]}]},null]}},"sourceSpan":{"start":[386,1],"name":"src/RxJS/BehaviorSubject.purs","end":[386,94]}},{"children":[],"comments":"Converts a higher-order BehaviorSubject into a first-order BehaviorSubject\nwhich concurrently delivers all values that are emitted on the inner BehaviorSubjects.\n","title":"mergeAll","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","BehaviorSubject"],"BehaviorSubject"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","BehaviorSubject"],"BehaviorSubject"]},{"tag":"TypeVar","contents":"a"}]}}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","BehaviorSubject"],"BehaviorSubject"]},{"tag":"TypeVar","contents":"a"}]}]},null]}},"sourceSpan":{"start":[390,1],"name":"src/RxJS/BehaviorSubject.purs","end":[390,94]}},{"children":[],"comments":"Returns an BehaviorSubject that mirrors the first source BehaviorSubject to emit an\nitem from the array of BehaviorSubjects.\n","title":"race","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","BehaviorSubject"],"BehaviorSubject"]},{"tag":"TypeVar","contents":"a"}]}}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","BehaviorSubject"],"BehaviorSubject"]},{"tag":"TypeVar","contents":"a"}]}]},null]}},"sourceSpan":{"start":[394,1],"name":"src/RxJS/BehaviorSubject.purs","end":[394,80]}},{"children":[],"comments":"Returns an BehaviorSubject that emits the items in the given Array before\nit begins to emit items emitted by the source BehaviorSubject.\n","title":"startWith","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","BehaviorSubject"],"BehaviorSubject"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","BehaviorSubject"],"BehaviorSubject"]},{"tag":"TypeVar","contents":"a"}]}]}]},null]}},"sourceSpan":{"start":[398,1],"name":"src/RxJS/BehaviorSubject.purs","end":[398,88]}},{"children":[],"comments":"Combines each value from the source BehaviorSubjects using a project function to\ndetermine the value to be emitted on the output BehaviorSubject.\n","title":"withLatestFrom","info":{"declType":"value","type":{"tag":"ForAll","contents":["c",{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeVar","contents":"c"}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","BehaviorSubject"],"BehaviorSubject"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","BehaviorSubject"],"BehaviorSubject"]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","BehaviorSubject"],"BehaviorSubject"]},{"tag":"TypeVar","contents":"c"}]}]}]}]},null]},null]},null]}},"sourceSpan":{"start":[402,1],"name":"src/RxJS/BehaviorSubject.purs","end":[403,96]}},{"children":[],"comments":"Waits for each BehaviorSubject to emit a value. Once this occurs, all values\nwith the corresponding index will be emitted. This will continue until at\nleast one inner BehaviorSubject completes.\n","title":"zip","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","BehaviorSubject"],"BehaviorSubject"]},{"tag":"TypeVar","contents":"a"}]}}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","BehaviorSubject"],"BehaviorSubject"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]}}]}]},null]}},"sourceSpan":{"start":[408,1],"name":"src/RxJS/BehaviorSubject.purs","end":[408,87]}},{"children":[],"comments":null,"title":"catch","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","BehaviorSubject"],"BehaviorSubject"]},{"tag":"TypeVar","contents":"a"}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Control","Monad","Eff","Exception"],"Error"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","BehaviorSubject"],"BehaviorSubject"]},{"tag":"TypeVar","contents":"a"}]}]}}]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","BehaviorSubject"],"BehaviorSubject"]},{"tag":"TypeVar","contents":"a"}]}}]}]},null]}},"sourceSpan":{"start":[412,1],"name":"src/RxJS/BehaviorSubject.purs","end":[412,109]}},{"children":[],"comments":"If the source BehaviorSubject calls error, this method will resubscribe to the\nsource BehaviorSubject n times rather than propagating the error call.\n","title":"retry","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","BehaviorSubject"],"BehaviorSubject"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","BehaviorSubject"],"BehaviorSubject"]},{"tag":"TypeVar","contents":"a"}]}]}]},null]}},"sourceSpan":{"start":[416,1],"name":"src/RxJS/BehaviorSubject.purs","end":[416,80]}},{"children":[],"comments":"Time shifts each item by some specified amount of milliseconds.\n","title":"delay","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","BehaviorSubject"],"BehaviorSubject"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","BehaviorSubject"],"BehaviorSubject"]},{"tag":"TypeVar","contents":"a"}]}]}]},null]}},"sourceSpan":{"start":[421,1],"name":"src/RxJS/BehaviorSubject.purs","end":[421,80]}},{"children":[],"comments":"Delays the emission of items from the source BehaviorSubject by a given time\nspan determined by the emissions of another BehaviorSubject.\n","title":"delayWhen","info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","BehaviorSubject"],"BehaviorSubject"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","BehaviorSubject"],"BehaviorSubject"]},{"tag":"TypeVar","contents":"b"}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","BehaviorSubject"],"BehaviorSubject"]},{"tag":"TypeVar","contents":"a"}]}]}]},null]},null]}},"sourceSpan":{"start":[425,1],"name":"src/RxJS/BehaviorSubject.purs","end":[425,107]}},{"children":[],"comments":null,"title":"dematerialize","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","BehaviorSubject"],"BehaviorSubject"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Notification"],"Notification"]},{"tag":"TypeVar","contents":"a"}]}}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","BehaviorSubject"],"BehaviorSubject"]},{"tag":"TypeVar","contents":"a"}]}]},null]}},"sourceSpan":{"start":[427,1],"name":"src/RxJS/BehaviorSubject.purs","end":[427,96]}},{"children":[],"comments":null,"title":"materialize","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","BehaviorSubject"],"BehaviorSubject"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","BehaviorSubject"],"BehaviorSubject"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Notification"],"Notification"]},{"tag":"TypeVar","contents":"a"}]}}]}]},null]}},"sourceSpan":{"start":[438,1],"name":"src/RxJS/BehaviorSubject.purs","end":[438,79]}},{"children":[],"comments":"Performs the effect on each value of the BehaviorSubject.  An alias for `do`.\nUseful for testing (transparently performing an effect outside of a subscription).\n","title":"performEach","info":{"declType":"value","type":{"tag":"ForAll","contents":["e",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","BehaviorSubject"],"BehaviorSubject"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad","Eff"],"Eff"]},{"tag":"TypeVar","contents":"e"}]},{"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad","Eff"],"Eff"]},{"tag":"TypeVar","contents":"e"}]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","BehaviorSubject"],"BehaviorSubject"]},{"tag":"TypeVar","contents":"a"}]}}]}]}]},null]},null]}},"sourceSpan":{"start":[443,1],"name":"src/RxJS/BehaviorSubject.purs","end":[443,116]}},{"children":[],"comments":null,"title":"toArray","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","BehaviorSubject"],"BehaviorSubject"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","BehaviorSubject"],"BehaviorSubject"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]}}]}]},null]}},"sourceSpan":{"start":[445,1],"name":"src/RxJS/BehaviorSubject.purs","end":[445,83]}},{"children":[],"comments":"Counts the number of emissions on the source and emits that number when the source completes.\n","title":"count","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","BehaviorSubject"],"BehaviorSubject"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","BehaviorSubject"],"BehaviorSubject"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}]},null]}},"sourceSpan":{"start":[450,1],"name":"src/RxJS/BehaviorSubject.purs","end":[450,75]}}]},{"reExports":[],"name":"RxJS.Notification","comments":null,"declarations":[{"children":[{"comments":null,"title":"OnError","info":{"arguments":[{"tag":"TypeConstructor","contents":[["Control","Monad","Eff","Exception"],"Error"]}],"declType":"dataConstructor"},"sourceSpan":null},{"comments":null,"title":"OnNext","info":{"arguments":[{"tag":"TypeVar","contents":"a"}],"declType":"dataConstructor"},"sourceSpan":null},{"comments":null,"title":"OnComplete","info":{"arguments":[],"declType":"dataConstructor"},"sourceSpan":null},{"comments":null,"title":"showNotification","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","Show"],"Show"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Show"],"Show"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Notification"],"Notification"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[9,1],"name":"src/RxJS/Notification.purs","end":[12,23]}}],"comments":null,"title":"Notification","info":{"declType":"data","dataDeclType":"data","typeArguments":[["a",null]]},"sourceSpan":{"start":[7,1],"name":"src/RxJS/Notification.purs","end":[7,60]}}]},{"reExports":[],"name":"RxJS.Observable","comments":null,"declarations":[{"children":[{"comments":null,"title":"monoidObservable","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Monoid"],"Monoid"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"Observable"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[120,1],"name":"src/RxJS/Observable.purs","end":[121,18]}},{"comments":null,"title":"functorObservable","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Functor"],"Functor"]},{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"Observable"]}]}},"sourceSpan":{"start":[123,1],"name":"src/RxJS/Observable.purs","end":[124,13]}},{"comments":null,"title":"applyObservable","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Apply"],"Apply"]},{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"Observable"]}]}},"sourceSpan":{"start":[126,1],"name":"src/RxJS/Observable.purs","end":[127,27]}},{"comments":null,"title":"applicativeObservable","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Applicative"],"Applicative"]},{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"Observable"]}]}},"sourceSpan":{"start":[129,1],"name":"src/RxJS/Observable.purs","end":[130,14]}},{"comments":null,"title":"bindObservable","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Bind"],"Bind"]},{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"Observable"]}]}},"sourceSpan":{"start":[132,1],"name":"src/RxJS/Observable.purs","end":[133,18]}},{"comments":null,"title":"monadObservable","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad"],"Monad"]},{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"Observable"]}]}},"sourceSpan":{"start":[135,1],"name":"src/RxJS/Observable.purs","end":[135,45]}},{"comments":"NOTE: The semigroup instance uses `merge` NOT `concat`.\n","title":"semigroupObservable","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Semigroup"],"Semigroup"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"Observable"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[138,1],"name":"src/RxJS/Observable.purs","end":[139,17]}},{"comments":null,"title":"altObservable","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Alt"],"Alt"]},{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"Observable"]}]}},"sourceSpan":{"start":[141,1],"name":"src/RxJS/Observable.purs","end":[142,14]}},{"comments":null,"title":"plusObservable","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Plus"],"Plus"]},{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"Observable"]}]}},"sourceSpan":{"start":[144,1],"name":"src/RxJS/Observable.purs","end":[145,17]}},{"comments":null,"title":"alternativeObservable","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Alternative"],"Alternative"]},{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"Observable"]}]}},"sourceSpan":{"start":[147,1],"name":"src/RxJS/Observable.purs","end":[147,57]}},{"comments":null,"title":"monadZeroObservable","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","MonadZero"],"MonadZero"]},{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"Observable"]}]}},"sourceSpan":{"start":[149,1],"name":"src/RxJS/Observable.purs","end":[149,53]}},{"comments":null,"title":"monadPlusObservable","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","MonadPlus"],"MonadPlus"]},{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"Observable"]}]}},"sourceSpan":{"start":[151,1],"name":"src/RxJS/Observable.purs","end":[151,53]}},{"comments":null,"title":"monadErrorObservable","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad","Error","Class"],"MonadError"]},{"tag":"TypeConstructor","contents":[["Control","Monad","Eff","Exception"],"Error"]}]},{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"Observable"]}]}},"sourceSpan":{"start":[153,1],"name":"src/RxJS/Observable.purs","end":[155,21]}},{"comments":null,"title":"arbitraryObservable","info":{"declType":"instance","dependencies":[{"constraintClass":[["Test","QuickCheck","Arbitrary"],"Arbitrary"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Test","QuickCheck","Arbitrary"],"Arbitrary"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"Observable"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[157,1],"name":"src/RxJS/Observable.purs","end":[158,48]}}],"comments":"*Note*: A couple operators are not wrapped (namely, `bindCallback`, `bindNodeCallback`) because RxJS\nimplementation details prevent giving the operators an \"honest\" PureScript type.\nHowever, such operators are replaced easily using `Aff` with the `AsyncSubject` module.\nPlease see [RxJS Version 5.* documentation](http://reactivex.io/rxjs/) for\nadditional details on proper usage of the library.\n","title":"Observable","info":{"kind":{"tag":"FunKind","contents":[{"tag":"NamedKind","contents":[["Prim"],"Type"]},{"tag":"NamedKind","contents":[["Prim"],"Type"]}]},"declType":"externData"},"sourceSpan":{"start":[118,1],"name":"src/RxJS/Observable.purs","end":[118,41]}},{"children":[],"comments":"Makes every `next` call run in the new Scheduler.\n","title":"observeOn","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["RxJS","Scheduler"],"Scheduler"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"Observable"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"Observable"]},{"tag":"TypeVar","contents":"a"}]}]}]},null]}},"sourceSpan":{"start":[161,1],"name":"src/RxJS/Observable.purs","end":[161,80]}},{"children":[],"comments":"Makes subscription happen on a given Scheduler.\n","title":"subscribeOn","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["RxJS","Scheduler"],"Scheduler"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"Observable"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"Observable"]},{"tag":"TypeVar","contents":"a"}]}]}]},null]}},"sourceSpan":{"start":[164,1],"name":"src/RxJS/Observable.purs","end":[164,82]}},{"children":[],"comments":"Subscribing to an Observable is like calling a function, providing\n`next`, `error` and `completed` effects to which the data will be delivered.\n","title":"subscribe","info":{"declType":"value","type":{"tag":"ForAll","contents":["e",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Subscriber"],"Subscriber"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"Observable"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad","Eff"],"Eff"]},{"tag":"TypeVar","contents":"e"}]},{"tag":"TypeConstructor","contents":[["RxJS","Subscription"],"Subscription"]}]}]}]},null]},null]}},"sourceSpan":{"start":[170,1],"name":"src/RxJS/Observable.purs","end":[170,95]}},{"children":[],"comments":null,"title":"subscribeNext","info":{"declType":"value","type":{"tag":"ForAll","contents":["e",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad","Eff"],"Eff"]},{"tag":"TypeVar","contents":"e"}]},{"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"Observable"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad","Eff"],"Eff"]},{"tag":"TypeVar","contents":"e"}]},{"tag":"TypeConstructor","contents":[["RxJS","Subscription"],"Subscription"]}]}]}]},null]},null]}},"sourceSpan":{"start":[173,1],"name":"src/RxJS/Observable.purs","end":[176,27]}},{"children":[],"comments":null,"title":"Response","info":{"arguments":[],"declType":"typeSynonym","type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Record"]},{"tag":"RCons","contents":["body",{"tag":"TypeConstructor","contents":[["Prim"],"String"]},{"tag":"RCons","contents":["status",{"tag":"TypeConstructor","contents":[["Prim"],"Int"]},{"tag":"RCons","contents":["responseType",{"tag":"TypeConstructor","contents":[["Prim"],"String"]},{"tag":"REmpty","contents":[]}]}]}]}]}},"sourceSpan":{"start":[182,1],"name":"src/RxJS/Observable.purs","end":[186,4]}},{"children":[],"comments":null,"title":"Request","info":{"arguments":[],"declType":"typeSynonym","type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Record"]},{"tag":"RCons","contents":["url",{"tag":"TypeConstructor","contents":[["Prim"],"String"]},{"tag":"RCons","contents":["data",{"tag":"TypeConstructor","contents":[["Prim"],"String"]},{"tag":"RCons","contents":["timeout",{"tag":"TypeConstructor","contents":[["Prim"],"Int"]},{"tag":"RCons","contents":["headers",{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","StrMap"],"StrMap"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"RCons","contents":["crossDomain",{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]},{"tag":"RCons","contents":["responseType",{"tag":"TypeConstructor","contents":[["Prim"],"String"]},{"tag":"RCons","contents":["method",{"tag":"TypeConstructor","contents":[["Prim"],"String"]},{"tag":"REmpty","contents":[]}]}]}]}]}]}]}]}]}},"sourceSpan":{"start":[188,1],"name":"src/RxJS/Observable.purs","end":[196,4]}},{"children":[],"comments":null,"title":"ajax","info":{"declType":"value","type":{"tag":"ForAll","contents":["e",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad","Eff"],"Eff"]},{"tag":"TypeVar","contents":"e"}]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"Observable"]},{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"Response"]}]}}]}]},null]}},"sourceSpan":{"start":[211,1],"name":"src/RxJS/Observable.purs","end":[211,71]}},{"children":[],"comments":null,"title":"ajaxWithBody","info":{"declType":"value","type":{"tag":"ForAll","contents":["e",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"Request"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad","Eff"],"Eff"]},{"tag":"TypeVar","contents":"e"}]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"Observable"]},{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"Response"]}]}}]}]},null]}},"sourceSpan":{"start":[213,1],"name":"src/RxJS/Observable.purs","end":[213,80]}},{"children":[],"comments":"Creates an Observable from an Array.\n","title":"fromArray","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"Observable"]},{"tag":"TypeVar","contents":"a"}]}]},null]}},"sourceSpan":{"start":[219,1],"name":"src/RxJS/Observable.purs","end":[219,62]}},{"children":[],"comments":"Creates an Observable that emits events of the specified type coming from the given event target.\n","title":"fromEvent","info":{"declType":"value","type":{"tag":"ForAll","contents":["e",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["DOM","Event","Types"],"EventTarget"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["DOM","Event","Types"],"EventType"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad","Eff"],"Eff"]},{"tag":"TypeVar","contents":"e"}]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"Observable"]},{"tag":"TypeConstructor","contents":[["DOM","Event","Types"],"Event"]}]}}]}]}]},null]}},"sourceSpan":{"start":[222,1],"name":"src/RxJS/Observable.purs","end":[222,76]}},{"children":[],"comments":"Returns an Observable that emits an infinite sequence of ascending\nintegers, with a constant interval of time of your choosing between those\nemissions.\n","title":"interval","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"Observable"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}]}},"sourceSpan":{"start":[230,1],"name":"src/RxJS/Observable.purs","end":[230,49]}},{"children":[],"comments":"Creates an Observable that emits the value specify,\nand then emits a complete notification.  An alias for `of`.\n","title":"just","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"Observable"]},{"tag":"TypeVar","contents":"a"}]}]},null]}},"sourceSpan":{"start":[234,1],"name":"src/RxJS/Observable.purs","end":[234,51]}},{"children":[],"comments":"Creates an Observable that emits no items.  Subscriptions it must be\ndisposed manually.\n","title":"never","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"Observable"]},{"tag":"TypeVar","contents":"a"}]},null]}},"sourceSpan":{"start":[238,1],"name":"src/RxJS/Observable.purs","end":[238,47]}},{"children":[],"comments":"The range operator emits a range of sequential integers, in order, where\nyou select the start of the range and its length\n","title":"range","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"Observable"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}]}]}},"sourceSpan":{"start":[242,1],"name":"src/RxJS/Observable.purs","end":[242,38]}},{"children":[],"comments":"Creates an Observable that immediately sends an error notification.\n","title":"throw","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Control","Monad","Eff","Exception"],"Error"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"Observable"]},{"tag":"TypeVar","contents":"a"}]}]},null]}},"sourceSpan":{"start":[248,1],"name":"src/RxJS/Observable.purs","end":[248,56]}},{"children":[],"comments":"Creates an Observable that, upon subscription, emits and infinite sequence of ascending integers,\nafter a specified delay, every specified period.  Delay and period are in\nmilliseconds.\n","title":"timer","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"Observable"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}]}]}},"sourceSpan":{"start":[253,1],"name":"src/RxJS/Observable.purs","end":[253,38]}},{"children":[],"comments":"Collects values from the first Observable into an Array, and emits that array only when\nsecond Observable emits.\n","title":"buffer","info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"Observable"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"Observable"]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"Observable"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]}}]}]}]},null]},null]}},"sourceSpan":{"start":[261,1],"name":"src/RxJS/Observable.purs","end":[261,90]}},{"children":[],"comments":"Collects values from the past as an array, emits that array when\nits size (arg1) reaches the specified buffer size, and starts a new buffer.\nThe new buffer starts with nth (arg2) element of the Observable counting\nfrom the beginning of the *last* buffer.\n","title":"bufferCount","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"Observable"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"Observable"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]}}]}]}]}]},null]}},"sourceSpan":{"start":[267,1],"name":"src/RxJS/Observable.purs","end":[267,91]}},{"children":[],"comments":"Collects values from the source Observable (arg1) as an array. Starts collecting only when\nthe opening (arg2) Observable emits, and calls the closingSelector function (arg3) to get an Observable\nthat decides when to close the buffer.  Another buffer opens when the\nopening Observable emits its next value.\n","title":"bufferToggle","info":{"declType":"value","type":{"tag":"ForAll","contents":["c",{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"Observable"]},{"tag":"TypeVar","contents":"a"}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"Observable"]},{"tag":"TypeVar","contents":"b"}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"Observable"]},{"tag":"TypeVar","contents":"c"}]}]}}]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"Observable"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]}}]}}]}]}]},null]},null]},null]}},"sourceSpan":{"start":[282,1],"name":"src/RxJS/Observable.purs","end":[286,28]}},{"children":[],"comments":"Collects values from the past as an array. When it starts collecting values,\nit calls a function that returns an Observable that emits to close the\nbuffer and restart collecting.\n","title":"bufferWhen","info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"Observable"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"Observable"]},{"tag":"TypeVar","contents":"b"}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"Observable"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]}}]}]}]},null]},null]}},"sourceSpan":{"start":[296,1],"name":"src/RxJS/Observable.purs","end":[296,101]}},{"children":[],"comments":"Equivalent to mergeMap (a.k.a, `>>=`) EXCEPT that, unlike mergeMap,\nthe next bind will not run until the Observable generated by the projection function (arg2)\ncompletes.  That is, composition is sequential, not concurrent.\nWarning: if source values arrive endlessly and faster than their corresponding\ninner Observables can complete, it will result in memory issues as inner\nObservables amass in an unbounded buffer waiting for their turn to be subscribed to.\n","title":"concatMap","info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"Observable"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"Observable"]},{"tag":"TypeVar","contents":"b"}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"Observable"]},{"tag":"TypeVar","contents":"b"}]}]}]},null]},null]}},"sourceSpan":{"start":[304,1],"name":"src/RxJS/Observable.purs","end":[304,92]}},{"children":[],"comments":"The type signature explains it best.  Warning: Like `concatMap`, composition is sequential.\n","title":"concatMapTo","info":{"declType":"value","type":{"tag":"ForAll","contents":["c",{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"Observable"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"Observable"]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"Observable"]},{"tag":"TypeVar","contents":"c"}]}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"Observable"]},{"tag":"TypeVar","contents":"c"}]}]}]}]},null]},null]},null]}},"sourceSpan":{"start":[307,1],"name":"src/RxJS/Observable.purs","end":[308,92]}},{"children":[],"comments":"It's Like concatMap (a.k.a, `>>=`) EXCEPT that it ignores every new projected\nObservable if the previous projected Observable has not yet completed.\n","title":"exhaustMap","info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"Observable"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"Observable"]},{"tag":"TypeVar","contents":"b"}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"Observable"]},{"tag":"TypeVar","contents":"b"}]}]}]},null]},null]}},"sourceSpan":{"start":[312,1],"name":"src/RxJS/Observable.purs","end":[312,93]}},{"children":[],"comments":"It's similar to mergeMap, but applies the projection function to every source\nvalue as well as every output value. It's recursive.\n","title":"expand","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"Observable"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"Observable"]},{"tag":"TypeVar","contents":"a"}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"Observable"]},{"tag":"TypeVar","contents":"a"}]}]}]},null]}},"sourceSpan":{"start":[316,1],"name":"src/RxJS/Observable.purs","end":[316,87]}},{"children":[],"comments":"Groups the items emitted by an Observable (arg2) according to the value\nreturned by the grouping function (arg1).  Each group becomes its own\nObservable.\n","title":"groupBy","info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"Observable"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"Observable"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"Observable"]},{"tag":"TypeVar","contents":"a"}]}}]}]}]},null]},null]}},"sourceSpan":{"start":[321,1],"name":"src/RxJS/Observable.purs","end":[321,92]}},{"children":[],"comments":"Emits the given constant value on the output Observable every time\nthe source Observable emits a value.\n","title":"mapTo","info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"Observable"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"Observable"]},{"tag":"TypeVar","contents":"b"}]}]}]},null]},null]}},"sourceSpan":{"start":[327,1],"name":"src/RxJS/Observable.purs","end":[327,70]}},{"children":[],"comments":"Maps each value to an Observable, then flattens all of these Observables\nusing mergeAll.  It's just monadic `bind`.\n","title":"mergeMap","info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"Observable"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"Observable"]},{"tag":"TypeVar","contents":"b"}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"Observable"]},{"tag":"TypeVar","contents":"b"}]}]}]},null]},null]}},"sourceSpan":{"start":[331,1],"name":"src/RxJS/Observable.purs","end":[331,91]}},{"children":[],"comments":"Maps each value of the Observable (arg1) to the same inner Observable (arg2),\nthen flattens the result.\n","title":"mergeMapTo","info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"Observable"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"Observable"]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"Observable"]},{"tag":"TypeVar","contents":"b"}]}]}]},null]},null]}},"sourceSpan":{"start":[335,1],"name":"src/RxJS/Observable.purs","end":[335,86]}},{"children":[],"comments":"Puts the current value and previous value together as an array, and emits that.\n","title":"pairwise","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"Observable"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"Observable"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]}}]}]},null]}},"sourceSpan":{"start":[338,1],"name":"src/RxJS/Observable.purs","end":[338,74]}},{"children":[],"comments":"Given a predicate function (arg1), and an Observable (arg2), it outputs a\ntwo element array of partitioned values\n(i.e., [ Observable valuesThatPassPredicate, Observable valuesThatFailPredicate ]).\n","title":"partition","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"Observable"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"Observable"]},{"tag":"TypeVar","contents":"a"}]}}]}]}]},null]}},"sourceSpan":{"start":[343,1],"name":"src/RxJS/Observable.purs","end":[343,93]}},{"children":[],"comments":"Given an accumulator function (arg1), an initial value (arg2), and\na source Observable (arg3), it returns an Observable that emits the current\naccumlation whenever the source emits a value.\n","title":"scan","info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeVar","contents":"b"}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"Observable"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"Observable"]},{"tag":"TypeVar","contents":"b"}]}]}]}]},null]},null]}},"sourceSpan":{"start":[348,1],"name":"src/RxJS/Observable.purs","end":[348,86]}},{"children":[],"comments":"Projects each source value to an Observable which is merged in the output\nObservable, emitting values only from the most recently projected Observable.\n","title":"switchMap","info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"Observable"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"Observable"]},{"tag":"TypeVar","contents":"b"}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"Observable"]},{"tag":"TypeVar","contents":"b"}]}]}]},null]},null]}},"sourceSpan":{"start":[352,1],"name":"src/RxJS/Observable.purs","end":[352,92]}},{"children":[],"comments":"It's like switchMap, but maps each value to the same inner Observable.\n","title":"switchMapTo","info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"Observable"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"Observable"]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"Observable"]},{"tag":"TypeVar","contents":"b"}]}]}]},null]},null]}},"sourceSpan":{"start":[355,1],"name":"src/RxJS/Observable.purs","end":[355,87]}},{"children":[],"comments":"It's like buffer, but emits a nested Observable instead of an array.\n","title":"window","info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"Observable"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"Observable"]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"Observable"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"Observable"]},{"tag":"TypeVar","contents":"a"}]}}]}]}]},null]},null]}},"sourceSpan":{"start":[358,1],"name":"src/RxJS/Observable.purs","end":[358,95]}},{"children":[],"comments":"It's like bufferCount, but emits a nested Observable instead of an array.\n","title":"windowCount","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"Observable"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"Observable"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"Observable"]},{"tag":"TypeVar","contents":"a"}]}}]}]}]}]},null]}},"sourceSpan":{"start":[361,1],"name":"src/RxJS/Observable.purs","end":[361,96]}},{"children":[],"comments":"It's like bufferTime, but emits a nested Observable instead of an array,\nand it doesn't take a maximum size parameter.  arg1 is how long to\nbuffer items into a new Observable, arg2 is the when the next buffer should begin,\nand arg3 is the source Observable.\n","title":"windowTime","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"Observable"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"Observable"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"Observable"]},{"tag":"TypeVar","contents":"a"}]}}]}]}]}]},null]}},"sourceSpan":{"start":[367,1],"name":"src/RxJS/Observable.purs","end":[367,95]}},{"children":[],"comments":"It's like bufferToggle, but emits a nested Observable instead of an array.\n","title":"windowToggle","info":{"declType":"value","type":{"tag":"ForAll","contents":["c",{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"Observable"]},{"tag":"TypeVar","contents":"a"}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"Observable"]},{"tag":"TypeVar","contents":"b"}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"Observable"]},{"tag":"TypeVar","contents":"c"}]}]}}]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"Observable"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]}}]}}]}]}]},null]},null]},null]}},"sourceSpan":{"start":[370,1],"name":"src/RxJS/Observable.purs","end":[374,28]}},{"children":[],"comments":"It's like bufferWhen, but emits a nested Observable instead of an array.\n","title":"windowWhen","info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"Observable"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"Observable"]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"Observable"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"Observable"]},{"tag":"TypeVar","contents":"a"}]}}]}]}]},null]},null]}},"sourceSpan":{"start":[381,1],"name":"src/RxJS/Observable.purs","end":[381,99]}},{"children":[],"comments":"It's like auditTime, but the silencing duration is determined by a second Observable.\n","title":"audit","info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"Observable"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"Observable"]},{"tag":"TypeVar","contents":"b"}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"Observable"]},{"tag":"TypeVar","contents":"a"}]}]}]},null]},null]}},"sourceSpan":{"start":[385,1],"name":"src/RxJS/Observable.purs","end":[385,88]}},{"children":[],"comments":"Ignores source values for duration milliseconds,\nthen emits the most recent value from the source Observable, then repeats this process.\n","title":"auditTime","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"Observable"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"Observable"]},{"tag":"TypeVar","contents":"a"}]}]}]},null]}},"sourceSpan":{"start":[389,1],"name":"src/RxJS/Observable.purs","end":[389,74]}},{"children":[],"comments":"It's like debounceTime, but the time span of emission silence is determined\nby a second Observable.  Allows for a variable debounce rate.\n","title":"debounce","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"Observable"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"Observable"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"Observable"]},{"tag":"TypeVar","contents":"a"}]}]}]},null]}},"sourceSpan":{"start":[393,1],"name":"src/RxJS/Observable.purs","end":[393,91]}},{"children":[],"comments":"It's like delay, but passes only the most recent value from each burst of emissions.\n","title":"debounceTime","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"Observable"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"Observable"]},{"tag":"TypeVar","contents":"a"}]}]}]},null]}},"sourceSpan":{"start":[396,1],"name":"src/RxJS/Observable.purs","end":[396,77]}},{"children":[],"comments":"Returns an Observable that emits all items emitted by the source Observable\nthat are distinct by comparison from previous items.\n","title":"distinct","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"Observable"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"Observable"]},{"tag":"TypeVar","contents":"a"}]}]},null]}},"sourceSpan":{"start":[400,1],"name":"src/RxJS/Observable.purs","end":[400,66]}},{"children":[],"comments":"Returns an Observable that emits all items emitted by the source Observable\nthat are distinct by comparison from the previous item.\n","title":"distinctUntilChanged","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"Observable"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"Observable"]},{"tag":"TypeVar","contents":"a"}]}]},null]}},"sourceSpan":{"start":[404,1],"name":"src/RxJS/Observable.purs","end":[404,78]}},{"children":[],"comments":"Emits the single value at the specified index in a sequence of emissions\nfrom the source Observable.\n","title":"elementAt","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"Observable"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"Observable"]},{"tag":"TypeVar","contents":"a"}]}]}]},null]}},"sourceSpan":{"start":[408,1],"name":"src/RxJS/Observable.purs","end":[408,74]}},{"children":[],"comments":"Filter items emitted by the source Observable by only emitting those that\nsatisfy a specified predicate.\n","title":"filter","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"Observable"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"Observable"]},{"tag":"TypeVar","contents":"a"}]}]}]},null]}},"sourceSpan":{"start":[412,1],"name":"src/RxJS/Observable.purs","end":[412,82]}},{"children":[],"comments":"Ignores all items emitted by the source Observable and only passes calls of complete or error.\n","title":"ignoreElements","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"Observable"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"Observable"]},{"tag":"TypeVar","contents":"a"}]}]},null]}},"sourceSpan":{"start":[415,1],"name":"src/RxJS/Observable.purs","end":[415,72]}},{"children":[],"comments":"Returns an Observable that emits only the last item emitted by the source Observable.\n","title":"last","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"Observable"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"Observable"]},{"tag":"TypeVar","contents":"a"}]}]},null]}},"sourceSpan":{"start":[418,1],"name":"src/RxJS/Observable.purs","end":[418,62]}},{"children":[],"comments":"It's like sampleTime, but samples whenever the notifier Observable emits something.\n","title":"sample","info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"Observable"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"Observable"]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"Observable"]},{"tag":"TypeVar","contents":"a"}]}]}]},null]},null]}},"sourceSpan":{"start":[421,1],"name":"src/RxJS/Observable.purs","end":[421,82]}},{"children":[],"comments":"Periodically looks at the source Observable and emits whichever\nvalue it has most recently emitted since the previous sampling, unless the source has not emitted anything since the previous sampling.\n","title":"sampleTime","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"Observable"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"Observable"]},{"tag":"TypeVar","contents":"a"}]}]}]},null]}},"sourceSpan":{"start":[425,1],"name":"src/RxJS/Observable.purs","end":[425,75]}},{"children":[],"comments":"Returns an Observable that skips n items emitted by an Observable.\n","title":"skip","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"Observable"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"Observable"]},{"tag":"TypeVar","contents":"a"}]}]}]},null]}},"sourceSpan":{"start":[428,1],"name":"src/RxJS/Observable.purs","end":[428,69]}},{"children":[],"comments":"Returns an Observable that skips items emitted by the source Observable until a second Observable emits an item.\n","title":"skipUntil","info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"Observable"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"Observable"]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"Observable"]},{"tag":"TypeVar","contents":"a"}]}]}]},null]},null]}},"sourceSpan":{"start":[431,1],"name":"src/RxJS/Observable.purs","end":[431,85]}},{"children":[],"comments":"Returns an Observable that skips all items emitted\nby the source Observable as long as a specified condition holds true,\nbut emits all further source items as soon as the condition becomes false.\n","title":"skipWhile","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"Observable"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"Observable"]},{"tag":"TypeVar","contents":"a"}]}]}]},null]}},"sourceSpan":{"start":[436,1],"name":"src/RxJS/Observable.purs","end":[436,85]}},{"children":[],"comments":"Emits only the first n values emitted by the source Observable.\n","title":"take","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"Observable"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"Observable"]},{"tag":"TypeVar","contents":"a"}]}]}]},null]}},"sourceSpan":{"start":[439,1],"name":"src/RxJS/Observable.purs","end":[439,69]}},{"children":[],"comments":"Lets values pass until a second Observable emits something. Then, it completes.\n","title":"takeUntil","info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"Observable"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"Observable"]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"Observable"]},{"tag":"TypeVar","contents":"a"}]}]}]},null]},null]}},"sourceSpan":{"start":[442,1],"name":"src/RxJS/Observable.purs","end":[442,85]}},{"children":[],"comments":"Emits values emitted by the source Observable so long as each value satisfies\nthe given predicate, and then completes as soon as this predicate is not satisfied.\n","title":"takeWhile","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"Observable"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"Observable"]},{"tag":"TypeVar","contents":"a"}]}]}]},null]}},"sourceSpan":{"start":[446,1],"name":"src/RxJS/Observable.purs","end":[446,85]}},{"children":[],"comments":"It's like throttleTime, but the silencing duration is determined by a second Observable.\n","title":"throttle","info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"Observable"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"Observable"]},{"tag":"TypeVar","contents":"b"}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"Observable"]},{"tag":"TypeVar","contents":"a"}]}]}]},null]},null]}},"sourceSpan":{"start":[449,1],"name":"src/RxJS/Observable.purs","end":[449,91]}},{"children":[],"comments":"Emits a value from the source Observable, then ignores subsequent source values\nfor duration milliseconds, then repeats this process.\n","title":"throttleTime","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"Observable"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"Observable"]},{"tag":"TypeVar","contents":"a"}]}]}]},null]}},"sourceSpan":{"start":[453,1],"name":"src/RxJS/Observable.purs","end":[453,77]}},{"children":[],"comments":"An Observable of projected values from the most recent values from each input Observable.\n","title":"combineLatest","info":{"declType":"value","type":{"tag":"ForAll","contents":["c",{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeVar","contents":"c"}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"Observable"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"Observable"]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"Observable"]},{"tag":"TypeVar","contents":"c"}]}]}]}]},null]},null]},null]}},"sourceSpan":{"start":[458,1],"name":"src/RxJS/Observable.purs","end":[459,81]}},{"children":[],"comments":null,"title":"combineLatest3","info":{"declType":"value","type":{"tag":"ForAll","contents":["d",{"tag":"ForAll","contents":["c",{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"c"}]},{"tag":"TypeVar","contents":"d"}]}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"Observable"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"Observable"]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"Observable"]},{"tag":"TypeVar","contents":"c"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"Observable"]},{"tag":"TypeVar","contents":"d"}]}]}]}]}]},null]},null]},null]},null]}},"sourceSpan":{"start":[461,1],"name":"src/RxJS/Observable.purs","end":[462,104]}},{"children":[],"comments":"Concatenates two Observables together by sequentially emitting their values, one Observable after the other.\n","title":"concat","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"Observable"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"Observable"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"Observable"]},{"tag":"TypeVar","contents":"a"}]}]}]},null]}},"sourceSpan":{"start":[465,1],"name":"src/RxJS/Observable.purs","end":[465,80]}},{"children":[],"comments":"Converts a higher-order Observable into a first-order Observable by concatenating the inner Observables in order.\n","title":"concatAll","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"Observable"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"Observable"]},{"tag":"TypeVar","contents":"a"}]}}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"Observable"]},{"tag":"TypeVar","contents":"a"}]}]},null]}},"sourceSpan":{"start":[468,1],"name":"src/RxJS/Observable.purs","end":[468,80]}},{"children":[],"comments":"Flattens an Observable-of-Observables by dropping the next inner Observables\nwhile the current inner is still executing.\n","title":"exhaust","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"Observable"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"Observable"]},{"tag":"TypeVar","contents":"a"}]}}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"Observable"]},{"tag":"TypeVar","contents":"a"}]}]},null]}},"sourceSpan":{"start":[472,1],"name":"src/RxJS/Observable.purs","end":[472,78]}},{"children":[],"comments":"Creates an output Observable which concurrently emits all values from each input Observable.\n","title":"merge","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"Observable"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"Observable"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"Observable"]},{"tag":"TypeVar","contents":"a"}]}]}]},null]}},"sourceSpan":{"start":[475,1],"name":"src/RxJS/Observable.purs","end":[475,79]}},{"children":[],"comments":"Converts a higher-order Observable into a first-order Observable\nwhich concurrently delivers all values that are emitted on the inner Observables.\n","title":"mergeAll","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"Observable"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"Observable"]},{"tag":"TypeVar","contents":"a"}]}}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"Observable"]},{"tag":"TypeVar","contents":"a"}]}]},null]}},"sourceSpan":{"start":[479,1],"name":"src/RxJS/Observable.purs","end":[479,79]}},{"children":[],"comments":"Returns an Observable that mirrors the first source Observable to emit an\nitem from the array of Observables.\n","title":"race","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"Observable"]},{"tag":"TypeVar","contents":"a"}]}}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"Observable"]},{"tag":"TypeVar","contents":"a"}]}]},null]}},"sourceSpan":{"start":[483,1],"name":"src/RxJS/Observable.purs","end":[483,70]}},{"children":[],"comments":"Returns an Observable that emits the items in the given Foldable before\nit begins to emit items emitted by the source Observable.\n","title":"startWithMany","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["f",{"tag":"ConstrainedType","contents":[[{"constraintClass":[["Data","Foldable"],"Foldable"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}],"constraintData":null}],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"Observable"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"Observable"]},{"tag":"TypeVar","contents":"a"}]}]}]}]},null]},null]}},"sourceSpan":{"start":[487,1],"name":"src/RxJS/Observable.purs","end":[487,79]}},{"children":[],"comments":"Returns an Observable that emits the item given before\nit begins to emit items emitted by the source Observable.\n","title":"startWith","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"Observable"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"Observable"]},{"tag":"TypeVar","contents":"a"}]}]}]},null]}},"sourceSpan":{"start":[493,1],"name":"src/RxJS/Observable.purs","end":[493,72]}},{"children":[],"comments":"Combines each value from the source Observables using a project function to\ndetermine the value to be emitted on the output Observable.\n","title":"withLatestFrom","info":{"declType":"value","type":{"tag":"ForAll","contents":["c",{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeVar","contents":"c"}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"Observable"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"Observable"]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"Observable"]},{"tag":"TypeVar","contents":"c"}]}]}]}]},null]},null]},null]}},"sourceSpan":{"start":[497,1],"name":"src/RxJS/Observable.purs","end":[498,81]}},{"children":[],"comments":"Waits for each Observable to emit a value. Once this occurs, all values\nwith the corresponding index will be emitted. This will continue until at\nleast one inner observable completes.\n","title":"zip","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"Observable"]},{"tag":"TypeVar","contents":"a"}]}}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"Observable"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]}}]}]},null]}},"sourceSpan":{"start":[503,1],"name":"src/RxJS/Observable.purs","end":[503,77]}},{"children":[],"comments":null,"title":"catch","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"Observable"]},{"tag":"TypeVar","contents":"a"}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Control","Monad","Eff","Exception"],"Error"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"Observable"]},{"tag":"TypeVar","contents":"a"}]}]}}]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"Observable"]},{"tag":"TypeVar","contents":"a"}]}}]}]},null]}},"sourceSpan":{"start":[506,1],"name":"src/RxJS/Observable.purs","end":[506,94]}},{"children":[],"comments":"If the source Observable calls error, this method will resubscribe to the\nsource Observable n times rather than propagating the error call.\n","title":"retry","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"Observable"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"Observable"]},{"tag":"TypeVar","contents":"a"}]}]}]},null]}},"sourceSpan":{"start":[510,1],"name":"src/RxJS/Observable.purs","end":[510,70]}},{"children":[],"comments":"Time shifts each item by some specified amount of milliseconds.\n","title":"delay","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"Observable"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"Observable"]},{"tag":"TypeVar","contents":"a"}]}]}]},null]}},"sourceSpan":{"start":[514,1],"name":"src/RxJS/Observable.purs","end":[514,70]}},{"children":[],"comments":"Delays the emission of items from the source Observable by a given time\nspan determined by the emissions of another Observable.\n","title":"delayWhen","info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"Observable"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"Observable"]},{"tag":"TypeVar","contents":"b"}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"Observable"]},{"tag":"TypeVar","contents":"a"}]}]}]},null]},null]}},"sourceSpan":{"start":[518,1],"name":"src/RxJS/Observable.purs","end":[518,92]}},{"children":[],"comments":null,"title":"dematerialize","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"Observable"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Notification"],"Notification"]},{"tag":"TypeVar","contents":"a"}]}}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"Observable"]},{"tag":"TypeVar","contents":"a"}]}]},null]}},"sourceSpan":{"start":[520,1],"name":"src/RxJS/Observable.purs","end":[520,86]}},{"children":[],"comments":null,"title":"materialize","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"Observable"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"Observable"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Notification"],"Notification"]},{"tag":"TypeVar","contents":"a"}]}}]}]},null]}},"sourceSpan":{"start":[531,1],"name":"src/RxJS/Observable.purs","end":[531,69]}},{"children":[],"comments":"Performs the effect on each value of the Observable.  An alias for `do`.\nUseful for testing (transparently performing an effect outside of a subscription).\n","title":"performEach","info":{"declType":"value","type":{"tag":"ForAll","contents":["e",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"Observable"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad","Eff"],"Eff"]},{"tag":"TypeVar","contents":"e"}]},{"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad","Eff"],"Eff"]},{"tag":"TypeVar","contents":"e"}]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"Observable"]},{"tag":"TypeVar","contents":"a"}]}}]}]}]},null]},null]}},"sourceSpan":{"start":[536,1],"name":"src/RxJS/Observable.purs","end":[536,106]}},{"children":[],"comments":null,"title":"toArray","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"Observable"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"Observable"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]}}]}]},null]}},"sourceSpan":{"start":[538,1],"name":"src/RxJS/Observable.purs","end":[538,73]}},{"children":[],"comments":"Returns an Observable that emits the items emitted by the source Observable or a specified default item\nif the source Observable is empty.\n\n<img width=\"640\" height=\"305\" src=\"http://reactivex.io/documentation/operators/images/defaultIfEmpty.c.png\" alt=\"\" />\n\ntakes a defaultValue which is the item to emit if the source Observable emits no items.\n\nreturns an Observable that emits either the specified default item if the source Observable emits no\n        items, or the items emitted by the source Observable\n","title":"defaultIfEmpty","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"Observable"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"Observable"]},{"tag":"TypeVar","contents":"a"}]}]}]},null]}},"sourceSpan":{"start":[551,1],"name":"src/RxJS/Observable.purs","end":[551,77]}},{"children":[],"comments":"Tests whether this `Observable` emits no elements.\n\nreturns an Observable emitting one single Boolean, which is `true` if this `Observable`\n        emits no elements, and `false` otherwise.\n","title":"isEmpty","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"Observable"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"Observable"]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}]},null]}},"sourceSpan":{"start":[557,1],"name":"src/RxJS/Observable.purs","end":[557,71]}},{"children":[],"comments":"Returns a new Observable that multicasts (shares) the original Observable. As long a\nthere is more than 1 Subscriber, this Observable will be subscribed and emitting data.\nWhen all subscribers have unsubscribed it will unsubscribe from the source Observable.\n\nThis is an alias for `publish().refCount()`\n\n<img width=\"640\" height=\"510\" src=\"https://raw.githubusercontent.com/wiki/ReactiveX/RxJava/images/rx-operators/publishRefCount.png\" alt=\"\" />\n\nreturns an Observable that upon connection causes the source Observable to emit items to its Subscribers\n","title":"share","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"Observable"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"Observable"]},{"tag":"TypeVar","contents":"a"}]}]},null]}},"sourceSpan":{"start":[567,1],"name":"src/RxJS/Observable.purs","end":[567,63]}},{"children":[],"comments":"Counts the number of emissions on the source and emits that number when the source completes.\n","title":"count","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"Observable"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"Observable"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}]},null]}},"sourceSpan":{"start":[572,1],"name":"src/RxJS/Observable.purs","end":[572,65]}},{"children":[],"comments":"Applies an accumulator function over the source Observable, and returns the accumulated\nresult when the source completes, given a seed value.\n","title":"reduce","info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeVar","contents":"b"}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"Observable"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"Observable"]},{"tag":"TypeVar","contents":"b"}]}]}]}]},null]},null]}},"sourceSpan":{"start":[576,1],"name":"src/RxJS/Observable.purs","end":[576,88]}},{"children":[],"comments":"Run an Observable of effects\n","title":"unwrap","info":{"declType":"value","type":{"tag":"ForAll","contents":["e",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"Observable"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad","Eff"],"Eff"]},{"tag":"TypeVar","contents":"e"}]},{"tag":"TypeVar","contents":"a"}]}}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad","Eff"],"Eff"]},{"tag":"TypeVar","contents":"e"}]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"Observable"]},{"tag":"TypeVar","contents":"a"}]}}]}]},null]},null]}},"sourceSpan":{"start":[581,1],"name":"src/RxJS/Observable.purs","end":[581,81]}}]},{"reExports":[],"name":"RxJS.ReplaySubject","comments":null,"declarations":[{"children":[{"comments":null,"title":"functorReplaySubject","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Functor"],"Functor"]},{"tag":"TypeConstructor","contents":[["RxJS","ReplaySubject"],"ReplaySubject"]}]}},"sourceSpan":{"start":[103,1],"name":"src/RxJS/ReplaySubject.purs","end":[104,13]}},{"comments":null,"title":"applyReplaySubject","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Apply"],"Apply"]},{"tag":"TypeConstructor","contents":[["RxJS","ReplaySubject"],"ReplaySubject"]}]}},"sourceSpan":{"start":[106,1],"name":"src/RxJS/ReplaySubject.purs","end":[107,27]}},{"comments":null,"title":"applicativeReplaySubject","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Applicative"],"Applicative"]},{"tag":"TypeConstructor","contents":[["RxJS","ReplaySubject"],"ReplaySubject"]}]}},"sourceSpan":{"start":[109,1],"name":"src/RxJS/ReplaySubject.purs","end":[110,14]}},{"comments":null,"title":"bindReplaySubject","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Bind"],"Bind"]},{"tag":"TypeConstructor","contents":[["RxJS","ReplaySubject"],"ReplaySubject"]}]}},"sourceSpan":{"start":[112,1],"name":"src/RxJS/ReplaySubject.purs","end":[113,18]}},{"comments":null,"title":"monadReplaySubject","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad"],"Monad"]},{"tag":"TypeConstructor","contents":[["RxJS","ReplaySubject"],"ReplaySubject"]}]}},"sourceSpan":{"start":[115,1],"name":"src/RxJS/ReplaySubject.purs","end":[115,51]}},{"comments":"NOTE: The semigroup instance uses `merge` NOT `concat`.\n","title":"semigroupReplaySubject","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Semigroup"],"Semigroup"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","ReplaySubject"],"ReplaySubject"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[118,1],"name":"src/RxJS/ReplaySubject.purs","end":[119,17]}},{"comments":null,"title":"altReplaySubject","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Alt"],"Alt"]},{"tag":"TypeConstructor","contents":[["RxJS","ReplaySubject"],"ReplaySubject"]}]}},"sourceSpan":{"start":[121,1],"name":"src/RxJS/ReplaySubject.purs","end":[122,14]}},{"comments":null,"title":"plusReplaySubject","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Plus"],"Plus"]},{"tag":"TypeConstructor","contents":[["RxJS","ReplaySubject"],"ReplaySubject"]}]}},"sourceSpan":{"start":[124,1],"name":"src/RxJS/ReplaySubject.purs","end":[125,22]}},{"comments":null,"title":"alternativeReplaySubject","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Alternative"],"Alternative"]},{"tag":"TypeConstructor","contents":[["RxJS","ReplaySubject"],"ReplaySubject"]}]}},"sourceSpan":{"start":[127,1],"name":"src/RxJS/ReplaySubject.purs","end":[127,63]}},{"comments":null,"title":"monadZeroReplaySubject","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","MonadZero"],"MonadZero"]},{"tag":"TypeConstructor","contents":[["RxJS","ReplaySubject"],"ReplaySubject"]}]}},"sourceSpan":{"start":[129,1],"name":"src/RxJS/ReplaySubject.purs","end":[129,59]}},{"comments":null,"title":"monadPlusReplaySubject","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","MonadPlus"],"MonadPlus"]},{"tag":"TypeConstructor","contents":[["RxJS","ReplaySubject"],"ReplaySubject"]}]}},"sourceSpan":{"start":[131,1],"name":"src/RxJS/ReplaySubject.purs","end":[131,59]}}],"comments":"Please see [RxJS Version 5.* documentation](http://reactivex.io/rxjs/) for\nadditional details on proper usage of the library.\n","title":"ReplaySubject","info":{"kind":{"tag":"FunKind","contents":[{"tag":"NamedKind","contents":[["Prim"],"Type"]},{"tag":"NamedKind","contents":[["Prim"],"Type"]}]},"declType":"externData"},"sourceSpan":{"start":[101,1],"name":"src/RxJS/ReplaySubject.purs","end":[101,44]}},{"children":[],"comments":"Makes every `next` call run in the new Scheduler.\n","title":"observeOn","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["RxJS","Scheduler"],"Scheduler"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","ReplaySubject"],"ReplaySubject"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","ReplaySubject"],"ReplaySubject"]},{"tag":"TypeVar","contents":"a"}]}]}]},null]}},"sourceSpan":{"start":[136,1],"name":"src/RxJS/ReplaySubject.purs","end":[136,86]}},{"children":[],"comments":"Makes subscription happen on a given Scheduler.\n","title":"subscribeOn","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["RxJS","Scheduler"],"Scheduler"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","ReplaySubject"],"ReplaySubject"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","ReplaySubject"],"ReplaySubject"]},{"tag":"TypeVar","contents":"a"}]}]}]},null]}},"sourceSpan":{"start":[139,1],"name":"src/RxJS/ReplaySubject.purs","end":[139,88]}},{"children":[],"comments":"Subscribing to an ReplaySubject is like calling a function, providing\n`next`, `error` and `completed` effects to which the data will be delivered.\n","title":"subscribe","info":{"declType":"value","type":{"tag":"ForAll","contents":["e",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Subscriber"],"Subscriber"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","ReplaySubject"],"ReplaySubject"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad","Eff"],"Eff"]},{"tag":"TypeVar","contents":"e"}]},{"tag":"TypeConstructor","contents":[["RxJS","Subscription"],"Subscription"]}]}]}]},null]},null]}},"sourceSpan":{"start":[145,1],"name":"src/RxJS/ReplaySubject.purs","end":[145,98]}},{"children":[],"comments":null,"title":"subscribeNext","info":{"declType":"value","type":{"tag":"ForAll","contents":["e",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad","Eff"],"Eff"]},{"tag":"TypeVar","contents":"e"}]},{"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","ReplaySubject"],"ReplaySubject"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad","Eff"],"Eff"]},{"tag":"TypeVar","contents":"e"}]},{"tag":"TypeConstructor","contents":[["RxJS","Subscription"],"Subscription"]}]}]}]},null]},null]}},"sourceSpan":{"start":[150,1],"name":"src/RxJS/ReplaySubject.purs","end":[153,27]}},{"children":[],"comments":"Creates an ReplaySubject that emits the value specify,\nand then emits a complete notification.  An alias for `of`.\n","title":"just","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","ReplaySubject"],"ReplaySubject"]},{"tag":"TypeVar","contents":"a"}]}]},null]}},"sourceSpan":{"start":[160,1],"name":"src/RxJS/ReplaySubject.purs","end":[160,54]}},{"children":[],"comments":"Send a new value to a ReplaySubject\n","title":"next","info":{"declType":"value","type":{"tag":"ForAll","contents":["e",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","ReplaySubject"],"ReplaySubject"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad","Eff"],"Eff"]},{"tag":"TypeVar","contents":"e"}]},{"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}]}]},null]},null]}},"sourceSpan":{"start":[167,1],"name":"src/RxJS/ReplaySubject.purs","end":[167,70]}},{"children":[],"comments":"An alias for next\n","title":"send","info":{"declType":"value","type":{"tag":"ForAll","contents":["e",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","ReplaySubject"],"ReplaySubject"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad","Eff"],"Eff"]},{"tag":"TypeVar","contents":"e"}]},{"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}]}]},null]},null]}},"sourceSpan":{"start":[170,1],"name":"src/RxJS/ReplaySubject.purs","end":[170,55]}},{"children":[],"comments":"Create an Observable from a ReplaySubject\n","title":"asObservable","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","ReplaySubject"],"ReplaySubject"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"Observable"]},{"tag":"TypeVar","contents":"a"}]}]},null]}},"sourceSpan":{"start":[174,1],"name":"src/RxJS/ReplaySubject.purs","end":[174,73]}},{"children":[],"comments":"Collects values from the first ReplaySubject into an Array, and emits that array only when\nsecond ReplaySubject emits.\n","title":"buffer","info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","ReplaySubject"],"ReplaySubject"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","ReplaySubject"],"ReplaySubject"]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","ReplaySubject"],"ReplaySubject"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]}}]}]}]},null]},null]}},"sourceSpan":{"start":[181,1],"name":"src/RxJS/ReplaySubject.purs","end":[181,99]}},{"children":[],"comments":"Collects values from the past as an array, emits that array when\nits size (arg1) reaches the specified buffer size, and starts a new buffer.\nThe new buffer starts with nth (arg2) element of the ReplaySubject counting\nfrom the beginning of the *last* buffer.\n","title":"bufferCount","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","ReplaySubject"],"ReplaySubject"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","ReplaySubject"],"ReplaySubject"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]}}]}]}]}]},null]}},"sourceSpan":{"start":[187,1],"name":"src/RxJS/ReplaySubject.purs","end":[187,97]}},{"children":[],"comments":"Collects values from the source ReplaySubject (arg1) as an array. Starts collecting only when\nthe opening (arg2) ReplaySubject emits, and calls the closingSelector function (arg3) to get an ReplaySubject\nthat decides when to close the buffer.  Another buffer opens when the\nopening ReplaySubject emits its next value.\n","title":"bufferToggle","info":{"declType":"value","type":{"tag":"ForAll","contents":["c",{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","ReplaySubject"],"ReplaySubject"]},{"tag":"TypeVar","contents":"a"}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","ReplaySubject"],"ReplaySubject"]},{"tag":"TypeVar","contents":"b"}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","ReplaySubject"],"ReplaySubject"]},{"tag":"TypeVar","contents":"c"}]}]}}]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","ReplaySubject"],"ReplaySubject"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]}}]}}]}]}]},null]},null]},null]}},"sourceSpan":{"start":[202,1],"name":"src/RxJS/ReplaySubject.purs","end":[206,31]}},{"children":[],"comments":"Collects values from the past as an array. When it starts collecting values,\nit calls a function that returns an ReplaySubject that emits to close the\nbuffer and restart collecting.\n","title":"bufferWhen","info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","ReplaySubject"],"ReplaySubject"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","ReplaySubject"],"ReplaySubject"]},{"tag":"TypeVar","contents":"b"}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","ReplaySubject"],"ReplaySubject"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]}}]}]}]},null]},null]}},"sourceSpan":{"start":[216,1],"name":"src/RxJS/ReplaySubject.purs","end":[216,110]}},{"children":[],"comments":"Equivalent to mergeMap (a.k.a, `>>=`) EXCEPT that, unlike mergeMap,\nthe next bind will not run until the ReplaySubject generated by the projection function (arg2)\ncompletes.  That is, composition is sequential, not concurrent.\nWarning: if source values arrive endlessly and faster than their corresponding\ninner ReplaySubjects can complete, it will result in memory issues as inner\nReplaySubjects amass in an unbounded buffer waiting for their turn to be subscribed to.\n","title":"concatMap","info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","ReplaySubject"],"ReplaySubject"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","ReplaySubject"],"ReplaySubject"]},{"tag":"TypeVar","contents":"b"}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","ReplaySubject"],"ReplaySubject"]},{"tag":"TypeVar","contents":"b"}]}]}]},null]},null]}},"sourceSpan":{"start":[224,1],"name":"src/RxJS/ReplaySubject.purs","end":[224,101]}},{"children":[],"comments":"The type signature explains it best.  Warning: Like `concatMap`, composition is sequential.\n","title":"concatMapTo","info":{"declType":"value","type":{"tag":"ForAll","contents":["c",{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","ReplaySubject"],"ReplaySubject"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","ReplaySubject"],"ReplaySubject"]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","ReplaySubject"],"ReplaySubject"]},{"tag":"TypeVar","contents":"c"}]}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","ReplaySubject"],"ReplaySubject"]},{"tag":"TypeVar","contents":"c"}]}]}]}]},null]},null]},null]}},"sourceSpan":{"start":[227,1],"name":"src/RxJS/ReplaySubject.purs","end":[228,104]}},{"children":[],"comments":"It's Like concatMap (a.k.a, `>>=`) EXCEPT that it ignores every new projected\nReplaySubject if the previous projected ReplaySubject has not yet completed.\n","title":"exhaustMap","info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","ReplaySubject"],"ReplaySubject"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","ReplaySubject"],"ReplaySubject"]},{"tag":"TypeVar","contents":"b"}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","ReplaySubject"],"ReplaySubject"]},{"tag":"TypeVar","contents":"b"}]}]}]},null]},null]}},"sourceSpan":{"start":[232,1],"name":"src/RxJS/ReplaySubject.purs","end":[232,102]}},{"children":[],"comments":"It's similar to mergeMap, but applies the projection function to every source\nvalue as well as every output value. It's recursive.\n","title":"expand","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","ReplaySubject"],"ReplaySubject"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","ReplaySubject"],"ReplaySubject"]},{"tag":"TypeVar","contents":"a"}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","ReplaySubject"],"ReplaySubject"]},{"tag":"TypeVar","contents":"a"}]}]}]},null]}},"sourceSpan":{"start":[236,1],"name":"src/RxJS/ReplaySubject.purs","end":[236,96]}},{"children":[],"comments":"Groups the items emitted by an ReplaySubject (arg2) according to the value\nreturned by the grouping function (arg1).  Each group becomes its own\nReplaySubject.\n","title":"groupBy","info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","ReplaySubject"],"ReplaySubject"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","ReplaySubject"],"ReplaySubject"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","ReplaySubject"],"ReplaySubject"]},{"tag":"TypeVar","contents":"a"}]}}]}]}]},null]},null]}},"sourceSpan":{"start":[241,1],"name":"src/RxJS/ReplaySubject.purs","end":[241,101]}},{"children":[],"comments":"Emits the given constant value on the output ReplaySubject every time\nthe source ReplaySubject emits a value.\n","title":"mapTo","info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","ReplaySubject"],"ReplaySubject"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","ReplaySubject"],"ReplaySubject"]},{"tag":"TypeVar","contents":"b"}]}]}]},null]},null]}},"sourceSpan":{"start":[247,1],"name":"src/RxJS/ReplaySubject.purs","end":[247,76]}},{"children":[],"comments":"Maps each value to an ReplaySubject, then flattens all of these ReplaySubjects\nusing mergeAll.  It's just monadic `bind`.\n","title":"mergeMap","info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","ReplaySubject"],"ReplaySubject"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","ReplaySubject"],"ReplaySubject"]},{"tag":"TypeVar","contents":"b"}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","ReplaySubject"],"ReplaySubject"]},{"tag":"TypeVar","contents":"b"}]}]}]},null]},null]}},"sourceSpan":{"start":[251,1],"name":"src/RxJS/ReplaySubject.purs","end":[251,100]}},{"children":[],"comments":"Maps each value of the ReplaySubject (arg1) to the same inner ReplaySubject (arg2),\nthen flattens the result.\n","title":"mergeMapTo","info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","ReplaySubject"],"ReplaySubject"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","ReplaySubject"],"ReplaySubject"]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","ReplaySubject"],"ReplaySubject"]},{"tag":"TypeVar","contents":"b"}]}]}]},null]},null]}},"sourceSpan":{"start":[255,1],"name":"src/RxJS/ReplaySubject.purs","end":[255,95]}},{"children":[],"comments":"Puts the current value and previous value together as an array, and emits that.\n","title":"pairwise","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","ReplaySubject"],"ReplaySubject"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","ReplaySubject"],"ReplaySubject"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]}}]}]},null]}},"sourceSpan":{"start":[258,1],"name":"src/RxJS/ReplaySubject.purs","end":[258,80]}},{"children":[],"comments":"Given a predicate function (arg1), and an ReplaySubject (arg2), it outputs a\ntwo element array of partitioned values\n(i.e., [ ReplaySubject valuesThatPassPredicate, ReplaySubject valuesThatFailPredicate ]).\n","title":"partition","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","ReplaySubject"],"ReplaySubject"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","ReplaySubject"],"ReplaySubject"]},{"tag":"TypeVar","contents":"a"}]}}]}]}]},null]}},"sourceSpan":{"start":[263,1],"name":"src/RxJS/ReplaySubject.purs","end":[263,99]}},{"children":[],"comments":"Given an accumulator function (arg1), an initial value (arg2), and\na source ReplaySubject (arg3), it returns an ReplaySubject that emits the current\naccumlation whenever the source emits a value.\n","title":"scan","info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeVar","contents":"b"}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","ReplaySubject"],"ReplaySubject"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","ReplaySubject"],"ReplaySubject"]},{"tag":"TypeVar","contents":"b"}]}]}]}]},null]},null]}},"sourceSpan":{"start":[268,1],"name":"src/RxJS/ReplaySubject.purs","end":[268,92]}},{"children":[],"comments":"Projects each source value to an ReplaySubject which is merged in the output\nReplaySubject, emitting values only from the most recently projected ReplaySubject.\n","title":"switchMap","info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","ReplaySubject"],"ReplaySubject"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","ReplaySubject"],"ReplaySubject"]},{"tag":"TypeVar","contents":"b"}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","ReplaySubject"],"ReplaySubject"]},{"tag":"TypeVar","contents":"b"}]}]}]},null]},null]}},"sourceSpan":{"start":[272,1],"name":"src/RxJS/ReplaySubject.purs","end":[272,101]}},{"children":[],"comments":"It's like switchMap, but maps each value to the same inner ReplaySubject.\n","title":"switchMapTo","info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","ReplaySubject"],"ReplaySubject"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","ReplaySubject"],"ReplaySubject"]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","ReplaySubject"],"ReplaySubject"]},{"tag":"TypeVar","contents":"b"}]}]}]},null]},null]}},"sourceSpan":{"start":[275,1],"name":"src/RxJS/ReplaySubject.purs","end":[275,96]}},{"children":[],"comments":"It's like buffer, but emits a nested ReplaySubject instead of an array.\n","title":"window","info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","ReplaySubject"],"ReplaySubject"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","ReplaySubject"],"ReplaySubject"]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","ReplaySubject"],"ReplaySubject"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","ReplaySubject"],"ReplaySubject"]},{"tag":"TypeVar","contents":"a"}]}}]}]}]},null]},null]}},"sourceSpan":{"start":[278,1],"name":"src/RxJS/ReplaySubject.purs","end":[278,107]}},{"children":[],"comments":"It's like bufferCount, but emits a nested ReplaySubject instead of an array.\n","title":"windowCount","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","ReplaySubject"],"ReplaySubject"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","ReplaySubject"],"ReplaySubject"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","ReplaySubject"],"ReplaySubject"]},{"tag":"TypeVar","contents":"a"}]}}]}]}]}]},null]}},"sourceSpan":{"start":[281,1],"name":"src/RxJS/ReplaySubject.purs","end":[281,105]}},{"children":[],"comments":"It's like bufferTime, but emits a nested ReplaySubject instead of an array,\nand it doesn't take a maximum size parameter.  arg1 is how long to\nbuffer items into a new ReplaySubject, arg2 is the when the next buffer should begin,\nand arg3 is the source ReplaySubject.\n","title":"windowTime","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","ReplaySubject"],"ReplaySubject"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","ReplaySubject"],"ReplaySubject"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","ReplaySubject"],"ReplaySubject"]},{"tag":"TypeVar","contents":"a"}]}}]}]}]}]},null]}},"sourceSpan":{"start":[287,1],"name":"src/RxJS/ReplaySubject.purs","end":[287,104]}},{"children":[],"comments":"It's like bufferToggle, but emits a nested ReplaySubject instead of an array.\n","title":"windowToggle","info":{"declType":"value","type":{"tag":"ForAll","contents":["c",{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","ReplaySubject"],"ReplaySubject"]},{"tag":"TypeVar","contents":"a"}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","ReplaySubject"],"ReplaySubject"]},{"tag":"TypeVar","contents":"b"}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","ReplaySubject"],"ReplaySubject"]},{"tag":"TypeVar","contents":"c"}]}]}}]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","ReplaySubject"],"ReplaySubject"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]}}]}}]}]}]},null]},null]},null]}},"sourceSpan":{"start":[290,1],"name":"src/RxJS/ReplaySubject.purs","end":[294,31]}},{"children":[],"comments":"It's like bufferWhen, but emits a nested ReplaySubject instead of an array.\n","title":"windowWhen","info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","ReplaySubject"],"ReplaySubject"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","ReplaySubject"],"ReplaySubject"]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","ReplaySubject"],"ReplaySubject"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","ReplaySubject"],"ReplaySubject"]},{"tag":"TypeVar","contents":"a"}]}}]}]}]},null]},null]}},"sourceSpan":{"start":[301,1],"name":"src/RxJS/ReplaySubject.purs","end":[301,111]}},{"children":[],"comments":"It's like auditTime, but the silencing duration is determined by a second ReplaySubject.\n","title":"audit","info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","ReplaySubject"],"ReplaySubject"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","ReplaySubject"],"ReplaySubject"]},{"tag":"TypeVar","contents":"b"}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","ReplaySubject"],"ReplaySubject"]},{"tag":"TypeVar","contents":"a"}]}]}]},null]},null]}},"sourceSpan":{"start":[306,1],"name":"src/RxJS/ReplaySubject.purs","end":[306,97]}},{"children":[],"comments":"Ignores source values for duration milliseconds,\nthen emits the most recent value from the source ReplaySubject, then repeats this process.\n","title":"auditTime","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","ReplaySubject"],"ReplaySubject"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","ReplaySubject"],"ReplaySubject"]},{"tag":"TypeVar","contents":"a"}]}]}]},null]}},"sourceSpan":{"start":[310,1],"name":"src/RxJS/ReplaySubject.purs","end":[310,80]}},{"children":[],"comments":"It's like debounceTime, but the time span of emission silence is determined\nby a second ReplaySubject.  Allows for a variable debounce rate.\n","title":"debounce","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","ReplaySubject"],"ReplaySubject"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","ReplaySubject"],"ReplaySubject"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","ReplaySubject"],"ReplaySubject"]},{"tag":"TypeVar","contents":"a"}]}]}]},null]}},"sourceSpan":{"start":[314,1],"name":"src/RxJS/ReplaySubject.purs","end":[314,100]}},{"children":[],"comments":"It's like delay, but passes only the most recent value from each burst of emissions.\n","title":"debounceTime","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","ReplaySubject"],"ReplaySubject"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","ReplaySubject"],"ReplaySubject"]},{"tag":"TypeVar","contents":"a"}]}]}]},null]}},"sourceSpan":{"start":[317,1],"name":"src/RxJS/ReplaySubject.purs","end":[317,83]}},{"children":[],"comments":"Returns an ReplaySubject that emits all items emitted by the source ReplaySubject\nthat are distinct by comparison from previous items.\n","title":"distinct","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","ReplaySubject"],"ReplaySubject"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","ReplaySubject"],"ReplaySubject"]},{"tag":"TypeVar","contents":"a"}]}]},null]}},"sourceSpan":{"start":[321,1],"name":"src/RxJS/ReplaySubject.purs","end":[321,72]}},{"children":[],"comments":"Returns an ReplaySubject that emits all items emitted by the source ReplaySubject\nthat are distinct by comparison from the previous item.\n","title":"distinctUntilChanged","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","ReplaySubject"],"ReplaySubject"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","ReplaySubject"],"ReplaySubject"]},{"tag":"TypeVar","contents":"a"}]}]},null]}},"sourceSpan":{"start":[325,1],"name":"src/RxJS/ReplaySubject.purs","end":[325,84]}},{"children":[],"comments":"Emits the single value at the specified index in a sequence of emissions\nfrom the source ReplaySubject.\n","title":"elementAt","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","ReplaySubject"],"ReplaySubject"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","ReplaySubject"],"ReplaySubject"]},{"tag":"TypeVar","contents":"a"}]}]}]},null]}},"sourceSpan":{"start":[329,1],"name":"src/RxJS/ReplaySubject.purs","end":[329,80]}},{"children":[],"comments":"Filter items emitted by the source ReplaySubject by only emitting those that\nsatisfy a specified predicate.\n","title":"filter","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","ReplaySubject"],"ReplaySubject"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","ReplaySubject"],"ReplaySubject"]},{"tag":"TypeVar","contents":"a"}]}]}]},null]}},"sourceSpan":{"start":[333,1],"name":"src/RxJS/ReplaySubject.purs","end":[333,88]}},{"children":[],"comments":"Ignores all items emitted by the source ReplaySubject and only passes calls of complete or error.\n","title":"ignoreElements","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","ReplaySubject"],"ReplaySubject"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","ReplaySubject"],"ReplaySubject"]},{"tag":"TypeVar","contents":"a"}]}]},null]}},"sourceSpan":{"start":[336,1],"name":"src/RxJS/ReplaySubject.purs","end":[336,78]}},{"children":[],"comments":"Returns an ReplaySubject that emits only the last item emitted by the source ReplaySubject.\n","title":"last","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","ReplaySubject"],"ReplaySubject"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","ReplaySubject"],"ReplaySubject"]},{"tag":"TypeVar","contents":"a"}]}]},null]}},"sourceSpan":{"start":[339,1],"name":"src/RxJS/ReplaySubject.purs","end":[339,68]}},{"children":[],"comments":"It's like sampleTime, but samples whenever the notifier ReplaySubject emits something.\n","title":"sample","info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","ReplaySubject"],"ReplaySubject"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","ReplaySubject"],"ReplaySubject"]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","ReplaySubject"],"ReplaySubject"]},{"tag":"TypeVar","contents":"a"}]}]}]},null]},null]}},"sourceSpan":{"start":[342,1],"name":"src/RxJS/ReplaySubject.purs","end":[342,91]}},{"children":[],"comments":"Periodically looks at the source ReplaySubject and emits whichever\nvalue it has most recently emitted since the previous sampling, unless the source has not emitted anything since the previous sampling.\n","title":"sampleTime","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","ReplaySubject"],"ReplaySubject"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","ReplaySubject"],"ReplaySubject"]},{"tag":"TypeVar","contents":"a"}]}]}]},null]}},"sourceSpan":{"start":[346,1],"name":"src/RxJS/ReplaySubject.purs","end":[346,81]}},{"children":[],"comments":"Returns an ReplaySubject that skips n items emitted by an ReplaySubject.\n","title":"skip","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","ReplaySubject"],"ReplaySubject"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","ReplaySubject"],"ReplaySubject"]},{"tag":"TypeVar","contents":"a"}]}]}]},null]}},"sourceSpan":{"start":[349,1],"name":"src/RxJS/ReplaySubject.purs","end":[349,75]}},{"children":[],"comments":"Returns an ReplaySubject that skips items emitted by the source ReplaySubject until a second ReplaySubject emits an item.\n","title":"skipUntil","info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","ReplaySubject"],"ReplaySubject"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","ReplaySubject"],"ReplaySubject"]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","ReplaySubject"],"ReplaySubject"]},{"tag":"TypeVar","contents":"a"}]}]}]},null]},null]}},"sourceSpan":{"start":[352,1],"name":"src/RxJS/ReplaySubject.purs","end":[352,94]}},{"children":[],"comments":"Returns an ReplaySubject that skips all items emitted\nby the source ReplaySubject as long as a specified condition holds true,\nbut emits all further source items as soon as the condition becomes false.\n","title":"skipWhile","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","ReplaySubject"],"ReplaySubject"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","ReplaySubject"],"ReplaySubject"]},{"tag":"TypeVar","contents":"a"}]}]}]},null]}},"sourceSpan":{"start":[357,1],"name":"src/RxJS/ReplaySubject.purs","end":[357,91]}},{"children":[],"comments":"Emits only the first n values emitted by the source ReplaySubject.\n","title":"take","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","ReplaySubject"],"ReplaySubject"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","ReplaySubject"],"ReplaySubject"]},{"tag":"TypeVar","contents":"a"}]}]}]},null]}},"sourceSpan":{"start":[360,1],"name":"src/RxJS/ReplaySubject.purs","end":[360,75]}},{"children":[],"comments":"Lets values pass until a second ReplaySubject emits something. Then, it completes.\n","title":"takeUntil","info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","ReplaySubject"],"ReplaySubject"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","ReplaySubject"],"ReplaySubject"]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","ReplaySubject"],"ReplaySubject"]},{"tag":"TypeVar","contents":"a"}]}]}]},null]},null]}},"sourceSpan":{"start":[363,1],"name":"src/RxJS/ReplaySubject.purs","end":[363,94]}},{"children":[],"comments":"Emits values emitted by the source ReplaySubject so long as each value satisfies\nthe given predicate, and then completes as soon as this predicate is not satisfied.\n","title":"takeWhile","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","ReplaySubject"],"ReplaySubject"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","ReplaySubject"],"ReplaySubject"]},{"tag":"TypeVar","contents":"a"}]}]}]},null]}},"sourceSpan":{"start":[367,1],"name":"src/RxJS/ReplaySubject.purs","end":[367,91]}},{"children":[],"comments":"It's like throttleTime, but the silencing duration is determined by a second ReplaySubject.\n","title":"throttle","info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","ReplaySubject"],"ReplaySubject"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","ReplaySubject"],"ReplaySubject"]},{"tag":"TypeVar","contents":"b"}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","ReplaySubject"],"ReplaySubject"]},{"tag":"TypeVar","contents":"a"}]}]}]},null]},null]}},"sourceSpan":{"start":[370,1],"name":"src/RxJS/ReplaySubject.purs","end":[370,100]}},{"children":[],"comments":"Emits a value from the source ReplaySubject, then ignores subsequent source values\nfor duration milliseconds, then repeats this process.\n","title":"throttleTime","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","ReplaySubject"],"ReplaySubject"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","ReplaySubject"],"ReplaySubject"]},{"tag":"TypeVar","contents":"a"}]}]}]},null]}},"sourceSpan":{"start":[374,1],"name":"src/RxJS/ReplaySubject.purs","end":[374,83]}},{"children":[],"comments":"An ReplaySubject of projected values from the most recent values from each input ReplaySubject.\n","title":"combineLatest","info":{"declType":"value","type":{"tag":"ForAll","contents":["c",{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeVar","contents":"c"}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","ReplaySubject"],"ReplaySubject"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","ReplaySubject"],"ReplaySubject"]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","ReplaySubject"],"ReplaySubject"]},{"tag":"TypeVar","contents":"c"}]}]}]}]},null]},null]},null]}},"sourceSpan":{"start":[380,1],"name":"src/RxJS/ReplaySubject.purs","end":[381,90]}},{"children":[],"comments":"Concatenates two ReplaySubjects together by sequentially emitting their values, one ReplaySubject after the other.\n","title":"concat","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","ReplaySubject"],"ReplaySubject"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","ReplaySubject"],"ReplaySubject"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","ReplaySubject"],"ReplaySubject"]},{"tag":"TypeVar","contents":"a"}]}]}]},null]}},"sourceSpan":{"start":[384,1],"name":"src/RxJS/ReplaySubject.purs","end":[384,89]}},{"children":[],"comments":"Converts a higher-order ReplaySubject into a first-order ReplaySubject by concatenating the inner ReplaySubjects in order.\n","title":"concatAll","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","ReplaySubject"],"ReplaySubject"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","ReplaySubject"],"ReplaySubject"]},{"tag":"TypeVar","contents":"a"}]}}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","ReplaySubject"],"ReplaySubject"]},{"tag":"TypeVar","contents":"a"}]}]},null]}},"sourceSpan":{"start":[387,1],"name":"src/RxJS/ReplaySubject.purs","end":[387,89]}},{"children":[],"comments":"Flattens an ReplaySubject-of-ReplaySubjects by dropping the next inner ReplaySubjects\nwhile the current inner is still executing.\n","title":"exhaust","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","ReplaySubject"],"ReplaySubject"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","ReplaySubject"],"ReplaySubject"]},{"tag":"TypeVar","contents":"a"}]}}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","ReplaySubject"],"ReplaySubject"]},{"tag":"TypeVar","contents":"a"}]}]},null]}},"sourceSpan":{"start":[391,1],"name":"src/RxJS/ReplaySubject.purs","end":[391,87]}},{"children":[],"comments":"Creates an output ReplaySubject which concurrently emits all values from each input ReplaySubject.\n","title":"merge","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","ReplaySubject"],"ReplaySubject"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","ReplaySubject"],"ReplaySubject"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","ReplaySubject"],"ReplaySubject"]},{"tag":"TypeVar","contents":"a"}]}]}]},null]}},"sourceSpan":{"start":[394,1],"name":"src/RxJS/ReplaySubject.purs","end":[394,88]}},{"children":[],"comments":"Converts a higher-order ReplaySubject into a first-order ReplaySubject\nwhich concurrently delivers all values that are emitted on the inner ReplaySubjects.\n","title":"mergeAll","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","ReplaySubject"],"ReplaySubject"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","ReplaySubject"],"ReplaySubject"]},{"tag":"TypeVar","contents":"a"}]}}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","ReplaySubject"],"ReplaySubject"]},{"tag":"TypeVar","contents":"a"}]}]},null]}},"sourceSpan":{"start":[398,1],"name":"src/RxJS/ReplaySubject.purs","end":[398,88]}},{"children":[],"comments":"Returns an ReplaySubject that mirrors the first source ReplaySubject to emit an\nitem from the array of ReplaySubjects.\n","title":"race","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","ReplaySubject"],"ReplaySubject"]},{"tag":"TypeVar","contents":"a"}]}}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","ReplaySubject"],"ReplaySubject"]},{"tag":"TypeVar","contents":"a"}]}]},null]}},"sourceSpan":{"start":[402,1],"name":"src/RxJS/ReplaySubject.purs","end":[402,76]}},{"children":[],"comments":"Returns an ReplaySubject that emits the items in the given Array before\nit begins to emit items emitted by the source ReplaySubject.\n","title":"startWith","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","ReplaySubject"],"ReplaySubject"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","ReplaySubject"],"ReplaySubject"]},{"tag":"TypeVar","contents":"a"}]}]}]},null]}},"sourceSpan":{"start":[406,1],"name":"src/RxJS/ReplaySubject.purs","end":[406,84]}},{"children":[],"comments":"Combines each value from the source ReplaySubjects using a project function to\ndetermine the value to be emitted on the output ReplaySubject.\n","title":"withLatestFrom","info":{"declType":"value","type":{"tag":"ForAll","contents":["c",{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeVar","contents":"c"}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","ReplaySubject"],"ReplaySubject"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","ReplaySubject"],"ReplaySubject"]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","ReplaySubject"],"ReplaySubject"]},{"tag":"TypeVar","contents":"c"}]}]}]}]},null]},null]},null]}},"sourceSpan":{"start":[410,1],"name":"src/RxJS/ReplaySubject.purs","end":[411,90]}},{"children":[],"comments":"Waits for each ReplaySubject to emit a value. Once this occurs, all values\nwith the corresponding index will be emitted. This will continue until at\nleast one inner ReplaySubject completes.\n","title":"zip","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","ReplaySubject"],"ReplaySubject"]},{"tag":"TypeVar","contents":"a"}]}}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","ReplaySubject"],"ReplaySubject"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]}}]}]},null]}},"sourceSpan":{"start":[416,1],"name":"src/RxJS/ReplaySubject.purs","end":[416,83]}},{"children":[],"comments":null,"title":"catch","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","ReplaySubject"],"ReplaySubject"]},{"tag":"TypeVar","contents":"a"}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Control","Monad","Eff","Exception"],"Error"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","ReplaySubject"],"ReplaySubject"]},{"tag":"TypeVar","contents":"a"}]}]}}]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","ReplaySubject"],"ReplaySubject"]},{"tag":"TypeVar","contents":"a"}]}}]}]},null]}},"sourceSpan":{"start":[420,1],"name":"src/RxJS/ReplaySubject.purs","end":[420,103]}},{"children":[],"comments":"If the source ReplaySubject calls error, this method will resubscribe to the\nsource ReplaySubject n times rather than propagating the error call.\n","title":"retry","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","ReplaySubject"],"ReplaySubject"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","ReplaySubject"],"ReplaySubject"]},{"tag":"TypeVar","contents":"a"}]}]}]},null]}},"sourceSpan":{"start":[424,1],"name":"src/RxJS/ReplaySubject.purs","end":[424,76]}},{"children":[],"comments":"Time shifts each item by some specified amount of milliseconds.\n","title":"delay","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","ReplaySubject"],"ReplaySubject"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","ReplaySubject"],"ReplaySubject"]},{"tag":"TypeVar","contents":"a"}]}]}]},null]}},"sourceSpan":{"start":[429,1],"name":"src/RxJS/ReplaySubject.purs","end":[429,76]}},{"children":[],"comments":"Delays the emission of items from the source ReplaySubject by a given time\nspan determined by the emissions of another ReplaySubject.\n","title":"delayWhen","info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","ReplaySubject"],"ReplaySubject"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","ReplaySubject"],"ReplaySubject"]},{"tag":"TypeVar","contents":"b"}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","ReplaySubject"],"ReplaySubject"]},{"tag":"TypeVar","contents":"a"}]}]}]},null]},null]}},"sourceSpan":{"start":[433,1],"name":"src/RxJS/ReplaySubject.purs","end":[433,101]}},{"children":[],"comments":null,"title":"dematerialize","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","ReplaySubject"],"ReplaySubject"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Notification"],"Notification"]},{"tag":"TypeVar","contents":"a"}]}}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","ReplaySubject"],"ReplaySubject"]},{"tag":"TypeVar","contents":"a"}]}]},null]}},"sourceSpan":{"start":[435,1],"name":"src/RxJS/ReplaySubject.purs","end":[435,92]}},{"children":[],"comments":null,"title":"materialize","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","ReplaySubject"],"ReplaySubject"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","ReplaySubject"],"ReplaySubject"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Notification"],"Notification"]},{"tag":"TypeVar","contents":"a"}]}}]}]},null]}},"sourceSpan":{"start":[446,1],"name":"src/RxJS/ReplaySubject.purs","end":[446,75]}},{"children":[],"comments":"Performs the effect on each value of the ReplaySubject.  An alias for `do`.\nUseful for testing (transparently performing an effect outside of a subscription).\n","title":"performEach","info":{"declType":"value","type":{"tag":"ForAll","contents":["e",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","ReplaySubject"],"ReplaySubject"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad","Eff"],"Eff"]},{"tag":"TypeVar","contents":"e"}]},{"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad","Eff"],"Eff"]},{"tag":"TypeVar","contents":"e"}]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","ReplaySubject"],"ReplaySubject"]},{"tag":"TypeVar","contents":"a"}]}}]}]}]},null]},null]}},"sourceSpan":{"start":[451,1],"name":"src/RxJS/ReplaySubject.purs","end":[451,112]}},{"children":[],"comments":null,"title":"toArray","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","ReplaySubject"],"ReplaySubject"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","ReplaySubject"],"ReplaySubject"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]}}]}]},null]}},"sourceSpan":{"start":[453,1],"name":"src/RxJS/ReplaySubject.purs","end":[453,79]}},{"children":[],"comments":"Counts the number of emissions on the source and emits that number when the source completes.\n","title":"count","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","ReplaySubject"],"ReplaySubject"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","ReplaySubject"],"ReplaySubject"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}]},null]}},"sourceSpan":{"start":[458,1],"name":"src/RxJS/ReplaySubject.purs","end":[458,71]}}]},{"reExports":[],"name":"RxJS.Scheduler","comments":null,"declarations":[{"children":[],"comments":"Please see [RxJS Version 5.* documentation](http://reactivex.io/rxjs/) for\nadditional details on proper usage of the library.\n","title":"Scheduler","info":{"kind":{"tag":"NamedKind","contents":[["Prim"],"Type"]},"declType":"externData"},"sourceSpan":{"start":[13,1],"name":"src/RxJS/Scheduler.purs","end":[13,35]}},{"children":[],"comments":null,"title":"queue","info":{"declType":"value","type":{"tag":"TypeConstructor","contents":[["RxJS","Scheduler"],"Scheduler"]}},"sourceSpan":{"start":[15,1],"name":"src/RxJS/Scheduler.purs","end":[15,34]}},{"children":[],"comments":null,"title":"asap","info":{"declType":"value","type":{"tag":"TypeConstructor","contents":[["RxJS","Scheduler"],"Scheduler"]}},"sourceSpan":{"start":[17,1],"name":"src/RxJS/Scheduler.purs","end":[17,33]}},{"children":[],"comments":null,"title":"async","info":{"declType":"value","type":{"tag":"TypeConstructor","contents":[["RxJS","Scheduler"],"Scheduler"]}},"sourceSpan":{"start":[19,1],"name":"src/RxJS/Scheduler.purs","end":[19,34]}},{"children":[],"comments":null,"title":"animationFrame","info":{"declType":"value","type":{"tag":"TypeConstructor","contents":[["RxJS","Scheduler"],"Scheduler"]}},"sourceSpan":{"start":[21,1],"name":"src/RxJS/Scheduler.purs","end":[21,34]}}]},{"reExports":[],"name":"RxJS.Subscriber","comments":null,"declarations":[{"children":[],"comments":null,"title":"Subscriber","info":{"arguments":[["a",null]],"declType":"typeSynonym","type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Record"]},{"tag":"RCons","contents":["next",{"tag":"ForAll","contents":["e",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad","Eff"],"Eff"]},{"tag":"TypeVar","contents":"e"}]},{"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}]},null]},{"tag":"RCons","contents":["error",{"tag":"ForAll","contents":["e",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Control","Monad","Eff","Exception"],"Error"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad","Eff"],"Eff"]},{"tag":"TypeVar","contents":"e"}]},{"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}]},null]},{"tag":"RCons","contents":["completed",{"tag":"ForAll","contents":["e",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad","Eff"],"Eff"]},{"tag":"TypeVar","contents":"e"}]},{"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}]},null]},{"tag":"REmpty","contents":[]}]}]}]}]}},"sourceSpan":{"start":[9,1],"name":"src/RxJS/Subscriber.purs","end":[13,5]}}]},{"reExports":[],"name":"RxJS.Subscription","comments":null,"declarations":[{"children":[],"comments":"When you subscribe, you get back a Subscription, which represents the\nongoing execution.\n","title":"Subscription","info":{"kind":{"tag":"NamedKind","contents":[["Prim"],"Type"]},"declType":"externData"},"sourceSpan":{"start":[11,1],"name":"src/RxJS/Subscription.purs","end":[11,38]}},{"children":[],"comments":"Call unsubscribe() to cancel the execution.\n","title":"unsubscribe","info":{"declType":"value","type":{"tag":"ForAll","contents":["e",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["RxJS","Subscription"],"Subscription"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad","Eff"],"Eff"]},{"tag":"TypeVar","contents":"e"}]},{"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}]},null]}},"sourceSpan":{"start":[14,1],"name":"src/RxJS/Subscription.purs","end":[14,63]}}]}],"resolvedDependencies":{"purescript-free":"3.4.0","purescript-proxy":"1.0.0","purescript-exceptions":"2.0.0","purescript-newtype":"1.3.0","purescript-maps":"2.1.2","purescript-control":"2.0.0","purescript-console":"2.0.0","purescript-either":"2.2.1","purescript-media-types":"2.0.0","purescript-arrays":"3.2.1","purescript-maybe":"2.1.1","purescript-js-timers":"2.0.0","purescript-exists":"2.0.0","purescript-distributive":"2.0.0","purescript-unfoldable":"2.0.0","purescript-invariant":"2.0.0","purescript-lazy":"2.0.0","purescript-dom":"3.6.0","purescript-monoid":"2.2.0","purescript-aff":"2.0.3","purescript-foldable-traversable":"2.2.0","purescript-debug":"2.0.0","purescript-tailrec":"2.0.2","purescript-functors":"1.1.0","purescript-prelude":"2.5.0","purescript-inject":"3.0.0","purescript-st":"2.0.0","purescript-bifunctors":"2.0.0","purescript-nonempty":"3.0.0","purescript-contravariant":"2.0.0","purescript-generics":"3.3.0","purescript-unsafe-coerce":"2.0.0","purescript-refs":"2.0.0","purescript-integers":"2.1.1","purescript-eff":"2.0.0","purescript-test-unit":"10.1.0","purescript-const":"2.0.0","purescript-transformers":"2.2.0","purescript-globals":"2.0.0","purescript-js-date":"3.0.0","purescript-math":"2.0.0","purescript-enums":"2.0.1","purescript-psci-support":"2.0.0","purescript-catenable-lists":"3.0.1","purescript-random":"2.0.0","purescript-parallel":"2.1.0","purescript-tuples":"3.2.0","purescript-partial":"1.2.0","purescript-quickcheck":"3.1.1","purescript-strings":"2.1.0","purescript-identity":"2.0.0","purescript-foreign":"3.2.0","purescript-lists":"3.4.0","purescript-eff-functions":"2.0.0","purescript-nullable":"2.0.0","purescript-datetime":"2.2.0","purescript-functions":"2.0.0"},"version":"0.1.0","github":["jasonzoladz","purescript-rxjs"],"versionTag":"v0.1.0","moduleMap":{"Data.BooleanAlgebra":"purescript-prelude","Data.Decide":"purescript-contravariant","Data.Ring":"purescript-prelude","Control.Monad.Trans.Class":"purescript-transformers","Data.Functor.Product":"purescript-functors","Data.NonEmpty":"purescript-nonempty","DOM.HTML.Document":"purescript-dom","Control.Monad.Eff.Ref":"purescript-refs","DOM.CSS.Event.Types":"purescript-dom","DOM.XHR.Types":"purescript-dom","DOM.HTML.HTMLParamElement":"purescript-dom","Control.Monad.Aff.Class":"purescript-aff","Data.Generic":"purescript-generics","DOM.Event.MouseEvent":"purescript-dom","Data.Nullable":"purescript-nullable","Control.Comonad.Env":"purescript-transformers","DOM.HTML.HTMLTableSectionElement":"purescript-dom","Control.Comonad.Traced.Class":"purescript-transformers","Data.StrMap":"purescript-maps","Control.Monad.Eff.Unsafe":"purescript-eff","Data.Functor.Compose":"purescript-functors","Data.Int.Bits":"purescript-integers","Data.DateTime":"purescript-datetime","Data.Bifunctor.Flip":"purescript-bifunctors","DOM.HTML.HTMLOutputElement":"purescript-dom","Data.Ord":"purescript-prelude","DOM.Event.EventTarget":"purescript-dom","Data.Date":"purescript-datetime","Data.Monoid.Dual":"purescript-monoid","Data.Foreign.NullOrUndefined":"purescript-foreign","Control.Monad.Rec.Class":"purescript-tailrec","Data.StrMap.ST.Unsafe":"purescript-maps","Data.Time.Component":"purescript-datetime","DOM.HTML.HTMLMediaElement.CanPlayType":"purescript-dom","DOM.HTML.HTMLDataListElement":"purescript-dom","Data.Bitraversable":"purescript-foldable-traversable","Test.Unit.Assert":"purescript-test-unit","Data.Boolean":"purescript-prelude","Data.Map":"purescript-maps","DOM.XHR.FormData":"purescript-dom","Control.Biapplicative":"purescript-bifunctors","DOM.HTML.HTMLTextAreaElement":"purescript-dom","Data.CatList":"purescript-catenable-lists","Control.Parallel.Class":"purescript-parallel","Type.Proxy":"purescript-proxy","Test.Unit.Output.Fancy":"purescript-test-unit","Data.Coyoneda":"purescript-free","Data.Array.ST.Iterator":"purescript-arrays","Data.Bounded":"purescript-prelude","DOM.HTML.HTMLOListElement":"purescript-dom","Control.Monad.State.Trans":"purescript-transformers","Data.Int":"purescript-integers","Data.Show":"purescript-prelude","Data.Foreign.Null":"purescript-foreign","Data.Bifunctor.Clown":"purescript-bifunctors","Control.Monad.Writer.Trans":"purescript-transformers","Data.Foldable":"purescript-foldable-traversable","Data.Divide":"purescript-contravariant","Control.Comonad.Store.Class":"purescript-transformers","Data.Enum":"purescript-enums","DOM.Event.WheelEvent":"purescript-dom","DOM.HTML.Event.ErrorEvent":"purescript-dom","Control.Monad.Trampoline":"purescript-free","DOM.HTML.HTMLObjectElement":"purescript-dom","Control.Monad.Aff.AVar":"purescript-aff","DOM.HTML.HTMLLIElement":"purescript-dom","Control.Apply":"purescript-prelude","Data.Functor.Contravariant":"purescript-contravariant","Data.Tuple.Nested":"purescript-tuples","Test.QuickCheck.LCG":"purescript-quickcheck","DOM.HTML.HTMLSourceElement":"purescript-dom","DOM.HTML.HTMLMetaElement":"purescript-dom","Control.Monad":"purescript-prelude","Data.Lazy":"purescript-lazy","Data.Monoid":"purescript-monoid","Control.Monad.List.Trans":"purescript-transformers","Control.Monad.RWS":"purescript-transformers","Data.Maybe.First":"purescript-maybe","Control.Bind":"purescript-prelude","Data.Foreign.Index":"purescript-foreign","DOM.HTML.HTMLFieldSetElement":"purescript-dom","DOM.HTML.URL":"purescript-dom","Data.Monoid.Additive":"purescript-monoid","Data.String.Regex":"purescript-strings","Data.HeytingAlgebra":"purescript-prelude","Control.Alt":"purescript-control","Control.Monad.Maybe.Trans":"purescript-transformers","Data.Foreign.Class":"purescript-foreign","Control.Monad.Cont":"purescript-transformers","DOM.HTML.Types":"purescript-dom","DOM.HTML.HTMLElement":"purescript-dom","DOM.HTML.HTMLDataElement":"purescript-dom","DOM.HTML.HTMLLinkElement":"purescript-dom","Data.List.ZipList":"purescript-lists","Data.Functor.Coproduct.Nested":"purescript-functors","DOM.HTML.HTMLOptionElement":"purescript-dom","Data.Ord.Unsafe":"purescript-prelude","Data.Semigroup":"purescript-prelude","Control.Monad.Reader":"purescript-transformers","Test.Unit.QuickCheck":"purescript-test-unit","Data.Const":"purescript-const","DOM.HTML.HTMLKeygenElement":"purescript-dom","Control.Monad.Eff":"purescript-eff","Control.Comonad.Traced.Trans":"purescript-transformers","Data.StrMap.Unsafe":"purescript-maps","DOM.Node.NonElementParentNode":"purescript-dom","DOM.File.FileReader":"purescript-dom","DOM.HTML.HTMLButtonElement":"purescript-dom","DOM.HTML.HTMLTableColElement":"purescript-dom","DOM.Node.Node":"purescript-dom","Data.Tuple":"purescript-tuples","Control.Biapply":"purescript-bifunctors","Data.Distributive":"purescript-distributive","DOM.HTML.HTMLInputElement":"purescript-dom","Control.Alternative":"purescript-control","Data.Semiring":"purescript-prelude","Data.StrMap.ST":"purescript-maps","Data.Exists":"purescript-exists","DOM.HTML.HTMLModElement":"purescript-dom","Data.CommutativeRing":"purescript-prelude","Data.NaturalTransformation":"purescript-prelude","Data.Monoid.Conj":"purescript-monoid","Data.Yoneda":"purescript-free","Control.Monad.Aff.Internal":"purescript-aff","DOM.Event.CompositionEvent":"purescript-dom","Data.Unfoldable":"purescript-unfoldable","Control.Monad.Eff.Random":"purescript-random","DOM.Event.Event":"purescript-dom","DOM.File.File":"purescript-dom","DOM.HTML.Location":"purescript-dom","DOM":"purescript-dom","Control.Comonad.Store.Trans":"purescript-transformers","Control.Monad.ST":"purescript-st","Control.Monad.State.Class":"purescript-transformers","DOM.HTML.HTMLLegendElement":"purescript-dom","DOM.File.FileReader.ReadyState":"purescript-dom","Data.Inject":"purescript-inject","Data.List.Types":"purescript-lists","Data.Functor":"purescript-prelude","Unsafe.Coerce":"purescript-unsafe-coerce","DOM.Node.Document":"purescript-dom","Control.Monad.Writer.Class":"purescript-transformers","DOM.HTML.History":"purescript-dom","Data.CatQueue":"purescript-catenable-lists","DOM.HTML.Event.HashChangeEvent":"purescript-dom","Control.Monad.Except":"purescript-transformers","Data.List.Lazy.Types":"purescript-lists","Data.DateTime.Locale":"purescript-datetime","Control.Category":"purescript-prelude","Test.QuickCheck.Arbitrary":"purescript-quickcheck","Control.Monad.RWS.Trans":"purescript-transformers","DOM.Node.ChildNode":"purescript-dom","Test.QuickCheck.Data.AlphaNumString":"purescript-quickcheck","Control.Monad.Cont.Trans":"purescript-transformers","Data.Maybe":"purescript-maybe","DOM.HTML.HTMLOptGroupElement":"purescript-dom","Data.String.Regex.Unsafe":"purescript-strings","DOM.HTML.HTMLIFrameElement":"purescript-dom","DOM.Node.NodeList":"purescript-dom","DOM.HTML.HTMLTableRowElement":"purescript-dom","DOM.HTML.HTMLMediaElement":"purescript-dom","DOM.HTML.HTMLMapElement":"purescript-dom","Control.Comonad":"purescript-control","Data.Function":"purescript-prelude","Data.List":"purescript-lists","DOM.HTML.Navigator":"purescript-dom","Data.Field":"purescript-prelude","Data.List.Lazy":"purescript-lists","Data.Foreign.Undefined":"purescript-foreign","DOM.Node.NonDocumentTypeChildNode":"purescript-dom","Test.Unit.Output.TAP":"purescript-test-unit","Data.EuclideanRing":"purescript-prelude","DOM.File.FileList":"purescript-dom","Data.Functor.Invariant":"purescript-invariant","DOM.HTML.Window":"purescript-dom","DOM.HTML.HTMLAreaElement":"purescript-dom","Control.Comonad.Traced":"purescript-transformers","Global.Unsafe":"purescript-globals","DOM.HTML.HTMLTrackElement":"purescript-dom","Data.Comparison":"purescript-contravariant","Data.String.Unsafe":"purescript-strings","DOM.HTML.HTMLTableHeaderCellElement":"purescript-dom","Prelude":"purescript-prelude","Data.Function.Eff":"purescript-eff-functions","Control.Monad.Aff":"purescript-aff","Data.Predicate":"purescript-contravariant","Partial.Unsafe":"purescript-partial","Data.Array":"purescript-arrays","DOM.HTML.HTMLScriptElement":"purescript-dom","Data.Bifunctor.Product":"purescript-bifunctors","Control.Extend":"purescript-control","Test.Unit.Console":"purescript-test-unit","Control.Lazy":"purescript-control","Data.Function.Uncurried":"purescript-functions","Control.Monad.Reader.Trans":"purescript-transformers","DOM.HTML.HTMLImageElement":"purescript-dom","Data.Functor.Product.Nested":"purescript-functors","DOM.HTML.HTMLStyleElement":"purescript-dom","Test.Unit.Output.Simple":"purescript-test-unit","Control.Comonad.Env.Class":"purescript-transformers","Data.Eq":"purescript-prelude","Data.Either.Nested":"purescript-either","Control.Comonad.Cofree":"purescript-free","Data.Newtype":"purescript-newtype","Control.Monad.Eff.Console":"purescript-console","DOM.HTML.Event.Types":"purescript-dom","Data.Bifunctor":"purescript-bifunctors","Data.Monoid.Disj":"purescript-monoid","Control.Monad.Eff.Exception":"purescript-exceptions","Data.MediaType":"purescript-media-types","Control.Monad.Eff.Timer":"purescript-js-timers","Data.Array.Partial":"purescript-arrays","Data.Foreign.Keys":"purescript-foreign","Data.String.CaseInsensitive":"purescript-strings","Control.Monad.Free":"purescript-free","Control.Parallel":"purescript-parallel","Control.MonadPlus":"purescript-control","DOM.HTML.HTMLQuoteElement":"purescript-dom","DOM.Event.FocusEvent":"purescript-dom","DOM.Node.ParentNode":"purescript-dom","Data.Void":"purescript-prelude","Control.MonadZero":"purescript-control","DOM.Websocket.Event.Types":"purescript-dom","Data.DateTime.Instant":"purescript-datetime","Control.Comonad.Store":"purescript-transformers","DOM.Node.HTMLCollection":"purescript-dom","DOM.HTML.HTMLTimeElement":"purescript-dom","Control.Monad.Except.Trans":"purescript-transformers","DOM.HTML.HTMLProgressElement":"purescript-dom","Data.Bifunctor.Joker":"purescript-bifunctors","Data.Divisible":"purescript-contravariant","DOM.HTML.HTMLBaseElement":"purescript-dom","DOM.HTML":"purescript-dom","DOM.Node.Types":"purescript-dom","DOM.HTML.HTMLTrackElement.ReadyState":"purescript-dom","Data.Bifunctor.Wrap":"purescript-bifunctors","DOM.HTML.HTMLCanvasElement":"purescript-dom","PSCI.Support":"purescript-psci-support","Data.Equivalence":"purescript-contravariant","Data.Maybe.Last":"purescript-maybe","DOM.HTML.HTMLTitleElement":"purescript-dom","Data.Unit":"purescript-prelude","Control.Monad.Eff.Ref.Unsafe":"purescript-refs","DOM.HTML.Event.DragEvent.DataTransfer":"purescript-dom","Data.List.NonEmpty":"purescript-lists","DOM.Node.Element":"purescript-dom","DOM.HTML.HTMLTableCellElement":"purescript-dom","Data.List.Lazy.NonEmpty":"purescript-lists","Data.Foreign":"purescript-foreign","Data.Ordering":"purescript-prelude","Data.Functor.Coproduct":"purescript-functors","DOM.HTML.HTMLSelectElement":"purescript-dom","Control.Monad.Cont.Class":"purescript-transformers","Data.Identity":"purescript-identity","DOM.HTML.SelectionMode":"purescript-dom","DOM.HTML.HTMLTemplateElement":"purescript-dom","Math":"purescript-math","Control.Comonad.Trans.Class":"purescript-transformers","Data.String":"purescript-strings","Control.Plus":"purescript-control","DOM.HTML.HTMLEmbedElement":"purescript-dom","Control.Monad.Eff.Class":"purescript-eff","DOM.Util.FFI":"purescript-dom","Test.QuickCheck":"purescript-quickcheck","DOM.File.Types":"purescript-dom","Test.Unit.Main":"purescript-test-unit","Data.Time":"purescript-datetime","Data.JSDate":"purescript-js-date","Data.Time.Duration":"purescript-datetime","Data.Date.Component":"purescript-datetime","DOM.HTML.HTMLMediaElement.NetworkState":"purescript-dom","Partial":"purescript-partial","DOM.Websocket.Event.CloseEvent":"purescript-dom","Control.Comonad.Env.Trans":"purescript-transformers","DOM.HTML.HTMLMeterElement":"purescript-dom","Global":"purescript-globals","Control.Monad.Reader.Class":"purescript-transformers","Data.Decidable":"purescript-contravariant","DOM.File.Blob":"purescript-dom","DOM.Event.KeyboardEvent":"purescript-dom","Control.Monad.Aff.Unsafe":"purescript-aff","DOM.HTML.HTMLLabelElement":"purescript-dom","Data.Monoid.Multiplicative":"purescript-monoid","Data.Array.ST":"purescript-arrays","Control.Monad.Error.Class":"purescript-transformers","Test.Unit":"purescript-test-unit","Control.Monad.Aff.Console":"purescript-aff","Control.Semigroupoid":"purescript-prelude","DOM.HTML.HTMLFormElement":"purescript-dom","DOM.HTML.Event.EventTypes":"purescript-dom","Debug.Trace":"purescript-debug","Data.Monoid.Alternate":"purescript-monoid","Data.Char":"purescript-strings","DOM.Node.NodeType":"purescript-dom","Data.Bifunctor.Join":"purescript-bifunctors","DOM.HTML.HTMLTableElement":"purescript-dom","DOM.HTML.HTMLMediaElement.ReadyState":"purescript-dom","Control.Monad.Eff.Exception.Unsafe":"purescript-exceptions","Data.Bifoldable":"purescript-foldable-traversable","Data.Monoid.Endo":"purescript-monoid","Control.Monad.State":"purescript-transformers","Data.List.Partial":"purescript-lists","Data.String.Regex.Flags":"purescript-strings","DOM.HTML.HTMLAnchorElement":"purescript-dom","Data.Either":"purescript-either","DOM.HTML.HTMLVideoElement":"purescript-dom","Control.Applicative":"purescript-prelude","Data.Op":"purescript-contravariant","Data.MediaType.Common":"purescript-media-types","Test.QuickCheck.Gen":"purescript-quickcheck","Control.Monad.Writer":"purescript-transformers","DOM.Node.DocumentType":"purescript-dom","DOM.Event.EventPhase":"purescript-dom","DOM.Event.Types":"purescript-dom","Data.Traversable":"purescript-foldable-traversable"},"compilerVersion":"0.10.7"}