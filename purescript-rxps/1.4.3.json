{"uploader":"LukaJCB","packageMeta":{"repository":{"url":"git://github.com/LukaJCB/purescript-rxps.git","type":"git"},"ignore":["**/.*","node_modules","bower_components","output"],"devDependencies":{"purescript-debug":"^3.0.0","purescript-test-unit":"^11.0.0","purescript-psci-support":"^3.0.0","purescript-quickcheck":"^4.0.0"},"dependencies":{"purescript-exceptions":"^3.0.0","purescript-maps":"^3.0.0","purescript-console":"^3.0.0","purescript-arrays":"^4.0.0","purescript-dom":"^4.1.0","purescript-aff":"^3.0.0","purescript-prelude":"^3.0.0","purescript-st":"^3.0.0","purescript-functions":"^3.0.0"},"name":"purescript-rxps","license":["Apache-2.0"]},"tagTime":"2017-05-27T08:19:37+0000","modules":[{"reExports":[],"name":"RxJS.Notification","comments":null,"declarations":[{"children":[{"comments":null,"title":"OnError","info":{"arguments":[{"tag":"TypeConstructor","contents":[["Control","Monad","Eff","Exception"],"Error"]}],"declType":"dataConstructor"},"sourceSpan":null},{"comments":null,"title":"OnNext","info":{"arguments":[{"tag":"TypeVar","contents":"a"}],"declType":"dataConstructor"},"sourceSpan":null},{"comments":null,"title":"OnComplete","info":{"arguments":[],"declType":"dataConstructor"},"sourceSpan":null},{"comments":null,"title":"showNotification","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","Show"],"Show"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Show"],"Show"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Notification"],"Notification"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[9,1],"name":"/Users/luka/proj/purescript-rxps/src/RxJS/Notification.purs","end":[12,23]}}],"comments":null,"title":"Notification","info":{"declType":"data","dataDeclType":"data","typeArguments":[["a",null]]},"sourceSpan":{"start":[7,1],"name":"/Users/luka/proj/purescript-rxps/src/RxJS/Notification.purs","end":[7,60]}}]},{"reExports":[],"name":"RxJS.Observable","comments":null,"declarations":[{"children":[{"comments":null,"title":"monoidObservableImpl","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Monoid"],"Monoid"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"ObservableImpl"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[122,1],"name":"/Users/luka/proj/purescript-rxps/src/RxJS/Observable.purs","end":[123,19]}},{"comments":null,"title":"functorObservableImpl","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Functor"],"Functor"]},{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"ObservableImpl"]}]}},"sourceSpan":{"start":[125,1],"name":"/Users/luka/proj/purescript-rxps/src/RxJS/Observable.purs","end":[126,14]}},{"comments":null,"title":"applyObservableImpl","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Apply"],"Apply"]},{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"ObservableImpl"]}]}},"sourceSpan":{"start":[128,1],"name":"/Users/luka/proj/purescript-rxps/src/RxJS/Observable.purs","end":[129,28]}},{"comments":null,"title":"applicativeObservableImpl","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Applicative"],"Applicative"]},{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"ObservableImpl"]}]}},"sourceSpan":{"start":[131,1],"name":"/Users/luka/proj/purescript-rxps/src/RxJS/Observable.purs","end":[132,15]}},{"comments":null,"title":"bindObservableImpl","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Bind"],"Bind"]},{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"ObservableImpl"]}]}},"sourceSpan":{"start":[134,1],"name":"/Users/luka/proj/purescript-rxps/src/RxJS/Observable.purs","end":[135,19]}},{"comments":null,"title":"monadObservableImpl","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad"],"Monad"]},{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"ObservableImpl"]}]}},"sourceSpan":{"start":[137,1],"name":"/Users/luka/proj/purescript-rxps/src/RxJS/Observable.purs","end":[137,53]}},{"comments":null,"title":"semigroupObservableImpl","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Semigroup"],"Semigroup"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"ObservableImpl"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[139,1],"name":"/Users/luka/proj/purescript-rxps/src/RxJS/Observable.purs","end":[140,18]}},{"comments":null,"title":"altObservableImpl","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Alt"],"Alt"]},{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"ObservableImpl"]}]}},"sourceSpan":{"start":[142,1],"name":"/Users/luka/proj/purescript-rxps/src/RxJS/Observable.purs","end":[143,15]}},{"comments":null,"title":"plusObservableImpl","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Plus"],"Plus"]},{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"ObservableImpl"]}]}},"sourceSpan":{"start":[145,1],"name":"/Users/luka/proj/purescript-rxps/src/RxJS/Observable.purs","end":[146,18]}},{"comments":null,"title":"alternativeObservableImpl","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Alternative"],"Alternative"]},{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"ObservableImpl"]}]}},"sourceSpan":{"start":[148,1],"name":"/Users/luka/proj/purescript-rxps/src/RxJS/Observable.purs","end":[148,65]}},{"comments":null,"title":"monadZeroObservableImpl","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","MonadZero"],"MonadZero"]},{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"ObservableImpl"]}]}},"sourceSpan":{"start":[150,1],"name":"/Users/luka/proj/purescript-rxps/src/RxJS/Observable.purs","end":[150,61]}},{"comments":null,"title":"monadPlusObservableImpl","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","MonadPlus"],"MonadPlus"]},{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"ObservableImpl"]}]}},"sourceSpan":{"start":[152,1],"name":"/Users/luka/proj/purescript-rxps/src/RxJS/Observable.purs","end":[152,61]}},{"comments":null,"title":"monadErrorObservableImpl","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad","Error","Class"],"MonadError"]},{"tag":"TypeConstructor","contents":[["Control","Monad","Eff","Exception"],"Error"]}]},{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"ObservableImpl"]}]}},"sourceSpan":{"start":[154,1],"name":"/Users/luka/proj/purescript-rxps/src/RxJS/Observable.purs","end":[155,22]}},{"comments":null,"title":"monadThrowObservableImpl","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad","Error","Class"],"MonadThrow"]},{"tag":"TypeConstructor","contents":[["Control","Monad","Eff","Exception"],"Error"]}]},{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"ObservableImpl"]}]}},"sourceSpan":{"start":[157,1],"name":"/Users/luka/proj/purescript-rxps/src/RxJS/Observable.purs","end":[158,22]}},{"comments":null,"title":"arbitraryObservableImpl","info":{"declType":"instance","dependencies":[{"constraintClass":[["Test","QuickCheck","Arbitrary"],"Arbitrary"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Test","QuickCheck","Arbitrary"],"Arbitrary"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"ObservableImpl"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[160,1],"name":"/Users/luka/proj/purescript-rxps/src/RxJS/Observable.purs","end":[161,49]}}],"comments":null,"title":"ObservableImpl","info":{"kind":{"tag":"FunKind","contents":[{"tag":"NamedKind","contents":[["Prim"],"Type"]},{"tag":"NamedKind","contents":[["Prim"],"Type"]}]},"declType":"externData"},"sourceSpan":{"start":[120,1],"name":"/Users/luka/proj/purescript-rxps/src/RxJS/Observable.purs","end":[120,51]}},{"children":[],"comments":null,"title":"Response","info":{"arguments":[],"declType":"typeSynonym","type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Record"]},{"tag":"RCons","contents":["body",{"tag":"TypeConstructor","contents":[["Prim"],"String"]},{"tag":"RCons","contents":["status",{"tag":"TypeConstructor","contents":[["Prim"],"Int"]},{"tag":"RCons","contents":["responseType",{"tag":"TypeConstructor","contents":[["Prim"],"String"]},{"tag":"REmpty"}]}]}]}]}},"sourceSpan":{"start":[178,1],"name":"/Users/luka/proj/purescript-rxps/src/RxJS/Observable.purs","end":[182,4]}},{"children":[],"comments":null,"title":"Request","info":{"arguments":[],"declType":"typeSynonym","type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Record"]},{"tag":"RCons","contents":["url",{"tag":"TypeConstructor","contents":[["Prim"],"String"]},{"tag":"RCons","contents":["body",{"tag":"TypeConstructor","contents":[["Prim"],"String"]},{"tag":"RCons","contents":["timeout",{"tag":"TypeConstructor","contents":[["Prim"],"Int"]},{"tag":"RCons","contents":["headers",{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","StrMap"],"StrMap"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"RCons","contents":["crossDomain",{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]},{"tag":"RCons","contents":["responseType",{"tag":"TypeConstructor","contents":[["Prim"],"String"]},{"tag":"RCons","contents":["method",{"tag":"TypeConstructor","contents":[["Prim"],"String"]},{"tag":"REmpty"}]}]}]}]}]}]}]}]}},"sourceSpan":{"start":[184,1],"name":"/Users/luka/proj/purescript-rxps/src/RxJS/Observable.purs","end":[192,4]}},{"children":[{"comments":null,"title":"ObservableT","info":{"arguments":[{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"m"},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"ObservableImpl"]},{"tag":"TypeVar","contents":"a"}]}}]}}],"declType":"dataConstructor"},"sourceSpan":null},{"comments":null,"title":"functorObservableT","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","Functor"],"Functor"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Functor"],"Functor"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"ObservableT"]},{"tag":"TypeVar","contents":"f"}]}}]}},"sourceSpan":{"start":[310,1],"name":"/Users/luka/proj/purescript-rxps/src/RxJS/Observable.purs","end":[312,33]}},{"comments":null,"title":"combineInnerervableT","info":{"declType":"instance","dependencies":[{"constraintClass":[["Control","Apply"],"Apply"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Apply"],"Apply"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"ObservableT"]},{"tag":"TypeVar","contents":"f"}]}}]}},"sourceSpan":{"start":[314,1],"name":"/Users/luka/proj/purescript-rxps/src/RxJS/Observable.purs","end":[315,27]}},{"comments":null,"title":"applicativeObservableT","info":{"declType":"instance","dependencies":[{"constraintClass":[["Control","Applicative"],"Applicative"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Applicative"],"Applicative"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"ObservableT"]},{"tag":"TypeVar","contents":"f"}]}}]}},"sourceSpan":{"start":[317,1],"name":"/Users/luka/proj/purescript-rxps/src/RxJS/Observable.purs","end":[318,14]}},{"comments":null,"title":"semigroupObservableT","info":{"declType":"instance","dependencies":[{"constraintClass":[["Control","Apply"],"Apply"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Semigroup"],"Semigroup"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"ObservableT"]},{"tag":"TypeVar","contents":"f"}]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[320,1],"name":"/Users/luka/proj/purescript-rxps/src/RxJS/Observable.purs","end":[321,17]}},{"comments":null,"title":"monoidObservableT","info":{"declType":"instance","dependencies":[{"constraintClass":[["Control","Applicative"],"Applicative"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Monoid"],"Monoid"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"ObservableT"]},{"tag":"TypeVar","contents":"f"}]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[323,1],"name":"/Users/luka/proj/purescript-rxps/src/RxJS/Observable.purs","end":[324,18]}},{"comments":null,"title":"altObservableT","info":{"declType":"instance","dependencies":[{"constraintClass":[["Control","Apply"],"Apply"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Alt"],"Alt"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"ObservableT"]},{"tag":"TypeVar","contents":"f"}]}}]}},"sourceSpan":{"start":[326,1],"name":"/Users/luka/proj/purescript-rxps/src/RxJS/Observable.purs","end":[327,14]}},{"comments":null,"title":"plusObservableT","info":{"declType":"instance","dependencies":[{"constraintClass":[["Control","Applicative"],"Applicative"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Plus"],"Plus"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"ObservableT"]},{"tag":"TypeVar","contents":"f"}]}}]}},"sourceSpan":{"start":[329,1],"name":"/Users/luka/proj/purescript-rxps/src/RxJS/Observable.purs","end":[330,17]}},{"comments":null,"title":"bindObservableT","info":{"declType":"instance","dependencies":[{"constraintClass":[["Control","Monad"],"Monad"],"constraintArgs":[{"tag":"TypeVar","contents":"m"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Bind"],"Bind"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"ObservableT"]},{"tag":"TypeVar","contents":"m"}]}}]}},"sourceSpan":{"start":[332,1],"name":"/Users/luka/proj/purescript-rxps/src/RxJS/Observable.purs","end":[333,18]}},{"comments":null,"title":"monadObservableT","info":{"declType":"instance","dependencies":[{"constraintClass":[["Control","Monad"],"Monad"],"constraintArgs":[{"tag":"TypeVar","contents":"m"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad"],"Monad"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"ObservableT"]},{"tag":"TypeVar","contents":"m"}]}}]}},"sourceSpan":{"start":[335,1],"name":"/Users/luka/proj/purescript-rxps/src/RxJS/Observable.purs","end":[335,62]}},{"comments":null,"title":"alternativeObservableT","info":{"declType":"instance","dependencies":[{"constraintClass":[["Control","Monad"],"Monad"],"constraintArgs":[{"tag":"TypeVar","contents":"m"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Alternative"],"Alternative"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"ObservableT"]},{"tag":"TypeVar","contents":"m"}]}}]}},"sourceSpan":{"start":[337,1],"name":"/Users/luka/proj/purescript-rxps/src/RxJS/Observable.purs","end":[337,74]}},{"comments":null,"title":"monadZeroObservableT","info":{"declType":"instance","dependencies":[{"constraintClass":[["Control","Monad"],"Monad"],"constraintArgs":[{"tag":"TypeVar","contents":"m"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","MonadZero"],"MonadZero"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"ObservableT"]},{"tag":"TypeVar","contents":"m"}]}}]}},"sourceSpan":{"start":[339,1],"name":"/Users/luka/proj/purescript-rxps/src/RxJS/Observable.purs","end":[339,70]}},{"comments":null,"title":"monadPlusObservableT","info":{"declType":"instance","dependencies":[{"constraintClass":[["Control","Monad"],"Monad"],"constraintArgs":[{"tag":"TypeVar","contents":"m"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","MonadPlus"],"MonadPlus"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"ObservableT"]},{"tag":"TypeVar","contents":"m"}]}}]}},"sourceSpan":{"start":[341,1],"name":"/Users/luka/proj/purescript-rxps/src/RxJS/Observable.purs","end":[341,70]}}],"comments":null,"title":"ObservableT","info":{"declType":"data","dataDeclType":"newtype","typeArguments":[["m",null],["a",null]]},"sourceSpan":{"start":[300,1],"name":"/Users/luka/proj/purescript-rxps/src/RxJS/Observable.purs","end":[300,61]}},{"children":[],"comments":null,"title":"Observable","info":{"arguments":[["a",null]],"declType":"typeSynonym","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"ObservableT"]},{"tag":"TypeConstructor","contents":[["Data","Identity"],"Identity"]}]},{"tag":"TypeVar","contents":"a"}]}},"sourceSpan":{"start":[301,1],"name":"/Users/luka/proj/purescript-rxps/src/RxJS/Observable.purs","end":[301,43]}},{"children":[],"comments":null,"title":"runObservableT","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["m",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"ObservableT"]},{"tag":"TypeVar","contents":"m"}]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"m"},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"ObservableImpl"]},{"tag":"TypeVar","contents":"a"}]}}]}]},null]},null]}},"sourceSpan":{"start":[306,1],"name":"/Users/luka/proj/purescript-rxps/src/RxJS/Observable.purs","end":[306,70]}},{"children":[],"comments":"An Observable of projected values from the most recent values from each input Observable.\n![marble diagram](http://reactivex.io/documentation/operators/images/combineLatest.png)\n","title":"combineLatest3","info":{"declType":"value","type":{"tag":"ForAll","contents":["f",{"tag":"ForAll","contents":["d",{"tag":"ForAll","contents":["c",{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Control","Apply"],"Apply"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"c"}]},{"tag":"TypeVar","contents":"d"}]}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"ObservableT"]},{"tag":"TypeVar","contents":"f"}]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"ObservableT"]},{"tag":"TypeVar","contents":"f"}]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"ObservableT"]},{"tag":"TypeVar","contents":"f"}]},{"tag":"TypeVar","contents":"c"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"ObservableT"]},{"tag":"TypeVar","contents":"f"}]},{"tag":"TypeVar","contents":"d"}]}]}]}]}]}]},null]},null]},null]},null]},null]}},"sourceSpan":{"start":[371,1],"name":"/Users/luka/proj/purescript-rxps/src/RxJS/Observable.purs","end":[372,97]}},{"children":[],"comments":"An Observable of projected values from the most recent values from each input\n![marble diagram](http://reactivex.io/documentation/operators/images/combineLatest.png)\n","title":"combineLatest","info":{"declType":"value","type":{"tag":"ForAll","contents":["f",{"tag":"ForAll","contents":["c",{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Control","Apply"],"Apply"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeVar","contents":"c"}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"ObservableT"]},{"tag":"TypeVar","contents":"f"}]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"ObservableT"]},{"tag":"TypeVar","contents":"f"}]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"ObservableT"]},{"tag":"TypeVar","contents":"f"}]},{"tag":"TypeVar","contents":"c"}]}]}]}]}]},null]},null]},null]},null]}},"sourceSpan":{"start":[377,1],"name":"/Users/luka/proj/purescript-rxps/src/RxJS/Observable.purs","end":[377,115]}},{"children":[],"comments":"Creates an output ObservableImpl which concurrently emits all values from each input ObservableImpl.\n![marble diagram](https://raw.githubusercontent.com/wiki/ReactiveX/RxJava/images/rx-operators/merge.png)\n","title":"merge","info":{"declType":"value","type":{"tag":"ForAll","contents":["f",{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Control","Apply"],"Apply"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"ObservableT"]},{"tag":"TypeVar","contents":"f"}]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"ObservableT"]},{"tag":"TypeVar","contents":"f"}]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"ObservableT"]},{"tag":"TypeVar","contents":"f"}]},{"tag":"TypeVar","contents":"a"}]}]}]}]},null]},null]}},"sourceSpan":{"start":[382,1],"name":"/Users/luka/proj/purescript-rxps/src/RxJS/Observable.purs","end":[382,86]}},{"children":[],"comments":"Creates an ObservableImpl that immediately sends an error notification.\n","title":"throw","info":{"declType":"value","type":{"tag":"ForAll","contents":["f",{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Control","Applicative"],"Applicative"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Control","Monad","Eff","Exception"],"Error"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"ObservableT"]},{"tag":"TypeVar","contents":"f"}]},{"tag":"TypeVar","contents":"a"}]}]}]},null]},null]}},"sourceSpan":{"start":[395,1],"name":"/Users/luka/proj/purescript-rxps/src/RxJS/Observable.purs","end":[395,63]}},{"children":[],"comments":"Creates an ObservableImpl that emits the value specify,\nand then emits a complete notification.  An alias for `of`.\n![marble diagram](https://raw.githubusercontent.com/wiki/ReactiveX/RxJava/images/rx-operators/from.png)\n","title":"just","info":{"declType":"value","type":{"tag":"ForAll","contents":["f",{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Control","Applicative"],"Applicative"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"ObservableT"]},{"tag":"TypeVar","contents":"f"}]},{"tag":"TypeVar","contents":"a"}]}]}]},null]},null]}},"sourceSpan":{"start":[402,1],"name":"/Users/luka/proj/purescript-rxps/src/RxJS/Observable.purs","end":[402,58]}},{"children":[],"comments":null,"title":"ajaxUrl","info":{"declType":"value","type":{"tag":"ForAll","contents":["e",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"ObservableT"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad","Eff"],"Eff"]},{"tag":"TypeVar","contents":"e"}]}}]},{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"Response"]}]}]},null]}},"sourceSpan":{"start":[405,1],"name":"/Users/luka/proj/purescript-rxps/src/RxJS/Observable.purs","end":[405,60]}},{"children":[],"comments":null,"title":"ajax","info":{"declType":"value","type":{"tag":"ForAll","contents":["e",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"Request"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"ObservableT"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad","Eff"],"Eff"]},{"tag":"TypeVar","contents":"e"}]}}]},{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"Response"]}]}]},null]}},"sourceSpan":{"start":[409,1],"name":"/Users/luka/proj/purescript-rxps/src/RxJS/Observable.purs","end":[409,58]}},{"children":[],"comments":"Creates an ObservableImpl that emits no items.  Subscriptions it must be\ndisposed manually.\n![marble diagram](https://raw.githubusercontent.com/wiki/ReactiveX/RxJava/images/rx-operators/never.png)\n","title":"never","info":{"declType":"value","type":{"tag":"ForAll","contents":["f",{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Control","Applicative"],"Applicative"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"ObservableT"]},{"tag":"TypeVar","contents":"f"}]},{"tag":"TypeVar","contents":"a"}]}]},null]},null]}},"sourceSpan":{"start":[419,1],"name":"/Users/luka/proj/purescript-rxps/src/RxJS/Observable.purs","end":[419,54]}},{"children":[],"comments":"Creates an ObservableImpl from an Array.\n![marble diagram](https://raw.githubusercontent.com/wiki/ReactiveX/RxJava/images/rx-operators/from.png)\n","title":"fromArray","info":{"declType":"value","type":{"tag":"ForAll","contents":["f",{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Control","Applicative"],"Applicative"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"ObservableT"]},{"tag":"TypeVar","contents":"f"}]},{"tag":"TypeVar","contents":"a"}]}]}]},null]},null]}},"sourceSpan":{"start":[424,1],"name":"/Users/luka/proj/purescript-rxps/src/RxJS/Observable.purs","end":[424,69]}},{"children":[],"comments":"Creates an ObservableImpl that emits events of the specified type coming from the given event target.\n","title":"fromEvent","info":{"declType":"value","type":{"tag":"ForAll","contents":["e",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["DOM","Event","Types"],"EventTarget"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["DOM","Event","Types"],"EventType"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"ObservableT"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad","Eff"],"Eff"]},{"tag":"RCons","contents":["dom",{"tag":"TypeConstructor","contents":[["DOM"],"DOM"]},{"tag":"TypeVar","contents":"e"}]}]}}]},{"tag":"TypeConstructor","contents":[["DOM","Event","Types"],"Event"]}]}]}]},null]}},"sourceSpan":{"start":[428,1],"name":"/Users/luka/proj/purescript-rxps/src/RxJS/Observable.purs","end":[428,93]}},{"children":[],"comments":"Returns an ObservableImpl that emits an infinite sequence of ascending\nintegers, with a constant interval of time of your choosing between those\nemissions.\n![marble diagram](https://raw.githubusercontent.com/wiki/ReactiveX/RxJava/images/rx-operators/interval.png)\n","title":"interval","info":{"declType":"value","type":{"tag":"ForAll","contents":["f",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Control","Applicative"],"Applicative"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"ObservableT"]},{"tag":"TypeVar","contents":"f"}]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}]}]},null]}},"sourceSpan":{"start":[435,1],"name":"/Users/luka/proj/purescript-rxps/src/RxJS/Observable.purs","end":[435,64]}},{"children":[],"comments":"The range operator emits a range of sequential integers, in order, where\nyou select the start of the range and its length\n![marble diagram](http://reactivex.io/rxjs/img/range.png)\n","title":"range","info":{"declType":"value","type":{"tag":"ForAll","contents":["f",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Control","Applicative"],"Applicative"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"ObservableT"]},{"tag":"TypeVar","contents":"f"}]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}]}]}]},null]}},"sourceSpan":{"start":[441,1],"name":"/Users/luka/proj/purescript-rxps/src/RxJS/Observable.purs","end":[441,68]}},{"children":[],"comments":"Creates an Observable that, upon subscription, emits and infinite sequence of ascending integers,\nafter a specified delay, every specified period.  Delay and period are in\nmilliseconds.\n![marble diagram](https://raw.githubusercontent.com/wiki/ReactiveX/RxJava/images/rx-operators/timer.png)\n","title":"timer","info":{"declType":"value","type":{"tag":"ForAll","contents":["f",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Control","Applicative"],"Applicative"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"ObservableT"]},{"tag":"TypeVar","contents":"f"}]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}]}]}]},null]}},"sourceSpan":{"start":[448,1],"name":"/Users/luka/proj/purescript-rxps/src/RxJS/Observable.purs","end":[448,68]}},{"children":[],"comments":null,"title":"create","info":{"declType":"value","type":{"tag":"ForAll","contents":["u",{"tag":"ForAll","contents":["e",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Subscriber"],"Subscriber"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad","Eff"],"Eff"]},{"tag":"TypeVar","contents":"e"}]},{"tag":"TypeVar","contents":"u"}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"ObservableT"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad","Eff"],"Eff"]},{"tag":"TypeVar","contents":"e"}]}}]},{"tag":"TypeVar","contents":"a"}]}]},null]},null]},null]}},"sourceSpan":{"start":[452,1],"name":"/Users/luka/proj/purescript-rxps/src/RxJS/Observable.purs","end":[452,75]}},{"children":[],"comments":"Collects values from the first Observable into an Array, and emits that array only when\nsecond Observable emits.\n![marble diagram](http://reactivex.io/documentation/operators/images/buffer1.png)\n","title":"buffer","info":{"declType":"value","type":{"tag":"ForAll","contents":["f",{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Control","Apply"],"Apply"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"ObservableT"]},{"tag":"TypeVar","contents":"f"}]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"ObservableT"]},{"tag":"TypeVar","contents":"f"}]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"ObservableT"]},{"tag":"TypeVar","contents":"f"}]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]}}]}]}]}]},null]},null]},null]}},"sourceSpan":{"start":[458,1],"name":"/Users/luka/proj/purescript-rxps/src/RxJS/Observable.purs","end":[458,97]}},{"children":[],"comments":"Collects values from the past as an array, emits that array when\nits size (arg1) reaches the specified buffer size, and starts a new buffer.\nThe new buffer starts with nth (arg2) element of the Observable counting\nfrom the beginning of the *last* buffer.\n![marble diagram](http://reactivex.io/documentation/operators/images/buffer1.png)\n","title":"bufferCount","info":{"declType":"value","type":{"tag":"ForAll","contents":["f",{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Functor"],"Functor"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"ObservableT"]},{"tag":"TypeVar","contents":"f"}]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"ObservableT"]},{"tag":"TypeVar","contents":"f"}]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]}}]}]}]}]}]},null]},null]}},"sourceSpan":{"start":[466,1],"name":"/Users/luka/proj/purescript-rxps/src/RxJS/Observable.purs","end":[466,97]}},{"children":[],"comments":"Collects values from the past as an array, and emits those arrays\nperiodically in time.  The first argument is how long to fill the buffer.\nThe second argument is specifies when to open the next buffer following an\nemission.  The third argument is the maximum size of any buffer.\n","title":"bufferTime","info":{"declType":"value","type":{"tag":"ForAll","contents":["f",{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Functor"],"Functor"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"ObservableT"]},{"tag":"TypeVar","contents":"f"}]},{"tag":"TypeVar","contents":"a"}]}}]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"ObservableT"]},{"tag":"TypeVar","contents":"f"}]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]}}]}}]}]}]}]}]},null]},null]}},"sourceSpan":{"start":[473,1],"name":"/Users/luka/proj/purescript-rxps/src/RxJS/Observable.purs","end":[473,107]}},{"children":[],"comments":"Emits the given constant value on the output Observable every time\nthe source Observable emits a value.\n![marble diagram](https://raw.githubusercontent.com/wiki/ReactiveX/RxJava/images/rx-operators/map.png)\n","title":"mapTo","info":{"declType":"value","type":{"tag":"ForAll","contents":["f",{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Functor"],"Functor"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"ObservableT"]},{"tag":"TypeVar","contents":"f"}]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"ObservableT"]},{"tag":"TypeVar","contents":"f"}]},{"tag":"TypeVar","contents":"b"}]}]}]}]},null]},null]},null]}},"sourceSpan":{"start":[479,1],"name":"/Users/luka/proj/purescript-rxps/src/RxJS/Observable.purs","end":[479,76]}},{"children":[],"comments":"Puts the current value and previous value together as an array, and emits that.\n![marble diagram](http://reactivex.io/rxjs/img/pairwise.png)\n","title":"pairwise","info":{"declType":"value","type":{"tag":"ForAll","contents":["f",{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Functor"],"Functor"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"ObservableT"]},{"tag":"TypeVar","contents":"f"}]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"ObservableT"]},{"tag":"TypeVar","contents":"f"}]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Tuple"],"Tuple"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"a"}]}}]}]}]},null]},null]}},"sourceSpan":{"start":[484,1],"name":"/Users/luka/proj/purescript-rxps/src/RxJS/Observable.purs","end":[484,82]}},{"children":[],"comments":"Given a predicate function (arg1), and an Observable (arg2), it outputs a\ntwo element array of partitioned values\n(i.e., [ Observable valuesThatPassPredicate, Observable valuesThatFailPredicate ]).\n![marble diagram](http://reactivex.io/rxjs/img/partition.png)\n","title":"partition","info":{"declType":"value","type":{"tag":"ForAll","contents":["f",{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Control","Applicative"],"Applicative"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"ObservableT"]},{"tag":"TypeVar","contents":"f"}]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Tuple"],"Tuple"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"ObservableT"]},{"tag":"TypeVar","contents":"f"}]},{"tag":"TypeVar","contents":"a"}]}}]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"ObservableT"]},{"tag":"TypeVar","contents":"f"}]},{"tag":"TypeVar","contents":"a"}]}}]}]}]}]},null]},null]}},"sourceSpan":{"start":[494,1],"name":"/Users/luka/proj/purescript-rxps/src/RxJS/Observable.purs","end":[494,121]}},{"children":[],"comments":"Maps each value to an Observable, then flattens all of these Observables\nusing mergeAll.  It's just monadic `bind`.\n![marble diagram](http://reactivex.io/documentation/operators/images/flatMap.c.png)\n","title":"mergeMap","info":{"declType":"value","type":{"tag":"ForAll","contents":["m",{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Control","Monad"],"Monad"],"constraintArgs":[{"tag":"TypeVar","contents":"m"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"ObservableT"]},{"tag":"TypeVar","contents":"m"}]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"ObservableT"]},{"tag":"TypeVar","contents":"m"}]},{"tag":"TypeVar","contents":"b"}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"ObservableT"]},{"tag":"TypeVar","contents":"m"}]},{"tag":"TypeVar","contents":"b"}]}]}]}]},null]},null]},null]}},"sourceSpan":{"start":[506,1],"name":"/Users/luka/proj/purescript-rxps/src/RxJS/Observable.purs","end":[506,98]}},{"children":[],"comments":"Maps each value of the ObservableImpl (arg1) to the same inner ObservableImpl (arg2),\nthen flattens the result.\n ![marble diagram](http://reactivex.io/documentation/operators/images/flatMap.c.png)\n","title":"mergeMapTo","info":{"declType":"value","type":{"tag":"ForAll","contents":["m",{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Control","Apply"],"Apply"],"constraintArgs":[{"tag":"TypeVar","contents":"m"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"ObservableT"]},{"tag":"TypeVar","contents":"m"}]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"ObservableT"]},{"tag":"TypeVar","contents":"m"}]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"ObservableT"]},{"tag":"TypeVar","contents":"m"}]},{"tag":"TypeVar","contents":"b"}]}]}]}]},null]},null]},null]}},"sourceSpan":{"start":[512,1],"name":"/Users/luka/proj/purescript-rxps/src/RxJS/Observable.purs","end":[512,93]}},{"children":[],"comments":"Given an accumulator function (arg1), an initial value (arg2), and\na source ObservableImpl (arg3), it returns an ObservableImpl that emits the current\naccumlation whenever the source emits a value.\n![marble diagram](https://raw.githubusercontent.com/wiki/ReactiveX/RxJava/images/rx-operators/scanSeed.png)\n","title":"scan","info":{"declType":"value","type":{"tag":"ForAll","contents":["f",{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Functor"],"Functor"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeVar","contents":"b"}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"ObservableT"]},{"tag":"TypeVar","contents":"f"}]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"ObservableT"]},{"tag":"TypeVar","contents":"f"}]},{"tag":"TypeVar","contents":"b"}]}]}]}]}]},null]},null]},null]}},"sourceSpan":{"start":[519,1],"name":"/Users/luka/proj/purescript-rxps/src/RxJS/Observable.purs","end":[519,92]}},{"children":[],"comments":"It's like delay, but passes only the most recent value from each burst of emissions.\n","title":"debounceTime","info":{"declType":"value","type":{"tag":"ForAll","contents":["f",{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Functor"],"Functor"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"ObservableT"]},{"tag":"TypeVar","contents":"f"}]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"ObservableT"]},{"tag":"TypeVar","contents":"f"}]},{"tag":"TypeVar","contents":"a"}]}]}]}]},null]},null]}},"sourceSpan":{"start":[524,1],"name":"/Users/luka/proj/purescript-rxps/src/RxJS/Observable.purs","end":[524,83]}},{"children":[],"comments":"Returns an Observable that emits all items emitted by the source Observable\nthat are distinct by comparison from previous items.\n![marble diagram](http://reactivex.io/documentation/operators/images/distinct.png)\n","title":"distinct","info":{"declType":"value","type":{"tag":"ForAll","contents":["f",{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Functor"],"Functor"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"ObservableT"]},{"tag":"TypeVar","contents":"f"}]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"ObservableT"]},{"tag":"TypeVar","contents":"f"}]},{"tag":"TypeVar","contents":"a"}]}]}]},null]},null]}},"sourceSpan":{"start":[529,1],"name":"/Users/luka/proj/purescript-rxps/src/RxJS/Observable.purs","end":[529,72]}},{"children":[],"comments":"Returns an Observable that emits all items emitted by the source Observable\nthat are distinct by comparison from the previous item.\n![marble diagram](https://raw.githubusercontent.com/wiki/ReactiveX/RxJava/images/rx-operators/distinctUntilChanged.key.png)\n","title":"distinctUntilChanged","info":{"declType":"value","type":{"tag":"ForAll","contents":["f",{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Functor"],"Functor"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"ObservableT"]},{"tag":"TypeVar","contents":"f"}]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"ObservableT"]},{"tag":"TypeVar","contents":"f"}]},{"tag":"TypeVar","contents":"a"}]}]}]},null]},null]}},"sourceSpan":{"start":[535,1],"name":"/Users/luka/proj/purescript-rxps/src/RxJS/Observable.purs","end":[535,84]}},{"children":[],"comments":"Emits the single value at the specified index in a sequence of emissions\nfrom the source\n","title":"elementAt","info":{"declType":"value","type":{"tag":"ForAll","contents":["f",{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Functor"],"Functor"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"ObservableT"]},{"tag":"TypeVar","contents":"f"}]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"ObservableT"]},{"tag":"TypeVar","contents":"f"}]},{"tag":"TypeVar","contents":"a"}]}]}]}]},null]},null]}},"sourceSpan":{"start":[540,1],"name":"/Users/luka/proj/purescript-rxps/src/RxJS/Observable.purs","end":[540,80]}},{"children":[],"comments":"Filter items emitted by the source Observable by only emitting those that\nsatisfy a specified predicate.\n![marble diagram](https://raw.githubusercontent.com/wiki/ReactiveX/RxJava/images/rx-operators/filter.png)\n","title":"filter","info":{"declType":"value","type":{"tag":"ForAll","contents":["f",{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Functor"],"Functor"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"ObservableT"]},{"tag":"TypeVar","contents":"f"}]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"ObservableT"]},{"tag":"TypeVar","contents":"f"}]},{"tag":"TypeVar","contents":"a"}]}]}]}]},null]},null]}},"sourceSpan":{"start":[546,1],"name":"/Users/luka/proj/purescript-rxps/src/RxJS/Observable.purs","end":[546,88]}},{"children":[],"comments":"Ignores all items emitted by the source Observable and only passes calls of complete or error.\n![marble diagram](http://reactivex.io/rxjs/img/ignoreElements.png)\n","title":"ignoreElements","info":{"declType":"value","type":{"tag":"ForAll","contents":["f",{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Functor"],"Functor"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"ObservableT"]},{"tag":"TypeVar","contents":"f"}]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"ObservableT"]},{"tag":"TypeVar","contents":"f"}]},{"tag":"TypeVar","contents":"a"}]}]}]},null]},null]}},"sourceSpan":{"start":[551,1],"name":"/Users/luka/proj/purescript-rxps/src/RxJS/Observable.purs","end":[551,78]}},{"children":[],"comments":"Returns an Observable that emits only the last item emitted by the source\nObservable that that satisfies the given predicate.\n![marble diagram](https://raw.githubusercontent.com/wiki/ReactiveX/RxJava/images/rx-operators/last.png)\n","title":"last","info":{"declType":"value","type":{"tag":"ForAll","contents":["f",{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Functor"],"Functor"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"ObservableT"]},{"tag":"TypeVar","contents":"f"}]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"ObservableT"]},{"tag":"TypeVar","contents":"f"}]},{"tag":"TypeVar","contents":"a"}]}]}]}]},null]},null]}},"sourceSpan":{"start":[557,1],"name":"/Users/luka/proj/purescript-rxps/src/RxJS/Observable.purs","end":[557,86]}},{"children":[],"comments":"It's like sampleTime, but samples whenever the notifier Observable emits something.\n![marble diagram](https://raw.githubusercontent.com/wiki/ReactiveX/RxJava/images/rx-operators/sample.o.png)\n","title":"sample","info":{"declType":"value","type":{"tag":"ForAll","contents":["f",{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Control","Apply"],"Apply"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"ObservableT"]},{"tag":"TypeVar","contents":"f"}]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"ObservableT"]},{"tag":"TypeVar","contents":"f"}]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"ObservableT"]},{"tag":"TypeVar","contents":"f"}]},{"tag":"TypeVar","contents":"a"}]}]}]}]},null]},null]},null]}},"sourceSpan":{"start":[563,1],"name":"/Users/luka/proj/purescript-rxps/src/RxJS/Observable.purs","end":[563,89]}},{"children":[],"comments":"Periodically looks at the source Observable and emits whichever\nvalue it has most recently emitted since the previous sampling, unless the source has not emitted anything since the previous sampling.\n","title":"sampleTime","info":{"declType":"value","type":{"tag":"ForAll","contents":["f",{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Functor"],"Functor"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"ObservableT"]},{"tag":"TypeVar","contents":"f"}]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"ObservableT"]},{"tag":"TypeVar","contents":"f"}]},{"tag":"TypeVar","contents":"a"}]}]}]}]},null]},null]}},"sourceSpan":{"start":[569,1],"name":"/Users/luka/proj/purescript-rxps/src/RxJS/Observable.purs","end":[569,81]}},{"children":[],"comments":"Returns an Observable that skips n items emitted by an\n![marble diagram](https://raw.githubusercontent.com/wiki/ReactiveX/RxJava/images/rx-operators/skip.png)\n","title":"skip","info":{"declType":"value","type":{"tag":"ForAll","contents":["f",{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Functor"],"Functor"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"ObservableT"]},{"tag":"TypeVar","contents":"f"}]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"ObservableT"]},{"tag":"TypeVar","contents":"f"}]},{"tag":"TypeVar","contents":"a"}]}]}]}]},null]},null]}},"sourceSpan":{"start":[574,1],"name":"/Users/luka/proj/purescript-rxps/src/RxJS/Observable.purs","end":[574,75]}},{"children":[],"comments":"Returns an Observable that skips items emitted by the source Observable until a second Observable emits an item.\n![marble diagram](https://raw.githubusercontent.com/wiki/ReactiveX/RxJava/images/rx-operators/skipUntil.png)\n","title":"skipUntil","info":{"declType":"value","type":{"tag":"ForAll","contents":["f",{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Control","Apply"],"Apply"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"ObservableT"]},{"tag":"TypeVar","contents":"f"}]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"ObservableT"]},{"tag":"TypeVar","contents":"f"}]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"ObservableT"]},{"tag":"TypeVar","contents":"f"}]},{"tag":"TypeVar","contents":"a"}]}]}]}]},null]},null]},null]}},"sourceSpan":{"start":[579,1],"name":"/Users/luka/proj/purescript-rxps/src/RxJS/Observable.purs","end":[579,92]}},{"children":[],"comments":"Returns an Observable that skips all items emitted\nby the source Observable as long as a specified condition holds true,\nbut emits all further source items as soon as the condition becomes false.\n![marble diagram](https://raw.githubusercontent.com/wiki/ReactiveX/RxJava/images/rx-operators/skipWhile.png)\n","title":"skipWhile","info":{"declType":"value","type":{"tag":"ForAll","contents":["f",{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Functor"],"Functor"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"ObservableT"]},{"tag":"TypeVar","contents":"f"}]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"ObservableT"]},{"tag":"TypeVar","contents":"f"}]},{"tag":"TypeVar","contents":"a"}]}]}]}]},null]},null]}},"sourceSpan":{"start":[586,1],"name":"/Users/luka/proj/purescript-rxps/src/RxJS/Observable.purs","end":[586,91]}},{"children":[],"comments":"Emits only the first n values emitted by the source\n![marble diagram](https://raw.githubusercontent.com/wiki/ReactiveX/RxJava/images/rx-operators/take.png)\n","title":"take","info":{"declType":"value","type":{"tag":"ForAll","contents":["f",{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Functor"],"Functor"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"ObservableT"]},{"tag":"TypeVar","contents":"f"}]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"ObservableT"]},{"tag":"TypeVar","contents":"f"}]},{"tag":"TypeVar","contents":"a"}]}]}]}]},null]},null]}},"sourceSpan":{"start":[591,1],"name":"/Users/luka/proj/purescript-rxps/src/RxJS/Observable.purs","end":[591,75]}},{"children":[],"comments":"Lets values pass until a second Observable emits something. Then, it completes.\n![marble diagram](https://raw.githubusercontent.com/wiki/ReactiveX/RxJava/images/rx-operators/takeUntil.png\" alt=\"\"\n","title":"takeUntil","info":{"declType":"value","type":{"tag":"ForAll","contents":["f",{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Control","Apply"],"Apply"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"ObservableT"]},{"tag":"TypeVar","contents":"f"}]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"ObservableT"]},{"tag":"TypeVar","contents":"f"}]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"ObservableT"]},{"tag":"TypeVar","contents":"f"}]},{"tag":"TypeVar","contents":"a"}]}]}]}]},null]},null]},null]}},"sourceSpan":{"start":[596,1],"name":"/Users/luka/proj/purescript-rxps/src/RxJS/Observable.purs","end":[596,92]}},{"children":[],"comments":"Emits values emitted by the source Observable so long as each value satisfies\nthe given predicate, and then completes as soon as this predicate is not satisfied.\n","title":"takeWhile","info":{"declType":"value","type":{"tag":"ForAll","contents":["f",{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Functor"],"Functor"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"ObservableT"]},{"tag":"TypeVar","contents":"f"}]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"ObservableT"]},{"tag":"TypeVar","contents":"f"}]},{"tag":"TypeVar","contents":"a"}]}]}]}]},null]},null]}},"sourceSpan":{"start":[602,1],"name":"/Users/luka/proj/purescript-rxps/src/RxJS/Observable.purs","end":[602,91]}},{"children":[],"comments":"Ignores source values for duration milliseconds,\nthen emits the most recent value from the source Observable, then repeats this process.\n![marble diagram](http://reactivex.io/rxjs/img/auditTime.png)\n","title":"auditTime","info":{"declType":"value","type":{"tag":"ForAll","contents":["f",{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Functor"],"Functor"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"ObservableT"]},{"tag":"TypeVar","contents":"f"}]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"ObservableT"]},{"tag":"TypeVar","contents":"f"}]},{"tag":"TypeVar","contents":"a"}]}]}]}]},null]},null]}},"sourceSpan":{"start":[608,1],"name":"/Users/luka/proj/purescript-rxps/src/RxJS/Observable.purs","end":[608,80]}},{"children":[],"comments":"Emits a value from the source Observable, then ignores subsequent source values\nfor duration milliseconds, then repeats this process.\n![marble diagram](https://raw.githubusercontent.com/wiki/ReactiveX/RxJava/images/rx-operators/throttleWithTimeout.png)\n","title":"throttleTime","info":{"declType":"value","type":{"tag":"ForAll","contents":["f",{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Functor"],"Functor"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"ObservableT"]},{"tag":"TypeVar","contents":"f"}]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"ObservableT"]},{"tag":"TypeVar","contents":"f"}]},{"tag":"TypeVar","contents":"a"}]}]}]}]},null]},null]}},"sourceSpan":{"start":[615,1],"name":"/Users/luka/proj/purescript-rxps/src/RxJS/Observable.purs","end":[615,83]}},{"children":[],"comments":"Returns an Observable that emits the items in the given Foldable before\nit begins to emit items emitted by the source Observable.\n","title":"startWithMany","info":{"declType":"value","type":{"tag":"ForAll","contents":["m",{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["f",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Foldable"],"Foldable"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}],"constraintData":null},{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Functor"],"Functor"],"constraintArgs":[{"tag":"TypeVar","contents":"m"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"ObservableT"]},{"tag":"TypeVar","contents":"m"}]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"ObservableT"]},{"tag":"TypeVar","contents":"m"}]},{"tag":"TypeVar","contents":"a"}]}]}]}]}]},null]},null]},null]}},"sourceSpan":{"start":[621,1],"name":"/Users/luka/proj/purescript-rxps/src/RxJS/Observable.purs","end":[621,100]}},{"children":[],"comments":"Returns an Observable that emits the item given before\nit begins to emit items emitted by the source Observable.\n![marble diagram](https://raw.githubusercontent.com/wiki/ReactiveX/RxJava/images/rx-operators/startWith.png)\n","title":"startWith","info":{"declType":"value","type":{"tag":"ForAll","contents":["f",{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Functor"],"Functor"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"ObservableT"]},{"tag":"TypeVar","contents":"f"}]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"ObservableT"]},{"tag":"TypeVar","contents":"f"}]},{"tag":"TypeVar","contents":"a"}]}]}]}]},null]},null]}},"sourceSpan":{"start":[628,1],"name":"/Users/luka/proj/purescript-rxps/src/RxJS/Observable.purs","end":[628,78]}},{"children":[],"comments":"Combines each value from the source Observables using a project function to\ndetermine the value to be emitted on the output\n![marble diagram](https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/withLatestFrom.png)\n","title":"withLatestFrom","info":{"declType":"value","type":{"tag":"ForAll","contents":["f",{"tag":"ForAll","contents":["c",{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Control","Apply"],"Apply"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeVar","contents":"c"}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"ObservableT"]},{"tag":"TypeVar","contents":"f"}]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"ObservableT"]},{"tag":"TypeVar","contents":"f"}]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"ObservableT"]},{"tag":"TypeVar","contents":"f"}]},{"tag":"TypeVar","contents":"c"}]}]}]}]}]},null]},null]},null]},null]}},"sourceSpan":{"start":[634,1],"name":"/Users/luka/proj/purescript-rxps/src/RxJS/Observable.purs","end":[634,116]}},{"children":[],"comments":"Concatenates two Observables together by sequentially emitting their values, one Observable after the other.\n![marble diagram](https://raw.githubusercontent.com/wiki/ReactiveX/RxJava/images/rx-operators/concat.png)\n","title":"concat","info":{"declType":"value","type":{"tag":"ForAll","contents":["f",{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Control","Apply"],"Apply"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"ObservableT"]},{"tag":"TypeVar","contents":"f"}]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"ObservableT"]},{"tag":"TypeVar","contents":"f"}]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"ObservableT"]},{"tag":"TypeVar","contents":"f"}]},{"tag":"TypeVar","contents":"a"}]}]}]}]},null]},null]}},"sourceSpan":{"start":[640,1],"name":"/Users/luka/proj/purescript-rxps/src/RxJS/Observable.purs","end":[640,87]}},{"children":[],"comments":"It's like switchMap, but maps each value to the same inner ObservableImpl.\n![marble diagram](https://raw.githubusercontent.com/wiki/ReactiveX/RxJava/images/rx-operators/switchMap.png)\n","title":"switchMapTo","info":{"declType":"value","type":{"tag":"ForAll","contents":["f",{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Control","Apply"],"Apply"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"ObservableT"]},{"tag":"TypeVar","contents":"f"}]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"ObservableT"]},{"tag":"TypeVar","contents":"f"}]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"ObservableT"]},{"tag":"TypeVar","contents":"f"}]},{"tag":"TypeVar","contents":"b"}]}]}]}]},null]},null]},null]}},"sourceSpan":{"start":[645,1],"name":"/Users/luka/proj/purescript-rxps/src/RxJS/Observable.purs","end":[645,94]}},{"children":[],"comments":"If the source Observable calls error, this method will resubscribe to the\nsource Observable n times rather than propagating the error call.\n![marble diagram](https://raw.githubusercontent.com/wiki/ReactiveX/RxJava/images/rx-operators/retry.png)\n","title":"retry","info":{"declType":"value","type":{"tag":"ForAll","contents":["f",{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Functor"],"Functor"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"ObservableT"]},{"tag":"TypeVar","contents":"f"}]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"ObservableT"]},{"tag":"TypeVar","contents":"f"}]},{"tag":"TypeVar","contents":"a"}]}]}]}]},null]},null]}},"sourceSpan":{"start":[651,1],"name":"/Users/luka/proj/purescript-rxps/src/RxJS/Observable.purs","end":[651,76]}},{"children":[],"comments":"Time shifts each item by some specified amount of milliseconds.\n![marble diagram](https://raw.githubusercontent.com/wiki/ReactiveX/RxJava/images/rx-operators/delay.png)\n","title":"delay","info":{"declType":"value","type":{"tag":"ForAll","contents":["f",{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Functor"],"Functor"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"ObservableT"]},{"tag":"TypeVar","contents":"f"}]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"ObservableT"]},{"tag":"TypeVar","contents":"f"}]},{"tag":"TypeVar","contents":"a"}]}]}]}]},null]},null]}},"sourceSpan":{"start":[657,1],"name":"/Users/luka/proj/purescript-rxps/src/RxJS/Observable.purs","end":[657,76]}},{"children":[],"comments":"Returns an Observable that emits the items emitted by the source Observable or a specified default item\nif the source Observable is empty.\n\n![marble diagram](http://reactivex.io/documentation/operators/images/defaultIfEmpty.c.png)\n\ntakes a defaultValue which is the item to emit if the source Observable emits no items.\n\nreturns an Observable that emits either the specified default item if the source Observable emits no\n        items, or the items emitted by the source Observable\n","title":"defaultIfEmpty","info":{"declType":"value","type":{"tag":"ForAll","contents":["f",{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Functor"],"Functor"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"ObservableT"]},{"tag":"TypeVar","contents":"f"}]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"ObservableT"]},{"tag":"TypeVar","contents":"f"}]},{"tag":"TypeVar","contents":"a"}]}]}]}]},null]},null]}},"sourceSpan":{"start":[671,1],"name":"/Users/luka/proj/purescript-rxps/src/RxJS/Observable.purs","end":[671,83]}},{"children":[],"comments":"Determines whether all elements of an observable sequence satisfy a condition.\nReturns an observable sequence containing a single element determining whether all\nelements in the source sequence pass the test in the specified predicate.\n","title":"every","info":{"declType":"value","type":{"tag":"ForAll","contents":["f",{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Functor"],"Functor"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"ObservableT"]},{"tag":"TypeVar","contents":"f"}]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"ObservableT"]},{"tag":"TypeVar","contents":"f"}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}]}]}]},null]},null]}},"sourceSpan":{"start":[678,1],"name":"/Users/luka/proj/purescript-rxps/src/RxJS/Observable.purs","end":[678,93]}},{"children":[],"comments":"Tests whether this `Observable` emits no elements.\n\nreturns an Observable emitting one single Boolean, which is `true` if this `Observable`\n        emits no elements, and `false` otherwise.\n","title":"isEmpty","info":{"declType":"value","type":{"tag":"ForAll","contents":["f",{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Functor"],"Functor"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"ObservableT"]},{"tag":"TypeVar","contents":"f"}]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"ObservableT"]},{"tag":"TypeVar","contents":"f"}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}]}]},null]},null]}},"sourceSpan":{"start":[684,1],"name":"/Users/luka/proj/purescript-rxps/src/RxJS/Observable.purs","end":[684,77]}},{"children":[],"comments":"Returns a new Observable that multicasts (shares) the original Observable. As long a\nthere is more than 1 Subscriber, this Observable will be subscribed and emitting data.\nWhen all subscribers have unsubscribed it will unsubscribe from the source Observable.\n\nThis is an alias for `publish().refCount()`\n\n![marble diagram](https://raw.githubusercontent.com/wiki/ReactiveX/RxJava/images/rx-operators/publishRefCount.png)\n\nreturns an Observable that upon connection causes the source Observable to emit items to its Subscribers\n","title":"share","info":{"declType":"value","type":{"tag":"ForAll","contents":["f",{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Functor"],"Functor"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"ObservableT"]},{"tag":"TypeVar","contents":"f"}]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"ObservableT"]},{"tag":"TypeVar","contents":"f"}]},{"tag":"TypeVar","contents":"a"}]}]}]},null]},null]}},"sourceSpan":{"start":[696,1],"name":"/Users/luka/proj/purescript-rxps/src/RxJS/Observable.purs","end":[696,69]}},{"children":[],"comments":"Returns an Observable that emits only the first item emitted by the source\nObservable that satisfies the given predicate.\n","title":"first","info":{"declType":"value","type":{"tag":"ForAll","contents":["f",{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Functor"],"Functor"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"ObservableT"]},{"tag":"TypeVar","contents":"f"}]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"ObservableT"]},{"tag":"TypeVar","contents":"f"}]},{"tag":"TypeVar","contents":"a"}]}]}]}]},null]},null]}},"sourceSpan":{"start":[701,1],"name":"/Users/luka/proj/purescript-rxps/src/RxJS/Observable.purs","end":[701,87]}},{"children":[],"comments":"Counts the number of emissions on the source and emits that number when the source completes.\n","title":"count","info":{"declType":"value","type":{"tag":"ForAll","contents":["f",{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Functor"],"Functor"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"ObservableT"]},{"tag":"TypeVar","contents":"f"}]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"ObservableT"]},{"tag":"TypeVar","contents":"f"}]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}]}]},null]},null]}},"sourceSpan":{"start":[705,1],"name":"/Users/luka/proj/purescript-rxps/src/RxJS/Observable.purs","end":[705,71]}},{"children":[],"comments":"Applies an accumulator function over the source Observable, and returns the accumulated\nresult when the source completes, given a seed value.\n","title":"reduce","info":{"declType":"value","type":{"tag":"ForAll","contents":["f",{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Functor"],"Functor"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeVar","contents":"b"}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"ObservableT"]},{"tag":"TypeVar","contents":"f"}]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"ObservableT"]},{"tag":"TypeVar","contents":"f"}]},{"tag":"TypeVar","contents":"b"}]}]}]}]}]},null]},null]},null]}},"sourceSpan":{"start":[709,1],"name":"/Users/luka/proj/purescript-rxps/src/RxJS/Observable.purs","end":[709,94]}},{"children":[],"comments":"Makes every `next` call run in the new Scheduler.\n","title":"observeOn","info":{"declType":"value","type":{"tag":"ForAll","contents":["f",{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Functor"],"Functor"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["RxJS","Scheduler"],"Scheduler"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"ObservableT"]},{"tag":"TypeVar","contents":"f"}]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"ObservableT"]},{"tag":"TypeVar","contents":"f"}]},{"tag":"TypeVar","contents":"a"}]}]}]}]},null]},null]}},"sourceSpan":{"start":[713,1],"name":"/Users/luka/proj/purescript-rxps/src/RxJS/Observable.purs","end":[713,86]}},{"children":[],"comments":"Makes subscription happen on a given Scheduler.\n","title":"subscribeOn","info":{"declType":"value","type":{"tag":"ForAll","contents":["f",{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Functor"],"Functor"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["RxJS","Scheduler"],"Scheduler"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"ObservableT"]},{"tag":"TypeVar","contents":"f"}]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"ObservableT"]},{"tag":"TypeVar","contents":"f"}]},{"tag":"TypeVar","contents":"a"}]}]}]}]},null]},null]}},"sourceSpan":{"start":[717,1],"name":"/Users/luka/proj/purescript-rxps/src/RxJS/Observable.purs","end":[717,88]}},{"children":[],"comments":null,"title":"subscribeNext","info":{"declType":"value","type":{"tag":"ForAll","contents":["u",{"tag":"ForAll","contents":["e",{"tag":"ForAll","contents":["f",{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Functor"],"Functor"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad","Eff"],"Eff"]},{"tag":"TypeVar","contents":"e"}]},{"tag":"TypeVar","contents":"u"}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"ObservableT"]},{"tag":"TypeVar","contents":"f"}]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad","Eff"],"Eff"]},{"tag":"TypeVar","contents":"e"}]},{"tag":"TypeConstructor","contents":[["RxJS","Subscription"],"Subscription"]}]}}]}]}]}]},null]},null]},null]},null]}},"sourceSpan":{"start":[721,1],"name":"/Users/luka/proj/purescript-rxps/src/RxJS/Observable.purs","end":[721,106]}},{"children":[],"comments":"Subscribing to an ObservableImpl is like calling a function, providing\n`next`, `error` and `completed` effects to which the data will be delivered.\n","title":"subscribe","info":{"declType":"value","type":{"tag":"ForAll","contents":["e",{"tag":"ForAll","contents":["f",{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Functor"],"Functor"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Subscriber"],"Subscriber"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"ObservableT"]},{"tag":"TypeVar","contents":"f"}]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad","Eff"],"Eff"]},{"tag":"TypeVar","contents":"e"}]},{"tag":"TypeConstructor","contents":[["RxJS","Subscription"],"Subscription"]}]}}]}]}]}]},null]},null]},null]}},"sourceSpan":{"start":[752,1],"name":"/Users/luka/proj/purescript-rxps/src/RxJS/Observable.purs","end":[752,98]}},{"children":[],"comments":"Returns an ObservableImpl that reverses the effect of `materialize` by\n`Notification` objects emitted by the source ObservableImpl into the items\nor notifications they represent.\n![marble diagram](https://raw.githubusercontent.com/wiki/ReactiveX/RxJava/images/rx-operators/dematerialize.png)\n","title":"dematerialize","info":{"declType":"value","type":{"tag":"ForAll","contents":["f",{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Functor"],"Functor"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"ObservableT"]},{"tag":"TypeVar","contents":"f"}]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Notification"],"Notification"]},{"tag":"TypeVar","contents":"a"}]}}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"ObservableT"]},{"tag":"TypeVar","contents":"f"}]},{"tag":"TypeVar","contents":"a"}]}]}]},null]},null]}},"sourceSpan":{"start":[759,1],"name":"/Users/luka/proj/purescript-rxps/src/RxJS/Observable.purs","end":[759,92]}},{"children":[],"comments":"Turns all of the notifications from a source ObservableImpl into onNext emissions,\nand marks them with their original notification types within `Notification` objects.\n![marble diagram](https://raw.githubusercontent.com/wiki/ReactiveX/RxJava/images/rx-operators/materialize.png)\n","title":"materialize","info":{"declType":"value","type":{"tag":"ForAll","contents":["f",{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Functor"],"Functor"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"ObservableT"]},{"tag":"TypeVar","contents":"f"}]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"ObservableT"]},{"tag":"TypeVar","contents":"f"}]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Notification"],"Notification"]},{"tag":"TypeVar","contents":"a"}]}}]}]}]},null]},null]}},"sourceSpan":{"start":[765,1],"name":"/Users/luka/proj/purescript-rxps/src/RxJS/Observable.purs","end":[765,90]}},{"children":[],"comments":"Returns an ObservableImpl that emits a single item, a list composed of all the items emitted by the source ObservableImpl.\n![marble diagram](https://raw.githubusercontent.com/wiki/ReactiveX/RxJava/images/rx-operators/toList.png)\n","title":"toArray","info":{"declType":"value","type":{"tag":"ForAll","contents":["f",{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Functor"],"Functor"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"ObservableT"]},{"tag":"TypeVar","contents":"f"}]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"ObservableT"]},{"tag":"TypeVar","contents":"f"}]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]}}]}]}]},null]},null]}},"sourceSpan":{"start":[771,1],"name":"/Users/luka/proj/purescript-rxps/src/RxJS/Observable.purs","end":[771,79]}},{"children":[],"comments":"It's like auditTime, but the silencing duration is determined by a second ObservableImpl.\n![marble diagram](http://reactivex.io/rxjs/img/audit.png)\n","title":"audit","info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"Observable"]},{"tag":"TypeVar","contents":"b"}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"Observable"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"Observable"]},{"tag":"TypeVar","contents":"a"}]}]}]},null]},null]}},"sourceSpan":{"start":[799,1],"name":"/Users/luka/proj/purescript-rxps/src/RxJS/Observable.purs","end":[799,73]}},{"children":[],"comments":"It's like debounceTime, but the time span of emission silence is determined\nby a second ObservableImpl.  Allows for a variable debounce rate.\n![marble diagram](https://raw.githubusercontent.com/wiki/ReactiveX/RxJava/images/rx-operators/debounce.f.png)\n","title":"debounce","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"Observable"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"Observable"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"Observable"]},{"tag":"TypeVar","contents":"a"}]}]}]},null]}},"sourceSpan":{"start":[806,1],"name":"/Users/luka/proj/purescript-rxps/src/RxJS/Observable.purs","end":[806,76]}},{"children":[],"comments":"Collects values from the past as an array. When it starts collecting values,\nit calls a function that returns an ObservableImpl that emits to close the\nbuffer and restart collecting.\n![marble diagram](http://reactivex.io/documentation/operators/images/buffer1.png)\n","title":"bufferWhen","info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"Observable"]},{"tag":"TypeVar","contents":"b"}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"Observable"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"Observable"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]}}]}]}]},null]},null]}},"sourceSpan":{"start":[813,1],"name":"/Users/luka/proj/purescript-rxps/src/RxJS/Observable.purs","end":[813,86]}},{"children":[],"comments":"Equivalent to mergeMap (a.k.a, `>>=`) EXCEPT that, unlike mergeMap,\nthe next bind will not run until the ObservableImpl generated by the projection function (arg2)\ncompletes.  That is, composition is sequential, not concurrent.\nWarning: if source values arrive endlessly and faster than their corresponding\ninner ObservableImpls can complete, it will result in memory issues as inner\nObservableImpls amass in an unbounded buffer waiting for their turn to be subscribed to.\n![marble diagram](https://raw.githubusercontent.com/wiki/ReactiveX/RxJava/images/rx-operators/concatMap.png)\n","title":"concatMap","info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"Observable"]},{"tag":"TypeVar","contents":"b"}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"Observable"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"Observable"]},{"tag":"TypeVar","contents":"b"}]}]}]},null]},null]}},"sourceSpan":{"start":[824,1],"name":"/Users/luka/proj/purescript-rxps/src/RxJS/Observable.purs","end":[824,77]}},{"children":[],"comments":"It's Like concatMap (a.k.a, `>>=`) EXCEPT that it ignores every new projected\nObservableImpl if the previous projected ObservableImpl has not yet completed.\n![marble diagram](http://reactivex.io/rxjs/img/exhaustMap.png)\n","title":"exhaustMap","info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"Observable"]},{"tag":"TypeVar","contents":"b"}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"Observable"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"Observable"]},{"tag":"TypeVar","contents":"b"}]}]}]},null]},null]}},"sourceSpan":{"start":[832,1],"name":"/Users/luka/proj/purescript-rxps/src/RxJS/Observable.purs","end":[832,78]}},{"children":[],"comments":"It's similar to mergeMap, but applies the projection function to every source\nvalue as well as every output value. It's recursive.\n","title":"expand","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"Observable"]},{"tag":"TypeVar","contents":"a"}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"Observable"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"Observable"]},{"tag":"TypeVar","contents":"a"}]}]}]},null]}},"sourceSpan":{"start":[838,1],"name":"/Users/luka/proj/purescript-rxps/src/RxJS/Observable.purs","end":[838,72]}},{"children":[],"comments":"Groups the items emitted by an ObservableImpl (arg2) according to the value\nreturned by the grouping function (arg1).  Each group becomes its own\nObservableImpl.\n![marble diagram](https://raw.githubusercontent.com/wiki/ReactiveX/RxJava/images/rx-operators/groupBy.png)\n","title":"groupBy","info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"Observable"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"Observable"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"Observable"]},{"tag":"TypeVar","contents":"a"}]}}]}]}]},null]},null]}},"sourceSpan":{"start":[845,1],"name":"/Users/luka/proj/purescript-rxps/src/RxJS/Observable.purs","end":[845,77]}},{"children":[],"comments":"Projects each source value to an ObservableImpl which is merged in the output\nObservableImpl, emitting values only from the most recently projected ObservableImpl.\n![marble diagram](https://raw.githubusercontent.com/wiki/ReactiveX/RxJava/images/rx-operators/switchMap.png)\n","title":"switchMap","info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"Observable"]},{"tag":"TypeVar","contents":"b"}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"Observable"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"Observable"]},{"tag":"TypeVar","contents":"b"}]}]}]},null]},null]}},"sourceSpan":{"start":[852,1],"name":"/Users/luka/proj/purescript-rxps/src/RxJS/Observable.purs","end":[852,77]}},{"children":[],"comments":"Delays the emission of items from the source ObservableImpl by a given time\nspan determined by the emissions of another ObservableImpl.\n![marble diagram](https://raw.githubusercontent.com/wiki/ReactiveX/RxJava/images/rx-operators/delay.o.png)\n","title":"delayWhen","info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"Observable"]},{"tag":"TypeVar","contents":"b"}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"Observable"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"Observable"]},{"tag":"TypeVar","contents":"a"}]}]}]},null]},null]}},"sourceSpan":{"start":[858,1],"name":"/Users/luka/proj/purescript-rxps/src/RxJS/Observable.purs","end":[858,77]}},{"children":[],"comments":"Converts a higher-order ObservableImpl into a first-order ObservableImpl by concatenating the inner ObservableImpls in order.\n![marble diagram](https://raw.githubusercontent.com/wiki/ReactiveX/RxJava/images/rx-operators/concat.png)\n","title":"concatAll","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"Observable"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"Observable"]},{"tag":"TypeVar","contents":"a"}]}}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"Observable"]},{"tag":"TypeVar","contents":"a"}]}]},null]}},"sourceSpan":{"start":[863,1],"name":"/Users/luka/proj/purescript-rxps/src/RxJS/Observable.purs","end":[863,65]}},{"children":[],"comments":"Converts a higher-order ObservableImpl into a first-order ObservableImpl\nwhich concurrently delivers all values that are emitted on the inner ObservableImpls.\n![marble diagram](http://reactivex.io/documentation/operators/images/mergeAll.png)\n","title":"mergeAll","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"Observable"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"Observable"]},{"tag":"TypeVar","contents":"a"}]}}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"Observable"]},{"tag":"TypeVar","contents":"a"}]}]},null]}},"sourceSpan":{"start":[869,1],"name":"/Users/luka/proj/purescript-rxps/src/RxJS/Observable.purs","end":[869,64]}},{"children":[],"comments":"Returns an ObservableImpl that mirrors the first source ObservableImpl to emit an\nitem from the array of ObservableImpls.\n","title":"race","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"Observable"]},{"tag":"TypeVar","contents":"a"}]}}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"Observable"]},{"tag":"TypeVar","contents":"a"}]}]},null]}},"sourceSpan":{"start":[874,1],"name":"/Users/luka/proj/purescript-rxps/src/RxJS/Observable.purs","end":[874,55]}},{"children":[],"comments":"Flattens an Observable-of-Observable by dropping the next inner Observables\nwhile the current inner is still executing.\n![marble diagram](http://reactivex.io/rxjs/img/exhaust.png)\n","title":"exhaust","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"Observable"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"Observable"]},{"tag":"TypeVar","contents":"a"}]}}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"Observable"]},{"tag":"TypeVar","contents":"a"}]}]},null]}},"sourceSpan":{"start":[880,1],"name":"/Users/luka/proj/purescript-rxps/src/RxJS/Observable.purs","end":[880,63]}},{"children":[],"comments":"It's like buffer, but emits a nested ObservableImpl instead of an array.\n![marble diagram](https://raw.githubusercontent.com/wiki/ReactiveX/RxJava/images/rx-operators/window8.png)\n","title":"window","info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"Observable"]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"Observable"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"Observable"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"Observable"]},{"tag":"TypeVar","contents":"a"}]}}]}]}]},null]},null]}},"sourceSpan":{"start":[885,1],"name":"/Users/luka/proj/purescript-rxps/src/RxJS/Observable.purs","end":[885,80]}},{"children":[],"comments":"It's like bufferCount, but emits a nested ObservableImpl instead of an array.\n","title":"windowCount","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"Observable"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"Observable"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"Observable"]},{"tag":"TypeVar","contents":"a"}]}}]}]}]}]},null]}},"sourceSpan":{"start":[890,1],"name":"/Users/luka/proj/purescript-rxps/src/RxJS/Observable.purs","end":[890,81]}},{"children":[],"comments":"It's like bufferTime, but emits a nested ObservableImpl instead of an array,\nand it doesn't take a maximum size parameter.  arg1 is how long to\nbuffer items into a new ObservableImpl, arg2 is the when the next buffer should begin,\nand arg3 is the source ObservableImpl.\n","title":"windowTime","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"Observable"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"Observable"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"Observable"]},{"tag":"TypeVar","contents":"a"}]}}]}]}]}]},null]}},"sourceSpan":{"start":[897,1],"name":"/Users/luka/proj/purescript-rxps/src/RxJS/Observable.purs","end":[897,80]}},{"children":[],"comments":"It's like throttleTime, but the silencing duration is determined by a second ObservableImpl.\n![marble diagram](http://reactivex.io/rxjs/img/throttle.png)\n","title":"throttle","info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"Observable"]},{"tag":"TypeVar","contents":"b"}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"Observable"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"Observable"]},{"tag":"TypeVar","contents":"a"}]}]}]},null]},null]}},"sourceSpan":{"start":[903,1],"name":"/Users/luka/proj/purescript-rxps/src/RxJS/Observable.purs","end":[903,76]}},{"children":[],"comments":"Waits for each ObservableImpl to emit a value. Once this occurs, all values\nwith the corresponding index will be emitted. This will continue until at\nleast one inner ObservableImpl completes.\n![marble diagram](https://raw.githubusercontent.com/wiki/ReactiveX/RxJava/images/rx-operators/zip.i.png)\n","title":"zip","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"Observable"]},{"tag":"TypeVar","contents":"a"}]}}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"Observable"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]}}]}]},null]}},"sourceSpan":{"start":[910,1],"name":"/Users/luka/proj/purescript-rxps/src/RxJS/Observable.purs","end":[910,62]}},{"children":[],"comments":"![marble diagram](http://reactivex.io/documentation/operators/images/catch.js.png)\n","title":"catch","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"Observable"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Control","Monad","Eff","Exception"],"Error"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"Observable"]},{"tag":"TypeVar","contents":"a"}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["RxJS","Observable"],"Observable"]},{"tag":"TypeVar","contents":"a"}]}]}]},null]}},"sourceSpan":{"start":[915,1],"name":"/Users/luka/proj/purescript-rxps/src/RxJS/Observable.purs","end":[915,75]}}]},{"reExports":[],"name":"RxJS.Scheduler","comments":null,"declarations":[{"children":[],"comments":"Please see [RxJS Version 5.* documentation](http://reactivex.io/rxjs/) for\nadditional details on proper usage of the library.\n","title":"Scheduler","info":{"kind":{"tag":"NamedKind","contents":[["Prim"],"Type"]},"declType":"externData"},"sourceSpan":{"start":[13,1],"name":"/Users/luka/proj/purescript-rxps/src/RxJS/Scheduler.purs","end":[13,38]}},{"children":[],"comments":null,"title":"queue","info":{"declType":"value","type":{"tag":"TypeConstructor","contents":[["RxJS","Scheduler"],"Scheduler"]}},"sourceSpan":{"start":[15,1],"name":"/Users/luka/proj/purescript-rxps/src/RxJS/Scheduler.purs","end":[15,34]}},{"children":[],"comments":null,"title":"asap","info":{"declType":"value","type":{"tag":"TypeConstructor","contents":[["RxJS","Scheduler"],"Scheduler"]}},"sourceSpan":{"start":[17,1],"name":"/Users/luka/proj/purescript-rxps/src/RxJS/Scheduler.purs","end":[17,33]}},{"children":[],"comments":null,"title":"async","info":{"declType":"value","type":{"tag":"TypeConstructor","contents":[["RxJS","Scheduler"],"Scheduler"]}},"sourceSpan":{"start":[19,1],"name":"/Users/luka/proj/purescript-rxps/src/RxJS/Scheduler.purs","end":[19,34]}},{"children":[],"comments":null,"title":"animationFrame","info":{"declType":"value","type":{"tag":"TypeConstructor","contents":[["RxJS","Scheduler"],"Scheduler"]}},"sourceSpan":{"start":[21,1],"name":"/Users/luka/proj/purescript-rxps/src/RxJS/Scheduler.purs","end":[21,34]}}]},{"reExports":[],"name":"RxJS.Subscriber","comments":null,"declarations":[{"children":[],"comments":null,"title":"Subscriber","info":{"arguments":[["a",null]],"declType":"typeSynonym","type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Record"]},{"tag":"RCons","contents":["next",{"tag":"ForAll","contents":["e",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad","Eff"],"Eff"]},{"tag":"TypeVar","contents":"e"}]},{"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}]},null]},{"tag":"RCons","contents":["error",{"tag":"ForAll","contents":["e",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Control","Monad","Eff","Exception"],"Error"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad","Eff"],"Eff"]},{"tag":"TypeVar","contents":"e"}]},{"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}]},null]},{"tag":"RCons","contents":["completed",{"tag":"ForAll","contents":["e",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad","Eff"],"Eff"]},{"tag":"TypeVar","contents":"e"}]},{"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}]},null]},{"tag":"REmpty"}]}]}]}]}},"sourceSpan":{"start":[9,1],"name":"/Users/luka/proj/purescript-rxps/src/RxJS/Subscriber.purs","end":[13,5]}}]},{"reExports":[],"name":"RxJS.Subscription","comments":null,"declarations":[{"children":[],"comments":"When you subscribe, you get back a Subscription, which represents the\nongoing execution.\n","title":"Subscription","info":{"kind":{"tag":"NamedKind","contents":[["Prim"],"Type"]},"declType":"externData"},"sourceSpan":{"start":[11,1],"name":"/Users/luka/proj/purescript-rxps/src/RxJS/Subscription.purs","end":[11,41]}},{"children":[],"comments":"Call unsubscribe() to cancel the execution.\n","title":"unsubscribe","info":{"declType":"value","type":{"tag":"ForAll","contents":["e",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["RxJS","Subscription"],"Subscription"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad","Eff"],"Eff"]},{"tag":"TypeVar","contents":"e"}]},{"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}]},null]}},"sourceSpan":{"start":[14,1],"name":"/Users/luka/proj/purescript-rxps/src/RxJS/Subscription.purs","end":[14,63]}}]}],"resolvedDependencies":{"purescript-free":"4.0.0","purescript-proxy":"2.0.0","purescript-exceptions":"3.0.0","purescript-newtype":"2.0.0","purescript-maps":"3.0.0","purescript-control":"3.0.0","purescript-arraybuffer-types":"1.0.0","purescript-console":"3.0.0","purescript-either":"3.0.0","purescript-media-types":"3.0.0","purescript-arrays":"4.0.1","purescript-maybe":"3.0.0","purescript-js-timers":"3.0.0","purescript-exists":"3.0.0","purescript-distributive":"3.0.0","purescript-unfoldable":"3.0.0","purescript-invariant":"3.0.0","purescript-lazy":"3.0.0","purescript-dom":"4.3.1","purescript-monoid":"3.0.0","purescript-aff":"3.1.0","purescript-foldable-traversable":"3.0.0","purescript-debug":"3.0.0","purescript-tailrec":"3.1.0","purescript-gen":"1.1.0","purescript-functors":"2.0.0","purescript-prelude":"3.0.0","purescript-st":"3.0.0","purescript-bifunctors":"3.0.0","purescript-nonempty":"4.0.0","purescript-contravariant":"3.0.0","purescript-generics":"4.0.0","purescript-unsafe-coerce":"3.0.0","purescript-refs":"3.0.0","purescript-integers":"3.0.0","purescript-eff":"3.1.0","purescript-test-unit":"11.0.0","purescript-const":"3.0.0","purescript-transformers":"3.3.0","purescript-globals":"3.0.0","purescript-js-date":"4.0.0","purescript-math":"2.0.0","purescript-enums":"3.0.0","purescript-psci-support":"3.0.0","purescript-catenable-lists":"4.0.0","purescript-random":"3.0.0","purescript-parallel":"3.0.0","purescript-tuples":"4.0.0","purescript-partial":"1.2.0","purescript-quickcheck":"4.0.0","purescript-strings":"3.1.0","purescript-identity":"3.1.0","purescript-foreign":"4.0.0","purescript-lists":"4.1.1","purescript-nullable":"3.0.0","purescript-datetime":"3.0.0","purescript-functions":"3.0.0"},"version":"1.4.3","github":["LukaJCB","purescript-rxps"],"versionTag":"v1.4.3","moduleMap":{"Data.BooleanAlgebra":"purescript-prelude","Data.Decide":"purescript-contravariant","Data.Ring":"purescript-prelude","Control.Monad.Trans.Class":"purescript-transformers","Data.Functor.Product":"purescript-functors","Data.NonEmpty":"purescript-nonempty","DOM.HTML.Document":"purescript-dom","Control.Monad.Eff.Ref":"purescript-refs","DOM.CSS.Event.Types":"purescript-dom","Data.Char.Gen":"purescript-strings","DOM.WebStorage.Types":"purescript-dom","DOM.XHR.Types":"purescript-dom","DOM.HTML.HTMLParamElement":"purescript-dom","Control.Monad.Aff.Class":"purescript-aff","Data.Generic":"purescript-generics","DOM.Event.MouseEvent":"purescript-dom","Data.Nullable":"purescript-nullable","Control.Comonad.Env":"purescript-transformers","DOM.HTML.HTMLTableSectionElement":"purescript-dom","Control.Comonad.Traced.Class":"purescript-transformers","Data.StrMap":"purescript-maps","Control.Monad.Eff.Unsafe":"purescript-eff","Data.Functor.Compose":"purescript-functors","Data.Int.Bits":"purescript-integers","Data.DateTime":"purescript-datetime","Data.Bifunctor.Flip":"purescript-bifunctors","DOM.HTML.HTMLOutputElement":"purescript-dom","Data.Ord":"purescript-prelude","DOM.Event.EventTarget":"purescript-dom","Control.Monad.Gen":"purescript-gen","Data.Date":"purescript-datetime","Data.Monoid.Dual":"purescript-monoid","Control.Monad.Rec.Class":"purescript-tailrec","Data.StrMap.ST.Unsafe":"purescript-maps","Data.Time.Component":"purescript-datetime","DOM.HTML.HTMLMediaElement.CanPlayType":"purescript-dom","DOM.HTML.HTMLDataListElement":"purescript-dom","Data.Bitraversable":"purescript-foldable-traversable","Test.Unit.Assert":"purescript-test-unit","Data.Boolean":"purescript-prelude","Data.Map":"purescript-maps","DOM.XHR.FormData":"purescript-dom","Control.Biapplicative":"purescript-bifunctors","DOM.HTML.HTMLTextAreaElement":"purescript-dom","Data.CatList":"purescript-catenable-lists","DOM.Event.ClipboardEvent":"purescript-dom","Control.Parallel.Class":"purescript-parallel","Type.Proxy":"purescript-proxy","Test.Unit.Output.Fancy":"purescript-test-unit","Data.Coyoneda":"purescript-free","Data.Array.ST.Iterator":"purescript-arrays","Data.Bounded":"purescript-prelude","DOM.HTML.HTMLOListElement":"purescript-dom","Control.Monad.State.Trans":"purescript-transformers","Data.Int":"purescript-integers","Data.Show":"purescript-prelude","Data.Bifunctor.Clown":"purescript-bifunctors","Control.Monad.Writer.Trans":"purescript-transformers","Data.Foldable":"purescript-foldable-traversable","Data.Divide":"purescript-contravariant","Control.Comonad.Store.Class":"purescript-transformers","Data.Enum":"purescript-enums","DOM.Event.WheelEvent":"purescript-dom","DOM.HTML.Event.ErrorEvent":"purescript-dom","Control.Monad.Trampoline":"purescript-free","DOM.HTML.HTMLObjectElement":"purescript-dom","Control.Monad.Aff.AVar":"purescript-aff","DOM.HTML.HTMLLIElement":"purescript-dom","Control.Apply":"purescript-prelude","DOM.HTML.Event.DragEvent":"purescript-dom","Data.Functor.Contravariant":"purescript-contravariant","Data.Tuple.Nested":"purescript-tuples","Test.QuickCheck.LCG":"purescript-quickcheck","DOM.HTML.HTMLSourceElement":"purescript-dom","DOM.HTML.HTMLMetaElement":"purescript-dom","Control.Monad":"purescript-prelude","Data.Lazy":"purescript-lazy","Data.Monoid":"purescript-monoid","Control.Monad.Eff.Uncurried":"purescript-eff","Control.Monad.List.Trans":"purescript-transformers","Control.Monad.RWS":"purescript-transformers","Data.Maybe.First":"purescript-maybe","Control.Bind":"purescript-prelude","Data.Foreign.Index":"purescript-foreign","DOM.HTML.HTMLFieldSetElement":"purescript-dom","DOM.HTML.URL":"purescript-dom","Data.Monoid.Additive":"purescript-monoid","DOM.Websocket.Types":"purescript-dom","Data.String.Regex":"purescript-strings","Data.HeytingAlgebra":"purescript-prelude","Control.Alt":"purescript-control","Control.Monad.Maybe.Trans":"purescript-transformers","Control.Monad.Cont":"purescript-transformers","DOM.HTML.Types":"purescript-dom","DOM.HTML.HTMLElement":"purescript-dom","DOM.HTML.HTMLDataElement":"purescript-dom","DOM.HTML.HTMLLinkElement":"purescript-dom","Data.List.ZipList":"purescript-lists","Data.Functor.Coproduct.Nested":"purescript-functors","DOM.HTML.HTMLOptionElement":"purescript-dom","Data.Ord.Unsafe":"purescript-prelude","Data.Semigroup":"purescript-prelude","Control.Monad.Reader":"purescript-transformers","Test.Unit.QuickCheck":"purescript-test-unit","Data.Const":"purescript-const","DOM.HTML.HTMLKeygenElement":"purescript-dom","Control.Monad.Eff":"purescript-eff","Control.Comonad.Traced.Trans":"purescript-transformers","Data.StrMap.Unsafe":"purescript-maps","DOM.Node.NonElementParentNode":"purescript-dom","DOM.File.FileReader":"purescript-dom","DOM.HTML.HTMLButtonElement":"purescript-dom","DOM.HTML.HTMLTableColElement":"purescript-dom","DOM.Node.Node":"purescript-dom","Data.Tuple":"purescript-tuples","Control.Biapply":"purescript-bifunctors","Data.Distributive":"purescript-distributive","DOM.HTML.HTMLInputElement":"purescript-dom","Control.Alternative":"purescript-control","Data.Semiring":"purescript-prelude","Data.StrMap.ST":"purescript-maps","Data.Exists":"purescript-exists","DOM.HTML.HTMLModElement":"purescript-dom","Data.CommutativeRing":"purescript-prelude","Data.NaturalTransformation":"purescript-prelude","Data.Monoid.Conj":"purescript-monoid","Data.Yoneda":"purescript-free","Control.Monad.Aff.Internal":"purescript-aff","Data.Functor.App":"purescript-functors","DOM.Event.CompositionEvent":"purescript-dom","DOM.Websocket.WebSocket":"purescript-dom","Data.Unfoldable":"purescript-unfoldable","Control.Monad.Eff.Random":"purescript-random","DOM.Event.Event":"purescript-dom","DOM.File.File":"purescript-dom","DOM.HTML.Location":"purescript-dom","DOM.WebStorage.Event.Types":"purescript-dom","DOM":"purescript-dom","Control.Comonad.Store.Trans":"purescript-transformers","Control.Monad.ST":"purescript-st","Control.Monad.State.Class":"purescript-transformers","DOM.HTML.HTMLLegendElement":"purescript-dom","DOM.File.FileReader.ReadyState":"purescript-dom","Data.List.Types":"purescript-lists","Data.Functor":"purescript-prelude","Unsafe.Coerce":"purescript-unsafe-coerce","DOM.Node.Document":"purescript-dom","Control.Monad.Writer.Class":"purescript-transformers","DOM.HTML.History":"purescript-dom","Data.CatQueue":"purescript-catenable-lists","DOM.HTML.Event.HashChangeEvent":"purescript-dom","Control.Monad.Except":"purescript-transformers","Data.List.Lazy.Types":"purescript-lists","Data.DateTime.Locale":"purescript-datetime","Control.Category":"purescript-prelude","Test.QuickCheck.Arbitrary":"purescript-quickcheck","Control.Monad.Gen.Common":"purescript-gen","Control.Monad.RWS.Trans":"purescript-transformers","DOM.Node.ChildNode":"purescript-dom","Test.QuickCheck.Data.AlphaNumString":"purescript-quickcheck","DOM.Websocket.BinaryType":"purescript-dom","Control.Monad.Cont.Trans":"purescript-transformers","Data.Maybe":"purescript-maybe","DOM.HTML.HTMLOptGroupElement":"purescript-dom","Data.String.Regex.Unsafe":"purescript-strings","DOM.HTML.HTMLIFrameElement":"purescript-dom","DOM.Node.NodeList":"purescript-dom","DOM.HTML.HTMLTableRowElement":"purescript-dom","DOM.HTML.HTMLMediaElement":"purescript-dom","DOM.HTML.HTMLMapElement":"purescript-dom","Control.Comonad":"purescript-control","Data.Function":"purescript-prelude","Data.List":"purescript-lists","DOM.HTML.Navigator":"purescript-dom","Data.Field":"purescript-prelude","Data.List.Lazy":"purescript-lists","DOM.Node.NonDocumentTypeChildNode":"purescript-dom","Test.Unit.Output.TAP":"purescript-test-unit","Data.EuclideanRing":"purescript-prelude","DOM.File.FileList":"purescript-dom","Data.Functor.Invariant":"purescript-invariant","DOM.HTML.Window":"purescript-dom","DOM.HTML.HTMLAreaElement":"purescript-dom","Control.Comonad.Traced":"purescript-transformers","Global.Unsafe":"purescript-globals","DOM.HTML.HTMLTrackElement":"purescript-dom","Data.Comparison":"purescript-contravariant","Data.String.Unsafe":"purescript-strings","DOM.HTML.HTMLTableHeaderCellElement":"purescript-dom","Prelude":"purescript-prelude","Control.Monad.Aff":"purescript-aff","Data.Predicate":"purescript-contravariant","Partial.Unsafe":"purescript-partial","Data.Array":"purescript-arrays","DOM.HTML.HTMLScriptElement":"purescript-dom","Data.Bifunctor.Product":"purescript-bifunctors","Control.Extend":"purescript-control","Test.Unit.Console":"purescript-test-unit","Control.Lazy":"purescript-control","Data.Function.Uncurried":"purescript-functions","Control.Monad.Reader.Trans":"purescript-transformers","DOM.HTML.HTMLImageElement":"purescript-dom","Data.Functor.Product.Nested":"purescript-functors","DOM.HTML.HTMLStyleElement":"purescript-dom","Test.Unit.Output.Simple":"purescript-test-unit","Control.Comonad.Env.Class":"purescript-transformers","DOM.Websocket.ReadyState":"purescript-dom","Data.ArrayBuffer.Types":"purescript-arraybuffer-types","Data.Eq":"purescript-prelude","Data.Either.Nested":"purescript-either","Control.Comonad.Cofree":"purescript-free","Data.Newtype":"purescript-newtype","Control.Monad.Eff.Console":"purescript-console","DOM.HTML.Event.Types":"purescript-dom","Data.Bifunctor":"purescript-bifunctors","DOM.HTML.Event.DataTransfer":"purescript-dom","Data.Monoid.Disj":"purescript-monoid","Control.Monad.Eff.Exception":"purescript-exceptions","Data.MediaType":"purescript-media-types","Control.Monad.Eff.Timer":"purescript-js-timers","Control.Monad.Gen.Class":"purescript-gen","Data.Array.Partial":"purescript-arrays","Data.Foreign.Keys":"purescript-foreign","Data.String.CaseInsensitive":"purescript-strings","Control.Monad.Free":"purescript-free","Control.Parallel":"purescript-parallel","Control.MonadPlus":"purescript-control","DOM.HTML.HTMLQuoteElement":"purescript-dom","DOM.Event.FocusEvent":"purescript-dom","DOM.Node.ParentNode":"purescript-dom","Data.Void":"purescript-prelude","Control.MonadZero":"purescript-control","DOM.Websocket.Event.Types":"purescript-dom","Data.DateTime.Instant":"purescript-datetime","Control.Comonad.Store":"purescript-transformers","DOM.Node.HTMLCollection":"purescript-dom","DOM.HTML.HTMLTimeElement":"purescript-dom","Control.Monad.Except.Trans":"purescript-transformers","DOM.HTML.HTMLProgressElement":"purescript-dom","Data.Bifunctor.Joker":"purescript-bifunctors","Data.Divisible":"purescript-contravariant","DOM.HTML.HTMLBaseElement":"purescript-dom","DOM.HTML":"purescript-dom","DOM.Node.Types":"purescript-dom","DOM.HTML.HTMLTrackElement.ReadyState":"purescript-dom","Data.Bifunctor.Wrap":"purescript-bifunctors","DOM.HTML.HTMLCanvasElement":"purescript-dom","PSCI.Support":"purescript-psci-support","Data.Equivalence":"purescript-contravariant","Data.Maybe.Last":"purescript-maybe","DOM.WebStorage.Event.StorageEvent":"purescript-dom","DOM.HTML.HTMLTitleElement":"purescript-dom","Data.Unit":"purescript-prelude","Control.Monad.Eff.Ref.Unsafe":"purescript-refs","DOM.HTML.Event.DragEvent.DataTransfer":"purescript-dom","Data.List.NonEmpty":"purescript-lists","DOM.Node.Element":"purescript-dom","DOM.HTML.HTMLTableCellElement":"purescript-dom","Data.List.Lazy.NonEmpty":"purescript-lists","Data.Foreign":"purescript-foreign","Data.Ordering":"purescript-prelude","Data.Functor.Coproduct":"purescript-functors","DOM.HTML.HTMLSelectElement":"purescript-dom","Control.Monad.Cont.Class":"purescript-transformers","Data.Identity":"purescript-identity","DOM.HTML.SelectionMode":"purescript-dom","DOM.HTML.HTMLTemplateElement":"purescript-dom","Math":"purescript-math","Control.Comonad.Trans.Class":"purescript-transformers","Data.String":"purescript-strings","Control.Plus":"purescript-control","DOM.HTML.HTMLEmbedElement":"purescript-dom","Control.Monad.Eff.Class":"purescript-eff","DOM.Util.FFI":"purescript-dom","Test.QuickCheck":"purescript-quickcheck","DOM.File.Types":"purescript-dom","Test.Unit.Main":"purescript-test-unit","Data.Time":"purescript-datetime","Data.JSDate":"purescript-js-date","Data.Time.Duration":"purescript-datetime","Data.Date.Component":"purescript-datetime","DOM.HTML.HTMLMediaElement.NetworkState":"purescript-dom","Partial":"purescript-partial","DOM.Websocket.Event.CloseEvent":"purescript-dom","Control.Comonad.Env.Trans":"purescript-transformers","DOM.HTML.HTMLMeterElement":"purescript-dom","Global":"purescript-globals","Control.Monad.Reader.Class":"purescript-transformers","Data.Decidable":"purescript-contravariant","DOM.File.Blob":"purescript-dom","DOM.Event.KeyboardEvent":"purescript-dom","Control.Monad.Aff.Unsafe":"purescript-aff","DOM.Websocket.Event.EventTypes":"purescript-dom","DOM.HTML.HTMLLabelElement":"purescript-dom","Data.Monoid.Multiplicative":"purescript-monoid","DOM.WebStorage.Storage":"purescript-dom","Data.Array.ST":"purescript-arrays","Control.Monad.Error.Class":"purescript-transformers","Test.Unit":"purescript-test-unit","DOM.Websocket.Event.MessageEvent":"purescript-dom","Control.Monad.Aff.Console":"purescript-aff","Control.Semigroupoid":"purescript-prelude","DOM.HTML.HTMLFormElement":"purescript-dom","DOM.HTML.Event.EventTypes":"purescript-dom","Debug.Trace":"purescript-debug","Data.Monoid.Alternate":"purescript-monoid","Data.Char":"purescript-strings","DOM.Node.NodeType":"purescript-dom","Data.Bifunctor.Join":"purescript-bifunctors","DOM.HTML.HTMLTableElement":"purescript-dom","DOM.HTML.HTMLMediaElement.ReadyState":"purescript-dom","Control.Monad.Eff.Exception.Unsafe":"purescript-exceptions","Data.Bifoldable":"purescript-foldable-traversable","Data.Monoid.Endo":"purescript-monoid","Control.Monad.State":"purescript-transformers","Data.List.Partial":"purescript-lists","Data.String.Regex.Flags":"purescript-strings","DOM.HTML.HTMLAnchorElement":"purescript-dom","Data.Either":"purescript-either","DOM.HTML.HTMLVideoElement":"purescript-dom","Control.Applicative":"purescript-prelude","Data.Op":"purescript-contravariant","Data.MediaType.Common":"purescript-media-types","Test.QuickCheck.Gen":"purescript-quickcheck","Control.Monad.Writer":"purescript-transformers","DOM.Node.DocumentType":"purescript-dom","DOM.Event.EventPhase":"purescript-dom","DOM.Event.Types":"purescript-dom","Data.Traversable":"purescript-foldable-traversable","Data.String.Gen":"purescript-strings"},"compilerVersion":"0.11.4"}