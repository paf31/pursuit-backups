{"uploader":"vladciobanu","packageMeta":{"homepage":"https://github.com/vladciobanu/purescript-sorted-arrays.git","repository":{"url":"https://github.com/vladciobanu/purescript-sorted-arrays.git","type":"git"},"ignore":["**/.*","node_modules","bower_components","output"],"devDependencies":{"purescript-effect":"^2.0.0","purescript-console":"^4.1.0","purescript-assert":"^4.0.0"},"authors":[{"email":"ps@cvlad.info","name":"Vladimir Ciobanu"}],"dependencies":{"purescript-newtype":"^3.0.0","purescript-arrays":"^5.0.0","purescript-maybe":"^4.0.0","purescript-foldable-traversable":"^4.0.0","purescript-prelude":"^4.1.0","purescript-partial":"^2.0.0"},"name":"purescript-sorted-arrays","license":["MIT"],"description":"Sorted arrays"},"tagTime":"2018-07-28T22:21:16+0000","modules":[{"reExports":[],"name":"Data.SortedArray","comments":"`SortedArray` is a newtype wrapper on top of `Array`. You can construct a `SortedArray` by\nusing the sort function provided in this module. The main benefit is being able to\nbinary search through the array through `elemIndex`, `elemLastIndex`, `findIndex`,\n`findLastIndex` and `filter`.\n\nA large number of functions from `Data.Array` were ported over since they just work. However,\na few do not make sense (for example, insert at index). A few others take a `SortedArray` but\nmust return an `Array` and are convenience functions for unwrapping and then applying the\noperation on the underlying `Array`.\n\n`SortedArray` has the following instances: `Eq`, `Eq1`, `Ord`, `Ord1` `Foldable`, `Show`,\n   `Semigroup` and `Monoid`.\n\nPlease note that there is no `Functor` instance but there is a `map` function that returns\nan `Array b`.\n","declarations":[{"children":[{"comments":"Comparison is done using `<=`, so the operation is left-biased with regards to EQ.\nThis also means that the operation is commutative up to EQ.\n","title":"sortedArraySemigroup","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","Ord"],"Ord"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Semigroup"],"Semigroup"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","SortedArray"],"SortedArray"]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[79,1],"name":"/home/vlad/code/sorted-arrays/src/Data/SortedArray.purs","end":[79,66]}},{"comments":null,"title":"sortedArrayMonoid","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","Ord"],"Ord"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Monoid"],"Monoid"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","SortedArray"],"SortedArray"]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[82,1],"name":"/home/vlad/code/sorted-arrays/src/Data/SortedArray.purs","end":[82,60]}},{"comments":null,"title":"eqSortedArray","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","Eq"],"Eq"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Eq"],"Eq"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","SortedArray"],"SortedArray"]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[97,16],"name":"/home/vlad/code/sorted-arrays/src/Data/SortedArray.purs","end":[97,66]}},{"comments":null,"title":"sortedArrayEq1","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Eq"],"Eq1"]},{"tag":"TypeConstructor","contents":[["Data","SortedArray"],"SortedArray"]}]}},"sourceSpan":{"start":[99,1],"name":"/home/vlad/code/sorted-arrays/src/Data/SortedArray.purs","end":[99,42]}},{"comments":null,"title":"sortedArrayOrd","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","Ord"],"Ord"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Ord"],"Ord"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","SortedArray"],"SortedArray"]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[102,8],"name":"/home/vlad/code/sorted-arrays/src/Data/SortedArray.purs","end":[102,61]}},{"comments":null,"title":"sortedArrayOrd1","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Ord"],"Ord1"]},{"tag":"TypeConstructor","contents":[["Data","SortedArray"],"SortedArray"]}]}},"sourceSpan":{"start":[104,1],"name":"/home/vlad/code/sorted-arrays/src/Data/SortedArray.purs","end":[104,44]}},{"comments":null,"title":"foldableSortedArray","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Foldable"],"Foldable"]},{"tag":"TypeConstructor","contents":[["Data","SortedArray"],"SortedArray"]}]}},"sourceSpan":{"start":[107,16],"name":"/home/vlad/code/sorted-arrays/src/Data/SortedArray.purs","end":[107,67]}},{"comments":null,"title":"showSortedArray","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","Show"],"Show"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Show"],"Show"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","SortedArray"],"SortedArray"]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[109,1],"name":"/home/vlad/code/sorted-arrays/src/Data/SortedArray.purs","end":[109,57]}}],"comments":"You can create `SortedArray`s by using the `sort` functions. You can get the underlying\n`Array` using `unSortedArray`.\n","title":"SortedArray","info":{"declType":"data","dataDeclType":"newtype","typeArguments":[["a",null]]},"sourceSpan":{"start":[75,1],"name":"/home/vlad/code/sorted-arrays/src/Data/SortedArray.purs","end":[75,46]}},{"children":[],"comments":"Unwraps to the inner `Array`.\n","title":"unSortedArray","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","SortedArray"],"SortedArray"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]}]},null]}},"sourceSpan":{"start":[91,1],"name":"/home/vlad/code/sorted-arrays/src/Data/SortedArray.purs","end":[91,45]}},{"children":[],"comments":"Unfold and sort a `Foldable` structure to a `SortedArray`.\n","title":"fromFoldable","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["f",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Foldable"],"Foldable"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}],"constraintData":null},{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Ord"],"Ord"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","SortedArray"],"SortedArray"]},{"tag":"TypeVar","contents":"a"}]}]}]}]},null]},null]}},"sourceSpan":{"start":[113,1],"name":"/home/vlad/code/sorted-arrays/src/Data/SortedArray.purs","end":[113,63]}},{"children":[],"comments":"Creates a singleton array which is by definition sorted.\n","title":"singleton","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","SortedArray"],"SortedArray"]},{"tag":"TypeVar","contents":"a"}]}]},null]}},"sourceSpan":{"start":[117,1],"name":"/home/vlad/code/sorted-arrays/src/Data/SortedArray.purs","end":[117,35]}},{"children":[],"comments":"Creates an array containing a range of integers, including the bounds.\n","title":"range","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","SortedArray"],"SortedArray"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}]}]}},"sourceSpan":{"start":[121,1],"name":"/home/vlad/code/sorted-arrays/src/Data/SortedArray.purs","end":[121,36]}},{"children":[],"comments":"Infix synonym for `range`.\n","title":"(..)","info":{"declType":"alias","alias":[["Data","SortedArray"],{"Right":{"Left":{"Ident":"range"}}}],"fixity":{"associativity":"infix","precedence":8}},"sourceSpan":{"start":[125,1],"name":"/home/vlad/code/sorted-arrays/src/Data/SortedArray.purs","end":[125,20]}},{"children":[],"comments":"Create a `SortedArray` with `n` copies of a value.\n","title":"replicate","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","SortedArray"],"SortedArray"]},{"tag":"TypeVar","contents":"a"}]}]}]},null]}},"sourceSpan":{"start":[128,1],"name":"/home/vlad/code/sorted-arrays/src/Data/SortedArray.purs","end":[128,41]}},{"children":[],"comments":"Tests whether the array is empty.\n","title":"null","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","SortedArray"],"SortedArray"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]},null]}},"sourceSpan":{"start":[132,1],"name":"/home/vlad/code/sorted-arrays/src/Data/SortedArray.purs","end":[132,36]}},{"children":[],"comments":"Gets the length of the array.\n","title":"length","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","SortedArray"],"SortedArray"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},null]}},"sourceSpan":{"start":[136,1],"name":"/home/vlad/code/sorted-arrays/src/Data/SortedArray.purs","end":[136,34]}},{"children":[],"comments":"Convenience function for adding an item at the beginning of the sorted array. The result is\na plain `Array`. Use `insert` if you need the result to also be a `SortedArray`.\n","title":"cons","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","SortedArray"],"SortedArray"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]}]}]},null]}},"sourceSpan":{"start":[141,1],"name":"/home/vlad/code/sorted-arrays/src/Data/SortedArray.purs","end":[141,40]}},{"children":[],"comments":"Infix synonym for `cons`.\n","title":"(:)","info":{"declType":"alias","alias":[["Data","SortedArray"],{"Right":{"Left":{"Ident":"cons"}}}],"fixity":{"associativity":"infix","precedence":8}},"sourceSpan":{"start":[145,1],"name":"/home/vlad/code/sorted-arrays/src/Data/SortedArray.purs","end":[145,18]}},{"children":[],"comments":"Flipped version of `cons`.\n","title":"snoc","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","SortedArray"],"SortedArray"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]}]}]},null]}},"sourceSpan":{"start":[148,1],"name":"/home/vlad/code/sorted-arrays/src/Data/SortedArray.purs","end":[148,40]}},{"children":[],"comments":"Insert an item in the sorted array. The array remains sorted. The item goes in the first\nposition it can (so if they are duplicates, it will be the first item in that particular\nEQ _group_).\n","title":"insert","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Ord"],"Ord"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","SortedArray"],"SortedArray"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","SortedArray"],"SortedArray"]},{"tag":"TypeVar","contents":"a"}]}]}]}]},null]}},"sourceSpan":{"start":[154,1],"name":"/home/vlad/code/sorted-arrays/src/Data/SortedArray.purs","end":[154,56]}},{"children":[],"comments":"Gets the first item of the array, or `Nothing` if the array is empty.\n","title":"head","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","SortedArray"],"SortedArray"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeVar","contents":"a"}]}]},null]}},"sourceSpan":{"start":[181,1],"name":"/home/vlad/code/sorted-arrays/src/Data/SortedArray.purs","end":[181,36]}},{"children":[],"comments":"Gets the last item of the array, or `Nothing` if the array is empty.\n","title":"last","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","SortedArray"],"SortedArray"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeVar","contents":"a"}]}]},null]}},"sourceSpan":{"start":[185,1],"name":"/home/vlad/code/sorted-arrays/src/Data/SortedArray.purs","end":[185,36]}},{"children":[],"comments":"Gets the rest of the array (all except the first item), or `Nothing` if the array is empty.\n","title":"tail","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","SortedArray"],"SortedArray"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","SortedArray"],"SortedArray"]},{"tag":"TypeVar","contents":"a"}]}}]}]},null]}},"sourceSpan":{"start":[189,1],"name":"/home/vlad/code/sorted-arrays/src/Data/SortedArray.purs","end":[189,50]}},{"children":[],"comments":"Gets all the items in the array except the last item, or `Nothing` if the array is empty.\n","title":"init","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","SortedArray"],"SortedArray"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","SortedArray"],"SortedArray"]},{"tag":"TypeVar","contents":"a"}]}}]}]},null]}},"sourceSpan":{"start":[193,1],"name":"/home/vlad/code/sorted-arrays/src/Data/SortedArray.purs","end":[193,50]}},{"children":[],"comments":"Deconstructs the array to a `head` and `tail`, or returns `Nothing` if the array is empty.\n","title":"uncons","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","SortedArray"],"SortedArray"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Record"]},{"tag":"RCons","contents":["head",{"tag":"TypeVar","contents":"a"},{"tag":"RCons","contents":["tail",{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","SortedArray"],"SortedArray"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"REmpty"}]}]}]}]}]},null]}},"sourceSpan":{"start":[197,1],"name":"/home/vlad/code/sorted-arrays/src/Data/SortedArray.purs","end":[197,71]}},{"children":[],"comments":"Flipped version of `uncons`.\n","title":"unsnoc","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","SortedArray"],"SortedArray"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Record"]},{"tag":"RCons","contents":["init",{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","SortedArray"],"SortedArray"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"RCons","contents":["last",{"tag":"TypeVar","contents":"a"},{"tag":"REmpty"}]}]}]}]}]},null]}},"sourceSpan":{"start":[201,1],"name":"/home/vlad/code/sorted-arrays/src/Data/SortedArray.purs","end":[201,71]}},{"children":[],"comments":"Gets the item at the specified index, or `Nothing` if it is out of bounds.\n","title":"index","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","SortedArray"],"SortedArray"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeVar","contents":"a"}]}]}]},null]}},"sourceSpan":{"start":[205,1],"name":"/home/vlad/code/sorted-arrays/src/Data/SortedArray.purs","end":[205,43]}},{"children":[],"comments":"Infix synonym for `index`.\n","title":"(!!)","info":{"declType":"alias","alias":[["Data","SortedArray"],{"Right":{"Left":{"Ident":"index"}}}],"fixity":{"associativity":"infix","precedence":8}},"sourceSpan":{"start":[209,1],"name":"/home/vlad/code/sorted-arrays/src/Data/SortedArray.purs","end":[209,20]}},{"children":[],"comments":"Finds the first index of the first occurrence of the provided item. Uses binary search.\n","title":"elemIndex","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Ord"],"Ord"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","SortedArray"],"SortedArray"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}]}]}]},null]}},"sourceSpan":{"start":[212,1],"name":"/home/vlad/code/sorted-arrays/src/Data/SortedArray.purs","end":[212,55]}},{"children":[],"comments":"Finds the last index of the first occurrence of the provided item. Uses binary search.\n","title":"elemLastIndex","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Ord"],"Ord"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","SortedArray"],"SortedArray"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}]}]}]},null]}},"sourceSpan":{"start":[216,1],"name":"/home/vlad/code/sorted-arrays/src/Data/SortedArray.purs","end":[216,59]}},{"children":[],"comments":"Finds the first index for which the provided compare function tests equal (`EQ`).\nUses binary search.\n","title":"findIndex","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Ord"],"Ord"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","SortedArray"],"SortedArray"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}]}]}]},null]}},"sourceSpan":{"start":[221,1],"name":"/home/vlad/code/sorted-arrays/src/Data/SortedArray.purs","end":[221,55]}},{"children":[],"comments":"Finds the last index for which the provided compare function tests equal (`EQ`).\nUses binary search.\n","title":"findLastIndex","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Ord"],"Ord"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","SortedArray"],"SortedArray"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}]}]}]},null]}},"sourceSpan":{"start":[226,1],"name":"/home/vlad/code/sorted-arrays/src/Data/SortedArray.purs","end":[226,59]}},{"children":[],"comments":null,"title":"delete","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Ord"],"Ord"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","SortedArray"],"SortedArray"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","SortedArray"],"SortedArray"]},{"tag":"TypeVar","contents":"a"}]}]}]}]},null]}},"sourceSpan":{"start":[258,1],"name":"/home/vlad/code/sorted-arrays/src/Data/SortedArray.purs","end":[258,56]}},{"children":[],"comments":"Deletes item at index.\n","title":"deleteAt","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","SortedArray"],"SortedArray"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","SortedArray"],"SortedArray"]},{"tag":"TypeVar","contents":"a"}]}}]}]}]},null]}},"sourceSpan":{"start":[262,1],"name":"/home/vlad/code/sorted-arrays/src/Data/SortedArray.purs","end":[262,60]}},{"children":[],"comments":"Returns all items for which the provided compare function tests equal ('EQ').\nUses binary search.\n","title":"filter","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Ord"],"Ord"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","SortedArray"],"SortedArray"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","SortedArray"],"SortedArray"]},{"tag":"TypeVar","contents":"a"}]}]}]}]},null]}},"sourceSpan":{"start":[267,1],"name":"/home/vlad/code/sorted-arrays/src/Data/SortedArray.purs","end":[267,56]}},{"children":[],"comments":"Splits the array in two arrays depending on whether they test true or false for the provided\npredicate. Ordering is retained, so both arrays are still sorted.\n","title":"partition","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","SortedArray"],"SortedArray"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Record"]},{"tag":"RCons","contents":["yes",{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","SortedArray"],"SortedArray"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"RCons","contents":["no",{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","SortedArray"],"SortedArray"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"REmpty"}]}]}]}]}]},null]}},"sourceSpan":{"start":[281,1],"name":"/home/vlad/code/sorted-arrays/src/Data/SortedArray.purs","end":[281,93]}},{"children":[],"comments":"Functor-like convenience function, equivalent to unwrapping and applying the Array map.\n","title":"map","info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","SortedArray"],"SortedArray"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"b"}]}]}]},null]},null]}},"sourceSpan":{"start":[285,1],"name":"/home/vlad/code/sorted-arrays/src/Data/SortedArray.purs","end":[285,47]}},{"children":[],"comments":"Apply function to each element, supplying a zero-based index. Result is a regular `Array`.\n","title":"mapWithIndex","info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","SortedArray"],"SortedArray"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"b"}]}]}]},null]},null]}},"sourceSpan":{"start":[289,1],"name":"/home/vlad/code/sorted-arrays/src/Data/SortedArray.purs","end":[289,62]}},{"children":[],"comments":"Sort an array and wrap it as a `SortedArray`.\n","title":"sort","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Ord"],"Ord"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","SortedArray"],"SortedArray"]},{"tag":"TypeVar","contents":"a"}]}]}]},null]}},"sourceSpan":{"start":[293,1],"name":"/home/vlad/code/sorted-arrays/src/Data/SortedArray.purs","end":[293,44]}},{"children":[],"comments":"Extracts a subarray by a start and end index.\n","title":"slice","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","SortedArray"],"SortedArray"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","SortedArray"],"SortedArray"]},{"tag":"TypeVar","contents":"a"}]}]}]}]},null]}},"sourceSpan":{"start":[297,1],"name":"/home/vlad/code/sorted-arrays/src/Data/SortedArray.purs","end":[297,55]}},{"children":[],"comments":"Creates a new array by taking the first `n` elements of the array.\n","title":"take","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","SortedArray"],"SortedArray"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","SortedArray"],"SortedArray"]},{"tag":"TypeVar","contents":"a"}]}]}]},null]}},"sourceSpan":{"start":[301,1],"name":"/home/vlad/code/sorted-arrays/src/Data/SortedArray.purs","end":[301,48]}},{"children":[],"comments":"Creates a new array by taking the last `n` elements of the array.\n","title":"takeEnd","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","SortedArray"],"SortedArray"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","SortedArray"],"SortedArray"]},{"tag":"TypeVar","contents":"a"}]}]}]},null]}},"sourceSpan":{"start":[305,1],"name":"/home/vlad/code/sorted-arrays/src/Data/SortedArray.purs","end":[305,51]}},{"children":[],"comments":"Creates a new array by taking the longest subarray of items that satisfy the specified predicate.\n","title":"takeWhile","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","SortedArray"],"SortedArray"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","SortedArray"],"SortedArray"]},{"tag":"TypeVar","contents":"a"}]}]}]},null]}},"sourceSpan":{"start":[309,1],"name":"/home/vlad/code/sorted-arrays/src/Data/SortedArray.purs","end":[309,63]}},{"children":[],"comments":"Creates a new array by skipping the first `n` elements of the array.\n","title":"drop","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","SortedArray"],"SortedArray"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","SortedArray"],"SortedArray"]},{"tag":"TypeVar","contents":"a"}]}]}]},null]}},"sourceSpan":{"start":[313,1],"name":"/home/vlad/code/sorted-arrays/src/Data/SortedArray.purs","end":[313,48]}},{"children":[],"comments":"Creates a new array by skipping the last `n` elements of the array.\n","title":"dropEnd","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","SortedArray"],"SortedArray"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","SortedArray"],"SortedArray"]},{"tag":"TypeVar","contents":"a"}]}]}]},null]}},"sourceSpan":{"start":[317,1],"name":"/home/vlad/code/sorted-arrays/src/Data/SortedArray.purs","end":[317,51]}},{"children":[],"comments":"Creates a new array by skipping the longest subarray of items that satisfy the specified predicate.\n","title":"dropWhile","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","SortedArray"],"SortedArray"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","SortedArray"],"SortedArray"]},{"tag":"TypeVar","contents":"a"}]}]}]},null]}},"sourceSpan":{"start":[321,1],"name":"/home/vlad/code/sorted-arrays/src/Data/SortedArray.purs","end":[321,63]}},{"children":[],"comments":"Splits an array into the longest initial subarray of elements that satisfy the specified predicate and\nthe remaining elements.\n","title":"span","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","SortedArray"],"SortedArray"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Record"]},{"tag":"RCons","contents":["init",{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","SortedArray"],"SortedArray"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"RCons","contents":["rest",{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","SortedArray"],"SortedArray"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"REmpty"}]}]}]}]}]},null]}},"sourceSpan":{"start":[326,1],"name":"/home/vlad/code/sorted-arrays/src/Data/SortedArray.purs","end":[326,91]}},{"children":[],"comments":"Creates a new array that contains no duplicates.\n","title":"nub","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Ord"],"Ord"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","SortedArray"],"SortedArray"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","SortedArray"],"SortedArray"]},{"tag":"TypeVar","contents":"a"}]}]}]},null]}},"sourceSpan":{"start":[330,1],"name":"/home/vlad/code/sorted-arrays/src/Data/SortedArray.purs","end":[330,49]}},{"children":[],"comments":"Creates a new array that contains no duplicates by using the specified equivalence relation.\n","title":"nubBy","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeConstructor","contents":[["Data","Ordering"],"Ordering"]}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","SortedArray"],"SortedArray"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","SortedArray"],"SortedArray"]},{"tag":"TypeVar","contents":"a"}]}]}]},null]}},"sourceSpan":{"start":[334,1],"name":"/home/vlad/code/sorted-arrays/src/Data/SortedArray.purs","end":[334,64]}}]}],"resolvedDependencies":{"purescript-newtype":"3.0.0","purescript-effect":"2.0.0","purescript-control":"4.1.0","purescript-console":"4.1.0","purescript-either":"4.0.0","purescript-arrays":"5.0.0","purescript-maybe":"4.0.0","purescript-type-equality":"3.0.0","purescript-distributive":"4.0.0","purescript-unfoldable":"4.0.0","purescript-invariant":"4.1.0","purescript-foldable-traversable":"4.0.0","purescript-tailrec":"4.0.0","purescript-prelude":"4.1.0","purescript-st":"4.0.0","purescript-bifunctors":"4.0.0","purescript-nonempty":"5.0.0","purescript-assert":"4.0.0","purescript-unsafe-coerce":"4.0.0","purescript-refs":"4.1.0","purescript-orders":"4.0.0","purescript-tuples":"5.0.0","purescript-partial":"2.0.0","purescript-identity":"4.0.0"},"version":"0.2.0","github":["vladciobanu","purescript-sorted-arrays"],"versionTag":"v0.2.0","moduleMap":{"Data.BooleanAlgebra":"purescript-prelude","Data.Ring":"purescript-prelude","Data.NonEmpty":"purescript-nonempty","Effect.Uncurried":"purescript-effect","Effect":"purescript-effect","Data.Traversable.Accum.Internal":"purescript-foldable-traversable","Data.Bifunctor.Flip":"purescript-bifunctors","Data.Ord":"purescript-prelude","Type.Data.Row":"purescript-prelude","Data.Monoid.Dual":"purescript-prelude","Control.Monad.Rec.Class":"purescript-tailrec","Data.Bitraversable":"purescript-foldable-traversable","Data.Boolean":"purescript-prelude","Control.Biapplicative":"purescript-bifunctors","Data.Array.NonEmpty.Internal":"purescript-arrays","Data.Array.ST.Iterator":"purescript-arrays","Data.Bounded":"purescript-prelude","Data.TraversableWithIndex":"purescript-foldable-traversable","Data.Show":"purescript-prelude","Data.Bifunctor.Clown":"purescript-bifunctors","Data.Foldable":"purescript-foldable-traversable","Control.Apply":"purescript-prelude","Data.Tuple.Nested":"purescript-tuples","Control.Monad":"purescript-prelude","Data.Monoid":"purescript-prelude","Data.Maybe.First":"purescript-maybe","Control.Bind":"purescript-prelude","Data.Monoid.Additive":"purescript-prelude","Data.Symbol":"purescript-prelude","Data.HeytingAlgebra":"purescript-prelude","Control.Alt":"purescript-control","Control.Monad.ST.Internal":"purescript-st","Type.Data.RowList":"purescript-prelude","Effect.Ref":"purescript-refs","Data.Either.Inject":"purescript-either","Data.Ord.Min":"purescript-orders","Data.Ord.Unsafe":"purescript-prelude","Data.Semigroup":"purescript-prelude","Data.Array.NonEmpty":"purescript-arrays","Data.Ord.Down":"purescript-orders","Data.Array.ST.Partial":"purescript-arrays","Effect.Unsafe":"purescript-effect","Data.Tuple":"purescript-tuples","Data.Semigroup.Foldable":"purescript-foldable-traversable","Control.Biapply":"purescript-bifunctors","Data.Distributive":"purescript-distributive","Type.Equality":"purescript-type-equality","Control.Alternative":"purescript-control","Data.Semiring":"purescript-prelude","Effect.Console":"purescript-console","Data.Traversable.Accum":"purescript-foldable-traversable","Data.CommutativeRing":"purescript-prelude","Data.NaturalTransformation":"purescript-prelude","Data.Monoid.Conj":"purescript-prelude","Data.Unfoldable":"purescript-unfoldable","Control.Monad.ST":"purescript-st","Data.Functor":"purescript-prelude","Unsafe.Coerce":"purescript-unsafe-coerce","Control.Category":"purescript-prelude","Data.Maybe":"purescript-maybe","Control.Comonad":"purescript-control","Data.Function":"purescript-prelude","Data.Field":"purescript-prelude","Data.EuclideanRing":"purescript-prelude","Data.Semigroup.Last":"purescript-prelude","Data.Semigroup.First":"purescript-prelude","Data.Functor.Invariant":"purescript-invariant","Prelude":"purescript-prelude","Effect.Class":"purescript-effect","Partial.Unsafe":"purescript-partial","Data.Array":"purescript-arrays","Data.Bifunctor.Product":"purescript-bifunctors","Control.Extend":"purescript-control","Data.Unfoldable1":"purescript-unfoldable","Control.Lazy":"purescript-control","Data.Eq":"purescript-prelude","Data.Either.Nested":"purescript-either","Data.Newtype":"purescript-newtype","Data.Semigroup.Traversable":"purescript-foldable-traversable","Data.Bifunctor":"purescript-bifunctors","Test.Assert":"purescript-assert","Data.Monoid.Disj":"purescript-prelude","Data.Array.Partial":"purescript-arrays","Control.MonadPlus":"purescript-control","Data.Void":"purescript-prelude","Control.MonadZero":"purescript-control","Data.Ord.Max":"purescript-orders","Data.Bifunctor.Joker":"purescript-bifunctors","Data.FunctorWithIndex":"purescript-foldable-traversable","Data.DivisionRing":"purescript-prelude","Data.Bifunctor.Wrap":"purescript-bifunctors","Data.Maybe.Last":"purescript-maybe","Data.Unit":"purescript-prelude","Data.Ordering":"purescript-prelude","Data.Identity":"purescript-identity","Control.Plus":"purescript-control","Partial":"purescript-partial","Data.Monoid.Multiplicative":"purescript-prelude","Data.Array.ST":"purescript-arrays","Control.Semigroupoid":"purescript-prelude","Data.Monoid.Alternate":"purescript-control","Effect.Class.Console":"purescript-console","Data.Bifunctor.Join":"purescript-bifunctors","Data.Bifoldable":"purescript-foldable-traversable","Control.Monad.ST.Ref":"purescript-st","Data.Monoid.Endo":"purescript-prelude","Data.Either":"purescript-either","Control.Applicative":"purescript-prelude","Data.FoldableWithIndex":"purescript-foldable-traversable","Record.Unsafe":"purescript-prelude","Data.Traversable":"purescript-foldable-traversable"},"compilerVersion":"0.11.7"}