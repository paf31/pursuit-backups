{"uploader":"garyb","packageMeta":{"repository":{"url":"git://github.com/paf31/purescript-string-parsers.git","type":"git"},"ignore":["**/.*","bower_components","node_modules","output","tests","bower.json","package.json"],"devDependencies":{"purescript-console":"^2.0.0","purescript-assert":"^2.0.0","purescript-math":"^2.0.0"},"dependencies":{"purescript-control":"^2.0.0","purescript-either":"^2.0.0","purescript-arrays":"^3.0.0","purescript-maybe":"^2.0.1","purescript-foldable-traversable":"^2.0.0","purescript-tailrec":"^2.0.0","purescript-strings":"^2.0.2","purescript-lists":"^3.1.0"},"name":"purescript-string-parsers","keywords":["purescript"],"license":["MIT"],"description":"A parsing library for parsing strings"},"tagTime":"2017-03-01T16:58:17+0000","modules":[{"reExports":[],"name":"Text.Parsing.StringParser","comments":"This module defines the `Parser` type of string parsers, and its instances.\n","declarations":[{"children":[],"comments":"A poition in an input string.\n","title":"Pos","info":{"arguments":[],"declType":"typeSynonym","type":{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}},"sourceSpan":{"start":[14,1],"name":"src/Text/Parsing/StringParser.purs","end":[14,15]}},{"children":[],"comments":"Strings are represented as a string with an index from the\nstart of the string.\n\n`{ str: s, pos: n }` is interpreted as the substring of `s`\nstarting at index n.\n\nThis allows us to avoid repeatedly finding substrings\nevery time we match a character.\n","title":"PosString","info":{"arguments":[],"declType":"typeSynonym","type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Record"]},{"tag":"RCons","contents":["str",{"tag":"TypeConstructor","contents":[["Prim"],"String"]},{"tag":"RCons","contents":["pos",{"tag":"TypeConstructor","contents":[["Text","Parsing","StringParser"],"Pos"]},{"tag":"REmpty","contents":[]}]}]}]}},"sourceSpan":{"start":[24,1],"name":"src/Text/Parsing/StringParser.purs","end":[24,47]}},{"children":[{"comments":null,"title":"ParseError","info":{"arguments":[{"tag":"TypeConstructor","contents":[["Prim"],"String"]}],"declType":"dataConstructor"},"sourceSpan":null},{"comments":null,"title":"showParseError","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Show"],"Show"]},{"tag":"TypeConstructor","contents":[["Text","Parsing","StringParser"],"ParseError"]}]}},"sourceSpan":{"start":[29,1],"name":"src/Text/Parsing/StringParser.purs","end":[30,30]}},{"comments":null,"title":"eqParseError","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Eq"],"Eq"]},{"tag":"TypeConstructor","contents":[["Text","Parsing","StringParser"],"ParseError"]}]}},"sourceSpan":{"start":[32,1],"name":"src/Text/Parsing/StringParser.purs","end":[33,44]}}],"comments":"The type of parsing errors.\n","title":"ParseError","info":{"declType":"data","dataDeclType":"data","typeArguments":[]},"sourceSpan":{"start":[27,1],"name":"src/Text/Parsing/StringParser.purs","end":[27,36]}},{"children":[{"comments":null,"title":"Parser","info":{"arguments":[{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Text","Parsing","StringParser"],"PosString"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Either"],"Either"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Record"]},{"tag":"RCons","contents":["pos",{"tag":"TypeConstructor","contents":[["Text","Parsing","StringParser"],"Pos"]},{"tag":"RCons","contents":["error",{"tag":"TypeConstructor","contents":[["Text","Parsing","StringParser"],"ParseError"]},{"tag":"REmpty","contents":[]}]}]}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Record"]},{"tag":"RCons","contents":["result",{"tag":"TypeVar","contents":"a"},{"tag":"RCons","contents":["suffix",{"tag":"TypeConstructor","contents":[["Text","Parsing","StringParser"],"PosString"]},{"tag":"REmpty","contents":[]}]}]}]}]}]}}],"declType":"dataConstructor"},"sourceSpan":null},{"comments":null,"title":"functorParser","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Functor"],"Functor"]},{"tag":"TypeConstructor","contents":[["Text","Parsing","StringParser"],"Parser"]}]}},"sourceSpan":{"start":[47,1],"name":"src/Text/Parsing/StringParser.purs","end":[48,94]}},{"comments":null,"title":"applyParser","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Apply"],"Apply"]},{"tag":"TypeConstructor","contents":[["Text","Parsing","StringParser"],"Parser"]}]}},"sourceSpan":{"start":[50,1],"name":"src/Text/Parsing/StringParser.purs","end":[54,37]}},{"comments":null,"title":"applicativeParser","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Applicative"],"Applicative"]},{"tag":"TypeConstructor","contents":[["Text","Parsing","StringParser"],"Parser"]}]}},"sourceSpan":{"start":[56,1],"name":"src/Text/Parsing/StringParser.purs","end":[57,55]}},{"comments":null,"title":"altParser","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Alt"],"Alt"]},{"tag":"TypeConstructor","contents":[["Text","Parsing","StringParser"],"Parser"]}]}},"sourceSpan":{"start":[59,1],"name":"src/Text/Parsing/StringParser.purs","end":[64,21]}},{"comments":null,"title":"plusParser","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Plus"],"Plus"]},{"tag":"TypeConstructor","contents":[["Text","Parsing","StringParser"],"Parser"]}]}},"sourceSpan":{"start":[66,1],"name":"src/Text/Parsing/StringParser.purs","end":[69,1]}},{"comments":null,"title":"alternativeParser","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Alternative"],"Alternative"]},{"tag":"TypeConstructor","contents":[["Text","Parsing","StringParser"],"Parser"]}]}},"sourceSpan":{"start":[69,1],"name":"src/Text/Parsing/StringParser.purs","end":[69,49]}},{"comments":null,"title":"bindParser","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Bind"],"Bind"]},{"tag":"TypeConstructor","contents":[["Text","Parsing","StringParser"],"Parser"]}]}},"sourceSpan":{"start":[71,1],"name":"src/Text/Parsing/StringParser.purs","end":[74,31]}},{"comments":null,"title":"monadParser","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad"],"Monad"]},{"tag":"TypeConstructor","contents":[["Text","Parsing","StringParser"],"Parser"]}]}},"sourceSpan":{"start":[76,1],"name":"src/Text/Parsing/StringParser.purs","end":[76,37]}},{"comments":null,"title":"monadZeroParser","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","MonadZero"],"MonadZero"]},{"tag":"TypeConstructor","contents":[["Text","Parsing","StringParser"],"Parser"]}]}},"sourceSpan":{"start":[78,1],"name":"src/Text/Parsing/StringParser.purs","end":[78,45]}},{"comments":null,"title":"monadPlusParser","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","MonadPlus"],"MonadPlus"]},{"tag":"TypeConstructor","contents":[["Text","Parsing","StringParser"],"Parser"]}]}},"sourceSpan":{"start":[80,1],"name":"src/Text/Parsing/StringParser.purs","end":[80,45]}},{"comments":null,"title":"monadRecParser","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad","Rec","Class"],"MonadRec"]},{"tag":"TypeConstructor","contents":[["Text","Parsing","StringParser"],"Parser"]}]}},"sourceSpan":{"start":[82,1],"name":"src/Text/Parsing/StringParser.purs","end":[86,68]}},{"comments":null,"title":"lazyParser","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Lazy"],"Lazy"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Text","Parsing","StringParser"],"Parser"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[88,1],"name":"src/Text/Parsing/StringParser.purs","end":[89,51]}}],"comments":"A parser is represented as a function which takes a pair of\ncontinuations for failure and success.\n","title":"Parser","info":{"declType":"data","dataDeclType":"newtype","typeArguments":[["a",null]]},"sourceSpan":{"start":[37,1],"name":"src/Text/Parsing/StringParser.purs","end":[37,121]}},{"children":[],"comments":"Run a parser by providing success and failure continuations.\n","title":"unParser","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Text","Parsing","StringParser"],"Parser"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Text","Parsing","StringParser"],"PosString"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Either"],"Either"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Record"]},{"tag":"RCons","contents":["pos",{"tag":"TypeConstructor","contents":[["Text","Parsing","StringParser"],"Pos"]},{"tag":"RCons","contents":["error",{"tag":"TypeConstructor","contents":[["Text","Parsing","StringParser"],"ParseError"]},{"tag":"REmpty","contents":[]}]}]}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Record"]},{"tag":"RCons","contents":["result",{"tag":"TypeVar","contents":"a"},{"tag":"RCons","contents":["suffix",{"tag":"TypeConstructor","contents":[["Text","Parsing","StringParser"],"PosString"]},{"tag":"REmpty","contents":[]}]}]}]}]}]}]},null]}},"sourceSpan":{"start":[40,1],"name":"src/Text/Parsing/StringParser.purs","end":[40,127]}},{"children":[],"comments":"Run a parser for an input string, returning either an error or a result.\n","title":"runParser","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Text","Parsing","StringParser"],"Parser"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Either"],"Either"]},{"tag":"TypeConstructor","contents":[["Text","Parsing","StringParser"],"ParseError"]}]},{"tag":"TypeVar","contents":"a"}]}]}]},null]}},"sourceSpan":{"start":[44,1],"name":"src/Text/Parsing/StringParser.purs","end":[44,65]}},{"children":[],"comments":"Fail with the specified message.\n","title":"fail","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Text","Parsing","StringParser"],"Parser"]},{"tag":"TypeVar","contents":"a"}]}]},null]}},"sourceSpan":{"start":[92,1],"name":"src/Text/Parsing/StringParser.purs","end":[92,37]}},{"children":[],"comments":"In case of error, the default behavior is to backtrack if no input was consumed.\n\n`try p` backtracks even if input was consumed.\n","title":"try","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Text","Parsing","StringParser"],"Parser"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Text","Parsing","StringParser"],"Parser"]},{"tag":"TypeVar","contents":"a"}]}]},null]}},"sourceSpan":{"start":[98,1],"name":"src/Text/Parsing/StringParser.purs","end":[98,38]}}]},{"reExports":[{"moduleName":{"package":"purescript-control","item":["Control","Lazy"]},"declarations":[{"children":[],"comments":"`fix` defines a value as the fixed point of a function.\n\nThe `Lazy` instance allows us to generate the result lazily.\n","title":"fix","info":{"declType":"value","type":{"tag":"ForAll","contents":["l",{"tag":"ConstrainedType","contents":[[{"constraintClass":[["Control","Lazy"],"Lazy"],"constraintArgs":[{"tag":"TypeVar","contents":"l"}],"constraintData":null}],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"l"}]},{"tag":"TypeVar","contents":"l"}]}}]},{"tag":"TypeVar","contents":"l"}]}]},null]}},"sourceSpan":{"start":[16,1],"name":"bower_components/purescript-control/src/Control/Lazy.purs","end":[16,41]}}]}],"name":"Text.Parsing.StringParser.Combinators","comments":"This module defines combinators for building string parsers.\n","declarations":[{"children":[],"comments":"Read ahead without consuming input.\n","title":"lookAhead","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Text","Parsing","StringParser"],"Parser"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Text","Parsing","StringParser"],"Parser"]},{"tag":"TypeVar","contents":"a"}]}]},null]}},"sourceSpan":{"start":[42,1],"name":"src/Text/Parsing/StringParser/Combinators.purs","end":[42,44]}},{"children":[],"comments":"Match zero or more times.\n","title":"many","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Text","Parsing","StringParser"],"Parser"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Text","Parsing","StringParser"],"Parser"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","List","Types"],"List"]},{"tag":"TypeVar","contents":"a"}]}}]}]},null]}},"sourceSpan":{"start":[49,1],"name":"src/Text/Parsing/StringParser/Combinators.purs","end":[49,46]}},{"children":[],"comments":"Match one or more times.\n","title":"many1","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Text","Parsing","StringParser"],"Parser"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Text","Parsing","StringParser"],"Parser"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","List","Types"],"List"]},{"tag":"TypeVar","contents":"a"}]}}]}]},null]}},"sourceSpan":{"start":[53,1],"name":"src/Text/Parsing/StringParser/Combinators.purs","end":[53,47]}},{"children":[],"comments":"Provide an error message in case of failure.\n","title":"withError","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Text","Parsing","StringParser"],"Parser"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Text","Parsing","StringParser"],"Parser"]},{"tag":"TypeVar","contents":"a"}]}]}]},null]}},"sourceSpan":{"start":[57,1],"name":"src/Text/Parsing/StringParser/Combinators.purs","end":[57,54]}},{"children":[],"comments":null,"title":"(<?>)","info":{"declType":"alias","alias":[["Text","Parsing","StringParser","Combinators"],{"Right":{"Left":{"Ident":"withError"}}}],"fixity":{"associativity":"infixl","precedence":3}},"sourceSpan":{"start":[60,1],"name":"src/Text/Parsing/StringParser/Combinators.purs","end":[60,26]}},{"children":[],"comments":"Parse a string between opening and closing markers.\n","title":"between","info":{"declType":"value","type":{"tag":"ForAll","contents":["close",{"tag":"ForAll","contents":["open",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Text","Parsing","StringParser"],"Parser"]},{"tag":"TypeVar","contents":"open"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Text","Parsing","StringParser"],"Parser"]},{"tag":"TypeVar","contents":"close"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Text","Parsing","StringParser"],"Parser"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Text","Parsing","StringParser"],"Parser"]},{"tag":"TypeVar","contents":"a"}]}]}]}]},null]},null]},null]}},"sourceSpan":{"start":[63,1],"name":"src/Text/Parsing/StringParser/Combinators.purs","end":[63,84]}},{"children":[],"comments":"Parse a value with a default value in case of failure.\n","title":"option","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Text","Parsing","StringParser"],"Parser"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Text","Parsing","StringParser"],"Parser"]},{"tag":"TypeVar","contents":"a"}]}]}]},null]}},"sourceSpan":{"start":[67,1],"name":"src/Text/Parsing/StringParser/Combinators.purs","end":[67,46]}},{"children":[],"comments":"Attempt to parse a value.\n","title":"optional","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Text","Parsing","StringParser"],"Parser"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Text","Parsing","StringParser"],"Parser"]},{"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}]},null]}},"sourceSpan":{"start":[71,1],"name":"src/Text/Parsing/StringParser/Combinators.purs","end":[71,46]}},{"children":[],"comments":"Attempt to parse a value, pureing `Nothing` in case of failure.\n","title":"optionMaybe","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Text","Parsing","StringParser"],"Parser"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Text","Parsing","StringParser"],"Parser"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeVar","contents":"a"}]}}]}]},null]}},"sourceSpan":{"start":[75,1],"name":"src/Text/Parsing/StringParser/Combinators.purs","end":[75,54]}},{"children":[],"comments":"Parse zero or more separated values.\n","title":"sepBy","info":{"declType":"value","type":{"tag":"ForAll","contents":["sep",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Text","Parsing","StringParser"],"Parser"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Text","Parsing","StringParser"],"Parser"]},{"tag":"TypeVar","contents":"sep"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Text","Parsing","StringParser"],"Parser"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","List","Types"],"List"]},{"tag":"TypeVar","contents":"a"}]}}]}]}]},null]},null]}},"sourceSpan":{"start":[79,1],"name":"src/Text/Parsing/StringParser/Combinators.purs","end":[79,65]}},{"children":[],"comments":"Parse one or more separated values.\n","title":"sepBy1","info":{"declType":"value","type":{"tag":"ForAll","contents":["sep",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Text","Parsing","StringParser"],"Parser"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Text","Parsing","StringParser"],"Parser"]},{"tag":"TypeVar","contents":"sep"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Text","Parsing","StringParser"],"Parser"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","List","Types"],"List"]},{"tag":"TypeVar","contents":"a"}]}}]}]}]},null]},null]}},"sourceSpan":{"start":[83,1],"name":"src/Text/Parsing/StringParser/Combinators.purs","end":[83,66]}},{"children":[],"comments":"Parse zero or more separated values, optionally ending with a separator.\n","title":"sepEndBy","info":{"declType":"value","type":{"tag":"ForAll","contents":["sep",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Text","Parsing","StringParser"],"Parser"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Text","Parsing","StringParser"],"Parser"]},{"tag":"TypeVar","contents":"sep"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Text","Parsing","StringParser"],"Parser"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","List","Types"],"List"]},{"tag":"TypeVar","contents":"a"}]}}]}]}]},null]},null]}},"sourceSpan":{"start":[90,1],"name":"src/Text/Parsing/StringParser/Combinators.purs","end":[90,68]}},{"children":[],"comments":"Parse one or more separated values, optionally ending with a separator.\n","title":"sepEndBy1","info":{"declType":"value","type":{"tag":"ForAll","contents":["sep",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Text","Parsing","StringParser"],"Parser"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Text","Parsing","StringParser"],"Parser"]},{"tag":"TypeVar","contents":"sep"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Text","Parsing","StringParser"],"Parser"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","List","Types"],"List"]},{"tag":"TypeVar","contents":"a"}]}}]}]}]},null]},null]}},"sourceSpan":{"start":[94,1],"name":"src/Text/Parsing/StringParser/Combinators.purs","end":[94,69]}},{"children":[],"comments":"Parse zero or more separated values, ending with a separator.\n","title":"endBy1","info":{"declType":"value","type":{"tag":"ForAll","contents":["sep",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Text","Parsing","StringParser"],"Parser"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Text","Parsing","StringParser"],"Parser"]},{"tag":"TypeVar","contents":"sep"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Text","Parsing","StringParser"],"Parser"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","List","Types"],"List"]},{"tag":"TypeVar","contents":"a"}]}}]}]}]},null]},null]}},"sourceSpan":{"start":[102,1],"name":"src/Text/Parsing/StringParser/Combinators.purs","end":[102,66]}},{"children":[],"comments":"Parse one or more separated values, ending with a separator.\n","title":"endBy","info":{"declType":"value","type":{"tag":"ForAll","contents":["sep",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Text","Parsing","StringParser"],"Parser"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Text","Parsing","StringParser"],"Parser"]},{"tag":"TypeVar","contents":"sep"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Text","Parsing","StringParser"],"Parser"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","List","Types"],"List"]},{"tag":"TypeVar","contents":"a"}]}}]}]}]},null]},null]}},"sourceSpan":{"start":[106,1],"name":"src/Text/Parsing/StringParser/Combinators.purs","end":[106,65]}},{"children":[],"comments":"Parse zero or more values separated by a right-associative operator.\n","title":"chainr","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Text","Parsing","StringParser"],"Parser"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Text","Parsing","StringParser"],"Parser"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"a"}]}]}}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Text","Parsing","StringParser"],"Parser"]},{"tag":"TypeVar","contents":"a"}]}]}]}]},null]}},"sourceSpan":{"start":[110,1],"name":"src/Text/Parsing/StringParser/Combinators.purs","end":[110,70]}},{"children":[],"comments":"Parse zero or more values separated by a left-associative operator.\n","title":"chainl","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Text","Parsing","StringParser"],"Parser"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Text","Parsing","StringParser"],"Parser"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"a"}]}]}}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Text","Parsing","StringParser"],"Parser"]},{"tag":"TypeVar","contents":"a"}]}]}]}]},null]}},"sourceSpan":{"start":[114,1],"name":"src/Text/Parsing/StringParser/Combinators.purs","end":[114,70]}},{"children":[],"comments":"Parse one or more values separated by a left-associative operator.\n","title":"chainl1","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Text","Parsing","StringParser"],"Parser"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Text","Parsing","StringParser"],"Parser"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"a"}]}]}}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Text","Parsing","StringParser"],"Parser"]},{"tag":"TypeVar","contents":"a"}]}]}]},null]}},"sourceSpan":{"start":[118,1],"name":"src/Text/Parsing/StringParser/Combinators.purs","end":[118,66]}},{"children":[],"comments":"Parse one or more values separated by a left-associative operator.\n","title":"chainl1'","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Text","Parsing","StringParser"],"Parser"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Text","Parsing","StringParser"],"Parser"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"a"}]}]}}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Text","Parsing","StringParser"],"Parser"]},{"tag":"TypeVar","contents":"a"}]}]}]}]},null]}},"sourceSpan":{"start":[124,1],"name":"src/Text/Parsing/StringParser/Combinators.purs","end":[124,72]}},{"children":[],"comments":"Parse one or more values separated by a right-associative operator.\n","title":"chainr1","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Text","Parsing","StringParser"],"Parser"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Text","Parsing","StringParser"],"Parser"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"a"}]}]}}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Text","Parsing","StringParser"],"Parser"]},{"tag":"TypeVar","contents":"a"}]}]}]},null]}},"sourceSpan":{"start":[130,1],"name":"src/Text/Parsing/StringParser/Combinators.purs","end":[130,66]}},{"children":[],"comments":"Parse one or more values separated by a right-associative operator.\n","title":"chainr1'","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Text","Parsing","StringParser"],"Parser"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Text","Parsing","StringParser"],"Parser"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"a"}]}]}}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Text","Parsing","StringParser"],"Parser"]},{"tag":"TypeVar","contents":"a"}]}]}]}]},null]}},"sourceSpan":{"start":[136,1],"name":"src/Text/Parsing/StringParser/Combinators.purs","end":[136,72]}},{"children":[],"comments":"Parse using any of a collection of parsers.\n","title":"choice","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["f",{"tag":"ConstrainedType","contents":[[{"constraintClass":[["Data","Foldable"],"Foldable"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}],"constraintData":null}],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Text","Parsing","StringParser"],"Parser"]},{"tag":"TypeVar","contents":"a"}]}}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Text","Parsing","StringParser"],"Parser"]},{"tag":"TypeVar","contents":"a"}]}]}]},null]},null]}},"sourceSpan":{"start":[142,1],"name":"src/Text/Parsing/StringParser/Combinators.purs","end":[142,63]}},{"children":[],"comments":"Parse values until a terminator.\n","title":"manyTill","info":{"declType":"value","type":{"tag":"ForAll","contents":["end",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Text","Parsing","StringParser"],"Parser"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Text","Parsing","StringParser"],"Parser"]},{"tag":"TypeVar","contents":"end"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Text","Parsing","StringParser"],"Parser"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","List","Types"],"List"]},{"tag":"TypeVar","contents":"a"}]}}]}]}]},null]},null]}},"sourceSpan":{"start":[146,1],"name":"src/Text/Parsing/StringParser/Combinators.purs","end":[146,68]}}]},{"reExports":[],"name":"Text.Parsing.StringParser.Expr","comments":"This module defines helper functions for defining parsers using operator tables.\n","declarations":[{"children":[{"comments":null,"title":"AssocNone","info":{"arguments":[],"declType":"dataConstructor"},"sourceSpan":null},{"comments":null,"title":"AssocLeft","info":{"arguments":[],"declType":"dataConstructor"},"sourceSpan":null},{"comments":null,"title":"AssocRight","info":{"arguments":[],"declType":"dataConstructor"},"sourceSpan":null}],"comments":"Operator associativity types.\n","title":"Assoc","info":{"declType":"data","dataDeclType":"data","typeArguments":[]},"sourceSpan":{"start":[19,1],"name":"src/Text/Parsing/StringParser/Expr.purs","end":[19,48]}},{"children":[{"comments":null,"title":"Infix","info":{"arguments":[{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Text","Parsing","StringParser"],"Parser"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"a"}]}]}}]}},{"tag":"TypeConstructor","contents":[["Text","Parsing","StringParser","Expr"],"Assoc"]}],"declType":"dataConstructor"},"sourceSpan":null},{"comments":null,"title":"Prefix","info":{"arguments":[{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Text","Parsing","StringParser"],"Parser"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"a"}]}}]}}],"declType":"dataConstructor"},"sourceSpan":null},{"comments":null,"title":"Postfix","info":{"arguments":[{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Text","Parsing","StringParser"],"Parser"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"a"}]}}]}}],"declType":"dataConstructor"},"sourceSpan":null}],"comments":"Operator types: infix, prefix, postfix.\n","title":"Operator","info":{"declType":"data","dataDeclType":"data","typeArguments":[["a",null]]},"sourceSpan":{"start":[22,1],"name":"src/Text/Parsing/StringParser/Expr.purs","end":[24,44]}},{"children":[],"comments":"An operator table arranges operators into precedence groups.\n","title":"OperatorTable","info":{"arguments":[["a",null]],"declType":"typeSynonym","type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Text","Parsing","StringParser","Expr"],"Operator"]},{"tag":"TypeVar","contents":"a"}]}}]}}]}},"sourceSpan":{"start":[27,1],"name":"src/Text/Parsing/StringParser/Expr.purs","end":[27,50]}},{"children":[],"comments":null,"title":"buildExprParser","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Text","Parsing","StringParser","Expr"],"OperatorTable"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Text","Parsing","StringParser"],"Parser"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Text","Parsing","StringParser"],"Parser"]},{"tag":"TypeVar","contents":"a"}]}]}]},null]}},"sourceSpan":{"start":[36,1],"name":"src/Text/Parsing/StringParser/Expr.purs","end":[36,69]}}]},{"reExports":[],"name":"Text.Parsing.StringParser.String","comments":"Primitive parsers for strings.\n","declarations":[{"children":[],"comments":"Match the end of the file.\n","title":"eof","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Text","Parsing","StringParser"],"Parser"]},{"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}},"sourceSpan":{"start":[36,1],"name":"src/Text/Parsing/StringParser/String.purs","end":[36,19]}},{"children":[],"comments":"Match any character.\n","title":"anyChar","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Text","Parsing","StringParser"],"Parser"]},{"tag":"TypeConstructor","contents":[["Prim"],"Char"]}]}},"sourceSpan":{"start":[43,1],"name":"src/Text/Parsing/StringParser/String.purs","end":[43,23]}},{"children":[],"comments":"Match any digit.\n","title":"anyDigit","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Text","Parsing","StringParser"],"Parser"]},{"tag":"TypeConstructor","contents":[["Prim"],"Char"]}]}},"sourceSpan":{"start":[50,1],"name":"src/Text/Parsing/StringParser/String.purs","end":[50,24]}},{"children":[],"comments":"Match the specified string.\n","title":"string","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Text","Parsing","StringParser"],"Parser"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}]}},"sourceSpan":{"start":[58,1],"name":"src/Text/Parsing/StringParser/String.purs","end":[58,34]}},{"children":[],"comments":"Match a character satisfying the given predicate.\n","title":"satisfy","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Char"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Text","Parsing","StringParser"],"Parser"]},{"tag":"TypeConstructor","contents":[["Prim"],"Char"]}]}]}},"sourceSpan":{"start":[65,1],"name":"src/Text/Parsing/StringParser/String.purs","end":[65,44]}},{"children":[],"comments":"Match the specified character.\n","title":"char","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Char"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Text","Parsing","StringParser"],"Parser"]},{"tag":"TypeConstructor","contents":[["Prim"],"Char"]}]}]}},"sourceSpan":{"start":[73,1],"name":"src/Text/Parsing/StringParser/String.purs","end":[73,28]}},{"children":[],"comments":"Match many whitespace characters.\n","title":"whiteSpace","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Text","Parsing","StringParser"],"Parser"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}},"sourceSpan":{"start":[77,1],"name":"src/Text/Parsing/StringParser/String.purs","end":[77,28]}},{"children":[],"comments":"Skip many whitespace characters.\n","title":"skipSpaces","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Text","Parsing","StringParser"],"Parser"]},{"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}},"sourceSpan":{"start":[83,1],"name":"src/Text/Parsing/StringParser/String.purs","end":[83,26]}},{"children":[],"comments":"Match one of the characters in the foldable structure.\n","title":"oneOf","info":{"declType":"value","type":{"tag":"ForAll","contents":["f",{"tag":"ConstrainedType","contents":[[{"constraintClass":[["Data","Foldable"],"Foldable"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}],"constraintData":null}],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeConstructor","contents":[["Prim"],"Char"]}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Text","Parsing","StringParser"],"Parser"]},{"tag":"TypeConstructor","contents":[["Prim"],"Char"]}]}]}]},null]}},"sourceSpan":{"start":[87,1],"name":"src/Text/Parsing/StringParser/String.purs","end":[87,57]}},{"children":[],"comments":"Match any character not in the foldable structure.\n","title":"noneOf","info":{"declType":"value","type":{"tag":"ForAll","contents":["f",{"tag":"ConstrainedType","contents":[[{"constraintClass":[["Data","Foldable"],"Foldable"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}],"constraintData":null}],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeConstructor","contents":[["Prim"],"Char"]}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Text","Parsing","StringParser"],"Parser"]},{"tag":"TypeConstructor","contents":[["Prim"],"Char"]}]}]}]},null]}},"sourceSpan":{"start":[91,1],"name":"src/Text/Parsing/StringParser/String.purs","end":[91,58]}},{"children":[],"comments":"Match any lower case character.\n","title":"lowerCaseChar","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Text","Parsing","StringParser"],"Parser"]},{"tag":"TypeConstructor","contents":[["Prim"],"Char"]}]}},"sourceSpan":{"start":[95,1],"name":"src/Text/Parsing/StringParser/String.purs","end":[95,29]}},{"children":[],"comments":"Match any upper case character.\n","title":"upperCaseChar","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Text","Parsing","StringParser"],"Parser"]},{"tag":"TypeConstructor","contents":[["Prim"],"Char"]}]}},"sourceSpan":{"start":[103,1],"name":"src/Text/Parsing/StringParser/String.purs","end":[103,29]}},{"children":[],"comments":"Match any letter.\n","title":"anyLetter","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Text","Parsing","StringParser"],"Parser"]},{"tag":"TypeConstructor","contents":[["Prim"],"Char"]}]}},"sourceSpan":{"start":[111,1],"name":"src/Text/Parsing/StringParser/String.purs","end":[111,25]}},{"children":[],"comments":"Match a letter or a number.\n","title":"alphaNum","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Text","Parsing","StringParser"],"Parser"]},{"tag":"TypeConstructor","contents":[["Prim"],"Char"]}]}},"sourceSpan":{"start":[115,1],"name":"src/Text/Parsing/StringParser/String.purs","end":[115,24]}},{"children":[],"comments":"match the regular expression\n","title":"regex","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Text","Parsing","StringParser"],"Parser"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}]}},"sourceSpan":{"start":[119,1],"name":"src/Text/Parsing/StringParser/String.purs","end":[119,33]}}]}],"resolvedDependencies":{"purescript-proxy":"1.0.0","purescript-newtype":"1.3.0","purescript-control":"2.0.0","purescript-console":"2.0.0","purescript-either":"2.1.0","purescript-arrays":"3.2.1","purescript-maybe":"2.0.1","purescript-unfoldable":"2.0.0","purescript-invariant":"2.0.0","purescript-lazy":"2.0.0","purescript-monoid":"2.2.0","purescript-foldable-traversable":"2.2.0","purescript-tailrec":"2.0.2","purescript-prelude":"2.4.0","purescript-st":"2.0.0","purescript-bifunctors":"2.0.0","purescript-nonempty":"3.0.0","purescript-assert":"2.0.0","purescript-generics":"3.3.0","purescript-unsafe-coerce":"2.0.0","purescript-eff":"2.0.0","purescript-math":"2.0.0","purescript-tuples":"3.1.0","purescript-partial":"1.2.0","purescript-strings":"2.1.0","purescript-identity":"2.0.0","purescript-lists":"3.4.0"},"version":"2.1.0","github":["paf31","purescript-string-parsers"],"versionTag":"v2.1.0","moduleMap":{"Data.BooleanAlgebra":"purescript-prelude","Data.Ring":"purescript-prelude","Data.NonEmpty":"purescript-nonempty","Data.Generic":"purescript-generics","Control.Monad.Eff.Unsafe":"purescript-eff","Data.Bifunctor.Flip":"purescript-bifunctors","Data.Ord":"purescript-prelude","Data.Monoid.Dual":"purescript-monoid","Control.Monad.Rec.Class":"purescript-tailrec","Data.Bitraversable":"purescript-foldable-traversable","Data.Boolean":"purescript-prelude","Control.Biapplicative":"purescript-bifunctors","Type.Proxy":"purescript-proxy","Data.Array.ST.Iterator":"purescript-arrays","Data.Bounded":"purescript-prelude","Data.Show":"purescript-prelude","Data.Bifunctor.Clown":"purescript-bifunctors","Data.Foldable":"purescript-foldable-traversable","Control.Apply":"purescript-prelude","Data.Tuple.Nested":"purescript-tuples","Control.Monad":"purescript-prelude","Data.Lazy":"purescript-lazy","Data.Monoid":"purescript-monoid","Data.Maybe.First":"purescript-maybe","Control.Bind":"purescript-prelude","Data.Monoid.Additive":"purescript-monoid","Data.String.Regex":"purescript-strings","Data.HeytingAlgebra":"purescript-prelude","Control.Alt":"purescript-control","Data.List.ZipList":"purescript-lists","Data.Ord.Unsafe":"purescript-prelude","Data.Semigroup":"purescript-prelude","Control.Monad.Eff":"purescript-eff","Data.Tuple":"purescript-tuples","Control.Biapply":"purescript-bifunctors","Control.Alternative":"purescript-control","Data.Semiring":"purescript-prelude","Data.CommutativeRing":"purescript-prelude","Data.NaturalTransformation":"purescript-prelude","Data.Monoid.Conj":"purescript-monoid","Data.Unfoldable":"purescript-unfoldable","Control.Monad.ST":"purescript-st","Data.List.Types":"purescript-lists","Data.Functor":"purescript-prelude","Unsafe.Coerce":"purescript-unsafe-coerce","Data.List.Lazy.Types":"purescript-lists","Control.Category":"purescript-prelude","Data.Maybe":"purescript-maybe","Data.String.Regex.Unsafe":"purescript-strings","Control.Comonad":"purescript-control","Data.Function":"purescript-prelude","Data.List":"purescript-lists","Data.Field":"purescript-prelude","Data.List.Lazy":"purescript-lists","Data.EuclideanRing":"purescript-prelude","Data.Functor.Invariant":"purescript-invariant","Data.String.Unsafe":"purescript-strings","Prelude":"purescript-prelude","Partial.Unsafe":"purescript-partial","Data.Array":"purescript-arrays","Data.Bifunctor.Product":"purescript-bifunctors","Control.Extend":"purescript-control","Control.Lazy":"purescript-control","Data.Eq":"purescript-prelude","Data.Either.Nested":"purescript-either","Data.Newtype":"purescript-newtype","Control.Monad.Eff.Console":"purescript-console","Data.Bifunctor":"purescript-bifunctors","Test.Assert":"purescript-assert","Data.Monoid.Disj":"purescript-monoid","Data.Array.Partial":"purescript-arrays","Data.String.CaseInsensitive":"purescript-strings","Control.MonadPlus":"purescript-control","Data.Void":"purescript-prelude","Control.MonadZero":"purescript-control","Data.Bifunctor.Joker":"purescript-bifunctors","Data.Bifunctor.Wrap":"purescript-bifunctors","Data.Maybe.Last":"purescript-maybe","Data.Unit":"purescript-prelude","Data.List.NonEmpty":"purescript-lists","Data.List.Lazy.NonEmpty":"purescript-lists","Data.Ordering":"purescript-prelude","Data.Identity":"purescript-identity","Math":"purescript-math","Data.String":"purescript-strings","Control.Plus":"purescript-control","Control.Monad.Eff.Class":"purescript-eff","Partial":"purescript-partial","Data.Monoid.Multiplicative":"purescript-monoid","Data.Array.ST":"purescript-arrays","Control.Semigroupoid":"purescript-prelude","Data.Monoid.Alternate":"purescript-monoid","Data.Char":"purescript-strings","Data.Bifunctor.Join":"purescript-bifunctors","Data.Bifoldable":"purescript-foldable-traversable","Data.Monoid.Endo":"purescript-monoid","Data.List.Partial":"purescript-lists","Data.String.Regex.Flags":"purescript-strings","Data.Either":"purescript-either","Control.Applicative":"purescript-prelude","Data.Traversable":"purescript-foldable-traversable"},"compilerVersion":"0.10.7"}