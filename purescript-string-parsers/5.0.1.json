{"uploader":"hdgarrood","packageMeta":{"repository":{"url":"git://github.com/paf31/purescript-string-parsers.git","type":"git"},"ignore":["**/.*","bower_components","node_modules","output","tests","bower.json","package.json"],"devDependencies":{"purescript-console":"^4.1.0","purescript-assert":"^4.0.0","purescript-math":"^2.1.1","purescript-psci-support":"^4.0.0"},"dependencies":{"purescript-control":"^4.0.0","purescript-either":"^4.0.0","purescript-arrays":"^5.0.0","purescript-maybe":"^4.0.0","purescript-foldable-traversable":"^4.0.0","purescript-tailrec":"^4.0.0","purescript-prelude":"^4.0.0","purescript-bifunctors":"^4.0.0","purescript-strings":"^4.0.0","purescript-lists":"^5.0.0"},"name":"purescript-string-parsers","keywords":["purescript"],"license":["MIT"],"description":"A parsing library for parsing strings"},"tagTime":"2019-10-16T15:27:04+0000","modules":[{"reExports":[],"name":"Text.Parsing.StringParser","comments":"This module defines the `Parser` type of string parsers, and its instances.\n","declarations":[{"children":[],"comments":"A position in an input string.\n","title":"Pos","info":{"arguments":[],"declType":"typeSynonym","type":{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Int"]}},"sourceSpan":{"start":[16,1],"name":"/home/harry-lumi/code/purescript-string-parsers/src/Text/Parsing/StringParser.purs","end":[16,15]}},{"children":[],"comments":"Strings are represented as a string with an index from the\nstart of the string.\n\n`{ str: s, pos: n }` is interpreted as the substring of `s`\nstarting at index n.\n\nThis allows us to avoid repeatedly finding substrings\nevery time we match a character.\n","title":"PosString","info":{"arguments":[],"declType":"typeSynonym","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Record"]},{"annotation":[],"tag":"RCons","contents":["str",{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"String"]},{"annotation":[],"tag":"RCons","contents":["pos",{"annotation":[],"tag":"TypeConstructor","contents":[["Text","Parsing","StringParser"],"Pos"]},{"annotation":[],"tag":"REmpty"}]}]}]}},"sourceSpan":{"start":[26,1],"name":"/home/harry-lumi/code/purescript-string-parsers/src/Text/Parsing/StringParser.purs","end":[26,47]}},{"children":[{"comments":null,"title":"ParseError","info":{"arguments":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"String"]}],"declType":"dataConstructor"},"sourceSpan":null},{"comments":null,"title":"showParseError","info":{"declType":"instance","dependencies":[],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Show"],"Show"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Text","Parsing","StringParser"],"ParseError"]}]}},"sourceSpan":{"start":[31,1],"name":"/home/harry-lumi/code/purescript-string-parsers/src/Text/Parsing/StringParser.purs","end":[32,30]}},{"comments":null,"title":"eqParseError","info":{"declType":"instance","dependencies":[],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Eq"],"Eq"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Text","Parsing","StringParser"],"ParseError"]}]}},"sourceSpan":{"start":[34,1],"name":"/home/harry-lumi/code/purescript-string-parsers/src/Text/Parsing/StringParser.purs","end":[34,46]}},{"comments":null,"title":"ordParseError","info":{"declType":"instance","dependencies":[],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Ord"],"Ord"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Text","Parsing","StringParser"],"ParseError"]}]}},"sourceSpan":{"start":[36,1],"name":"/home/harry-lumi/code/purescript-string-parsers/src/Text/Parsing/StringParser.purs","end":[36,48]}}],"comments":"The type of parsing errors.\n","title":"ParseError","info":{"declType":"data","dataDeclType":"data","typeArguments":[]},"sourceSpan":{"start":[29,1],"name":"/home/harry-lumi/code/purescript-string-parsers/src/Text/Parsing/StringParser.purs","end":[29,36]}},{"children":[{"comments":null,"title":"Parser","info":{"arguments":[{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Text","Parsing","StringParser"],"PosString"]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Either"],"Either"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Record"]},{"annotation":[],"tag":"RCons","contents":["pos",{"annotation":[],"tag":"TypeConstructor","contents":[["Text","Parsing","StringParser"],"Pos"]},{"annotation":[],"tag":"RCons","contents":["error",{"annotation":[],"tag":"TypeConstructor","contents":[["Text","Parsing","StringParser"],"ParseError"]},{"annotation":[],"tag":"REmpty"}]}]}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Record"]},{"annotation":[],"tag":"RCons","contents":["result",{"annotation":[],"tag":"TypeVar","contents":"a"},{"annotation":[],"tag":"RCons","contents":["suffix",{"annotation":[],"tag":"TypeConstructor","contents":[["Text","Parsing","StringParser"],"PosString"]},{"annotation":[],"tag":"REmpty"}]}]}]}]}]}}],"declType":"dataConstructor"},"sourceSpan":null},{"comments":null,"title":"functorParser","info":{"declType":"instance","dependencies":[],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Functor"],"Functor"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Text","Parsing","StringParser"],"Parser"]}]}},"sourceSpan":{"start":[50,1],"name":"/home/harry-lumi/code/purescript-string-parsers/src/Text/Parsing/StringParser.purs","end":[51,94]}},{"comments":null,"title":"applyParser","info":{"declType":"instance","dependencies":[],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Control","Apply"],"Apply"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Text","Parsing","StringParser"],"Parser"]}]}},"sourceSpan":{"start":[53,1],"name":"/home/harry-lumi/code/purescript-string-parsers/src/Text/Parsing/StringParser.purs","end":[57,37]}},{"comments":null,"title":"applicativeParser","info":{"declType":"instance","dependencies":[],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Control","Applicative"],"Applicative"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Text","Parsing","StringParser"],"Parser"]}]}},"sourceSpan":{"start":[59,1],"name":"/home/harry-lumi/code/purescript-string-parsers/src/Text/Parsing/StringParser.purs","end":[60,55]}},{"comments":null,"title":"altParser","info":{"declType":"instance","dependencies":[],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Control","Alt"],"Alt"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Text","Parsing","StringParser"],"Parser"]}]}},"sourceSpan":{"start":[62,1],"name":"/home/harry-lumi/code/purescript-string-parsers/src/Text/Parsing/StringParser.purs","end":[67,21]}},{"comments":null,"title":"plusParser","info":{"declType":"instance","dependencies":[],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Control","Plus"],"Plus"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Text","Parsing","StringParser"],"Parser"]}]}},"sourceSpan":{"start":[69,1],"name":"/home/harry-lumi/code/purescript-string-parsers/src/Text/Parsing/StringParser.purs","end":[70,32]}},{"comments":null,"title":"alternativeParser","info":{"declType":"instance","dependencies":[],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Control","Alternative"],"Alternative"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Text","Parsing","StringParser"],"Parser"]}]}},"sourceSpan":{"start":[72,1],"name":"/home/harry-lumi/code/purescript-string-parsers/src/Text/Parsing/StringParser.purs","end":[72,49]}},{"comments":null,"title":"bindParser","info":{"declType":"instance","dependencies":[],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Control","Bind"],"Bind"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Text","Parsing","StringParser"],"Parser"]}]}},"sourceSpan":{"start":[74,1],"name":"/home/harry-lumi/code/purescript-string-parsers/src/Text/Parsing/StringParser.purs","end":[77,31]}},{"comments":null,"title":"monadParser","info":{"declType":"instance","dependencies":[],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Control","Monad"],"Monad"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Text","Parsing","StringParser"],"Parser"]}]}},"sourceSpan":{"start":[79,1],"name":"/home/harry-lumi/code/purescript-string-parsers/src/Text/Parsing/StringParser.purs","end":[79,37]}},{"comments":null,"title":"monadZeroParser","info":{"declType":"instance","dependencies":[],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Control","MonadZero"],"MonadZero"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Text","Parsing","StringParser"],"Parser"]}]}},"sourceSpan":{"start":[81,1],"name":"/home/harry-lumi/code/purescript-string-parsers/src/Text/Parsing/StringParser.purs","end":[81,45]}},{"comments":null,"title":"monadPlusParser","info":{"declType":"instance","dependencies":[],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Control","MonadPlus"],"MonadPlus"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Text","Parsing","StringParser"],"Parser"]}]}},"sourceSpan":{"start":[83,1],"name":"/home/harry-lumi/code/purescript-string-parsers/src/Text/Parsing/StringParser.purs","end":[83,45]}},{"comments":null,"title":"monadRecParser","info":{"declType":"instance","dependencies":[],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Control","Monad","Rec","Class"],"MonadRec"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Text","Parsing","StringParser"],"Parser"]}]}},"sourceSpan":{"start":[85,1],"name":"/home/harry-lumi/code/purescript-string-parsers/src/Text/Parsing/StringParser.purs","end":[89,68]}},{"comments":null,"title":"lazyParser","info":{"declType":"instance","dependencies":[],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Control","Lazy"],"Lazy"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Text","Parsing","StringParser"],"Parser"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[91,1],"name":"/home/harry-lumi/code/purescript-string-parsers/src/Text/Parsing/StringParser.purs","end":[92,51]}},{"comments":null,"title":"semigroupParser","info":{"declType":"instance","dependencies":[{"constraintAnn":[],"constraintClass":[["Data","Semigroup"],"Semigroup"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"a"}],"constraintData":null}],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Semigroup"],"Semigroup"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Text","Parsing","StringParser"],"Parser"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[104,1],"name":"/home/harry-lumi/code/purescript-string-parsers/src/Text/Parsing/StringParser.purs","end":[105,24]}}],"comments":"A parser is represented as a function which takes a pair of\ncontinuations for failure and success.\n","title":"Parser","info":{"declType":"data","dataDeclType":"newtype","typeArguments":[["a",null]]},"sourceSpan":{"start":[40,1],"name":"/home/harry-lumi/code/purescript-string-parsers/src/Text/Parsing/StringParser.purs","end":[40,121]}},{"children":[],"comments":"Run a parser by providing success and failure continuations.\n","title":"unParser","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["a",{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Text","Parsing","StringParser"],"Parser"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Text","Parsing","StringParser"],"PosString"]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Either"],"Either"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Record"]},{"annotation":[],"tag":"RCons","contents":["pos",{"annotation":[],"tag":"TypeConstructor","contents":[["Text","Parsing","StringParser"],"Pos"]},{"annotation":[],"tag":"RCons","contents":["error",{"annotation":[],"tag":"TypeConstructor","contents":[["Text","Parsing","StringParser"],"ParseError"]},{"annotation":[],"tag":"REmpty"}]}]}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Record"]},{"annotation":[],"tag":"RCons","contents":["result",{"annotation":[],"tag":"TypeVar","contents":"a"},{"annotation":[],"tag":"RCons","contents":["suffix",{"annotation":[],"tag":"TypeConstructor","contents":[["Text","Parsing","StringParser"],"PosString"]},{"annotation":[],"tag":"REmpty"}]}]}]}]}]}]},null]}},"sourceSpan":{"start":[43,1],"name":"/home/harry-lumi/code/purescript-string-parsers/src/Text/Parsing/StringParser.purs","end":[43,127]}},{"children":[],"comments":"Run a parser for an input string, returning either an error or a result.\n","title":"runParser","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["a",{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Text","Parsing","StringParser"],"Parser"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Either"],"Either"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Text","Parsing","StringParser"],"ParseError"]}]},{"annotation":[],"tag":"TypeVar","contents":"a"}]}]}]},null]}},"sourceSpan":{"start":[47,1],"name":"/home/harry-lumi/code/purescript-string-parsers/src/Text/Parsing/StringParser.purs","end":[47,65]}},{"children":[],"comments":"Fail with the specified message.\n","title":"fail","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["a",{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Text","Parsing","StringParser"],"Parser"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]}]},null]}},"sourceSpan":{"start":[95,1],"name":"/home/harry-lumi/code/purescript-string-parsers/src/Text/Parsing/StringParser.purs","end":[95,37]}},{"children":[],"comments":"In case of error, the default behavior is to backtrack if no input was consumed.\n\n`try p` backtracks even if input was consumed.\n","title":"try","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["a",{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Text","Parsing","StringParser"],"Parser"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Text","Parsing","StringParser"],"Parser"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]}]},null]}},"sourceSpan":{"start":[101,1],"name":"/home/harry-lumi/code/purescript-string-parsers/src/Text/Parsing/StringParser.purs","end":[101,38]}}]},{"reExports":[],"name":"Text.Parsing.StringParser.CodePoints","comments":"Primitive parsers for strings, parsing based on code points.\n\nThese functions will be much slower than the `CodeUnits` alternatives, but\nwill behave correctly in the presence of Unicode characters made up of\nmultiple code units.\n","declarations":[{"children":[],"comments":"Match the end of the file.\n","title":"eof","info":{"declType":"value","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Text","Parsing","StringParser"],"Parser"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}},"sourceSpan":{"start":[43,1],"name":"/home/harry-lumi/code/purescript-string-parsers/src/Text/Parsing/StringParser/CodePoints.purs","end":[43,19]}},{"children":[],"comments":"Match any character.\n","title":"anyChar","info":{"declType":"value","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Text","Parsing","StringParser"],"Parser"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Char"]}]}},"sourceSpan":{"start":[50,1],"name":"/home/harry-lumi/code/purescript-string-parsers/src/Text/Parsing/StringParser/CodePoints.purs","end":[50,23]}},{"children":[],"comments":"Match any digit.\n","title":"anyDigit","info":{"declType":"value","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Text","Parsing","StringParser"],"Parser"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Char"]}]}},"sourceSpan":{"start":[61,1],"name":"/home/harry-lumi/code/purescript-string-parsers/src/Text/Parsing/StringParser/CodePoints.purs","end":[61,24]}},{"children":[],"comments":"Match the specified string.\n","title":"string","info":{"declType":"value","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Text","Parsing","StringParser"],"Parser"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}]}},"sourceSpan":{"start":[69,1],"name":"/home/harry-lumi/code/purescript-string-parsers/src/Text/Parsing/StringParser/CodePoints.purs","end":[69,34]}},{"children":[],"comments":"Match a character satisfying the given predicate.\n","title":"satisfy","info":{"declType":"value","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Char"]}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Text","Parsing","StringParser"],"Parser"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Char"]}]}]}},"sourceSpan":{"start":[76,1],"name":"/home/harry-lumi/code/purescript-string-parsers/src/Text/Parsing/StringParser/CodePoints.purs","end":[76,44]}},{"children":[],"comments":"Match the specified character.\n","title":"char","info":{"declType":"value","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Char"]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Text","Parsing","StringParser"],"Parser"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Char"]}]}]}},"sourceSpan":{"start":[84,1],"name":"/home/harry-lumi/code/purescript-string-parsers/src/Text/Parsing/StringParser/CodePoints.purs","end":[84,28]}},{"children":[],"comments":"Match many whitespace characters.\n","title":"whiteSpace","info":{"declType":"value","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Text","Parsing","StringParser"],"Parser"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}},"sourceSpan":{"start":[88,1],"name":"/home/harry-lumi/code/purescript-string-parsers/src/Text/Parsing/StringParser/CodePoints.purs","end":[88,28]}},{"children":[],"comments":"Skip many whitespace characters.\n","title":"skipSpaces","info":{"declType":"value","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Text","Parsing","StringParser"],"Parser"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}},"sourceSpan":{"start":[94,1],"name":"/home/harry-lumi/code/purescript-string-parsers/src/Text/Parsing/StringParser/CodePoints.purs","end":[94,26]}},{"children":[],"comments":"Match one of the characters in the foldable structure.\n","title":"oneOf","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["f",{"annotation":[],"tag":"ConstrainedType","contents":[{"constraintAnn":[],"constraintClass":[["Data","Foldable"],"Foldable"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"f"}],"constraintData":null},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeVar","contents":"f"},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Char"]}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Text","Parsing","StringParser"],"Parser"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Char"]}]}]}]},null]}},"sourceSpan":{"start":[98,1],"name":"/home/harry-lumi/code/purescript-string-parsers/src/Text/Parsing/StringParser/CodePoints.purs","end":[98,55]}},{"children":[],"comments":"Match any character not in the foldable structure.\n","title":"noneOf","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["f",{"annotation":[],"tag":"ConstrainedType","contents":[{"constraintAnn":[],"constraintClass":[["Data","Foldable"],"Foldable"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"f"}],"constraintData":null},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeVar","contents":"f"},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Char"]}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Text","Parsing","StringParser"],"Parser"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Char"]}]}]}]},null]}},"sourceSpan":{"start":[102,1],"name":"/home/harry-lumi/code/purescript-string-parsers/src/Text/Parsing/StringParser/CodePoints.purs","end":[102,56]}},{"children":[],"comments":"Match any lower case character.\n","title":"lowerCaseChar","info":{"declType":"value","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Text","Parsing","StringParser"],"Parser"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Char"]}]}},"sourceSpan":{"start":[106,1],"name":"/home/harry-lumi/code/purescript-string-parsers/src/Text/Parsing/StringParser/CodePoints.purs","end":[106,29]}},{"children":[],"comments":"Match any upper case character.\n","title":"upperCaseChar","info":{"declType":"value","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Text","Parsing","StringParser"],"Parser"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Char"]}]}},"sourceSpan":{"start":[114,1],"name":"/home/harry-lumi/code/purescript-string-parsers/src/Text/Parsing/StringParser/CodePoints.purs","end":[114,29]}},{"children":[],"comments":"Match any letter.\n","title":"anyLetter","info":{"declType":"value","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Text","Parsing","StringParser"],"Parser"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Char"]}]}},"sourceSpan":{"start":[122,1],"name":"/home/harry-lumi/code/purescript-string-parsers/src/Text/Parsing/StringParser/CodePoints.purs","end":[122,25]}},{"children":[],"comments":"Match a letter or a number.\n","title":"alphaNum","info":{"declType":"value","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Text","Parsing","StringParser"],"Parser"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Char"]}]}},"sourceSpan":{"start":[126,1],"name":"/home/harry-lumi/code/purescript-string-parsers/src/Text/Parsing/StringParser/CodePoints.purs","end":[126,24]}},{"children":[],"comments":"match the regular expression\n","title":"regex","info":{"declType":"value","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Text","Parsing","StringParser"],"Parser"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}]}},"sourceSpan":{"start":[130,1],"name":"/home/harry-lumi/code/purescript-string-parsers/src/Text/Parsing/StringParser/CodePoints.purs","end":[130,33]}}]},{"reExports":[],"name":"Text.Parsing.StringParser.CodeUnits","comments":"Primitive parsers for strings, parsing based on code units.\n\nThese functions will be much faster than the `CodePoints` alternatives, but\nwill behave incorrectly when dealing with Unicode characters that consist\nof multiple code units.\n","declarations":[{"children":[],"comments":"Match the end of the file.\n","title":"eof","info":{"declType":"value","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Text","Parsing","StringParser"],"Parser"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}},"sourceSpan":{"start":[42,1],"name":"/home/harry-lumi/code/purescript-string-parsers/src/Text/Parsing/StringParser/CodeUnits.purs","end":[42,19]}},{"children":[],"comments":"Match any character.\n","title":"anyChar","info":{"declType":"value","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Text","Parsing","StringParser"],"Parser"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Char"]}]}},"sourceSpan":{"start":[49,1],"name":"/home/harry-lumi/code/purescript-string-parsers/src/Text/Parsing/StringParser/CodeUnits.purs","end":[49,23]}},{"children":[],"comments":"Match any digit.\n","title":"anyDigit","info":{"declType":"value","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Text","Parsing","StringParser"],"Parser"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Char"]}]}},"sourceSpan":{"start":[56,1],"name":"/home/harry-lumi/code/purescript-string-parsers/src/Text/Parsing/StringParser/CodeUnits.purs","end":[56,24]}},{"children":[],"comments":"Match the specified string.\n","title":"string","info":{"declType":"value","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Text","Parsing","StringParser"],"Parser"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}]}},"sourceSpan":{"start":[64,1],"name":"/home/harry-lumi/code/purescript-string-parsers/src/Text/Parsing/StringParser/CodeUnits.purs","end":[64,34]}},{"children":[],"comments":"Match a character satisfying the given predicate.\n","title":"satisfy","info":{"declType":"value","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Char"]}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Text","Parsing","StringParser"],"Parser"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Char"]}]}]}},"sourceSpan":{"start":[71,1],"name":"/home/harry-lumi/code/purescript-string-parsers/src/Text/Parsing/StringParser/CodeUnits.purs","end":[71,44]}},{"children":[],"comments":"Match the specified character.\n","title":"char","info":{"declType":"value","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Char"]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Text","Parsing","StringParser"],"Parser"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Char"]}]}]}},"sourceSpan":{"start":[79,1],"name":"/home/harry-lumi/code/purescript-string-parsers/src/Text/Parsing/StringParser/CodeUnits.purs","end":[79,28]}},{"children":[],"comments":"Match many whitespace characters.\n","title":"whiteSpace","info":{"declType":"value","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Text","Parsing","StringParser"],"Parser"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}},"sourceSpan":{"start":[83,1],"name":"/home/harry-lumi/code/purescript-string-parsers/src/Text/Parsing/StringParser/CodeUnits.purs","end":[83,28]}},{"children":[],"comments":"Skip many whitespace characters.\n","title":"skipSpaces","info":{"declType":"value","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Text","Parsing","StringParser"],"Parser"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}},"sourceSpan":{"start":[89,1],"name":"/home/harry-lumi/code/purescript-string-parsers/src/Text/Parsing/StringParser/CodeUnits.purs","end":[89,26]}},{"children":[],"comments":"Match one of the characters in the foldable structure.\n","title":"oneOf","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["f",{"annotation":[],"tag":"ConstrainedType","contents":[{"constraintAnn":[],"constraintClass":[["Data","Foldable"],"Foldable"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"f"}],"constraintData":null},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeVar","contents":"f"},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Char"]}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Text","Parsing","StringParser"],"Parser"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Char"]}]}]}]},null]}},"sourceSpan":{"start":[93,1],"name":"/home/harry-lumi/code/purescript-string-parsers/src/Text/Parsing/StringParser/CodeUnits.purs","end":[93,55]}},{"children":[],"comments":"Match any character not in the foldable structure.\n","title":"noneOf","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["f",{"annotation":[],"tag":"ConstrainedType","contents":[{"constraintAnn":[],"constraintClass":[["Data","Foldable"],"Foldable"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"f"}],"constraintData":null},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeVar","contents":"f"},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Char"]}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Text","Parsing","StringParser"],"Parser"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Char"]}]}]}]},null]}},"sourceSpan":{"start":[97,1],"name":"/home/harry-lumi/code/purescript-string-parsers/src/Text/Parsing/StringParser/CodeUnits.purs","end":[97,56]}},{"children":[],"comments":"Match any lower case character.\n","title":"lowerCaseChar","info":{"declType":"value","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Text","Parsing","StringParser"],"Parser"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Char"]}]}},"sourceSpan":{"start":[101,1],"name":"/home/harry-lumi/code/purescript-string-parsers/src/Text/Parsing/StringParser/CodeUnits.purs","end":[101,29]}},{"children":[],"comments":"Match any upper case character.\n","title":"upperCaseChar","info":{"declType":"value","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Text","Parsing","StringParser"],"Parser"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Char"]}]}},"sourceSpan":{"start":[109,1],"name":"/home/harry-lumi/code/purescript-string-parsers/src/Text/Parsing/StringParser/CodeUnits.purs","end":[109,29]}},{"children":[],"comments":"Match any letter.\n","title":"anyLetter","info":{"declType":"value","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Text","Parsing","StringParser"],"Parser"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Char"]}]}},"sourceSpan":{"start":[117,1],"name":"/home/harry-lumi/code/purescript-string-parsers/src/Text/Parsing/StringParser/CodeUnits.purs","end":[117,25]}},{"children":[],"comments":"Match a letter or a number.\n","title":"alphaNum","info":{"declType":"value","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Text","Parsing","StringParser"],"Parser"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Char"]}]}},"sourceSpan":{"start":[121,1],"name":"/home/harry-lumi/code/purescript-string-parsers/src/Text/Parsing/StringParser/CodeUnits.purs","end":[121,24]}},{"children":[],"comments":"match the regular expression\n","title":"regex","info":{"declType":"value","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Text","Parsing","StringParser"],"Parser"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}]}},"sourceSpan":{"start":[125,1],"name":"/home/harry-lumi/code/purescript-string-parsers/src/Text/Parsing/StringParser/CodeUnits.purs","end":[125,33]}}]},{"reExports":[{"moduleName":{"package":"purescript-control","item":["Control","Lazy"]},"declarations":[{"children":[],"comments":"`fix` defines a value as the fixed point of a function.\n\nThe `Lazy` instance allows us to generate the result lazily.\n","title":"fix","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["l",{"annotation":[],"tag":"ConstrainedType","contents":[{"constraintAnn":[],"constraintClass":[["Control","Lazy"],"Lazy"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"l"}],"constraintData":null},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeVar","contents":"l"}]},{"annotation":[],"tag":"TypeVar","contents":"l"}]}}]},{"annotation":[],"tag":"TypeVar","contents":"l"}]}]},null]}},"sourceSpan":{"start":[22,1],"name":"bower_components/purescript-control/src/Control/Lazy.purs","end":[22,41]}}]}],"name":"Text.Parsing.StringParser.Combinators","comments":"This module defines combinators for building string parsers.\n","declarations":[{"children":[],"comments":"Read ahead without consuming input.\n","title":"lookAhead","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["a",{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Text","Parsing","StringParser"],"Parser"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Text","Parsing","StringParser"],"Parser"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]}]},null]}},"sourceSpan":{"start":[45,1],"name":"/home/harry-lumi/code/purescript-string-parsers/src/Text/Parsing/StringParser/Combinators.purs","end":[45,44]}},{"children":[],"comments":"Match zero or more times.\n","title":"many","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["a",{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Text","Parsing","StringParser"],"Parser"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Text","Parsing","StringParser"],"Parser"]},{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","List","Types"],"List"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]}}]}]},null]}},"sourceSpan":{"start":[52,1],"name":"/home/harry-lumi/code/purescript-string-parsers/src/Text/Parsing/StringParser/Combinators.purs","end":[52,46]}},{"children":[],"comments":"Match one or more times.\n","title":"many1","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["a",{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Text","Parsing","StringParser"],"Parser"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Text","Parsing","StringParser"],"Parser"]},{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","List","Types"],"NonEmptyList"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]}}]}]},null]}},"sourceSpan":{"start":[56,1],"name":"/home/harry-lumi/code/purescript-string-parsers/src/Text/Parsing/StringParser/Combinators.purs","end":[56,55]}},{"children":[],"comments":"Provide an error message in case of failure.\n","title":"withError","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["a",{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Text","Parsing","StringParser"],"Parser"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Text","Parsing","StringParser"],"Parser"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]}]}]},null]}},"sourceSpan":{"start":[60,1],"name":"/home/harry-lumi/code/purescript-string-parsers/src/Text/Parsing/StringParser/Combinators.purs","end":[60,54]}},{"children":[],"comments":null,"title":"(<?>)","info":{"declType":"alias","alias":[["Text","Parsing","StringParser","Combinators"],{"Right":{"Left":{"Ident":"withError"}}}],"fixity":{"associativity":"infixl","precedence":3}},"sourceSpan":{"start":[63,1],"name":"/home/harry-lumi/code/purescript-string-parsers/src/Text/Parsing/StringParser/Combinators.purs","end":[63,26]}},{"children":[],"comments":"Parse a string between opening and closing markers.\n","title":"between","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["close",{"annotation":[],"tag":"ForAll","contents":["open",{"annotation":[],"tag":"ForAll","contents":["a",{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Text","Parsing","StringParser"],"Parser"]},{"annotation":[],"tag":"TypeVar","contents":"open"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Text","Parsing","StringParser"],"Parser"]},{"annotation":[],"tag":"TypeVar","contents":"close"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Text","Parsing","StringParser"],"Parser"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Text","Parsing","StringParser"],"Parser"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]}]}]}]},null]},null]},null]}},"sourceSpan":{"start":[66,1],"name":"/home/harry-lumi/code/purescript-string-parsers/src/Text/Parsing/StringParser/Combinators.purs","end":[66,84]}},{"children":[],"comments":"Parse a value with a default value in case of failure.\n","title":"option","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["a",{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Text","Parsing","StringParser"],"Parser"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Text","Parsing","StringParser"],"Parser"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]}]}]},null]}},"sourceSpan":{"start":[70,1],"name":"/home/harry-lumi/code/purescript-string-parsers/src/Text/Parsing/StringParser/Combinators.purs","end":[70,46]}},{"children":[],"comments":"Attempt to parse a value.\n","title":"optional","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["a",{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Text","Parsing","StringParser"],"Parser"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Text","Parsing","StringParser"],"Parser"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}]},null]}},"sourceSpan":{"start":[74,1],"name":"/home/harry-lumi/code/purescript-string-parsers/src/Text/Parsing/StringParser/Combinators.purs","end":[74,46]}},{"children":[],"comments":"Attempt to parse a value, pureing `Nothing` in case of failure.\n","title":"optionMaybe","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["a",{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Text","Parsing","StringParser"],"Parser"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Text","Parsing","StringParser"],"Parser"]},{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]}}]}]},null]}},"sourceSpan":{"start":[78,1],"name":"/home/harry-lumi/code/purescript-string-parsers/src/Text/Parsing/StringParser/Combinators.purs","end":[78,54]}},{"children":[],"comments":"Parse zero or more separated values.\n","title":"sepBy","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["sep",{"annotation":[],"tag":"ForAll","contents":["a",{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Text","Parsing","StringParser"],"Parser"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Text","Parsing","StringParser"],"Parser"]},{"annotation":[],"tag":"TypeVar","contents":"sep"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Text","Parsing","StringParser"],"Parser"]},{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","List","Types"],"List"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]}}]}]}]},null]},null]}},"sourceSpan":{"start":[82,1],"name":"/home/harry-lumi/code/purescript-string-parsers/src/Text/Parsing/StringParser/Combinators.purs","end":[82,65]}},{"children":[],"comments":"Parse one or more separated values.\n","title":"sepBy1","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["sep",{"annotation":[],"tag":"ForAll","contents":["a",{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Text","Parsing","StringParser"],"Parser"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Text","Parsing","StringParser"],"Parser"]},{"annotation":[],"tag":"TypeVar","contents":"sep"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Text","Parsing","StringParser"],"Parser"]},{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","List","Types"],"NonEmptyList"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]}}]}]}]},null]},null]}},"sourceSpan":{"start":[86,1],"name":"/home/harry-lumi/code/purescript-string-parsers/src/Text/Parsing/StringParser/Combinators.purs","end":[86,74]}},{"children":[],"comments":"Parse zero or more separated values, optionally ending with a separator.\n","title":"sepEndBy","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["sep",{"annotation":[],"tag":"ForAll","contents":["a",{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Text","Parsing","StringParser"],"Parser"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Text","Parsing","StringParser"],"Parser"]},{"annotation":[],"tag":"TypeVar","contents":"sep"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Text","Parsing","StringParser"],"Parser"]},{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","List","Types"],"List"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]}}]}]}]},null]},null]}},"sourceSpan":{"start":[93,1],"name":"/home/harry-lumi/code/purescript-string-parsers/src/Text/Parsing/StringParser/Combinators.purs","end":[93,68]}},{"children":[],"comments":"Parse one or more separated values, optionally ending with a separator.\n","title":"sepEndBy1","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["sep",{"annotation":[],"tag":"ForAll","contents":["a",{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Text","Parsing","StringParser"],"Parser"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Text","Parsing","StringParser"],"Parser"]},{"annotation":[],"tag":"TypeVar","contents":"sep"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Text","Parsing","StringParser"],"Parser"]},{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","List","Types"],"NonEmptyList"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]}}]}]}]},null]},null]}},"sourceSpan":{"start":[97,1],"name":"/home/harry-lumi/code/purescript-string-parsers/src/Text/Parsing/StringParser/Combinators.purs","end":[97,77]}},{"children":[],"comments":"Parse one or more separated values, ending with a separator.\n","title":"endBy1","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["sep",{"annotation":[],"tag":"ForAll","contents":["a",{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Text","Parsing","StringParser"],"Parser"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Text","Parsing","StringParser"],"Parser"]},{"annotation":[],"tag":"TypeVar","contents":"sep"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Text","Parsing","StringParser"],"Parser"]},{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","List","Types"],"NonEmptyList"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]}}]}]}]},null]},null]}},"sourceSpan":{"start":[105,1],"name":"/home/harry-lumi/code/purescript-string-parsers/src/Text/Parsing/StringParser/Combinators.purs","end":[105,74]}},{"children":[],"comments":"Parse zero or more separated values, ending with a separator.\n","title":"endBy","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["sep",{"annotation":[],"tag":"ForAll","contents":["a",{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Text","Parsing","StringParser"],"Parser"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Text","Parsing","StringParser"],"Parser"]},{"annotation":[],"tag":"TypeVar","contents":"sep"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Text","Parsing","StringParser"],"Parser"]},{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","List","Types"],"List"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]}}]}]}]},null]},null]}},"sourceSpan":{"start":[109,1],"name":"/home/harry-lumi/code/purescript-string-parsers/src/Text/Parsing/StringParser/Combinators.purs","end":[109,65]}},{"children":[],"comments":"Parse zero or more values separated by a right-associative operator.\n","title":"chainr","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["a",{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Text","Parsing","StringParser"],"Parser"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Text","Parsing","StringParser"],"Parser"]},{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]},{"annotation":[],"tag":"TypeVar","contents":"a"}]}]}}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Text","Parsing","StringParser"],"Parser"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]}]}]}]},null]}},"sourceSpan":{"start":[113,1],"name":"/home/harry-lumi/code/purescript-string-parsers/src/Text/Parsing/StringParser/Combinators.purs","end":[113,70]}},{"children":[],"comments":"Parse zero or more values separated by a left-associative operator.\n","title":"chainl","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["a",{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Text","Parsing","StringParser"],"Parser"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Text","Parsing","StringParser"],"Parser"]},{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]},{"annotation":[],"tag":"TypeVar","contents":"a"}]}]}}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Text","Parsing","StringParser"],"Parser"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]}]}]}]},null]}},"sourceSpan":{"start":[117,1],"name":"/home/harry-lumi/code/purescript-string-parsers/src/Text/Parsing/StringParser/Combinators.purs","end":[117,70]}},{"children":[],"comments":"Parse one or more values separated by a left-associative operator.\n","title":"chainl1","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["a",{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Text","Parsing","StringParser"],"Parser"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Text","Parsing","StringParser"],"Parser"]},{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]},{"annotation":[],"tag":"TypeVar","contents":"a"}]}]}}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Text","Parsing","StringParser"],"Parser"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]}]}]},null]}},"sourceSpan":{"start":[121,1],"name":"/home/harry-lumi/code/purescript-string-parsers/src/Text/Parsing/StringParser/Combinators.purs","end":[121,66]}},{"children":[],"comments":"Parse one or more values separated by a left-associative operator.\n","title":"chainl1'","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["a",{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Text","Parsing","StringParser"],"Parser"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Text","Parsing","StringParser"],"Parser"]},{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]},{"annotation":[],"tag":"TypeVar","contents":"a"}]}]}}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Text","Parsing","StringParser"],"Parser"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]}]}]}]},null]}},"sourceSpan":{"start":[127,1],"name":"/home/harry-lumi/code/purescript-string-parsers/src/Text/Parsing/StringParser/Combinators.purs","end":[127,72]}},{"children":[],"comments":"Parse one or more values separated by a right-associative operator.\n","title":"chainr1","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["a",{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Text","Parsing","StringParser"],"Parser"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Text","Parsing","StringParser"],"Parser"]},{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]},{"annotation":[],"tag":"TypeVar","contents":"a"}]}]}}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Text","Parsing","StringParser"],"Parser"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]}]}]},null]}},"sourceSpan":{"start":[133,1],"name":"/home/harry-lumi/code/purescript-string-parsers/src/Text/Parsing/StringParser/Combinators.purs","end":[133,66]}},{"children":[],"comments":"Parse one or more values separated by a right-associative operator.\n","title":"chainr1'","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["a",{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Text","Parsing","StringParser"],"Parser"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Text","Parsing","StringParser"],"Parser"]},{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]},{"annotation":[],"tag":"TypeVar","contents":"a"}]}]}}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Text","Parsing","StringParser"],"Parser"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]}]}]}]},null]}},"sourceSpan":{"start":[139,1],"name":"/home/harry-lumi/code/purescript-string-parsers/src/Text/Parsing/StringParser/Combinators.purs","end":[139,72]}},{"children":[],"comments":"Parse using any of a collection of parsers.\n","title":"choice","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["a",{"annotation":[],"tag":"ForAll","contents":["f",{"annotation":[],"tag":"ConstrainedType","contents":[{"constraintAnn":[],"constraintClass":[["Data","Foldable"],"Foldable"],"constraintArgs":[{"annotation":[],"tag":"TypeVar","contents":"f"}],"constraintData":null},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeVar","contents":"f"},{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Text","Parsing","StringParser"],"Parser"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]}}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Text","Parsing","StringParser"],"Parser"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]}]}]},null]},null]}},"sourceSpan":{"start":[145,1],"name":"/home/harry-lumi/code/purescript-string-parsers/src/Text/Parsing/StringParser/Combinators.purs","end":[145,61]}},{"children":[],"comments":"Parse values until a terminator.\n","title":"manyTill","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["end",{"annotation":[],"tag":"ForAll","contents":["a",{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Text","Parsing","StringParser"],"Parser"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Text","Parsing","StringParser"],"Parser"]},{"annotation":[],"tag":"TypeVar","contents":"end"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Text","Parsing","StringParser"],"Parser"]},{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","List","Types"],"List"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]}}]}]}]},null]},null]}},"sourceSpan":{"start":[149,1],"name":"/home/harry-lumi/code/purescript-string-parsers/src/Text/Parsing/StringParser/Combinators.purs","end":[149,68]}},{"children":[],"comments":"Parse values until the terminator matches, requiring at least one match.\n","title":"many1Till","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["end",{"annotation":[],"tag":"ForAll","contents":["a",{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Text","Parsing","StringParser"],"Parser"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Text","Parsing","StringParser"],"Parser"]},{"annotation":[],"tag":"TypeVar","contents":"end"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Text","Parsing","StringParser"],"Parser"]},{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","List","Types"],"NonEmptyList"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]}}]}]}]},null]},null]}},"sourceSpan":{"start":[153,1],"name":"/home/harry-lumi/code/purescript-string-parsers/src/Text/Parsing/StringParser/Combinators.purs","end":[153,77]}}]},{"reExports":[],"name":"Text.Parsing.StringParser.Expr","comments":"This module defines helper functions for defining parsers using operator tables.\n","declarations":[{"children":[{"comments":null,"title":"AssocNone","info":{"arguments":[],"declType":"dataConstructor"},"sourceSpan":null},{"comments":null,"title":"AssocLeft","info":{"arguments":[],"declType":"dataConstructor"},"sourceSpan":null},{"comments":null,"title":"AssocRight","info":{"arguments":[],"declType":"dataConstructor"},"sourceSpan":null}],"comments":"Operator associativity types.\n","title":"Assoc","info":{"declType":"data","dataDeclType":"data","typeArguments":[]},"sourceSpan":{"start":[19,1],"name":"/home/harry-lumi/code/purescript-string-parsers/src/Text/Parsing/StringParser/Expr.purs","end":[19,48]}},{"children":[{"comments":null,"title":"Infix","info":{"arguments":[{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Text","Parsing","StringParser"],"Parser"]},{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]},{"annotation":[],"tag":"TypeVar","contents":"a"}]}]}}]}},{"annotation":[],"tag":"TypeConstructor","contents":[["Text","Parsing","StringParser","Expr"],"Assoc"]}],"declType":"dataConstructor"},"sourceSpan":null},{"comments":null,"title":"Prefix","info":{"arguments":[{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Text","Parsing","StringParser"],"Parser"]},{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]},{"annotation":[],"tag":"TypeVar","contents":"a"}]}}]}}],"declType":"dataConstructor"},"sourceSpan":null},{"comments":null,"title":"Postfix","info":{"arguments":[{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Text","Parsing","StringParser"],"Parser"]},{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]},{"annotation":[],"tag":"TypeVar","contents":"a"}]}}]}}],"declType":"dataConstructor"},"sourceSpan":null}],"comments":"Operator types: infix, prefix, postfix.\n","title":"Operator","info":{"declType":"data","dataDeclType":"data","typeArguments":[["a",null]]},"sourceSpan":{"start":[22,1],"name":"/home/harry-lumi/code/purescript-string-parsers/src/Text/Parsing/StringParser/Expr.purs","end":[24,44]}},{"children":[],"comments":"An operator table arranges operators into precedence groups.\n","title":"OperatorTable","info":{"arguments":[["a",null]],"declType":"typeSynonym","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Text","Parsing","StringParser","Expr"],"Operator"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]}}]}}]}},"sourceSpan":{"start":[27,1],"name":"/home/harry-lumi/code/purescript-string-parsers/src/Text/Parsing/StringParser/Expr.purs","end":[27,50]}},{"children":[],"comments":null,"title":"buildExprParser","info":{"declType":"value","type":{"annotation":[],"tag":"ForAll","contents":["a",{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Text","Parsing","StringParser","Expr"],"OperatorTable"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Text","Parsing","StringParser"],"Parser"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Text","Parsing","StringParser"],"Parser"]},{"annotation":[],"tag":"TypeVar","contents":"a"}]}]}]},null]}},"sourceSpan":{"start":[36,1],"name":"/home/harry-lumi/code/purescript-string-parsers/src/Text/Parsing/StringParser/Expr.purs","end":[36,69]}}]}],"resolvedDependencies":{"purescript-newtype":"3.0.0","purescript-effect":"2.0.1","purescript-control":"4.2.0","purescript-console":"4.2.0","purescript-either":"4.1.1","purescript-arrays":"5.3.1","purescript-maybe":"4.0.1","purescript-type-equality":"3.0.0","purescript-distributive":"4.0.0","purescript-unfoldable":"4.0.2","purescript-invariant":"4.1.0","purescript-lazy":"4.0.0","purescript-foldable-traversable":"4.1.1","purescript-tailrec":"4.1.0","purescript-gen":"2.1.1","purescript-prelude":"4.1.1","purescript-st":"4.0.0","purescript-bifunctors":"4.0.0","purescript-nonempty":"5.0.0","purescript-assert":"4.1.0","purescript-unsafe-coerce":"4.0.0","purescript-refs":"4.1.0","purescript-integers":"4.0.0","purescript-orders":"4.0.0","purescript-globals":"4.1.0","purescript-math":"2.1.1","purescript-enums":"4.0.1","purescript-psci-support":"4.0.0","purescript-tuples":"5.1.0","purescript-partial":"2.0.1","purescript-strings":"4.0.1","purescript-identity":"4.1.0","purescript-lists":"5.4.1","purescript-functions":"4.0.0"},"version":"5.0.1","github":["paf31","purescript-string-parsers"],"versionTag":"v5.0.1","moduleMap":{"Data.BooleanAlgebra":"purescript-prelude","Data.Ring":"purescript-prelude","Data.NonEmpty":"purescript-nonempty","Effect.Uncurried":"purescript-effect","Data.Char.Gen":"purescript-strings","Data.String.NonEmpty":"purescript-strings","Effect":"purescript-effect","Data.Traversable.Accum.Internal":"purescript-foldable-traversable","Data.Enum.Gen":"purescript-enums","Data.Int.Bits":"purescript-integers","Data.Bifunctor.Flip":"purescript-bifunctors","Data.String.CodePoints":"purescript-strings","Data.Ord":"purescript-prelude","Control.Monad.Gen":"purescript-gen","Type.Data.Row":"purescript-prelude","Data.Monoid.Dual":"purescript-prelude","Control.Monad.Rec.Class":"purescript-tailrec","Data.Bitraversable":"purescript-foldable-traversable","Data.Boolean":"purescript-prelude","Control.Biapplicative":"purescript-bifunctors","Data.Array.NonEmpty.Internal":"purescript-arrays","Data.Array.ST.Iterator":"purescript-arrays","Data.String.Pattern":"purescript-strings","Data.Bounded":"purescript-prelude","Data.TraversableWithIndex":"purescript-foldable-traversable","Data.Int":"purescript-integers","Data.Show":"purescript-prelude","Data.Bifunctor.Clown":"purescript-bifunctors","Data.Foldable":"purescript-foldable-traversable","Data.Enum":"purescript-enums","Control.Apply":"purescript-prelude","Data.Tuple.Nested":"purescript-tuples","Control.Monad":"purescript-prelude","Data.Lazy":"purescript-lazy","Data.Monoid":"purescript-prelude","Data.String.Common":"purescript-strings","Data.Maybe.First":"purescript-maybe","Control.Bind":"purescript-prelude","Data.Monoid.Additive":"purescript-prelude","Data.Symbol":"purescript-prelude","Data.String.Regex":"purescript-strings","Data.HeytingAlgebra":"purescript-prelude","Control.Alt":"purescript-control","Control.Monad.ST.Internal":"purescript-st","Type.Data.RowList":"purescript-prelude","Effect.Ref":"purescript-refs","Data.Either.Inject":"purescript-either","Data.List.ZipList":"purescript-lists","Data.Ord.Min":"purescript-orders","Data.Ord.Unsafe":"purescript-prelude","Data.Semigroup":"purescript-prelude","Data.Array.NonEmpty":"purescript-arrays","Data.Ord.Down":"purescript-orders","Data.Array.ST.Partial":"purescript-arrays","Effect.Unsafe":"purescript-effect","Data.Tuple":"purescript-tuples","Data.Semigroup.Foldable":"purescript-foldable-traversable","Control.Biapply":"purescript-bifunctors","Data.Distributive":"purescript-distributive","Type.Equality":"purescript-type-equality","Control.Alternative":"purescript-control","Data.Semiring":"purescript-prelude","Effect.Console":"purescript-console","Data.Traversable.Accum":"purescript-foldable-traversable","Data.CommutativeRing":"purescript-prelude","Data.NaturalTransformation":"purescript-prelude","Data.Monoid.Conj":"purescript-prelude","Data.Unfoldable":"purescript-unfoldable","Control.Monad.ST":"purescript-st","Data.List.Types":"purescript-lists","Data.String.NonEmpty.CodeUnits":"purescript-strings","Data.Functor":"purescript-prelude","Unsafe.Coerce":"purescript-unsafe-coerce","Data.List.Lazy.Types":"purescript-lists","Control.Category":"purescript-prelude","Control.Monad.Gen.Common":"purescript-gen","Data.Maybe":"purescript-maybe","Data.String.Regex.Unsafe":"purescript-strings","Control.Comonad":"purescript-control","Data.Function":"purescript-prelude","Data.List":"purescript-lists","Data.Field":"purescript-prelude","Data.List.Lazy":"purescript-lists","Data.EuclideanRing":"purescript-prelude","Data.Semigroup.Last":"purescript-prelude","Data.Semigroup.First":"purescript-prelude","Data.Functor.Invariant":"purescript-invariant","Global.Unsafe":"purescript-globals","Data.String.Unsafe":"purescript-strings","Prelude":"purescript-prelude","Effect.Class":"purescript-effect","Partial.Unsafe":"purescript-partial","Data.Array":"purescript-arrays","Data.Bifunctor.Product":"purescript-bifunctors","Control.Extend":"purescript-control","Data.Unfoldable1":"purescript-unfoldable","Control.Lazy":"purescript-control","Data.Function.Uncurried":"purescript-functions","Data.Eq":"purescript-prelude","Data.Either.Nested":"purescript-either","Data.Newtype":"purescript-newtype","Data.Semigroup.Traversable":"purescript-foldable-traversable","Data.Bifunctor":"purescript-bifunctors","Test.Assert":"purescript-assert","Data.Monoid.Disj":"purescript-prelude","Control.Monad.Gen.Class":"purescript-gen","Data.Array.Partial":"purescript-arrays","Data.String.CaseInsensitive":"purescript-strings","Control.MonadPlus":"purescript-control","Data.Void":"purescript-prelude","Control.MonadZero":"purescript-control","Data.Ord.Max":"purescript-orders","Data.String.CodeUnits":"purescript-strings","Data.Bifunctor.Joker":"purescript-bifunctors","Data.FunctorWithIndex":"purescript-foldable-traversable","Data.DivisionRing":"purescript-prelude","Data.Bifunctor.Wrap":"purescript-bifunctors","PSCI.Support":"purescript-psci-support","Data.Maybe.Last":"purescript-maybe","Data.Unit":"purescript-prelude","Data.List.NonEmpty":"purescript-lists","Data.List.Lazy.NonEmpty":"purescript-lists","Data.Ordering":"purescript-prelude","Data.Identity":"purescript-identity","Math":"purescript-math","Data.String":"purescript-strings","Control.Plus":"purescript-control","Partial":"purescript-partial","Global":"purescript-globals","Data.String.NonEmpty.CodePoints":"purescript-strings","Data.String.NonEmpty.Internal":"purescript-strings","Data.Monoid.Multiplicative":"purescript-prelude","Data.String.NonEmpty.CaseInsensitive":"purescript-strings","Data.Array.ST":"purescript-arrays","Control.Semigroupoid":"purescript-prelude","Data.Monoid.Alternate":"purescript-control","Data.Char":"purescript-strings","Effect.Class.Console":"purescript-console","Data.Bifunctor.Join":"purescript-bifunctors","Data.Bifoldable":"purescript-foldable-traversable","Control.Monad.ST.Ref":"purescript-st","Data.Monoid.Endo":"purescript-prelude","Data.List.Partial":"purescript-lists","Data.String.Regex.Flags":"purescript-strings","Data.Either":"purescript-either","Control.Applicative":"purescript-prelude","Data.FoldableWithIndex":"purescript-foldable-traversable","Record.Unsafe":"purescript-prelude","Data.Traversable":"purescript-foldable-traversable","Data.String.Gen":"purescript-strings"},"compilerVersion":"0.13.3"}