{"uploader":"garyb","packageMeta":{"homepage":"https://github.com/purescript/purescript-strings","repository":{"url":"git://github.com/purescript/purescript-strings.git","type":"git"},"ignore":["**/.*","bower_components","node_modules","output","test","bower.json","package.json"],"devDependencies":{"purescript-console":"^2.0.0","purescript-assert":"^2.0.0","purescript-partial":"^1.1.2"},"dependencies":{"purescript-either":"^2.0.0","purescript-maybe":"^2.0.0"},"name":"purescript-strings","license":["MIT"],"description":"String and char utility functions, regular expressions."},"modules":[{"reExports":[],"name":"Data.Char","comments":"A type and functions for single characters.\n","declarations":[{"children":[],"comments":"Returns the numeric Unicode value of the character.\n","title":"toCharCode","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Char"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}},"sourceSpan":{"start":[10,1],"name":"src/Data/Char.purs","end":[10,41]}},{"children":[],"comments":"Constructs a character from the given Unicode numeric value.\n","title":"fromCharCode","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Char"]}]}},"sourceSpan":{"start":[13,1],"name":"src/Data/Char.purs","end":[13,43]}},{"children":[],"comments":"Converts a character to lowercase.\n","title":"toLower","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Char"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Char"]}]}},"sourceSpan":{"start":[16,1],"name":"src/Data/Char.purs","end":[16,39]}},{"children":[],"comments":"Converts a character to uppercase.\n","title":"toUpper","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Char"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Char"]}]}},"sourceSpan":{"start":[19,1],"name":"src/Data/Char.purs","end":[19,35]}}]},{"reExports":[],"name":"Data.String","comments":"Wraps the functions of Javascript's `String` object.\nA String represents a sequence of characters.\nFor details of the underlying implementation, see [String Reference at MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String).\n","declarations":[{"children":[{"comments":null,"title":"Pattern","info":{"arguments":[{"tag":"TypeConstructor","contents":[["Prim"],"String"]}],"declType":"dataConstructor"},"sourceSpan":null},{"comments":null,"title":"eqPattern","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Eq"],"Eq"]},{"tag":"TypeConstructor","contents":[["Data","String"],"Pattern"]}]}},"sourceSpan":{"start":[48,1],"name":"src/Data/String.purs","end":[48,40]}},{"comments":null,"title":"ordPattern","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Ord"],"Ord"]},{"tag":"TypeConstructor","contents":[["Data","String"],"Pattern"]}]}},"sourceSpan":{"start":[49,1],"name":"src/Data/String.purs","end":[49,42]}},{"comments":null,"title":"newtypePattern","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Newtype"],"Newtype"]},{"tag":"TypeConstructor","contents":[["Data","String"],"Pattern"]}]},{"tag":"TypeWildcard","contents":{"start":[50,51],"name":"src/Data/String.purs","end":[50,52]}}]}},"sourceSpan":{"start":[50,1],"name":"src/Data/String.purs","end":[50,52]}},{"comments":null,"title":"showPattern","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Show"],"Show"]},{"tag":"TypeConstructor","contents":[["Data","String"],"Pattern"]}]}},"sourceSpan":{"start":[52,1],"name":"src/Data/String.purs","end":[55,1]}}],"comments":"A newtype used in cases where there is a string to be matched.\n","title":"Pattern","info":{"declType":"data","dataDeclType":"newtype","typeArguments":[]},"sourceSpan":{"start":[46,1],"name":"src/Data/String.purs","end":[46,33]}},{"children":[{"comments":null,"title":"Replacement","info":{"arguments":[{"tag":"TypeConstructor","contents":[["Prim"],"String"]}],"declType":"dataConstructor"},"sourceSpan":null},{"comments":null,"title":"eqReplacement","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Eq"],"Eq"]},{"tag":"TypeConstructor","contents":[["Data","String"],"Replacement"]}]}},"sourceSpan":{"start":[58,1],"name":"src/Data/String.purs","end":[58,48]}},{"comments":null,"title":"ordReplacement","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Ord"],"Ord"]},{"tag":"TypeConstructor","contents":[["Data","String"],"Replacement"]}]}},"sourceSpan":{"start":[59,1],"name":"src/Data/String.purs","end":[59,50]}},{"comments":null,"title":"newtypeReplacement","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Newtype"],"Newtype"]},{"tag":"TypeConstructor","contents":[["Data","String"],"Replacement"]}]},{"tag":"TypeWildcard","contents":{"start":[60,59],"name":"src/Data/String.purs","end":[60,60]}}]}},"sourceSpan":{"start":[60,1],"name":"src/Data/String.purs","end":[60,60]}},{"comments":null,"title":"showReplacement","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Show"],"Show"]},{"tag":"TypeConstructor","contents":[["Data","String"],"Replacement"]}]}},"sourceSpan":{"start":[62,1],"name":"src/Data/String.purs","end":[65,1]}}],"comments":"A newtype used in cases to specify a replacement for a pattern.\n","title":"Replacement","info":{"declType":"data","dataDeclType":"newtype","typeArguments":[]},"sourceSpan":{"start":[56,1],"name":"src/Data/String.purs","end":[56,41]}},{"children":[],"comments":"Returns the character at the given index, if the index is within bounds.\n","title":"charAt","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeConstructor","contents":[["Prim"],"Char"]}]}]}]}},"sourceSpan":{"start":[66,1],"name":"src/Data/String.purs","end":[66,38]}},{"children":[],"comments":"Returns a string of length `1` containing the given character.\n","title":"singleton","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Char"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}},"sourceSpan":{"start":[77,1],"name":"src/Data/String.purs","end":[77,43]}},{"children":[],"comments":"Returns the numeric Unicode value of the character at the given index,\nif the index is within bounds.\n","title":"charCodeAt","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}]}]}},"sourceSpan":{"start":[81,1],"name":"src/Data/String.purs","end":[81,41]}},{"children":[],"comments":null,"title":"toChar","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeConstructor","contents":[["Prim"],"Char"]}]}]}},"sourceSpan":{"start":[91,1],"name":"src/Data/String.purs","end":[91,31]}},{"children":[],"comments":"Returns `true` if the given string is empty.\n","title":"null","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}},"sourceSpan":{"start":[101,1],"name":"src/Data/String.purs","end":[101,26]}},{"children":[],"comments":"Returns the first character and the rest of the string,\nif the string is not empty.\n","title":"uncons","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Record"]},{"tag":"RCons","contents":["head",{"tag":"TypeConstructor","contents":[["Prim"],"Char"]},{"tag":"RCons","contents":["tail",{"tag":"TypeConstructor","contents":[["Prim"],"String"]},{"tag":"REmpty","contents":[]}]}]}]}]}]}},"sourceSpan":{"start":[106,1],"name":"src/Data/String.purs","end":[106,59]}},{"children":[],"comments":"Returns the longest prefix (possibly empty) of characters that satisfy\nthe predicate.\n","title":"takeWhile","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Char"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}]}},"sourceSpan":{"start":[112,1],"name":"src/Data/String.purs","end":[112,51]}},{"children":[],"comments":"Returns the suffix remaining after `takeWhile`.\n","title":"dropWhile","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Char"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}]}},"sourceSpan":{"start":[116,1],"name":"src/Data/String.purs","end":[116,51]}},{"children":[],"comments":"If the string starts with the given prefix, return the portion of the\nstring left after removing it, as a Just value. Otherwise, return Nothing.\n* `stripPrefix (Pattern \"http:\") \"http://purescript.org\" == Just \"//purescript.org\"`\n* `stripPrefix (Pattern \"http:\") \"https://purescript.org\" == Nothing`\n","title":"stripPrefix","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","String"],"Pattern"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}]}]}},"sourceSpan":{"start":[123,1],"name":"src/Data/String.purs","end":[123,49]}},{"children":[],"comments":"If the string ends with the given suffix, return the portion of the\nstring left after removing it, as a Just value. Otherwise, return Nothing.\n* `stripSuffix (Pattern \".exe\") \"psc.exe\" == Just \"psc\"`\n* `stripSuffix (Pattern \".exe\") \"psc\" == Nothing`\n","title":"stripSuffix","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","String"],"Pattern"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}]}]}},"sourceSpan":{"start":[133,1],"name":"src/Data/String.purs","end":[133,49]}},{"children":[],"comments":"Converts an array of characters into a string.\n","title":"fromCharArray","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeConstructor","contents":[["Prim"],"Char"]}]}]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}},"sourceSpan":{"start":[140,1],"name":"src/Data/String.purs","end":[140,53]}},{"children":[],"comments":"Checks whether the first string exists in the second string.\n","title":"contains","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","String"],"Pattern"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}]}},"sourceSpan":{"start":[143,1],"name":"src/Data/String.purs","end":[143,41]}},{"children":[],"comments":"Returns the index of the first occurrence of the first string in the\nsecond string. Returns `Nothing` if there is no match.\n","title":"indexOf","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","String"],"Pattern"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}]}]}},"sourceSpan":{"start":[148,1],"name":"src/Data/String.purs","end":[148,42]}},{"children":[],"comments":"Returns the index of the first occurrence of the first string in the\nsecond string, starting at the given index. Returns `Nothing` if there is\nno match.\n","title":"indexOf'","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","String"],"Pattern"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}]}]}]}},"sourceSpan":{"start":[161,1],"name":"src/Data/String.purs","end":[161,50]}},{"children":[],"comments":"Returns the index of the last occurrence of the first string in the\nsecond string. Returns `Nothing` if there is no match.\n","title":"lastIndexOf","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","String"],"Pattern"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}]}]}},"sourceSpan":{"start":[174,1],"name":"src/Data/String.purs","end":[174,46]}},{"children":[],"comments":"Returns the index of the last occurrence of the first string in the\nsecond string, starting at the given index. Returns `Nothing` if there is\nno match.\n","title":"lastIndexOf'","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","String"],"Pattern"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}]}]}]}},"sourceSpan":{"start":[187,1],"name":"src/Data/String.purs","end":[187,54]}},{"children":[],"comments":"Returns the number of characters the string is composed of.\n","title":"length","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}},"sourceSpan":{"start":[199,1],"name":"src/Data/String.purs","end":[199,39]}},{"children":[],"comments":"Locale-aware sort order comparison.\n","title":"localeCompare","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeConstructor","contents":[["Data","Ordering"],"Ordering"]}]}]}},"sourceSpan":{"start":[202,1],"name":"src/Data/String.purs","end":[202,46]}},{"children":[],"comments":"Replaces the first occurence of the first argument with the second argument.\n","title":"replace","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","String"],"Pattern"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","String"],"Replacement"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}]}]}},"sourceSpan":{"start":[214,1],"name":"src/Data/String.purs","end":[214,69]}},{"children":[],"comments":"Replaces all occurences of the first argument with the second argument.\n","title":"replaceAll","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","String"],"Pattern"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","String"],"Replacement"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}]}]}},"sourceSpan":{"start":[217,1],"name":"src/Data/String.purs","end":[217,72]}},{"children":[],"comments":"Returns the first `n` characters of the string.\n","title":"take","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}]}},"sourceSpan":{"start":[220,1],"name":"src/Data/String.purs","end":[220,47]}},{"children":[],"comments":"Returns the string without the first `n` characters.\n","title":"drop","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}]}},"sourceSpan":{"start":[223,1],"name":"src/Data/String.purs","end":[223,47]}},{"children":[],"comments":"Returns the number of contiguous characters at the beginning\nof the string for which the predicate holds.\n","title":"count","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Char"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}]}},"sourceSpan":{"start":[227,1],"name":"src/Data/String.purs","end":[227,59]}},{"children":[],"comments":"Returns the substrings of the second string separated along occurences\nof the first string.\n* `split (Pattern \" \") \"hello world\" == [\"hello\", \"world\"]`\n","title":"split","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","String"],"Pattern"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}]}]}},"sourceSpan":{"start":[232,1],"name":"src/Data/String.purs","end":[232,58]}},{"children":[],"comments":"Returns the substrings of split at the given index, if the index is within bounds.\n","title":"splitAt","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}}]}]}]}},"sourceSpan":{"start":[235,1],"name":"src/Data/String.purs","end":[235,49]}},{"children":[],"comments":"Converts the string into an array of characters.\n","title":"toCharArray","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeConstructor","contents":[["Prim"],"Char"]}]}]}},"sourceSpan":{"start":[245,1],"name":"src/Data/String.purs","end":[245,51]}},{"children":[],"comments":"Returns the argument converted to lowercase.\n","title":"toLower","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}},"sourceSpan":{"start":[248,1],"name":"src/Data/String.purs","end":[248,43]}},{"children":[],"comments":"Returns the argument converted to uppercase.\n","title":"toUpper","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}},"sourceSpan":{"start":[251,1],"name":"src/Data/String.purs","end":[251,43]}},{"children":[],"comments":"Removes whitespace from the beginning and end of a string, including\n[whitespace characters](http://www.ecma-international.org/ecma-262/5.1/#sec-7.2)\nand [line terminators](http://www.ecma-international.org/ecma-262/5.1/#sec-7.3).\n","title":"trim","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}},"sourceSpan":{"start":[256,1],"name":"src/Data/String.purs","end":[256,40]}},{"children":[],"comments":"Joins the strings in the array together, inserting the first argument\nas separator between them.\n","title":"joinWith","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}]}},"sourceSpan":{"start":[260,1],"name":"src/Data/String.purs","end":[260,54]}}]},{"reExports":[],"name":"Data.String.CaseInsensitive","comments":null,"declarations":[{"children":[{"comments":null,"title":"CaseInsensitiveString","info":{"arguments":[{"tag":"TypeConstructor","contents":[["Prim"],"String"]}],"declType":"dataConstructor"},"sourceSpan":null},{"comments":null,"title":"eqCaseInsensitiveString","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Eq"],"Eq"]},{"tag":"TypeConstructor","contents":[["Data","String","CaseInsensitive"],"CaseInsensitiveString"]}]}},"sourceSpan":{"start":[11,1],"name":"src/Data/String/CaseInsensitiveString.purs","end":[13,29]}},{"comments":null,"title":"ordCaseInsensitiveString","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Ord"],"Ord"]},{"tag":"TypeConstructor","contents":[["Data","String","CaseInsensitive"],"CaseInsensitiveString"]}]}},"sourceSpan":{"start":[15,1],"name":"src/Data/String/CaseInsensitiveString.purs","end":[17,38]}},{"comments":null,"title":"showCaseInsensitiveString","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Show"],"Show"]},{"tag":"TypeConstructor","contents":[["Data","String","CaseInsensitive"],"CaseInsensitiveString"]}]}},"sourceSpan":{"start":[19,1],"name":"src/Data/String/CaseInsensitiveString.purs","end":[22,1]}},{"comments":null,"title":"newtypeCaseInsensitiveString","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Newtype"],"Newtype"]},{"tag":"TypeConstructor","contents":[["Data","String","CaseInsensitive"],"CaseInsensitiveString"]}]},{"tag":"TypeWildcard","contents":{"start":[22,79],"name":"src/Data/String/CaseInsensitiveString.purs","end":[22,80]}}]}},"sourceSpan":{"start":[22,1],"name":"src/Data/String/CaseInsensitiveString.purs","end":[22,79]}}],"comments":"A newtype for case insensitive string comparisons and ordering.\n","title":"CaseInsensitiveString","info":{"declType":"data","dataDeclType":"newtype","typeArguments":[]},"sourceSpan":{"start":[9,1],"name":"src/Data/String/CaseInsensitiveString.purs","end":[9,61]}}]},{"reExports":[],"name":"Data.String.Regex","comments":"Wraps Javascript's `RegExp` object that enables matching strings with\npatternes defined by regular expressions.\nFor details of the underlying implementation, see [RegExp Reference at MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp).\n","declarations":[{"children":[{"comments":null,"title":"showRegex","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Show"],"Show"]},{"tag":"TypeConstructor","contents":[["Data","String","Regex"],"Regex"]}]}},"sourceSpan":{"start":[31,1],"name":"src/Data/String/Regex.purs","end":[32,20]}}],"comments":"Wraps Javascript `RegExp` objects.\n","title":"Regex","info":{"kind":{"tag":"Star","contents":[]},"declType":"externData"},"sourceSpan":{"start":[27,1],"name":"src/Data/String/Regex.purs","end":[27,31]}},{"children":[],"comments":"Constructs a `Regex` from a pattern string and flags. Fails with\n`Left error` if the pattern contains a syntax error.\n","title":"regex","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","String","Regex","Flags"],"RegexFlags"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Either"],"Either"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeConstructor","contents":[["Data","String","Regex"],"Regex"]}]}]}]}},"sourceSpan":{"start":[43,1],"name":"src/Data/String/Regex.purs","end":[43,53]}},{"children":[],"comments":"Returns the pattern string used to construct the given `Regex`.\n","title":"source","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","String","Regex"],"Regex"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}},"sourceSpan":{"start":[47,1],"name":"src/Data/String/Regex.purs","end":[47,41]}},{"children":[],"comments":"Returns the `RegexFlags` used to construct the given `Regex`.\n","title":"flags","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","String","Regex"],"Regex"]}]},{"tag":"TypeConstructor","contents":[["Data","String","Regex","Flags"],"RegexFlags"]}]}},"sourceSpan":{"start":[50,1],"name":"src/Data/String/Regex.purs","end":[50,29]}},{"children":[],"comments":"Returns the string representation of the given `RegexFlags`.\n","title":"renderFlags","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","String","Regex","Flags"],"RegexFlags"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}},"sourceSpan":{"start":[57,1],"name":"src/Data/String/Regex.purs","end":[57,36]}},{"children":[],"comments":"Parses the string representation of `RegexFlags`.\n","title":"parseFlags","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeConstructor","contents":[["Data","String","Regex","Flags"],"RegexFlags"]}]}},"sourceSpan":{"start":[66,1],"name":"src/Data/String/Regex.purs","end":[66,35]}},{"children":[],"comments":"Returns `true` if the `Regex` matches the string. In contrast to\n`RegExp.prototype.test()` in JavaScript, `test` does not affect\nthe `lastIndex` property of the Regex.\n","title":"test","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","String","Regex"],"Regex"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}]}},"sourceSpan":{"start":[78,1],"name":"src/Data/String/Regex.purs","end":[78,50]}},{"children":[],"comments":"Matches the string against the `Regex` and returns an array of matches\nif there were any. Each match has type `Maybe String`, where `Nothing`\nrepresents an unmatched optional capturing group.\nSee [reference](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/match).\n","title":"match","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","String","Regex"],"Regex"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}}]}}]}]}]}},"sourceSpan":{"start":[91,1],"name":"src/Data/String/Regex.purs","end":[91,57]}},{"children":[],"comments":"Replaces occurences of the `Regex` with the first string. The replacement\nstring can include special replacement patterns escaped with `\"$\"`.\nSee [reference](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace).\n","title":"replace","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","String","Regex"],"Regex"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}]}]}},"sourceSpan":{"start":[97,1],"name":"src/Data/String/Regex.purs","end":[97,62]}},{"children":[],"comments":"Transforms occurences of the `Regex` using a function of the matched\nsubstring and a list of submatch strings.\nSee the [reference](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace#Specifying_a_function_as_a_parameter).\n","title":"replace'","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","String","Regex"],"Regex"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}]}]}},"sourceSpan":{"start":[102,1],"name":"src/Data/String/Regex.purs","end":[102,91]}},{"children":[],"comments":"Returns `Just` the index of the first match of the `Regex` in the string,\nor `Nothing` if there is no match.\n","title":"search","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","String","Regex"],"Regex"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}]}]}},"sourceSpan":{"start":[113,1],"name":"src/Data/String/Regex.purs","end":[113,39]}},{"children":[],"comments":"Split the string into an array of substrings along occurences of the `Regex`.\n","title":"split","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","String","Regex"],"Regex"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}]}]}},"sourceSpan":{"start":[117,1],"name":"src/Data/String/Regex.purs","end":[117,50]}}]},{"reExports":[],"name":"Data.String.Regex.Flags","comments":null,"declarations":[{"children":[],"comments":null,"title":"RegexFlagsRec","info":{"arguments":[],"declType":"typeSynonym","type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Record"]},{"tag":"RCons","contents":["global",{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]},{"tag":"RCons","contents":["ignoreCase",{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]},{"tag":"RCons","contents":["multiline",{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]},{"tag":"RCons","contents":["sticky",{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]},{"tag":"RCons","contents":["unicode",{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]},{"tag":"REmpty","contents":[]}]}]}]}]}]}]}},"sourceSpan":{"start":[10,1],"name":"src/Data/String/Regex/Flags.purs","end":[16,4]}},{"children":[{"comments":null,"title":"RegexFlags","info":{"arguments":[{"tag":"TypeConstructor","contents":[["Data","String","Regex","Flags"],"RegexFlagsRec"]}],"declType":"dataConstructor"},"sourceSpan":null},{"comments":null,"title":"semigroupRegexFlags","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Semigroup"],"Semigroup"]},{"tag":"TypeConstructor","contents":[["Data","String","Regex","Flags"],"RegexFlags"]}]}},"sourceSpan":{"start":[81,1],"name":"src/Data/String/Regex/Flags.purs","end":[88,6]}},{"comments":null,"title":"monoidRegexFlags","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Monoid"],"Monoid"]},{"tag":"TypeConstructor","contents":[["Data","String","Regex","Flags"],"RegexFlags"]}]}},"sourceSpan":{"start":[90,1],"name":"src/Data/String/Regex/Flags.purs","end":[91,19]}},{"comments":null,"title":"eqRegexFlags","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Eq"],"Eq"]},{"tag":"TypeConstructor","contents":[["Data","String","Regex","Flags"],"RegexFlags"]}]}},"sourceSpan":{"start":[93,1],"name":"src/Data/String/Regex/Flags.purs","end":[99,30]}},{"comments":null,"title":"showRegexFlags","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Show"],"Show"]},{"tag":"TypeConstructor","contents":[["Data","String","Regex","Flags"],"RegexFlags"]}]}},"sourceSpan":{"start":[101,1],"name":"src/Data/String/Regex/Flags.purs","end":[114,48]}}],"comments":"Flags that control matching.\n","title":"RegexFlags","info":{"declType":"data","dataDeclType":"data","typeArguments":[]},"sourceSpan":{"start":[19,1],"name":"src/Data/String/Regex/Flags.purs","end":[19,43]}},{"children":[],"comments":"All flags set to false.\n","title":"noFlags","info":{"declType":"value","type":{"tag":"TypeConstructor","contents":[["Data","String","Regex","Flags"],"RegexFlags"]}},"sourceSpan":{"start":[22,1],"name":"src/Data/String/Regex/Flags.purs","end":[22,22]}},{"children":[],"comments":"Only global flag set to true\n","title":"global","info":{"declType":"value","type":{"tag":"TypeConstructor","contents":[["Data","String","Regex","Flags"],"RegexFlags"]}},"sourceSpan":{"start":[32,1],"name":"src/Data/String/Regex/Flags.purs","end":[32,21]}},{"children":[],"comments":"Only ignoreCase flag set to true\n","title":"ignoreCase","info":{"declType":"value","type":{"tag":"TypeConstructor","contents":[["Data","String","Regex","Flags"],"RegexFlags"]}},"sourceSpan":{"start":[42,1],"name":"src/Data/String/Regex/Flags.purs","end":[42,25]}},{"children":[],"comments":"Only multiline flag set to true\n","title":"multiline","info":{"declType":"value","type":{"tag":"TypeConstructor","contents":[["Data","String","Regex","Flags"],"RegexFlags"]}},"sourceSpan":{"start":[52,1],"name":"src/Data/String/Regex/Flags.purs","end":[52,24]}},{"children":[],"comments":"Only sticky flag set to true\n","title":"sticky","info":{"declType":"value","type":{"tag":"TypeConstructor","contents":[["Data","String","Regex","Flags"],"RegexFlags"]}},"sourceSpan":{"start":[62,1],"name":"src/Data/String/Regex/Flags.purs","end":[62,21]}},{"children":[],"comments":"Only unicode flag set to true\n","title":"unicode","info":{"declType":"value","type":{"tag":"TypeConstructor","contents":[["Data","String","Regex","Flags"],"RegexFlags"]}},"sourceSpan":{"start":[72,1],"name":"src/Data/String/Regex/Flags.purs","end":[72,22]}}]},{"reExports":[],"name":"Data.String.Unsafe","comments":"Unsafe string and character functions.\n","declarations":[{"children":[],"comments":"Returns the numeric Unicode value of the character at the given index.\n\n**Unsafe:** throws runtime exception if the index is out of bounds.\n","title":"charCodeAt","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}]}},"sourceSpan":{"start":[11,1],"name":"src/Data/String/Unsafe.purs","end":[11,50]}},{"children":[],"comments":"Returns the character at the given index.\n\n**Unsafe:** throws runtime exception if the index is out of bounds.\n","title":"charAt","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Char"]}]}]}},"sourceSpan":{"start":[16,1],"name":"src/Data/String/Unsafe.purs","end":[16,47]}},{"children":[],"comments":"Converts a string of length `1` to a character.\n\n**Unsafe:** throws runtime exception if length is not `1`.\n","title":"char","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Char"]}]}},"sourceSpan":{"start":[21,1],"name":"src/Data/String/Unsafe.purs","end":[21,34]}}]}],"resolvedDependencies":{"purescript-newtype":"1.0.0","purescript-control":"2.0.0","purescript-console":"2.0.0","purescript-either":"2.0.0","purescript-maybe":"2.0.1","purescript-invariant":"2.0.0","purescript-monoid":"2.0.0","purescript-foldable-traversable":"2.0.0","purescript-prelude":"2.1.0","purescript-bifunctors":"2.0.0","purescript-assert":"2.0.0","purescript-eff":"2.0.0","purescript-partial":"1.1.2"},"bookmarks":[{"package":null,"item":["Data.String","Pattern"]},{"package":null,"item":["Data.String","Replacement"]},{"package":null,"item":["Data.String","charAt"]},{"package":null,"item":["Data.String","singleton"]},{"package":null,"item":["Data.String","charCodeAt"]},{"package":null,"item":["Data.String","toChar"]},{"package":null,"item":["Data.String","null"]},{"package":null,"item":["Data.String","uncons"]},{"package":null,"item":["Data.String","uncons"]},{"package":null,"item":["Data.String","takeWhile"]},{"package":null,"item":["Data.String","dropWhile"]},{"package":null,"item":["Data.String","stripPrefix"]},{"package":null,"item":["Data.String","stripSuffix"]},{"package":null,"item":["Data.String","fromCharArray"]},{"package":null,"item":["Data.String","contains"]},{"package":null,"item":["Data.String","indexOf"]},{"package":null,"item":["Data.String","indexOf'"]},{"package":null,"item":["Data.String","lastIndexOf"]},{"package":null,"item":["Data.String","lastIndexOf'"]},{"package":null,"item":["Data.String","length"]},{"package":null,"item":["Data.String","localeCompare"]},{"package":null,"item":["Data.String","replace"]},{"package":null,"item":["Data.String","replaceAll"]},{"package":null,"item":["Data.String","take"]},{"package":null,"item":["Data.String","drop"]},{"package":null,"item":["Data.String","count"]},{"package":null,"item":["Data.String","split"]},{"package":null,"item":["Data.String","splitAt"]},{"package":null,"item":["Data.String","toCharArray"]},{"package":null,"item":["Data.String","toLower"]},{"package":null,"item":["Data.String","toUpper"]},{"package":null,"item":["Data.String","trim"]},{"package":null,"item":["Data.String","joinWith"]},{"package":null,"item":["Data.Char","toCharCode"]},{"package":null,"item":["Data.Char","fromCharCode"]},{"package":null,"item":["Data.Char","toLower"]},{"package":null,"item":["Data.Char","toUpper"]},{"package":null,"item":["Data.String.Regex","Regex"]},{"package":null,"item":["Data.String.Regex","regex"]},{"package":null,"item":["Data.String.Regex","source"]},{"package":null,"item":["Data.String.Regex","flags"]},{"package":null,"item":["Data.String.Regex","renderFlags"]},{"package":null,"item":["Data.String.Regex","parseFlags"]},{"package":null,"item":["Data.String.Regex","test"]},{"package":null,"item":["Data.String.Regex","match"]},{"package":null,"item":["Data.String.Regex","replace"]},{"package":null,"item":["Data.String.Regex","replace'"]},{"package":null,"item":["Data.String.Regex","search"]},{"package":null,"item":["Data.String.Regex","split"]},{"package":null,"item":["Data.String.CaseInsensitive","CaseInsensitiveString"]},{"package":null,"item":["Data.String.CaseInsensitive","eqCaseInsensitiveString"]},{"package":null,"item":["Data.String.CaseInsensitive","ordCaseInsensitiveString"]},{"package":null,"item":["Data.String.CaseInsensitive","showCaseInsensitiveString"]},{"package":null,"item":["Data.String.CaseInsensitive","newtypeCaseInsensitiveString"]},{"package":null,"item":["Data.String.Unsafe","charCodeAt"]},{"package":null,"item":["Data.String.Unsafe","charAt"]},{"package":null,"item":["Data.String.Unsafe","char"]},{"package":null,"item":["Data.String.Regex.Flags","RegexFlagsRec"]},{"package":null,"item":["Data.String.Regex.Flags","RegexFlags"]},{"package":null,"item":["Data.String.Regex.Flags","noFlags"]},{"package":null,"item":["Data.String.Regex.Flags","global"]},{"package":null,"item":["Data.String.Regex.Flags","ignoreCase"]},{"package":null,"item":["Data.String.Regex.Flags","multiline"]},{"package":null,"item":["Data.String.Regex.Flags","sticky"]},{"package":null,"item":["Data.String.Regex.Flags","unicode"]},{"package":null,"item":["Data.String.Regex.Flags","semigroupRegexFlags"]},{"package":null,"item":["Data.String.Regex.Flags","monoidRegexFlags"]},{"package":null,"item":["Data.String.Regex.Flags","eqRegexFlags"]},{"package":null,"item":["Data.String.Regex.Flags","showRegexFlags"]},{"package":"purescript-prelude","item":["Control.Category","Category"]},{"package":"purescript-prelude","item":["Control.Category","categoryFn"]},{"package":"purescript-prelude","item":["Control.Bind","Bind"]},{"package":"purescript-prelude","item":["Control.Bind","(>>=)"]},{"package":"purescript-prelude","item":["Control.Bind","bindFlipped"]},{"package":"purescript-prelude","item":["Control.Bind","(=<<)"]},{"package":"purescript-prelude","item":["Control.Bind","bindFn"]},{"package":"purescript-prelude","item":["Control.Bind","join"]},{"package":"purescript-prelude","item":["Control.Bind","composeKleisli"]},{"package":"purescript-prelude","item":["Control.Bind","(>=>)"]},{"package":"purescript-prelude","item":["Control.Bind","composeKleisliFlipped"]},{"package":"purescript-prelude","item":["Control.Bind","(<=<)"]},{"package":"purescript-prelude","item":["Control.Bind","ifM"]},{"package":"purescript-prelude","item":["Control.Semigroupoid","Semigroupoid"]},{"package":"purescript-prelude","item":["Control.Semigroupoid","semigroupoidFn"]},{"package":"purescript-prelude","item":["Control.Semigroupoid","(<<<)"]},{"package":"purescript-prelude","item":["Control.Semigroupoid","composeFlipped"]},{"package":"purescript-prelude","item":["Control.Semigroupoid","(>>>)"]},{"package":"purescript-prelude","item":["Control.Applicative","Applicative"]},{"package":"purescript-prelude","item":["Control.Applicative","applicativeFn"]},{"package":"purescript-prelude","item":["Control.Applicative","liftA1"]},{"package":"purescript-prelude","item":["Control.Applicative","when"]},{"package":"purescript-prelude","item":["Control.Applicative","when"]},{"package":"purescript-prelude","item":["Control.Applicative","unless"]},{"package":"purescript-prelude","item":["Control.Applicative","unless"]},{"package":"purescript-prelude","item":["Control.Monad","Monad"]},{"package":"purescript-prelude","item":["Control.Monad","monadFn"]},{"package":"purescript-prelude","item":["Control.Monad","liftM1"]},{"package":"purescript-prelude","item":["Control.Monad","ap"]},{"package":"purescript-prelude","item":["Control.Monad","whenM"]},{"package":"purescript-prelude","item":["Control.Monad","unlessM"]},{"package":"purescript-prelude","item":["Control.Apply","Apply"]},{"package":"purescript-prelude","item":["Control.Apply","(<*>)"]},{"package":"purescript-prelude","item":["Control.Apply","applyFn"]},{"package":"purescript-prelude","item":["Control.Apply","applyFirst"]},{"package":"purescript-prelude","item":["Control.Apply","(<*)"]},{"package":"purescript-prelude","item":["Control.Apply","applySecond"]},{"package":"purescript-prelude","item":["Control.Apply","(*>)"]},{"package":"purescript-prelude","item":["Control.Apply","lift2"]},{"package":"purescript-prelude","item":["Control.Apply","lift3"]},{"package":"purescript-prelude","item":["Control.Apply","lift4"]},{"package":"purescript-prelude","item":["Control.Apply","lift5"]},{"package":"purescript-prelude","item":["Data.Unit","Unit"]},{"package":"purescript-prelude","item":["Data.Unit","unit"]},{"package":"purescript-prelude","item":["Data.Unit","showUnit"]},{"package":"purescript-prelude","item":["Data.Field","Field"]},{"package":"purescript-prelude","item":["Data.Ord","Ord"]},{"package":"purescript-prelude","item":["Data.Ord","lessThan"]},{"package":"purescript-prelude","item":["Data.Ord","greaterThan"]},{"package":"purescript-prelude","item":["Data.Ord","lessThanOrEq"]},{"package":"purescript-prelude","item":["Data.Ord","greaterThanOrEq"]},{"package":"purescript-prelude","item":["Data.Ord","(<)"]},{"package":"purescript-prelude","item":["Data.Ord","(<=)"]},{"package":"purescript-prelude","item":["Data.Ord","(>)"]},{"package":"purescript-prelude","item":["Data.Ord","(>=)"]},{"package":"purescript-prelude","item":["Data.Ord","comparing"]},{"package":"purescript-prelude","item":["Data.Ord","min"]},{"package":"purescript-prelude","item":["Data.Ord","max"]},{"package":"purescript-prelude","item":["Data.Ord","clamp"]},{"package":"purescript-prelude","item":["Data.Ord","between"]},{"package":"purescript-prelude","item":["Data.Ord","abs"]},{"package":"purescript-prelude","item":["Data.Ord","signum"]},{"package":"purescript-prelude","item":["Data.BooleanAlgebra","BooleanAlgebra"]},{"package":"purescript-prelude","item":["Data.Function","flip"]},{"package":"purescript-prelude","item":["Data.Function","const"]},{"package":"purescript-prelude","item":["Data.Function","apply"]},{"package":"purescript-prelude","item":["Data.Function","($)"]},{"package":"purescript-prelude","item":["Data.Function","applyFlipped"]},{"package":"purescript-prelude","item":["Data.Function","(#)"]},{"package":"purescript-prelude","item":["Data.Function","on"]},{"package":"purescript-prelude","item":["Data.Void","Void"]},{"package":"purescript-prelude","item":["Data.Void","absurd"]},{"package":"purescript-prelude","item":["Data.CommutativeRing","CommutativeRing"]},{"package":"purescript-prelude","item":["Data.Show","Show"]},{"package":"purescript-prelude","item":["Data.Semiring","Semiring"]},{"package":"purescript-prelude","item":["Data.Semiring","(+)"]},{"package":"purescript-prelude","item":["Data.Semiring","(*)"]},{"package":"purescript-prelude","item":["Data.HeytingAlgebra","HeytingAlgebra"]},{"package":"purescript-prelude","item":["Data.HeytingAlgebra","(&&)"]},{"package":"purescript-prelude","item":["Data.HeytingAlgebra","(||)"]},{"package":"purescript-prelude","item":["Data.HeytingAlgebra","heytingAlgebraFunction"]},{"package":"purescript-prelude","item":["Data.Ring","Ring"]},{"package":"purescript-prelude","item":["Data.Ring","(-)"]},{"package":"purescript-prelude","item":["Data.Ring","negate"]},{"package":"purescript-prelude","item":["Data.Eq","Eq"]},{"package":"purescript-prelude","item":["Data.Eq","(==)"]},{"package":"purescript-prelude","item":["Data.Eq","notEq"]},{"package":"purescript-prelude","item":["Data.Eq","(/=)"]},{"package":"purescript-prelude","item":["Data.Ordering","Ordering"]},{"package":"purescript-prelude","item":["Data.Ordering","invert"]},{"package":"purescript-prelude","item":["Data.Ordering","invert"]},{"package":"purescript-prelude","item":["Data.Ordering","invert"]},{"package":"purescript-prelude","item":["Data.Functor","Functor"]},{"package":"purescript-prelude","item":["Data.Functor","(<$>)"]},{"package":"purescript-prelude","item":["Data.Functor","mapFlipped"]},{"package":"purescript-prelude","item":["Data.Functor","(<#>)"]},{"package":"purescript-prelude","item":["Data.Functor","functorFn"]},{"package":"purescript-prelude","item":["Data.Functor","void"]},{"package":"purescript-prelude","item":["Data.Functor","voidRight"]},{"package":"purescript-prelude","item":["Data.Functor","(<$)"]},{"package":"purescript-prelude","item":["Data.Functor","voidLeft"]},{"package":"purescript-prelude","item":["Data.Functor","($>)"]},{"package":"purescript-prelude","item":["Data.Functor","flap"]},{"package":"purescript-prelude","item":["Data.Functor","(<@>)"]},{"package":"purescript-prelude","item":["Data.Boolean","otherwise"]},{"package":"purescript-prelude","item":["Data.EuclideanRing","EuclideanRing"]},{"package":"purescript-prelude","item":["Data.EuclideanRing","(/)"]},{"package":"purescript-prelude","item":["Data.Semigroup","Semigroup"]},{"package":"purescript-prelude","item":["Data.Semigroup","(<>)"]},{"package":"purescript-prelude","item":["Data.Semigroup","semigroupFn"]},{"package":"purescript-prelude","item":["Data.NaturalTransformation","NaturalTransformation"]},{"package":"purescript-prelude","item":["Data.NaturalTransformation","type (~>)"]},{"package":"purescript-prelude","item":["Data.Bounded","Bounded"]},{"package":"purescript-prelude","item":["Data.Ord.Unsafe","unsafeCompare"]},{"package":"purescript-assert","item":["Test.Assert","ASSERT"]},{"package":"purescript-assert","item":["Test.Assert","assert"]},{"package":"purescript-assert","item":["Test.Assert","assert'"]},{"package":"purescript-assert","item":["Test.Assert","assertThrows"]},{"package":"purescript-assert","item":["Test.Assert","assertThrows'"]},{"package":"purescript-either","item":["Data.Either","Either"]},{"package":"purescript-either","item":["Data.Either","functorEither"]},{"package":"purescript-either","item":["Data.Either","invariantEither"]},{"package":"purescript-either","item":["Data.Either","bifunctorEither"]},{"package":"purescript-either","item":["Data.Either","applyEither"]},{"package":"purescript-either","item":["Data.Either","applicativeEither"]},{"package":"purescript-either","item":["Data.Either","altEither"]},{"package":"purescript-either","item":["Data.Either","bindEither"]},{"package":"purescript-either","item":["Data.Either","monadEither"]},{"package":"purescript-either","item":["Data.Either","extendEither"]},{"package":"purescript-either","item":["Data.Either","showEither"]},{"package":"purescript-either","item":["Data.Either","eqEither"]},{"package":"purescript-either","item":["Data.Either","ordEither"]},{"package":"purescript-either","item":["Data.Either","boundedEither"]},{"package":"purescript-either","item":["Data.Either","foldableEither"]},{"package":"purescript-either","item":["Data.Either","bifoldableEither"]},{"package":"purescript-either","item":["Data.Either","traversableEither"]},{"package":"purescript-either","item":["Data.Either","bitraversableEither"]},{"package":"purescript-either","item":["Data.Either","semiringEither"]},{"package":"purescript-either","item":["Data.Either","semigroupEither"]},{"package":"purescript-either","item":["Data.Either","either"]},{"package":"purescript-either","item":["Data.Either","either"]},{"package":"purescript-either","item":["Data.Either","isLeft"]},{"package":"purescript-either","item":["Data.Either","isRight"]},{"package":"purescript-either","item":["Data.Either","fromLeft"]},{"package":"purescript-either","item":["Data.Either","fromRight"]},{"package":"purescript-either","item":["Data.Either.Nested","Either1"]},{"package":"purescript-either","item":["Data.Either.Nested","Either2"]},{"package":"purescript-either","item":["Data.Either.Nested","Either3"]},{"package":"purescript-either","item":["Data.Either.Nested","Either4"]},{"package":"purescript-either","item":["Data.Either.Nested","Either5"]},{"package":"purescript-either","item":["Data.Either.Nested","Either6"]},{"package":"purescript-either","item":["Data.Either.Nested","Either7"]},{"package":"purescript-either","item":["Data.Either.Nested","Either8"]},{"package":"purescript-either","item":["Data.Either.Nested","Either9"]},{"package":"purescript-either","item":["Data.Either.Nested","Either10"]},{"package":"purescript-either","item":["Data.Either.Nested","E2"]},{"package":"purescript-either","item":["Data.Either.Nested","E3"]},{"package":"purescript-either","item":["Data.Either.Nested","E4"]},{"package":"purescript-either","item":["Data.Either.Nested","E5"]},{"package":"purescript-either","item":["Data.Either.Nested","E6"]},{"package":"purescript-either","item":["Data.Either.Nested","E7"]},{"package":"purescript-either","item":["Data.Either.Nested","E8"]},{"package":"purescript-either","item":["Data.Either.Nested","E9"]},{"package":"purescript-either","item":["Data.Either.Nested","E10"]},{"package":"purescript-either","item":["Data.Either.Nested","E11"]},{"package":"purescript-either","item":["Data.Either.Nested","in1"]},{"package":"purescript-either","item":["Data.Either.Nested","in2"]},{"package":"purescript-either","item":["Data.Either.Nested","in3"]},{"package":"purescript-either","item":["Data.Either.Nested","in4"]},{"package":"purescript-either","item":["Data.Either.Nested","in5"]},{"package":"purescript-either","item":["Data.Either.Nested","in6"]},{"package":"purescript-either","item":["Data.Either.Nested","in7"]},{"package":"purescript-either","item":["Data.Either.Nested","in8"]},{"package":"purescript-either","item":["Data.Either.Nested","in9"]},{"package":"purescript-either","item":["Data.Either.Nested","in10"]},{"package":"purescript-either","item":["Data.Either.Nested","at1"]},{"package":"purescript-either","item":["Data.Either.Nested","at2"]},{"package":"purescript-either","item":["Data.Either.Nested","at3"]},{"package":"purescript-either","item":["Data.Either.Nested","at4"]},{"package":"purescript-either","item":["Data.Either.Nested","at5"]},{"package":"purescript-either","item":["Data.Either.Nested","at6"]},{"package":"purescript-either","item":["Data.Either.Nested","at7"]},{"package":"purescript-either","item":["Data.Either.Nested","at8"]},{"package":"purescript-either","item":["Data.Either.Nested","at9"]},{"package":"purescript-either","item":["Data.Either.Nested","at10"]},{"package":"purescript-either","item":["Data.Either.Nested","either1"]},{"package":"purescript-either","item":["Data.Either.Nested","either2"]},{"package":"purescript-either","item":["Data.Either.Nested","either3"]},{"package":"purescript-either","item":["Data.Either.Nested","either4"]},{"package":"purescript-either","item":["Data.Either.Nested","either5"]},{"package":"purescript-either","item":["Data.Either.Nested","either6"]},{"package":"purescript-either","item":["Data.Either.Nested","either7"]},{"package":"purescript-either","item":["Data.Either.Nested","either8"]},{"package":"purescript-either","item":["Data.Either.Nested","either9"]},{"package":"purescript-either","item":["Data.Either.Nested","either10"]},{"package":"purescript-console","item":["Control.Monad.Eff.Console","CONSOLE"]},{"package":"purescript-console","item":["Control.Monad.Eff.Console","log"]},{"package":"purescript-console","item":["Control.Monad.Eff.Console","logShow"]},{"package":"purescript-console","item":["Control.Monad.Eff.Console","warn"]},{"package":"purescript-console","item":["Control.Monad.Eff.Console","warnShow"]},{"package":"purescript-console","item":["Control.Monad.Eff.Console","error"]},{"package":"purescript-console","item":["Control.Monad.Eff.Console","errorShow"]},{"package":"purescript-console","item":["Control.Monad.Eff.Console","info"]},{"package":"purescript-console","item":["Control.Monad.Eff.Console","infoShow"]},{"package":"purescript-foldable-traversable","item":["Data.Bitraversable","Bitraversable"]},{"package":"purescript-foldable-traversable","item":["Data.Bitraversable","bitraverseDefault"]},{"package":"purescript-foldable-traversable","item":["Data.Bitraversable","bisequenceDefault"]},{"package":"purescript-foldable-traversable","item":["Data.Bitraversable","bifor"]},{"package":"purescript-foldable-traversable","item":["Data.Traversable","Traversable"]},{"package":"purescript-foldable-traversable","item":["Data.Traversable","traverseDefault"]},{"package":"purescript-foldable-traversable","item":["Data.Traversable","sequenceDefault"]},{"package":"purescript-foldable-traversable","item":["Data.Traversable","for"]},{"package":"purescript-foldable-traversable","item":["Data.Traversable","Accum"]},{"package":"purescript-foldable-traversable","item":["Data.Traversable","scanl"]},{"package":"purescript-foldable-traversable","item":["Data.Traversable","mapAccumL"]},{"package":"purescript-foldable-traversable","item":["Data.Traversable","scanr"]},{"package":"purescript-foldable-traversable","item":["Data.Traversable","mapAccumR"]},{"package":"purescript-foldable-traversable","item":["Data.Foldable","Foldable"]},{"package":"purescript-foldable-traversable","item":["Data.Foldable","foldrDefault"]},{"package":"purescript-foldable-traversable","item":["Data.Foldable","foldlDefault"]},{"package":"purescript-foldable-traversable","item":["Data.Foldable","foldMapDefaultR"]},{"package":"purescript-foldable-traversable","item":["Data.Foldable","foldMapDefaultL"]},{"package":"purescript-foldable-traversable","item":["Data.Foldable","fold"]},{"package":"purescript-foldable-traversable","item":["Data.Foldable","traverse_"]},{"package":"purescript-foldable-traversable","item":["Data.Foldable","for_"]},{"package":"purescript-foldable-traversable","item":["Data.Foldable","sequence_"]},{"package":"purescript-foldable-traversable","item":["Data.Foldable","oneOf"]},{"package":"purescript-foldable-traversable","item":["Data.Foldable","intercalate"]},{"package":"purescript-foldable-traversable","item":["Data.Foldable","and"]},{"package":"purescript-foldable-traversable","item":["Data.Foldable","or"]},{"package":"purescript-foldable-traversable","item":["Data.Foldable","all"]},{"package":"purescript-foldable-traversable","item":["Data.Foldable","any"]},{"package":"purescript-foldable-traversable","item":["Data.Foldable","sum"]},{"package":"purescript-foldable-traversable","item":["Data.Foldable","product"]},{"package":"purescript-foldable-traversable","item":["Data.Foldable","elem"]},{"package":"purescript-foldable-traversable","item":["Data.Foldable","notElem"]},{"package":"purescript-foldable-traversable","item":["Data.Foldable","find"]},{"package":"purescript-foldable-traversable","item":["Data.Foldable","findMap"]},{"package":"purescript-foldable-traversable","item":["Data.Foldable","maximum"]},{"package":"purescript-foldable-traversable","item":["Data.Foldable","maximumBy"]},{"package":"purescript-foldable-traversable","item":["Data.Foldable","minimum"]},{"package":"purescript-foldable-traversable","item":["Data.Foldable","minimumBy"]},{"package":"purescript-foldable-traversable","item":["Data.Bifoldable","Bifoldable"]},{"package":"purescript-foldable-traversable","item":["Data.Bifoldable","bifoldrDefault"]},{"package":"purescript-foldable-traversable","item":["Data.Bifoldable","bifoldlDefault"]},{"package":"purescript-foldable-traversable","item":["Data.Bifoldable","bifoldMapDefaultR"]},{"package":"purescript-foldable-traversable","item":["Data.Bifoldable","bifoldMapDefaultL"]},{"package":"purescript-foldable-traversable","item":["Data.Bifoldable","bifold"]},{"package":"purescript-foldable-traversable","item":["Data.Bifoldable","bitraverse_"]},{"package":"purescript-foldable-traversable","item":["Data.Bifoldable","bifor_"]},{"package":"purescript-foldable-traversable","item":["Data.Bifoldable","bisequence_"]},{"package":"purescript-foldable-traversable","item":["Data.Bifoldable","biany"]},{"package":"purescript-foldable-traversable","item":["Data.Bifoldable","biall"]},{"package":"purescript-newtype","item":["Data.Newtype","Newtype"]},{"package":"purescript-newtype","item":["Data.Newtype","op"]},{"package":"purescript-newtype","item":["Data.Newtype","ala"]},{"package":"purescript-newtype","item":["Data.Newtype","alaF"]},{"package":"purescript-newtype","item":["Data.Newtype","over"]},{"package":"purescript-newtype","item":["Data.Newtype","overF"]},{"package":"purescript-newtype","item":["Data.Newtype","under"]},{"package":"purescript-newtype","item":["Data.Newtype","underF"]},{"package":"purescript-control","item":["Control.MonadZero","MonadZero"]},{"package":"purescript-control","item":["Control.MonadZero","guard"]},{"package":"purescript-control","item":["Control.MonadZero","guard"]},{"package":"purescript-control","item":["Control.Alt","Alt"]},{"package":"purescript-control","item":["Control.Alt","(<|>)"]},{"package":"purescript-control","item":["Control.Extend","Extend"]},{"package":"purescript-control","item":["Control.Extend","(<<=)"]},{"package":"purescript-control","item":["Control.Extend","extendFlipped"]},{"package":"purescript-control","item":["Control.Extend","(=>>)"]},{"package":"purescript-control","item":["Control.Extend","composeCoKleisli"]},{"package":"purescript-control","item":["Control.Extend","(=>=)"]},{"package":"purescript-control","item":["Control.Extend","composeCoKleisliFlipped"]},{"package":"purescript-control","item":["Control.Extend","(=<=)"]},{"package":"purescript-control","item":["Control.Extend","duplicate"]},{"package":"purescript-control","item":["Control.MonadPlus","MonadPlus"]},{"package":"purescript-control","item":["Control.Lazy","Lazy"]},{"package":"purescript-control","item":["Control.Lazy","fix"]},{"package":"purescript-control","item":["Control.Alternative","Alternative"]},{"package":"purescript-control","item":["Control.Comonad","Comonad"]},{"package":"purescript-control","item":["Control.Plus","Plus"]},{"package":"purescript-partial","item":["Partial.Unsafe","unsafePartial"]},{"package":"purescript-partial","item":["Partial.Unsafe","unsafeCrashWith"]},{"package":"purescript-partial","item":["Partial","crash"]},{"package":"purescript-partial","item":["Partial","crashWith"]},{"package":"purescript-maybe","item":["Data.Maybe","Maybe"]},{"package":"purescript-maybe","item":["Data.Maybe","functorMaybe"]},{"package":"purescript-maybe","item":["Data.Maybe","applyMaybe"]},{"package":"purescript-maybe","item":["Data.Maybe","applicativeMaybe"]},{"package":"purescript-maybe","item":["Data.Maybe","altMaybe"]},{"package":"purescript-maybe","item":["Data.Maybe","plusMaybe"]},{"package":"purescript-maybe","item":["Data.Maybe","alternativeMaybe"]},{"package":"purescript-maybe","item":["Data.Maybe","bindMaybe"]},{"package":"purescript-maybe","item":["Data.Maybe","monadMaybe"]},{"package":"purescript-maybe","item":["Data.Maybe","monadZeroMaybe"]},{"package":"purescript-maybe","item":["Data.Maybe","extendMaybe"]},{"package":"purescript-maybe","item":["Data.Maybe","invariantMaybe"]},{"package":"purescript-maybe","item":["Data.Maybe","semigroupMaybe"]},{"package":"purescript-maybe","item":["Data.Maybe","monoidMaybe"]},{"package":"purescript-maybe","item":["Data.Maybe","eqMaybe"]},{"package":"purescript-maybe","item":["Data.Maybe","ordMaybe"]},{"package":"purescript-maybe","item":["Data.Maybe","boundedMaybe"]},{"package":"purescript-maybe","item":["Data.Maybe","showMaybe"]},{"package":"purescript-maybe","item":["Data.Maybe","maybe"]},{"package":"purescript-maybe","item":["Data.Maybe","maybe"]},{"package":"purescript-maybe","item":["Data.Maybe","maybe'"]},{"package":"purescript-maybe","item":["Data.Maybe","maybe'"]},{"package":"purescript-maybe","item":["Data.Maybe","fromMaybe"]},{"package":"purescript-maybe","item":["Data.Maybe","fromMaybe'"]},{"package":"purescript-maybe","item":["Data.Maybe","isJust"]},{"package":"purescript-maybe","item":["Data.Maybe","isNothing"]},{"package":"purescript-maybe","item":["Data.Maybe","fromJust"]},{"package":"purescript-maybe","item":["Data.Maybe.Last","Last"]},{"package":"purescript-maybe","item":["Data.Maybe.Last","newtypeLast"]},{"package":"purescript-maybe","item":["Data.Maybe.Last","eqLast"]},{"package":"purescript-maybe","item":["Data.Maybe.Last","ordLast"]},{"package":"purescript-maybe","item":["Data.Maybe.Last","boundedLast"]},{"package":"purescript-maybe","item":["Data.Maybe.Last","functorLast"]},{"package":"purescript-maybe","item":["Data.Maybe.Last","invariantLast"]},{"package":"purescript-maybe","item":["Data.Maybe.Last","applyLast"]},{"package":"purescript-maybe","item":["Data.Maybe.Last","applicativeLast"]},{"package":"purescript-maybe","item":["Data.Maybe.Last","bindLast"]},{"package":"purescript-maybe","item":["Data.Maybe.Last","monadLast"]},{"package":"purescript-maybe","item":["Data.Maybe.Last","extendLast"]},{"package":"purescript-maybe","item":["Data.Maybe.Last","showLast"]},{"package":"purescript-maybe","item":["Data.Maybe.Last","semigroupLast"]},{"package":"purescript-maybe","item":["Data.Maybe.Last","monoidLast"]},{"package":"purescript-maybe","item":["Data.Maybe.First","First"]},{"package":"purescript-maybe","item":["Data.Maybe.First","newtypeFirst"]},{"package":"purescript-maybe","item":["Data.Maybe.First","eqFirst"]},{"package":"purescript-maybe","item":["Data.Maybe.First","ordFirst"]},{"package":"purescript-maybe","item":["Data.Maybe.First","boundedFirst"]},{"package":"purescript-maybe","item":["Data.Maybe.First","functorFirst"]},{"package":"purescript-maybe","item":["Data.Maybe.First","invariantFirst"]},{"package":"purescript-maybe","item":["Data.Maybe.First","applyFirst"]},{"package":"purescript-maybe","item":["Data.Maybe.First","applicativeFirst"]},{"package":"purescript-maybe","item":["Data.Maybe.First","bindFirst"]},{"package":"purescript-maybe","item":["Data.Maybe.First","monadFirst"]},{"package":"purescript-maybe","item":["Data.Maybe.First","extendFirst"]},{"package":"purescript-maybe","item":["Data.Maybe.First","showFirst"]},{"package":"purescript-maybe","item":["Data.Maybe.First","semigroupFirst"]},{"package":"purescript-maybe","item":["Data.Maybe.First","monoidFirst"]},{"package":"purescript-bifunctors","item":["Control.Biapply","(<<$>>)"]},{"package":"purescript-bifunctors","item":["Control.Biapply","Biapply"]},{"package":"purescript-bifunctors","item":["Control.Biapply","(<<*>>)"]},{"package":"purescript-bifunctors","item":["Control.Biapply","biapplyFirst"]},{"package":"purescript-bifunctors","item":["Control.Biapply","(*>>)"]},{"package":"purescript-bifunctors","item":["Control.Biapply","biapplySecond"]},{"package":"purescript-bifunctors","item":["Control.Biapply","(<<*)"]},{"package":"purescript-bifunctors","item":["Control.Biapply","bilift2"]},{"package":"purescript-bifunctors","item":["Control.Biapply","bilift3"]},{"package":"purescript-bifunctors","item":["Control.Biapplicative","Biapplicative"]},{"package":"purescript-bifunctors","item":["Data.Bifunctor","Bifunctor"]},{"package":"purescript-bifunctors","item":["Data.Bifunctor","lmap"]},{"package":"purescript-bifunctors","item":["Data.Bifunctor","rmap"]},{"package":"purescript-bifunctors","item":["Data.Bifunctor.Flip","Flip"]},{"package":"purescript-bifunctors","item":["Data.Bifunctor.Flip","newtypeFlip"]},{"package":"purescript-bifunctors","item":["Data.Bifunctor.Flip","eqFlip"]},{"package":"purescript-bifunctors","item":["Data.Bifunctor.Flip","ordFlip"]},{"package":"purescript-bifunctors","item":["Data.Bifunctor.Flip","showFlip"]},{"package":"purescript-bifunctors","item":["Data.Bifunctor.Flip","functorFlip"]},{"package":"purescript-bifunctors","item":["Data.Bifunctor.Flip","bifunctorFlip"]},{"package":"purescript-bifunctors","item":["Data.Bifunctor.Flip","biapplyFlip"]},{"package":"purescript-bifunctors","item":["Data.Bifunctor.Flip","biapplicativeFlip"]},{"package":"purescript-bifunctors","item":["Data.Bifunctor.Join","Join"]},{"package":"purescript-bifunctors","item":["Data.Bifunctor.Join","newtypeJoin"]},{"package":"purescript-bifunctors","item":["Data.Bifunctor.Join","eqJoin"]},{"package":"purescript-bifunctors","item":["Data.Bifunctor.Join","ordJoin"]},{"package":"purescript-bifunctors","item":["Data.Bifunctor.Join","showJoin"]},{"package":"purescript-bifunctors","item":["Data.Bifunctor.Join","bifunctorJoin"]},{"package":"purescript-bifunctors","item":["Data.Bifunctor.Join","biapplyJoin"]},{"package":"purescript-bifunctors","item":["Data.Bifunctor.Join","biapplicativeJoin"]},{"package":"purescript-bifunctors","item":["Data.Bifunctor.Wrap","Wrap"]},{"package":"purescript-bifunctors","item":["Data.Bifunctor.Wrap","newtypeWrap"]},{"package":"purescript-bifunctors","item":["Data.Bifunctor.Wrap","eqWrap"]},{"package":"purescript-bifunctors","item":["Data.Bifunctor.Wrap","ordWrap"]},{"package":"purescript-bifunctors","item":["Data.Bifunctor.Wrap","showWrap"]},{"package":"purescript-bifunctors","item":["Data.Bifunctor.Wrap","functorWrap"]},{"package":"purescript-bifunctors","item":["Data.Bifunctor.Wrap","bifunctorWrap"]},{"package":"purescript-bifunctors","item":["Data.Bifunctor.Wrap","biapplyWrap"]},{"package":"purescript-bifunctors","item":["Data.Bifunctor.Wrap","biapplicativeWrap"]},{"package":"purescript-bifunctors","item":["Data.Bifunctor.Joker","Joker"]},{"package":"purescript-bifunctors","item":["Data.Bifunctor.Joker","newtypeJoker"]},{"package":"purescript-bifunctors","item":["Data.Bifunctor.Joker","eqJoker"]},{"package":"purescript-bifunctors","item":["Data.Bifunctor.Joker","ordJoker"]},{"package":"purescript-bifunctors","item":["Data.Bifunctor.Joker","showJoker"]},{"package":"purescript-bifunctors","item":["Data.Bifunctor.Joker","functorJoker"]},{"package":"purescript-bifunctors","item":["Data.Bifunctor.Joker","bifunctorJoker"]},{"package":"purescript-bifunctors","item":["Data.Bifunctor.Joker","biapplyJoker"]},{"package":"purescript-bifunctors","item":["Data.Bifunctor.Joker","biapplicativeJoker"]},{"package":"purescript-bifunctors","item":["Data.Bifunctor.Product","Product"]},{"package":"purescript-bifunctors","item":["Data.Bifunctor.Product","eqProduct"]},{"package":"purescript-bifunctors","item":["Data.Bifunctor.Product","ordProduct"]},{"package":"purescript-bifunctors","item":["Data.Bifunctor.Product","showProduct"]},{"package":"purescript-bifunctors","item":["Data.Bifunctor.Product","bifunctorProduct"]},{"package":"purescript-bifunctors","item":["Data.Bifunctor.Product","biapplyProduct"]},{"package":"purescript-bifunctors","item":["Data.Bifunctor.Product","biapplicativeProduct"]},{"package":"purescript-bifunctors","item":["Data.Bifunctor.Clown","Clown"]},{"package":"purescript-bifunctors","item":["Data.Bifunctor.Clown","newtypeClown"]},{"package":"purescript-bifunctors","item":["Data.Bifunctor.Clown","eqClown"]},{"package":"purescript-bifunctors","item":["Data.Bifunctor.Clown","ordClown"]},{"package":"purescript-bifunctors","item":["Data.Bifunctor.Clown","showClown"]},{"package":"purescript-bifunctors","item":["Data.Bifunctor.Clown","functorClown"]},{"package":"purescript-bifunctors","item":["Data.Bifunctor.Clown","bifunctorClown"]},{"package":"purescript-bifunctors","item":["Data.Bifunctor.Clown","biapplyClown"]},{"package":"purescript-bifunctors","item":["Data.Bifunctor.Clown","biapplicativeClown"]},{"package":"purescript-invariant","item":["Data.Functor.Invariant","Invariant"]},{"package":"purescript-invariant","item":["Data.Functor.Invariant","invariantFn"]},{"package":"purescript-invariant","item":["Data.Functor.Invariant","invariantArray"]},{"package":"purescript-invariant","item":["Data.Functor.Invariant","imapF"]},{"package":"purescript-eff","item":["Control.Monad.Eff","Eff"]},{"package":"purescript-eff","item":["Control.Monad.Eff","Pure"]},{"package":"purescript-eff","item":["Control.Monad.Eff","runPure"]},{"package":"purescript-eff","item":["Control.Monad.Eff","untilE"]},{"package":"purescript-eff","item":["Control.Monad.Eff","whileE"]},{"package":"purescript-eff","item":["Control.Monad.Eff","forE"]},{"package":"purescript-eff","item":["Control.Monad.Eff","foreachE"]},{"package":"purescript-eff","item":["Control.Monad.Eff.Class","MonadEff"]},{"package":"purescript-eff","item":["Control.Monad.Eff.Class","monadEffEff"]},{"package":"purescript-eff","item":["Control.Monad.Eff.Unsafe","unsafeCoerceEff"]},{"package":"purescript-eff","item":["Control.Monad.Eff.Unsafe","unsafePerformEff"]},{"package":"purescript-monoid","item":["Data.Monoid","Monoid"]},{"package":"purescript-monoid","item":["Data.Monoid","monoidFn"]},{"package":"purescript-monoid","item":["Data.Monoid.Disj","Disj"]},{"package":"purescript-monoid","item":["Data.Monoid.Disj","newtypeDisj"]},{"package":"purescript-monoid","item":["Data.Monoid.Disj","eqDisj"]},{"package":"purescript-monoid","item":["Data.Monoid.Disj","ordDisj"]},{"package":"purescript-monoid","item":["Data.Monoid.Disj","boundedDisj"]},{"package":"purescript-monoid","item":["Data.Monoid.Disj","functorDisj"]},{"package":"purescript-monoid","item":["Data.Monoid.Disj","invariantDisj"]},{"package":"purescript-monoid","item":["Data.Monoid.Disj","applyDisj"]},{"package":"purescript-monoid","item":["Data.Monoid.Disj","applicativeDisj"]},{"package":"purescript-monoid","item":["Data.Monoid.Disj","bindDisj"]},{"package":"purescript-monoid","item":["Data.Monoid.Disj","monadDisj"]},{"package":"purescript-monoid","item":["Data.Monoid.Disj","extendDisj"]},{"package":"purescript-monoid","item":["Data.Monoid.Disj","comonadDisj"]},{"package":"purescript-monoid","item":["Data.Monoid.Disj","showDisj"]},{"package":"purescript-monoid","item":["Data.Monoid.Disj","semigroupDisj"]},{"package":"purescript-monoid","item":["Data.Monoid.Disj","monoidDisj"]},{"package":"purescript-monoid","item":["Data.Monoid.Disj","semiringDisj"]},{"package":"purescript-monoid","item":["Data.Monoid.Endo","Endo"]},{"package":"purescript-monoid","item":["Data.Monoid.Endo","newtypeEndo"]},{"package":"purescript-monoid","item":["Data.Monoid.Endo","invariantEndo"]},{"package":"purescript-monoid","item":["Data.Monoid.Endo","semigroupEndo"]},{"package":"purescript-monoid","item":["Data.Monoid.Endo","monoidEndo"]},{"package":"purescript-monoid","item":["Data.Monoid.Multiplicative","Multiplicative"]},{"package":"purescript-monoid","item":["Data.Monoid.Multiplicative","newtypeMultiplicative"]},{"package":"purescript-monoid","item":["Data.Monoid.Multiplicative","eqMultiplicative"]},{"package":"purescript-monoid","item":["Data.Monoid.Multiplicative","ordMultiplicative"]},{"package":"purescript-monoid","item":["Data.Monoid.Multiplicative","boundedMultiplicative"]},{"package":"purescript-monoid","item":["Data.Monoid.Multiplicative","functorMultiplicative"]},{"package":"purescript-monoid","item":["Data.Monoid.Multiplicative","invariantMultiplicative"]},{"package":"purescript-monoid","item":["Data.Monoid.Multiplicative","applyMultiplicative"]},{"package":"purescript-monoid","item":["Data.Monoid.Multiplicative","applicativeMultiplicative"]},{"package":"purescript-monoid","item":["Data.Monoid.Multiplicative","bindMultiplicative"]},{"package":"purescript-monoid","item":["Data.Monoid.Multiplicative","monadMultiplicative"]},{"package":"purescript-monoid","item":["Data.Monoid.Multiplicative","extendMultiplicative"]},{"package":"purescript-monoid","item":["Data.Monoid.Multiplicative","comonadMultiplicative"]},{"package":"purescript-monoid","item":["Data.Monoid.Multiplicative","showMultiplicative"]},{"package":"purescript-monoid","item":["Data.Monoid.Multiplicative","semigroupMultiplicative"]},{"package":"purescript-monoid","item":["Data.Monoid.Multiplicative","monoidMultiplicative"]},{"package":"purescript-monoid","item":["Data.Monoid.Conj","Conj"]},{"package":"purescript-monoid","item":["Data.Monoid.Conj","newtypeConj"]},{"package":"purescript-monoid","item":["Data.Monoid.Conj","eqConj"]},{"package":"purescript-monoid","item":["Data.Monoid.Conj","ordConj"]},{"package":"purescript-monoid","item":["Data.Monoid.Conj","boundedConj"]},{"package":"purescript-monoid","item":["Data.Monoid.Conj","functorConj"]},{"package":"purescript-monoid","item":["Data.Monoid.Conj","invariantConj"]},{"package":"purescript-monoid","item":["Data.Monoid.Conj","applyConj"]},{"package":"purescript-monoid","item":["Data.Monoid.Conj","applicativeConj"]},{"package":"purescript-monoid","item":["Data.Monoid.Conj","bindConj"]},{"package":"purescript-monoid","item":["Data.Monoid.Conj","monadConj"]},{"package":"purescript-monoid","item":["Data.Monoid.Conj","extendConj"]},{"package":"purescript-monoid","item":["Data.Monoid.Conj","comonadConj"]},{"package":"purescript-monoid","item":["Data.Monoid.Conj","showConj"]},{"package":"purescript-monoid","item":["Data.Monoid.Conj","semigroupConj"]},{"package":"purescript-monoid","item":["Data.Monoid.Conj","monoidConj"]},{"package":"purescript-monoid","item":["Data.Monoid.Conj","semiringConj"]},{"package":"purescript-monoid","item":["Data.Monoid.Additive","Additive"]},{"package":"purescript-monoid","item":["Data.Monoid.Additive","newtypeAdditive"]},{"package":"purescript-monoid","item":["Data.Monoid.Additive","eqAdditive"]},{"package":"purescript-monoid","item":["Data.Monoid.Additive","ordAdditive"]},{"package":"purescript-monoid","item":["Data.Monoid.Additive","boundedAdditive"]},{"package":"purescript-monoid","item":["Data.Monoid.Additive","functorAdditive"]},{"package":"purescript-monoid","item":["Data.Monoid.Additive","invariantAdditive"]},{"package":"purescript-monoid","item":["Data.Monoid.Additive","applyAdditive"]},{"package":"purescript-monoid","item":["Data.Monoid.Additive","applicativeAdditive"]},{"package":"purescript-monoid","item":["Data.Monoid.Additive","bindAdditive"]},{"package":"purescript-monoid","item":["Data.Monoid.Additive","monadAdditive"]},{"package":"purescript-monoid","item":["Data.Monoid.Additive","extendAdditive"]},{"package":"purescript-monoid","item":["Data.Monoid.Additive","comonadAdditive"]},{"package":"purescript-monoid","item":["Data.Monoid.Additive","showAdditive"]},{"package":"purescript-monoid","item":["Data.Monoid.Additive","semigroupAdditive"]},{"package":"purescript-monoid","item":["Data.Monoid.Additive","monoidAdditive"]},{"package":"purescript-monoid","item":["Data.Monoid.Dual","Dual"]},{"package":"purescript-monoid","item":["Data.Monoid.Dual","newtypeDual"]},{"package":"purescript-monoid","item":["Data.Monoid.Dual","eqDual"]},{"package":"purescript-monoid","item":["Data.Monoid.Dual","ordDual"]},{"package":"purescript-monoid","item":["Data.Monoid.Dual","boundedDual"]},{"package":"purescript-monoid","item":["Data.Monoid.Dual","functorDual"]},{"package":"purescript-monoid","item":["Data.Monoid.Dual","invariantDual"]},{"package":"purescript-monoid","item":["Data.Monoid.Dual","applyDual"]},{"package":"purescript-monoid","item":["Data.Monoid.Dual","applicativeDual"]},{"package":"purescript-monoid","item":["Data.Monoid.Dual","bindDual"]},{"package":"purescript-monoid","item":["Data.Monoid.Dual","monadDual"]},{"package":"purescript-monoid","item":["Data.Monoid.Dual","extendDual"]},{"package":"purescript-monoid","item":["Data.Monoid.Dual","comonadDual"]},{"package":"purescript-monoid","item":["Data.Monoid.Dual","showDual"]},{"package":"purescript-monoid","item":["Data.Monoid.Dual","semigroupDual"]},{"package":"purescript-monoid","item":["Data.Monoid.Dual","monoidDual"]}],"version":"2.0.2","github":["purescript","purescript-strings"],"versionTag":"v2.0.2","compilerVersion":"0.9.1"}