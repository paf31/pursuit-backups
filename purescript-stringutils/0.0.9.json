{"uploader":"menelaos","packageMeta":{"repository":{"url":"git://github.com/menelaos/purescript-stringutils","type":"git"},"ignore":["**/.*","node_modules","bower_components","test","tests"],"devDependencies":{"purescript-console":"^4.0.0","purescript-strongcheck":"^4.0.0","purescript-unsafe-coerce":"^4.0.0","purescript-lists":"^5.0.0"},"authors":[{"name":"Andreas Schacker"}],"dependencies":{"purescript-either":"^4.0.0","purescript-arrays":"^5.0.0","purescript-maybe":"^4.0.0","purescript-prelude":"^4.0.0","purescript-integers":"^4.0.0","purescript-partial":"^2.0.0","purescript-strings":"^4.0.0"},"name":"purescript-stringutils","keywords":["purescript","string","utils"],"license":["Apache-2.0"],"description":"String Utility Functions"},"tagTime":"2019-06-20T17:02:31+0000","modules":[{"reExports":[],"name":"Data.Char.Utils","comments":null,"declarations":[{"children":[],"comments":"DEPRECATED: With the adoption of CodePoints in `purescript-strings`, this\nfunction can now be reproduced via `map Data.String.singleton <<< toEnum`.\nIn order to keep the string-related API surface area small, this function\nwill probably be removed at some point.\n\nReturn the character corresponding to the given Unicode code point and\n`Nothing` if the given number is outside the range 0 .. 0x10FFFF.\nThis function uses `String` instead of `Char` because PureScript\n`Char`s must be UTF-16 code units and hence cannot represent all Unicode\ncode points.\n","title":"fromCodePoint","info":{"declType":"value","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}]}},"sourceSpan":{"start":[24,1],"name":"/home/ags/projects/menelaos/purescript-stringutils/src/Data/Char/Utils.purs","end":[24,37]}},{"children":[],"comments":"Return true if the given character (Unicode code point) is a high or low\nsurrogate code point.\nThis function uses `String` instead of `Char` because PureScript\n`Char`s must be UTF-16 code units and hence cannot represent all Unicode\ncode points.\n","title":"isSurrogate","info":{"declType":"value","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}},"sourceSpan":{"start":[38,1],"name":"/home/ags/projects/menelaos/purescript-stringutils/src/Data/Char/Utils.purs","end":[38,33]}},{"children":[],"comments":"Return the Unicode code point of a character.\nThis function uses `String` instead of `Char` because PureScript\n`Char`s must be UTF-16 code units and hence cannot represent all Unicode\ncode points.\n\nExample:\n```purescript\ntoCodePoint '∀' == 8704\n```\n","title":"toCodePoint","info":{"declType":"value","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}},"sourceSpan":{"start":[50,1],"name":"/home/ags/projects/menelaos/purescript-stringutils/src/Data/Char/Utils.purs","end":[50,44]}},{"children":[],"comments":"Return the character corresponding to the given Unicode code point.\n**Unsafe:** Throws runtime exception if the given number is outside the\nrange 0 .. 0x10FFFF.\nThis function uses `String` instead of `Char` because PureScript\n`Char`s must be UTF-16 code units and hence cannot represent all Unicode\ncode points.\n","title":"unsafeFromCodePoint","info":{"declType":"value","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}},"sourceSpan":{"start":[58,1],"name":"/home/ags/projects/menelaos/purescript-stringutils/src/Data/Char/Utils.purs","end":[58,52]}}]},{"reExports":[],"name":"Data.String.Utils","comments":null,"declarations":[{"children":[{"comments":null,"title":"NFC","info":{"arguments":[],"declType":"dataConstructor"},"sourceSpan":null},{"comments":null,"title":"NFD","info":{"arguments":[],"declType":"dataConstructor"},"sourceSpan":null},{"comments":null,"title":"NFKC","info":{"arguments":[],"declType":"dataConstructor"},"sourceSpan":null},{"comments":null,"title":"NFKD","info":{"arguments":[],"declType":"dataConstructor"},"sourceSpan":null},{"comments":null,"title":"showNormalizationForm","info":{"declType":"instance","dependencies":[],"type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Show"],"Show"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","String","Utils"],"NormalizationForm"]}]}},"sourceSpan":{"start":[237,1],"name":"/home/ags/projects/menelaos/purescript-stringutils/src/Data/String/Utils.purs","end":[241,21]}}],"comments":"Possible Unicode Normalization Forms\n","title":"NormalizationForm","info":{"declType":"data","dataDeclType":"data","typeArguments":[]},"sourceSpan":{"start":[235,1],"name":"/home/ags/projects/menelaos/purescript-stringutils/src/Data/String/Utils.purs","end":[235,49]}},{"children":[],"comments":"DEPRECATED: With the adoption of CodePoints in `purescript-strings`, this\nfunction can now be reproduced via\n`charAt n = map Data.String.singleton <<< Data.String.codePointAt n`.\nIn order to keep the string-related API surface area small, this function\nwill probably be removed at some point.\n\nReturn the character at the given index, if the index is within bounds.\nNote that this function handles Unicode as you would expect.\nIf you want a simple wrapper around JavaScript's `String.prototype.charAt`\nmethod, you should use the `Data.String.CodeUnits.charAt` function from\n`purescript-strings.`\nThis function returns a `String` instead of a `Char` because PureScript\n`Char`s must be UTF-16 code units and hence cannot represent all Unicode\ncode points.\n\nExample:\n```purescript\n-- Data.String.Utils.charAt\ncharAt 2 \"ℙ∪𝕣ⅇႽ𝚌𝕣ⅈ𝚙†\" == Just \"𝕣\"\n-- Data.String.CodeUnits.charAt\ncharAt 2 \"ℙ∪𝕣ⅇႽ𝚌𝕣ⅈ𝚙†\" == Just '�'\n```\n","title":"charAt","info":{"declType":"value","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}]}]}},"sourceSpan":{"start":[64,1],"name":"/home/ags/projects/menelaos/purescript-stringutils/src/Data/String/Utils.purs","end":[64,40]}},{"children":[],"comments":"DEPRECATED: This function is now available in `purescript-strings`.\n\nReturn the Unicode code point value of the character at the given index,\nif the index is within bounds.\nNote that this function handles Unicode as you would expect.\nIf you want a simple wrapper around JavaScript's\n`String.prototype.codePointAt` method, you should use `codePointAt'`.\n\nExample:\n```purescript\ncodePointAt   0 \"𝟘𝟙𝟚𝟛𝟜𝟝𝟞𝟟𝟠𝟡\" == Just 120792\ncodePointAt   1 \"𝟘𝟙𝟚𝟛𝟜𝟝𝟞𝟟𝟠𝟡\" == Just 120793\ncodePointAt   2 \"𝟘𝟙𝟚𝟛𝟜𝟝𝟞𝟟𝟠𝟡\" == Just 120794\ncodePointAt  19 \"𝟘𝟙𝟚𝟛𝟜𝟝𝟞𝟟𝟠𝟡\" == Nothing\n\ncodePointAt'  0 \"𝟘𝟙𝟚𝟛𝟜𝟝𝟞𝟟𝟠𝟡\" == Just 120793\ncodePointAt'  1 \"𝟘𝟙𝟚𝟛𝟜𝟝𝟞𝟟𝟠𝟡\" == Just 57304   -- Surrogate code point\ncodePointAt'  2 \"𝟘𝟙𝟚𝟛𝟜𝟝𝟞𝟟𝟠𝟡\" == Just 120794\ncodePointAt' 19 \"𝟘𝟙𝟚𝟛𝟜𝟝𝟞𝟟𝟠𝟡\" == Just 57313   -- Surrogate code point\n```\n","title":"codePointAt","info":{"declType":"value","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}]}]}},"sourceSpan":{"start":[87,1],"name":"/home/ags/projects/menelaos/purescript-stringutils/src/Data/String/Utils.purs","end":[87,42]}},{"children":[],"comments":"Return the Unicode code point value of the character at the given index,\nif the index is within bounds.\nThis function is a simple wrapper around JavaScript's\n`String.prototype.codePointAt` method. This means that if the index does\nnot point to the beginning of a valid surrogate pair, the code unit at\nthe index (i.e. the Unicode code point of the surrogate pair half) is\nreturned instead.\nIf you want to treat a string as an array of Unicode Code Points, use\n`codePointAt` from `purescript-strings` instead.\n\nExample:\n```purescript\ncodePointAt'  0 \"𝟘𝟙𝟚𝟛𝟜𝟝𝟞𝟟𝟠𝟡\" == Just 120793\ncodePointAt'  1 \"𝟘𝟙𝟚𝟛𝟜𝟝𝟞𝟟𝟠𝟡\" == Just 57304   -- Surrogate code point\ncodePointAt'  2 \"𝟘𝟙𝟚𝟛𝟜𝟝𝟞𝟟𝟠𝟡\" == Just 120794\ncodePointAt' 19 \"𝟘𝟙𝟚𝟛𝟜𝟝𝟞𝟟𝟠𝟡\" == Just 57313   -- Surrogate code point\n\ncodePointAt   0 \"𝟘𝟙𝟚𝟛𝟜𝟝𝟞𝟟𝟠𝟡\" == Just 120792\ncodePointAt   1 \"𝟘𝟙𝟚𝟛𝟜𝟝𝟞𝟟𝟠𝟡\" == Just 120793\ncodePointAt   2 \"𝟘𝟙𝟚𝟛𝟜𝟝𝟞𝟟𝟠𝟡\" == Just 120794\ncodePointAt  19 \"𝟘𝟙𝟚𝟛𝟜𝟝𝟞𝟟𝟠𝟡\" == Nothing\n```\n","title":"codePointAt'","info":{"declType":"value","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}]}]}},"sourceSpan":{"start":[119,1],"name":"/home/ags/projects/menelaos/purescript-stringutils/src/Data/String/Utils.purs","end":[119,43]}},{"children":[],"comments":"Determine whether the second string ends with the first one.\n","title":"endsWith","info":{"declType":"value","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}]}},"sourceSpan":{"start":[130,1],"name":"/home/ags/projects/menelaos/purescript-stringutils/src/Data/String/Utils.purs","end":[130,55]}},{"children":[],"comments":"Determine whether the second string ends with the first one\nbut search as if the string were only as long as the given argument.\n","title":"endsWith'","info":{"declType":"value","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}]}]}},"sourceSpan":{"start":[134,1],"name":"/home/ags/projects/menelaos/purescript-stringutils/src/Data/String/Utils.purs","end":[134,48]}},{"children":[],"comments":"Escape a string so that it can be used as a literal string within a regular\nexpression.\n","title":"escapeRegex","info":{"declType":"value","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}},"sourceSpan":{"start":[141,1],"name":"/home/ags/projects/menelaos/purescript-stringutils/src/Data/String/Utils.purs","end":[141,47]}},{"children":[],"comments":"Keep only those characters that satisfy the predicate.\nThis function uses `String` instead of `Char` because PureScript\n`Char`s must be UTF-16 code units and hence cannot represent all Unicode\ncode points.\n","title":"filter","info":{"declType":"value","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}]}},"sourceSpan":{"start":[147,1],"name":"/home/ags/projects/menelaos/purescript-stringutils/src/Data/String/Utils.purs","end":[147,50]}},{"children":[],"comments":"Convert an array of characters into a `String`.\nThis function uses `String` instead of `Char` because PureScript\n`Char`s must be UTF-16 code units and hence cannot represent all Unicode\ncode points.\n\nExample:\n```purescript\nfromCharArray [\"ℙ\", \"∪\", \"𝕣\", \"ⅇ\", \"Ⴝ\", \"𝚌\", \"𝕣\", \"ⅈ\", \"𝚙\", \"†\"]\n  == \"ℙ∪𝕣ⅇႽ𝚌𝕣ⅈ𝚙†\"\n```\n","title":"fromCharArray","info":{"declType":"value","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}},"sourceSpan":{"start":[160,1],"name":"/home/ags/projects/menelaos/purescript-stringutils/src/Data/String/Utils.purs","end":[160,55]}},{"children":[],"comments":"Determine whether the second arguments contains the first one.\n\nExample:\n```purescript\nincludes \"Merchant\" \"The Merchant of Venice\" === true\nincludes \"Duncan\"   \"The Merchant of Venice\" === false\n```\n","title":"includes","info":{"declType":"value","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}]}},"sourceSpan":{"start":[169,1],"name":"/home/ags/projects/menelaos/purescript-stringutils/src/Data/String/Utils.purs","end":[169,55]}},{"children":[],"comments":"Determine whether the second string argument contains the first one,\nbeginning the search at the given position.\nNote that this function handles Unicode as you would expect.\nNegative `position` values result in a search from the beginning of the\nstring.\n\nExample:\n```purescript\nincludes' \"𝟙\"  1 \"𝟘𝟙𝟚𝟛𝟜𝟝𝟞𝟟𝟠𝟡\" == true\nincludes' \"𝟙\"  2 \"𝟘𝟙𝟚𝟛𝟜𝟝𝟞𝟟𝟠𝟡\" == false\nincludes' \"𝟡\" 10 \"𝟘𝟙𝟚𝟛𝟜𝟝𝟞𝟟𝟠𝟡\" == false\n-- This behaviour is different from `String.prototype.includes`:\n-- \"𝟘𝟙𝟚𝟛𝟜𝟝𝟞𝟟𝟠𝟡\".includes(\"𝟡\", 10) == true\n```\n","title":"includes'","info":{"declType":"value","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}]}]}},"sourceSpan":{"start":[185,1],"name":"/home/ags/projects/menelaos/purescript-stringutils/src/Data/String/Utils.purs","end":[185,48]}},{"children":[],"comments":"DEPRECATED: This function is now available in `purescript-strings`.\n\nReturn the number of Unicode code points in a string.\nNote that this function correctly accounts for Unicode symbols that\nare made up of surrogate pairs. If you want a simple wrapper around\nJavaScript's `string.length` property, you should use the\n`Data.String.CodeUnits.length` function from `purescript-strings`.\n\n```purescript\nlength \"PureScript\" == 10\nlength \"ℙ∪𝕣ⅇႽ𝚌𝕣ⅈ𝚙†\" == 10    -- 14 with `Data.String.length`\n```\n","title":"length","info":{"declType":"value","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}},"sourceSpan":{"start":[202,1],"name":"/home/ags/projects/menelaos/purescript-stringutils/src/Data/String/Utils.purs","end":[202,39]}},{"children":[],"comments":"Split a string into an array of strings which were delimited by newline\ncharacters.\n\nExample:\n```purescript\nlines \"Action\\nis\\neloquence.\" == [\"Action\", \"is\", \"eloquence.\"]\n```\n","title":"lines","info":{"declType":"value","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}]}},"sourceSpan":{"start":[211,1],"name":"/home/ags/projects/menelaos/purescript-stringutils/src/Data/String/Utils.purs","end":[211,47]}},{"children":[],"comments":"Return the string obtained by applying the mapping function to each\ncharacter (i.e. Unicode code point) of the input string.\nNote that this is probably not what you want as Unicode code points are\nnot necessarily the same as user-perceived characters (grapheme clusters).\nOnly use this function if you know what you are doing.\nThis function uses `String`s instead of `Char`s because PureScript\n`Char`s must be UTF-16 code units and hence cannot represent all Unicode\ncode points.\n\nExample:\n```purescript\n-- Mapping over what appears to be six characters...\nmapChars (const \"x\") \"Åström\" == \"xxxxxxxx\" -- See? Don't use this!\n```\n","title":"mapChars","info":{"declType":"value","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"ParensInType","contents":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}]}},"sourceSpan":{"start":[227,1],"name":"/home/ags/projects/menelaos/purescript-stringutils/src/Data/String/Utils.purs","end":[227,51]}},{"children":[],"comments":"Return the `Normalization Form C` of a given string.\nThis is the form that is recommended by the W3C.\n","title":"normalize","info":{"declType":"value","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}},"sourceSpan":{"start":[232,1],"name":"/home/ags/projects/menelaos/purescript-stringutils/src/Data/String/Utils.purs","end":[232,45]}},{"children":[],"comments":"Return a given Unicode Normalization Form of a string.\n","title":"normalize'","info":{"declType":"value","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Data","String","Utils"],"NormalizationForm"]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}]}},"sourceSpan":{"start":[244,1],"name":"/home/ags/projects/menelaos/purescript-stringutils/src/Data/String/Utils.purs","end":[244,52]}},{"children":[],"comments":"Return a string that contains the specified number of copies of the input\nstring concatenated together. Return `Nothing` if the repeat count is\nnegative or if the resulting string would overflow the maximum string size.\n\nExample:\n```purescript\nrepeat 3 \"𝟞\" == Just \"𝟞𝟞𝟞\"\nrepeat (-1) \"PureScript\" == Nothing\nrepeat 2147483647 \"PureScript\" == Nothing\n```\n","title":"repeat","info":{"declType":"value","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}]}]}},"sourceSpan":{"start":[259,1],"name":"/home/ags/projects/menelaos/purescript-stringutils/src/Data/String/Utils.purs","end":[259,40]}},{"children":[],"comments":"DEPRECATED: This function is now available in `purescript-strings`.\n\nReplace all occurences of the first argument with the second argument.\n","title":"replaceAll","info":{"declType":"value","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}]}]}},"sourceSpan":{"start":[272,1],"name":"/home/ags/projects/menelaos/purescript-stringutils/src/Data/String/Utils.purs","end":[272,51]}},{"children":[],"comments":"Determine whether the second argument starts with the first one.\n","title":"startsWith","info":{"declType":"value","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}]}},"sourceSpan":{"start":[280,1],"name":"/home/ags/projects/menelaos/purescript-stringutils/src/Data/String/Utils.purs","end":[280,57]}},{"children":[],"comments":"Determine whether a string starts with a certain substring at a given\nposition.\n","title":"startsWith'","info":{"declType":"value","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}]}]}},"sourceSpan":{"start":[284,1],"name":"/home/ags/projects/menelaos/purescript-stringutils/src/Data/String/Utils.purs","end":[284,50]}},{"children":[],"comments":"Strip a set of characters from a string.\nThis function is case-sensitive.\n\nExample:\n```purescript\nstripChars \"aeiou\" \"PureScript\" == \"PrScrpt\"\nstripChars \"AEIOU\" \"PureScript\" == \"PureScript\"\n```\n","title":"stripChars","info":{"declType":"value","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}]}},"sourceSpan":{"start":[297,1],"name":"/home/ags/projects/menelaos/purescript-stringutils/src/Data/String/Utils.purs","end":[297,56]}},{"children":[],"comments":"Strip diacritics from a string.\n\nExample:\n```purescript\nstripDiacritics \"Ångström\"        == \"Angstrom\"\nstripDiacritics \"Crème Brulée\"    == \"Creme Brulee\"\nstripDiacritics \"Götterdämmerung\" == \"Gotterdammerung\"\nstripDiacritics \"ℙ∪𝕣ⅇႽ𝚌𝕣ⅈ𝚙†\"      == \"ℙ∪𝕣ⅇႽ𝚌𝕣ⅈ𝚙†\"\nstripDiacritics \"Raison d'être\"   == \"Raison d'etre\"\nstripDiacritics \"Týr\"             == \"Tyr\"\nstripDiacritics \"Zürich\"          == \"Zurich\"\n```\n","title":"stripDiacritics","info":{"declType":"value","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}},"sourceSpan":{"start":[311,1],"name":"/home/ags/projects/menelaos/purescript-stringutils/src/Data/String/Utils.purs","end":[311,51]}},{"children":[],"comments":"DEPRECATED: With the adoption of CodePoints in `purescript-strings`, this\nfunction can now be reproduced via\n`map Data.String.singleton <<< Data.String.toCodePointArray`.\nIn order to keep the string-related API surface area small, this function\nwill probably be removed at some point.\n\nConvert a string to an array of Unicode code points.\nNote that this function is different from\n`Data.String.CodeUnits.toCharArray` in `purescript-strings` which\nconverts a string to an array of 16-bit code units.\nThe difference becomes apparent when converting strings\nthat contain characters which are internally represented\nas surrogate pairs.\nThis function uses `String`s instead of `Char`s because PureScript\n`Char`s must be UTF-16 code units and hence cannot represent all Unicode\ncode points.\n\nExample:\n```purescript\n-- Data.String.Utils\ntoCharArray \"ℙ∪𝕣ⅇႽ𝚌𝕣ⅈ𝚙†\"\n  == [\"ℙ\", \"∪\", \"𝕣\", \"ⅇ\", \"Ⴝ\", \"𝚌\", \"𝕣\", \"ⅈ\", \"𝚙\", \"†\"]\n\n-- Data.String.CodeUnits\ntoCharArray \"ℙ∪𝕣ⅇႽ𝚌𝕣ⅈ𝚙†\" ==\n  ['ℙ', '∪', '�', '�', 'ⅇ', 'Ⴝ', '�', '�', '�', '�', 'ⅈ', '�', '�', '†']\n```\n","title":"toCharArray","info":{"declType":"value","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}]}},"sourceSpan":{"start":[340,1],"name":"/home/ags/projects/menelaos/purescript-stringutils/src/Data/String/Utils.purs","end":[340,53]}},{"children":[],"comments":"Return the Unicode code point value of the character at the given index,\nif the index is within bounds.\nNote that this function handles Unicode as you would expect.\nIf you want a simple (unsafe) wrapper around JavaScript's\n`String.prototype.codePointAt` method, you should use `unsafeCodePointAt'`.\n\n**Unsafe:** Throws runtime exception if the index is not within bounds.\n\nExample:\n```purescript\nunsafeCodePointAt   0 \"𝟘𝟙𝟚𝟛𝟜𝟝𝟞𝟟𝟠𝟡\" == 120792\nunsafeCodePointAt   1 \"𝟘𝟙𝟚𝟛𝟜𝟝𝟞𝟟𝟠𝟡\" == 120793\nunsafeCodePointAt   2 \"𝟘𝟙𝟚𝟛𝟜𝟝𝟞𝟟𝟠𝟡\" == 120794\nunsafeCodePointAt  19 \"𝟘𝟙𝟚𝟛𝟜𝟝𝟞𝟟𝟠𝟡\" -- Error\n\nunsafeCodePointAt'  0 \"𝟘𝟙𝟚𝟛𝟜𝟝𝟞𝟟𝟠𝟡\" == 120793\nunsafeCodePointAt'  1 \"𝟘𝟙𝟚𝟛𝟜𝟝𝟞𝟟𝟠𝟡\" == 57304   -- Surrogate code point\nunsafeCodePointAt'  2 \"𝟘𝟙𝟚𝟛𝟜𝟝𝟞𝟟𝟠𝟡\" == 120794\nunsafeCodePointAt' 19 \"𝟘𝟙𝟚𝟛𝟜𝟝𝟞𝟟𝟠𝟡\" == 57313   -- Surrogate code point\n```\n","title":"unsafeCodePointAt","info":{"declType":"value","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}]}},"sourceSpan":{"start":[362,1],"name":"/home/ags/projects/menelaos/purescript-stringutils/src/Data/String/Utils.purs","end":[362,57]}},{"children":[],"comments":"Return the Unicode code point value of the character at the given index,\nif the index is within bounds.\nThis function is a simple (unsafe) wrapper around JavaScript's\n`String.prototype.codePointAt` method. This means that if the index does\nnot point to the beginning of a valid surrogate pair, the code unit at\nthe index (i.e. the Unicode code point of the surrogate pair half) is\nreturned instead.\nIf you want to treat a string as an array of Unicode Code Points, use\n`unsafeCodePointAt` instead.\n\nExample:\n```purescript\nunsafeCodePointAt'  0 \"𝟘𝟙𝟚𝟛𝟜𝟝𝟞𝟟𝟠𝟡\" == 120793\nunsafeCodePointAt'  1 \"𝟘𝟙𝟚𝟛𝟜𝟝𝟞𝟟𝟠𝟡\" == 57304   -- Surrogate code point\nunsafeCodePointAt'  2 \"𝟘𝟙𝟚𝟛𝟜𝟝𝟞𝟟𝟠𝟡\" == 120794\nunsafeCodePointAt' 19 \"𝟘𝟙𝟚𝟛𝟜𝟝𝟞𝟟𝟠𝟡\" == 57313   -- Surrogate code point\n\nunsafeCodePointAt   0 \"𝟘𝟙𝟚𝟛𝟜𝟝𝟞𝟟𝟠𝟡\" == 120792\nunsafeCodePointAt   1 \"𝟘𝟙𝟚𝟛𝟜𝟝𝟞𝟟𝟠𝟡\" == 120793\nunsafeCodePointAt   2 \"𝟘𝟙𝟚𝟛𝟜𝟝𝟞𝟟𝟠𝟡\" == 120794\nunsafeCodePointAt  19 \"𝟘𝟙𝟚𝟛𝟜𝟝𝟞𝟟𝟠𝟡\" -- Error\n```\n","title":"unsafeCodePointAt'","info":{"declType":"value","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}]}},"sourceSpan":{"start":[386,1],"name":"/home/ags/projects/menelaos/purescript-stringutils/src/Data/String/Utils.purs","end":[386,43]}},{"children":[],"comments":"Return a string that contains the specified number of copies of the input\nstring concatenated together.\n\n**Unsafe:** Throws runtime exception if the repeat count is negative or if\nthe resulting string would overflow the maximum string size.\n","title":"unsafeRepeat","info":{"declType":"value","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}]}},"sourceSpan":{"start":[396,1],"name":"/home/ags/projects/menelaos/purescript-stringutils/src/Data/String/Utils.purs","end":[396,55]}},{"children":[],"comments":"Split a string into an array of strings which were delimited by white space\ncharacters.\n\nExample:\n```purescript\nwords \"Action is eloquence.\" == [\"Action\", \"is\", \"eloquence.\"]\n```\n","title":"words","info":{"declType":"value","type":{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"annotation":[],"tag":"TypeApp","contents":[{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"annotation":[],"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}]}},"sourceSpan":{"start":[405,1],"name":"/home/ags/projects/menelaos/purescript-stringutils/src/Data/String/Utils.purs","end":[405,47]}}]}],"resolvedDependencies":{"purescript-free":"5.2.0","purescript-exceptions":"4.0.0","purescript-newtype":"3.0.0","purescript-effect":"2.0.1","purescript-ordered-collections":"1.6.1","purescript-control":"4.1.0","purescript-console":"4.2.0","purescript-either":"4.1.1","purescript-profunctor":"4.0.0","purescript-arrays":"5.3.0","purescript-maybe":"4.0.1","purescript-strongcheck":"4.1.1","purescript-type-equality":"3.0.0","purescript-exists":"4.0.0","purescript-distributive":"4.0.0","purescript-unfoldable":"4.0.2","purescript-invariant":"4.1.0","purescript-lazy":"4.0.0","purescript-foldable-traversable":"4.1.1","purescript-tailrec":"4.0.0","purescript-gen":"2.1.1","purescript-prelude":"4.1.1","purescript-st":"4.0.0","purescript-bifunctors":"4.0.0","purescript-nonempty":"5.0.0","purescript-contravariant":"4.0.1","purescript-unsafe-coerce":"4.0.0","purescript-refs":"4.1.0","purescript-integers":"4.0.0","purescript-orders":"4.0.0","purescript-transformers":"4.2.0","purescript-globals":"4.0.0","purescript-math":"2.1.1","purescript-enums":"4.0.1","purescript-catenable-lists":"5.0.1","purescript-random":"4.0.0","purescript-tuples":"5.1.0","purescript-partial":"2.0.1","purescript-strings":"4.0.1","purescript-identity":"4.1.0","purescript-machines":"5.1.0","purescript-lists":"5.4.1","purescript-datetime":"4.1.1","purescript-functions":"4.0.0"},"version":"0.0.9","github":["menelaos","purescript-stringutils"],"versionTag":"v0.0.9","moduleMap":{"Data.BooleanAlgebra":"purescript-prelude","Data.Decide":"purescript-contravariant","Data.Ring":"purescript-prelude","Control.Monad.Trans.Class":"purescript-transformers","Data.NonEmpty":"purescript-nonempty","Effect.Uncurried":"purescript-effect","Data.Char.Gen":"purescript-strings","Data.String.NonEmpty":"purescript-strings","Effect":"purescript-effect","Data.Traversable.Accum.Internal":"purescript-foldable-traversable","Data.Enum.Gen":"purescript-enums","Control.Comonad.Env":"purescript-transformers","Control.Comonad.Traced.Class":"purescript-transformers","Data.Int.Bits":"purescript-integers","Data.DateTime":"purescript-datetime","Data.Bifunctor.Flip":"purescript-bifunctors","Data.String.CodePoints":"purescript-strings","Data.Ord":"purescript-prelude","Test.StrongCheck.Gen":"purescript-strongcheck","Control.Monad.Gen":"purescript-gen","Control.Monad.Free.Class":"purescript-free","Type.Data.Row":"purescript-prelude","Data.Date":"purescript-datetime","Control.Comonad.Cofree.Class":"purescript-free","Data.Monoid.Dual":"purescript-prelude","Control.Monad.Rec.Class":"purescript-tailrec","Data.Time.Component":"purescript-datetime","Data.Bitraversable":"purescript-foldable-traversable","Data.Profunctor.Costar":"purescript-profunctor","Test.StrongCheck.Data.AlphaNumString":"purescript-strongcheck","Test.StrongCheck.Data.ApproxNumber":"purescript-strongcheck","Data.Profunctor.Cowrap":"purescript-profunctor","Data.Boolean":"purescript-prelude","Data.Map":"purescript-ordered-collections","Control.Biapplicative":"purescript-bifunctors","Data.CatList":"purescript-catenable-lists","Effect.Exception.Unsafe":"purescript-exceptions","Data.Array.NonEmpty.Internal":"purescript-arrays","Data.Coyoneda":"purescript-free","Data.Array.ST.Iterator":"purescript-arrays","Data.DateTime.Gen":"purescript-datetime","Data.String.Pattern":"purescript-strings","Data.Bounded":"purescript-prelude","Control.Monad.State.Trans":"purescript-transformers","Data.TraversableWithIndex":"purescript-foldable-traversable","Data.Int":"purescript-integers","Test.StrongCheck":"purescript-strongcheck","Data.Profunctor.Cochoice":"purescript-profunctor","Data.Show":"purescript-prelude","Data.Bifunctor.Clown":"purescript-bifunctors","Control.Monad.Writer.Trans":"purescript-transformers","Data.Foldable":"purescript-foldable-traversable","Data.Divide":"purescript-contravariant","Control.Comonad.Store.Class":"purescript-transformers","Data.Enum":"purescript-enums","Test.StrongCheck.Perturb":"purescript-strongcheck","Control.Monad.Trampoline":"purescript-free","Test.StrongCheck.Data.ArbDateTime":"purescript-strongcheck","Control.Apply":"purescript-prelude","Data.Functor.Contravariant":"purescript-contravariant","Data.Tuple.Nested":"purescript-tuples","Control.Monad":"purescript-prelude","Data.Lazy":"purescript-lazy","Data.Monoid":"purescript-prelude","Data.Profunctor.Closed":"purescript-profunctor","Control.Monad.List.Trans":"purescript-transformers","Control.Monad.RWS":"purescript-transformers","Data.String.Common":"purescript-strings","Data.Maybe.First":"purescript-maybe","Control.Bind":"purescript-prelude","Data.Profunctor.Split":"purescript-profunctor","Test.StrongCheck.Landscape":"purescript-strongcheck","Data.Monoid.Additive":"purescript-prelude","Data.Symbol":"purescript-prelude","Data.Map.Gen":"purescript-ordered-collections","Data.String.Regex":"purescript-strings","Data.Profunctor.Join":"purescript-profunctor","Data.HeytingAlgebra":"purescript-prelude","Control.Alt":"purescript-control","Data.Date.Gen":"purescript-datetime","Control.Monad.Maybe.Trans":"purescript-transformers","Control.Monad.Cont":"purescript-transformers","Control.Monad.ST.Internal":"purescript-st","Type.Data.RowList":"purescript-prelude","Data.Time.Component.Gen":"purescript-datetime","Effect.Ref":"purescript-refs","Data.Either.Inject":"purescript-either","Test.StrongCheck.Data.NonZero":"purescript-strongcheck","Data.List.ZipList":"purescript-lists","Data.Ord.Min":"purescript-orders","Data.Ord.Unsafe":"purescript-prelude","Data.Semigroup":"purescript-prelude","Data.Array.NonEmpty":"purescript-arrays","Control.Monad.Reader":"purescript-transformers","Control.Comonad.Traced.Trans":"purescript-transformers","Data.Ord.Down":"purescript-orders","Data.Array.ST.Partial":"purescript-arrays","Effect.Unsafe":"purescript-effect","Data.Profunctor.Clown":"purescript-profunctor","Data.Tuple":"purescript-tuples","Data.Semigroup.Foldable":"purescript-foldable-traversable","Control.Biapply":"purescript-bifunctors","Data.Distributive":"purescript-distributive","Effect.Exception":"purescript-exceptions","Type.Equality":"purescript-type-equality","Control.Alternative":"purescript-control","Data.Semiring":"purescript-prelude","Data.Exists":"purescript-exists","Effect.Console":"purescript-console","Data.Traversable.Accum":"purescript-foldable-traversable","Data.CommutativeRing":"purescript-prelude","Data.NaturalTransformation":"purescript-prelude","Data.Monoid.Conj":"purescript-prelude","Data.Yoneda":"purescript-free","Data.Profunctor.Star":"purescript-profunctor","Data.Unfoldable":"purescript-unfoldable","Data.Profunctor.Wrap":"purescript-profunctor","Test.StrongCheck.Data.Signum":"purescript-strongcheck","Test.StrongCheck.Data.Positive":"purescript-strongcheck","Control.Comonad.Store.Trans":"purescript-transformers","Control.Monad.ST":"purescript-st","Control.Monad.State.Class":"purescript-transformers","Data.List.Types":"purescript-lists","Data.String.NonEmpty.CodeUnits":"purescript-strings","Data.Functor":"purescript-prelude","Unsafe.Coerce":"purescript-unsafe-coerce","Control.Monad.Writer.Class":"purescript-transformers","Data.Profunctor.Strong":"purescript-profunctor","Data.CatQueue":"purescript-catenable-lists","Control.Monad.Except":"purescript-transformers","Data.Interval":"purescript-datetime","Data.List.Lazy.Types":"purescript-lists","Control.Category":"purescript-prelude","Data.Interval.Duration":"purescript-datetime","Control.Monad.Gen.Common":"purescript-gen","Control.Monad.RWS.Trans":"purescript-transformers","Control.Monad.Cont.Trans":"purescript-transformers","Data.Maybe":"purescript-maybe","Data.String.Regex.Unsafe":"purescript-strings","Test.StrongCheck.Data.ArbBoundedEnum":"purescript-strongcheck","Data.Set":"purescript-ordered-collections","Data.Profunctor":"purescript-profunctor","Control.Comonad":"purescript-control","Data.Function":"purescript-prelude","Data.List":"purescript-lists","Data.Field":"purescript-prelude","Data.List.Lazy":"purescript-lists","Data.EuclideanRing":"purescript-prelude","Data.Semigroup.Last":"purescript-prelude","Data.Semigroup.First":"purescript-prelude","Data.Functor.Invariant":"purescript-invariant","Control.Comonad.Traced":"purescript-transformers","Global.Unsafe":"purescript-globals","Data.Comparison":"purescript-contravariant","Data.String.Unsafe":"purescript-strings","Prelude":"purescript-prelude","Effect.Class":"purescript-effect","Data.Predicate":"purescript-contravariant","Partial.Unsafe":"purescript-partial","Data.Array":"purescript-arrays","Data.Bifunctor.Product":"purescript-bifunctors","Control.Extend":"purescript-control","Data.Unfoldable1":"purescript-unfoldable","Control.Lazy":"purescript-control","Data.Function.Uncurried":"purescript-functions","Control.Monad.Reader.Trans":"purescript-transformers","Control.Comonad.Env.Class":"purescript-transformers","Test.StrongCheck.Arbitrary":"purescript-strongcheck","Data.Interval.Duration.Iso":"purescript-datetime","Data.Eq":"purescript-prelude","Data.Either.Nested":"purescript-either","Control.Comonad.Cofree":"purescript-free","Data.Newtype":"purescript-newtype","Data.Semigroup.Traversable":"purescript-foldable-traversable","Data.Bifunctor":"purescript-bifunctors","Effect.Random":"purescript-random","Data.Monoid.Disj":"purescript-prelude","Control.Monad.Gen.Class":"purescript-gen","Data.Array.Partial":"purescript-arrays","Data.String.CaseInsensitive":"purescript-strings","Control.Monad.Free":"purescript-free","Control.MonadPlus":"purescript-control","Data.Void":"purescript-prelude","Control.MonadZero":"purescript-control","Data.DateTime.Instant":"purescript-datetime","Data.Profunctor.Costrong":"purescript-profunctor","Data.Ord.Max":"purescript-orders","Control.Comonad.Store":"purescript-transformers","Control.Monad.Except.Trans":"purescript-transformers","Data.String.CodeUnits":"purescript-strings","Data.Bifunctor.Joker":"purescript-bifunctors","Data.FunctorWithIndex":"purescript-foldable-traversable","Data.Divisible":"purescript-contravariant","Data.DivisionRing":"purescript-prelude","Data.Bifunctor.Wrap":"purescript-bifunctors","Data.Equivalence":"purescript-contravariant","Data.Maybe.Last":"purescript-maybe","Data.Unit":"purescript-prelude","Data.List.NonEmpty":"purescript-lists","Data.List.Lazy.NonEmpty":"purescript-lists","Data.Ordering":"purescript-prelude","Control.Monad.Cont.Class":"purescript-transformers","Data.Identity":"purescript-identity","Math":"purescript-math","Data.Set.NonEmpty":"purescript-ordered-collections","Control.Comonad.Trans.Class":"purescript-transformers","Data.String":"purescript-strings","Test.StrongCheck.LCG":"purescript-strongcheck","Control.Plus":"purescript-control","Data.Profunctor.Joker":"purescript-profunctor","Data.Map.Internal":"purescript-ordered-collections","Data.Time":"purescript-datetime","Data.Time.Duration":"purescript-datetime","Data.Date.Component":"purescript-datetime","Partial":"purescript-partial","Control.Comonad.Env.Trans":"purescript-transformers","Global":"purescript-globals","Control.Monad.Reader.Class":"purescript-transformers","Data.String.NonEmpty.CodePoints":"purescript-strings","Data.Decidable":"purescript-contravariant","Data.String.NonEmpty.Internal":"purescript-strings","Data.Monoid.Multiplicative":"purescript-prelude","Data.String.NonEmpty.CaseInsensitive":"purescript-strings","Data.Array.ST":"purescript-arrays","Control.Monad.Error.Class":"purescript-transformers","Control.Semigroupoid":"purescript-prelude","Data.Monoid.Alternate":"purescript-control","Data.Char":"purescript-strings","Effect.Class.Console":"purescript-console","Data.Bifunctor.Join":"purescript-bifunctors","Data.Bifoldable":"purescript-foldable-traversable","Test.StrongCheck.Data.Negative":"purescript-strongcheck","Control.Monad.ST.Ref":"purescript-st","Data.Monoid.Endo":"purescript-prelude","Control.Monad.State":"purescript-transformers","Data.List.Partial":"purescript-lists","Data.String.Regex.Flags":"purescript-strings","Data.Either":"purescript-either","Data.Time.Duration.Gen":"purescript-datetime","Data.Date.Component.Gen":"purescript-datetime","Control.Applicative":"purescript-prelude","Data.FoldableWithIndex":"purescript-foldable-traversable","Data.Op":"purescript-contravariant","Record.Unsafe":"purescript-prelude","Data.Machine.Mealy":"purescript-machines","Control.Monad.Writer":"purescript-transformers","Data.Profunctor.Choice":"purescript-profunctor","Data.Time.Gen":"purescript-datetime","Data.Traversable":"purescript-foldable-traversable","Data.String.Gen":"purescript-strings"},"compilerVersion":"0.12.2"}