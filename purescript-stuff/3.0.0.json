{"uploader":"rightfold","packageMeta":{"repository":{"url":"https://github.com/rightfold/purescript-stuff.git","type":"git"},"dependencies":{"purescript-fixed-points":"^4.0.0","purescript-proxy":"^2.1.0","purescript-exceptions":"^3.0.0","purescript-newtype":"^2.0.0","purescript-group":"^3.1.0","purescript-control":"^3.3.0","purescript-console":"^3.0.0","purescript-either":"^3.1.0","purescript-profunctor":"^3.2.0","purescript-arrays":"^4.1.2","purescript-maybe":"^3.0.0","purescript-symbols":"^3.0.0","purescript-exists":"^3.0.0","purescript-invariant":"^3.0.0","purescript-io":"^4.0.0","purescript-lazy":"^3.0.0","purescript-monoid":"^3.0.0","purescript-aff":"^3.1.0","purescript-modules":"^3.0.0","purescript-foldable-traversable":"^3.3.1","purescript-debug":"^3.0.0","purescript-tailrec":"^3.3.0","purescript-functors":"^2.1.0","purescript-leibniz":"^4.0.0","purescript-prelude":"^3.0.0","purescript-bifunctors":"^3.0.0","purescript-contravariant":"^3.0.0","purescript-unsafe-coerce":"^3.0.0","purescript-integers":"^3.0.0","purescript-eff":"^3.1.0","purescript-orders":"^3.0.0","purescript-const":"^3.0.0","purescript-transformers":"^3.4.0","purescript-tuples":"^4.1.0","purescript-partial":"^1.2.1","purescript-strings":"^3.2.1","purescript-identity":"^3.1.0","purescript-lists":"^4.7.0"},"name":"purescript-stuff","license":["BSD-3-Clause"]},"tagTime":"2017-06-26T11:33:17+0000","modules":[{"reExports":[{"moduleName":{"package":"purescript-control","item":["Control","Alt"]},"declarations":[{"children":[{"comments":null,"title":"altArray","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Alt"],"Alt"]},{"tag":"TypeConstructor","contents":[["Prim"],"Array"]}]}},"sourceSpan":{"start":[26,1],"name":"/home/r/purescript-stuff/bower_components/purescript-control/src/Control/Alt.purs","end":[27,9]}}],"comments":"The `Alt` type class identifies an associative operation on a type\nconstructor.  It is similar to `Semigroup`, except that it applies to\ntypes of kind `* -> *`, like `Array` or `List`, rather than concrete types\n`String` or `Number`.\n\n`Alt` instances are required to satisfy the following laws:\n\n- Associativity: `(x <|> y) <|> z == x <|> (y <|> z)`\n- Distributivity: `f <$> (x <|> y) == (f <$> x) <|> (f <$> y)`\n\nFor example, the `Array` (`[]`) type is an instance of `Alt`, where\n`(<|>)` is defined to be concatenation.\n","title":"Alt","info":{"fundeps":[],"arguments":[["f",null]],"declType":"typeClass","superclasses":[{"constraintClass":[["Data","Functor"],"Functor"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}],"constraintData":null}]},"sourceSpan":{"start":[21,1],"name":"/home/r/purescript-stuff/bower_components/purescript-control/src/Control/Alt.purs","end":[22,37]}},{"children":[],"comments":null,"title":"(<|>)","info":{"declType":"alias","alias":[["Control","Alt"],{"Right":{"Left":{"Ident":"alt"}}}],"fixity":{"associativity":"infixl","precedence":3}},"sourceSpan":{"start":[24,1],"name":"/home/r/purescript-stuff/bower_components/purescript-control/src/Control/Alt.purs","end":[24,20]}}]},{"moduleName":{"package":"purescript-control","item":["Control","Alternative"]},"declarations":[{"children":[{"comments":null,"title":"alternativeArray","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Alternative"],"Alternative"]},{"tag":"TypeConstructor","contents":[["Prim"],"Array"]}]}},"sourceSpan":{"start":[27,1],"name":"/home/r/purescript-stuff/bower_components/purescript-control/src/Control/Alternative.purs","end":[27,42]}}],"comments":"The `Alternative` type class has no members of its own; it just specifies\nthat the type constructor has both `Applicative` and `Plus` instances.\n\nTypes which have `Alternative` instances should also satisfy the following\nlaws:\n\n- Distributivity: `(f <|> g) <*> x == (f <*> x) <|> (g <*> x)`\n- Annihilation: `empty <*> f = empty`\n","title":"Alternative","info":{"fundeps":[],"arguments":[["f",null]],"declType":"typeClass","superclasses":[{"constraintClass":[["Control","Applicative"],"Applicative"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}],"constraintData":null},{"constraintClass":[["Control","Plus"],"Plus"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}],"constraintData":null}]},"sourceSpan":{"start":[25,1],"name":"/home/r/purescript-stuff/bower_components/purescript-control/src/Control/Alternative.purs","end":[25,47]}}]},{"moduleName":{"package":"purescript-prelude","item":["Control","Apply"]},"declarations":[{"children":[],"comments":"Lift a function of five arguments to a function which accepts and returns\nvalues wrapped with the type constructor `f`.\n","title":"lift5","info":{"declType":"value","type":{"tag":"ForAll","contents":["g",{"tag":"ForAll","contents":["f",{"tag":"ForAll","contents":["e",{"tag":"ForAll","contents":["d",{"tag":"ForAll","contents":["c",{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Control","Apply"],"Apply"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"c"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"d"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"e"}]},{"tag":"TypeVar","contents":"g"}]}]}]}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"c"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"d"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"e"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"g"}]}]}]}]}]}]}]}]},null]},null]},null]},null]},null]},null]},null]}},"sourceSpan":{"start":[77,1],"name":"/home/r/purescript-stuff/bower_components/purescript-prelude/src/Control/Apply.purs","end":[77,113]}},{"children":[],"comments":"Lift a function of four arguments to a function which accepts and returns\nvalues wrapped with the type constructor `f`.\n","title":"lift4","info":{"declType":"value","type":{"tag":"ForAll","contents":["f",{"tag":"ForAll","contents":["e",{"tag":"ForAll","contents":["d",{"tag":"ForAll","contents":["c",{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Control","Apply"],"Apply"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"c"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"d"}]},{"tag":"TypeVar","contents":"e"}]}]}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"c"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"d"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"e"}]}]}]}]}]}]}]},null]},null]},null]},null]},null]},null]}},"sourceSpan":{"start":[72,1],"name":"/home/r/purescript-stuff/bower_components/purescript-prelude/src/Control/Apply.purs","end":[72,99]}},{"children":[],"comments":"Lift a function of three arguments to a function which accepts and returns\nvalues wrapped with the type constructor `f`.\n","title":"lift3","info":{"declType":"value","type":{"tag":"ForAll","contents":["f",{"tag":"ForAll","contents":["d",{"tag":"ForAll","contents":["c",{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Control","Apply"],"Apply"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"c"}]},{"tag":"TypeVar","contents":"d"}]}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"c"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"d"}]}]}]}]}]}]},null]},null]},null]},null]},null]}},"sourceSpan":{"start":[67,1],"name":"/home/r/purescript-stuff/bower_components/purescript-prelude/src/Control/Apply.purs","end":[67,85]}},{"children":[],"comments":"Lift a function of two arguments to a function which accepts and returns\nvalues wrapped with the type constructor `f`.\n","title":"lift2","info":{"declType":"value","type":{"tag":"ForAll","contents":["f",{"tag":"ForAll","contents":["c",{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Control","Apply"],"Apply"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeVar","contents":"c"}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"c"}]}]}]}]}]},null]},null]},null]},null]}},"sourceSpan":{"start":[62,1],"name":"/home/r/purescript-stuff/bower_components/purescript-prelude/src/Control/Apply.purs","end":[62,71]}}]},{"moduleName":{"package":"purescript-bifunctors","item":["Control","Biapplicative"]},"declarations":[{"children":[{"comments":null,"title":"bipure","info":{"declType":"typeClassMember","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"w"},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]}]},null]},null]}},"sourceSpan":null}],"comments":"`Biapplicative` captures type constructors of two arguments which support lifting of\nfunctions of zero or more arguments, in the sense of `Applicative`.\n","title":"Biapplicative","info":{"fundeps":[],"arguments":[["w",null]],"declType":"typeClass","superclasses":[{"constraintClass":[["Control","Biapply"],"Biapply"],"constraintArgs":[{"tag":"TypeVar","contents":"w"}],"constraintData":null}]},"sourceSpan":{"start":[7,1],"name":"/home/r/purescript-stuff/bower_components/purescript-bifunctors/src/Control/Biapplicative.purs","end":[8,39]}}]},{"moduleName":{"package":"purescript-bifunctors","item":["Control","Biapply"]},"declarations":[{"children":[],"comments":"`Biapply` captures type constructors of two arguments which support lifting of\nfunctions of one or more arguments, in the sense of `Apply`.\n","title":"Biapply","info":{"fundeps":[],"arguments":[["w",null]],"declType":"typeClass","superclasses":[{"constraintClass":[["Data","Bifunctor"],"Bifunctor"],"constraintArgs":[{"tag":"TypeVar","contents":"w"}],"constraintData":null}]},"sourceSpan":{"start":[17,1],"name":"/home/r/purescript-stuff/bower_components/purescript-bifunctors/src/Control/Biapply.purs","end":[18,67]}},{"children":[],"comments":"Lift a function of three arguments.\n","title":"bilift3","info":{"declType":"value","type":{"tag":"ForAll","contents":["h",{"tag":"ForAll","contents":["g",{"tag":"ForAll","contents":["f",{"tag":"ForAll","contents":["e",{"tag":"ForAll","contents":["d",{"tag":"ForAll","contents":["c",{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["w",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Control","Biapply"],"Biapply"],"constraintArgs":[{"tag":"TypeVar","contents":"w"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"c"}]},{"tag":"TypeVar","contents":"d"}]}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"e"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"f"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"g"}]},{"tag":"TypeVar","contents":"h"}]}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"w"},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"e"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"w"},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeVar","contents":"f"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"w"},{"tag":"TypeVar","contents":"c"}]},{"tag":"TypeVar","contents":"g"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"w"},{"tag":"TypeVar","contents":"d"}]},{"tag":"TypeVar","contents":"h"}]}]}]}]}]}]}]},null]},null]},null]},null]},null]},null]},null]},null]},null]}},"sourceSpan":{"start":[46,1],"name":"/home/r/purescript-stuff/bower_components/purescript-bifunctors/src/Control/Biapply.purs","end":[54,11]}},{"children":[],"comments":"Lift a function of two arguments.\n","title":"bilift2","info":{"declType":"value","type":{"tag":"ForAll","contents":["f",{"tag":"ForAll","contents":["e",{"tag":"ForAll","contents":["d",{"tag":"ForAll","contents":["c",{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["w",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Control","Biapply"],"Biapply"],"constraintArgs":[{"tag":"TypeVar","contents":"w"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeVar","contents":"c"}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"d"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"e"}]},{"tag":"TypeVar","contents":"f"}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"w"},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"d"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"w"},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeVar","contents":"e"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"w"},{"tag":"TypeVar","contents":"c"}]},{"tag":"TypeVar","contents":"f"}]}]}]}]}]}]},null]},null]},null]},null]},null]},null]},null]}},"sourceSpan":{"start":[35,1],"name":"/home/r/purescript-stuff/bower_components/purescript-bifunctors/src/Control/Biapply.purs","end":[42,11]}},{"children":[],"comments":null,"title":"(<<*>>)","info":{"declType":"alias","alias":[["Control","Biapply"],{"Right":{"Left":{"Ident":"biapply"}}}],"fixity":{"associativity":"infixl","precedence":4}},"sourceSpan":{"start":[20,1],"name":"/home/r/purescript-stuff/bower_components/purescript-bifunctors/src/Control/Biapply.purs","end":[20,26]}},{"children":[],"comments":null,"title":"(<<*)","info":{"declType":"alias","alias":[["Control","Biapply"],{"Right":{"Left":{"Ident":"biapplySecond"}}}],"fixity":{"associativity":"infixl","precedence":4}},"sourceSpan":{"start":[32,1],"name":"/home/r/purescript-stuff/bower_components/purescript-bifunctors/src/Control/Biapply.purs","end":[32,30]}},{"children":[],"comments":"A convenience operator which can be used to apply the result of `bipure` in\nthe style of `Applicative`:\n\n```purescript\nbipure f g <<$>> x <<*>> y\n```\n","title":"(<<$>>)","info":{"declType":"alias","alias":[["Control","Category"],{"Right":{"Left":{"Ident":"id"}}}],"fixity":{"associativity":"infixl","precedence":4}},"sourceSpan":{"start":[13,1],"name":"/home/r/purescript-stuff/bower_components/purescript-bifunctors/src/Control/Biapply.purs","end":[13,21]}},{"children":[],"comments":null,"title":"(*>>)","info":{"declType":"alias","alias":[["Control","Biapply"],{"Right":{"Left":{"Ident":"biapplyFirst"}}}],"fixity":{"associativity":"infixl","precedence":4}},"sourceSpan":{"start":[26,1],"name":"/home/r/purescript-stuff/bower_components/purescript-bifunctors/src/Control/Biapply.purs","end":[26,29]}}]},{"moduleName":{"package":"purescript-control","item":["Control","Comonad"]},"declarations":[{"children":[{"comments":null,"title":"extract","info":{"declType":"typeClassMember","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"w"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeVar","contents":"a"}]},null]}},"sourceSpan":null}],"comments":"`Comonad` extends the `Extend` class with the `extract` function\nwhich extracts a value, discarding the comonadic context.\n\n`Comonad` is the dual of `Monad`, and `extract` is the dual of `pure`.\n\nLaws:\n\n- Left Identity: `extract <<= xs = xs`\n- Right Identity: `extract (f <<= xs) = f xs`\n","title":"Comonad","info":{"fundeps":[],"arguments":[["w",null]],"declType":"typeClass","superclasses":[{"constraintClass":[["Control","Extend"],"Extend"],"constraintArgs":[{"tag":"TypeVar","contents":"w"}],"constraintData":null}]},"sourceSpan":{"start":[20,1],"name":"/home/r/purescript-stuff/bower_components/purescript-control/src/Control/Comonad.purs","end":[21,31]}}]},{"moduleName":{"package":"purescript-control","item":["Control","Extend"]},"declarations":[{"children":[{"comments":null,"title":"extend","info":{"declType":"typeClassMember","type":{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["b",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"w"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeVar","contents":"b"}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"w"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"w"},{"tag":"TypeVar","contents":"b"}]}]}]},null]},null]}},"sourceSpan":null},{"comments":null,"title":"extendFn","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","Semigroup"],"Semigroup"],"constraintArgs":[{"tag":"TypeVar","contents":"w"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Extend"],"Extend"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"w"}]}}]}},"sourceSpan":{"start":[27,1],"name":"/home/r/purescript-stuff/bower_components/purescript-control/src/Control/Extend.purs","end":[28,38]}},{"comments":null,"title":"extendArray","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Extend"],"Extend"]},{"tag":"TypeConstructor","contents":[["Prim"],"Array"]}]}},"sourceSpan":{"start":[32,1],"name":"/home/r/purescript-stuff/bower_components/purescript-control/src/Control/Extend.purs","end":[33,23]}}],"comments":"The `Extend` class defines the extension operator `(<<=)`\nwhich extends a local context-dependent computation to\na global computation.\n\n`Extend` is the dual of `Bind`, and `(<<=)` is the dual of\n`(>>=)`.\n\nLaws:\n\n- Associativity: `extend f <<< extend g = extend (f <<< extend g)`\n","title":"Extend","info":{"fundeps":[],"arguments":[["w",null]],"declType":"typeClass","superclasses":[{"constraintClass":[["Data","Functor"],"Functor"],"constraintArgs":[{"tag":"TypeVar","contents":"w"}],"constraintData":null}]},"sourceSpan":{"start":[24,1],"name":"/home/r/purescript-stuff/bower_components/purescript-control/src/Control/Extend.purs","end":[25,49]}},{"children":[],"comments":"Duplicate a comonadic context.\n\n`duplicate` is dual to `Control.Bind.join`.\n","title":"duplicate","info":{"declType":"value","type":{"tag":"ForAll","contents":["w",{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Control","Extend"],"Extend"],"constraintArgs":[{"tag":"TypeVar","contents":"w"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"w"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"w"},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"w"},{"tag":"TypeVar","contents":"a"}]}}]}]}]},null]},null]}},"sourceSpan":{"start":[58,1],"name":"/home/r/purescript-stuff/bower_components/purescript-control/src/Control/Extend.purs","end":[58,52]}},{"children":[],"comments":null,"title":"(=>>)","info":{"declType":"alias","alias":[["Control","Extend"],{"Right":{"Left":{"Ident":"extendFlipped"}}}],"fixity":{"associativity":"infixl","precedence":1}},"sourceSpan":{"start":[41,1],"name":"/home/r/purescript-stuff/bower_components/purescript-control/src/Control/Extend.purs","end":[41,30]}},{"children":[],"comments":null,"title":"(=>=)","info":{"declType":"alias","alias":[["Control","Extend"],{"Right":{"Left":{"Ident":"composeCoKleisli"}}}],"fixity":{"associativity":"infixr","precedence":1}},"sourceSpan":{"start":[47,1],"name":"/home/r/purescript-stuff/bower_components/purescript-control/src/Control/Extend.purs","end":[47,33]}},{"children":[],"comments":null,"title":"(=<=)","info":{"declType":"alias","alias":[["Control","Extend"],{"Right":{"Left":{"Ident":"composeCoKleisliFlipped"}}}],"fixity":{"associativity":"infixr","precedence":1}},"sourceSpan":{"start":[53,1],"name":"/home/r/purescript-stuff/bower_components/purescript-control/src/Control/Extend.purs","end":[53,40]}},{"children":[],"comments":null,"title":"(<<=)","info":{"declType":"alias","alias":[["Control","Extend"],{"Right":{"Left":{"Ident":"extend"}}}],"fixity":{"associativity":"infixr","precedence":1}},"sourceSpan":{"start":[35,1],"name":"/home/r/purescript-stuff/bower_components/purescript-control/src/Control/Extend.purs","end":[35,23]}}]},{"moduleName":{"package":"purescript-aff","item":["Control","Monad","Aff","Class"]},"declarations":[{"children":[],"comments":null,"title":"liftAff","info":{"declType":"value","type":{"tag":"ForAll","contents":["eff",{"tag":"ForAll","contents":["m",{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[null,"MonadAff"],"constraintArgs":[{"tag":"TypeVar","contents":"eff"},{"tag":"TypeVar","contents":"m"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad","Aff"],"Aff"]},{"tag":"TypeVar","contents":"eff"}]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"m"},{"tag":"TypeVar","contents":"a"}]}]}]},null]},null]},null]}},"sourceSpan":null}]},{"moduleName":{"package":"purescript-eff","item":["Control","Monad","Eff","Class"]},"declarations":[{"children":[],"comments":null,"title":"liftEff","info":{"declType":"value","type":{"tag":"ForAll","contents":["eff",{"tag":"ForAll","contents":["m",{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[null,"MonadEff"],"constraintArgs":[{"tag":"TypeVar","contents":"eff"},{"tag":"TypeVar","contents":"m"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad","Eff"],"Eff"]},{"tag":"TypeVar","contents":"eff"}]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"m"},{"tag":"TypeVar","contents":"a"}]}]}]},null]},null]},null]}},"sourceSpan":null}]},{"moduleName":{"package":"purescript-exceptions","item":["Control","Monad","Eff","Exception"]},"declarations":[{"children":[{"comments":null,"title":"showError","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Show"],"Show"]},{"tag":"TypeConstructor","contents":[["Control","Monad","Eff","Exception"],"Error"]}]}},"sourceSpan":{"start":[29,1],"name":"/home/r/purescript-stuff/bower_components/purescript-exceptions/src/Control/Monad/Eff/Exception.purs","end":[30,23]}}],"comments":"The type of JavaScript errors\n","title":"Error","info":{"kind":{"tag":"NamedKind","contents":[["Prim"],"Type"]},"declType":"externData"},"sourceSpan":{"start":[27,1],"name":"/home/r/purescript-stuff/bower_components/purescript-exceptions/src/Control/Monad/Eff/Exception.purs","end":[27,34]}}]},{"moduleName":{"package":"purescript-io","item":["Control","Monad","IO"]},"declarations":[{"children":[{"comments":null,"title":"newtypeIO","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Newtype"],"Newtype"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad","IO"],"IO"]},{"tag":"TypeVar","contents":"a"}]}}]},{"tag":"TypeWildcard","contents":{"start":[38,45],"name":"/home/r/purescript-stuff/bower_components/purescript-io/src/Control/Monad/IO.purs","end":[38,46]}}]}},"sourceSpan":{"start":[38,1],"name":"/home/r/purescript-stuff/bower_components/purescript-io/src/Control/Monad/IO.purs","end":[38,46]}},{"comments":null,"title":"functorIO","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Functor"],"Functor"]},{"tag":"TypeConstructor","contents":[["Control","Monad","IO"],"IO"]}]}},"sourceSpan":{"start":[40,1],"name":"/home/r/purescript-stuff/bower_components/purescript-io/src/Control/Monad/IO.purs","end":[40,56]}},{"comments":null,"title":"applyIO","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Apply"],"Apply"]},{"tag":"TypeConstructor","contents":[["Control","Monad","IO"],"IO"]}]}},"sourceSpan":{"start":[41,1],"name":"/home/r/purescript-stuff/bower_components/purescript-io/src/Control/Monad/IO.purs","end":[41,56]}},{"comments":null,"title":"applicativeIO","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Applicative"],"Applicative"]},{"tag":"TypeConstructor","contents":[["Control","Monad","IO"],"IO"]}]}},"sourceSpan":{"start":[42,1],"name":"/home/r/purescript-stuff/bower_components/purescript-io/src/Control/Monad/IO.purs","end":[42,56]}},{"comments":null,"title":"bindIO","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Bind"],"Bind"]},{"tag":"TypeConstructor","contents":[["Control","Monad","IO"],"IO"]}]}},"sourceSpan":{"start":[43,1],"name":"/home/r/purescript-stuff/bower_components/purescript-io/src/Control/Monad/IO.purs","end":[43,56]}},{"comments":null,"title":"monadIO","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad"],"Monad"]},{"tag":"TypeConstructor","contents":[["Control","Monad","IO"],"IO"]}]}},"sourceSpan":{"start":[44,1],"name":"/home/r/purescript-stuff/bower_components/purescript-io/src/Control/Monad/IO.purs","end":[44,56]}},{"comments":null,"title":"monadRecIO","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad","Rec","Class"],"MonadRec"]},{"tag":"TypeConstructor","contents":[["Control","Monad","IO"],"IO"]}]}},"sourceSpan":{"start":[46,1],"name":"/home/r/purescript-stuff/bower_components/purescript-io/src/Control/Monad/IO.purs","end":[46,50]}},{"comments":null,"title":"semigroupIO","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","Semigroup"],"Semigroup"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Semigroup"],"Semigroup"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad","IO"],"IO"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[48,1],"name":"/home/r/purescript-stuff/bower_components/purescript-io/src/Control/Monad/IO.purs","end":[48,73]}},{"comments":null,"title":"monoidIO","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","Monoid"],"Monoid"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Monoid"],"Monoid"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad","IO"],"IO"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[50,1],"name":"/home/r/purescript-stuff/bower_components/purescript-io/src/Control/Monad/IO.purs","end":[50,64]}},{"comments":null,"title":"monadAffIO","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad","Aff","Class"],"MonadAff"]},{"tag":"TypeVar","contents":"eff"}]},{"tag":"TypeConstructor","contents":[["Control","Monad","IO"],"IO"]}]}},"sourceSpan":{"start":[52,1],"name":"/home/r/purescript-stuff/bower_components/purescript-io/src/Control/Monad/IO.purs","end":[53,37]}},{"comments":null,"title":"monadEffIO","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad","Eff","Class"],"MonadEff"]},{"tag":"TypeVar","contents":"eff"}]},{"tag":"TypeConstructor","contents":[["Control","Monad","IO"],"IO"]}]}},"sourceSpan":{"start":[55,1],"name":"/home/r/purescript-stuff/bower_components/purescript-io/src/Control/Monad/IO.purs","end":[56,49]}},{"comments":null,"title":"monadThrowIO","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad","Error","Class"],"MonadThrow"]},{"tag":"TypeConstructor","contents":[["Control","Monad","Eff","Exception"],"Error"]}]},{"tag":"TypeConstructor","contents":[["Control","Monad","IO"],"IO"]}]}},"sourceSpan":{"start":[58,1],"name":"/home/r/purescript-stuff/bower_components/purescript-io/src/Control/Monad/IO.purs","end":[58,60]}},{"comments":null,"title":"monadErrorIO","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad","Error","Class"],"MonadError"]},{"tag":"TypeConstructor","contents":[["Control","Monad","Eff","Exception"],"Error"]}]},{"tag":"TypeConstructor","contents":[["Control","Monad","IO"],"IO"]}]}},"sourceSpan":{"start":[60,1],"name":"/home/r/purescript-stuff/bower_components/purescript-io/src/Control/Monad/IO.purs","end":[60,60]}},{"comments":null,"title":"altIO","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Alt"],"Alt"]},{"tag":"TypeConstructor","contents":[["Control","Monad","IO"],"IO"]}]}},"sourceSpan":{"start":[62,1],"name":"/home/r/purescript-stuff/bower_components/purescript-io/src/Control/Monad/IO.purs","end":[62,40]}},{"comments":null,"title":"plusIO","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Plus"],"Plus"]},{"tag":"TypeConstructor","contents":[["Control","Monad","IO"],"IO"]}]}},"sourceSpan":{"start":[64,1],"name":"/home/r/purescript-stuff/bower_components/purescript-io/src/Control/Monad/IO.purs","end":[64,42]}},{"comments":null,"title":"alternativeIO","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Alternative"],"Alternative"]},{"tag":"TypeConstructor","contents":[["Control","Monad","IO"],"IO"]}]}},"sourceSpan":{"start":[66,1],"name":"/home/r/purescript-stuff/bower_components/purescript-io/src/Control/Monad/IO.purs","end":[66,56]}},{"comments":null,"title":"monadZeroIO","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","MonadZero"],"MonadZero"]},{"tag":"TypeConstructor","contents":[["Control","Monad","IO"],"IO"]}]}},"sourceSpan":{"start":[68,1],"name":"/home/r/purescript-stuff/bower_components/purescript-io/src/Control/Monad/IO.purs","end":[68,50]}}],"comments":null,"title":"IO","info":{"declType":"data","dataDeclType":"newtype","typeArguments":[["a",null]]},"sourceSpan":{"start":[27,1],"name":"/home/r/purescript-stuff/bower_components/purescript-io/src/Control/Monad/IO.purs","end":[27,49]}},{"children":[],"comments":null,"title":"runIO'","info":{"declType":"value","type":{"tag":"ForAll","contents":["eff",{"tag":"BinaryNoParensType","contents":[{"tag":"TypeOp","contents":[["Data","NaturalTransformation"],"~>"]},{"tag":"TypeConstructor","contents":[["Control","Monad","IO"],"IO"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad","Aff"],"Aff"]},{"tag":"RCons","contents":["infinity",{"tag":"TypeConstructor","contents":[["Control","Monad","IO","Effect"],"INFINITY"]},{"tag":"TypeVar","contents":"eff"}]}]}]},null]}},"sourceSpan":{"start":[32,1],"name":"/home/r/purescript-stuff/bower_components/purescript-io/src/Control/Monad/IO.purs","end":[32,56]}},{"children":[],"comments":null,"title":"runIO","info":{"declType":"value","type":{"tag":"BinaryNoParensType","contents":[{"tag":"TypeOp","contents":[["Data","NaturalTransformation"],"~>"]},{"tag":"TypeConstructor","contents":[["Control","Monad","IO"],"IO"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad","Aff"],"Aff"]},{"tag":"RCons","contents":["infinity",{"tag":"TypeConstructor","contents":[["Control","Monad","IO","Effect"],"INFINITY"]},{"tag":"REmpty"}]}]}]}},"sourceSpan":{"start":[29,1],"name":"/home/r/purescript-stuff/bower_components/purescript-io/src/Control/Monad/IO.purs","end":[29,42]}},{"children":[],"comments":null,"title":"launchIO","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad","IO"],"IO"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad","IOSync"],"IOSync"]},{"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}]},null]}},"sourceSpan":{"start":[35,1],"name":"/home/r/purescript-stuff/bower_components/purescript-io/src/Control/Monad/IO.purs","end":[35,37]}}]},{"moduleName":{"package":"purescript-io","item":["Control","Monad","IO","Class"]},"declarations":[{"children":[{"comments":null,"title":"liftIO","info":{"declType":"typeClassMember","type":{"tag":"BinaryNoParensType","contents":[{"tag":"TypeOp","contents":[["Data","NaturalTransformation"],"~>"]},{"tag":"TypeConstructor","contents":[["Control","Monad","IO"],"IO"]},{"tag":"TypeVar","contents":"m"}]}},"sourceSpan":null},{"comments":null,"title":"monadIOIO","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad","IO","Class"],"MonadIO"]},{"tag":"TypeConstructor","contents":[["Control","Monad","IO"],"IO"]}]}},"sourceSpan":{"start":[9,1],"name":"/home/r/purescript-stuff/bower_components/purescript-io/src/Control/Monad/IO/Class.purs","end":[10,12]}}],"comments":null,"title":"MonadIO","info":{"fundeps":[],"arguments":[["m",null]],"declType":"typeClass","superclasses":[{"constraintClass":[["Control","Monad"],"Monad"],"constraintArgs":[{"tag":"TypeVar","contents":"m"}],"constraintData":null}]},"sourceSpan":{"start":[6,1],"name":"/home/r/purescript-stuff/bower_components/purescript-io/src/Control/Monad/IO/Class.purs","end":[7,20]}}]},{"moduleName":{"package":"purescript-io","item":["Control","Monad","IOSync"]},"declarations":[{"children":[{"comments":null,"title":"newtypeIOSync","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Newtype"],"Newtype"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad","IOSync"],"IOSync"]},{"tag":"TypeVar","contents":"a"}]}}]},{"tag":"TypeWildcard","contents":{"start":[31,53],"name":"/home/r/purescript-stuff/bower_components/purescript-io/src/Control/Monad/IOSync.purs","end":[31,54]}}]}},"sourceSpan":{"start":[31,1],"name":"/home/r/purescript-stuff/bower_components/purescript-io/src/Control/Monad/IOSync.purs","end":[31,54]}},{"comments":null,"title":"functorIOSync","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Functor"],"Functor"]},{"tag":"TypeConstructor","contents":[["Control","Monad","IOSync"],"IOSync"]}]}},"sourceSpan":{"start":[33,1],"name":"/home/r/purescript-stuff/bower_components/purescript-io/src/Control/Monad/IOSync.purs","end":[33,64]}},{"comments":null,"title":"applyIOSync","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Apply"],"Apply"]},{"tag":"TypeConstructor","contents":[["Control","Monad","IOSync"],"IOSync"]}]}},"sourceSpan":{"start":[34,1],"name":"/home/r/purescript-stuff/bower_components/purescript-io/src/Control/Monad/IOSync.purs","end":[34,64]}},{"comments":null,"title":"applicativeIOSync","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Applicative"],"Applicative"]},{"tag":"TypeConstructor","contents":[["Control","Monad","IOSync"],"IOSync"]}]}},"sourceSpan":{"start":[35,1],"name":"/home/r/purescript-stuff/bower_components/purescript-io/src/Control/Monad/IOSync.purs","end":[35,64]}},{"comments":null,"title":"bindIOSync","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Bind"],"Bind"]},{"tag":"TypeConstructor","contents":[["Control","Monad","IOSync"],"IOSync"]}]}},"sourceSpan":{"start":[36,1],"name":"/home/r/purescript-stuff/bower_components/purescript-io/src/Control/Monad/IOSync.purs","end":[36,64]}},{"comments":null,"title":"monadIOSync","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad"],"Monad"]},{"tag":"TypeConstructor","contents":[["Control","Monad","IOSync"],"IOSync"]}]}},"sourceSpan":{"start":[37,1],"name":"/home/r/purescript-stuff/bower_components/purescript-io/src/Control/Monad/IOSync.purs","end":[37,64]}},{"comments":null,"title":"monadRecIOSync","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad","Rec","Class"],"MonadRec"]},{"tag":"TypeConstructor","contents":[["Control","Monad","IOSync"],"IOSync"]}]}},"sourceSpan":{"start":[39,1],"name":"/home/r/purescript-stuff/bower_components/purescript-io/src/Control/Monad/IOSync.purs","end":[39,58]}},{"comments":null,"title":"semigroupIOSync","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","Semigroup"],"Semigroup"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Semigroup"],"Semigroup"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad","IOSync"],"IOSync"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[41,1],"name":"/home/r/purescript-stuff/bower_components/purescript-io/src/Control/Monad/IOSync.purs","end":[42,34]}},{"comments":null,"title":"monoidIOSync","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","Monoid"],"Monoid"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Monoid"],"Monoid"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad","IOSync"],"IOSync"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[44,1],"name":"/home/r/purescript-stuff/bower_components/purescript-io/src/Control/Monad/IOSync.purs","end":[45,23]}},{"comments":null,"title":"monadEffIOSync","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad","Eff","Class"],"MonadEff"]},{"tag":"TypeVar","contents":"eff"}]},{"tag":"TypeConstructor","contents":[["Control","Monad","IOSync"],"IOSync"]}]}},"sourceSpan":{"start":[47,1],"name":"/home/r/purescript-stuff/bower_components/purescript-io/src/Control/Monad/IOSync.purs","end":[48,37]}},{"comments":null,"title":"monadErrorIOSync","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad","Error","Class"],"MonadError"]},{"tag":"TypeConstructor","contents":[["Control","Monad","Eff","Exception"],"Error"]}]},{"tag":"TypeConstructor","contents":[["Control","Monad","IOSync"],"IOSync"]}]}},"sourceSpan":{"start":[50,1],"name":"/home/r/purescript-stuff/bower_components/purescript-io/src/Control/Monad/IOSync.purs","end":[52,69]}},{"comments":null,"title":"monadThrowIOSync","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad","Error","Class"],"MonadThrow"]},{"tag":"TypeConstructor","contents":[["Control","Monad","Eff","Exception"],"Error"]}]},{"tag":"TypeConstructor","contents":[["Control","Monad","IOSync"],"IOSync"]}]}},"sourceSpan":{"start":[54,1],"name":"/home/r/purescript-stuff/bower_components/purescript-io/src/Control/Monad/IOSync.purs","end":[55,42]}},{"comments":null,"title":"altIOSync","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Alt"],"Alt"]},{"tag":"TypeConstructor","contents":[["Control","Monad","IOSync"],"IOSync"]}]}},"sourceSpan":{"start":[57,1],"name":"/home/r/purescript-stuff/bower_components/purescript-io/src/Control/Monad/IOSync.purs","end":[58,35]}},{"comments":null,"title":"plusIOSync","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Plus"],"Plus"]},{"tag":"TypeConstructor","contents":[["Control","Monad","IOSync"],"IOSync"]}]}},"sourceSpan":{"start":[60,1],"name":"/home/r/purescript-stuff/bower_components/purescript-io/src/Control/Monad/IOSync.purs","end":[63,1]}},{"comments":null,"title":"alternativeIOSync","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Alternative"],"Alternative"]},{"tag":"TypeConstructor","contents":[["Control","Monad","IOSync"],"IOSync"]}]}},"sourceSpan":{"start":[63,1],"name":"/home/r/purescript-stuff/bower_components/purescript-io/src/Control/Monad/IOSync.purs","end":[63,49]}},{"comments":null,"title":"monadZeroIOSync","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","MonadZero"],"MonadZero"]},{"tag":"TypeConstructor","contents":[["Control","Monad","IOSync"],"IOSync"]}]}},"sourceSpan":{"start":[65,1],"name":"/home/r/purescript-stuff/bower_components/purescript-io/src/Control/Monad/IOSync.purs","end":[65,39]}}],"comments":null,"title":"IOSync","info":{"declType":"data","dataDeclType":"newtype","typeArguments":[["a",null]]},"sourceSpan":{"start":[23,1],"name":"/home/r/purescript-stuff/bower_components/purescript-io/src/Control/Monad/IOSync.purs","end":[23,57]}},{"children":[],"comments":null,"title":"runIOSync'","info":{"declType":"value","type":{"tag":"ForAll","contents":["eff",{"tag":"BinaryNoParensType","contents":[{"tag":"TypeOp","contents":[["Data","NaturalTransformation"],"~>"]},{"tag":"TypeConstructor","contents":[["Control","Monad","IOSync"],"IOSync"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad","Eff"],"Eff"]},{"tag":"RCons","contents":["infinity",{"tag":"TypeConstructor","contents":[["Control","Monad","IO","Effect"],"INFINITY"]},{"tag":"TypeVar","contents":"eff"}]}]}]},null]}},"sourceSpan":{"start":[28,1],"name":"/home/r/purescript-stuff/bower_components/purescript-io/src/Control/Monad/IOSync.purs","end":[28,64]}},{"children":[],"comments":null,"title":"runIOSync","info":{"declType":"value","type":{"tag":"BinaryNoParensType","contents":[{"tag":"TypeOp","contents":[["Data","NaturalTransformation"],"~>"]},{"tag":"TypeConstructor","contents":[["Control","Monad","IOSync"],"IOSync"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad","Eff"],"Eff"]},{"tag":"RCons","contents":["infinity",{"tag":"TypeConstructor","contents":[["Control","Monad","IO","Effect"],"INFINITY"]},{"tag":"REmpty"}]}]}]}},"sourceSpan":{"start":[25,1],"name":"/home/r/purescript-stuff/bower_components/purescript-io/src/Control/Monad/IOSync.purs","end":[25,50]}}]},{"moduleName":{"package":"purescript-io","item":["Control","Monad","IOSync","Class"]},"declarations":[{"children":[{"comments":null,"title":"liftIOSync","info":{"declType":"typeClassMember","type":{"tag":"BinaryNoParensType","contents":[{"tag":"TypeOp","contents":[["Data","NaturalTransformation"],"~>"]},{"tag":"TypeConstructor","contents":[["Control","Monad","IOSync"],"IOSync"]},{"tag":"TypeVar","contents":"m"}]}},"sourceSpan":null},{"comments":null,"title":"monadIOSyncIOSync","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad","IOSync","Class"],"MonadIOSync"]},{"tag":"TypeConstructor","contents":[["Control","Monad","IOSync"],"IOSync"]}]}},"sourceSpan":{"start":[12,1],"name":"/home/r/purescript-stuff/bower_components/purescript-io/src/Control/Monad/IOSync/Class.purs","end":[13,18]}},{"comments":null,"title":"monadIOSyncIO","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad","IOSync","Class"],"MonadIOSync"]},{"tag":"TypeConstructor","contents":[["Control","Monad","IO"],"IO"]}]}},"sourceSpan":{"start":[15,1],"name":"/home/r/purescript-stuff/bower_components/purescript-io/src/Control/Monad/IOSync/Class.purs","end":[16,37]}}],"comments":null,"title":"MonadIOSync","info":{"fundeps":[],"arguments":[["m",null]],"declType":"typeClass","superclasses":[{"constraintClass":[["Control","Monad"],"Monad"],"constraintArgs":[{"tag":"TypeVar","contents":"m"}],"constraintData":null}]},"sourceSpan":{"start":[9,1],"name":"/home/r/purescript-stuff/bower_components/purescript-io/src/Control/Monad/IOSync/Class.purs","end":[10,28]}}]},{"moduleName":{"package":"purescript-tailrec","item":["Control","Monad","Rec","Class"]},"declarations":[{"children":[{"comments":null,"title":"Loop","info":{"arguments":[{"tag":"TypeVar","contents":"a"}],"declType":"dataConstructor"},"sourceSpan":null},{"comments":null,"title":"Done","info":{"arguments":[{"tag":"TypeVar","contents":"b"}],"declType":"dataConstructor"},"sourceSpan":null},{"comments":null,"title":"functorStep","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Functor"],"Functor"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad","Rec","Class"],"Step"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[28,1],"name":"/home/r/purescript-stuff/bower_components/purescript-tailrec/src/Control/Monad/Rec/Class.purs","end":[30,30]}},{"comments":null,"title":"bifunctorStep","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Bifunctor"],"Bifunctor"]},{"tag":"TypeConstructor","contents":[["Control","Monad","Rec","Class"],"Step"]}]}},"sourceSpan":{"start":[32,1],"name":"/home/r/purescript-stuff/bower_components/purescript-tailrec/src/Control/Monad/Rec/Class.purs","end":[34,34]}}],"comments":"The result of a computation: either `Loop` containing the updated\naccumulator, or `Done` containing the final result of the computation.\n","title":"Step","info":{"declType":"data","dataDeclType":"data","typeArguments":[["a",null],["b",null]]},"sourceSpan":{"start":[26,1],"name":"/home/r/purescript-stuff/bower_components/purescript-tailrec/src/Control/Monad/Rec/Class.purs","end":[26,32]}},{"children":[{"comments":null,"title":"tailRecM","info":{"declType":"typeClassMember","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"m"},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad","Rec","Class"],"Step"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"m"},{"tag":"TypeVar","contents":"b"}]}]}]},null]},null]}},"sourceSpan":null},{"comments":null,"title":"monadRecIdentity","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad","Rec","Class"],"MonadRec"]},{"tag":"TypeConstructor","contents":[["Data","Identity"],"Identity"]}]}},"sourceSpan":{"start":[99,1],"name":"/home/r/purescript-stuff/bower_components/purescript-tailrec/src/Control/Monad/Rec/Class.purs","end":[101,39]}},{"comments":null,"title":"monadRecEff","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad","Rec","Class"],"MonadRec"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad","Eff"],"Eff"]},{"tag":"TypeVar","contents":"eff"}]}}]}},"sourceSpan":{"start":[103,1],"name":"/home/r/purescript-stuff/bower_components/purescript-tailrec/src/Control/Monad/Rec/Class.purs","end":[104,24]}},{"comments":null,"title":"monadRecFunction","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad","Rec","Class"],"MonadRec"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"e"}]}}]}},"sourceSpan":{"start":[106,1],"name":"/home/r/purescript-stuff/bower_components/purescript-tailrec/src/Control/Monad/Rec/Class.purs","end":[107,45]}},{"comments":null,"title":"monadRecEither","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad","Rec","Class"],"MonadRec"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Either"],"Either"]},{"tag":"TypeVar","contents":"e"}]}}]}},"sourceSpan":{"start":[109,1],"name":"/home/r/purescript-stuff/bower_components/purescript-tailrec/src/Control/Monad/Rec/Class.purs","end":[115,24]}},{"comments":null,"title":"monadRecMaybe","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad","Rec","Class"],"MonadRec"]},{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]}]}},"sourceSpan":{"start":[117,1],"name":"/home/r/purescript-stuff/bower_components/purescript-tailrec/src/Control/Monad/Rec/Class.purs","end":[123,24]}}],"comments":"This type class captures those monads which support tail recursion in\nconstant stack space.\n\nThe `tailRecM` function takes a step function, and applies that step\nfunction recursively until a pure value of type `b` is found.\n\nInstances are provided for standard monad transformers.\n\nFor example:\n\n```purescript\nloopWriter :: Number -> WriterT Sum (Eff (trace :: Trace)) Unit\nloopWriter n = tailRecM go n\n  where\n  go 0 = do\n    lift $ trace \"Done!\"\n    pure (Done unit)\n  go n = do\n    tell $ Sum n\n    pure (Loop (n - 1))\n```\n","title":"MonadRec","info":{"fundeps":[],"arguments":[["m",null]],"declType":"typeClass","superclasses":[{"constraintClass":[["Control","Monad"],"Monad"],"constraintArgs":[{"tag":"TypeVar","contents":"m"}],"constraintData":null}]},"sourceSpan":{"start":[57,1],"name":"/home/r/purescript-stuff/bower_components/purescript-tailrec/src/Control/Monad/Rec/Class.purs","end":[58,58]}},{"children":[],"comments":"Create a tail-recursive function of three arguments which uses constant stack space.\n","title":"tailRecM3","info":{"declType":"value","type":{"tag":"ForAll","contents":["d",{"tag":"ForAll","contents":["c",{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["m",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Control","Monad","Rec","Class"],"MonadRec"],"constraintArgs":[{"tag":"TypeVar","contents":"m"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"c"}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"m"},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad","Rec","Class"],"Step"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Record"]},{"tag":"RCons","contents":["a",{"tag":"TypeVar","contents":"a"},{"tag":"RCons","contents":["b",{"tag":"TypeVar","contents":"b"},{"tag":"RCons","contents":["c",{"tag":"TypeVar","contents":"c"},{"tag":"REmpty"}]}]}]}]}]},{"tag":"TypeVar","contents":"d"}]}}]}]}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"c"}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"m"},{"tag":"TypeVar","contents":"d"}]}]}]}]}]}]},null]},null]},null]},null]},null]}},"sourceSpan":{"start":[71,1],"name":"/home/r/purescript-stuff/bower_components/purescript-tailrec/src/Control/Monad/Rec/Class.purs","end":[78,9]}},{"children":[],"comments":"Create a tail-recursive function of two arguments which uses constant stack space.\n","title":"tailRecM2","info":{"declType":"value","type":{"tag":"ForAll","contents":["c",{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["m",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Control","Monad","Rec","Class"],"MonadRec"],"constraintArgs":[{"tag":"TypeVar","contents":"m"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"m"},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad","Rec","Class"],"Step"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Record"]},{"tag":"RCons","contents":["a",{"tag":"TypeVar","contents":"a"},{"tag":"RCons","contents":["b",{"tag":"TypeVar","contents":"b"},{"tag":"REmpty"}]}]}]}]},{"tag":"TypeVar","contents":"c"}]}}]}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"m"},{"tag":"TypeVar","contents":"c"}]}]}]}]}]},null]},null]},null]},null]}},"sourceSpan":{"start":[61,1],"name":"/home/r/purescript-stuff/bower_components/purescript-tailrec/src/Control/Monad/Rec/Class.purs","end":[67,9]}},{"children":[],"comments":"Create a pure tail-recursive function of one argument\n\nFor example:\n\n```purescript\npow :: Number -> Number -> Number\npow n p = tailRec go { accum: 1, power: p }\n  where\n  go :: _ -> Step _ Number\n  go { accum: acc, power: 0 } = Done acc\n  go { accum: acc, power: p } = Loop { accum: acc * n, power: p - 1 }\n```\n","title":"tailRec","info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad","Rec","Class"],"Step"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]},null]},null]}},"sourceSpan":{"start":[93,1],"name":"/home/r/purescript-stuff/bower_components/purescript-tailrec/src/Control/Monad/Rec/Class.purs","end":[93,49]}},{"children":[],"comments":"`forever` runs an action indefinitely, using the `MonadRec` instance to\nensure constant stack usage.\n\nFor example:\n\n```purescript\nmain = forever $ trace \"Hello, World!\"\n```\n","title":"forever","info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["m",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Control","Monad","Rec","Class"],"MonadRec"],"constraintArgs":[{"tag":"TypeVar","contents":"m"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"m"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"m"},{"tag":"TypeVar","contents":"b"}]}]}]},null]},null]},null]}},"sourceSpan":{"start":[151,1],"name":"/home/r/purescript-stuff/bower_components/purescript-tailrec/src/Control/Monad/Rec/Class.purs","end":[151,50]}}]},{"moduleName":{"package":"purescript-control","item":["Control","MonadPlus"]},"declarations":[{"children":[{"comments":null,"title":"monadPlusArray","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","MonadPlus"],"MonadPlus"]},{"tag":"TypeConstructor","contents":[["Prim"],"Array"]}]}},"sourceSpan":{"start":[31,1],"name":"/home/r/purescript-stuff/bower_components/purescript-control/src/Control/MonadPlus.purs","end":[31,38]}}],"comments":"The `MonadPlus` type class has no members of its own but extends\n`MonadZero` with an additional law:\n\n- Distributivity: `(x <|> y) >>= f == (x >>= f) <|> (y >>= f)`\n","title":"MonadPlus","info":{"fundeps":[],"arguments":[["m",null]],"declType":"typeClass","superclasses":[{"constraintClass":[["Control","MonadZero"],"MonadZero"],"constraintArgs":[{"tag":"TypeVar","contents":"m"}],"constraintData":null}]},"sourceSpan":{"start":[29,1],"name":"/home/r/purescript-stuff/bower_components/purescript-control/src/Control/MonadPlus.purs","end":[29,33]}}]},{"moduleName":{"package":"purescript-control","item":["Control","MonadZero"]},"declarations":[{"children":[{"comments":null,"title":"monadZeroArray","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","MonadZero"],"MonadZero"]},{"tag":"TypeConstructor","contents":[["Prim"],"Array"]}]}},"sourceSpan":{"start":[34,1],"name":"/home/r/purescript-stuff/bower_components/purescript-control/src/Control/MonadZero.purs","end":[34,43]}}],"comments":"The `MonadZero` type class has no members of its own; it just specifies\nthat the type has both `Monad` and `Alternative` instances.\n\nTypes which have `MonadZero` instances should also satisfy the following\nlaws:\n\n- Annihilation: `empty >>= f = empty`\n","title":"MonadZero","info":{"fundeps":[],"arguments":[["m",null]],"declType":"typeClass","superclasses":[{"constraintClass":[["Control","Monad"],"Monad"],"constraintArgs":[{"tag":"TypeVar","contents":"m"}],"constraintData":null},{"constraintClass":[["Control","Alternative"],"Alternative"],"constraintArgs":[{"tag":"TypeVar","contents":"m"}],"constraintData":null}]},"sourceSpan":{"start":[32,1],"name":"/home/r/purescript-stuff/bower_components/purescript-control/src/Control/MonadZero.purs","end":[32,46]}},{"children":[],"comments":"Fail using `Plus` if a condition does not hold, or\nsucceed using `Monad` if it does.\n\nFor example:\n\n```purescript\nimport Prelude\nimport Control.Monad (bind)\nimport Control.MonadZero (guard)\nimport Data.Array ((..))\n\nfactors :: Int -> Array Int\nfactors n = do\n  a <- 1..n\n  b <- a..n\n  guard $ a * b == n\n  pure [a, b]\n```\n","title":"guard","info":{"declType":"value","type":{"tag":"ForAll","contents":["m",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Control","MonadZero"],"MonadZero"],"constraintArgs":[{"tag":"TypeVar","contents":"m"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"m"},{"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}]}]},null]}},"sourceSpan":{"start":[54,1],"name":"/home/r/purescript-stuff/bower_components/purescript-control/src/Control/MonadZero.purs","end":[54,52]}}]},{"moduleName":{"package":"purescript-control","item":["Control","Plus"]},"declarations":[{"children":[{"comments":null,"title":"empty","info":{"declType":"typeClassMember","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]},null]}},"sourceSpan":null},{"comments":null,"title":"plusArray","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Plus"],"Plus"]},{"tag":"TypeConstructor","contents":[["Prim"],"Array"]}]}},"sourceSpan":{"start":[26,1],"name":"/home/r/purescript-stuff/bower_components/purescript-control/src/Control/Plus.purs","end":[27,12]}}],"comments":"The `Plus` type class extends the `Alt` type class with a value that\nshould be the left and right identity for `(<|>)`.\n\nIt is similar to `Monoid`, except that it applies to types of\nkind `* -> *`, like `Array` or `List`, rather than concrete types like\n`String` or `Number`.\n\n`Plus` instances should satisfy the following laws:\n\n- Left identity: `empty <|> x == x`\n- Right identity: `x <|> empty == x`\n- Annihilation: `f <$> empty == empty`\n","title":"Plus","info":{"fundeps":[],"arguments":[["f",null]],"declType":"typeClass","superclasses":[{"constraintClass":[["Control","Alt"],"Alt"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}],"constraintData":null}]},"sourceSpan":{"start":[23,1],"name":"/home/r/purescript-stuff/bower_components/purescript-control/src/Control/Plus.purs","end":[24,25]}}]},{"moduleName":{"package":"purescript-foldable-traversable","item":["Data","Bifoldable"]},"declarations":[{"children":[{"comments":null,"title":"bifoldr","info":{"declType":"typeClassMember","type":{"tag":"ForAll","contents":["c",{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"c"}]},{"tag":"TypeVar","contents":"c"}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"c"}]},{"tag":"TypeVar","contents":"c"}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"c"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"p"},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeVar","contents":"c"}]}]}]}]},null]},null]},null]}},"sourceSpan":null},{"comments":null,"title":"bifoldl","info":{"declType":"typeClassMember","type":{"tag":"ForAll","contents":["c",{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"c"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"c"}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"c"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeVar","contents":"c"}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"c"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"p"},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeVar","contents":"c"}]}]}]}]},null]},null]},null]}},"sourceSpan":null},{"comments":null,"title":"bifoldMap","info":{"declType":"typeClassMember","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["m",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Monoid"],"Monoid"],"constraintArgs":[{"tag":"TypeVar","contents":"m"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"m"}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeVar","contents":"m"}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"p"},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeVar","contents":"m"}]}]}]}]},null]},null]},null]}},"sourceSpan":null},{"comments":null,"title":"bifoldableClown","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","Foldable"],"Foldable"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Bifoldable"],"Bifoldable"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Bifunctor","Clown"],"Clown"]},{"tag":"TypeVar","contents":"f"}]}}]}},"sourceSpan":{"start":[42,1],"name":"/home/r/purescript-stuff/bower_components/purescript-foldable-traversable/src/Data/Bifoldable.purs","end":[45,40]}},{"comments":null,"title":"bifoldableJoker","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","Foldable"],"Foldable"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Bifoldable"],"Bifoldable"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Bifunctor","Joker"],"Joker"]},{"tag":"TypeVar","contents":"f"}]}}]}},"sourceSpan":{"start":[47,1],"name":"/home/r/purescript-stuff/bower_components/purescript-foldable-traversable/src/Data/Bifoldable.purs","end":[50,40]}},{"comments":null,"title":"bifoldableFlip","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","Bifoldable"],"Bifoldable"],"constraintArgs":[{"tag":"TypeVar","contents":"p"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Bifoldable"],"Bifoldable"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Bifunctor","Flip"],"Flip"]},{"tag":"TypeVar","contents":"p"}]}}]}},"sourceSpan":{"start":[52,1],"name":"/home/r/purescript-stuff/bower_components/purescript-foldable-traversable/src/Data/Bifoldable.purs","end":[55,43]}},{"comments":null,"title":"bifoldableProduct","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","Bifoldable"],"Bifoldable"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}],"constraintData":null},{"constraintClass":[["Data","Bifoldable"],"Bifoldable"],"constraintArgs":[{"tag":"TypeVar","contents":"g"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Bifoldable"],"Bifoldable"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Bifunctor","Product"],"Product"]},{"tag":"TypeVar","contents":"f"}]},{"tag":"TypeVar","contents":"g"}]}}]}},"sourceSpan":{"start":[57,1],"name":"/home/r/purescript-stuff/bower_components/purescript-foldable-traversable/src/Data/Bifoldable.purs","end":[60,67]}},{"comments":null,"title":"bifoldableWrap","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","Bifoldable"],"Bifoldable"],"constraintArgs":[{"tag":"TypeVar","contents":"p"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Bifoldable"],"Bifoldable"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Bifunctor","Wrap"],"Wrap"]},{"tag":"TypeVar","contents":"p"}]}}]}},"sourceSpan":{"start":[62,1],"name":"/home/r/purescript-stuff/bower_components/purescript-foldable-traversable/src/Data/Bifoldable.purs","end":[65,43]}}],"comments":"`Bifoldable` represents data structures with two type arguments which can be\nfolded.\n\nA fold for such a structure requires two step functions, one for each type\nargument. Type class instances should choose the appropriate step function based\non the type of the element encountered at each point of the fold.\n\nDefault implementations are provided by the following functions:\n\n- `bifoldrDefault`\n- `bifoldlDefault`\n- `bifoldMapDefaultR`\n- `bifoldMapDefaultL`\n\nNote: some combinations of the default implementations are unsafe to\nuse together - causing a non-terminating mutually recursive cycle.\nThese combinations are documented per function.\n","title":"Bifoldable","info":{"fundeps":[],"arguments":[["p",null]],"declType":"typeClass","superclasses":[]},"sourceSpan":{"start":[37,1],"name":"/home/r/purescript-stuff/bower_components/purescript-foldable-traversable/src/Data/Bifoldable.purs","end":[40,76]}},{"children":[],"comments":"Traverse a data structure, accumulating effects using an `Applicative` functor,\nignoring the final result.\n","title":"bitraverse_","info":{"declType":"value","type":{"tag":"ForAll","contents":["d",{"tag":"ForAll","contents":["c",{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["f",{"tag":"ForAll","contents":["t",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Bifoldable"],"Bifoldable"],"constraintArgs":[{"tag":"TypeVar","contents":"t"}],"constraintData":null},{"tag":"ConstrainedType","contents":[{"constraintClass":[["Control","Applicative"],"Applicative"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"c"}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"d"}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"t"},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}]}]}]}]}]},null]},null]},null]},null]},null]},null]}},"sourceSpan":{"start":[134,1],"name":"/home/r/purescript-stuff/bower_components/purescript-foldable-traversable/src/Data/Bifoldable.purs","end":[141,12]}},{"children":[],"comments":"Collapse a data structure, collecting effects using an `Applicative` functor,\nignoring the final result.\n","title":"bisequence_","info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["f",{"tag":"ForAll","contents":["t",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Bifoldable"],"Bifoldable"],"constraintArgs":[{"tag":"TypeVar","contents":"t"}],"constraintData":null},{"tag":"ConstrainedType","contents":[{"constraintClass":[["Control","Applicative"],"Applicative"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"t"},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}}]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"b"}]}}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}]}]}]},null]},null]},null]},null]}},"sourceSpan":{"start":[157,1],"name":"/home/r/purescript-stuff/bower_components/purescript-foldable-traversable/src/Data/Bifoldable.purs","end":[162,12]}},{"children":[],"comments":"A version of `bitraverse_` with the data structure as the first argument.\n","title":"bifor_","info":{"declType":"value","type":{"tag":"ForAll","contents":["d",{"tag":"ForAll","contents":["c",{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["f",{"tag":"ForAll","contents":["t",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Bifoldable"],"Bifoldable"],"constraintArgs":[{"tag":"TypeVar","contents":"t"}],"constraintData":null},{"tag":"ConstrainedType","contents":[{"constraintClass":[["Control","Applicative"],"Applicative"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"t"},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"c"}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"d"}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}]}]}]}]}]},null]},null]},null]},null]},null]},null]}},"sourceSpan":{"start":[145,1],"name":"/home/r/purescript-stuff/bower_components/purescript-foldable-traversable/src/Data/Bifoldable.purs","end":[152,12]}},{"children":[],"comments":"Fold a data structure, accumulating values in a monoidal type.\n","title":"bifold","info":{"declType":"value","type":{"tag":"ForAll","contents":["m",{"tag":"ForAll","contents":["t",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Bifoldable"],"Bifoldable"],"constraintArgs":[{"tag":"TypeVar","contents":"t"}],"constraintData":null},{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Monoid"],"Monoid"],"constraintArgs":[{"tag":"TypeVar","contents":"m"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"t"},{"tag":"TypeVar","contents":"m"}]},{"tag":"TypeVar","contents":"m"}]}]},{"tag":"TypeVar","contents":"m"}]}]}]},null]},null]}},"sourceSpan":{"start":[129,1],"name":"/home/r/purescript-stuff/bower_components/purescript-foldable-traversable/src/Data/Bifoldable.purs","end":[129,61]}},{"children":[],"comments":"Test whether a predicate holds at any position in a data structure.\n","title":"biany","info":{"declType":"value","type":{"tag":"ForAll","contents":["c",{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["t",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Bifoldable"],"Bifoldable"],"constraintArgs":[{"tag":"TypeVar","contents":"t"}],"constraintData":null},{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","BooleanAlgebra"],"BooleanAlgebra"],"constraintArgs":[{"tag":"TypeVar","contents":"c"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"c"}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeVar","contents":"c"}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"t"},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeVar","contents":"c"}]}]}]}]}]},null]},null]},null]},null]}},"sourceSpan":{"start":[166,1],"name":"/home/r/purescript-stuff/bower_components/purescript-foldable-traversable/src/Data/Bifoldable.purs","end":[173,7]}},{"children":[],"comments":"Test whether a predicate holds at all positions in a data structure.\n","title":"biall","info":{"declType":"value","type":{"tag":"ForAll","contents":["c",{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["t",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Bifoldable"],"Bifoldable"],"constraintArgs":[{"tag":"TypeVar","contents":"t"}],"constraintData":null},{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","BooleanAlgebra"],"BooleanAlgebra"],"constraintArgs":[{"tag":"TypeVar","contents":"c"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"c"}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeVar","contents":"c"}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"t"},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeVar","contents":"c"}]}]}]}]}]},null]},null]},null]},null]}},"sourceSpan":{"start":[177,1],"name":"/home/r/purescript-stuff/bower_components/purescript-foldable-traversable/src/Data/Bifoldable.purs","end":[184,7]}}]},{"moduleName":{"package":"purescript-bifunctors","item":["Data","Bifunctor"]},"declarations":[{"children":[{"comments":null,"title":"bimap","info":{"declType":"typeClassMember","type":{"tag":"ForAll","contents":["d",{"tag":"ForAll","contents":["c",{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"c"}]},{"tag":"TypeVar","contents":"d"}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"c"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeVar","contents":"d"}]}]}]}]},null]},null]},null]},null]}},"sourceSpan":null}],"comments":"A `Bifunctor` is a `Functor` from the pair category `(Type, Type)` to `Type`.\n\nA type constructor with two type arguments can be made into a `Bifunctor` if\nboth of its type arguments are covariant.\n\nThe `bimap` function maps a pair of functions over the two type arguments\nof the bifunctor.\n\nLaws:\n\n- Identity: `bimap id id == id`\n- Composition: `bimap f1 g1 <<< bimap f2 g2 == bimap (f1 <<< f2) (g1 <<< g2)`\n\n","title":"Bifunctor","info":{"fundeps":[],"arguments":[["f",null]],"declType":"typeClass","superclasses":[]},"sourceSpan":{"start":[18,1],"name":"/home/r/purescript-stuff/bower_components/purescript-bifunctors/src/Data/Bifunctor.purs","end":[19,66]}},{"children":[],"comments":"Map a function over the second type arguments of a `Bifunctor`.\n","title":"rmap","info":{"declType":"value","type":{"tag":"ForAll","contents":["c",{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["f",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Bifunctor"],"Bifunctor"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeVar","contents":"c"}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"c"}]}]}]}]},null]},null]},null]},null]}},"sourceSpan":{"start":[26,1],"name":"/home/r/purescript-stuff/bower_components/purescript-bifunctors/src/Data/Bifunctor.purs","end":[26,66]}},{"children":[],"comments":"Map a function over the first type argument of a `Bifunctor`.\n","title":"lmap","info":{"declType":"value","type":{"tag":"ForAll","contents":["c",{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["f",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Bifunctor"],"Bifunctor"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"c"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeVar","contents":"c"}]}]}]}]},null]},null]},null]},null]}},"sourceSpan":{"start":[22,1],"name":"/home/r/purescript-stuff/bower_components/purescript-bifunctors/src/Data/Bifunctor.purs","end":[22,66]}}]},{"moduleName":{"package":"purescript-bifunctors","item":["Data","Bifunctor","Clown"]},"declarations":[{"children":[{"comments":null,"title":"Clown","info":{"arguments":[{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}}],"declType":"dataConstructor"},"sourceSpan":null},{"comments":null,"title":"newtypeClown","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Newtype"],"Newtype"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Bifunctor","Clown"],"Clown"]},{"tag":"TypeVar","contents":"f"}]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]},{"tag":"TypeWildcard","contents":{"start":[14,55],"name":"/home/r/purescript-stuff/bower_components/purescript-bifunctors/src/Data/Bifunctor/Clown.purs","end":[14,56]}}]}},"sourceSpan":{"start":[14,1],"name":"/home/r/purescript-stuff/bower_components/purescript-bifunctors/src/Data/Bifunctor/Clown.purs","end":[14,56]}},{"comments":null,"title":"eqClown","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","Eq"],"Eq"],"constraintArgs":[{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Eq"],"Eq"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Bifunctor","Clown"],"Clown"]},{"tag":"TypeVar","contents":"f"}]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}},"sourceSpan":{"start":[16,1],"name":"/home/r/purescript-stuff/bower_components/purescript-bifunctors/src/Data/Bifunctor/Clown.purs","end":[16,64]}},{"comments":null,"title":"ordClown","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","Ord"],"Ord"],"constraintArgs":[{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Ord"],"Ord"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Bifunctor","Clown"],"Clown"]},{"tag":"TypeVar","contents":"f"}]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}},"sourceSpan":{"start":[18,1],"name":"/home/r/purescript-stuff/bower_components/purescript-bifunctors/src/Data/Bifunctor/Clown.purs","end":[18,67]}},{"comments":null,"title":"showClown","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","Show"],"Show"],"constraintArgs":[{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Show"],"Show"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Bifunctor","Clown"],"Clown"]},{"tag":"TypeVar","contents":"f"}]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}},"sourceSpan":{"start":[20,1],"name":"/home/r/purescript-stuff/bower_components/purescript-bifunctors/src/Data/Bifunctor/Clown.purs","end":[23,1]}},{"comments":null,"title":"functorClown","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Functor"],"Functor"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Bifunctor","Clown"],"Clown"]},{"tag":"TypeVar","contents":"f"}]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[23,1],"name":"/home/r/purescript-stuff/bower_components/purescript-bifunctors/src/Data/Bifunctor/Clown.purs","end":[24,28]}},{"comments":null,"title":"bifunctorClown","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","Functor"],"Functor"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Bifunctor"],"Bifunctor"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Bifunctor","Clown"],"Clown"]},{"tag":"TypeVar","contents":"f"}]}}]}},"sourceSpan":{"start":[26,1],"name":"/home/r/purescript-stuff/bower_components/purescript-bifunctors/src/Data/Bifunctor/Clown.purs","end":[27,40]}},{"comments":null,"title":"biapplyClown","info":{"declType":"instance","dependencies":[{"constraintClass":[["Control","Apply"],"Apply"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Biapply"],"Biapply"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Bifunctor","Clown"],"Clown"]},{"tag":"TypeVar","contents":"f"}]}}]}},"sourceSpan":{"start":[29,1],"name":"/home/r/purescript-stuff/bower_components/purescript-bifunctors/src/Data/Bifunctor/Clown.purs","end":[30,52]}},{"comments":null,"title":"biapplicativeClown","info":{"declType":"instance","dependencies":[{"constraintClass":[["Control","Applicative"],"Applicative"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Biapplicative"],"Biapplicative"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Bifunctor","Clown"],"Clown"]},{"tag":"TypeVar","contents":"f"}]}}]}},"sourceSpan":{"start":[32,1],"name":"/home/r/purescript-stuff/bower_components/purescript-bifunctors/src/Data/Bifunctor/Clown.purs","end":[33,29]}}],"comments":"Make a `Functor` over the first argument of a `Bifunctor`\n","title":"Clown","info":{"declType":"data","dataDeclType":"newtype","typeArguments":[["f",null],["a",null],["b",null]]},"sourceSpan":{"start":[12,1],"name":"/home/r/purescript-stuff/bower_components/purescript-bifunctors/src/Data/Bifunctor/Clown.purs","end":[12,34]}}]},{"moduleName":{"package":"purescript-bifunctors","item":["Data","Bifunctor","Joker"]},"declarations":[{"children":[{"comments":null,"title":"Joker","info":{"arguments":[{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"g"},{"tag":"TypeVar","contents":"b"}]}}],"declType":"dataConstructor"},"sourceSpan":null},{"comments":null,"title":"newtypeJoker","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Newtype"],"Newtype"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Bifunctor","Joker"],"Joker"]},{"tag":"TypeVar","contents":"g"}]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]},{"tag":"TypeWildcard","contents":{"start":[14,55],"name":"/home/r/purescript-stuff/bower_components/purescript-bifunctors/src/Data/Bifunctor/Joker.purs","end":[14,56]}}]}},"sourceSpan":{"start":[14,1],"name":"/home/r/purescript-stuff/bower_components/purescript-bifunctors/src/Data/Bifunctor/Joker.purs","end":[14,56]}},{"comments":null,"title":"eqJoker","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","Eq"],"Eq"],"constraintArgs":[{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"g"},{"tag":"TypeVar","contents":"b"}]}}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Eq"],"Eq"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Bifunctor","Joker"],"Joker"]},{"tag":"TypeVar","contents":"g"}]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}},"sourceSpan":{"start":[16,1],"name":"/home/r/purescript-stuff/bower_components/purescript-bifunctors/src/Data/Bifunctor/Joker.purs","end":[16,64]}},{"comments":null,"title":"ordJoker","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","Ord"],"Ord"],"constraintArgs":[{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"g"},{"tag":"TypeVar","contents":"b"}]}}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Ord"],"Ord"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Bifunctor","Joker"],"Joker"]},{"tag":"TypeVar","contents":"g"}]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}},"sourceSpan":{"start":[18,1],"name":"/home/r/purescript-stuff/bower_components/purescript-bifunctors/src/Data/Bifunctor/Joker.purs","end":[18,67]}},{"comments":null,"title":"showJoker","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","Show"],"Show"],"constraintArgs":[{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"g"},{"tag":"TypeVar","contents":"b"}]}}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Show"],"Show"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Bifunctor","Joker"],"Joker"]},{"tag":"TypeVar","contents":"g"}]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}},"sourceSpan":{"start":[20,1],"name":"/home/r/purescript-stuff/bower_components/purescript-bifunctors/src/Data/Bifunctor/Joker.purs","end":[23,1]}},{"comments":null,"title":"functorJoker","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","Functor"],"Functor"],"constraintArgs":[{"tag":"TypeVar","contents":"g"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Functor"],"Functor"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Bifunctor","Joker"],"Joker"]},{"tag":"TypeVar","contents":"g"}]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[23,1],"name":"/home/r/purescript-stuff/bower_components/purescript-bifunctors/src/Data/Bifunctor/Joker.purs","end":[24,36]}},{"comments":null,"title":"bifunctorJoker","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","Functor"],"Functor"],"constraintArgs":[{"tag":"TypeVar","contents":"g"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Bifunctor"],"Bifunctor"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Bifunctor","Joker"],"Joker"]},{"tag":"TypeVar","contents":"g"}]}}]}},"sourceSpan":{"start":[26,1],"name":"/home/r/purescript-stuff/bower_components/purescript-bifunctors/src/Data/Bifunctor/Joker.purs","end":[27,40]}},{"comments":null,"title":"biapplyJoker","info":{"declType":"instance","dependencies":[{"constraintClass":[["Control","Apply"],"Apply"],"constraintArgs":[{"tag":"TypeVar","contents":"g"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Biapply"],"Biapply"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Bifunctor","Joker"],"Joker"]},{"tag":"TypeVar","contents":"g"}]}}]}},"sourceSpan":{"start":[29,1],"name":"/home/r/purescript-stuff/bower_components/purescript-bifunctors/src/Data/Bifunctor/Joker.purs","end":[30,52]}},{"comments":null,"title":"biapplicativeJoker","info":{"declType":"instance","dependencies":[{"constraintClass":[["Control","Applicative"],"Applicative"],"constraintArgs":[{"tag":"TypeVar","contents":"g"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Biapplicative"],"Biapplicative"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Bifunctor","Joker"],"Joker"]},{"tag":"TypeVar","contents":"g"}]}}]}},"sourceSpan":{"start":[32,1],"name":"/home/r/purescript-stuff/bower_components/purescript-bifunctors/src/Data/Bifunctor/Joker.purs","end":[33,29]}}],"comments":"Make a `Functor` over the second argument of a `Bifunctor`\n","title":"Joker","info":{"declType":"data","dataDeclType":"newtype","typeArguments":[["g",null],["a",null],["b",null]]},"sourceSpan":{"start":[12,1],"name":"/home/r/purescript-stuff/bower_components/purescript-bifunctors/src/Data/Bifunctor/Joker.purs","end":[12,34]}}]},{"moduleName":{"package":"purescript-foldable-traversable","item":["Data","Bitraversable"]},"declarations":[{"children":[{"comments":null,"title":"bitraverse","info":{"declType":"typeClassMember","type":{"tag":"ForAll","contents":["d",{"tag":"ForAll","contents":["c",{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["f",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Control","Applicative"],"Applicative"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"c"}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"d"}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"t"},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"t"},{"tag":"TypeVar","contents":"c"}]},{"tag":"TypeVar","contents":"d"}]}}]}]}]}]}]},null]},null]},null]},null]},null]}},"sourceSpan":null},{"comments":null,"title":"bisequence","info":{"declType":"typeClassMember","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["f",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Control","Applicative"],"Applicative"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"t"},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}}]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"b"}]}}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"t"},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}]}]},null]},null]},null]}},"sourceSpan":null},{"comments":null,"title":"bitraversableClown","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","Traversable"],"Traversable"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Bitraversable"],"Bitraversable"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Bifunctor","Clown"],"Clown"]},{"tag":"TypeVar","contents":"f"}]}}]}},"sourceSpan":{"start":[39,1],"name":"/home/r/purescript-stuff/bower_components/purescript-foldable-traversable/src/Data/Bitraversable.purs","end":[41,46]}},{"comments":null,"title":"bitraversableJoker","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","Traversable"],"Traversable"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Bitraversable"],"Bitraversable"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Bifunctor","Joker"],"Joker"]},{"tag":"TypeVar","contents":"f"}]}}]}},"sourceSpan":{"start":[43,1],"name":"/home/r/purescript-stuff/bower_components/purescript-foldable-traversable/src/Data/Bitraversable.purs","end":[45,46]}},{"comments":null,"title":"bitraversableFlip","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","Bitraversable"],"Bitraversable"],"constraintArgs":[{"tag":"TypeVar","contents":"p"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Bitraversable"],"Bitraversable"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Bifunctor","Flip"],"Flip"]},{"tag":"TypeVar","contents":"p"}]}}]}},"sourceSpan":{"start":[47,1],"name":"/home/r/purescript-stuff/bower_components/purescript-foldable-traversable/src/Data/Bitraversable.purs","end":[49,46]}},{"comments":null,"title":"bitraversableProduct","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","Bitraversable"],"Bitraversable"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}],"constraintData":null},{"constraintClass":[["Data","Bitraversable"],"Bitraversable"],"constraintArgs":[{"tag":"TypeVar","contents":"g"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Bitraversable"],"Bitraversable"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Bifunctor","Product"],"Product"]},{"tag":"TypeVar","contents":"f"}]},{"tag":"TypeVar","contents":"g"}]}}]}},"sourceSpan":{"start":[51,1],"name":"/home/r/purescript-stuff/bower_components/purescript-foldable-traversable/src/Data/Bitraversable.purs","end":[53,71]}},{"comments":null,"title":"bitraversableWrap","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","Bitraversable"],"Bitraversable"],"constraintArgs":[{"tag":"TypeVar","contents":"p"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Bitraversable"],"Bitraversable"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Bifunctor","Wrap"],"Wrap"]},{"tag":"TypeVar","contents":"p"}]}}]}},"sourceSpan":{"start":[55,1],"name":"/home/r/purescript-stuff/bower_components/purescript-foldable-traversable/src/Data/Bitraversable.purs","end":[57,46]}}],"comments":"`Bitraversable` represents data structures with two type arguments which can be\ntraversed.\n\nA traversal for such a structure requires two functions, one for each type\nargument. Type class instances should choose the appropriate function based\non the type of the element encountered at each point of the traversal.\n\nDefault implementations are provided by the following functions:\n\n- `bitraverseDefault`\n- `bisequenceDefault`\n","title":"Bitraversable","info":{"fundeps":[],"arguments":[["t",null]],"declType":"typeClass","superclasses":[{"constraintClass":[["Data","Bifunctor"],"Bifunctor"],"constraintArgs":[{"tag":"TypeVar","contents":"t"}],"constraintData":null},{"constraintClass":[["Data","Bifoldable"],"Bifoldable"],"constraintArgs":[{"tag":"TypeVar","contents":"t"}],"constraintData":null}]},"sourceSpan":{"start":[35,1],"name":"/home/r/purescript-stuff/bower_components/purescript-foldable-traversable/src/Data/Bitraversable.purs","end":[37,74]}},{"children":[],"comments":null,"title":"rtraverse","info":{"declType":"value","type":{"tag":"ForAll","contents":["f",{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["c",{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["t",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Bitraversable"],"Bitraversable"],"constraintArgs":[{"tag":"TypeVar","contents":"t"}],"constraintData":null},{"tag":"ConstrainedType","contents":[{"constraintClass":[["Control","Applicative"],"Applicative"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"c"}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"t"},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"t"},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"c"}]}}]}]}]}]}]},null]},null]},null]},null]},null]}},"sourceSpan":{"start":[68,1],"name":"/home/r/purescript-stuff/bower_components/purescript-foldable-traversable/src/Data/Bitraversable.purs","end":[74,15]}},{"children":[],"comments":null,"title":"rfor","info":{"declType":"value","type":{"tag":"ForAll","contents":["f",{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["c",{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["t",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Bitraversable"],"Bitraversable"],"constraintArgs":[{"tag":"TypeVar","contents":"t"}],"constraintData":null},{"tag":"ConstrainedType","contents":[{"constraintClass":[["Control","Applicative"],"Applicative"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"t"},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"c"}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"t"},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"c"}]}}]}]}]}]}]},null]},null]},null]},null]},null]}},"sourceSpan":{"start":[117,1],"name":"/home/r/purescript-stuff/bower_components/purescript-foldable-traversable/src/Data/Bitraversable.purs","end":[123,15]}},{"children":[],"comments":null,"title":"ltraverse","info":{"declType":"value","type":{"tag":"ForAll","contents":["f",{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["c",{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["t",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Bitraversable"],"Bitraversable"],"constraintArgs":[{"tag":"TypeVar","contents":"t"}],"constraintData":null},{"tag":"ConstrainedType","contents":[{"constraintClass":[["Control","Applicative"],"Applicative"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"c"}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"t"},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"t"},{"tag":"TypeVar","contents":"c"}]},{"tag":"TypeVar","contents":"b"}]}}]}]}]}]}]},null]},null]},null]},null]},null]}},"sourceSpan":{"start":[59,1],"name":"/home/r/purescript-stuff/bower_components/purescript-foldable-traversable/src/Data/Bitraversable.purs","end":[65,15]}},{"children":[],"comments":null,"title":"lfor","info":{"declType":"value","type":{"tag":"ForAll","contents":["f",{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["c",{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["t",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Bitraversable"],"Bitraversable"],"constraintArgs":[{"tag":"TypeVar","contents":"t"}],"constraintData":null},{"tag":"ConstrainedType","contents":[{"constraintClass":[["Control","Applicative"],"Applicative"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"t"},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"c"}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"t"},{"tag":"TypeVar","contents":"c"}]},{"tag":"TypeVar","contents":"b"}]}}]}]}]}]}]},null]},null]},null]},null]},null]}},"sourceSpan":{"start":[108,1],"name":"/home/r/purescript-stuff/bower_components/purescript-foldable-traversable/src/Data/Bitraversable.purs","end":[114,15]}},{"children":[],"comments":"Traverse a data structure, accumulating effects and results using an `Applicative` functor.\n","title":"bifor","info":{"declType":"value","type":{"tag":"ForAll","contents":["d",{"tag":"ForAll","contents":["c",{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["f",{"tag":"ForAll","contents":["t",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Bitraversable"],"Bitraversable"],"constraintArgs":[{"tag":"TypeVar","contents":"t"}],"constraintData":null},{"tag":"ConstrainedType","contents":[{"constraintClass":[["Control","Applicative"],"Applicative"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"t"},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"c"}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"d"}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"t"},{"tag":"TypeVar","contents":"c"}]},{"tag":"TypeVar","contents":"d"}]}}]}]}]}]}]}]},null]},null]},null]},null]},null]},null]}},"sourceSpan":{"start":[98,1],"name":"/home/r/purescript-stuff/bower_components/purescript-foldable-traversable/src/Data/Bitraversable.purs","end":[105,15]}}]},{"moduleName":{"package":"purescript-const","item":["Data","Const"]},"declarations":[{"children":[{"comments":null,"title":"Const","info":{"arguments":[{"tag":"TypeVar","contents":"a"}],"declType":"dataConstructor"},"sourceSpan":null},{"comments":null,"title":"newtypeConst","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Newtype"],"Newtype"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Const"],"Const"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]},{"tag":"TypeWildcard","contents":{"start":[21,53],"name":"/home/r/purescript-stuff/bower_components/purescript-const/src/Data/Const.purs","end":[21,54]}}]}},"sourceSpan":{"start":[21,1],"name":"/home/r/purescript-stuff/bower_components/purescript-const/src/Data/Const.purs","end":[21,54]}},{"comments":null,"title":"eqConst","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","Eq"],"Eq"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Eq"],"Eq"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Const"],"Const"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}},"sourceSpan":{"start":[23,1],"name":"/home/r/purescript-stuff/bower_components/purescript-const/src/Data/Const.purs","end":[23,58]}},{"comments":null,"title":"ordConst","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","Ord"],"Ord"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Ord"],"Ord"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Const"],"Const"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}},"sourceSpan":{"start":[25,1],"name":"/home/r/purescript-stuff/bower_components/purescript-const/src/Data/Const.purs","end":[25,61]}},{"comments":null,"title":"boundedConst","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","Bounded"],"Bounded"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Bounded"],"Bounded"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Const"],"Const"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}},"sourceSpan":{"start":[27,1],"name":"/home/r/purescript-stuff/bower_components/purescript-const/src/Data/Const.purs","end":[27,73]}},{"comments":null,"title":"showConst","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","Show"],"Show"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Show"],"Show"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Const"],"Const"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}},"sourceSpan":{"start":[29,1],"name":"/home/r/purescript-stuff/bower_components/purescript-const/src/Data/Const.purs","end":[32,1]}},{"comments":null,"title":"semigroupoidConst","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Semigroupoid"],"Semigroupoid"]},{"tag":"TypeConstructor","contents":[["Data","Const"],"Const"]}]}},"sourceSpan":{"start":[32,1],"name":"/home/r/purescript-stuff/bower_components/purescript-const/src/Data/Const.purs","end":[33,32]}},{"comments":null,"title":"semigroupConst","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","Semigroup"],"Semigroup"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Semigroup"],"Semigroup"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Const"],"Const"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}},"sourceSpan":{"start":[35,1],"name":"/home/r/purescript-stuff/bower_components/purescript-const/src/Data/Const.purs","end":[35,79]}},{"comments":null,"title":"monoidConst","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","Monoid"],"Monoid"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Monoid"],"Monoid"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Const"],"Const"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}},"sourceSpan":{"start":[37,1],"name":"/home/r/purescript-stuff/bower_components/purescript-const/src/Data/Const.purs","end":[37,70]}},{"comments":null,"title":"semiringConst","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","Semiring"],"Semiring"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Semiring"],"Semiring"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Const"],"Const"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}},"sourceSpan":{"start":[39,1],"name":"/home/r/purescript-stuff/bower_components/purescript-const/src/Data/Const.purs","end":[39,76]}},{"comments":null,"title":"ringConst","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","Ring"],"Ring"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Ring"],"Ring"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Const"],"Const"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}},"sourceSpan":{"start":[41,1],"name":"/home/r/purescript-stuff/bower_components/purescript-const/src/Data/Const.purs","end":[41,64]}},{"comments":null,"title":"euclideanRingConst","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","EuclideanRing"],"EuclideanRing"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","EuclideanRing"],"EuclideanRing"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Const"],"Const"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}},"sourceSpan":{"start":[43,1],"name":"/home/r/purescript-stuff/bower_components/purescript-const/src/Data/Const.purs","end":[43,91]}},{"comments":null,"title":"commutativeRingConst","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","CommutativeRing"],"CommutativeRing"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","CommutativeRing"],"CommutativeRing"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Const"],"Const"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}},"sourceSpan":{"start":[45,1],"name":"/home/r/purescript-stuff/bower_components/purescript-const/src/Data/Const.purs","end":[45,97]}},{"comments":null,"title":"fieldConst","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","Field"],"Field"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Field"],"Field"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Const"],"Const"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}},"sourceSpan":{"start":[47,1],"name":"/home/r/purescript-stuff/bower_components/purescript-const/src/Data/Const.purs","end":[47,67]}},{"comments":null,"title":"heytingAlgebraConst","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","HeytingAlgebra"],"HeytingAlgebra"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","HeytingAlgebra"],"HeytingAlgebra"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Const"],"Const"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}},"sourceSpan":{"start":[49,1],"name":"/home/r/purescript-stuff/bower_components/purescript-const/src/Data/Const.purs","end":[49,94]}},{"comments":null,"title":"booleanAlgebraConst","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","BooleanAlgebra"],"BooleanAlgebra"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","BooleanAlgebra"],"BooleanAlgebra"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Const"],"Const"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}},"sourceSpan":{"start":[51,1],"name":"/home/r/purescript-stuff/bower_components/purescript-const/src/Data/Const.purs","end":[51,94]}},{"comments":null,"title":"functorConst","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Functor"],"Functor"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Const"],"Const"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[53,1],"name":"/home/r/purescript-stuff/bower_components/purescript-const/src/Data/Const.purs","end":[54,28]}},{"comments":null,"title":"invariantConst","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Functor","Invariant"],"Invariant"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Const"],"Const"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[56,1],"name":"/home/r/purescript-stuff/bower_components/purescript-const/src/Data/Const.purs","end":[57,15]}},{"comments":null,"title":"contravariantConst","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Functor","Contravariant"],"Contravariant"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Const"],"Const"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[59,1],"name":"/home/r/purescript-stuff/bower_components/purescript-const/src/Data/Const.purs","end":[60,29]}},{"comments":null,"title":"applyConst","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","Semigroup"],"Semigroup"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Apply"],"Apply"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Const"],"Const"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[62,1],"name":"/home/r/purescript-stuff/bower_components/purescript-const/src/Data/Const.purs","end":[63,45]}},{"comments":null,"title":"bindConst","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","Semigroup"],"Semigroup"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Bind"],"Bind"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Const"],"Const"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[65,1],"name":"/home/r/purescript-stuff/bower_components/purescript-const/src/Data/Const.purs","end":[66,29]}},{"comments":null,"title":"applicativeConst","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","Monoid"],"Monoid"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Applicative"],"Applicative"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Const"],"Const"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[68,1],"name":"/home/r/purescript-stuff/bower_components/purescript-const/src/Data/Const.purs","end":[69,24]}},{"comments":null,"title":"foldableConst","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Foldable"],"Foldable"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Const"],"Const"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[71,1],"name":"/home/r/purescript-stuff/bower_components/purescript-const/src/Data/Const.purs","end":[74,23]}},{"comments":null,"title":"traversableConst","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Traversable"],"Traversable"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Const"],"Const"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[76,1],"name":"/home/r/purescript-stuff/bower_components/purescript-const/src/Data/Const.purs","end":[78,37]}}],"comments":"The `Const` type constructor, which wraps its first type argument\nand ignores its second. That is, `Const a b` is isomorphic to `a`\nfor any `b`.\n\n`Const` has some useful instances. For example, the `Applicative`\ninstance allows us to collect results using a `Monoid` while\nignoring return values.\n","title":"Const","info":{"declType":"data","dataDeclType":"newtype","typeArguments":[["a",null],["b",null]]},"sourceSpan":{"start":[19,1],"name":"/home/r/purescript-stuff/bower_components/purescript-const/src/Data/Const.purs","end":[19,28]}}]},{"moduleName":{"package":"purescript-contravariant","item":["Data","Decidable"]},"declarations":[{"children":[{"comments":null,"title":"lose","info":{"declType":"typeClassMember","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeConstructor","contents":[["Data","Void"],"Void"]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}]},null]}},"sourceSpan":null},{"comments":null,"title":"decidableComparison","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Decidable"],"Decidable"]},{"tag":"TypeConstructor","contents":[["Data","Comparison"],"Comparison"]}]}},"sourceSpan":{"start":[17,1],"name":"/home/r/purescript-stuff/bower_components/purescript-contravariant/src/Data/Decidable.purs","end":[18,43]}},{"comments":null,"title":"decidableEquivalence","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Decidable"],"Decidable"]},{"tag":"TypeConstructor","contents":[["Data","Equivalence"],"Equivalence"]}]}},"sourceSpan":{"start":[20,1],"name":"/home/r/purescript-stuff/bower_components/purescript-contravariant/src/Data/Decidable.purs","end":[21,42]}},{"comments":null,"title":"decidablePredicate","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Decidable"],"Decidable"]},{"tag":"TypeConstructor","contents":[["Data","Predicate"],"Predicate"]}]}},"sourceSpan":{"start":[23,1],"name":"/home/r/purescript-stuff/bower_components/purescript-contravariant/src/Data/Decidable.purs","end":[24,40]}},{"comments":null,"title":"decidableOp","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","Monoid"],"Monoid"],"constraintArgs":[{"tag":"TypeVar","contents":"r"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Decidable"],"Decidable"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Op"],"Op"]},{"tag":"TypeVar","contents":"r"}]}}]}},"sourceSpan":{"start":[26,1],"name":"/home/r/purescript-stuff/bower_components/purescript-contravariant/src/Data/Decidable.purs","end":[27,33]}}],"comments":"`Decidable` is the contravariant analogue of `Alternative`.\n","title":"Decidable","info":{"fundeps":[],"arguments":[["f",null]],"declType":"typeClass","superclasses":[{"constraintClass":[["Data","Decide"],"Decide"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}],"constraintData":null},{"constraintClass":[["Data","Divisible"],"Divisible"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}],"constraintData":null}]},"sourceSpan":{"start":[14,1],"name":"/home/r/purescript-stuff/bower_components/purescript-contravariant/src/Data/Decidable.purs","end":[15,39]}},{"children":[],"comments":null,"title":"lost","info":{"declType":"value","type":{"tag":"ForAll","contents":["f",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Decidable"],"Decidable"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeConstructor","contents":[["Data","Void"],"Void"]}]}]},null]}},"sourceSpan":{"start":[29,1],"name":"/home/r/purescript-stuff/bower_components/purescript-contravariant/src/Data/Decidable.purs","end":[29,40]}}]},{"moduleName":{"package":"purescript-contravariant","item":["Data","Decide"]},"declarations":[{"children":[{"comments":null,"title":"choose","info":{"declType":"typeClassMember","type":{"tag":"ForAll","contents":["c",{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Either"],"Either"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeVar","contents":"c"}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"c"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}]}]}]},null]},null]},null]}},"sourceSpan":null},{"comments":null,"title":"chooseComparison","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Decide"],"Decide"]},{"tag":"TypeConstructor","contents":[["Data","Comparison"],"Comparison"]}]}},"sourceSpan":{"start":[16,1],"name":"/home/r/purescript-stuff/bower_components/purescript-contravariant/src/Data/Decide.purs","end":[23,23]}},{"comments":null,"title":"chooseEquivalence","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Decide"],"Decide"]},{"tag":"TypeConstructor","contents":[["Data","Equivalence"],"Equivalence"]}]}},"sourceSpan":{"start":[25,1],"name":"/home/r/purescript-stuff/bower_components/purescript-contravariant/src/Data/Decide.purs","end":[32,23]}},{"comments":null,"title":"choosePredicate","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Decide"],"Decide"]},{"tag":"TypeConstructor","contents":[["Data","Predicate"],"Predicate"]}]}},"sourceSpan":{"start":[34,1],"name":"/home/r/purescript-stuff/bower_components/purescript-contravariant/src/Data/Decide.purs","end":[35,70]}},{"comments":null,"title":"chooseOp","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","Semigroup"],"Semigroup"],"constraintArgs":[{"tag":"TypeVar","contents":"r"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Decide"],"Decide"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Op"],"Op"]},{"tag":"TypeVar","contents":"r"}]}}]}},"sourceSpan":{"start":[37,1],"name":"/home/r/purescript-stuff/bower_components/purescript-contravariant/src/Data/Decide.purs","end":[38,49]}}],"comments":"`Decide` is the contravariant analogue of `Alt`.\n","title":"Decide","info":{"fundeps":[],"arguments":[["f",null]],"declType":"typeClass","superclasses":[{"constraintClass":[["Data","Divide"],"Divide"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}],"constraintData":null}]},"sourceSpan":{"start":[13,1],"name":"/home/r/purescript-stuff/bower_components/purescript-contravariant/src/Data/Decide.purs","end":[14,65]}},{"children":[],"comments":"`chosen = choose id`\n","title":"chosen","info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["f",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Decide"],"Decide"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Either"],"Either"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}]}]}]},null]},null]},null]}},"sourceSpan":{"start":[41,1],"name":"/home/r/purescript-stuff/bower_components/purescript-contravariant/src/Data/Decide.purs","end":[41,65]}}]},{"moduleName":{"package":"purescript-contravariant","item":["Data","Divide"]},"declarations":[{"children":[{"comments":null,"title":"divide","info":{"declType":"typeClassMember","type":{"tag":"ForAll","contents":["c",{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Tuple"],"Tuple"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeVar","contents":"c"}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"c"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}]}]}]},null]},null]},null]}},"sourceSpan":null},{"comments":null,"title":"divideComparison","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Divide"],"Divide"]},{"tag":"TypeConstructor","contents":[["Data","Comparison"],"Comparison"]}]}},"sourceSpan":{"start":[26,1],"name":"/home/r/purescript-stuff/bower_components/purescript-contravariant/src/Data/Divide.purs","end":[29,43]}},{"comments":null,"title":"divideEquivalence","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Divide"],"Divide"]},{"tag":"TypeConstructor","contents":[["Data","Equivalence"],"Equivalence"]}]}},"sourceSpan":{"start":[31,1],"name":"/home/r/purescript-stuff/bower_components/purescript-contravariant/src/Data/Divide.purs","end":[34,43]}},{"comments":null,"title":"dividePredicate","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Divide"],"Divide"]},{"tag":"TypeConstructor","contents":[["Data","Predicate"],"Predicate"]}]}},"sourceSpan":{"start":[36,1],"name":"/home/r/purescript-stuff/bower_components/purescript-contravariant/src/Data/Divide.purs","end":[38,28]}},{"comments":null,"title":"divideOp","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","Semigroup"],"Semigroup"],"constraintArgs":[{"tag":"TypeVar","contents":"r"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Divide"],"Divide"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Op"],"Op"]},{"tag":"TypeVar","contents":"r"}]}}]}},"sourceSpan":{"start":[40,1],"name":"/home/r/purescript-stuff/bower_components/purescript-contravariant/src/Data/Divide.purs","end":[42,28]}}],"comments":"`Divide` is the contravariant analogue of `Apply`.\n\nFor example, to test equality of `Point`s, we can use the `Divide` instance\nfor `Equivalence`:\n\n```purescript\ntype Point = Tuple Int Int\n\npointEquiv :: Equivalence Point\npointEquiv = divided defaultEquivalence defaultEquivalence\n```\n","title":"Divide","info":{"fundeps":[],"arguments":[["f",null]],"declType":"typeClass","superclasses":[{"constraintClass":[["Data","Functor","Contravariant"],"Contravariant"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}],"constraintData":null}]},"sourceSpan":{"start":[23,1],"name":"/home/r/purescript-stuff/bower_components/purescript-contravariant/src/Data/Divide.purs","end":[24,64]}},{"children":[],"comments":"`divided = divide id`\n","title":"divided","info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["f",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Divide"],"Divide"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Tuple"],"Tuple"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}]}]}]},null]},null]},null]}},"sourceSpan":{"start":[45,1],"name":"/home/r/purescript-stuff/bower_components/purescript-contravariant/src/Data/Divide.purs","end":[45,65]}}]},{"moduleName":{"package":"purescript-contravariant","item":["Data","Divisible"]},"declarations":[{"children":[{"comments":null,"title":"conquer","info":{"declType":"typeClassMember","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]},null]}},"sourceSpan":null},{"comments":null,"title":"divisibleComparison","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Divisible"],"Divisible"]},{"tag":"TypeConstructor","contents":[["Data","Comparison"],"Comparison"]}]}},"sourceSpan":{"start":[16,1],"name":"/home/r/purescript-stuff/bower_components/purescript-contravariant/src/Data/Divisible.purs","end":[17,36]}},{"comments":null,"title":"divisibleEquivalence","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Divisible"],"Divisible"]},{"tag":"TypeConstructor","contents":[["Data","Equivalence"],"Equivalence"]}]}},"sourceSpan":{"start":[19,1],"name":"/home/r/purescript-stuff/bower_components/purescript-contravariant/src/Data/Divisible.purs","end":[20,39]}},{"comments":null,"title":"divisiblePredicate","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Divisible"],"Divisible"]},{"tag":"TypeConstructor","contents":[["Data","Predicate"],"Predicate"]}]}},"sourceSpan":{"start":[22,1],"name":"/home/r/purescript-stuff/bower_components/purescript-contravariant/src/Data/Divisible.purs","end":[23,35]}},{"comments":null,"title":"divisibleOp","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","Monoid"],"Monoid"],"constraintArgs":[{"tag":"TypeVar","contents":"r"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Divisible"],"Divisible"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Op"],"Op"]},{"tag":"TypeVar","contents":"r"}]}}]}},"sourceSpan":{"start":[25,1],"name":"/home/r/purescript-stuff/bower_components/purescript-contravariant/src/Data/Divisible.purs","end":[26,24]}}],"comments":"`Divisible` is the contravariant analogue of `Applicative`.\n","title":"Divisible","info":{"fundeps":[],"arguments":[["f",null]],"declType":"typeClass","superclasses":[{"constraintClass":[["Data","Divide"],"Divide"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}],"constraintData":null}]},"sourceSpan":{"start":[13,1],"name":"/home/r/purescript-stuff/bower_components/purescript-contravariant/src/Data/Divisible.purs","end":[14,27]}}]},{"moduleName":{"package":"purescript-either","item":["Data","Either"]},"declarations":[{"children":[{"comments":null,"title":"Left","info":{"arguments":[{"tag":"TypeVar","contents":"a"}],"declType":"dataConstructor"},"sourceSpan":null},{"comments":null,"title":"Right","info":{"arguments":[{"tag":"TypeVar","contents":"b"}],"declType":"dataConstructor"},"sourceSpan":null},{"comments":"The `Functor` instance allows functions to transform the contents of a\n`Right` with the `<$>` operator:\n\n``` purescript\nf <$> Right x == Right (f x)\n```\n\n`Left` values are untouched:\n\n``` purescript\nf <$> Left y == Left y\n```\n","title":"functorEither","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Functor"],"Functor"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Either"],"Either"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[36,1],"name":"/home/r/purescript-stuff/bower_components/purescript-either/src/Data/Either.purs","end":[38,32]}},{"comments":null,"title":"invariantEither","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Functor","Invariant"],"Invariant"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Either"],"Either"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[40,1],"name":"/home/r/purescript-stuff/bower_components/purescript-either/src/Data/Either.purs","end":[41,15]}},{"comments":null,"title":"bifunctorEither","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Bifunctor"],"Bifunctor"]},{"tag":"TypeConstructor","contents":[["Data","Either"],"Either"]}]}},"sourceSpan":{"start":[43,1],"name":"/home/r/purescript-stuff/bower_components/purescript-either/src/Data/Either.purs","end":[45,36]}},{"comments":"The `Apply` instance allows functions contained within a `Right` to\ntransform a value contained within a `Right` using the `(<*>)` operator:\n\n``` purescript\nRight f <*> Right x == Right (f x)\n```\n\n`Left` values are left untouched:\n\n``` purescript\nLeft f <*> Right x == Left x\nRight f <*> Left y == Left y\n```\n\nCombining `Functor`'s `<$>` with `Apply`'s `<*>` can be used to transform a\npure function to take `Either`-typed arguments so `f :: a -> b -> c`\nbecomes `f :: Either l a -> Either l b -> Either l c`:\n\n``` purescript\nf <$> Right x <*> Right y == Right (f x y)\n```\n\nThe `Left`-preserving behaviour of both operators means the result of\nan expression like the above but where any one of the values is `Left`\nmeans the whole result becomes `Left` also, taking the first `Left` value\nfound:\n\n``` purescript\nf <$> Left x <*> Right y == Left x\nf <$> Right x <*> Left y == Left y\nf <$> Left x <*> Left y == Left x\n```\n","title":"applyEither","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Apply"],"Apply"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Either"],"Either"]},{"tag":"TypeVar","contents":"e"}]}}]}},"sourceSpan":{"start":[79,1],"name":"/home/r/purescript-stuff/bower_components/purescript-either/src/Data/Either.purs","end":[81,30]}},{"comments":"The `Applicative` instance enables lifting of values into `Either` with the\n`pure` function:\n\n``` purescript\npure x :: Either _ _ == Right x\n```\n\nCombining `Functor`'s `<$>` with `Apply`'s `<*>` and `Applicative`'s\n`pure` can be used to pass a mixture of `Either` and non-`Either` typed\nvalues to a function that does not usually expect them, by using `pure`\nfor any value that is not already `Either` typed:\n\n``` purescript\nf <$> Right x <*> pure y == Right (f x y)\n```\n\nEven though `pure = Right` it is recommended to use `pure` in situations\nlike this as it allows the choice of `Applicative` to be changed later\nwithout having to go through and replace `Right` with a new constructor.\n","title":"applicativeEither","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Applicative"],"Applicative"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Either"],"Either"]},{"tag":"TypeVar","contents":"e"}]}}]}},"sourceSpan":{"start":[102,1],"name":"/home/r/purescript-stuff/bower_components/purescript-either/src/Data/Either.purs","end":[103,15]}},{"comments":"The `Alt` instance allows for a choice to be made between two `Either`\nvalues with the `<|>` operator, where the first `Right` encountered\nis taken.\n\n``` purescript\nRight x <|> Right y == Right x\nLeft x <|> Right y == Right y\nLeft x <|> Left y == Left y\n```\n","title":"altEither","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Alt"],"Alt"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Either"],"Either"]},{"tag":"TypeVar","contents":"e"}]}}]}},"sourceSpan":{"start":[114,1],"name":"/home/r/purescript-stuff/bower_components/purescript-either/src/Data/Either.purs","end":[116,21]}},{"comments":"The `Bind` instance allows sequencing of `Either` values and functions that\nreturn an `Either` by using the `>>=` operator:\n\n``` purescript\nLeft x >>= f = Left x\nRight x >>= f = f x\n```\n","title":"bindEither","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Bind"],"Bind"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Either"],"Either"]},{"tag":"TypeVar","contents":"e"}]}}]}},"sourceSpan":{"start":[125,1],"name":"/home/r/purescript-stuff/bower_components/purescript-either/src/Data/Either.purs","end":[126,47]}},{"comments":"The `Monad` instance guarantees that there are both `Applicative` and\n`Bind` instances for `Either`. This also enables the `do` syntactic sugar:\n\n``` purescript\ndo\n  x' <- x\n  y' <- y\n  pure (f x' y')\n```\n\nWhich is equivalent to:\n\n``` purescript\nx >>= (\\x' -> y >>= (\\y' -> pure (f x' y')))\n```\n","title":"monadEither","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad"],"Monad"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Either"],"Either"]},{"tag":"TypeVar","contents":"e"}]}}]}},"sourceSpan":{"start":[143,1],"name":"/home/r/purescript-stuff/bower_components/purescript-either/src/Data/Either.purs","end":[143,41]}},{"comments":"The `Extend` instance allows sequencing of `Either` values and functions\nthat accept an `Either` and return a non-`Either` result using the\n`<<=` operator.\n\n``` purescript\nf <<= Left x = Left x\nf <<= Right x = Right (f (Right x))\n```\n","title":"extendEither","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Extend"],"Extend"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Either"],"Either"]},{"tag":"TypeVar","contents":"e"}]}}]}},"sourceSpan":{"start":[153,1],"name":"/home/r/purescript-stuff/bower_components/purescript-either/src/Data/Either.purs","end":[155,35]}},{"comments":"The `Show` instance allows `Either` values to be rendered as a string with\n`show` whenever there is an `Show` instance for both type the `Either` can\ncontain.\n","title":"showEither","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","Show"],"Show"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"constraintClass":[["Data","Show"],"Show"],"constraintArgs":[{"tag":"TypeVar","contents":"b"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Show"],"Show"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Either"],"Either"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}},"sourceSpan":{"start":[160,1],"name":"/home/r/purescript-stuff/bower_components/purescript-either/src/Data/Either.purs","end":[164,1]}},{"comments":"The `Eq` instance allows `Either` values to be checked for equality with\n`==` and inequality with `/=` whenever there is an `Eq` instance for both\ntypes the `Either` can contain.\n","title":"eqEither","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","Eq"],"Eq"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"constraintClass":[["Data","Eq"],"Eq"],"constraintArgs":[{"tag":"TypeVar","contents":"b"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Eq"],"Eq"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Either"],"Either"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}},"sourceSpan":{"start":[167,1],"name":"/home/r/purescript-stuff/bower_components/purescript-either/src/Data/Either.purs","end":[167,60]}},{"comments":null,"title":"eq1Either","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","Eq"],"Eq"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Eq"],"Eq1"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Either"],"Either"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[169,1],"name":"/home/r/purescript-stuff/bower_components/purescript-either/src/Data/Either.purs","end":[169,60]}},{"comments":"The `Ord` instance allows `Either` values to be compared with\n`compare`, `>`, `>=`, `<` and `<=` whenever there is an `Ord` instance for\nboth types the `Either` can contain.\n\nAny `Left` value is considered to be less than a `Right` value.\n","title":"ordEither","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","Ord"],"Ord"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"constraintClass":[["Data","Ord"],"Ord"],"constraintArgs":[{"tag":"TypeVar","contents":"b"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Ord"],"Ord"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Either"],"Either"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}},"sourceSpan":{"start":[176,1],"name":"/home/r/purescript-stuff/bower_components/purescript-either/src/Data/Either.purs","end":[176,64]}},{"comments":null,"title":"ord1Either","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","Ord"],"Ord"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Ord"],"Ord1"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Either"],"Either"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[178,1],"name":"/home/r/purescript-stuff/bower_components/purescript-either/src/Data/Either.purs","end":[178,73]}},{"comments":null,"title":"boundedEither","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","Bounded"],"Bounded"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"constraintClass":[["Data","Bounded"],"Bounded"],"constraintArgs":[{"tag":"TypeVar","contents":"b"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Bounded"],"Bounded"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Either"],"Either"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}},"sourceSpan":{"start":[180,1],"name":"/home/r/purescript-stuff/bower_components/purescript-either/src/Data/Either.purs","end":[182,23]}},{"comments":null,"title":"foldableEither","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Foldable"],"Foldable"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Either"],"Either"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[184,1],"name":"/home/r/purescript-stuff/bower_components/purescript-either/src/Data/Either.purs","end":[190,28]}},{"comments":null,"title":"bifoldableEither","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Bifoldable"],"Bifoldable"]},{"tag":"TypeConstructor","contents":[["Data","Either"],"Either"]}]}},"sourceSpan":{"start":[192,1],"name":"/home/r/purescript-stuff/bower_components/purescript-either/src/Data/Either.purs","end":[198,32]}},{"comments":null,"title":"traversableEither","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Traversable"],"Traversable"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Either"],"Either"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[200,1],"name":"/home/r/purescript-stuff/bower_components/purescript-either/src/Data/Either.purs","end":[204,36]}},{"comments":null,"title":"bitraversableEither","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Bitraversable"],"Bitraversable"]},{"tag":"TypeConstructor","contents":[["Data","Either"],"Either"]}]}},"sourceSpan":{"start":[206,1],"name":"/home/r/purescript-stuff/bower_components/purescript-either/src/Data/Either.purs","end":[210,37]}},{"comments":null,"title":"semiringEither","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","Semiring"],"Semiring"],"constraintArgs":[{"tag":"TypeVar","contents":"b"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Semiring"],"Semiring"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Either"],"Either"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}},"sourceSpan":{"start":[212,1],"name":"/home/r/purescript-stuff/bower_components/purescript-either/src/Data/Either.purs","end":[216,28]}},{"comments":null,"title":"semigroupEither","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","Semigroup"],"Semigroup"],"constraintArgs":[{"tag":"TypeVar","contents":"b"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Semigroup"],"Semigroup"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Either"],"Either"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}},"sourceSpan":{"start":[218,1],"name":"/home/r/purescript-stuff/bower_components/purescript-either/src/Data/Either.purs","end":[219,34]}}],"comments":"The `Either` type is used to represent a choice between two types of value.\n\nA common use case for `Either` is error handling, where `Left` is used to\ncarry an error value and `Right` is used to carry a success value.\n","title":"Either","info":{"declType":"data","dataDeclType":"data","typeArguments":[["a",null],["b",null]]},"sourceSpan":{"start":[22,1],"name":"/home/r/purescript-stuff/bower_components/purescript-either/src/Data/Either.purs","end":[22,35]}},{"children":[],"comments":"Returns `true` when the `Either` value was constructed with `Right`.\n","title":"isRight","info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Either"],"Either"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]},null]},null]}},"sourceSpan":{"start":[242,1],"name":"/home/r/purescript-stuff/bower_components/purescript-either/src/Data/Either.purs","end":[242,45]}},{"children":[],"comments":"Returns `true` when the `Either` value was constructed with `Left`.\n","title":"isLeft","info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Either"],"Either"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]},null]},null]}},"sourceSpan":{"start":[238,1],"name":"/home/r/purescript-stuff/bower_components/purescript-either/src/Data/Either.purs","end":[238,44]}},{"children":[],"comments":"A partial function that extracts the value from the `Right` data constructor.\nPassing a `Left` to `fromRight` will throw an error at runtime.\n","title":"fromRight","info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Prim"],"Partial"],"constraintArgs":[],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Either"],"Either"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeVar","contents":"b"}]}]},null]},null]}},"sourceSpan":{"start":[252,1],"name":"/home/r/purescript-stuff/bower_components/purescript-either/src/Data/Either.purs","end":[252,52]}},{"children":[],"comments":"A partial function that extracts the value from the `Left` data constructor.\nPassing a `Right` to `fromLeft` will throw an error at runtime.\n","title":"fromLeft","info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Prim"],"Partial"],"constraintArgs":[],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Either"],"Either"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeVar","contents":"a"}]}]},null]},null]}},"sourceSpan":{"start":[247,1],"name":"/home/r/purescript-stuff/bower_components/purescript-either/src/Data/Either.purs","end":[247,51]}},{"children":[],"comments":"Takes two functions and an `Either` value, if the value is a `Left` the\ninner value is applied to the first function, if the value is a `Right`\nthe inner value is applied to the second function.\n\n``` purescript\neither f g (Left x) == f x\neither f g (Right y) == g y\n```\n","title":"either","info":{"declType":"value","type":{"tag":"ForAll","contents":["c",{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"c"}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeVar","contents":"c"}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Either"],"Either"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeVar","contents":"c"}]}]}]},null]},null]},null]}},"sourceSpan":{"start":[229,1],"name":"/home/r/purescript-stuff/bower_components/purescript-either/src/Data/Either.purs","end":[229,64]}}]},{"moduleName":{"package":"purescript-prelude","item":["Data","Eq"]},"declarations":[{"children":[{"comments":null,"title":"eq1","info":{"declType":"typeClassMember","type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Eq"],"Eq"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}]}]},null]}},"sourceSpan":null},{"comments":null,"title":"eq1Array","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Eq"],"Eq1"]},{"tag":"TypeConstructor","contents":[["Prim"],"Array"]}]}},"sourceSpan":{"start":[65,1],"name":"/home/r/purescript-stuff/bower_components/purescript-prelude/src/Data/Eq.purs","end":[66,11]}}],"comments":"The `Eq` type class represents type constructors with decidable equality.\n","title":"Eq1","info":{"fundeps":[],"arguments":[["f",null]],"declType":"typeClass","superclasses":[]},"sourceSpan":{"start":[62,1],"name":"/home/r/purescript-stuff/bower_components/purescript-prelude/src/Data/Eq.purs","end":[63,49]}},{"children":[],"comments":null,"title":"notEq1","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["f",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Eq"],"Eq1"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}],"constraintData":null},{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Eq"],"Eq"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}]}]}]},null]},null]}},"sourceSpan":{"start":[68,1],"name":"/home/r/purescript-stuff/bower_components/purescript-prelude/src/Data/Eq.purs","end":[68,61]}}]},{"moduleName":{"package":"purescript-exists","item":["Data","Exists"]},"declarations":[{"children":[],"comments":"This type constructor can be used to existentially quantify over a type of kind `Type`.\n\nSpecifically, the type `Exists f` is isomorphic to the existential type `exists a. f a`.\n\nExistential types can be encoded using universal types (`forall`) for endofunctors in more general\ncategories. The benefit of this library is that, by using the FFI, we can create an efficient\nrepresentation of the existential by simply hiding type information.\n\nFor example, consider the type `exists s. Tuple s (s -> Tuple s a)` which represents infinite streams\nof elements of type `a`.\n\nThis type can be constructed by creating a type constructor `StreamF` as follows:\n\n```purescript\ndata StreamF a s = StreamF s (s -> Tuple s a)\n```\n\nWe can then define the type of streams using `Exists`:\n\n```purescript\ntype Stream a = Exists (StreamF a)\n```\n","title":"Exists","info":{"kind":{"tag":"FunKind","contents":[{"tag":"FunKind","contents":[{"tag":"NamedKind","contents":[["Prim"],"Type"]},{"tag":"NamedKind","contents":[["Prim"],"Type"]}]},{"tag":"NamedKind","contents":[["Prim"],"Type"]}]},"declType":"externData"},"sourceSpan":{"start":[27,1],"name":"/home/r/purescript-stuff/bower_components/purescript-exists/src/Data/Exists.purs","end":[27,53]}},{"children":[],"comments":"The `runExists` function is used to eliminate a value of type `Exists f`. The rank 2 type ensures\nthat the existentially-quantified type does not escape its scope. Since the function is required\nto work for _any_ type `a`, it will work for the existentially-quantified type.\n\nFor example, we can write a function to obtain the head of a stream by using `runExists` as follows:\n\n```purescript\nhead :: forall a. Stream a -> a\nhead = runExists head'\n  where\n  head' :: forall s. StreamF a s -> a\n  head' (StreamF s f) = snd (f s)\n```\n","title":"runExists","info":{"declType":"value","type":{"tag":"ForAll","contents":["r",{"tag":"ForAll","contents":["f",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeVar","contents":"r"}]},null]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Exists"],"Exists"]},{"tag":"TypeVar","contents":"f"}]}]},{"tag":"TypeVar","contents":"r"}]}]},null]},null]}},"sourceSpan":{"start":[54,1],"name":"/home/r/purescript-stuff/bower_components/purescript-exists/src/Data/Exists.purs","end":[54,63]}},{"children":[],"comments":"The `mkExists` function is used to introduce a value of type `Exists f`, by providing a value of\ntype `f a`, for some type `a` which will be hidden in the existentially-quantified type.\n\nFor example, to create a value of type `Stream Number`, we might use `mkExists` as follows:\n\n```purescript\nnats :: Stream Number\nnats = mkExists $ StreamF 0 (\\n -> Tuple (n + 1) n)\n```\n","title":"mkExists","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["f",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Exists"],"Exists"]},{"tag":"TypeVar","contents":"f"}]}]},null]},null]}},"sourceSpan":{"start":[38,1],"name":"/home/r/purescript-stuff/bower_components/purescript-exists/src/Data/Exists.purs","end":[38,40]}}]},{"moduleName":{"package":"purescript-foldable-traversable","item":["Data","Foldable"]},"declarations":[{"children":[{"comments":null,"title":"foldr","info":{"declType":"typeClassMember","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeVar","contents":"b"}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeVar","contents":"b"}]}]}]},null]},null]}},"sourceSpan":null},{"comments":null,"title":"foldl","info":{"declType":"typeClassMember","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeVar","contents":"b"}]}]}]},null]},null]}},"sourceSpan":null},{"comments":null,"title":"foldMap","info":{"declType":"typeClassMember","type":{"tag":"ForAll","contents":["m",{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Monoid"],"Monoid"],"constraintArgs":[{"tag":"TypeVar","contents":"m"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"m"}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeVar","contents":"m"}]}]}]},null]},null]}},"sourceSpan":null},{"comments":null,"title":"foldableArray","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Foldable"],"Foldable"]},{"tag":"TypeConstructor","contents":[["Prim"],"Array"]}]}},"sourceSpan":{"start":[120,1],"name":"/home/r/purescript-stuff/bower_components/purescript-foldable-traversable/src/Data/Foldable.purs","end":[123,28]}},{"comments":null,"title":"foldableMaybe","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Foldable"],"Foldable"]},{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]}]}},"sourceSpan":{"start":[128,1],"name":"/home/r/purescript-stuff/bower_components/purescript-foldable-traversable/src/Data/Foldable.purs","end":[134,27]}},{"comments":null,"title":"foldableFirst","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Foldable"],"Foldable"]},{"tag":"TypeConstructor","contents":[["Data","Maybe","First"],"First"]}]}},"sourceSpan":{"start":[136,1],"name":"/home/r/purescript-stuff/bower_components/purescript-foldable-traversable/src/Data/Foldable.purs","end":[139,36]}},{"comments":null,"title":"foldableLast","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Foldable"],"Foldable"]},{"tag":"TypeConstructor","contents":[["Data","Maybe","Last"],"Last"]}]}},"sourceSpan":{"start":[141,1],"name":"/home/r/purescript-stuff/bower_components/purescript-foldable-traversable/src/Data/Foldable.purs","end":[144,35]}},{"comments":null,"title":"foldableAdditive","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Foldable"],"Foldable"]},{"tag":"TypeConstructor","contents":[["Data","Monoid","Additive"],"Additive"]}]}},"sourceSpan":{"start":[146,1],"name":"/home/r/purescript-stuff/bower_components/purescript-foldable-traversable/src/Data/Foldable.purs","end":[149,31]}},{"comments":null,"title":"foldableDual","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Foldable"],"Foldable"]},{"tag":"TypeConstructor","contents":[["Data","Monoid","Dual"],"Dual"]}]}},"sourceSpan":{"start":[151,1],"name":"/home/r/purescript-stuff/bower_components/purescript-foldable-traversable/src/Data/Foldable.purs","end":[154,27]}},{"comments":null,"title":"foldableDisj","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Foldable"],"Foldable"]},{"tag":"TypeConstructor","contents":[["Data","Monoid","Disj"],"Disj"]}]}},"sourceSpan":{"start":[156,1],"name":"/home/r/purescript-stuff/bower_components/purescript-foldable-traversable/src/Data/Foldable.purs","end":[159,27]}},{"comments":null,"title":"foldableConj","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Foldable"],"Foldable"]},{"tag":"TypeConstructor","contents":[["Data","Monoid","Conj"],"Conj"]}]}},"sourceSpan":{"start":[161,1],"name":"/home/r/purescript-stuff/bower_components/purescript-foldable-traversable/src/Data/Foldable.purs","end":[164,27]}},{"comments":null,"title":"foldableMultiplicative","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Foldable"],"Foldable"]},{"tag":"TypeConstructor","contents":[["Data","Monoid","Multiplicative"],"Multiplicative"]}]}},"sourceSpan":{"start":[166,1],"name":"/home/r/purescript-stuff/bower_components/purescript-foldable-traversable/src/Data/Foldable.purs","end":[169,37]}}],"comments":"`Foldable` represents data structures which can be _folded_.\n\n- `foldr` folds a structure from the right\n- `foldl` folds a structure from the left\n- `foldMap` folds a structure by accumulating values in a `Monoid`\n\nDefault implementations are provided by the following functions:\n\n- `foldrDefault`\n- `foldlDefault`\n- `foldMapDefaultR`\n- `foldMapDefaultL`\n\nNote: some combinations of the default implementations are unsafe to\nuse together - causing a non-terminating mutually recursive cycle.\nThese combinations are documented per function.\n","title":"Foldable","info":{"fundeps":[],"arguments":[["f",null]],"declType":"typeClass","superclasses":[]},"sourceSpan":{"start":[63,1],"name":"/home/r/purescript-stuff/bower_components/purescript-foldable-traversable/src/Data/Foldable.purs","end":[66,58]}},{"children":[],"comments":"Traverse a data structure, performing some effects encoded by an\n`Applicative` functor at each value, ignoring the final result.\n\nFor example:\n\n```purescript\ntraverse_ print [1, 2, 3]\n```\n","title":"traverse_","info":{"declType":"value","type":{"tag":"ForAll","contents":["m",{"tag":"ForAll","contents":["f",{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Control","Applicative"],"Applicative"],"constraintArgs":[{"tag":"TypeVar","contents":"m"}],"constraintData":null},{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Foldable"],"Foldable"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"m"},{"tag":"TypeVar","contents":"b"}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"m"},{"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}]}]}]}]},null]},null]},null]},null]}},"sourceSpan":{"start":[190,1],"name":"/home/r/purescript-stuff/bower_components/purescript-foldable-traversable/src/Data/Foldable.purs","end":[196,12]}},{"children":[],"comments":"Find the sum of the numeric values in a data structure.\n","title":"sum","info":{"declType":"value","type":{"tag":"ForAll","contents":["f",{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Foldable"],"Foldable"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}],"constraintData":null},{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Semiring"],"Semiring"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeVar","contents":"a"}]}]}]},null]},null]}},"sourceSpan":{"start":[308,1],"name":"/home/r/purescript-stuff/bower_components/purescript-foldable-traversable/src/Data/Foldable.purs","end":[308,56]}},{"children":[],"comments":"Perform all of the effects in some data structure in the order\ngiven by the `Foldable` instance, ignoring the final result.\n\nFor example:\n\n```purescript\nsequence_ [ trace \"Hello, \", trace \" world!\" ]\n```\n","title":"sequence_","info":{"declType":"value","type":{"tag":"ForAll","contents":["m",{"tag":"ForAll","contents":["f",{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Control","Applicative"],"Applicative"],"constraintArgs":[{"tag":"TypeVar","contents":"m"}],"constraintData":null},{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Foldable"],"Foldable"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"m"},{"tag":"TypeVar","contents":"a"}]}}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"m"},{"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}]}]}]},null]},null]},null]}},"sourceSpan":{"start":[229,1],"name":"/home/r/purescript-stuff/bower_components/purescript-foldable-traversable/src/Data/Foldable.purs","end":[229,76]}},{"children":[],"comments":"Find the product of the numeric values in a data structure.\n","title":"product","info":{"declType":"value","type":{"tag":"ForAll","contents":["f",{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Foldable"],"Foldable"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}],"constraintData":null},{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Semiring"],"Semiring"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeVar","contents":"a"}]}]}]},null]},null]}},"sourceSpan":{"start":[312,1],"name":"/home/r/purescript-stuff/bower_components/purescript-foldable-traversable/src/Data/Foldable.purs","end":[312,60]}},{"children":[],"comments":"The disjunction of all the values in a data structure. When specialized\nto `Boolean`, this function will test whether any of the values in a data\nstructure is `true`.\n","title":"or","info":{"declType":"value","type":{"tag":"ForAll","contents":["f",{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Foldable"],"Foldable"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}],"constraintData":null},{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","HeytingAlgebra"],"HeytingAlgebra"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeVar","contents":"a"}]}]}]},null]},null]}},"sourceSpan":{"start":[294,1],"name":"/home/r/purescript-stuff/bower_components/purescript-foldable-traversable/src/Data/Foldable.purs","end":[294,61]}},{"children":[],"comments":"Combines a collection of elements using the `Alt` operation.\n","title":"oneOf","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["g",{"tag":"ForAll","contents":["f",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Foldable"],"Foldable"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}],"constraintData":null},{"tag":"ConstrainedType","contents":[{"constraintClass":[["Control","Plus"],"Plus"],"constraintArgs":[{"tag":"TypeVar","contents":"g"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"g"},{"tag":"TypeVar","contents":"a"}]}}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"g"},{"tag":"TypeVar","contents":"a"}]}]}]}]},null]},null]},null]}},"sourceSpan":{"start":[233,1],"name":"/home/r/purescript-stuff/bower_components/purescript-foldable-traversable/src/Data/Foldable.purs","end":[233,62]}},{"children":[],"comments":"Test whether a value is not an element of a data structure.\n","title":"notElem","info":{"declType":"value","type":{"tag":"ForAll","contents":["f",{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Foldable"],"Foldable"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}],"constraintData":null},{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Eq"],"Eq"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}]}]}]},null]},null]}},"sourceSpan":{"start":[320,1],"name":"/home/r/purescript-stuff/bower_components/purescript-foldable-traversable/src/Data/Foldable.purs","end":[320,65]}},{"children":[],"comments":"Find the smallest element of a structure, according to a given comparison\nfunction. The comparison function should represent a total ordering (see\nthe `Ord` type class laws); if it does not, the behaviour is undefined.\n","title":"minimumBy","info":{"declType":"value","type":{"tag":"ForAll","contents":["f",{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Foldable"],"Foldable"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeConstructor","contents":[["Data","Ordering"],"Ordering"]}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeVar","contents":"a"}]}]}]}]},null]},null]}},"sourceSpan":{"start":[357,1],"name":"/home/r/purescript-stuff/bower_components/purescript-foldable-traversable/src/Data/Foldable.purs","end":[357,78]}},{"children":[],"comments":"Find the smallest element of a structure, according to its `Ord` instance.\n","title":"minimum","info":{"declType":"value","type":{"tag":"ForAll","contents":["f",{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Ord"],"Ord"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Foldable"],"Foldable"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeVar","contents":"a"}]}]}]}]},null]},null]}},"sourceSpan":{"start":[351,1],"name":"/home/r/purescript-stuff/bower_components/purescript-foldable-traversable/src/Data/Foldable.purs","end":[351,61]}},{"children":[],"comments":"Find the largest element of a structure, according to a given comparison\nfunction. The comparison function should represent a total ordering (see\nthe `Ord` type class laws); if it does not, the behaviour is undefined.\n","title":"maximumBy","info":{"declType":"value","type":{"tag":"ForAll","contents":["f",{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Foldable"],"Foldable"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeConstructor","contents":[["Data","Ordering"],"Ordering"]}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeVar","contents":"a"}]}]}]}]},null]},null]}},"sourceSpan":{"start":[344,1],"name":"/home/r/purescript-stuff/bower_components/purescript-foldable-traversable/src/Data/Foldable.purs","end":[344,78]}},{"children":[],"comments":"Find the largest element of a structure, according to its `Ord` instance.\n","title":"maximum","info":{"declType":"value","type":{"tag":"ForAll","contents":["f",{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Ord"],"Ord"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Foldable"],"Foldable"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeVar","contents":"a"}]}]}]}]},null]},null]}},"sourceSpan":{"start":[338,1],"name":"/home/r/purescript-stuff/bower_components/purescript-foldable-traversable/src/Data/Foldable.purs","end":[338,61]}},{"children":[],"comments":"Fold a data structure, accumulating values in some `Monoid`,\ncombining adjacent elements using the specified separator.\n","title":"intercalate","info":{"declType":"value","type":{"tag":"ForAll","contents":["m",{"tag":"ForAll","contents":["f",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Foldable"],"Foldable"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}],"constraintData":null},{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Monoid"],"Monoid"],"constraintArgs":[{"tag":"TypeVar","contents":"m"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"m"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"m"}]}]},{"tag":"TypeVar","contents":"m"}]}]}]}]},null]},null]}},"sourceSpan":{"start":[238,1],"name":"/home/r/purescript-stuff/bower_components/purescript-foldable-traversable/src/Data/Foldable.purs","end":[238,67]}},{"children":[],"comments":"A version of `traverse_` with its arguments flipped.\n\nThis can be useful when running an action written using do notation\nfor every element in a data structure:\n\nFor example:\n\n```purescript\nfor_ [1, 2, 3] \\n -> do\n  print n\n  trace \"squared is\"\n  print (n * n)\n```\n","title":"for_","info":{"declType":"value","type":{"tag":"ForAll","contents":["m",{"tag":"ForAll","contents":["f",{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Control","Applicative"],"Applicative"],"constraintArgs":[{"tag":"TypeVar","contents":"m"}],"constraintData":null},{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Foldable"],"Foldable"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"m"},{"tag":"TypeVar","contents":"b"}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"m"},{"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}]}]}]}]},null]},null]},null]},null]}},"sourceSpan":{"start":[212,1],"name":"/home/r/purescript-stuff/bower_components/purescript-foldable-traversable/src/Data/Foldable.purs","end":[218,12]}},{"children":[],"comments":"Fold a data structure, accumulating values in some `Monoid`.\n","title":"fold","info":{"declType":"value","type":{"tag":"ForAll","contents":["m",{"tag":"ForAll","contents":["f",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Foldable"],"Foldable"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}],"constraintData":null},{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Monoid"],"Monoid"],"constraintArgs":[{"tag":"TypeVar","contents":"m"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"m"}]}]},{"tag":"TypeVar","contents":"m"}]}]}]},null]},null]}},"sourceSpan":{"start":[172,1],"name":"/home/r/purescript-stuff/bower_components/purescript-foldable-traversable/src/Data/Foldable.purs","end":[172,55]}},{"children":[],"comments":"Try to find an element in a data structure which satisfies a predicate mapping.\n","title":"findMap","info":{"declType":"value","type":{"tag":"ForAll","contents":["f",{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Foldable"],"Foldable"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeVar","contents":"b"}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeVar","contents":"b"}]}]}]}]},null]},null]},null]}},"sourceSpan":{"start":[331,1],"name":"/home/r/purescript-stuff/bower_components/purescript-foldable-traversable/src/Data/Foldable.purs","end":[331,72]}},{"children":[],"comments":"Try to find an element in a data structure which satisfies a predicate.\n","title":"find","info":{"declType":"value","type":{"tag":"ForAll","contents":["f",{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Foldable"],"Foldable"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeVar","contents":"a"}]}]}]}]},null]},null]}},"sourceSpan":{"start":[324,1],"name":"/home/r/purescript-stuff/bower_components/purescript-foldable-traversable/src/Data/Foldable.purs","end":[324,67]}},{"children":[],"comments":"Test whether a value is an element of a data structure.\n","title":"elem","info":{"declType":"value","type":{"tag":"ForAll","contents":["f",{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Foldable"],"Foldable"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}],"constraintData":null},{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Eq"],"Eq"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}]}]}]},null]},null]}},"sourceSpan":{"start":[316,1],"name":"/home/r/purescript-stuff/bower_components/purescript-foldable-traversable/src/Data/Foldable.purs","end":[316,62]}},{"children":[],"comments":"`any f` is the same as `or <<< map f`; map a function over the structure,\nand then get the disjunction of the results.\n","title":"any","info":{"declType":"value","type":{"tag":"ForAll","contents":["f",{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Foldable"],"Foldable"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}],"constraintData":null},{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","HeytingAlgebra"],"HeytingAlgebra"],"constraintArgs":[{"tag":"TypeVar","contents":"b"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeVar","contents":"b"}]}]}]}]},null]},null]},null]}},"sourceSpan":{"start":[304,1],"name":"/home/r/purescript-stuff/bower_components/purescript-foldable-traversable/src/Data/Foldable.purs","end":[304,76]}},{"children":[],"comments":"The conjunction of all the values in a data structure. When specialized\nto `Boolean`, this function will test whether all of the values in a data\nstructure are `true`.\n","title":"and","info":{"declType":"value","type":{"tag":"ForAll","contents":["f",{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Foldable"],"Foldable"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}],"constraintData":null},{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","HeytingAlgebra"],"HeytingAlgebra"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeVar","contents":"a"}]}]}]},null]},null]}},"sourceSpan":{"start":[288,1],"name":"/home/r/purescript-stuff/bower_components/purescript-foldable-traversable/src/Data/Foldable.purs","end":[288,62]}},{"children":[],"comments":"`all f` is the same as `and <<< map f`; map a function over the structure,\nand then get the conjunction of the results.\n","title":"all","info":{"declType":"value","type":{"tag":"ForAll","contents":["f",{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Foldable"],"Foldable"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}],"constraintData":null},{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","HeytingAlgebra"],"HeytingAlgebra"],"constraintArgs":[{"tag":"TypeVar","contents":"b"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeVar","contents":"b"}]}]}]}]},null]},null]},null]}},"sourceSpan":{"start":[299,1],"name":"/home/r/purescript-stuff/bower_components/purescript-foldable-traversable/src/Data/Foldable.purs","end":[299,76]}}]},{"moduleName":{"package":"purescript-prelude","item":["Data","Function"]},"declarations":[{"children":[],"comments":"The `on` function is used to change the domain of a binary operator.\n\nFor example, we can create a function which compares two records based on the values of their `x` properties:\n\n```purescript\ncompareX :: forall r. { x :: Number | r } -> { x :: Number | r } -> Ordering\ncompareX = compare `on` _.x\n```\n","title":"on","info":{"declType":"value","type":{"tag":"ForAll","contents":["c",{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeVar","contents":"c"}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"c"}]}]}]}]},null]},null]},null]}},"sourceSpan":{"start":[88,1],"name":"/home/r/purescript-stuff/bower_components/purescript-prelude/src/Data/Function.purs","end":[88,61]}}]},{"moduleName":{"package":"purescript-functors","item":["Data","Functor","Compose"]},"declarations":[{"children":[{"comments":null,"title":"Compose","info":{"arguments":[{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"g"},{"tag":"TypeVar","contents":"a"}]}}]}}],"declType":"dataConstructor"},"sourceSpan":null},{"comments":null,"title":"newtypeCompose","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Newtype"],"Newtype"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Functor","Compose"],"Compose"]},{"tag":"TypeVar","contents":"f"}]},{"tag":"TypeVar","contents":"g"}]},{"tag":"TypeVar","contents":"a"}]}}]},{"tag":"TypeWildcard","contents":{"start":[28,59],"name":"/home/r/purescript-stuff/bower_components/purescript-functors/src/Data/Functor/Compose.purs","end":[28,60]}}]}},"sourceSpan":{"start":[28,1],"name":"/home/r/purescript-stuff/bower_components/purescript-functors/src/Data/Functor/Compose.purs","end":[28,60]}},{"comments":null,"title":"eq1Compose","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","Eq"],"Eq1"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}],"constraintData":null},{"constraintClass":[["Data","Eq"],"Eq1"],"constraintArgs":[{"tag":"TypeVar","contents":"g"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Eq"],"Eq1"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Functor","Compose"],"Compose"]},{"tag":"TypeVar","contents":"f"}]},{"tag":"TypeVar","contents":"g"}]}}]}},"sourceSpan":{"start":[30,1],"name":"/home/r/purescript-stuff/bower_components/purescript-functors/src/Data/Functor/Compose.purs","end":[32,48]}},{"comments":null,"title":"eqCompose","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","Eq"],"Eq1"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}],"constraintData":null},{"constraintClass":[["Data","Eq"],"Eq1"],"constraintArgs":[{"tag":"TypeVar","contents":"g"}],"constraintData":null},{"constraintClass":[["Data","Eq"],"Eq"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Eq"],"Eq"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Functor","Compose"],"Compose"]},{"tag":"TypeVar","contents":"f"}]},{"tag":"TypeVar","contents":"g"}]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[34,1],"name":"/home/r/purescript-stuff/bower_components/purescript-functors/src/Data/Functor/Compose.purs","end":[35,11]}},{"comments":null,"title":"ord1Compose","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","Ord"],"Ord1"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}],"constraintData":null},{"constraintClass":[["Data","Ord"],"Ord1"],"constraintArgs":[{"tag":"TypeVar","contents":"g"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Ord"],"Ord1"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Functor","Compose"],"Compose"]},{"tag":"TypeVar","contents":"f"}]},{"tag":"TypeVar","contents":"g"}]}}]}},"sourceSpan":{"start":[37,1],"name":"/home/r/purescript-stuff/bower_components/purescript-functors/src/Data/Functor/Compose.purs","end":[39,53]}},{"comments":null,"title":"ordCompose","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","Ord"],"Ord1"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}],"constraintData":null},{"constraintClass":[["Data","Ord"],"Ord1"],"constraintArgs":[{"tag":"TypeVar","contents":"g"}],"constraintData":null},{"constraintClass":[["Data","Ord"],"Ord"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Ord"],"Ord"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Functor","Compose"],"Compose"]},{"tag":"TypeVar","contents":"f"}]},{"tag":"TypeVar","contents":"g"}]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[41,1],"name":"/home/r/purescript-stuff/bower_components/purescript-functors/src/Data/Functor/Compose.purs","end":[42,21]}},{"comments":null,"title":"showCompose","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","Show"],"Show"],"constraintArgs":[{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"g"},{"tag":"TypeVar","contents":"a"}]}}]}}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Show"],"Show"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Functor","Compose"],"Compose"]},{"tag":"TypeVar","contents":"f"}]},{"tag":"TypeVar","contents":"g"}]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[44,1],"name":"/home/r/purescript-stuff/bower_components/purescript-functors/src/Data/Functor/Compose.purs","end":[47,1]}},{"comments":null,"title":"functorCompose","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","Functor"],"Functor"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}],"constraintData":null},{"constraintClass":[["Data","Functor"],"Functor"],"constraintArgs":[{"tag":"TypeVar","contents":"g"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Functor"],"Functor"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Functor","Compose"],"Compose"]},{"tag":"TypeVar","contents":"f"}]},{"tag":"TypeVar","contents":"g"}]}}]}},"sourceSpan":{"start":[47,1],"name":"/home/r/purescript-stuff/bower_components/purescript-functors/src/Data/Functor/Compose.purs","end":[48,48]}},{"comments":null,"title":"applyCompose","info":{"declType":"instance","dependencies":[{"constraintClass":[["Control","Apply"],"Apply"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}],"constraintData":null},{"constraintClass":[["Control","Apply"],"Apply"],"constraintArgs":[{"tag":"TypeVar","contents":"g"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Apply"],"Apply"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Functor","Compose"],"Compose"]},{"tag":"TypeVar","contents":"f"}]},{"tag":"TypeVar","contents":"g"}]}}]}},"sourceSpan":{"start":[50,1],"name":"/home/r/purescript-stuff/bower_components/purescript-functors/src/Data/Functor/Compose.purs","end":[51,62]}},{"comments":null,"title":"applicativeCompose","info":{"declType":"instance","dependencies":[{"constraintClass":[["Control","Applicative"],"Applicative"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}],"constraintData":null},{"constraintClass":[["Control","Applicative"],"Applicative"],"constraintArgs":[{"tag":"TypeVar","contents":"g"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Applicative"],"Applicative"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Functor","Compose"],"Compose"]},{"tag":"TypeVar","contents":"f"}]},{"tag":"TypeVar","contents":"g"}]}}]}},"sourceSpan":{"start":[53,1],"name":"/home/r/purescript-stuff/bower_components/purescript-functors/src/Data/Functor/Compose.purs","end":[54,35]}},{"comments":null,"title":"foldableCompose","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","Foldable"],"Foldable"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}],"constraintData":null},{"constraintClass":[["Data","Foldable"],"Foldable"],"constraintArgs":[{"tag":"TypeVar","contents":"g"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Foldable"],"Foldable"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Functor","Compose"],"Compose"]},{"tag":"TypeVar","contents":"f"}]},{"tag":"TypeVar","contents":"g"}]}}]}},"sourceSpan":{"start":[56,1],"name":"/home/r/purescript-stuff/bower_components/purescript-functors/src/Data/Functor/Compose.purs","end":[59,52]}},{"comments":null,"title":"traversableCompose","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","Traversable"],"Traversable"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}],"constraintData":null},{"constraintClass":[["Data","Traversable"],"Traversable"],"constraintArgs":[{"tag":"TypeVar","contents":"g"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Traversable"],"Traversable"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Functor","Compose"],"Compose"]},{"tag":"TypeVar","contents":"f"}]},{"tag":"TypeVar","contents":"g"}]}}]}},"sourceSpan":{"start":[61,1],"name":"/home/r/purescript-stuff/bower_components/purescript-functors/src/Data/Functor/Compose.purs","end":[63,25]}},{"comments":null,"title":"altCompose","info":{"declType":"instance","dependencies":[{"constraintClass":[["Control","Alt"],"Alt"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}],"constraintData":null},{"constraintClass":[["Data","Functor"],"Functor"],"constraintArgs":[{"tag":"TypeVar","contents":"g"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Alt"],"Alt"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Functor","Compose"],"Compose"]},{"tag":"TypeVar","contents":"f"}]},{"tag":"TypeVar","contents":"g"}]}}]}},"sourceSpan":{"start":[65,1],"name":"/home/r/purescript-stuff/bower_components/purescript-functors/src/Data/Functor/Compose.purs","end":[66,50]}},{"comments":null,"title":"plusCompose","info":{"declType":"instance","dependencies":[{"constraintClass":[["Control","Plus"],"Plus"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}],"constraintData":null},{"constraintClass":[["Data","Functor"],"Functor"],"constraintArgs":[{"tag":"TypeVar","contents":"g"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Plus"],"Plus"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Functor","Compose"],"Compose"]},{"tag":"TypeVar","contents":"f"}]},{"tag":"TypeVar","contents":"g"}]}}]}},"sourceSpan":{"start":[68,1],"name":"/home/r/purescript-stuff/bower_components/purescript-functors/src/Data/Functor/Compose.purs","end":[69,24]}},{"comments":null,"title":"alternativeCompose","info":{"declType":"instance","dependencies":[{"constraintClass":[["Control","Alternative"],"Alternative"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}],"constraintData":null},{"constraintClass":[["Control","Applicative"],"Applicative"],"constraintArgs":[{"tag":"TypeVar","contents":"g"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Alternative"],"Alternative"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Functor","Compose"],"Compose"]},{"tag":"TypeVar","contents":"f"}]},{"tag":"TypeVar","contents":"g"}]}}]}},"sourceSpan":{"start":[71,1],"name":"/home/r/purescript-stuff/bower_components/purescript-functors/src/Data/Functor/Compose.purs","end":[71,90]}}],"comments":"`Compose f g` is the composition of the two functors `f` and `g`.\n","title":"Compose","info":{"declType":"data","dataDeclType":"newtype","typeArguments":[["f",null],["g",null],["a",null]]},"sourceSpan":{"start":[17,1],"name":"/home/r/purescript-stuff/bower_components/purescript-functors/src/Data/Functor/Compose.purs","end":[17,42]}}]},{"moduleName":{"package":"purescript-contravariant","item":["Data","Functor","Contravariant"]},"declarations":[{"children":[{"comments":null,"title":"cmap","info":{"declType":"typeClassMember","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeVar","contents":"a"}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"b"}]}]}]},null]},null]}},"sourceSpan":null}],"comments":"A `Contravariant` functor can be seen as a way of changing the input type\nof a consumer of input, in contrast to the standard covariant `Functor`\nthat can be seen as a way of changing the output type of a producer of\noutput.\n\n`Contravariant` instances should satisfy the following laws:\n\n- Identity `(>$<) id = id`\n- Composition `(f >$<) <<< (g >$<) = (>$<) (g <<< f)`\n","title":"Contravariant","info":{"fundeps":[],"arguments":[["f",null]],"declType":"typeClass","superclasses":[]},"sourceSpan":{"start":[14,1],"name":"/home/r/purescript-stuff/bower_components/purescript-contravariant/src/Data/Functor/Contravariant.purs","end":[15,45]}},{"children":[],"comments":null,"title":"coerce","info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["f",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Functor","Contravariant"],"Contravariant"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}],"constraintData":null},{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Functor"],"Functor"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"b"}]}]}]}]},null]},null]},null]}},"sourceSpan":{"start":[25,1],"name":"/home/r/purescript-stuff/bower_components/purescript-contravariant/src/Data/Functor/Contravariant.purs","end":[25,67]}},{"children":[],"comments":null,"title":"(>$<)","info":{"declType":"alias","alias":[["Data","Functor","Contravariant"],{"Right":{"Left":{"Ident":"cmap"}}}],"fixity":{"associativity":"infixl","precedence":4}},"sourceSpan":{"start":[17,1],"name":"/home/r/purescript-stuff/bower_components/purescript-contravariant/src/Data/Functor/Contravariant.purs","end":[17,21]}},{"children":[],"comments":null,"title":"(>#<)","info":{"declType":"alias","alias":[["Data","Functor","Contravariant"],{"Right":{"Left":{"Ident":"cmapFlipped"}}}],"fixity":{"associativity":"infixl","precedence":4}},"sourceSpan":{"start":[23,1],"name":"/home/r/purescript-stuff/bower_components/purescript-contravariant/src/Data/Functor/Contravariant.purs","end":[23,28]}}]},{"moduleName":{"package":"purescript-functors","item":["Data","Functor","Coproduct"]},"declarations":[{"children":[{"comments":null,"title":"Coproduct","info":{"arguments":[{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Either"],"Either"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}}]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"g"},{"tag":"TypeVar","contents":"a"}]}}]}}],"declType":"dataConstructor"},"sourceSpan":null},{"comments":null,"title":"newtypeCoproduct","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Newtype"],"Newtype"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Functor","Coproduct"],"Coproduct"]},{"tag":"TypeVar","contents":"f"}]},{"tag":"TypeVar","contents":"g"}]},{"tag":"TypeVar","contents":"a"}]}}]},{"tag":"TypeWildcard","contents":{"start":[42,63],"name":"/home/r/purescript-stuff/bower_components/purescript-functors/src/Data/Functor/Coproduct.purs","end":[42,64]}}]}},"sourceSpan":{"start":[42,1],"name":"/home/r/purescript-stuff/bower_components/purescript-functors/src/Data/Functor/Coproduct.purs","end":[42,64]}},{"comments":null,"title":"eqCoproduct","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","Eq"],"Eq1"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}],"constraintData":null},{"constraintClass":[["Data","Eq"],"Eq1"],"constraintArgs":[{"tag":"TypeVar","contents":"g"}],"constraintData":null},{"constraintClass":[["Data","Eq"],"Eq"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Eq"],"Eq"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Functor","Coproduct"],"Coproduct"]},{"tag":"TypeVar","contents":"f"}]},{"tag":"TypeVar","contents":"g"}]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[44,1],"name":"/home/r/purescript-stuff/bower_components/purescript-functors/src/Data/Functor/Coproduct.purs","end":[45,11]}},{"comments":null,"title":"eq1Coproduct","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","Eq"],"Eq1"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}],"constraintData":null},{"constraintClass":[["Data","Eq"],"Eq1"],"constraintArgs":[{"tag":"TypeVar","contents":"g"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Eq"],"Eq1"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Functor","Coproduct"],"Coproduct"]},{"tag":"TypeVar","contents":"f"}]},{"tag":"TypeVar","contents":"g"}]}}]}},"sourceSpan":{"start":[47,1],"name":"/home/r/purescript-stuff/bower_components/purescript-functors/src/Data/Functor/Coproduct.purs","end":[52,20]}},{"comments":null,"title":"ordCoproduct","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","Ord"],"Ord1"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}],"constraintData":null},{"constraintClass":[["Data","Ord"],"Ord1"],"constraintArgs":[{"tag":"TypeVar","contents":"g"}],"constraintData":null},{"constraintClass":[["Data","Ord"],"Ord"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Ord"],"Ord"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Functor","Coproduct"],"Coproduct"]},{"tag":"TypeVar","contents":"f"}]},{"tag":"TypeVar","contents":"g"}]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[54,1],"name":"/home/r/purescript-stuff/bower_components/purescript-functors/src/Data/Functor/Coproduct.purs","end":[55,21]}},{"comments":null,"title":"ord1Coproduct","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","Ord"],"Ord1"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}],"constraintData":null},{"constraintClass":[["Data","Ord"],"Ord1"],"constraintArgs":[{"tag":"TypeVar","contents":"g"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Ord"],"Ord1"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Functor","Coproduct"],"Coproduct"]},{"tag":"TypeVar","contents":"f"}]},{"tag":"TypeVar","contents":"g"}]}}]}},"sourceSpan":{"start":[57,1],"name":"/home/r/purescript-stuff/bower_components/purescript-functors/src/Data/Functor/Coproduct.purs","end":[63,43]}},{"comments":null,"title":"showCoproduct","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","Show"],"Show"],"constraintArgs":[{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}}],"constraintData":null},{"constraintClass":[["Data","Show"],"Show"],"constraintArgs":[{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"g"},{"tag":"TypeVar","contents":"a"}]}}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Show"],"Show"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Functor","Coproduct"],"Coproduct"]},{"tag":"TypeVar","contents":"f"}]},{"tag":"TypeVar","contents":"g"}]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[65,1],"name":"/home/r/purescript-stuff/bower_components/purescript-functors/src/Data/Functor/Coproduct.purs","end":[69,1]}},{"comments":null,"title":"functorCoproduct","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","Functor"],"Functor"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}],"constraintData":null},{"constraintClass":[["Data","Functor"],"Functor"],"constraintArgs":[{"tag":"TypeVar","contents":"g"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Functor"],"Functor"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Functor","Coproduct"],"Coproduct"]},{"tag":"TypeVar","contents":"f"}]},{"tag":"TypeVar","contents":"g"}]}}]}},"sourceSpan":{"start":[69,1],"name":"/home/r/purescript-stuff/bower_components/purescript-functors/src/Data/Functor/Coproduct.purs","end":[70,60]}},{"comments":null,"title":"extendCoproduct","info":{"declType":"instance","dependencies":[{"constraintClass":[["Control","Extend"],"Extend"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}],"constraintData":null},{"constraintClass":[["Control","Extend"],"Extend"],"constraintArgs":[{"tag":"TypeVar","contents":"g"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Extend"],"Extend"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Functor","Coproduct"],"Coproduct"]},{"tag":"TypeVar","contents":"f"}]},{"tag":"TypeVar","contents":"g"}]}}]}},"sourceSpan":{"start":[72,1],"name":"/home/r/purescript-stuff/bower_components/purescript-functors/src/Data/Functor/Coproduct.purs","end":[75,51]}},{"comments":null,"title":"comonadCoproduct","info":{"declType":"instance","dependencies":[{"constraintClass":[["Control","Comonad"],"Comonad"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}],"constraintData":null},{"constraintClass":[["Control","Comonad"],"Comonad"],"constraintArgs":[{"tag":"TypeVar","contents":"g"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Comonad"],"Comonad"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Functor","Coproduct"],"Coproduct"]},{"tag":"TypeVar","contents":"f"}]},{"tag":"TypeVar","contents":"g"}]}}]}},"sourceSpan":{"start":[77,1],"name":"/home/r/purescript-stuff/bower_components/purescript-functors/src/Data/Functor/Coproduct.purs","end":[78,38]}},{"comments":null,"title":"foldableCoproduct","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","Foldable"],"Foldable"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}],"constraintData":null},{"constraintClass":[["Data","Foldable"],"Foldable"],"constraintArgs":[{"tag":"TypeVar","contents":"g"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Foldable"],"Foldable"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Functor","Coproduct"],"Coproduct"]},{"tag":"TypeVar","contents":"f"}]},{"tag":"TypeVar","contents":"g"}]}}]}},"sourceSpan":{"start":[80,1],"name":"/home/r/purescript-stuff/bower_components/purescript-functors/src/Data/Functor/Coproduct.purs","end":[83,48]}},{"comments":null,"title":"traversableCoproduct","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","Traversable"],"Traversable"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}],"constraintData":null},{"constraintClass":[["Data","Traversable"],"Traversable"],"constraintArgs":[{"tag":"TypeVar","contents":"g"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Traversable"],"Traversable"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Functor","Coproduct"],"Coproduct"]},{"tag":"TypeVar","contents":"f"}]},{"tag":"TypeVar","contents":"g"}]}}]}},"sourceSpan":{"start":[85,1],"name":"/home/r/purescript-stuff/bower_components/purescript-functors/src/Data/Functor/Coproduct.purs","end":[91,44]}}],"comments":"`Coproduct f g` is the coproduct of two functors `f` and `g`\n","title":"Coproduct","info":{"declType":"data","dataDeclType":"newtype","typeArguments":[["f",null],["g",null],["a",null]]},"sourceSpan":{"start":[17,1],"name":"/home/r/purescript-stuff/bower_components/purescript-functors/src/Data/Functor/Coproduct.purs","end":[17,57]}},{"children":[],"comments":"Right injection\n","title":"right","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["g",{"tag":"ForAll","contents":["f",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"g"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Functor","Coproduct"],"Coproduct"]},{"tag":"TypeVar","contents":"f"}]},{"tag":"TypeVar","contents":"g"}]},{"tag":"TypeVar","contents":"a"}]}]},null]},null]},null]}},"sourceSpan":{"start":[24,1],"name":"/home/r/purescript-stuff/bower_components/purescript-functors/src/Data/Functor/Coproduct.purs","end":[24,46]}},{"children":[],"comments":"Left injection\n","title":"left","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["g",{"tag":"ForAll","contents":["f",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Functor","Coproduct"],"Coproduct"]},{"tag":"TypeVar","contents":"f"}]},{"tag":"TypeVar","contents":"g"}]},{"tag":"TypeVar","contents":"a"}]}]},null]},null]},null]}},"sourceSpan":{"start":[20,1],"name":"/home/r/purescript-stuff/bower_components/purescript-functors/src/Data/Functor/Coproduct.purs","end":[20,45]}},{"children":[],"comments":"Eliminate a coproduct by providing eliminators for the left and\nright components\n","title":"coproduct","info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["g",{"tag":"ForAll","contents":["f",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeVar","contents":"b"}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"g"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeVar","contents":"b"}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Functor","Coproduct"],"Coproduct"]},{"tag":"TypeVar","contents":"f"}]},{"tag":"TypeVar","contents":"g"}]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeVar","contents":"b"}]}]}]},null]},null]},null]},null]}},"sourceSpan":{"start":[29,1],"name":"/home/r/purescript-stuff/bower_components/purescript-functors/src/Data/Functor/Coproduct.purs","end":[29,78]}}]},{"moduleName":{"package":"purescript-functors","item":["Data","Functor","Coproduct","Nested"]},"declarations":[{"children":[],"comments":null,"title":"type (<\\/>)","info":{"declType":"alias","alias":[["Data","Functor","Coproduct"],{"Left":"Coproduct"}],"fixity":{"associativity":"infixr","precedence":6}},"sourceSpan":{"start":[33,1],"name":"/home/r/purescript-stuff/bower_components/purescript-functors/src/Data/Functor/Coproduct/Nested.purs","end":[33,32]}}]},{"moduleName":{"package":"purescript-invariant","item":["Data","Functor","Invariant"]},"declarations":[{"children":[{"comments":null,"title":"imap","info":{"declType":"typeClassMember","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeVar","contents":"a"}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"b"}]}]}]}]},null]},null]}},"sourceSpan":null},{"comments":null,"title":"invariantFn","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Functor","Invariant"],"Invariant"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[17,1],"name":"/home/r/purescript-stuff/bower_components/purescript-invariant/src/Data/Functor/Invariant.purs","end":[18,15]}},{"comments":null,"title":"invariantArray","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Functor","Invariant"],"Invariant"]},{"tag":"TypeConstructor","contents":[["Prim"],"Array"]}]}},"sourceSpan":{"start":[20,1],"name":"/home/r/purescript-stuff/bower_components/purescript-invariant/src/Data/Functor/Invariant.purs","end":[21,15]}}],"comments":"A type of functor that can be used to adapt the type of a wrapped function\nwhere the parameterised type occurs in both the positive and negative\nposition, for example, `F (a -> a)`.\n\nAn `Invariant` instance should satisfy the following laws:\n\n- Identity: `imap id id = id`\n- Composition: `imap g1 g2 <<< imap f1 f2 = imap (g1 <<< f1) (f2 <<< g2)`\n\n","title":"Invariant","info":{"fundeps":[],"arguments":[["f",null]],"declType":"typeClass","superclasses":[]},"sourceSpan":{"start":[14,1],"name":"/home/r/purescript-stuff/bower_components/purescript-invariant/src/Data/Functor/Invariant.purs","end":[15,57]}}]},{"moduleName":{"package":"purescript-fixed-points","item":["Data","Functor","Mu"]},"declarations":[{"children":[{"comments":null,"title":"In","info":{"arguments":[{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Functor","Mu"],"Mu"]},{"tag":"TypeVar","contents":"f"}]}}]}}],"declType":"dataConstructor"},"sourceSpan":null},{"comments":null,"title":"newtypeMu","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Newtype"],"Newtype"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Functor","Mu"],"Mu"]},{"tag":"TypeVar","contents":"f"}]}}]},{"tag":"TypeWildcard","contents":{"start":[37,45],"name":"/home/r/purescript-stuff/bower_components/purescript-fixed-points/src/Data/Functor/Mu.purs","end":[37,46]}}]}},"sourceSpan":{"start":[37,1],"name":"/home/r/purescript-stuff/bower_components/purescript-fixed-points/src/Data/Functor/Mu.purs","end":[37,46]}},{"comments":"To implement `Eq`, we require `f` to have higher-kinded equality.\n","title":"eqMu","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","Eq"],"Eq1"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Eq"],"Eq"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Functor","Mu"],"Mu"]},{"tag":"TypeVar","contents":"f"}]}}]}},"sourceSpan":{"start":[40,1],"name":"/home/r/purescript-stuff/bower_components/purescript-fixed-points/src/Data/Functor/Mu.purs","end":[41,29]}},{"comments":"To implement `Ord`, we require `f` to have higher-kinded comparison.\n","title":"ordMu","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","Eq"],"Eq1"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}],"constraintData":null},{"constraintClass":[["Data","Ord"],"Ord1"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Ord"],"Ord"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Functor","Mu"],"Mu"]},{"tag":"TypeVar","contents":"f"}]}}]}},"sourceSpan":{"start":[44,1],"name":"/home/r/purescript-stuff/bower_components/purescript-fixed-points/src/Data/Functor/Mu.purs","end":[45,39]}},{"comments":"`Show` is compositional, so we only `f` to be able to show a single layer of structure.\n","title":"showMu","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","Show"],"Show"],"constraintArgs":[{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeConstructor","contents":[["Data","TacitString"],"TacitString"]}]}}],"constraintData":null},{"constraintClass":[["Data","Functor"],"Functor"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Show"],"Show"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Functor","Mu"],"Mu"]},{"tag":"TypeVar","contents":"f"}]}}]}},"sourceSpan":{"start":[50,1],"name":"/home/r/purescript-stuff/bower_components/purescript-fixed-points/src/Data/Functor/Mu.purs","end":[51,47]}}],"comments":"`Mu f` is the least fixed point of a functor `f`, when it exists.\n","title":"Mu","info":{"declType":"data","dataDeclType":"newtype","typeArguments":[["f",null]]},"sourceSpan":{"start":[16,1],"name":"/home/r/purescript-stuff/bower_components/purescript-fixed-points/src/Data/Functor/Mu.purs","end":[16,29]}},{"children":[],"comments":null,"title":"unroll","info":{"declType":"value","type":{"tag":"ForAll","contents":["f",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Functor","Mu"],"Mu"]},{"tag":"TypeVar","contents":"f"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Functor","Mu"],"Mu"]},{"tag":"TypeVar","contents":"f"}]}}]}]},null]}},"sourceSpan":{"start":[34,1],"name":"/home/r/purescript-stuff/bower_components/purescript-fixed-points/src/Data/Functor/Mu.purs","end":[34,37]}},{"children":[],"comments":"Rewrites a tree along a natural transformation.\n","title":"transMu","info":{"declType":"value","type":{"tag":"ForAll","contents":["g",{"tag":"ForAll","contents":["f",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Functor"],"Functor"],"constraintArgs":[{"tag":"TypeVar","contents":"g"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"g"},{"tag":"TypeVar","contents":"a"}]}]},null]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Functor","Mu"],"Mu"]},{"tag":"TypeVar","contents":"f"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Functor","Mu"],"Mu"]},{"tag":"TypeVar","contents":"g"}]}]}]}]},null]},null]}},"sourceSpan":{"start":[19,1],"name":"/home/r/purescript-stuff/bower_components/purescript-fixed-points/src/Data/Functor/Mu.purs","end":[24,9]}},{"children":[],"comments":null,"title":"roll","info":{"declType":"value","type":{"tag":"ForAll","contents":["f",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Functor","Mu"],"Mu"]},{"tag":"TypeVar","contents":"f"}]}}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Functor","Mu"],"Mu"]},{"tag":"TypeVar","contents":"f"}]}]},null]}},"sourceSpan":{"start":[31,1],"name":"/home/r/purescript-stuff/bower_components/purescript-fixed-points/src/Data/Functor/Mu.purs","end":[31,35]}}]},{"moduleName":{"package":"purescript-fixed-points","item":["Data","Functor","Nu"]},"declarations":[{"children":[{"comments":null,"title":"newtypeNu","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Newtype"],"Newtype"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Functor","Nu"],"Nu"]},{"tag":"TypeVar","contents":"f"}]}}]},{"tag":"TypeWildcard","contents":{"start":[19,45],"name":"/home/r/purescript-stuff/bower_components/purescript-fixed-points/src/Data/Functor/Nu.purs","end":[19,46]}}]}},"sourceSpan":{"start":[19,1],"name":"/home/r/purescript-stuff/bower_components/purescript-fixed-points/src/Data/Functor/Nu.purs","end":[19,46]}}],"comments":"`Nu f` is the greatest fixed point of the functor `f`, when it exists.\n","title":"Nu","info":{"declType":"data","dataDeclType":"newtype","typeArguments":[["f",null]]},"sourceSpan":{"start":[17,1],"name":"/home/r/purescript-stuff/bower_components/purescript-fixed-points/src/Data/Functor/Nu.purs","end":[17,35]}}]},{"moduleName":{"package":"purescript-functors","item":["Data","Functor","Product"]},"declarations":[{"children":[{"comments":null,"title":"Product","info":{"arguments":[{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Tuple"],"Tuple"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}}]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"g"},{"tag":"TypeVar","contents":"a"}]}}]}}],"declType":"dataConstructor"},"sourceSpan":null},{"comments":null,"title":"newtypeProduct","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Newtype"],"Newtype"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Functor","Product"],"Product"]},{"tag":"TypeVar","contents":"f"}]},{"tag":"TypeVar","contents":"g"}]},{"tag":"TypeVar","contents":"a"}]}}]},{"tag":"TypeWildcard","contents":{"start":[30,59],"name":"/home/r/purescript-stuff/bower_components/purescript-functors/src/Data/Functor/Product.purs","end":[30,60]}}]}},"sourceSpan":{"start":[30,1],"name":"/home/r/purescript-stuff/bower_components/purescript-functors/src/Data/Functor/Product.purs","end":[30,60]}},{"comments":null,"title":"eqProduct","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","Eq"],"Eq1"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}],"constraintData":null},{"constraintClass":[["Data","Eq"],"Eq1"],"constraintArgs":[{"tag":"TypeVar","contents":"g"}],"constraintData":null},{"constraintClass":[["Data","Eq"],"Eq"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Eq"],"Eq"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Functor","Product"],"Product"]},{"tag":"TypeVar","contents":"f"}]},{"tag":"TypeVar","contents":"g"}]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[32,1],"name":"/home/r/purescript-stuff/bower_components/purescript-functors/src/Data/Functor/Product.purs","end":[33,11]}},{"comments":null,"title":"eq1Product","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","Eq"],"Eq1"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}],"constraintData":null},{"constraintClass":[["Data","Eq"],"Eq1"],"constraintArgs":[{"tag":"TypeVar","contents":"g"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Eq"],"Eq1"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Functor","Product"],"Product"]},{"tag":"TypeVar","contents":"f"}]},{"tag":"TypeVar","contents":"g"}]}}]}},"sourceSpan":{"start":[35,1],"name":"/home/r/purescript-stuff/bower_components/purescript-functors/src/Data/Functor/Product.purs","end":[36,79]}},{"comments":null,"title":"ordProduct","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","Ord"],"Ord1"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}],"constraintData":null},{"constraintClass":[["Data","Ord"],"Ord1"],"constraintArgs":[{"tag":"TypeVar","contents":"g"}],"constraintData":null},{"constraintClass":[["Data","Ord"],"Ord"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Ord"],"Ord"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Functor","Product"],"Product"]},{"tag":"TypeVar","contents":"f"}]},{"tag":"TypeVar","contents":"g"}]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[38,1],"name":"/home/r/purescript-stuff/bower_components/purescript-functors/src/Data/Functor/Product.purs","end":[39,21]}},{"comments":null,"title":"ord1Product","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","Ord"],"Ord1"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}],"constraintData":null},{"constraintClass":[["Data","Ord"],"Ord1"],"constraintArgs":[{"tag":"TypeVar","contents":"g"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Ord"],"Ord1"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Functor","Product"],"Product"]},{"tag":"TypeVar","contents":"f"}]},{"tag":"TypeVar","contents":"g"}]}}]}},"sourceSpan":{"start":[41,1],"name":"/home/r/purescript-stuff/bower_components/purescript-functors/src/Data/Functor/Product.purs","end":[45,13]}},{"comments":null,"title":"showProduct","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","Show"],"Show"],"constraintArgs":[{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}}],"constraintData":null},{"constraintClass":[["Data","Show"],"Show"],"constraintArgs":[{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"g"},{"tag":"TypeVar","contents":"a"}]}}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Show"],"Show"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Functor","Product"],"Product"]},{"tag":"TypeVar","contents":"f"}]},{"tag":"TypeVar","contents":"g"}]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[47,1],"name":"/home/r/purescript-stuff/bower_components/purescript-functors/src/Data/Functor/Product.purs","end":[50,1]}},{"comments":null,"title":"functorProduct","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","Functor"],"Functor"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}],"constraintData":null},{"constraintClass":[["Data","Functor"],"Functor"],"constraintArgs":[{"tag":"TypeVar","contents":"g"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Functor"],"Functor"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Functor","Product"],"Product"]},{"tag":"TypeVar","contents":"f"}]},{"tag":"TypeVar","contents":"g"}]}}]}},"sourceSpan":{"start":[50,1],"name":"/home/r/purescript-stuff/bower_components/purescript-functors/src/Data/Functor/Product.purs","end":[51,60]}},{"comments":null,"title":"foldableProduct","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","Foldable"],"Foldable"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}],"constraintData":null},{"constraintClass":[["Data","Foldable"],"Foldable"],"constraintArgs":[{"tag":"TypeVar","contents":"g"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Foldable"],"Foldable"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Functor","Product"],"Product"]},{"tag":"TypeVar","contents":"f"}]},{"tag":"TypeVar","contents":"g"}]}}]}},"sourceSpan":{"start":[53,1],"name":"/home/r/purescript-stuff/bower_components/purescript-functors/src/Data/Functor/Product.purs","end":[56,67]}},{"comments":null,"title":"traversableProduct","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","Traversable"],"Traversable"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}],"constraintData":null},{"constraintClass":[["Data","Traversable"],"Traversable"],"constraintArgs":[{"tag":"TypeVar","contents":"g"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Traversable"],"Traversable"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Functor","Product"],"Product"]},{"tag":"TypeVar","contents":"f"}]},{"tag":"TypeVar","contents":"g"}]}}]}},"sourceSpan":{"start":[58,1],"name":"/home/r/purescript-stuff/bower_components/purescript-functors/src/Data/Functor/Product.purs","end":[60,79]}},{"comments":null,"title":"applyProduct","info":{"declType":"instance","dependencies":[{"constraintClass":[["Control","Apply"],"Apply"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}],"constraintData":null},{"constraintClass":[["Control","Apply"],"Apply"],"constraintArgs":[{"tag":"TypeVar","contents":"g"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Apply"],"Apply"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Functor","Product"],"Product"]},{"tag":"TypeVar","contents":"f"}]},{"tag":"TypeVar","contents":"g"}]}}]}},"sourceSpan":{"start":[62,1],"name":"/home/r/purescript-stuff/bower_components/purescript-functors/src/Data/Functor/Product.purs","end":[63,86]}},{"comments":null,"title":"applicativeProduct","info":{"declType":"instance","dependencies":[{"constraintClass":[["Control","Applicative"],"Applicative"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}],"constraintData":null},{"constraintClass":[["Control","Applicative"],"Applicative"],"constraintArgs":[{"tag":"TypeVar","contents":"g"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Applicative"],"Applicative"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Functor","Product"],"Product"]},{"tag":"TypeVar","contents":"f"}]},{"tag":"TypeVar","contents":"g"}]}}]}},"sourceSpan":{"start":[65,1],"name":"/home/r/purescript-stuff/bower_components/purescript-functors/src/Data/Functor/Product.purs","end":[66,37]}},{"comments":null,"title":"bindProduct","info":{"declType":"instance","dependencies":[{"constraintClass":[["Control","Bind"],"Bind"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}],"constraintData":null},{"constraintClass":[["Control","Bind"],"Bind"],"constraintArgs":[{"tag":"TypeVar","contents":"g"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Bind"],"Bind"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Functor","Product"],"Product"]},{"tag":"TypeVar","contents":"f"}]},{"tag":"TypeVar","contents":"g"}]}}]}},"sourceSpan":{"start":[68,1],"name":"/home/r/purescript-stuff/bower_components/purescript-functors/src/Data/Functor/Product.purs","end":[70,72]}},{"comments":null,"title":"monadProduct","info":{"declType":"instance","dependencies":[{"constraintClass":[["Control","Monad"],"Monad"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}],"constraintData":null},{"constraintClass":[["Control","Monad"],"Monad"],"constraintArgs":[{"tag":"TypeVar","contents":"g"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad"],"Monad"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Functor","Product"],"Product"]},{"tag":"TypeVar","contents":"f"}]},{"tag":"TypeVar","contents":"g"}]}}]}},"sourceSpan":{"start":[72,1],"name":"/home/r/purescript-stuff/bower_components/purescript-functors/src/Data/Functor/Product.purs","end":[72,66]}}],"comments":"`Product f g` is the product of the two functors `f` and `g`.\n","title":"Product","info":{"declType":"data","dataDeclType":"newtype","typeArguments":[["f",null],["g",null],["a",null]]},"sourceSpan":{"start":[16,1],"name":"/home/r/purescript-stuff/bower_components/purescript-functors/src/Data/Functor/Product.purs","end":[16,52]}}]},{"moduleName":{"package":"purescript-functors","item":["Data","Functor","Product","Nested"]},"declarations":[{"children":[],"comments":null,"title":"type (</\\>)","info":{"declType":"alias","alias":[["Data","Functor","Product"],{"Left":"Product"}],"fixity":{"associativity":"infixr","precedence":6}},"sourceSpan":{"start":[32,1],"name":"/home/r/purescript-stuff/bower_components/purescript-functors/src/Data/Functor/Product/Nested.purs","end":[32,30]}}]},{"moduleName":{"package":"purescript-group","item":["Data","Group"]},"declarations":[{"children":[],"comments":"An Abelian group is a group with a commutative operation.\n","title":"Abelian","info":{"arguments":[["a",null],["b",null]],"declType":"typeSynonym","type":{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Group"],"Group"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Semigroup","Commutative"],"Commutative"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"tag":"TypeVar","contents":"b"}]}]}},"sourceSpan":{"start":[40,1],"name":"/home/r/purescript-stuff/bower_components/purescript-group/src/Data/Group.purs","end":[40,48]}},{"children":[{"comments":null,"title":"ginverse","info":{"declType":"typeClassMember","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"g"}]},{"tag":"TypeVar","contents":"g"}]}},"sourceSpan":null},{"comments":null,"title":"groupUnit","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Group"],"Group"]},{"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}},"sourceSpan":{"start":[30,1],"name":"/home/r/purescript-stuff/bower_components/purescript-group/src/Data/Group.purs","end":[31,20]}},{"comments":null,"title":"groupDual","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","Group"],"Group"],"constraintArgs":[{"tag":"TypeVar","contents":"g"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Group"],"Group"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Monoid","Dual"],"Dual"]},{"tag":"TypeVar","contents":"g"}]}}]}},"sourceSpan":{"start":[33,1],"name":"/home/r/purescript-stuff/bower_components/purescript-group/src/Data/Group.purs","end":[34,40]}},{"comments":null,"title":"groupAdditive","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","Ring"],"Ring"],"constraintArgs":[{"tag":"TypeVar","contents":"r"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Group"],"Group"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Monoid","Additive"],"Additive"]},{"tag":"TypeVar","contents":"r"}]}}]}},"sourceSpan":{"start":[36,1],"name":"/home/r/purescript-stuff/bower_components/purescript-group/src/Data/Group.purs","end":[37,46]}}],"comments":"A `Group` is a `Monoid` with inverses. Instances\nmust satisfy the following law in addition to the monoid laws:\n\n- Inverse: `forall x. ginverse x <> x = mempty = x <> ginverse x`\n","title":"Group","info":{"fundeps":[],"arguments":[["g",null]],"declType":"typeClass","superclasses":[{"constraintClass":[["Data","Monoid"],"Monoid"],"constraintArgs":[{"tag":"TypeVar","contents":"g"}],"constraintData":null}]},"sourceSpan":{"start":[27,1],"name":"/home/r/purescript-stuff/bower_components/purescript-group/src/Data/Group.purs","end":[28,21]}}]},{"moduleName":{"package":"purescript-identity","item":["Data","Identity"]},"declarations":[{"children":[{"comments":null,"title":"Identity","info":{"arguments":[{"tag":"TypeVar","contents":"a"}],"declType":"dataConstructor"},"sourceSpan":null},{"comments":null,"title":"newtypeIdentity","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Newtype"],"Newtype"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Identity"],"Identity"]},{"tag":"TypeVar","contents":"a"}]}}]},{"tag":"TypeWildcard","contents":{"start":[20,57],"name":"/home/r/purescript-stuff/bower_components/purescript-identity/src/Data/Identity.purs","end":[20,58]}}]}},"sourceSpan":{"start":[20,1],"name":"/home/r/purescript-stuff/bower_components/purescript-identity/src/Data/Identity.purs","end":[20,58]}},{"comments":null,"title":"eqIdentity","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","Eq"],"Eq"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Eq"],"Eq"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Identity"],"Identity"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[22,1],"name":"/home/r/purescript-stuff/bower_components/purescript-identity/src/Data/Identity.purs","end":[22,62]}},{"comments":null,"title":"ordIdentity","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","Ord"],"Ord"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Ord"],"Ord"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Identity"],"Identity"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[24,1],"name":"/home/r/purescript-stuff/bower_components/purescript-identity/src/Data/Identity.purs","end":[24,65]}},{"comments":null,"title":"boundedIdentity","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","Bounded"],"Bounded"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Bounded"],"Bounded"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Identity"],"Identity"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[26,1],"name":"/home/r/purescript-stuff/bower_components/purescript-identity/src/Data/Identity.purs","end":[26,77]}},{"comments":null,"title":"heytingAlgebraIdentity","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","HeytingAlgebra"],"HeytingAlgebra"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","HeytingAlgebra"],"HeytingAlgebra"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Identity"],"Identity"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[28,1],"name":"/home/r/purescript-stuff/bower_components/purescript-identity/src/Data/Identity.purs","end":[28,98]}},{"comments":null,"title":"booleanAlgebraIdentity","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","BooleanAlgebra"],"BooleanAlgebra"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","BooleanAlgebra"],"BooleanAlgebra"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Identity"],"Identity"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[30,1],"name":"/home/r/purescript-stuff/bower_components/purescript-identity/src/Data/Identity.purs","end":[30,98]}},{"comments":null,"title":"semigroupIdenity","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","Semigroup"],"Semigroup"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Semigroup"],"Semigroup"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Identity"],"Identity"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[32,1],"name":"/home/r/purescript-stuff/bower_components/purescript-identity/src/Data/Identity.purs","end":[32,82]}},{"comments":null,"title":"monoidIdentity","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","Monoid"],"Monoid"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Monoid"],"Monoid"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Identity"],"Identity"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[34,1],"name":"/home/r/purescript-stuff/bower_components/purescript-identity/src/Data/Identity.purs","end":[34,74]}},{"comments":null,"title":"semiringIdentity","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","Semiring"],"Semiring"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Semiring"],"Semiring"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Identity"],"Identity"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[36,1],"name":"/home/r/purescript-stuff/bower_components/purescript-identity/src/Data/Identity.purs","end":[36,80]}},{"comments":null,"title":"euclideanRingIdentity","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","EuclideanRing"],"EuclideanRing"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","EuclideanRing"],"EuclideanRing"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Identity"],"Identity"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[38,1],"name":"/home/r/purescript-stuff/bower_components/purescript-identity/src/Data/Identity.purs","end":[38,95]}},{"comments":null,"title":"ringIdentity","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","Ring"],"Ring"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Ring"],"Ring"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Identity"],"Identity"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[40,1],"name":"/home/r/purescript-stuff/bower_components/purescript-identity/src/Data/Identity.purs","end":[40,68]}},{"comments":null,"title":"commutativeRingIdentity","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","CommutativeRing"],"CommutativeRing"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","CommutativeRing"],"CommutativeRing"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Identity"],"Identity"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[42,1],"name":"/home/r/purescript-stuff/bower_components/purescript-identity/src/Data/Identity.purs","end":[42,101]}},{"comments":null,"title":"fieldIdentity","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","Field"],"Field"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Field"],"Field"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Identity"],"Identity"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[44,1],"name":"/home/r/purescript-stuff/bower_components/purescript-identity/src/Data/Identity.purs","end":[44,71]}},{"comments":null,"title":"lazyIdentity","info":{"declType":"instance","dependencies":[{"constraintClass":[["Control","Lazy"],"Lazy"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Lazy"],"Lazy"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Identity"],"Identity"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[46,1],"name":"/home/r/purescript-stuff/bower_components/purescript-identity/src/Data/Identity.purs","end":[46,68]}},{"comments":null,"title":"showIdentity","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","Show"],"Show"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Show"],"Show"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Identity"],"Identity"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[48,1],"name":"/home/r/purescript-stuff/bower_components/purescript-identity/src/Data/Identity.purs","end":[51,1]}},{"comments":null,"title":"eq1Identity","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Eq"],"Eq1"]},{"tag":"TypeConstructor","contents":[["Data","Identity"],"Identity"]}]}},"sourceSpan":{"start":[51,1],"name":"/home/r/purescript-stuff/bower_components/purescript-identity/src/Data/Identity.purs","end":[52,11]}},{"comments":null,"title":"ord1Identity","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Ord"],"Ord1"]},{"tag":"TypeConstructor","contents":[["Data","Identity"],"Identity"]}]}},"sourceSpan":{"start":[54,1],"name":"/home/r/purescript-stuff/bower_components/purescript-identity/src/Data/Identity.purs","end":[55,21]}},{"comments":null,"title":"functorIdentity","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Functor"],"Functor"]},{"tag":"TypeConstructor","contents":[["Data","Identity"],"Identity"]}]}},"sourceSpan":{"start":[57,1],"name":"/home/r/purescript-stuff/bower_components/purescript-identity/src/Data/Identity.purs","end":[58,38]}},{"comments":null,"title":"invariantIdentity","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Functor","Invariant"],"Invariant"]},{"tag":"TypeConstructor","contents":[["Data","Identity"],"Identity"]}]}},"sourceSpan":{"start":[60,1],"name":"/home/r/purescript-stuff/bower_components/purescript-identity/src/Data/Identity.purs","end":[61,15]}},{"comments":null,"title":"altIdentity","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Alt"],"Alt"]},{"tag":"TypeConstructor","contents":[["Data","Identity"],"Identity"]}]}},"sourceSpan":{"start":[63,1],"name":"/home/r/purescript-stuff/bower_components/purescript-identity/src/Data/Identity.purs","end":[64,14]}},{"comments":null,"title":"applyIdentity","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Apply"],"Apply"]},{"tag":"TypeConstructor","contents":[["Data","Identity"],"Identity"]}]}},"sourceSpan":{"start":[66,1],"name":"/home/r/purescript-stuff/bower_components/purescript-identity/src/Data/Identity.purs","end":[67,51]}},{"comments":null,"title":"applicativeIdentity","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Applicative"],"Applicative"]},{"tag":"TypeConstructor","contents":[["Data","Identity"],"Identity"]}]}},"sourceSpan":{"start":[69,1],"name":"/home/r/purescript-stuff/bower_components/purescript-identity/src/Data/Identity.purs","end":[70,18]}},{"comments":null,"title":"bindIdentity","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Bind"],"Bind"]},{"tag":"TypeConstructor","contents":[["Data","Identity"],"Identity"]}]}},"sourceSpan":{"start":[72,1],"name":"/home/r/purescript-stuff/bower_components/purescript-identity/src/Data/Identity.purs","end":[73,28]}},{"comments":null,"title":"monadIdentity","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad"],"Monad"]},{"tag":"TypeConstructor","contents":[["Data","Identity"],"Identity"]}]}},"sourceSpan":{"start":[75,1],"name":"/home/r/purescript-stuff/bower_components/purescript-identity/src/Data/Identity.purs","end":[75,41]}},{"comments":null,"title":"extendIdentity","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Extend"],"Extend"]},{"tag":"TypeConstructor","contents":[["Data","Identity"],"Identity"]}]}},"sourceSpan":{"start":[77,1],"name":"/home/r/purescript-stuff/bower_components/purescript-identity/src/Data/Identity.purs","end":[78,30]}},{"comments":null,"title":"comonadIdentity","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Comonad"],"Comonad"]},{"tag":"TypeConstructor","contents":[["Data","Identity"],"Identity"]}]}},"sourceSpan":{"start":[80,1],"name":"/home/r/purescript-stuff/bower_components/purescript-identity/src/Data/Identity.purs","end":[81,27]}},{"comments":null,"title":"foldableIdentity","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Foldable"],"Foldable"]},{"tag":"TypeConstructor","contents":[["Data","Identity"],"Identity"]}]}},"sourceSpan":{"start":[83,1],"name":"/home/r/purescript-stuff/bower_components/purescript-identity/src/Data/Identity.purs","end":[86,31]}},{"comments":null,"title":"traversableIdentity","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Traversable"],"Traversable"]},{"tag":"TypeConstructor","contents":[["Data","Identity"],"Identity"]}]}},"sourceSpan":{"start":[88,1],"name":"/home/r/purescript-stuff/bower_components/purescript-identity/src/Data/Identity.purs","end":[90,40]}}],"comments":null,"title":"Identity","info":{"declType":"data","dataDeclType":"newtype","typeArguments":[["a",null]]},"sourceSpan":{"start":[18,1],"name":"/home/r/purescript-stuff/bower_components/purescript-identity/src/Data/Identity.purs","end":[18,32]}}]},{"moduleName":{"package":"purescript-integers","item":["Data","Int"]},"declarations":[{"children":[],"comments":"The negation of `even`.\n\n``` purescript\nodd 0 == false\nodd 1 == false\n```\n","title":"odd","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}},"sourceSpan":{"start":[95,1],"name":"/home/r/purescript-stuff/bower_components/purescript-integers/src/Data/Int.purs","end":[95,22]}},{"children":[],"comments":"Returns whether an `Int` is an even number.\n\n``` purescript\neven 0 == true\neven 1 == false\n```\n","title":"even","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}},"sourceSpan":{"start":[86,1],"name":"/home/r/purescript-stuff/bower_components/purescript-integers/src/Data/Int.purs","end":[86,23]}}]},{"moduleName":{"package":"purescript-integers","item":["Data","Int","Bits"]},"declarations":[{"children":[],"comments":"Bitwise zero-fill shift right.\n","title":"zshr","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}]}},"sourceSpan":{"start":[34,1],"name":"/home/r/purescript-stuff/bower_components/purescript-integers/src/Data/Int/Bits.purs","end":[34,41]}},{"children":[],"comments":"Bitwise shift right.\n","title":"shr","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}]}},"sourceSpan":{"start":[31,1],"name":"/home/r/purescript-stuff/bower_components/purescript-integers/src/Data/Int/Bits.purs","end":[31,40]}},{"children":[],"comments":"Bitwise shift left.\n","title":"shl","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}]}},"sourceSpan":{"start":[28,1],"name":"/home/r/purescript-stuff/bower_components/purescript-integers/src/Data/Int/Bits.purs","end":[28,40]}},{"children":[],"comments":null,"title":"(.|.)","info":{"declType":"alias","alias":[["Data","Int","Bits"],{"Right":{"Left":{"Ident":"or"}}}],"fixity":{"associativity":"infixl","precedence":10}},"sourceSpan":{"start":[20,1],"name":"/home/r/purescript-stuff/bower_components/purescript-integers/src/Data/Int/Bits.purs","end":[20,20]}},{"children":[],"comments":null,"title":"(.^.)","info":{"declType":"alias","alias":[["Data","Int","Bits"],{"Right":{"Left":{"Ident":"xor"}}}],"fixity":{"associativity":"infixl","precedence":10}},"sourceSpan":{"start":[25,1],"name":"/home/r/purescript-stuff/bower_components/purescript-integers/src/Data/Int/Bits.purs","end":[25,21]}},{"children":[],"comments":null,"title":"(.&.)","info":{"declType":"alias","alias":[["Data","Int","Bits"],{"Right":{"Left":{"Ident":"and"}}}],"fixity":{"associativity":"infixl","precedence":10}},"sourceSpan":{"start":[15,1],"name":"/home/r/purescript-stuff/bower_components/purescript-integers/src/Data/Int/Bits.purs","end":[15,21]}}]},{"moduleName":{"package":"purescript-lazy","item":["Data","Lazy"]},"declarations":[{"children":[{"comments":null,"title":"semiringLazy","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","Semiring"],"Semiring"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Semiring"],"Semiring"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Lazy"],"Lazy"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[31,1],"name":"/home/r/purescript-stuff/bower_components/purescript-lazy/src/Data/Lazy.purs","end":[35,24]}},{"comments":null,"title":"ringLazy","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","Ring"],"Ring"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Ring"],"Ring"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Lazy"],"Lazy"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[37,1],"name":"/home/r/purescript-stuff/bower_components/purescript-lazy/src/Data/Lazy.purs","end":[38,42]}},{"comments":null,"title":"commutativeRingLazy","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","CommutativeRing"],"CommutativeRing"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","CommutativeRing"],"CommutativeRing"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Lazy"],"Lazy"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[40,1],"name":"/home/r/purescript-stuff/bower_components/purescript-lazy/src/Data/Lazy.purs","end":[40,78]}},{"comments":null,"title":"euclideanRingLazy","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","EuclideanRing"],"EuclideanRing"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","EuclideanRing"],"EuclideanRing"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Lazy"],"Lazy"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[42,1],"name":"/home/r/purescript-stuff/bower_components/purescript-lazy/src/Data/Lazy.purs","end":[45,46]}},{"comments":null,"title":"fieldLazy","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","Field"],"Field"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Field"],"Field"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Lazy"],"Lazy"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[47,1],"name":"/home/r/purescript-stuff/bower_components/purescript-lazy/src/Data/Lazy.purs","end":[47,48]}},{"comments":null,"title":"eqLazy","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","Eq"],"Eq"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Eq"],"Eq"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Lazy"],"Lazy"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[49,1],"name":"/home/r/purescript-stuff/bower_components/purescript-lazy/src/Data/Lazy.purs","end":[50,34]}},{"comments":null,"title":"ordLazy","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","Ord"],"Ord"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Ord"],"Ord"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Lazy"],"Lazy"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[52,1],"name":"/home/r/purescript-stuff/bower_components/purescript-lazy/src/Data/Lazy.purs","end":[53,44]}},{"comments":null,"title":"boundedLazy","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","Bounded"],"Bounded"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Bounded"],"Bounded"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Lazy"],"Lazy"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[55,1],"name":"/home/r/purescript-stuff/bower_components/purescript-lazy/src/Data/Lazy.purs","end":[57,30]}},{"comments":null,"title":"semigroupLazy","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","Semigroup"],"Semigroup"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Semigroup"],"Semigroup"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Lazy"],"Lazy"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[59,1],"name":"/home/r/purescript-stuff/bower_components/purescript-lazy/src/Data/Lazy.purs","end":[60,46]}},{"comments":null,"title":"monoidLazy","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","Monoid"],"Monoid"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Monoid"],"Monoid"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Lazy"],"Lazy"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[62,1],"name":"/home/r/purescript-stuff/bower_components/purescript-lazy/src/Data/Lazy.purs","end":[63,30]}},{"comments":null,"title":"heytingAlgebraLazy","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","HeytingAlgebra"],"HeytingAlgebra"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","HeytingAlgebra"],"HeytingAlgebra"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Lazy"],"Lazy"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[65,1],"name":"/home/r/purescript-stuff/bower_components/purescript-lazy/src/Data/Lazy.purs","end":[71,20]}},{"comments":null,"title":"booleanAlgebraLazy","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","BooleanAlgebra"],"BooleanAlgebra"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","BooleanAlgebra"],"BooleanAlgebra"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Lazy"],"Lazy"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[73,1],"name":"/home/r/purescript-stuff/bower_components/purescript-lazy/src/Data/Lazy.purs","end":[73,75]}},{"comments":null,"title":"functorLazy","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Functor"],"Functor"]},{"tag":"TypeConstructor","contents":[["Data","Lazy"],"Lazy"]}]}},"sourceSpan":{"start":[75,1],"name":"/home/r/purescript-stuff/bower_components/purescript-lazy/src/Data/Lazy.purs","end":[76,36]}},{"comments":null,"title":"invariantLazy","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Functor","Invariant"],"Invariant"]},{"tag":"TypeConstructor","contents":[["Data","Lazy"],"Lazy"]}]}},"sourceSpan":{"start":[78,1],"name":"/home/r/purescript-stuff/bower_components/purescript-lazy/src/Data/Lazy.purs","end":[79,15]}},{"comments":null,"title":"applyLazy","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Apply"],"Apply"]},{"tag":"TypeConstructor","contents":[["Data","Lazy"],"Lazy"]}]}},"sourceSpan":{"start":[81,1],"name":"/home/r/purescript-stuff/bower_components/purescript-lazy/src/Data/Lazy.purs","end":[82,44]}},{"comments":null,"title":"applicativeLazy","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Applicative"],"Applicative"]},{"tag":"TypeConstructor","contents":[["Data","Lazy"],"Lazy"]}]}},"sourceSpan":{"start":[84,1],"name":"/home/r/purescript-stuff/bower_components/purescript-lazy/src/Data/Lazy.purs","end":[85,25]}},{"comments":null,"title":"bindLazy","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Bind"],"Bind"]},{"tag":"TypeConstructor","contents":[["Data","Lazy"],"Lazy"]}]}},"sourceSpan":{"start":[87,1],"name":"/home/r/purescript-stuff/bower_components/purescript-lazy/src/Data/Lazy.purs","end":[88,45]}},{"comments":null,"title":"monadLazy","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad"],"Monad"]},{"tag":"TypeConstructor","contents":[["Data","Lazy"],"Lazy"]}]}},"sourceSpan":{"start":[90,1],"name":"/home/r/purescript-stuff/bower_components/purescript-lazy/src/Data/Lazy.purs","end":[90,33]}},{"comments":null,"title":"extendLazy","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Extend"],"Extend"]},{"tag":"TypeConstructor","contents":[["Data","Lazy"],"Lazy"]}]}},"sourceSpan":{"start":[92,1],"name":"/home/r/purescript-stuff/bower_components/purescript-lazy/src/Data/Lazy.purs","end":[93,31]}},{"comments":null,"title":"comonadLazy","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Comonad"],"Comonad"]},{"tag":"TypeConstructor","contents":[["Data","Lazy"],"Lazy"]}]}},"sourceSpan":{"start":[95,1],"name":"/home/r/purescript-stuff/bower_components/purescript-lazy/src/Data/Lazy.purs","end":[96,18]}},{"comments":null,"title":"showLazy","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","Show"],"Show"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Show"],"Show"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Lazy"],"Lazy"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[98,1],"name":"/home/r/purescript-stuff/bower_components/purescript-lazy/src/Data/Lazy.purs","end":[101,1]}},{"comments":null,"title":"lazyLazy","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Lazy"],"Lazy"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Lazy"],"Lazy"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[101,1],"name":"/home/r/purescript-stuff/bower_components/purescript-lazy/src/Data/Lazy.purs","end":[102,38]}}],"comments":"`Lazy a` represents lazily-computed values of type `a`.\n\nA lazy value is computed at most once - the result is saved\nafter the first computation, and subsequent attempts to read\nthe value simply return the saved value.\n\n`Lazy` values can be created with `defer`, or by using the provided\ntype class instances.\n\n`Lazy` values can be evaluated by using the `force` function.\n","title":"Lazy","info":{"kind":{"tag":"FunKind","contents":[{"tag":"NamedKind","contents":[["Prim"],"Type"]},{"tag":"NamedKind","contents":[["Prim"],"Type"]}]},"declType":"externData"},"sourceSpan":{"start":[23,1],"name":"/home/r/purescript-stuff/bower_components/purescript-lazy/src/Data/Lazy.purs","end":[23,41]}},{"children":[],"comments":"Force evaluation of a `Lazy` value.\n","title":"force","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Lazy"],"Lazy"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeVar","contents":"a"}]},null]}},"sourceSpan":{"start":[29,1],"name":"/home/r/purescript-stuff/bower_components/purescript-lazy/src/Data/Lazy.purs","end":[29,46]}},{"children":[],"comments":"Defer a computation, creating a `Lazy` value.\n","title":"defer","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]},{"tag":"TypeVar","contents":"a"}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Lazy"],"Lazy"]},{"tag":"TypeVar","contents":"a"}]}]},null]}},"sourceSpan":{"start":[26,1],"name":"/home/r/purescript-stuff/bower_components/purescript-lazy/src/Data/Lazy.purs","end":[26,56]}}]},{"moduleName":{"package":"purescript-leibniz","item":["Data","Leibniz"]},"declarations":[{"children":[{"comments":null,"title":"Leibniz","info":{"arguments":[{"tag":"ParensInType","contents":{"tag":"ForAll","contents":["f",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"b"}]}]},null]}}],"declType":"dataConstructor"},"sourceSpan":null},{"comments":null,"title":"semigroupoidLeibniz","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Semigroupoid"],"Semigroupoid"]},{"tag":"TypeConstructor","contents":[["Data","Leibniz"],"Leibniz"]}]}},"sourceSpan":{"start":[36,1],"name":"/home/r/purescript-stuff/bower_components/purescript-leibniz/src/Data/Leibniz.purs","end":[37,37]}},{"comments":null,"title":"categoryLeibniz","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Category"],"Category"]},{"tag":"TypeConstructor","contents":[["Data","Leibniz"],"Leibniz"]}]}},"sourceSpan":{"start":[39,1],"name":"/home/r/purescript-stuff/bower_components/purescript-leibniz/src/Data/Leibniz.purs","end":[40,18]}}],"comments":"Two types are equal if they are _equal in all contexts_.\n","title":"Leibniz","info":{"declType":"data","dataDeclType":"newtype","typeArguments":[["a",null],["b",null]]},"sourceSpan":{"start":[28,1],"name":"/home/r/purescript-stuff/bower_components/purescript-leibniz/src/Data/Leibniz.purs","end":[28,53]}},{"children":[],"comments":null,"title":"type (~)","info":{"declType":"alias","alias":[["Data","Leibniz"],{"Left":"Leibniz"}],"fixity":{"associativity":"infix","precedence":4}},"sourceSpan":{"start":[30,1],"name":"/home/r/purescript-stuff/bower_components/purescript-leibniz/src/Data/Leibniz.purs","end":[30,26]}}]},{"moduleName":{"package":"purescript-lists","item":["Data","List"]},"declarations":[{"children":[{"comments":null,"title":"Nil","info":{"arguments":[],"declType":"dataConstructor"},"sourceSpan":null},{"comments":null,"title":"showList","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","Show"],"Show"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Show"],"Show"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","List","Types"],"List"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[30,1],"name":"/home/r/purescript-stuff/bower_components/purescript-lists/src/Data/List/Types.purs","end":[34,1]}},{"comments":null,"title":"eqList","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","Eq"],"Eq"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Eq"],"Eq"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","List","Types"],"List"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[34,1],"name":"/home/r/purescript-stuff/bower_components/purescript-lists/src/Data/List/Types.purs","end":[35,11]}},{"comments":null,"title":"eq1List","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Eq"],"Eq1"]},{"tag":"TypeConstructor","contents":[["Data","List","Types"],"List"]}]}},"sourceSpan":{"start":[37,1],"name":"/home/r/purescript-stuff/bower_components/purescript-lists/src/Data/List/Types.purs","end":[43,23]}},{"comments":null,"title":"ordList","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","Ord"],"Ord"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Ord"],"Ord"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","List","Types"],"List"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[45,1],"name":"/home/r/purescript-stuff/bower_components/purescript-lists/src/Data/List/Types.purs","end":[46,21]}},{"comments":null,"title":"ord1List","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Ord"],"Ord1"]},{"tag":"TypeConstructor","contents":[["Data","List","Types"],"List"]}]}},"sourceSpan":{"start":[48,1],"name":"/home/r/purescript-stuff/bower_components/purescript-lists/src/Data/List/Types.purs","end":[57,23]}},{"comments":null,"title":"semigroupList","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Semigroup"],"Semigroup"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","List","Types"],"List"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[59,1],"name":"/home/r/purescript-stuff/bower_components/purescript-lists/src/Data/List/Types.purs","end":[60,33]}},{"comments":null,"title":"monoidList","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Monoid"],"Monoid"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","List","Types"],"List"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[62,1],"name":"/home/r/purescript-stuff/bower_components/purescript-lists/src/Data/List/Types.purs","end":[63,15]}},{"comments":null,"title":"functorList","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Functor"],"Functor"]},{"tag":"TypeConstructor","contents":[["Data","List","Types"],"List"]}]}},"sourceSpan":{"start":[65,1],"name":"/home/r/purescript-stuff/bower_components/purescript-lists/src/Data/List/Types.purs","end":[66,42]}},{"comments":null,"title":"foldableList","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Foldable"],"Foldable"]},{"tag":"TypeConstructor","contents":[["Data","List","Types"],"List"]}]}},"sourceSpan":{"start":[68,1],"name":"/home/r/purescript-stuff/bower_components/purescript-lists/src/Data/List/Types.purs","end":[79,54]}},{"comments":null,"title":"unfoldableList","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Unfoldable"],"Unfoldable"]},{"tag":"TypeConstructor","contents":[["Data","List","Types"],"List"]}]}},"sourceSpan":{"start":[81,1],"name":"/home/r/purescript-stuff/bower_components/purescript-lists/src/Data/List/Types.purs","end":[86,52]}},{"comments":null,"title":"traversableList","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Traversable"],"Traversable"]},{"tag":"TypeConstructor","contents":[["Data","List","Types"],"List"]}]}},"sourceSpan":{"start":[88,1],"name":"/home/r/purescript-stuff/bower_components/purescript-lists/src/Data/List/Types.purs","end":[90,25]}},{"comments":null,"title":"applyList","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Apply"],"Apply"]},{"tag":"TypeConstructor","contents":[["Data","List","Types"],"List"]}]}},"sourceSpan":{"start":[92,1],"name":"/home/r/purescript-stuff/bower_components/purescript-lists/src/Data/List/Types.purs","end":[94,48]}},{"comments":null,"title":"applicativeList","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Applicative"],"Applicative"]},{"tag":"TypeConstructor","contents":[["Data","List","Types"],"List"]}]}},"sourceSpan":{"start":[96,1],"name":"/home/r/purescript-stuff/bower_components/purescript-lists/src/Data/List/Types.purs","end":[97,19]}},{"comments":null,"title":"bindList","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Bind"],"Bind"]},{"tag":"TypeConstructor","contents":[["Data","List","Types"],"List"]}]}},"sourceSpan":{"start":[99,1],"name":"/home/r/purescript-stuff/bower_components/purescript-lists/src/Data/List/Types.purs","end":[101,37]}},{"comments":null,"title":"monadList","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad"],"Monad"]},{"tag":"TypeConstructor","contents":[["Data","List","Types"],"List"]}]}},"sourceSpan":{"start":[103,1],"name":"/home/r/purescript-stuff/bower_components/purescript-lists/src/Data/List/Types.purs","end":[103,33]}},{"comments":null,"title":"altList","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Alt"],"Alt"]},{"tag":"TypeConstructor","contents":[["Data","List","Types"],"List"]}]}},"sourceSpan":{"start":[105,1],"name":"/home/r/purescript-stuff/bower_components/purescript-lists/src/Data/List/Types.purs","end":[106,15]}},{"comments":null,"title":"plusList","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Plus"],"Plus"]},{"tag":"TypeConstructor","contents":[["Data","List","Types"],"List"]}]}},"sourceSpan":{"start":[108,1],"name":"/home/r/purescript-stuff/bower_components/purescript-lists/src/Data/List/Types.purs","end":[109,14]}},{"comments":null,"title":"alternativeList","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Alternative"],"Alternative"]},{"tag":"TypeConstructor","contents":[["Data","List","Types"],"List"]}]}},"sourceSpan":{"start":[111,1],"name":"/home/r/purescript-stuff/bower_components/purescript-lists/src/Data/List/Types.purs","end":[111,45]}},{"comments":null,"title":"monadZeroList","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","MonadZero"],"MonadZero"]},{"tag":"TypeConstructor","contents":[["Data","List","Types"],"List"]}]}},"sourceSpan":{"start":[113,1],"name":"/home/r/purescript-stuff/bower_components/purescript-lists/src/Data/List/Types.purs","end":[113,41]}},{"comments":null,"title":"monadPlusList","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","MonadPlus"],"MonadPlus"]},{"tag":"TypeConstructor","contents":[["Data","List","Types"],"List"]}]}},"sourceSpan":{"start":[115,1],"name":"/home/r/purescript-stuff/bower_components/purescript-lists/src/Data/List/Types.purs","end":[115,41]}},{"comments":null,"title":"extendList","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Extend"],"Extend"]},{"tag":"TypeConstructor","contents":[["Data","List","Types"],"List"]}]}},"sourceSpan":{"start":[117,1],"name":"/home/r/purescript-stuff/bower_components/purescript-lists/src/Data/List/Types.purs","end":[124,42]}}],"comments":null,"title":"List","info":{"declType":"data","dataDeclType":"data","typeArguments":[["a",null]]},"sourceSpan":{"start":[26,1],"name":"/home/r/purescript-stuff/bower_components/purescript-lists/src/Data/List/Types.purs","end":[26,36]}},{"children":[],"comments":null,"title":"(:)","info":{"declType":"alias","alias":[["Data","List","Types"],{"Right":{"Right":"Cons"}}],"fixity":{"associativity":"infixr","precedence":6}},"sourceSpan":{"start":[28,1],"name":"/home/r/purescript-stuff/bower_components/purescript-lists/src/Data/List/Types.purs","end":[28,19]}}]},{"moduleName":{"package":"purescript-maybe","item":["Data","Maybe"]},"declarations":[{"children":[{"comments":null,"title":"Nothing","info":{"arguments":[],"declType":"dataConstructor"},"sourceSpan":null},{"comments":null,"title":"Just","info":{"arguments":[{"tag":"TypeVar","contents":"a"}],"declType":"dataConstructor"},"sourceSpan":null},{"comments":"The `Functor` instance allows functions to transform the contents of a\n`Just` with the `<$>` operator:\n\n``` purescript\nf <$> Just x == Just (f x)\n```\n\n`Nothing` values are left untouched:\n\n``` purescript\nf <$> Nothing == Nothing\n```\n","title":"functorMaybe","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Functor"],"Functor"]},{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]}]}},"sourceSpan":{"start":[33,1],"name":"/home/r/purescript-stuff/bower_components/purescript-maybe/src/Data/Maybe.purs","end":[35,28]}},{"comments":"The `Apply` instance allows functions contained within a `Just` to\ntransform a value contained within a `Just` using the `apply` operator:\n\n``` purescript\nJust f <*> Just x == Just (f x)\n```\n\n`Nothing` values are left untouched:\n\n``` purescript\nJust f <*> Nothing == Nothing\nNothing <*> Just x == Nothing\n```\n\nCombining `Functor`'s `<$>` with `Apply`'s `<*>` can be used transform a\npure function to take `Maybe`-typed arguments so `f :: a -> b -> c`\nbecomes `f :: Maybe a -> Maybe b -> Maybe c`:\n\n``` purescript\nf <$> Just x <*> Just y == Just (f x y)\n```\n\nThe `Nothing`-preserving behaviour of both operators means the result of\nan expression like the above but where any one of the values is `Nothing`\nmeans the whole result becomes `Nothing` also:\n\n``` purescript\nf <$> Nothing <*> Just y == Nothing\nf <$> Just x <*> Nothing == Nothing\nf <$> Nothing <*> Nothing == Nothing\n```\n","title":"applyMaybe","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Apply"],"Apply"]},{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]}]}},"sourceSpan":{"start":[68,1],"name":"/home/r/purescript-stuff/bower_components/purescript-maybe/src/Data/Maybe.purs","end":[70,30]}},{"comments":"The `Applicative` instance enables lifting of values into `Maybe` with the\n`pure` or `return` function (`return` is an alias for `pure`):\n\n``` purescript\npure x :: Maybe _ == Just x\nreturn x :: Maybe _ == Just x\n```\n\nCombining `Functor`'s `<$>` with `Apply`'s `<*>` and `Applicative`'s\n`pure` can be used to pass a mixture of `Maybe` and non-`Maybe` typed\nvalues to a function that does not usually expect them, by using `pure`\nfor any value that is not already `Maybe` typed:\n\n``` purescript\nf <$> Just x <*> pure y == Just (f x y)\n```\n\nEven though `pure = Just` it is recommended to use `pure` in situations\nlike this as it allows the choice of `Applicative` to be changed later\nwithout having to go through and replace `Just` with a new constructor.\n","title":"applicativeMaybe","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Applicative"],"Applicative"]},{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]}]}},"sourceSpan":{"start":[92,1],"name":"/home/r/purescript-stuff/bower_components/purescript-maybe/src/Data/Maybe.purs","end":[93,14]}},{"comments":"The `Alt` instance allows for a choice to be made between two `Maybe`\nvalues with the `<|>` operator, where the first `Just` encountered\nis taken.\n\n``` purescript\nJust x <|> Just y == Just x\nNothing <|> Just y == Just y\nNothing <|> Nothing == Nothing\n```\n","title":"altMaybe","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Alt"],"Alt"]},{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]}]}},"sourceSpan":{"start":[104,1],"name":"/home/r/purescript-stuff/bower_components/purescript-maybe/src/Data/Maybe.purs","end":[106,20]}},{"comments":"The `Plus` instance provides a default `Maybe` value:\n\n``` purescript\nempty :: Maybe _ == Nothing\n```\n","title":"plusMaybe","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Plus"],"Plus"]},{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]}]}},"sourceSpan":{"start":[113,1],"name":"/home/r/purescript-stuff/bower_components/purescript-maybe/src/Data/Maybe.purs","end":[114,18]}},{"comments":"The `Alternative` instance guarantees that there are both `Applicative` and\n`Plus` instances for `Maybe`.\n","title":"alternativeMaybe","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Alternative"],"Alternative"]},{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]}]}},"sourceSpan":{"start":[118,1],"name":"/home/r/purescript-stuff/bower_components/purescript-maybe/src/Data/Maybe.purs","end":[118,47]}},{"comments":"The `Bind` instance allows sequencing of `Maybe` values and functions that\nreturn a `Maybe` by using the `>>=` operator:\n\n``` purescript\nJust x >>= f = f x\nNothing >>= f = Nothing\n```\n","title":"bindMaybe","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Bind"],"Bind"]},{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]}]}},"sourceSpan":{"start":[127,1],"name":"/home/r/purescript-stuff/bower_components/purescript-maybe/src/Data/Maybe.purs","end":[129,28]}},{"comments":"The `Monad` instance guarantees that there are both `Applicative` and\n`Bind` instances for `Maybe`. This also enables the `do` syntactic sugar:\n\n``` purescript\ndo\n  x' <- x\n  y' <- y\n  pure (f x' y')\n```\n\nWhich is equivalent to:\n\n``` purescript\nx >>= (\\x' -> y >>= (\\y' -> pure (f x' y')))\n```\n","title":"monadMaybe","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad"],"Monad"]},{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]}]}},"sourceSpan":{"start":[146,1],"name":"/home/r/purescript-stuff/bower_components/purescript-maybe/src/Data/Maybe.purs","end":[146,35]}},{"comments":null,"title":"monadZeroMaybe","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","MonadZero"],"MonadZero"]},{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]}]}},"sourceSpan":{"start":[148,1],"name":"/home/r/purescript-stuff/bower_components/purescript-maybe/src/Data/Maybe.purs","end":[148,43]}},{"comments":"The `Extend` instance allows sequencing of `Maybe` values and functions\nthat accept a `Maybe a` and return a non-`Maybe` result using the\n`<<=` operator.\n\n``` purescript\nf <<= Nothing = Nothing\nf <<= Just x = Just (f x)\n```\n","title":"extendMaybe","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Extend"],"Extend"]},{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]}]}},"sourceSpan":{"start":[158,1],"name":"/home/r/purescript-stuff/bower_components/purescript-maybe/src/Data/Maybe.purs","end":[160,33]}},{"comments":null,"title":"invariantMaybe","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Functor","Invariant"],"Invariant"]},{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]}]}},"sourceSpan":{"start":[162,1],"name":"/home/r/purescript-stuff/bower_components/purescript-maybe/src/Data/Maybe.purs","end":[163,15]}},{"comments":"The `Semigroup` instance enables use of the operator `<>` on `Maybe` values\nwhenever there is a `Semigroup` instance for the type the `Maybe` contains.\nThe exact behaviour of `<>` depends on the \"inner\" `Semigroup` instance,\nbut generally captures the notion of appending or combining things.\n\n``` purescript\nJust x <> Just y = Just (x <> y)\nJust x <> Nothing = Just x\nNothing <> Just y = Just y\nNothing <> Nothing = Nothing\n```\n","title":"semigroupMaybe","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","Semigroup"],"Semigroup"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Semigroup"],"Semigroup"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[176,1],"name":"/home/r/purescript-stuff/bower_components/purescript-maybe/src/Data/Maybe.purs","end":[179,43]}},{"comments":null,"title":"monoidMaybe","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","Semigroup"],"Semigroup"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Monoid"],"Monoid"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[181,1],"name":"/home/r/purescript-stuff/bower_components/purescript-maybe/src/Data/Maybe.purs","end":[182,19]}},{"comments":"The `Eq` instance allows `Maybe` values to be checked for equality with\n`==` and inequality with `/=` whenever there is an `Eq` instance for the\ntype the `Maybe` contains.\n","title":"eqMaybe","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","Eq"],"Eq"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Eq"],"Eq"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[187,1],"name":"/home/r/purescript-stuff/bower_components/purescript-maybe/src/Data/Maybe.purs","end":[187,48]}},{"comments":null,"title":"eq1Maybe","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Eq"],"Eq1"]},{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]}]}},"sourceSpan":{"start":[189,1],"name":"/home/r/purescript-stuff/bower_components/purescript-maybe/src/Data/Maybe.purs","end":[189,46]}},{"comments":"The `Ord` instance allows `Maybe` values to be compared with\n`compare`, `>`, `>=`, `<` and `<=` whenever there is an `Ord` instance for\nthe type the `Maybe` contains.\n\n`Nothing` is considered to be less than any `Just` value.\n","title":"ordMaybe","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","Ord"],"Ord"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Ord"],"Ord"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[196,1],"name":"/home/r/purescript-stuff/bower_components/purescript-maybe/src/Data/Maybe.purs","end":[196,51]}},{"comments":null,"title":"ord1Maybe","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Ord"],"Ord1"]},{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]}]}},"sourceSpan":{"start":[198,1],"name":"/home/r/purescript-stuff/bower_components/purescript-maybe/src/Data/Maybe.purs","end":[198,58]}},{"comments":null,"title":"boundedMaybe","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","Bounded"],"Bounded"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Bounded"],"Bounded"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[200,1],"name":"/home/r/purescript-stuff/bower_components/purescript-maybe/src/Data/Maybe.purs","end":[202,19]}},{"comments":"The `Show` instance allows `Maybe` values to be rendered as a string with\n`show` whenever there is an `Show` instance for the type the `Maybe`\ncontains.\n","title":"showMaybe","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","Show"],"Show"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Show"],"Show"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[207,1],"name":"/home/r/purescript-stuff/bower_components/purescript-maybe/src/Data/Maybe.purs","end":[211,1]}}],"comments":"The `Maybe` type is used to represent optional values and can be seen as\nsomething like a type-safe `null`, where `Nothing` is `null` and `Just x`\nis the non-null value `x`.\n","title":"Maybe","info":{"declType":"data","dataDeclType":"data","typeArguments":[["a",null]]},"sourceSpan":{"start":[19,1],"name":"/home/r/purescript-stuff/bower_components/purescript-maybe/src/Data/Maybe.purs","end":[19,32]}},{"children":[],"comments":"Similar to `maybe` but for use in cases where the default value may be\nexpensive to compute. As PureScript is not lazy, the standard `maybe` has\nto evaluate the default value before returning the result, whereas here\nthe value is only computed when the `Maybe` is known to be `Nothing`.\n\n``` purescript\nmaybe' (\\_ -> x) f Nothing == x\nmaybe' (\\_ -> x) f (Just y) == f y\n```\n","title":"maybe'","info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]},{"tag":"TypeVar","contents":"b"}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeVar","contents":"b"}]}]}]},null]},null]}},"sourceSpan":{"start":[232,1],"name":"/home/r/purescript-stuff/bower_components/purescript-maybe/src/Data/Maybe.purs","end":[232,62]}},{"children":[],"comments":"Takes a default value, a function, and a `Maybe` value. If the `Maybe`\nvalue is `Nothing` the default value is returned, otherwise the function\nis applied to the value inside the `Just` and the result is returned.\n\n``` purescript\nmaybe x f Nothing == x\nmaybe x f (Just y) == f y\n```\n","title":"maybe","info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeVar","contents":"b"}]}]}]},null]},null]}},"sourceSpan":{"start":[219,1],"name":"/home/r/purescript-stuff/bower_components/purescript-maybe/src/Data/Maybe.purs","end":[219,51]}},{"children":[],"comments":"Returns `true` when the `Maybe` value is `Nothing`.\n","title":"isNothing","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]},null]}},"sourceSpan":{"start":[264,1],"name":"/home/r/purescript-stuff/bower_components/purescript-maybe/src/Data/Maybe.purs","end":[264,42]}},{"children":[],"comments":"Returns `true` when the `Maybe` value was constructed with `Just`.\n","title":"isJust","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]},null]}},"sourceSpan":{"start":[260,1],"name":"/home/r/purescript-stuff/bower_components/purescript-maybe/src/Data/Maybe.purs","end":[260,39]}},{"children":[],"comments":"Similar to `fromMaybe` but for use in cases where the default value may be\nexpensive to compute. As PureScript is not lazy, the standard `fromMaybe`\nhas to evaluate the default value before returning the result, whereas here\nthe value is only computed when the `Maybe` is known to be `Nothing`.\n\n``` purescript\nfromMaybe' (\\_ -> x) Nothing == x\nfromMaybe' (\\_ -> x) (Just y) == y\n```\n","title":"fromMaybe'","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]},{"tag":"TypeVar","contents":"a"}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeVar","contents":"a"}]}]},null]}},"sourceSpan":{"start":[256,1],"name":"/home/r/purescript-stuff/bower_components/purescript-maybe/src/Data/Maybe.purs","end":[256,52]}},{"children":[],"comments":"Takes a default value, and a `Maybe` value. If the `Maybe` value is\n`Nothing` the default value is returned, otherwise the value inside the\n`Just` is returned.\n\n``` purescript\nfromMaybe x Nothing == x\nfromMaybe x (Just y) == y\n```\n","title":"fromMaybe","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeVar","contents":"a"}]}]},null]}},"sourceSpan":{"start":[244,1],"name":"/home/r/purescript-stuff/bower_components/purescript-maybe/src/Data/Maybe.purs","end":[244,41]}},{"children":[],"comments":"A partial function that extracts the value from the `Just` data\nconstructor. Passing `Nothing` to `fromJust` will throw an error at\nruntime.\n","title":"fromJust","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Prim"],"Partial"],"constraintArgs":[],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeVar","contents":"a"}]}]},null]}},"sourceSpan":{"start":[270,1],"name":"/home/r/purescript-stuff/bower_components/purescript-maybe/src/Data/Maybe.purs","end":[270,46]}}]},{"moduleName":{"package":"purescript-maybe","item":["Data","Maybe","First"]},"declarations":[{"children":[{"comments":null,"title":"First","info":{"arguments":[{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeVar","contents":"a"}]}}],"declType":"dataConstructor"},"sourceSpan":null},{"comments":null,"title":"newtypeFirst","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Newtype"],"Newtype"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe","First"],"First"]},{"tag":"TypeVar","contents":"a"}]}}]},{"tag":"TypeWildcard","contents":{"start":[24,51],"name":"/home/r/purescript-stuff/bower_components/purescript-maybe/src/Data/Maybe/First.purs","end":[24,52]}}]}},"sourceSpan":{"start":[24,1],"name":"/home/r/purescript-stuff/bower_components/purescript-maybe/src/Data/Maybe/First.purs","end":[24,52]}},{"comments":null,"title":"eqFirst","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","Eq"],"Eq"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Eq"],"Eq"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe","First"],"First"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[26,1],"name":"/home/r/purescript-stuff/bower_components/purescript-maybe/src/Data/Maybe/First.purs","end":[26,58]}},{"comments":null,"title":"eq1First","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Eq"],"Eq1"]},{"tag":"TypeConstructor","contents":[["Data","Maybe","First"],"First"]}]}},"sourceSpan":{"start":[28,1],"name":"/home/r/purescript-stuff/bower_components/purescript-maybe/src/Data/Maybe/First.purs","end":[28,46]}},{"comments":null,"title":"ordFirst","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","Ord"],"Ord"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Ord"],"Ord"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe","First"],"First"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[30,1],"name":"/home/r/purescript-stuff/bower_components/purescript-maybe/src/Data/Maybe/First.purs","end":[30,61]}},{"comments":null,"title":"ord1First","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Ord"],"Ord1"]},{"tag":"TypeConstructor","contents":[["Data","Maybe","First"],"First"]}]}},"sourceSpan":{"start":[32,1],"name":"/home/r/purescript-stuff/bower_components/purescript-maybe/src/Data/Maybe/First.purs","end":[32,48]}},{"comments":null,"title":"boundedFirst","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","Bounded"],"Bounded"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Bounded"],"Bounded"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe","First"],"First"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[34,1],"name":"/home/r/purescript-stuff/bower_components/purescript-maybe/src/Data/Maybe/First.purs","end":[34,73]}},{"comments":null,"title":"functorFirst","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Functor"],"Functor"]},{"tag":"TypeConstructor","contents":[["Data","Maybe","First"],"First"]}]}},"sourceSpan":{"start":[36,1],"name":"/home/r/purescript-stuff/bower_components/purescript-maybe/src/Data/Maybe/First.purs","end":[36,54]}},{"comments":null,"title":"invariantFirst","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Functor","Invariant"],"Invariant"]},{"tag":"TypeConstructor","contents":[["Data","Maybe","First"],"First"]}]}},"sourceSpan":{"start":[38,1],"name":"/home/r/purescript-stuff/bower_components/purescript-maybe/src/Data/Maybe/First.purs","end":[38,58]}},{"comments":null,"title":"applyFirst","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Apply"],"Apply"]},{"tag":"TypeConstructor","contents":[["Data","Maybe","First"],"First"]}]}},"sourceSpan":{"start":[40,1],"name":"/home/r/purescript-stuff/bower_components/purescript-maybe/src/Data/Maybe/First.purs","end":[40,50]}},{"comments":null,"title":"applicativeFirst","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Applicative"],"Applicative"]},{"tag":"TypeConstructor","contents":[["Data","Maybe","First"],"First"]}]}},"sourceSpan":{"start":[42,1],"name":"/home/r/purescript-stuff/bower_components/purescript-maybe/src/Data/Maybe/First.purs","end":[42,62]}},{"comments":null,"title":"bindFirst","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Bind"],"Bind"]},{"tag":"TypeConstructor","contents":[["Data","Maybe","First"],"First"]}]}},"sourceSpan":{"start":[44,1],"name":"/home/r/purescript-stuff/bower_components/purescript-maybe/src/Data/Maybe/First.purs","end":[44,48]}},{"comments":null,"title":"monadFirst","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad"],"Monad"]},{"tag":"TypeConstructor","contents":[["Data","Maybe","First"],"First"]}]}},"sourceSpan":{"start":[46,1],"name":"/home/r/purescript-stuff/bower_components/purescript-maybe/src/Data/Maybe/First.purs","end":[46,50]}},{"comments":null,"title":"extendFirst","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Extend"],"Extend"]},{"tag":"TypeConstructor","contents":[["Data","Maybe","First"],"First"]}]}},"sourceSpan":{"start":[48,1],"name":"/home/r/purescript-stuff/bower_components/purescript-maybe/src/Data/Maybe/First.purs","end":[48,52]}},{"comments":null,"title":"showFirst","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","Show"],"Show"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Show"],"Show"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe","First"],"First"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[50,1],"name":"/home/r/purescript-stuff/bower_components/purescript-maybe/src/Data/Maybe/First.purs","end":[53,1]}},{"comments":null,"title":"semigroupFirst","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Semigroup"],"Semigroup"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe","First"],"First"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[53,1],"name":"/home/r/purescript-stuff/bower_components/purescript-maybe/src/Data/Maybe/First.purs","end":[55,27]}},{"comments":null,"title":"monoidFirst","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Monoid"],"Monoid"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe","First"],"First"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[57,1],"name":"/home/r/purescript-stuff/bower_components/purescript-maybe/src/Data/Maybe/First.purs","end":[58,18]}}],"comments":"Monoid returning the first (left-most) non-`Nothing` value.\n\n``` purescript\nFirst (Just x) <> First (Just y) == First (Just x)\nFirst Nothing <> First (Just y) == First (Just y)\nFirst Nothing <> Nothing == First Nothing\nmempty :: First _ == First Nothing\n```\n","title":"First","info":{"declType":"data","dataDeclType":"newtype","typeArguments":[["a",null]]},"sourceSpan":{"start":[22,1],"name":"/home/r/purescript-stuff/bower_components/purescript-maybe/src/Data/Maybe/First.purs","end":[22,34]}}]},{"moduleName":{"package":"purescript-maybe","item":["Data","Maybe","Last"]},"declarations":[{"children":[{"comments":null,"title":"Last","info":{"arguments":[{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeVar","contents":"a"}]}}],"declType":"dataConstructor"},"sourceSpan":null},{"comments":null,"title":"newtypeLast","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Newtype"],"Newtype"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe","Last"],"Last"]},{"tag":"TypeVar","contents":"a"}]}}]},{"tag":"TypeWildcard","contents":{"start":[24,49],"name":"/home/r/purescript-stuff/bower_components/purescript-maybe/src/Data/Maybe/Last.purs","end":[24,50]}}]}},"sourceSpan":{"start":[24,1],"name":"/home/r/purescript-stuff/bower_components/purescript-maybe/src/Data/Maybe/Last.purs","end":[24,50]}},{"comments":null,"title":"eqLast","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","Eq"],"Eq"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Eq"],"Eq"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe","Last"],"Last"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[26,1],"name":"/home/r/purescript-stuff/bower_components/purescript-maybe/src/Data/Maybe/Last.purs","end":[26,56]}},{"comments":null,"title":"eq1Last","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Eq"],"Eq1"]},{"tag":"TypeConstructor","contents":[["Data","Maybe","Last"],"Last"]}]}},"sourceSpan":{"start":[28,1],"name":"/home/r/purescript-stuff/bower_components/purescript-maybe/src/Data/Maybe/Last.purs","end":[28,44]}},{"comments":null,"title":"ordLast","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","Ord"],"Ord"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Ord"],"Ord"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe","Last"],"Last"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[30,1],"name":"/home/r/purescript-stuff/bower_components/purescript-maybe/src/Data/Maybe/Last.purs","end":[30,59]}},{"comments":null,"title":"ord1Last","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Ord"],"Ord1"]},{"tag":"TypeConstructor","contents":[["Data","Maybe","Last"],"Last"]}]}},"sourceSpan":{"start":[32,1],"name":"/home/r/purescript-stuff/bower_components/purescript-maybe/src/Data/Maybe/Last.purs","end":[32,46]}},{"comments":null,"title":"boundedLast","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","Bounded"],"Bounded"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Bounded"],"Bounded"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe","Last"],"Last"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[34,1],"name":"/home/r/purescript-stuff/bower_components/purescript-maybe/src/Data/Maybe/Last.purs","end":[34,71]}},{"comments":null,"title":"functorLast","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Functor"],"Functor"]},{"tag":"TypeConstructor","contents":[["Data","Maybe","Last"],"Last"]}]}},"sourceSpan":{"start":[36,1],"name":"/home/r/purescript-stuff/bower_components/purescript-maybe/src/Data/Maybe/Last.purs","end":[36,52]}},{"comments":null,"title":"invariantLast","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Functor","Invariant"],"Invariant"]},{"tag":"TypeConstructor","contents":[["Data","Maybe","Last"],"Last"]}]}},"sourceSpan":{"start":[38,1],"name":"/home/r/purescript-stuff/bower_components/purescript-maybe/src/Data/Maybe/Last.purs","end":[38,56]}},{"comments":null,"title":"applyLast","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Apply"],"Apply"]},{"tag":"TypeConstructor","contents":[["Data","Maybe","Last"],"Last"]}]}},"sourceSpan":{"start":[40,1],"name":"/home/r/purescript-stuff/bower_components/purescript-maybe/src/Data/Maybe/Last.purs","end":[40,48]}},{"comments":null,"title":"applicativeLast","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Applicative"],"Applicative"]},{"tag":"TypeConstructor","contents":[["Data","Maybe","Last"],"Last"]}]}},"sourceSpan":{"start":[42,1],"name":"/home/r/purescript-stuff/bower_components/purescript-maybe/src/Data/Maybe/Last.purs","end":[42,60]}},{"comments":null,"title":"bindLast","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Bind"],"Bind"]},{"tag":"TypeConstructor","contents":[["Data","Maybe","Last"],"Last"]}]}},"sourceSpan":{"start":[44,1],"name":"/home/r/purescript-stuff/bower_components/purescript-maybe/src/Data/Maybe/Last.purs","end":[44,46]}},{"comments":null,"title":"monadLast","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad"],"Monad"]},{"tag":"TypeConstructor","contents":[["Data","Maybe","Last"],"Last"]}]}},"sourceSpan":{"start":[46,1],"name":"/home/r/purescript-stuff/bower_components/purescript-maybe/src/Data/Maybe/Last.purs","end":[46,48]}},{"comments":null,"title":"extendLast","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Extend"],"Extend"]},{"tag":"TypeConstructor","contents":[["Data","Maybe","Last"],"Last"]}]}},"sourceSpan":{"start":[48,1],"name":"/home/r/purescript-stuff/bower_components/purescript-maybe/src/Data/Maybe/Last.purs","end":[48,50]}},{"comments":null,"title":"showLast","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","Show"],"Show"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Show"],"Show"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe","Last"],"Last"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[50,1],"name":"/home/r/purescript-stuff/bower_components/purescript-maybe/src/Data/Maybe/Last.purs","end":[53,1]}},{"comments":null,"title":"semigroupLast","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Semigroup"],"Semigroup"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe","Last"],"Last"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[53,1],"name":"/home/r/purescript-stuff/bower_components/purescript-maybe/src/Data/Maybe/Last.purs","end":[55,36]}},{"comments":null,"title":"monoidLast","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Monoid"],"Monoid"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe","Last"],"Last"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[57,1],"name":"/home/r/purescript-stuff/bower_components/purescript-maybe/src/Data/Maybe/Last.purs","end":[58,17]}}],"comments":"Monoid returning the last (right-most) non-`Nothing` value.\n\n``` purescript\nLast (Just x) <> Last (Just y) == Last (Just y)\nLast (Just x) <> Nothing == Last (Just x)\nLast Nothing <> Nothing == Last Nothing\nmempty :: Last _ == Last Nothing\n```\n","title":"Last","info":{"declType":"data","dataDeclType":"newtype","typeArguments":[["a",null]]},"sourceSpan":{"start":[22,1],"name":"/home/r/purescript-stuff/bower_components/purescript-maybe/src/Data/Maybe/Last.purs","end":[22,32]}}]},{"moduleName":{"package":"purescript-modules","item":["Data","Module"]},"declarations":[{"children":[{"comments":null,"title":"leftModuleUnit","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","Ring"],"Ring"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Module"],"LeftModule"]},{"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]},{"tag":"TypeVar","contents":"a"}]}},"sourceSpan":{"start":[39,1],"name":"/home/r/purescript-stuff/bower_components/purescript-modules/src/Data/Module.purs","end":[43,19]}}],"comments":"Left modules over rings.\n\nInstances must satisfy the following laws:\n\n - Left distributivity: `r ^* (x ^+ y) = r ^* x ^+ r ^* y`\n - Left distributivity: `(r + s) ^* x = r ^* x ^+ s ^* x`\n - Left compatibility: `(r * s) ^* x = r ^* (s ^* x)`\n - Left identity: `one ^* x = x`\n","title":"LeftModule","info":{"fundeps":[[["x"],["r"]]],"arguments":[["x",null],["r",null]],"declType":"typeClass","superclasses":[{"constraintClass":[["Data","Ring"],"Ring"],"constraintArgs":[{"tag":"TypeVar","contents":"r"}],"constraintData":null}]},"sourceSpan":{"start":[29,1],"name":"/home/r/purescript-stuff/bower_components/purescript-modules/src/Data/Module.purs","end":[33,24]}},{"children":[{"comments":null,"title":"rightModuleUnit","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","Ring"],"Ring"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Module"],"RightModule"]},{"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]},{"tag":"TypeVar","contents":"a"}]}},"sourceSpan":{"start":[68,1],"name":"/home/r/purescript-stuff/bower_components/purescript-modules/src/Data/Module.purs","end":[72,19]}}],"comments":"Right modules over rings.\n\nInstances must satisfy the following laws:\n\n - Right distributivity: `(x +^ y) *^ r = x *^ r +^ y *^ r`\n - Right distributivity: `x *^ (r + s) = x *^ r +^ x *^ s`\n - Right compatibility: `x *^ (r * s) = (x *^ r) *^ s`\n - Right identity: `x *^ one = x`\n","title":"RightModule","info":{"fundeps":[[["x"],["r"]]],"arguments":[["x",null],["r",null]],"declType":"typeClass","superclasses":[{"constraintClass":[["Data","Ring"],"Ring"],"constraintArgs":[{"tag":"TypeVar","contents":"r"}],"constraintData":null}]},"sourceSpan":{"start":[58,1],"name":"/home/r/purescript-stuff/bower_components/purescript-modules/src/Data/Module.purs","end":[62,24]}},{"children":[],"comments":null,"title":"mnegateR","info":{"declType":"value","type":{"tag":"ForAll","contents":["r",{"tag":"ForAll","contents":["x",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Module"],"RightModule"],"constraintArgs":[{"tag":"TypeVar","contents":"x"},{"tag":"TypeVar","contents":"r"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"x"}]},{"tag":"TypeVar","contents":"x"}]}]},null]},null]}},"sourceSpan":{"start":[74,1],"name":"/home/r/purescript-stuff/bower_components/purescript-modules/src/Data/Module.purs","end":[74,45]}},{"children":[],"comments":null,"title":"mnegateL","info":{"declType":"value","type":{"tag":"ForAll","contents":["r",{"tag":"ForAll","contents":["x",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Module"],"LeftModule"],"constraintArgs":[{"tag":"TypeVar","contents":"x"},{"tag":"TypeVar","contents":"r"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"x"}]},{"tag":"TypeVar","contents":"x"}]}]},null]},null]}},"sourceSpan":{"start":[45,1],"name":"/home/r/purescript-stuff/bower_components/purescript-modules/src/Data/Module.purs","end":[45,44]}},{"children":[],"comments":null,"title":"(^-)","info":{"declType":"alias","alias":[["Data","Module"],{"Right":{"Left":{"Ident":"msubL"}}}],"fixity":{"associativity":"infixl","precedence":6}},"sourceSpan":{"start":[36,1],"name":"/home/r/purescript-stuff/bower_components/purescript-modules/src/Data/Module.purs","end":[36,21]}},{"children":[],"comments":null,"title":"(^+)","info":{"declType":"alias","alias":[["Data","Module"],{"Right":{"Left":{"Ident":"maddL"}}}],"fixity":{"associativity":"infixl","precedence":6}},"sourceSpan":{"start":[35,1],"name":"/home/r/purescript-stuff/bower_components/purescript-modules/src/Data/Module.purs","end":[35,21]}},{"children":[],"comments":null,"title":"(^*)","info":{"declType":"alias","alias":[["Data","Module"],{"Right":{"Left":{"Ident":"mmulL"}}}],"fixity":{"associativity":"infixl","precedence":7}},"sourceSpan":{"start":[37,1],"name":"/home/r/purescript-stuff/bower_components/purescript-modules/src/Data/Module.purs","end":[37,21]}},{"children":[],"comments":null,"title":"(-^)","info":{"declType":"alias","alias":[["Data","Module"],{"Right":{"Left":{"Ident":"msubR"}}}],"fixity":{"associativity":"infixl","precedence":6}},"sourceSpan":{"start":[65,1],"name":"/home/r/purescript-stuff/bower_components/purescript-modules/src/Data/Module.purs","end":[65,21]}},{"children":[],"comments":null,"title":"(+^)","info":{"declType":"alias","alias":[["Data","Module"],{"Right":{"Left":{"Ident":"maddR"}}}],"fixity":{"associativity":"infixl","precedence":6}},"sourceSpan":{"start":[64,1],"name":"/home/r/purescript-stuff/bower_components/purescript-modules/src/Data/Module.purs","end":[64,21]}},{"children":[],"comments":null,"title":"(*^)","info":{"declType":"alias","alias":[["Data","Module"],{"Right":{"Left":{"Ident":"mmulR"}}}],"fixity":{"associativity":"infixl","precedence":7}},"sourceSpan":{"start":[66,1],"name":"/home/r/purescript-stuff/bower_components/purescript-modules/src/Data/Module.purs","end":[66,21]}}]},{"moduleName":{"package":"purescript-monoid","item":["Data","Monoid"]},"declarations":[{"children":[{"comments":null,"title":"mempty","info":{"declType":"typeClassMember","type":{"tag":"TypeVar","contents":"m"}},"sourceSpan":null},{"comments":null,"title":"monoidUnit","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Monoid"],"Monoid"]},{"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}},"sourceSpan":{"start":[23,1],"name":"/home/r/purescript-stuff/bower_components/purescript-monoid/src/Data/Monoid.purs","end":[24,16]}},{"comments":null,"title":"monoidFn","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","Monoid"],"Monoid"],"constraintArgs":[{"tag":"TypeVar","contents":"b"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Monoid"],"Monoid"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}},"sourceSpan":{"start":[26,1],"name":"/home/r/purescript-stuff/bower_components/purescript-monoid/src/Data/Monoid.purs","end":[27,24]}},{"comments":null,"title":"monoidString","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Monoid"],"Monoid"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}},"sourceSpan":{"start":[29,1],"name":"/home/r/purescript-stuff/bower_components/purescript-monoid/src/Data/Monoid.purs","end":[32,1]}},{"comments":null,"title":"monoidArray","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Monoid"],"Monoid"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[32,1],"name":"/home/r/purescript-stuff/bower_components/purescript-monoid/src/Data/Monoid.purs","end":[33,14]}}],"comments":"A `Monoid` is a `Semigroup` with a value `mempty`, which is both a\nleft and right unit for the associative operation `<>`:\n\n```text\nforall x. mempty <> x = x <> mempty = x\n```\n\n`Monoid`s are commonly used as the result of fold operations, where\n`<>` is used to combine individual results, and `mempty` gives the result\nof folding an empty collection of elements.\n","title":"Monoid","info":{"fundeps":[],"arguments":[["m",null]],"declType":"typeClass","superclasses":[{"constraintClass":[["Data","Semigroup"],"Semigroup"],"constraintArgs":[{"tag":"TypeVar","contents":"m"}],"constraintData":null}]},"sourceSpan":{"start":[20,1],"name":"/home/r/purescript-stuff/bower_components/purescript-monoid/src/Data/Monoid.purs","end":[21,14]}}]},{"moduleName":{"package":"purescript-monoid","item":["Data","Monoid","Additive"]},"declarations":[{"children":[{"comments":null,"title":"Additive","info":{"arguments":[{"tag":"TypeVar","contents":"a"}],"declType":"dataConstructor"},"sourceSpan":null},{"comments":null,"title":"newtypeAdditive","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Newtype"],"Newtype"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Monoid","Additive"],"Additive"]},{"tag":"TypeVar","contents":"a"}]}}]},{"tag":"TypeWildcard","contents":{"start":[20,57],"name":"/home/r/purescript-stuff/bower_components/purescript-monoid/src/Data/Monoid/Additive.purs","end":[20,58]}}]}},"sourceSpan":{"start":[20,1],"name":"/home/r/purescript-stuff/bower_components/purescript-monoid/src/Data/Monoid/Additive.purs","end":[20,58]}},{"comments":null,"title":"eqAdditive","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","Eq"],"Eq"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Eq"],"Eq"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Monoid","Additive"],"Additive"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[22,1],"name":"/home/r/purescript-stuff/bower_components/purescript-monoid/src/Data/Monoid/Additive.purs","end":[22,62]}},{"comments":null,"title":"ordAdditive","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","Ord"],"Ord"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Ord"],"Ord"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Monoid","Additive"],"Additive"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[24,1],"name":"/home/r/purescript-stuff/bower_components/purescript-monoid/src/Data/Monoid/Additive.purs","end":[24,65]}},{"comments":null,"title":"boundedAdditive","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","Bounded"],"Bounded"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Bounded"],"Bounded"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Monoid","Additive"],"Additive"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[26,1],"name":"/home/r/purescript-stuff/bower_components/purescript-monoid/src/Data/Monoid/Additive.purs","end":[26,77]}},{"comments":null,"title":"functorAdditive","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Functor"],"Functor"]},{"tag":"TypeConstructor","contents":[["Data","Monoid","Additive"],"Additive"]}]}},"sourceSpan":{"start":[28,1],"name":"/home/r/purescript-stuff/bower_components/purescript-monoid/src/Data/Monoid/Additive.purs","end":[29,38]}},{"comments":null,"title":"invariantAdditive","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Functor","Invariant"],"Invariant"]},{"tag":"TypeConstructor","contents":[["Data","Monoid","Additive"],"Additive"]}]}},"sourceSpan":{"start":[31,1],"name":"/home/r/purescript-stuff/bower_components/purescript-monoid/src/Data/Monoid/Additive.purs","end":[32,41]}},{"comments":null,"title":"applyAdditive","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Apply"],"Apply"]},{"tag":"TypeConstructor","contents":[["Data","Monoid","Additive"],"Additive"]}]}},"sourceSpan":{"start":[34,1],"name":"/home/r/purescript-stuff/bower_components/purescript-monoid/src/Data/Monoid/Additive.purs","end":[35,51]}},{"comments":null,"title":"applicativeAdditive","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Applicative"],"Applicative"]},{"tag":"TypeConstructor","contents":[["Data","Monoid","Additive"],"Additive"]}]}},"sourceSpan":{"start":[37,1],"name":"/home/r/purescript-stuff/bower_components/purescript-monoid/src/Data/Monoid/Additive.purs","end":[38,18]}},{"comments":null,"title":"bindAdditive","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Bind"],"Bind"]},{"tag":"TypeConstructor","contents":[["Data","Monoid","Additive"],"Additive"]}]}},"sourceSpan":{"start":[40,1],"name":"/home/r/purescript-stuff/bower_components/purescript-monoid/src/Data/Monoid/Additive.purs","end":[41,28]}},{"comments":null,"title":"monadAdditive","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad"],"Monad"]},{"tag":"TypeConstructor","contents":[["Data","Monoid","Additive"],"Additive"]}]}},"sourceSpan":{"start":[43,1],"name":"/home/r/purescript-stuff/bower_components/purescript-monoid/src/Data/Monoid/Additive.purs","end":[43,41]}},{"comments":null,"title":"extendAdditive","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Extend"],"Extend"]},{"tag":"TypeConstructor","contents":[["Data","Monoid","Additive"],"Additive"]}]}},"sourceSpan":{"start":[45,1],"name":"/home/r/purescript-stuff/bower_components/purescript-monoid/src/Data/Monoid/Additive.purs","end":[46,30]}},{"comments":null,"title":"comonadAdditive","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Comonad"],"Comonad"]},{"tag":"TypeConstructor","contents":[["Data","Monoid","Additive"],"Additive"]}]}},"sourceSpan":{"start":[48,1],"name":"/home/r/purescript-stuff/bower_components/purescript-monoid/src/Data/Monoid/Additive.purs","end":[49,19]}},{"comments":null,"title":"showAdditive","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","Show"],"Show"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Show"],"Show"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Monoid","Additive"],"Additive"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[51,1],"name":"/home/r/purescript-stuff/bower_components/purescript-monoid/src/Data/Monoid/Additive.purs","end":[54,1]}},{"comments":null,"title":"semigroupAdditive","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","Semiring"],"Semiring"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Semigroup"],"Semigroup"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Monoid","Additive"],"Additive"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[54,1],"name":"/home/r/purescript-stuff/bower_components/purescript-monoid/src/Data/Monoid/Additive.purs","end":[55,54]}},{"comments":null,"title":"monoidAdditive","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","Semiring"],"Semiring"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Monoid"],"Monoid"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Monoid","Additive"],"Additive"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[57,1],"name":"/home/r/purescript-stuff/bower_components/purescript-monoid/src/Data/Monoid/Additive.purs","end":[58,21]}}],"comments":"Monoid and semigroup for semirings under addition.\n\n``` purescript\nAdditive x <> Additive y == Additive (x + y)\nmempty :: Additive _ == Additive zero\n```\n","title":"Additive","info":{"declType":"data","dataDeclType":"newtype","typeArguments":[["a",null]]},"sourceSpan":{"start":[18,1],"name":"/home/r/purescript-stuff/bower_components/purescript-monoid/src/Data/Monoid/Additive.purs","end":[18,32]}}]},{"moduleName":{"package":"purescript-monoid","item":["Data","Monoid","Alternate"]},"declarations":[{"children":[{"comments":null,"title":"Alternate","info":{"arguments":[{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}}],"declType":"dataConstructor"},"sourceSpan":null},{"comments":null,"title":"newtypeAlternate","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Newtype"],"Newtype"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Monoid","Alternate"],"Alternate"]},{"tag":"TypeVar","contents":"f"}]},{"tag":"TypeVar","contents":"a"}]}}]},{"tag":"TypeWildcard","contents":{"start":[21,61],"name":"/home/r/purescript-stuff/bower_components/purescript-monoid/src/Data/Monoid/Alternate.purs","end":[21,62]}}]}},"sourceSpan":{"start":[21,1],"name":"/home/r/purescript-stuff/bower_components/purescript-monoid/src/Data/Monoid/Alternate.purs","end":[21,62]}},{"comments":null,"title":"eqAlternate","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","Eq"],"Eq"],"constraintArgs":[{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Eq"],"Eq"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Monoid","Alternate"],"Alternate"]},{"tag":"TypeVar","contents":"f"}]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[23,1],"name":"/home/r/purescript-stuff/bower_components/purescript-monoid/src/Data/Monoid/Alternate.purs","end":[23,70]}},{"comments":null,"title":"ordAlternate","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","Ord"],"Ord"],"constraintArgs":[{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Ord"],"Ord"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Monoid","Alternate"],"Alternate"]},{"tag":"TypeVar","contents":"f"}]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[25,1],"name":"/home/r/purescript-stuff/bower_components/purescript-monoid/src/Data/Monoid/Alternate.purs","end":[25,73]}},{"comments":null,"title":"boundedAlternate","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","Bounded"],"Bounded"],"constraintArgs":[{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Bounded"],"Bounded"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Monoid","Alternate"],"Alternate"]},{"tag":"TypeVar","contents":"f"}]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[27,1],"name":"/home/r/purescript-stuff/bower_components/purescript-monoid/src/Data/Monoid/Alternate.purs","end":[27,85]}},{"comments":null,"title":"functorAlternate","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","Functor"],"Functor"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Functor"],"Functor"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Monoid","Alternate"],"Alternate"]},{"tag":"TypeVar","contents":"f"}]}}]}},"sourceSpan":{"start":[29,1],"name":"/home/r/purescript-stuff/bower_components/purescript-monoid/src/Data/Monoid/Alternate.purs","end":[29,79]}},{"comments":null,"title":"invariantAlternate","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","Functor","Invariant"],"Invariant"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Functor","Invariant"],"Invariant"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Monoid","Alternate"],"Alternate"]},{"tag":"TypeVar","contents":"f"}]}}]}},"sourceSpan":{"start":[31,1],"name":"/home/r/purescript-stuff/bower_components/purescript-monoid/src/Data/Monoid/Alternate.purs","end":[31,85]}},{"comments":null,"title":"applyAlternate","info":{"declType":"instance","dependencies":[{"constraintClass":[["Control","Apply"],"Apply"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Apply"],"Apply"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Monoid","Alternate"],"Alternate"]},{"tag":"TypeVar","contents":"f"}]}}]}},"sourceSpan":{"start":[33,1],"name":"/home/r/purescript-stuff/bower_components/purescript-monoid/src/Data/Monoid/Alternate.purs","end":[33,73]}},{"comments":null,"title":"applicativeAlternate","info":{"declType":"instance","dependencies":[{"constraintClass":[["Control","Applicative"],"Applicative"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Applicative"],"Applicative"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Monoid","Alternate"],"Alternate"]},{"tag":"TypeVar","contents":"f"}]}}]}},"sourceSpan":{"start":[35,1],"name":"/home/r/purescript-stuff/bower_components/purescript-monoid/src/Data/Monoid/Alternate.purs","end":[35,91]}},{"comments":null,"title":"altAlternate","info":{"declType":"instance","dependencies":[{"constraintClass":[["Control","Alt"],"Alt"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Alt"],"Alt"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Monoid","Alternate"],"Alternate"]},{"tag":"TypeVar","contents":"f"}]}}]}},"sourceSpan":{"start":[37,1],"name":"/home/r/purescript-stuff/bower_components/purescript-monoid/src/Data/Monoid/Alternate.purs","end":[37,67]}},{"comments":null,"title":"plusAlternate","info":{"declType":"instance","dependencies":[{"constraintClass":[["Control","Plus"],"Plus"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Plus"],"Plus"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Monoid","Alternate"],"Alternate"]},{"tag":"TypeVar","contents":"f"}]}}]}},"sourceSpan":{"start":[39,1],"name":"/home/r/purescript-stuff/bower_components/purescript-monoid/src/Data/Monoid/Alternate.purs","end":[39,70]}},{"comments":null,"title":"alternativeAlternate","info":{"declType":"instance","dependencies":[{"constraintClass":[["Control","Alternative"],"Alternative"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Alternative"],"Alternative"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Monoid","Alternate"],"Alternate"]},{"tag":"TypeVar","contents":"f"}]}}]}},"sourceSpan":{"start":[41,1],"name":"/home/r/purescript-stuff/bower_components/purescript-monoid/src/Data/Monoid/Alternate.purs","end":[41,91]}},{"comments":null,"title":"bindAlternate","info":{"declType":"instance","dependencies":[{"constraintClass":[["Control","Bind"],"Bind"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Bind"],"Bind"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Monoid","Alternate"],"Alternate"]},{"tag":"TypeVar","contents":"f"}]}}]}},"sourceSpan":{"start":[43,1],"name":"/home/r/purescript-stuff/bower_components/purescript-monoid/src/Data/Monoid/Alternate.purs","end":[43,70]}},{"comments":null,"title":"monadAlternate","info":{"declType":"instance","dependencies":[{"constraintClass":[["Control","Monad"],"Monad"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad"],"Monad"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Monoid","Alternate"],"Alternate"]},{"tag":"TypeVar","contents":"f"}]}}]}},"sourceSpan":{"start":[45,1],"name":"/home/r/purescript-stuff/bower_components/purescript-monoid/src/Data/Monoid/Alternate.purs","end":[45,73]}},{"comments":null,"title":"extendAlternate","info":{"declType":"instance","dependencies":[{"constraintClass":[["Control","Extend"],"Extend"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Extend"],"Extend"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Monoid","Alternate"],"Alternate"]},{"tag":"TypeVar","contents":"f"}]}}]}},"sourceSpan":{"start":[47,1],"name":"/home/r/purescript-stuff/bower_components/purescript-monoid/src/Data/Monoid/Alternate.purs","end":[47,76]}},{"comments":null,"title":"comonadAlternate","info":{"declType":"instance","dependencies":[{"constraintClass":[["Control","Comonad"],"Comonad"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Comonad"],"Comonad"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Monoid","Alternate"],"Alternate"]},{"tag":"TypeVar","contents":"f"}]}}]}},"sourceSpan":{"start":[49,1],"name":"/home/r/purescript-stuff/bower_components/purescript-monoid/src/Data/Monoid/Alternate.purs","end":[49,79]}},{"comments":null,"title":"showAlternate","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","Show"],"Show"],"constraintArgs":[{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Show"],"Show"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Monoid","Alternate"],"Alternate"]},{"tag":"TypeVar","contents":"f"}]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[51,1],"name":"/home/r/purescript-stuff/bower_components/purescript-monoid/src/Data/Monoid/Alternate.purs","end":[54,1]}},{"comments":null,"title":"semigroupAlternate","info":{"declType":"instance","dependencies":[{"constraintClass":[["Control","Alt"],"Alt"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Semigroup"],"Semigroup"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Monoid","Alternate"],"Alternate"]},{"tag":"TypeVar","contents":"f"}]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[54,1],"name":"/home/r/purescript-stuff/bower_components/purescript-monoid/src/Data/Monoid/Alternate.purs","end":[55,59]}},{"comments":null,"title":"monoidAlternate","info":{"declType":"instance","dependencies":[{"constraintClass":[["Control","Plus"],"Plus"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Monoid"],"Monoid"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Monoid","Alternate"],"Alternate"]},{"tag":"TypeVar","contents":"f"}]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[57,1],"name":"/home/r/purescript-stuff/bower_components/purescript-monoid/src/Data/Monoid/Alternate.purs","end":[58,22]}}],"comments":"Monoid and semigroup instances corresponding to `Plus` and `Alt` instances\nfor `f`\n\n``` purescript\nAlternate fx <> Alternate fy == Alternate (fx <|> fy)\nmempty :: Alternate _ == Alternate empty\n```\n","title":"Alternate","info":{"declType":"data","dataDeclType":"newtype","typeArguments":[["f",null],["a",null]]},"sourceSpan":{"start":[19,1],"name":"/home/r/purescript-stuff/bower_components/purescript-monoid/src/Data/Monoid/Alternate.purs","end":[19,40]}}]},{"moduleName":{"package":"purescript-monoid","item":["Data","Monoid","Conj"]},"declarations":[{"children":[{"comments":null,"title":"Conj","info":{"arguments":[{"tag":"TypeVar","contents":"a"}],"declType":"dataConstructor"},"sourceSpan":null},{"comments":null,"title":"newtypeConj","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Newtype"],"Newtype"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Monoid","Conj"],"Conj"]},{"tag":"TypeVar","contents":"a"}]}}]},{"tag":"TypeWildcard","contents":{"start":[21,49],"name":"/home/r/purescript-stuff/bower_components/purescript-monoid/src/Data/Monoid/Conj.purs","end":[21,50]}}]}},"sourceSpan":{"start":[21,1],"name":"/home/r/purescript-stuff/bower_components/purescript-monoid/src/Data/Monoid/Conj.purs","end":[21,50]}},{"comments":null,"title":"eqConj","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","Eq"],"Eq"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Eq"],"Eq"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Monoid","Conj"],"Conj"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[23,1],"name":"/home/r/purescript-stuff/bower_components/purescript-monoid/src/Data/Monoid/Conj.purs","end":[23,54]}},{"comments":null,"title":"ordConj","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","Ord"],"Ord"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Ord"],"Ord"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Monoid","Conj"],"Conj"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[25,1],"name":"/home/r/purescript-stuff/bower_components/purescript-monoid/src/Data/Monoid/Conj.purs","end":[25,57]}},{"comments":null,"title":"boundedConj","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","Bounded"],"Bounded"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Bounded"],"Bounded"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Monoid","Conj"],"Conj"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[27,1],"name":"/home/r/purescript-stuff/bower_components/purescript-monoid/src/Data/Monoid/Conj.purs","end":[27,69]}},{"comments":null,"title":"functorConj","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Functor"],"Functor"]},{"tag":"TypeConstructor","contents":[["Data","Monoid","Conj"],"Conj"]}]}},"sourceSpan":{"start":[29,1],"name":"/home/r/purescript-stuff/bower_components/purescript-monoid/src/Data/Monoid/Conj.purs","end":[30,30]}},{"comments":null,"title":"invariantConj","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Functor","Invariant"],"Invariant"]},{"tag":"TypeConstructor","contents":[["Data","Monoid","Conj"],"Conj"]}]}},"sourceSpan":{"start":[32,1],"name":"/home/r/purescript-stuff/bower_components/purescript-monoid/src/Data/Monoid/Conj.purs","end":[33,33]}},{"comments":null,"title":"applyConj","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Apply"],"Apply"]},{"tag":"TypeConstructor","contents":[["Data","Monoid","Conj"],"Conj"]}]}},"sourceSpan":{"start":[35,1],"name":"/home/r/purescript-stuff/bower_components/purescript-monoid/src/Data/Monoid/Conj.purs","end":[36,39]}},{"comments":null,"title":"applicativeConj","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Applicative"],"Applicative"]},{"tag":"TypeConstructor","contents":[["Data","Monoid","Conj"],"Conj"]}]}},"sourceSpan":{"start":[38,1],"name":"/home/r/purescript-stuff/bower_components/purescript-monoid/src/Data/Monoid/Conj.purs","end":[39,14]}},{"comments":null,"title":"bindConj","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Bind"],"Bind"]},{"tag":"TypeConstructor","contents":[["Data","Monoid","Conj"],"Conj"]}]}},"sourceSpan":{"start":[41,1],"name":"/home/r/purescript-stuff/bower_components/purescript-monoid/src/Data/Monoid/Conj.purs","end":[42,24]}},{"comments":null,"title":"monadConj","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad"],"Monad"]},{"tag":"TypeConstructor","contents":[["Data","Monoid","Conj"],"Conj"]}]}},"sourceSpan":{"start":[44,1],"name":"/home/r/purescript-stuff/bower_components/purescript-monoid/src/Data/Monoid/Conj.purs","end":[44,33]}},{"comments":null,"title":"extendConj","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Extend"],"Extend"]},{"tag":"TypeConstructor","contents":[["Data","Monoid","Conj"],"Conj"]}]}},"sourceSpan":{"start":[46,1],"name":"/home/r/purescript-stuff/bower_components/purescript-monoid/src/Data/Monoid/Conj.purs","end":[47,26]}},{"comments":null,"title":"comonadConj","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Comonad"],"Comonad"]},{"tag":"TypeConstructor","contents":[["Data","Monoid","Conj"],"Conj"]}]}},"sourceSpan":{"start":[49,1],"name":"/home/r/purescript-stuff/bower_components/purescript-monoid/src/Data/Monoid/Conj.purs","end":[50,19]}},{"comments":null,"title":"showConj","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","Show"],"Show"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Show"],"Show"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Monoid","Conj"],"Conj"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[52,1],"name":"/home/r/purescript-stuff/bower_components/purescript-monoid/src/Data/Monoid/Conj.purs","end":[55,1]}},{"comments":null,"title":"semigroupConj","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","HeytingAlgebra"],"HeytingAlgebra"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Semigroup"],"Semigroup"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Monoid","Conj"],"Conj"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[55,1],"name":"/home/r/purescript-stuff/bower_components/purescript-monoid/src/Data/Monoid/Conj.purs","end":[56,45]}},{"comments":null,"title":"monoidConj","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","HeytingAlgebra"],"HeytingAlgebra"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Monoid"],"Monoid"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Monoid","Conj"],"Conj"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[58,1],"name":"/home/r/purescript-stuff/bower_components/purescript-monoid/src/Data/Monoid/Conj.purs","end":[59,19]}},{"comments":null,"title":"semiringConj","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","HeytingAlgebra"],"HeytingAlgebra"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Semiring"],"Semiring"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Monoid","Conj"],"Conj"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[61,1],"name":"/home/r/purescript-stuff/bower_components/purescript-monoid/src/Data/Monoid/Conj.purs","end":[65,41]}}],"comments":"Monoid under conjuntion.\n\n``` purescript\nConj x <> Conj y == Conj (x && y)\nmempty :: Conj _ == Conj top\n```\n","title":"Conj","info":{"declType":"data","dataDeclType":"newtype","typeArguments":[["a",null]]},"sourceSpan":{"start":[19,1],"name":"/home/r/purescript-stuff/bower_components/purescript-monoid/src/Data/Monoid/Conj.purs","end":[19,24]}}]},{"moduleName":{"package":"purescript-monoid","item":["Data","Monoid","Disj"]},"declarations":[{"children":[{"comments":null,"title":"Disj","info":{"arguments":[{"tag":"TypeVar","contents":"a"}],"declType":"dataConstructor"},"sourceSpan":null},{"comments":null,"title":"newtypeDisj","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Newtype"],"Newtype"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Monoid","Disj"],"Disj"]},{"tag":"TypeVar","contents":"a"}]}}]},{"tag":"TypeWildcard","contents":{"start":[21,49],"name":"/home/r/purescript-stuff/bower_components/purescript-monoid/src/Data/Monoid/Disj.purs","end":[21,50]}}]}},"sourceSpan":{"start":[21,1],"name":"/home/r/purescript-stuff/bower_components/purescript-monoid/src/Data/Monoid/Disj.purs","end":[21,50]}},{"comments":null,"title":"eqDisj","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","Eq"],"Eq"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Eq"],"Eq"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Monoid","Disj"],"Disj"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[23,1],"name":"/home/r/purescript-stuff/bower_components/purescript-monoid/src/Data/Monoid/Disj.purs","end":[23,54]}},{"comments":null,"title":"ordDisj","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","Ord"],"Ord"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Ord"],"Ord"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Monoid","Disj"],"Disj"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[25,1],"name":"/home/r/purescript-stuff/bower_components/purescript-monoid/src/Data/Monoid/Disj.purs","end":[25,57]}},{"comments":null,"title":"boundedDisj","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","Bounded"],"Bounded"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Bounded"],"Bounded"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Monoid","Disj"],"Disj"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[27,1],"name":"/home/r/purescript-stuff/bower_components/purescript-monoid/src/Data/Monoid/Disj.purs","end":[27,69]}},{"comments":null,"title":"functorDisj","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Functor"],"Functor"]},{"tag":"TypeConstructor","contents":[["Data","Monoid","Disj"],"Disj"]}]}},"sourceSpan":{"start":[29,1],"name":"/home/r/purescript-stuff/bower_components/purescript-monoid/src/Data/Monoid/Disj.purs","end":[30,30]}},{"comments":null,"title":"invariantDisj","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Functor","Invariant"],"Invariant"]},{"tag":"TypeConstructor","contents":[["Data","Monoid","Disj"],"Disj"]}]}},"sourceSpan":{"start":[32,1],"name":"/home/r/purescript-stuff/bower_components/purescript-monoid/src/Data/Monoid/Disj.purs","end":[33,33]}},{"comments":null,"title":"applyDisj","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Apply"],"Apply"]},{"tag":"TypeConstructor","contents":[["Data","Monoid","Disj"],"Disj"]}]}},"sourceSpan":{"start":[35,1],"name":"/home/r/purescript-stuff/bower_components/purescript-monoid/src/Data/Monoid/Disj.purs","end":[36,39]}},{"comments":null,"title":"applicativeDisj","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Applicative"],"Applicative"]},{"tag":"TypeConstructor","contents":[["Data","Monoid","Disj"],"Disj"]}]}},"sourceSpan":{"start":[38,1],"name":"/home/r/purescript-stuff/bower_components/purescript-monoid/src/Data/Monoid/Disj.purs","end":[39,14]}},{"comments":null,"title":"bindDisj","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Bind"],"Bind"]},{"tag":"TypeConstructor","contents":[["Data","Monoid","Disj"],"Disj"]}]}},"sourceSpan":{"start":[41,1],"name":"/home/r/purescript-stuff/bower_components/purescript-monoid/src/Data/Monoid/Disj.purs","end":[42,24]}},{"comments":null,"title":"monadDisj","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad"],"Monad"]},{"tag":"TypeConstructor","contents":[["Data","Monoid","Disj"],"Disj"]}]}},"sourceSpan":{"start":[44,1],"name":"/home/r/purescript-stuff/bower_components/purescript-monoid/src/Data/Monoid/Disj.purs","end":[44,33]}},{"comments":null,"title":"extendDisj","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Extend"],"Extend"]},{"tag":"TypeConstructor","contents":[["Data","Monoid","Disj"],"Disj"]}]}},"sourceSpan":{"start":[46,1],"name":"/home/r/purescript-stuff/bower_components/purescript-monoid/src/Data/Monoid/Disj.purs","end":[47,26]}},{"comments":null,"title":"comonadDisj","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Comonad"],"Comonad"]},{"tag":"TypeConstructor","contents":[["Data","Monoid","Disj"],"Disj"]}]}},"sourceSpan":{"start":[49,1],"name":"/home/r/purescript-stuff/bower_components/purescript-monoid/src/Data/Monoid/Disj.purs","end":[50,19]}},{"comments":null,"title":"showDisj","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","Show"],"Show"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Show"],"Show"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Monoid","Disj"],"Disj"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[52,1],"name":"/home/r/purescript-stuff/bower_components/purescript-monoid/src/Data/Monoid/Disj.purs","end":[55,1]}},{"comments":null,"title":"semigroupDisj","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","HeytingAlgebra"],"HeytingAlgebra"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Semigroup"],"Semigroup"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Monoid","Disj"],"Disj"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[55,1],"name":"/home/r/purescript-stuff/bower_components/purescript-monoid/src/Data/Monoid/Disj.purs","end":[56,45]}},{"comments":null,"title":"monoidDisj","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","HeytingAlgebra"],"HeytingAlgebra"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Monoid"],"Monoid"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Monoid","Disj"],"Disj"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[58,1],"name":"/home/r/purescript-stuff/bower_components/purescript-monoid/src/Data/Monoid/Disj.purs","end":[59,19]}},{"comments":null,"title":"semiringDisj","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","HeytingAlgebra"],"HeytingAlgebra"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Semiring"],"Semiring"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Monoid","Disj"],"Disj"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[61,1],"name":"/home/r/purescript-stuff/bower_components/purescript-monoid/src/Data/Monoid/Disj.purs","end":[65,41]}}],"comments":"Monoid under disjuntion.\n\n``` purescript\nDisj x <> Disj y == Disj (x || y)\nmempty :: Disj _ == Disj bottom\n```\n","title":"Disj","info":{"declType":"data","dataDeclType":"newtype","typeArguments":[["a",null]]},"sourceSpan":{"start":[19,1],"name":"/home/r/purescript-stuff/bower_components/purescript-monoid/src/Data/Monoid/Disj.purs","end":[19,24]}}]},{"moduleName":{"package":"purescript-monoid","item":["Data","Monoid","Dual"]},"declarations":[{"children":[{"comments":null,"title":"Dual","info":{"arguments":[{"tag":"TypeVar","contents":"a"}],"declType":"dataConstructor"},"sourceSpan":null},{"comments":null,"title":"newtypeDual","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Newtype"],"Newtype"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Monoid","Dual"],"Dual"]},{"tag":"TypeVar","contents":"a"}]}}]},{"tag":"TypeWildcard","contents":{"start":[20,49],"name":"/home/r/purescript-stuff/bower_components/purescript-monoid/src/Data/Monoid/Dual.purs","end":[20,50]}}]}},"sourceSpan":{"start":[20,1],"name":"/home/r/purescript-stuff/bower_components/purescript-monoid/src/Data/Monoid/Dual.purs","end":[20,50]}},{"comments":null,"title":"eqDual","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","Eq"],"Eq"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Eq"],"Eq"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Monoid","Dual"],"Dual"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[22,1],"name":"/home/r/purescript-stuff/bower_components/purescript-monoid/src/Data/Monoid/Dual.purs","end":[22,54]}},{"comments":null,"title":"ordDual","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","Ord"],"Ord"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Ord"],"Ord"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Monoid","Dual"],"Dual"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[24,1],"name":"/home/r/purescript-stuff/bower_components/purescript-monoid/src/Data/Monoid/Dual.purs","end":[24,57]}},{"comments":null,"title":"boundedDual","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","Bounded"],"Bounded"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Bounded"],"Bounded"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Monoid","Dual"],"Dual"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[26,1],"name":"/home/r/purescript-stuff/bower_components/purescript-monoid/src/Data/Monoid/Dual.purs","end":[26,69]}},{"comments":null,"title":"functorDual","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Functor"],"Functor"]},{"tag":"TypeConstructor","contents":[["Data","Monoid","Dual"],"Dual"]}]}},"sourceSpan":{"start":[28,1],"name":"/home/r/purescript-stuff/bower_components/purescript-monoid/src/Data/Monoid/Dual.purs","end":[29,30]}},{"comments":null,"title":"invariantDual","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Functor","Invariant"],"Invariant"]},{"tag":"TypeConstructor","contents":[["Data","Monoid","Dual"],"Dual"]}]}},"sourceSpan":{"start":[31,1],"name":"/home/r/purescript-stuff/bower_components/purescript-monoid/src/Data/Monoid/Dual.purs","end":[32,33]}},{"comments":null,"title":"applyDual","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Apply"],"Apply"]},{"tag":"TypeConstructor","contents":[["Data","Monoid","Dual"],"Dual"]}]}},"sourceSpan":{"start":[34,1],"name":"/home/r/purescript-stuff/bower_components/purescript-monoid/src/Data/Monoid/Dual.purs","end":[35,39]}},{"comments":null,"title":"applicativeDual","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Applicative"],"Applicative"]},{"tag":"TypeConstructor","contents":[["Data","Monoid","Dual"],"Dual"]}]}},"sourceSpan":{"start":[37,1],"name":"/home/r/purescript-stuff/bower_components/purescript-monoid/src/Data/Monoid/Dual.purs","end":[38,14]}},{"comments":null,"title":"bindDual","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Bind"],"Bind"]},{"tag":"TypeConstructor","contents":[["Data","Monoid","Dual"],"Dual"]}]}},"sourceSpan":{"start":[40,1],"name":"/home/r/purescript-stuff/bower_components/purescript-monoid/src/Data/Monoid/Dual.purs","end":[41,24]}},{"comments":null,"title":"monadDual","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad"],"Monad"]},{"tag":"TypeConstructor","contents":[["Data","Monoid","Dual"],"Dual"]}]}},"sourceSpan":{"start":[43,1],"name":"/home/r/purescript-stuff/bower_components/purescript-monoid/src/Data/Monoid/Dual.purs","end":[43,33]}},{"comments":null,"title":"extendDual","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Extend"],"Extend"]},{"tag":"TypeConstructor","contents":[["Data","Monoid","Dual"],"Dual"]}]}},"sourceSpan":{"start":[45,1],"name":"/home/r/purescript-stuff/bower_components/purescript-monoid/src/Data/Monoid/Dual.purs","end":[46,26]}},{"comments":null,"title":"comonadDual","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Comonad"],"Comonad"]},{"tag":"TypeConstructor","contents":[["Data","Monoid","Dual"],"Dual"]}]}},"sourceSpan":{"start":[48,1],"name":"/home/r/purescript-stuff/bower_components/purescript-monoid/src/Data/Monoid/Dual.purs","end":[49,19]}},{"comments":null,"title":"showDual","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","Show"],"Show"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Show"],"Show"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Monoid","Dual"],"Dual"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[51,1],"name":"/home/r/purescript-stuff/bower_components/purescript-monoid/src/Data/Monoid/Dual.purs","end":[54,1]}},{"comments":null,"title":"semigroupDual","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","Semigroup"],"Semigroup"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Semigroup"],"Semigroup"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Monoid","Dual"],"Dual"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[54,1],"name":"/home/r/purescript-stuff/bower_components/purescript-monoid/src/Data/Monoid/Dual.purs","end":[55,43]}},{"comments":null,"title":"monoidDual","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","Monoid"],"Monoid"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Monoid"],"Monoid"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Monoid","Dual"],"Dual"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[57,1],"name":"/home/r/purescript-stuff/bower_components/purescript-monoid/src/Data/Monoid/Dual.purs","end":[58,17]}}],"comments":"The dual of a monoid.\n\n``` purescript\nDual x <> Dual y == Dual (y <> x)\nmempty :: Dual _ == Dual mempty\n```\n","title":"Dual","info":{"declType":"data","dataDeclType":"newtype","typeArguments":[["a",null]]},"sourceSpan":{"start":[18,1],"name":"/home/r/purescript-stuff/bower_components/purescript-monoid/src/Data/Monoid/Dual.purs","end":[18,24]}}]},{"moduleName":{"package":"purescript-monoid","item":["Data","Monoid","Endo"]},"declarations":[{"children":[{"comments":null,"title":"Endo","info":{"arguments":[{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"a"}]}}],"declType":"dataConstructor"},"sourceSpan":null},{"comments":null,"title":"newtypeEndo","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Newtype"],"Newtype"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Monoid","Endo"],"Endo"]},{"tag":"TypeVar","contents":"a"}]}}]},{"tag":"TypeWildcard","contents":{"start":[18,49],"name":"/home/r/purescript-stuff/bower_components/purescript-monoid/src/Data/Monoid/Endo.purs","end":[18,50]}}]}},"sourceSpan":{"start":[18,1],"name":"/home/r/purescript-stuff/bower_components/purescript-monoid/src/Data/Monoid/Endo.purs","end":[18,50]}},{"comments":null,"title":"invariantEndo","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Functor","Invariant"],"Invariant"]},{"tag":"TypeConstructor","contents":[["Data","Monoid","Endo"],"Endo"]}]}},"sourceSpan":{"start":[20,1],"name":"/home/r/purescript-stuff/bower_components/purescript-monoid/src/Data/Monoid/Endo.purs","end":[21,47]}},{"comments":null,"title":"semigroupEndo","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Semigroup"],"Semigroup"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Monoid","Endo"],"Endo"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[23,1],"name":"/home/r/purescript-stuff/bower_components/purescript-monoid/src/Data/Monoid/Endo.purs","end":[24,44]}},{"comments":null,"title":"monoidEndo","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Monoid"],"Monoid"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Monoid","Endo"],"Endo"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[26,1],"name":"/home/r/purescript-stuff/bower_components/purescript-monoid/src/Data/Monoid/Endo.purs","end":[27,17]}}],"comments":"Monoid of endomorphisms under composition.\n\nComposes of functions of type `a -> a`:\n``` purescript\nEndo f <> Endo g == Endo (f <<< g)\nmempty :: Endo _ == Endo id\n```\n","title":"Endo","info":{"declType":"data","dataDeclType":"newtype","typeArguments":[["a",null]]},"sourceSpan":{"start":[16,1],"name":"/home/r/purescript-stuff/bower_components/purescript-monoid/src/Data/Monoid/Endo.purs","end":[16,31]}}]},{"moduleName":{"package":"purescript-monoid","item":["Data","Monoid","Multiplicative"]},"declarations":[{"children":[{"comments":null,"title":"Multiplicative","info":{"arguments":[{"tag":"TypeVar","contents":"a"}],"declType":"dataConstructor"},"sourceSpan":null},{"comments":null,"title":"newtypeMultiplicative","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Newtype"],"Newtype"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Monoid","Multiplicative"],"Multiplicative"]},{"tag":"TypeVar","contents":"a"}]}}]},{"tag":"TypeWildcard","contents":{"start":[20,69],"name":"/home/r/purescript-stuff/bower_components/purescript-monoid/src/Data/Monoid/Multiplicative.purs","end":[20,70]}}]}},"sourceSpan":{"start":[20,1],"name":"/home/r/purescript-stuff/bower_components/purescript-monoid/src/Data/Monoid/Multiplicative.purs","end":[20,70]}},{"comments":null,"title":"eqMultiplicative","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","Eq"],"Eq"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Eq"],"Eq"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Monoid","Multiplicative"],"Multiplicative"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[22,1],"name":"/home/r/purescript-stuff/bower_components/purescript-monoid/src/Data/Monoid/Multiplicative.purs","end":[22,74]}},{"comments":null,"title":"ordMultiplicative","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","Ord"],"Ord"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Ord"],"Ord"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Monoid","Multiplicative"],"Multiplicative"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[24,1],"name":"/home/r/purescript-stuff/bower_components/purescript-monoid/src/Data/Monoid/Multiplicative.purs","end":[24,77]}},{"comments":null,"title":"boundedMultiplicative","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","Bounded"],"Bounded"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Bounded"],"Bounded"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Monoid","Multiplicative"],"Multiplicative"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[26,1],"name":"/home/r/purescript-stuff/bower_components/purescript-monoid/src/Data/Monoid/Multiplicative.purs","end":[26,89]}},{"comments":null,"title":"functorMultiplicative","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Functor"],"Functor"]},{"tag":"TypeConstructor","contents":[["Data","Monoid","Multiplicative"],"Multiplicative"]}]}},"sourceSpan":{"start":[28,1],"name":"/home/r/purescript-stuff/bower_components/purescript-monoid/src/Data/Monoid/Multiplicative.purs","end":[29,50]}},{"comments":null,"title":"invariantMultiplicative","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Functor","Invariant"],"Invariant"]},{"tag":"TypeConstructor","contents":[["Data","Monoid","Multiplicative"],"Multiplicative"]}]}},"sourceSpan":{"start":[31,1],"name":"/home/r/purescript-stuff/bower_components/purescript-monoid/src/Data/Monoid/Multiplicative.purs","end":[32,53]}},{"comments":null,"title":"applyMultiplicative","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Apply"],"Apply"]},{"tag":"TypeConstructor","contents":[["Data","Monoid","Multiplicative"],"Multiplicative"]}]}},"sourceSpan":{"start":[34,1],"name":"/home/r/purescript-stuff/bower_components/purescript-monoid/src/Data/Monoid/Multiplicative.purs","end":[35,69]}},{"comments":null,"title":"applicativeMultiplicative","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Applicative"],"Applicative"]},{"tag":"TypeConstructor","contents":[["Data","Monoid","Multiplicative"],"Multiplicative"]}]}},"sourceSpan":{"start":[37,1],"name":"/home/r/purescript-stuff/bower_components/purescript-monoid/src/Data/Monoid/Multiplicative.purs","end":[38,24]}},{"comments":null,"title":"bindMultiplicative","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Bind"],"Bind"]},{"tag":"TypeConstructor","contents":[["Data","Monoid","Multiplicative"],"Multiplicative"]}]}},"sourceSpan":{"start":[40,1],"name":"/home/r/purescript-stuff/bower_components/purescript-monoid/src/Data/Monoid/Multiplicative.purs","end":[41,34]}},{"comments":null,"title":"monadMultiplicative","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad"],"Monad"]},{"tag":"TypeConstructor","contents":[["Data","Monoid","Multiplicative"],"Multiplicative"]}]}},"sourceSpan":{"start":[43,1],"name":"/home/r/purescript-stuff/bower_components/purescript-monoid/src/Data/Monoid/Multiplicative.purs","end":[43,53]}},{"comments":null,"title":"extendMultiplicative","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Extend"],"Extend"]},{"tag":"TypeConstructor","contents":[["Data","Monoid","Multiplicative"],"Multiplicative"]}]}},"sourceSpan":{"start":[45,1],"name":"/home/r/purescript-stuff/bower_components/purescript-monoid/src/Data/Monoid/Multiplicative.purs","end":[46,36]}},{"comments":null,"title":"comonadMultiplicative","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Comonad"],"Comonad"]},{"tag":"TypeConstructor","contents":[["Data","Monoid","Multiplicative"],"Multiplicative"]}]}},"sourceSpan":{"start":[48,1],"name":"/home/r/purescript-stuff/bower_components/purescript-monoid/src/Data/Monoid/Multiplicative.purs","end":[49,19]}},{"comments":null,"title":"showMultiplicative","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","Show"],"Show"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Show"],"Show"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Monoid","Multiplicative"],"Multiplicative"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[51,1],"name":"/home/r/purescript-stuff/bower_components/purescript-monoid/src/Data/Monoid/Multiplicative.purs","end":[54,1]}},{"comments":null,"title":"semigroupMultiplicative","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","Semiring"],"Semiring"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Semigroup"],"Semigroup"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Monoid","Multiplicative"],"Multiplicative"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[54,1],"name":"/home/r/purescript-stuff/bower_components/purescript-monoid/src/Data/Monoid/Multiplicative.purs","end":[55,72]}},{"comments":null,"title":"monoidMultiplicative","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","Semiring"],"Semiring"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Monoid"],"Monoid"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Monoid","Multiplicative"],"Multiplicative"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[57,1],"name":"/home/r/purescript-stuff/bower_components/purescript-monoid/src/Data/Monoid/Multiplicative.purs","end":[58,27]}}],"comments":"Monoid and semigroup for semirings under multiplication.\n\n``` purescript\nMultiplicative x <> Multiplicative y == Multiplicative (x * y)\nmempty :: Multiplicative _ == Multiplicative one\n```\n","title":"Multiplicative","info":{"declType":"data","dataDeclType":"newtype","typeArguments":[["a",null]]},"sourceSpan":{"start":[18,1],"name":"/home/r/purescript-stuff/bower_components/purescript-monoid/src/Data/Monoid/Multiplicative.purs","end":[18,44]}}]},{"moduleName":{"package":"purescript-newtype","item":["Data","Newtype"]},"declarations":[{"children":[{"comments":null,"title":"wrap","info":{"declType":"typeClassMember","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"t"}]}},"sourceSpan":null},{"comments":null,"title":"unwrap","info":{"declType":"typeClassMember","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"t"}]},{"tag":"TypeVar","contents":"a"}]}},"sourceSpan":null}],"comments":"A type class for `newtype`s to enable convenient wrapping and unwrapping,\nand the use of the other functions in this module.\n\nThe compiler can derive instances of `Newtype` automatically:\n\n``` purescript\nnewtype EmailAddress = EmailAddress String\n\nderive instance newtypeEmailAddress :: Newtype EmailAddress _\n```\n\nNote that deriving for `Newtype` instances requires that the type be\ndefined as `newtype` rather than `data` declaration (even if the `data`\nstructurally fits the rules of a `newtype`), and the use of a wildcard for\nthe wrapped type.\n\nInstances must obey the following laws:\n``` purescript\nunwrap <<< wrap = id\nwrap <<< unwrap = id\n```\n","title":"Newtype","info":{"fundeps":[[["t"],["a"]]],"arguments":[["t",null],["a",null]],"declType":"typeClass","superclasses":[]},"sourceSpan":{"start":[27,1],"name":"/home/r/purescript-stuff/bower_components/purescript-newtype/src/Data/Newtype.purs","end":[29,19]}},{"children":[],"comments":"Much like `under2`, but where the lifted binary function operates on\nvalues in a `Functor`.\n","title":"underF2","info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["s",{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["t",{"tag":"ForAll","contents":["g",{"tag":"ForAll","contents":["f",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Functor"],"Functor"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}],"constraintData":null},{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Functor"],"Functor"],"constraintArgs":[{"tag":"TypeVar","contents":"g"}],"constraintData":null},{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Newtype"],"Newtype"],"constraintArgs":[{"tag":"TypeVar","contents":"t"},{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Newtype"],"Newtype"],"constraintArgs":[{"tag":"TypeVar","contents":"s"},{"tag":"TypeVar","contents":"b"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"t"}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"t"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"t"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"g"},{"tag":"TypeVar","contents":"s"}]}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"g"},{"tag":"TypeVar","contents":"b"}]}]}]}]}]}]}]}]}]},null]},null]},null]},null]},null]},null]}},"sourceSpan":{"start":[250,1],"name":"/home/r/purescript-stuff/bower_components/purescript-newtype/src/Data/Newtype.purs","end":[260,9]}},{"children":[],"comments":"Much like `under`, but where the lifted function operates on values in a\n`Functor`:\n\n``` purescript\nnewtype EmailAddress = EmailAddress String\nderive instance newtypeEmailAddress :: Newtype EmailAddress _\n\nisValid :: EmailAddress -> Boolean\nisValid x = false -- imagine a slightly less strict predicate here\n\nfindValidEmailString :: Array String -> Maybe String\nfindValidEmailString = underF EmailAddress (Foldable.find isValid)\n```\n\nThe above example also demonstrates that the functor type is polymorphic\nhere too, the input is an `Array` but the result is a `Maybe`.\n","title":"underF","info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["s",{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["t",{"tag":"ForAll","contents":["g",{"tag":"ForAll","contents":["f",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Functor"],"Functor"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}],"constraintData":null},{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Functor"],"Functor"],"constraintArgs":[{"tag":"TypeVar","contents":"g"}],"constraintData":null},{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Newtype"],"Newtype"],"constraintArgs":[{"tag":"TypeVar","contents":"t"},{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Newtype"],"Newtype"],"constraintArgs":[{"tag":"TypeVar","contents":"s"},{"tag":"TypeVar","contents":"b"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"t"}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"t"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"g"},{"tag":"TypeVar","contents":"s"}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"g"},{"tag":"TypeVar","contents":"b"}]}]}]}]}]}]}]}]},null]},null]},null]},null]},null]},null]}},"sourceSpan":{"start":[183,1],"name":"/home/r/purescript-stuff/bower_components/purescript-newtype/src/Data/Newtype.purs","end":[192,9]}},{"children":[],"comments":"The opposite of `over2`: lowers a binary function that operates on `Newtype`d\nvalues to operate on the wrapped value instead.\n","title":"under2","info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["s",{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["t",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Newtype"],"Newtype"],"constraintArgs":[{"tag":"TypeVar","contents":"t"},{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Newtype"],"Newtype"],"constraintArgs":[{"tag":"TypeVar","contents":"s"},{"tag":"TypeVar","contents":"b"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"t"}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"t"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"t"}]},{"tag":"TypeVar","contents":"s"}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]}]}]}]}]},null]},null]},null]},null]}},"sourceSpan":{"start":[237,1],"name":"/home/r/purescript-stuff/bower_components/purescript-newtype/src/Data/Newtype.purs","end":[245,7]}},{"children":[],"comments":"The opposite of `over`: lowers a function that operates on `Newtype`d\nvalues to operate on the wrapped value instead.\n\n``` purescript\nnewtype Degrees = Degrees Number\nderive instance newtypeDegrees :: Newtype Degrees _\n\nnewtype NormalDegrees = NormalDegrees Number\nderive instance newtypeNormalDegrees :: Newtype NormalDegrees _\n\nnormaliseDegrees :: Degrees -> NormalDegrees\nnormaliseDegrees (Degrees deg) = NormalDegrees (deg % 360.0)\n\nasNormalDegrees :: Number -> Number\nasNormalDegrees = under Degrees normaliseDegrees\n```\n\nAs with `over` the `Newtype` is polymorphic, as illustrated in the example\nabove - both `Degrees` and `NormalDegrees` are instances of `Newtype`,\nso even though `normaliseDegrees` changes the result type we can still put\na `Number` in and get a `Number` out via `under`.\n","title":"under","info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["s",{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["t",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Newtype"],"Newtype"],"constraintArgs":[{"tag":"TypeVar","contents":"t"},{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Newtype"],"Newtype"],"constraintArgs":[{"tag":"TypeVar","contents":"s"},{"tag":"TypeVar","contents":"b"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"t"}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"t"}]},{"tag":"TypeVar","contents":"s"}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]}]}]}]},null]},null]},null]},null]}},"sourceSpan":{"start":[157,1],"name":"/home/r/purescript-stuff/bower_components/purescript-newtype/src/Data/Newtype.purs","end":[164,7]}},{"children":[],"comments":"Much like `over2`, but where the lifted binary function operates on\nvalues in a `Functor`.\n","title":"overF2","info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["s",{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["t",{"tag":"ForAll","contents":["g",{"tag":"ForAll","contents":["f",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Functor"],"Functor"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}],"constraintData":null},{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Functor"],"Functor"],"constraintArgs":[{"tag":"TypeVar","contents":"g"}],"constraintData":null},{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Newtype"],"Newtype"],"constraintArgs":[{"tag":"TypeVar","contents":"t"},{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Newtype"],"Newtype"],"constraintArgs":[{"tag":"TypeVar","contents":"s"},{"tag":"TypeVar","contents":"b"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"t"}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"g"},{"tag":"TypeVar","contents":"b"}]}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"t"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"t"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"g"},{"tag":"TypeVar","contents":"s"}]}]}]}]}]}]}]}]}]},null]},null]},null]},null]},null]},null]}},"sourceSpan":{"start":[222,1],"name":"/home/r/purescript-stuff/bower_components/purescript-newtype/src/Data/Newtype.purs","end":[232,9]}},{"children":[],"comments":"Much like `over`, but where the lifted function operates on values in a\n`Functor`:\n\n``` purescript\nfindLabel :: String -> Array Label -> Maybe Label\nfindLabel s = overF Label (Foldable.find (_ == s))\n```\n\nThe above example also demonstrates that the functor type is polymorphic\nhere too, the input is an `Array` but the result is a `Maybe`.\n","title":"overF","info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["s",{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["t",{"tag":"ForAll","contents":["g",{"tag":"ForAll","contents":["f",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Functor"],"Functor"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}],"constraintData":null},{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Functor"],"Functor"],"constraintArgs":[{"tag":"TypeVar","contents":"g"}],"constraintData":null},{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Newtype"],"Newtype"],"constraintArgs":[{"tag":"TypeVar","contents":"t"},{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Newtype"],"Newtype"],"constraintArgs":[{"tag":"TypeVar","contents":"s"},{"tag":"TypeVar","contents":"b"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"t"}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"g"},{"tag":"TypeVar","contents":"b"}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"t"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"g"},{"tag":"TypeVar","contents":"s"}]}]}]}]}]}]}]}]},null]},null]},null]},null]},null]},null]}},"sourceSpan":{"start":[124,1],"name":"/home/r/purescript-stuff/bower_components/purescript-newtype/src/Data/Newtype.purs","end":[133,9]}},{"children":[],"comments":"Lifts a binary function to operate over newtypes.\n\n``` purescript\nnewtype Meter = Meter Int\nderive newtype instance newtypeMeter :: Newtype Meter _\nnewtype SquareMeter = SquareMeter Int\nderive newtype instance newtypeSquareMeter :: Newtype SquareMeter _\n\narea :: Meter -> Meter -> SquareMeter\narea = over2 Meter (*)\n```\n\nThe above example also demonstrates that the return type is polymorphic\nhere too.\n","title":"over2","info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["s",{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["t",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Newtype"],"Newtype"],"constraintArgs":[{"tag":"TypeVar","contents":"t"},{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Newtype"],"Newtype"],"constraintArgs":[{"tag":"TypeVar","contents":"s"},{"tag":"TypeVar","contents":"b"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"t"}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"t"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"t"}]},{"tag":"TypeVar","contents":"s"}]}]}]}]}]}]},null]},null]},null]},null]}},"sourceSpan":{"start":[209,1],"name":"/home/r/purescript-stuff/bower_components/purescript-newtype/src/Data/Newtype.purs","end":[217,7]}},{"children":[],"comments":"Lifts a function operate over newtypes. This can be used to lift a\nfunction to manipulate the contents of a single newtype, somewhat like\n`map` does for a `Functor`:\n\n``` purescript\nnewtype Label = Label String\nderive instance newtypeLabel :: Newtype Label _\n\ntoUpperLabel :: Label -> Label\ntoUpperLabel = over Label String.toUpper\n```\n\nBut the result newtype is polymorphic, meaning the result can be returned\nas an alternative newtype:\n\n``` purescript\nnewtype UppercaseLabel = UppercaseLabel String\nderive instance newtypeUppercaseLabel :: Newtype UppercaseLabel _\n\ntoUpperLabel' :: Label -> UppercaseLabel\ntoUpperLabel' = over Label String.toUpper\n```\n","title":"over","info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["s",{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["t",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Newtype"],"Newtype"],"constraintArgs":[{"tag":"TypeVar","contents":"t"},{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Newtype"],"Newtype"],"constraintArgs":[{"tag":"TypeVar","contents":"s"},{"tag":"TypeVar","contents":"b"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"t"}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"t"}]},{"tag":"TypeVar","contents":"s"}]}]}]}]}]},null]},null]},null]},null]}},"sourceSpan":{"start":[104,1],"name":"/home/r/purescript-stuff/bower_components/purescript-newtype/src/Data/Newtype.purs","end":[111,7]}},{"children":[],"comments":"This combinator is for when you have a higher order function that you want\nto use in the context of some newtype - `foldMap` being a common example:\n\n``` purescript\nala Additive foldMap [1,2,3,4] -- 10\nala Multiplicative foldMap [1,2,3,4] -- 24\nala Conj foldMap [true, false] -- false\nala Disj foldMap [true, false] -- true\n```\n","title":"ala","info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["s",{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["t",{"tag":"ForAll","contents":["f",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Functor"],"Functor"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}],"constraintData":null},{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Newtype"],"Newtype"],"constraintArgs":[{"tag":"TypeVar","contents":"t"},{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Newtype"],"Newtype"],"constraintArgs":[{"tag":"TypeVar","contents":"s"},{"tag":"TypeVar","contents":"b"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"t"}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeVar","contents":"s"}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"t"}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}]}]}]}]}]},null]},null]},null]},null]},null]}},"sourceSpan":{"start":[49,1],"name":"/home/r/purescript-stuff/bower_components/purescript-newtype/src/Data/Newtype.purs","end":[56,9]}}]},{"moduleName":{"package":"purescript-contravariant","item":["Data","Op"]},"declarations":[{"children":[{"comments":null,"title":"Op","info":{"arguments":[{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeVar","contents":"a"}]}}],"declType":"dataConstructor"},"sourceSpan":null},{"comments":null,"title":"newtypeOp","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Newtype"],"Newtype"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Op"],"Op"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]},{"tag":"TypeWildcard","contents":{"start":[11,47],"name":"/home/r/purescript-stuff/bower_components/purescript-contravariant/src/Data/Op.purs","end":[11,48]}}]}},"sourceSpan":{"start":[11,1],"name":"/home/r/purescript-stuff/bower_components/purescript-contravariant/src/Data/Op.purs","end":[11,48]}},{"comments":null,"title":"semigroupoidOp","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Semigroupoid"],"Semigroupoid"]},{"tag":"TypeConstructor","contents":[["Data","Op"],"Op"]}]}},"sourceSpan":{"start":[13,1],"name":"/home/r/purescript-stuff/bower_components/purescript-contravariant/src/Data/Op.purs","end":[14,43]}},{"comments":null,"title":"categoryOp","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Category"],"Category"]},{"tag":"TypeConstructor","contents":[["Data","Op"],"Op"]}]}},"sourceSpan":{"start":[16,1],"name":"/home/r/purescript-stuff/bower_components/purescript-contravariant/src/Data/Op.purs","end":[17,13]}},{"comments":null,"title":"contravariantOp","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Functor","Contravariant"],"Contravariant"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Op"],"Op"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[19,1],"name":"/home/r/purescript-stuff/bower_components/purescript-contravariant/src/Data/Op.purs","end":[20,30]}}],"comments":"The opposite of the function category.\n","title":"Op","info":{"declType":"data","dataDeclType":"newtype","typeArguments":[["a",null],["b",null]]},"sourceSpan":{"start":[9,1],"name":"/home/r/purescript-stuff/bower_components/purescript-contravariant/src/Data/Op.purs","end":[9,29]}}]},{"moduleName":{"package":"purescript-prelude","item":["Data","Ord"]},"declarations":[{"children":[{"comments":null,"title":"compare1","info":{"declType":"typeClassMember","type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Ord"],"Ord"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeConstructor","contents":[["Data","Ordering"],"Ordering"]}]}]}]},null]}},"sourceSpan":null},{"comments":null,"title":"ord1Array","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Ord"],"Ord1"]},{"tag":"TypeConstructor","contents":[["Prim"],"Array"]}]}},"sourceSpan":{"start":[170,1],"name":"/home/r/purescript-stuff/bower_components/purescript-prelude/src/Data/Ord.purs","end":[171,14]}}],"comments":"The `Ord1` type class represents totally ordered type constructors.\n","title":"Ord1","info":{"fundeps":[],"arguments":[["f",null]],"declType":"typeClass","superclasses":[{"constraintClass":[["Data","Eq"],"Eq1"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}],"constraintData":null}]},"sourceSpan":{"start":[167,1],"name":"/home/r/purescript-stuff/bower_components/purescript-prelude/src/Data/Ord.purs","end":[168,56]}},{"children":[],"comments":"The sign function; always evaluates to either `one` or `negate one`. For\nany `x`, we should have `signum x * abs x == x`.\n","title":"signum","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Ord"],"Ord"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Ring"],"Ring"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"a"}]}]}]},null]}},"sourceSpan":{"start":[163,1],"name":"/home/r/purescript-stuff/bower_components/purescript-prelude/src/Data/Ord.purs","end":[163,46]}},{"children":[],"comments":"The absolute value function. `abs x` is defined as `if x >= zero then x\nelse negate x`.\n","title":"abs","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Ord"],"Ord"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Ring"],"Ring"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"a"}]}]}]},null]}},"sourceSpan":{"start":[158,1],"name":"/home/r/purescript-stuff/bower_components/purescript-prelude/src/Data/Ord.purs","end":[158,43]}}]},{"moduleName":{"package":"purescript-orders","item":["Data","Ord","Max"]},"declarations":[{"children":[{"comments":null,"title":"Max","info":{"arguments":[{"tag":"TypeVar","contents":"a"}],"declType":"dataConstructor"},"sourceSpan":null},{"comments":null,"title":"newtypeMax","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Newtype"],"Newtype"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Ord","Max"],"Max"]},{"tag":"TypeVar","contents":"a"}]}}]},{"tag":"TypeWildcard","contents":{"start":[16,47],"name":"/home/r/purescript-stuff/bower_components/purescript-orders/src/Data/Ord/Max.purs","end":[16,48]}}]}},"sourceSpan":{"start":[16,1],"name":"/home/r/purescript-stuff/bower_components/purescript-orders/src/Data/Ord/Max.purs","end":[16,48]}},{"comments":null,"title":"eqMax","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","Eq"],"Eq"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Eq"],"Eq"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Ord","Max"],"Max"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[18,1],"name":"/home/r/purescript-stuff/bower_components/purescript-orders/src/Data/Ord/Max.purs","end":[18,52]}},{"comments":null,"title":"ordMax","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","Ord"],"Ord"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Ord"],"Ord"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Ord","Max"],"Max"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[20,1],"name":"/home/r/purescript-stuff/bower_components/purescript-orders/src/Data/Ord/Max.purs","end":[21,40]}},{"comments":null,"title":"semigroupMax","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","Ord"],"Ord"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Semigroup"],"Semigroup"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Ord","Max"],"Max"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[23,1],"name":"/home/r/purescript-stuff/bower_components/purescript-orders/src/Data/Ord/Max.purs","end":[24,41]}},{"comments":null,"title":"monoidMax","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","Bounded"],"Bounded"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Monoid"],"Monoid"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Ord","Max"],"Max"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[26,1],"name":"/home/r/purescript-stuff/bower_components/purescript-orders/src/Data/Ord/Max.purs","end":[27,22]}},{"comments":null,"title":"showMax","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","Show"],"Show"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Show"],"Show"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Ord","Max"],"Max"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[29,1],"name":"/home/r/purescript-stuff/bower_components/purescript-orders/src/Data/Ord/Max.purs","end":[30,39]}}],"comments":"Provides a `Semigroup` based on the `max` function. If the type has a\n`Bounded` instance, then a `Monoid` instance is provided too. For example:\n\n    unwrap (Max 5 <> Max 6) = 6\n    mempty :: Max Ordering = Max LT\n\n","title":"Max","info":{"declType":"data","dataDeclType":"newtype","typeArguments":[["a",null]]},"sourceSpan":{"start":[14,1],"name":"/home/r/purescript-stuff/bower_components/purescript-orders/src/Data/Ord/Max.purs","end":[14,22]}}]},{"moduleName":{"package":"purescript-orders","item":["Data","Ord","Min"]},"declarations":[{"children":[{"comments":null,"title":"Min","info":{"arguments":[{"tag":"TypeVar","contents":"a"}],"declType":"dataConstructor"},"sourceSpan":null},{"comments":null,"title":"newtypeMin","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Newtype"],"Newtype"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Ord","Min"],"Min"]},{"tag":"TypeVar","contents":"a"}]}}]},{"tag":"TypeWildcard","contents":{"start":[16,47],"name":"/home/r/purescript-stuff/bower_components/purescript-orders/src/Data/Ord/Min.purs","end":[16,48]}}]}},"sourceSpan":{"start":[16,1],"name":"/home/r/purescript-stuff/bower_components/purescript-orders/src/Data/Ord/Min.purs","end":[16,48]}},{"comments":null,"title":"eqMin","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","Eq"],"Eq"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Eq"],"Eq"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Ord","Min"],"Min"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[18,1],"name":"/home/r/purescript-stuff/bower_components/purescript-orders/src/Data/Ord/Min.purs","end":[18,52]}},{"comments":null,"title":"ordMin","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","Ord"],"Ord"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Ord"],"Ord"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Ord","Min"],"Min"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[20,1],"name":"/home/r/purescript-stuff/bower_components/purescript-orders/src/Data/Ord/Min.purs","end":[21,40]}},{"comments":null,"title":"semigroupMin","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","Ord"],"Ord"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Semigroup"],"Semigroup"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Ord","Min"],"Min"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[23,1],"name":"/home/r/purescript-stuff/bower_components/purescript-orders/src/Data/Ord/Min.purs","end":[24,41]}},{"comments":null,"title":"monoidMin","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","Bounded"],"Bounded"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Monoid"],"Monoid"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Ord","Min"],"Min"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[26,1],"name":"/home/r/purescript-stuff/bower_components/purescript-orders/src/Data/Ord/Min.purs","end":[27,19]}},{"comments":null,"title":"showMin","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","Show"],"Show"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Show"],"Show"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Ord","Min"],"Min"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[29,1],"name":"/home/r/purescript-stuff/bower_components/purescript-orders/src/Data/Ord/Min.purs","end":[30,39]}}],"comments":"Provides a `Semigroup` based on the `min` function. If the type has a\n`Bounded` instance, then a `Monoid` instance is provided too. For example:\n\n    unwrap (Min 5 <> Min 6) = 5\n    mempty :: Min Ordering = Min GT\n\n","title":"Min","info":{"declType":"data","dataDeclType":"newtype","typeArguments":[["a",null]]},"sourceSpan":{"start":[14,1],"name":"/home/r/purescript-stuff/bower_components/purescript-orders/src/Data/Ord/Min.purs","end":[14,22]}}]},{"moduleName":{"package":"purescript-profunctor","item":["Data","Profunctor"]},"declarations":[{"children":[{"comments":null,"title":"dimap","info":{"declType":"typeClassMember","type":{"tag":"ForAll","contents":["d",{"tag":"ForAll","contents":["c",{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"c"}]},{"tag":"TypeVar","contents":"d"}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"p"},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeVar","contents":"c"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"p"},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"d"}]}]}]}]},null]},null]},null]},null]}},"sourceSpan":null},{"comments":null,"title":"profunctorFn","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Profunctor"],"Profunctor"]},{"tag":"TypeConstructor","contents":[["Prim"],"Function"]}]}},"sourceSpan":{"start":[43,1],"name":"/home/r/purescript-stuff/bower_components/purescript-profunctor/src/Data/Profunctor.purs","end":[44,39]}}],"comments":"A `Profunctor` is a `Functor` from the pair category `(Type^op, Type)`\nto `Type`.\n\nIn other words, a `Profunctor` is a type constructor of two type\narguments, which is contravariant in its first argument and covariant\nin its second argument.\n\nThe `dimap` function can be used to map functions over both arguments\nsimultaneously.\n\nA straightforward example of a profunctor is the function arrow `(->)`.\n\nLaws:\n\n- Identity: `dimap id id = id`\n- Composition: `dimap f1 g1 <<< dimap f2 g2 = dimap (f1 >>> f2) (g1 <<< g2)`\n","title":"Profunctor","info":{"fundeps":[],"arguments":[["p",null]],"declType":"typeClass","superclasses":[]},"sourceSpan":{"start":[22,1],"name":"/home/r/purescript-stuff/bower_components/purescript-profunctor/src/Data/Profunctor.purs","end":[23,66]}},{"children":[],"comments":"Lift a pure function into any `Profunctor` which is also a `Category`.\n","title":"arr","info":{"declType":"value","type":{"tag":"ForAll","contents":["p",{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Control","Category"],"Category"],"constraintArgs":[{"tag":"TypeVar","contents":"p"}],"constraintData":null},{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Profunctor"],"Profunctor"],"constraintArgs":[{"tag":"TypeVar","contents":"p"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"p"},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]}]}]},null]},null]},null]}},"sourceSpan":{"start":[34,1],"name":"/home/r/purescript-stuff/bower_components/purescript-profunctor/src/Data/Profunctor.purs","end":[34,69]}}]},{"moduleName":{"package":"purescript-profunctor","item":["Data","Profunctor","Choice"]},"declarations":[{"children":[{"comments":null,"title":"left","info":{"declType":"typeClassMember","type":{"tag":"ForAll","contents":["c",{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"p"},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"p"},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Either"],"Either"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"c"}]}}]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Either"],"Either"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeVar","contents":"c"}]}}]}]},null]},null]},null]}},"sourceSpan":null},{"comments":null,"title":"right","info":{"declType":"typeClassMember","type":{"tag":"ForAll","contents":["c",{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"p"},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeVar","contents":"c"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"p"},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Either"],"Either"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Either"],"Either"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"c"}]}}]}]},null]},null]},null]}},"sourceSpan":null},{"comments":null,"title":"choiceFn","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Profunctor","Choice"],"Choice"]},{"tag":"TypeConstructor","contents":[["Prim"],"Function"]}]}},"sourceSpan":{"start":[32,1],"name":"/home/r/purescript-stuff/bower_components/purescript-profunctor/src/Data/Profunctor/Choice.purs","end":[35,16]}}],"comments":"The `Choice` class extends `Profunctor` with combinators for working with\nsum types.\n\n`left` and `right` lift values in a `Profunctor` to act on the `Left` and\n`Right` components of a sum, respectively.\n\nLooking at `Choice` through the intuition of inputs and outputs\nyields the following type signature:\n```\nleft ::  forall input output a. p input output -> p (Either input a) (Either output a)\nright :: forall input output a. p input output -> p (Either a input) (Either a output)\n```\nIf we specialize the profunctor `p` to the `function` arrow, we get the following type\nsignatures:\n```\nleft ::  forall input output a. (input -> output) -> (Either input a) -> (Either output a)\nright :: forall input output a. (input -> output) -> (Either a input) -> (Either a output)\n```\nWhen the `profunctor` is `Function` application, `left` allows you to map a function over the\nleft side of an `Either`, and `right` maps it over the right side (same as `map` would do).\n","title":"Choice","info":{"fundeps":[],"arguments":[["p",null]],"declType":"typeClass","superclasses":[{"constraintClass":[["Data","Profunctor"],"Profunctor"],"constraintArgs":[{"tag":"TypeVar","contents":"p"}],"constraintData":null}]},"sourceSpan":{"start":[28,1],"name":"/home/r/purescript-stuff/bower_components/purescript-profunctor/src/Data/Profunctor/Choice.purs","end":[30,62]}},{"children":[],"comments":null,"title":"(|||)","info":{"declType":"alias","alias":[["Data","Profunctor","Choice"],{"Right":{"Left":{"Ident":"fanin"}}}],"fixity":{"associativity":"infixr","precedence":2}},"sourceSpan":{"start":[86,1],"name":"/home/r/purescript-stuff/bower_components/purescript-profunctor/src/Data/Profunctor/Choice.purs","end":[86,19]}},{"children":[],"comments":null,"title":"(+++)","info":{"declType":"alias","alias":[["Data","Profunctor","Choice"],{"Right":{"Left":{"Ident":"splitChoice"}}}],"fixity":{"associativity":"infixr","precedence":2}},"sourceSpan":{"start":[56,1],"name":"/home/r/purescript-stuff/bower_components/purescript-profunctor/src/Data/Profunctor/Choice.purs","end":[56,28]}}]},{"moduleName":{"package":"purescript-profunctor","item":["Data","Profunctor","Closed"]},"declarations":[{"children":[{"comments":null,"title":"closed","info":{"declType":"typeClassMember","type":{"tag":"ForAll","contents":["x",{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"p"},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"p"},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"x"}]},{"tag":"TypeVar","contents":"a"}]}}]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"x"}]},{"tag":"TypeVar","contents":"b"}]}}]}]},null]},null]},null]}},"sourceSpan":null},{"comments":null,"title":"closedFunction","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Profunctor","Closed"],"Closed"]},{"tag":"TypeConstructor","contents":[["Prim"],"Function"]}]}},"sourceSpan":{"start":[11,1],"name":"/home/r/purescript-stuff/bower_components/purescript-profunctor/src/Data/Profunctor/Closed.purs","end":[12,16]}}],"comments":"The `Closed` class extends the `Profunctor` class to work with functions.\n","title":"Closed","info":{"fundeps":[],"arguments":[["p",null]],"declType":"typeClass","superclasses":[{"constraintClass":[["Data","Profunctor"],"Profunctor"],"constraintArgs":[{"tag":"TypeVar","contents":"p"}],"constraintData":null}]},"sourceSpan":{"start":[8,1],"name":"/home/r/purescript-stuff/bower_components/purescript-profunctor/src/Data/Profunctor/Closed.purs","end":[9,55]}}]},{"moduleName":{"package":"purescript-profunctor","item":["Data","Profunctor","Costar"]},"declarations":[{"children":[{"comments":null,"title":"Costar","info":{"arguments":[{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeVar","contents":"a"}]}}],"declType":"dataConstructor"},"sourceSpan":null},{"comments":null,"title":"newtypeCostar","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Newtype"],"Newtype"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Profunctor","Costar"],"Costar"]},{"tag":"TypeVar","contents":"f"}]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]},{"tag":"TypeWildcard","contents":{"start":[24,57],"name":"/home/r/purescript-stuff/bower_components/purescript-profunctor/src/Data/Profunctor/Costar.purs","end":[24,58]}}]}},"sourceSpan":{"start":[24,1],"name":"/home/r/purescript-stuff/bower_components/purescript-profunctor/src/Data/Profunctor/Costar.purs","end":[24,58]}},{"comments":null,"title":"semigroupoidCostar","info":{"declType":"instance","dependencies":[{"constraintClass":[["Control","Extend"],"Extend"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Semigroupoid"],"Semigroupoid"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Profunctor","Costar"],"Costar"]},{"tag":"TypeVar","contents":"f"}]}}]}},"sourceSpan":{"start":[26,1],"name":"/home/r/purescript-stuff/bower_components/purescript-profunctor/src/Data/Profunctor/Costar.purs","end":[27,51]}},{"comments":null,"title":"categoryCostar","info":{"declType":"instance","dependencies":[{"constraintClass":[["Control","Comonad"],"Comonad"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Category"],"Category"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Profunctor","Costar"],"Costar"]},{"tag":"TypeVar","contents":"f"}]}}]}},"sourceSpan":{"start":[29,1],"name":"/home/r/purescript-stuff/bower_components/purescript-profunctor/src/Data/Profunctor/Costar.purs","end":[30,22]}},{"comments":null,"title":"functorCostar","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Functor"],"Functor"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Profunctor","Costar"],"Costar"]},{"tag":"TypeVar","contents":"f"}]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[32,1],"name":"/home/r/purescript-stuff/bower_components/purescript-profunctor/src/Data/Profunctor/Costar.purs","end":[33,38]}},{"comments":null,"title":"invariantCostar","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Functor","Invariant"],"Invariant"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Profunctor","Costar"],"Costar"]},{"tag":"TypeVar","contents":"f"}]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[35,1],"name":"/home/r/purescript-stuff/bower_components/purescript-profunctor/src/Data/Profunctor/Costar.purs","end":[36,15]}},{"comments":null,"title":"applyCostar","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Apply"],"Apply"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Profunctor","Costar"],"Costar"]},{"tag":"TypeVar","contents":"f"}]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[38,1],"name":"/home/r/purescript-stuff/bower_components/purescript-profunctor/src/Data/Profunctor/Costar.purs","end":[39,55]}},{"comments":null,"title":"applicativeCostar","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Applicative"],"Applicative"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Profunctor","Costar"],"Costar"]},{"tag":"TypeVar","contents":"f"}]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[41,1],"name":"/home/r/purescript-stuff/bower_components/purescript-profunctor/src/Data/Profunctor/Costar.purs","end":[42,26]}},{"comments":null,"title":"bindCostar","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Bind"],"Bind"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Profunctor","Costar"],"Costar"]},{"tag":"TypeVar","contents":"f"}]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[44,1],"name":"/home/r/purescript-stuff/bower_components/purescript-profunctor/src/Data/Profunctor/Costar.purs","end":[45,67]}},{"comments":null,"title":"monadCostar","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad"],"Monad"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Profunctor","Costar"],"Costar"]},{"tag":"TypeVar","contents":"f"}]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[47,1],"name":"/home/r/purescript-stuff/bower_components/purescript-profunctor/src/Data/Profunctor/Costar.purs","end":[47,43]}},{"comments":null,"title":"distributiveCostar","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Distributive"],"Distributive"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Profunctor","Costar"],"Costar"]},{"tag":"TypeVar","contents":"f"}]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[49,1],"name":"/home/r/purescript-stuff/bower_components/purescript-profunctor/src/Data/Profunctor/Costar.purs","end":[51,35]}},{"comments":null,"title":"profunctorCostar","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","Functor"],"Functor"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Profunctor"],"Profunctor"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Profunctor","Costar"],"Costar"]},{"tag":"TypeVar","contents":"f"}]}}]}},"sourceSpan":{"start":[53,1],"name":"/home/r/purescript-stuff/bower_components/purescript-profunctor/src/Data/Profunctor/Costar.purs","end":[54,52]}},{"comments":null,"title":"strongCostar","info":{"declType":"instance","dependencies":[{"constraintClass":[["Control","Comonad"],"Comonad"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Profunctor","Strong"],"Strong"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Profunctor","Costar"],"Costar"]},{"tag":"TypeVar","contents":"f"}]}}]}},"sourceSpan":{"start":[56,1],"name":"/home/r/purescript-stuff/bower_components/purescript-profunctor/src/Data/Profunctor/Costar.purs","end":[58,75]}},{"comments":null,"title":"costrongCostar","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","Functor"],"Functor"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Profunctor","Costrong"],"Costrong"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Profunctor","Costar"],"Costar"]},{"tag":"TypeVar","contents":"f"}]}}]}},"sourceSpan":{"start":[60,1],"name":"/home/r/purescript-stuff/bower_components/purescript-profunctor/src/Data/Profunctor/Costar.purs","end":[64,59]}},{"comments":null,"title":"cochoiceCostar","info":{"declType":"instance","dependencies":[{"constraintClass":[["Control","Applicative"],"Applicative"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Profunctor","Cochoice"],"Cochoice"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Profunctor","Costar"],"Costar"]},{"tag":"TypeVar","contents":"f"}]}}]}},"sourceSpan":{"start":[66,1],"name":"/home/r/purescript-stuff/bower_components/purescript-profunctor/src/Data/Profunctor/Costar.purs","end":[72,32]}},{"comments":null,"title":"closedCostar","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","Functor"],"Functor"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Profunctor","Closed"],"Closed"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Profunctor","Costar"],"Costar"]},{"tag":"TypeVar","contents":"f"}]}}]}},"sourceSpan":{"start":[74,1],"name":"/home/r/purescript-stuff/bower_components/purescript-profunctor/src/Data/Profunctor/Costar.purs","end":[75,55]}}],"comments":"`Costar` turns a `Functor` into a `Profunctor` \"backwards\".\n\n`Costar f` is also the co-Kleisli category for `f`.\n","title":"Costar","info":{"declType":"data","dataDeclType":"newtype","typeArguments":[["f",null],["b",null],["a",null]]},"sourceSpan":{"start":[22,1],"name":"/home/r/purescript-stuff/bower_components/purescript-profunctor/src/Data/Profunctor/Costar.purs","end":[22,41]}}]},{"moduleName":{"package":"purescript-profunctor","item":["Data","Profunctor","Costrong"]},"declarations":[{"children":[{"comments":null,"title":"unfirst","info":{"declType":"typeClassMember","type":{"tag":"ForAll","contents":["c",{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"p"},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Tuple"],"Tuple"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"c"}]}}]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Tuple"],"Tuple"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeVar","contents":"c"}]}}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"p"},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]},null]},null]},null]}},"sourceSpan":null},{"comments":null,"title":"unsecond","info":{"declType":"typeClassMember","type":{"tag":"ForAll","contents":["c",{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"p"},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Tuple"],"Tuple"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Tuple"],"Tuple"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"c"}]}}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"p"},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeVar","contents":"c"}]}]},null]},null]},null]}},"sourceSpan":null}],"comments":"The `Costrong` class provides the dual operations of the `Strong` class.\n","title":"Costrong","info":{"fundeps":[],"arguments":[["p",null]],"declType":"typeClass","superclasses":[{"constraintClass":[["Data","Profunctor"],"Profunctor"],"constraintArgs":[{"tag":"TypeVar","contents":"p"}],"constraintData":null}]},"sourceSpan":{"start":[7,1],"name":"/home/r/purescript-stuff/bower_components/purescript-profunctor/src/Data/Profunctor/Costrong.purs","end":[9,62]}}]},{"moduleName":{"package":"purescript-profunctor","item":["Data","Profunctor","Star"]},"declarations":[{"children":[{"comments":null,"title":"Star","info":{"arguments":[{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"b"}]}]}}],"declType":"dataConstructor"},"sourceSpan":null},{"comments":null,"title":"newtypeStar","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Newtype"],"Newtype"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Profunctor","Star"],"Star"]},{"tag":"TypeVar","contents":"f"}]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]},{"tag":"TypeWildcard","contents":{"start":[26,53],"name":"/home/r/purescript-stuff/bower_components/purescript-profunctor/src/Data/Profunctor/Star.purs","end":[26,54]}}]}},"sourceSpan":{"start":[26,1],"name":"/home/r/purescript-stuff/bower_components/purescript-profunctor/src/Data/Profunctor/Star.purs","end":[26,54]}},{"comments":null,"title":"semigroupoidStar","info":{"declType":"instance","dependencies":[{"constraintClass":[["Control","Bind"],"Bind"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Semigroupoid"],"Semigroupoid"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Profunctor","Star"],"Star"]},{"tag":"TypeVar","contents":"f"}]}}]}},"sourceSpan":{"start":[28,1],"name":"/home/r/purescript-stuff/bower_components/purescript-profunctor/src/Data/Profunctor/Star.purs","end":[29,51]}},{"comments":null,"title":"categoryStar","info":{"declType":"instance","dependencies":[{"constraintClass":[["Control","Monad"],"Monad"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Category"],"Category"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Profunctor","Star"],"Star"]},{"tag":"TypeVar","contents":"f"}]}}]}},"sourceSpan":{"start":[31,1],"name":"/home/r/purescript-stuff/bower_components/purescript-profunctor/src/Data/Profunctor/Star.purs","end":[32,17]}},{"comments":null,"title":"functorStar","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","Functor"],"Functor"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Functor"],"Functor"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Profunctor","Star"],"Star"]},{"tag":"TypeVar","contents":"f"}]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[34,1],"name":"/home/r/purescript-stuff/bower_components/purescript-profunctor/src/Data/Profunctor/Star.purs","end":[35,38]}},{"comments":null,"title":"invariantStar","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","Functor","Invariant"],"Invariant"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Functor","Invariant"],"Invariant"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Profunctor","Star"],"Star"]},{"tag":"TypeVar","contents":"f"}]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[37,1],"name":"/home/r/purescript-stuff/bower_components/purescript-profunctor/src/Data/Profunctor/Star.purs","end":[38,44]}},{"comments":null,"title":"applyStar","info":{"declType":"instance","dependencies":[{"constraintClass":[["Control","Apply"],"Apply"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Apply"],"Apply"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Profunctor","Star"],"Star"]},{"tag":"TypeVar","contents":"f"}]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[40,1],"name":"/home/r/purescript-stuff/bower_components/purescript-profunctor/src/Data/Profunctor/Star.purs","end":[41,51]}},{"comments":null,"title":"applicativeStar","info":{"declType":"instance","dependencies":[{"constraintClass":[["Control","Applicative"],"Applicative"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Applicative"],"Applicative"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Profunctor","Star"],"Star"]},{"tag":"TypeVar","contents":"f"}]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[43,1],"name":"/home/r/purescript-stuff/bower_components/purescript-profunctor/src/Data/Profunctor/Star.purs","end":[44,29]}},{"comments":null,"title":"bindStar","info":{"declType":"instance","dependencies":[{"constraintClass":[["Control","Bind"],"Bind"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Bind"],"Bind"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Profunctor","Star"],"Star"]},{"tag":"TypeVar","contents":"f"}]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[46,1],"name":"/home/r/purescript-stuff/bower_components/purescript-profunctor/src/Data/Profunctor/Star.purs","end":[47,71]}},{"comments":null,"title":"monadStar","info":{"declType":"instance","dependencies":[{"constraintClass":[["Control","Monad"],"Monad"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad"],"Monad"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Profunctor","Star"],"Star"]},{"tag":"TypeVar","contents":"f"}]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[49,1],"name":"/home/r/purescript-stuff/bower_components/purescript-profunctor/src/Data/Profunctor/Star.purs","end":[49,50]}},{"comments":null,"title":"altStar","info":{"declType":"instance","dependencies":[{"constraintClass":[["Control","Alt"],"Alt"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Alt"],"Alt"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Profunctor","Star"],"Star"]},{"tag":"TypeVar","contents":"f"}]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[51,1],"name":"/home/r/purescript-stuff/bower_components/purescript-profunctor/src/Data/Profunctor/Star.purs","end":[52,49]}},{"comments":null,"title":"plusStar","info":{"declType":"instance","dependencies":[{"constraintClass":[["Control","Plus"],"Plus"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Plus"],"Plus"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Profunctor","Star"],"Star"]},{"tag":"TypeVar","contents":"f"}]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[54,1],"name":"/home/r/purescript-stuff/bower_components/purescript-profunctor/src/Data/Profunctor/Star.purs","end":[55,27]}},{"comments":null,"title":"alternativeStar","info":{"declType":"instance","dependencies":[{"constraintClass":[["Control","Alternative"],"Alternative"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Alternative"],"Alternative"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Profunctor","Star"],"Star"]},{"tag":"TypeVar","contents":"f"}]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[57,1],"name":"/home/r/purescript-stuff/bower_components/purescript-profunctor/src/Data/Profunctor/Star.purs","end":[57,68]}},{"comments":null,"title":"monadZeroStar","info":{"declType":"instance","dependencies":[{"constraintClass":[["Control","MonadZero"],"MonadZero"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","MonadZero"],"MonadZero"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Profunctor","Star"],"Star"]},{"tag":"TypeVar","contents":"f"}]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[59,1],"name":"/home/r/purescript-stuff/bower_components/purescript-profunctor/src/Data/Profunctor/Star.purs","end":[59,62]}},{"comments":null,"title":"monadPlusStar","info":{"declType":"instance","dependencies":[{"constraintClass":[["Control","MonadPlus"],"MonadPlus"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","MonadPlus"],"MonadPlus"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Profunctor","Star"],"Star"]},{"tag":"TypeVar","contents":"f"}]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[61,1],"name":"/home/r/purescript-stuff/bower_components/purescript-profunctor/src/Data/Profunctor/Star.purs","end":[61,62]}},{"comments":null,"title":"distributiveStar","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","Distributive"],"Distributive"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Distributive"],"Distributive"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Profunctor","Star"],"Star"]},{"tag":"TypeVar","contents":"f"}]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[63,1],"name":"/home/r/purescript-stuff/bower_components/purescript-profunctor/src/Data/Profunctor/Star.purs","end":[65,35]}},{"comments":null,"title":"profunctorStar","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","Functor"],"Functor"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Profunctor"],"Profunctor"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Profunctor","Star"],"Star"]},{"tag":"TypeVar","contents":"f"}]}}]}},"sourceSpan":{"start":[67,1],"name":"/home/r/purescript-stuff/bower_components/purescript-profunctor/src/Data/Profunctor/Star.purs","end":[68,50]}},{"comments":null,"title":"strongStar","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","Functor"],"Functor"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Profunctor","Strong"],"Strong"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Profunctor","Star"],"Star"]},{"tag":"TypeVar","contents":"f"}]}}]}},"sourceSpan":{"start":[70,1],"name":"/home/r/purescript-stuff/bower_components/purescript-profunctor/src/Data/Profunctor/Star.purs","end":[72,61]}},{"comments":null,"title":"choiceStar","info":{"declType":"instance","dependencies":[{"constraintClass":[["Control","Applicative"],"Applicative"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Profunctor","Choice"],"Choice"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Profunctor","Star"],"Star"]},{"tag":"TypeVar","contents":"f"}]}}]}},"sourceSpan":{"start":[74,1],"name":"/home/r/purescript-stuff/bower_components/purescript-profunctor/src/Data/Profunctor/Star.purs","end":[76,67]}},{"comments":null,"title":"closedStar","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","Distributive"],"Distributive"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Profunctor","Closed"],"Closed"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Profunctor","Star"],"Star"]},{"tag":"TypeVar","contents":"f"}]}}]}},"sourceSpan":{"start":[78,1],"name":"/home/r/purescript-stuff/bower_components/purescript-profunctor/src/Data/Profunctor/Star.purs","end":[79,52]}}],"comments":"`Star` turns a `Functor` into a `Profunctor`.\n\n`Star f` is also the Kleisli category for `f`\n","title":"Star","info":{"declType":"data","dataDeclType":"newtype","typeArguments":[["f",null],["a",null],["b",null]]},"sourceSpan":{"start":[24,1],"name":"/home/r/purescript-stuff/bower_components/purescript-profunctor/src/Data/Profunctor/Star.purs","end":[24,37]}}]},{"moduleName":{"package":"purescript-profunctor","item":["Data","Profunctor","Strong"]},"declarations":[{"children":[{"comments":null,"title":"first","info":{"declType":"typeClassMember","type":{"tag":"ForAll","contents":["c",{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"p"},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"p"},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Tuple"],"Tuple"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"c"}]}}]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Tuple"],"Tuple"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeVar","contents":"c"}]}}]}]},null]},null]},null]}},"sourceSpan":null},{"comments":null,"title":"second","info":{"declType":"typeClassMember","type":{"tag":"ForAll","contents":["c",{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"p"},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeVar","contents":"c"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"p"},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Tuple"],"Tuple"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Tuple"],"Tuple"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"c"}]}}]}]},null]},null]},null]}},"sourceSpan":null},{"comments":null,"title":"strongFn","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Profunctor","Strong"],"Strong"]},{"tag":"TypeConstructor","contents":[["Prim"],"Function"]}]}},"sourceSpan":{"start":[32,1],"name":"/home/r/purescript-stuff/bower_components/purescript-profunctor/src/Data/Profunctor/Strong.purs","end":[34,17]}}],"comments":"The `Strong` class extends `Profunctor` with combinators for working with\nproduct types.\n\n`first` and `second` lift values in a `Profunctor` to act on the first and\nsecond components of a `Tuple`, respectively.\n\nAnother way to think about Strong is to piggyback on the intuition of\ninputs and outputs.  Rewriting the type signature in this light then yields:\n```\nfirst ::  forall input output a. p input output -> p (Tuple input a) (Tuple output a)\nsecond :: forall input output a. p input output -> p (Tuple a input) (Tuple a output)\n```\nIf we specialize the profunctor p to the function arrow, we get the following type\nsignatures, which may look a bit more familiar:\n```\nfirst ::  forall input output a. (input -> output) -> (Tuple input a) -> (Tuple output a)\nsecond :: forall input output a. (input -> output) -> (Tuple a input) -> (Tuple a output)\n```\nSo, when the `profunctor` is `Function` application, `first` essentially applies your function\nto the first element of a `Tuple`, and `second` applies it to the second element (same as `map` would do).\n","title":"Strong","info":{"fundeps":[],"arguments":[["p",null]],"declType":"typeClass","superclasses":[{"constraintClass":[["Data","Profunctor"],"Profunctor"],"constraintArgs":[{"tag":"TypeVar","contents":"p"}],"constraintData":null}]},"sourceSpan":{"start":[28,1],"name":"/home/r/purescript-stuff/bower_components/purescript-profunctor/src/Data/Profunctor/Strong.purs","end":[30,61]}},{"children":[],"comments":null,"title":"(***)","info":{"declType":"alias","alias":[["Data","Profunctor","Strong"],{"Right":{"Left":{"Ident":"splitStrong"}}}],"fixity":{"associativity":"infixr","precedence":3}},"sourceSpan":{"start":[55,1],"name":"/home/r/purescript-stuff/bower_components/purescript-profunctor/src/Data/Profunctor/Strong.purs","end":[55,28]}},{"children":[],"comments":null,"title":"(&&&)","info":{"declType":"alias","alias":[["Data","Profunctor","Strong"],{"Right":{"Left":{"Ident":"fanout"}}}],"fixity":{"associativity":"infixr","precedence":3}},"sourceSpan":{"start":[83,1],"name":"/home/r/purescript-stuff/bower_components/purescript-profunctor/src/Data/Profunctor/Strong.purs","end":[83,20]}}]},{"moduleName":{"package":"purescript-group","item":["Data","Semigroup","Commutative"]},"declarations":[{"children":[{"comments":null,"title":"commutativeVoid","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Semigroup","Commutative"],"Commutative"]},{"tag":"TypeConstructor","contents":[["Data","Void"],"Void"]}]}},"sourceSpan":{"start":[28,1],"name":"/home/r/purescript-stuff/bower_components/purescript-group/src/Data/Semigroup/Commutative.purs","end":[28,45]}},{"comments":null,"title":"commutativeUnit","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Semigroup","Commutative"],"Commutative"]},{"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}},"sourceSpan":{"start":[30,1],"name":"/home/r/purescript-stuff/bower_components/purescript-group/src/Data/Semigroup/Commutative.purs","end":[30,45]}},{"comments":null,"title":"commutativeDual","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","Semigroup","Commutative"],"Commutative"],"constraintArgs":[{"tag":"TypeVar","contents":"g"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Semigroup","Commutative"],"Commutative"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Monoid","Dual"],"Dual"]},{"tag":"TypeVar","contents":"g"}]}}]}},"sourceSpan":{"start":[32,1],"name":"/home/r/purescript-stuff/bower_components/purescript-group/src/Data/Semigroup/Commutative.purs","end":[32,68]}},{"comments":null,"title":"commutativeAdditive","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","Ring"],"Ring"],"constraintArgs":[{"tag":"TypeVar","contents":"r"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Semigroup","Commutative"],"Commutative"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Monoid","Additive"],"Additive"]},{"tag":"TypeVar","contents":"r"}]}}]}},"sourceSpan":{"start":[34,1],"name":"/home/r/purescript-stuff/bower_components/purescript-group/src/Data/Semigroup/Commutative.purs","end":[34,68]}}],"comments":"A `Commutative` is a `Semigroup` with a commutative operation. Instances\nmust satisfy the following law in addition to the group laws:\n\n- Commutativity: `forall x, y. x <> y = y <> x`\n","title":"Commutative","info":{"fundeps":[],"arguments":[["g",null]],"declType":"typeClass","superclasses":[{"constraintClass":[["Data","Semigroup"],"Semigroup"],"constraintArgs":[{"tag":"TypeVar","contents":"g"}],"constraintData":null}]},"sourceSpan":{"start":[26,1],"name":"/home/r/purescript-stuff/bower_components/purescript-group/src/Data/Semigroup/Commutative.purs","end":[26,35]}}]},{"moduleName":{"package":"purescript-symbols","item":["Data","Symbol"]},"declarations":[{"children":[{"comments":null,"title":"SProxy","info":{"arguments":[],"declType":"dataConstructor"},"sourceSpan":null}],"comments":"A value-level proxy for a type-level symbol.\n","title":"SProxy","info":{"declType":"data","dataDeclType":"data","typeArguments":[["sym",{"tag":"NamedKind","contents":[["Prim"],"Symbol"]}]]},"sourceSpan":{"start":[12,1],"name":"/home/r/purescript-stuff/bower_components/purescript-symbols/src/Data/Symbol.purs","end":[12,37]}},{"children":[{"comments":null,"title":"reflectSymbol","info":{"declType":"typeClassMember","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Symbol"],"SProxy"]},{"tag":"TypeVar","contents":"sym"}]}]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}},"sourceSpan":null},{"comments":null,"title":"isSymbolTypeConcat","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","Symbol"],"IsSymbol"],"constraintArgs":[{"tag":"TypeVar","contents":"left"}],"constraintData":null},{"constraintClass":[["Data","Symbol"],"IsSymbol"],"constraintArgs":[{"tag":"TypeVar","contents":"right"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Symbol"],"IsSymbol"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"TypeConcat"]},{"tag":"TypeVar","contents":"left"}]},{"tag":"TypeVar","contents":"right"}]}}]}},"sourceSpan":{"start":[18,1],"name":"/home/r/purescript-stuff/bower_components/purescript-symbols/src/Data/Symbol.purs","end":[19,100]}}],"comments":"A class for known symbols\n","title":"IsSymbol","info":{"fundeps":[],"arguments":[["sym",{"tag":"NamedKind","contents":[["Prim"],"Symbol"]}]],"declType":"typeClass","superclasses":[]},"sourceSpan":{"start":[15,1],"name":"/home/r/purescript-stuff/bower_components/purescript-symbols/src/Data/Symbol.purs","end":[16,40]}},{"children":[],"comments":null,"title":"reifySymbol","info":{"declType":"value","type":{"tag":"ForAll","contents":["r",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"ForAll","contents":["sym",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Symbol"],"IsSymbol"],"constraintArgs":[{"tag":"TypeVar","contents":"sym"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Symbol"],"SProxy"]},{"tag":"TypeVar","contents":"sym"}]}]},{"tag":"TypeVar","contents":"r"}]}]},null]}}]},{"tag":"TypeVar","contents":"r"}]}]},null]}},"sourceSpan":{"start":[21,1],"name":"/home/r/purescript-stuff/bower_components/purescript-symbols/src/Data/Symbol.purs","end":[21,86]}}]},{"moduleName":{"package":"purescript-foldable-traversable","item":["Data","Traversable"]},"declarations":[{"children":[{"comments":null,"title":"traverse","info":{"declType":"typeClassMember","type":{"tag":"ForAll","contents":["m",{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Control","Applicative"],"Applicative"],"constraintArgs":[{"tag":"TypeVar","contents":"m"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"m"},{"tag":"TypeVar","contents":"b"}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"t"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"m"},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"t"},{"tag":"TypeVar","contents":"b"}]}}]}]}]}]},null]},null]},null]}},"sourceSpan":null},{"comments":null,"title":"sequence","info":{"declType":"typeClassMember","type":{"tag":"ForAll","contents":["m",{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Control","Applicative"],"Applicative"],"constraintArgs":[{"tag":"TypeVar","contents":"m"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"t"},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"m"},{"tag":"TypeVar","contents":"a"}]}}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"m"},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"t"},{"tag":"TypeVar","contents":"a"}]}}]}]}]},null]},null]}},"sourceSpan":null},{"comments":null,"title":"traversableArray","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Traversable"],"Traversable"]},{"tag":"TypeConstructor","contents":[["Prim"],"Array"]}]}},"sourceSpan":{"start":[71,1],"name":"/home/r/purescript-stuff/bower_components/purescript-foldable-traversable/src/Data/Traversable.purs","end":[73,29]}},{"comments":null,"title":"traversableMaybe","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Traversable"],"Traversable"]},{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]}]}},"sourceSpan":{"start":[84,1],"name":"/home/r/purescript-stuff/bower_components/purescript-foldable-traversable/src/Data/Traversable.purs","end":[88,33]}},{"comments":null,"title":"traversableFirst","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Traversable"],"Traversable"]},{"tag":"TypeConstructor","contents":[["Data","Maybe","First"],"First"]}]}},"sourceSpan":{"start":[90,1],"name":"/home/r/purescript-stuff/bower_components/purescript-foldable-traversable/src/Data/Traversable.purs","end":[92,44]}},{"comments":null,"title":"traversableLast","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Traversable"],"Traversable"]},{"tag":"TypeConstructor","contents":[["Data","Maybe","Last"],"Last"]}]}},"sourceSpan":{"start":[94,1],"name":"/home/r/purescript-stuff/bower_components/purescript-foldable-traversable/src/Data/Traversable.purs","end":[96,42]}},{"comments":null,"title":"traversableAdditive","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Traversable"],"Traversable"]},{"tag":"TypeConstructor","contents":[["Data","Monoid","Additive"],"Additive"]}]}},"sourceSpan":{"start":[98,1],"name":"/home/r/purescript-stuff/bower_components/purescript-foldable-traversable/src/Data/Traversable.purs","end":[100,41]}},{"comments":null,"title":"traversableDual","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Traversable"],"Traversable"]},{"tag":"TypeConstructor","contents":[["Data","Monoid","Dual"],"Dual"]}]}},"sourceSpan":{"start":[102,1],"name":"/home/r/purescript-stuff/bower_components/purescript-foldable-traversable/src/Data/Traversable.purs","end":[104,33]}},{"comments":null,"title":"traversableConj","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Traversable"],"Traversable"]},{"tag":"TypeConstructor","contents":[["Data","Monoid","Conj"],"Conj"]}]}},"sourceSpan":{"start":[106,1],"name":"/home/r/purescript-stuff/bower_components/purescript-foldable-traversable/src/Data/Traversable.purs","end":[108,33]}},{"comments":null,"title":"traversableDisj","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Traversable"],"Traversable"]},{"tag":"TypeConstructor","contents":[["Data","Monoid","Disj"],"Disj"]}]}},"sourceSpan":{"start":[110,1],"name":"/home/r/purescript-stuff/bower_components/purescript-foldable-traversable/src/Data/Traversable.purs","end":[112,33]}},{"comments":null,"title":"traversableMultiplicative","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Traversable"],"Traversable"]},{"tag":"TypeConstructor","contents":[["Data","Monoid","Multiplicative"],"Multiplicative"]}]}},"sourceSpan":{"start":[114,1],"name":"/home/r/purescript-stuff/bower_components/purescript-foldable-traversable/src/Data/Traversable.purs","end":[116,53]}}],"comments":"`Traversable` represents data structures which can be _traversed_,\naccumulating results and effects in some `Applicative` functor.\n\n- `traverse` runs an action for every element in a data structure,\n  and accumulates the results.\n- `sequence` runs the actions _contained_ in a data structure,\n  and accumulates the results.\n\nThe `traverse` and `sequence` functions should be compatible in the\nfollowing sense:\n\n- `traverse f xs = sequence (f <$> xs)`\n- `sequence = traverse id`\n\n`Traversable` instances should also be compatible with the corresponding\n`Foldable` instances, in the following sense:\n\n- `foldMap f = runConst <<< traverse (Const <<< f)`\n\nDefault implementations are provided by the following functions:\n\n- `traverseDefault`\n- `sequenceDefault`\n","title":"Traversable","info":{"fundeps":[],"arguments":[["t",null]],"declType":"typeClass","superclasses":[{"constraintClass":[["Data","Functor"],"Functor"],"constraintArgs":[{"tag":"TypeVar","contents":"t"}],"constraintData":null},{"constraintClass":[["Data","Foldable"],"Foldable"],"constraintArgs":[{"tag":"TypeVar","contents":"t"}],"constraintData":null}]},"sourceSpan":{"start":[48,1],"name":"/home/r/purescript-stuff/bower_components/purescript-foldable-traversable/src/Data/Traversable.purs","end":[50,62]}},{"children":[],"comments":"Fold a data structure from the right, keeping all intermediate results\ninstead of only the final result. Note that the initial value does not\nappear in the result (unlike Haskell's `Prelude.scanr`).\n\n```purescript\nscanr (+) 0  [1,2,3] = [1,3,6]\nscanr (flip (-)) 10 [1,2,3] = [4,5,7]\n```\n","title":"scanr","info":{"declType":"value","type":{"tag":"ForAll","contents":["f",{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Traversable"],"Traversable"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeVar","contents":"b"}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"b"}]}]}]}]}]},null]},null]},null]}},"sourceSpan":{"start":[209,1],"name":"/home/r/purescript-stuff/bower_components/purescript-foldable-traversable/src/Data/Traversable.purs","end":[209,73]}},{"children":[],"comments":"Fold a data structure from the left, keeping all intermediate results\ninstead of only the final result. Note that the initial value does not\nappear in the result (unlike Haskell's `Prelude.scanl`).\n\n```purescript\nscanl (+) 0  [1,2,3] = [1,3,6]\nscanl (-) 10 [1,2,3] = [9,7,4]\n```\n","title":"scanl","info":{"declType":"value","type":{"tag":"ForAll","contents":["f",{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Traversable"],"Traversable"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"b"}]}]}]}]}]},null]},null]},null]}},"sourceSpan":{"start":[167,1],"name":"/home/r/purescript-stuff/bower_components/purescript-foldable-traversable/src/Data/Traversable.purs","end":[167,73]}},{"children":[],"comments":"A version of `traverse` with its arguments flipped.\n\n\nThis can be useful when running an action written using do notation\nfor every element in a data structure:\n\nFor example:\n\n```purescript\nfor [1, 2, 3] \\n -> do\n  print n\n  return (n * n)\n```\n","title":"for","info":{"declType":"value","type":{"tag":"ForAll","contents":["t",{"tag":"ForAll","contents":["m",{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Control","Applicative"],"Applicative"],"constraintArgs":[{"tag":"TypeVar","contents":"m"}],"constraintData":null},{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Traversable"],"Traversable"],"constraintArgs":[{"tag":"TypeVar","contents":"t"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"t"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"m"},{"tag":"TypeVar","contents":"b"}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"m"},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"t"},{"tag":"TypeVar","contents":"b"}]}}]}]}]}]}]},null]},null]},null]},null]}},"sourceSpan":{"start":[131,1],"name":"/home/r/purescript-stuff/bower_components/purescript-foldable-traversable/src/Data/Traversable.purs","end":[137,13]}}]},{"moduleName":{"package":"purescript-tuples","item":["Data","Tuple"]},"declarations":[{"children":[{"comments":null,"title":"Tuple","info":{"arguments":[{"tag":"TypeVar","contents":"a"},{"tag":"TypeVar","contents":"b"}],"declType":"dataConstructor"},"sourceSpan":null},{"comments":"Allows `Tuple`s to be rendered as a string with `show` whenever there are\n`Show` instances for both component types.\n","title":"showTuple","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","Show"],"Show"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"constraintClass":[["Data","Show"],"Show"],"constraintArgs":[{"tag":"TypeVar","contents":"b"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Show"],"Show"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Tuple"],"Tuple"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}},"sourceSpan":{"start":[34,1],"name":"/home/r/purescript-stuff/bower_components/purescript-tuples/src/Data/Tuple.purs","end":[37,1]}},{"comments":"Allows `Tuple`s to be checked for equality with `==` and `/=` whenever\nthere are `Eq` instances for both component types.\n","title":"eqTuple","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","Eq"],"Eq"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"constraintClass":[["Data","Eq"],"Eq"],"constraintArgs":[{"tag":"TypeVar","contents":"b"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Eq"],"Eq"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Tuple"],"Tuple"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}},"sourceSpan":{"start":[39,1],"name":"/home/r/purescript-stuff/bower_components/purescript-tuples/src/Data/Tuple.purs","end":[39,58]}},{"comments":null,"title":"eq1Tuple","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","Eq"],"Eq"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Eq"],"Eq1"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Tuple"],"Tuple"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[41,1],"name":"/home/r/purescript-stuff/bower_components/purescript-tuples/src/Data/Tuple.purs","end":[41,58]}},{"comments":"Allows `Tuple`s to be compared with `compare`, `>`, `>=`, `<` and `<=`\nwhenever there are `Ord` instances for both component types. To obtain\nthe result, the `fst`s are `compare`d, and if they are `EQ`ual, the\n`snd`s are `compare`d.\n","title":"ordTuple","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","Ord"],"Ord"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"constraintClass":[["Data","Ord"],"Ord"],"constraintArgs":[{"tag":"TypeVar","contents":"b"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Ord"],"Ord"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Tuple"],"Tuple"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}},"sourceSpan":{"start":[47,1],"name":"/home/r/purescript-stuff/bower_components/purescript-tuples/src/Data/Tuple.purs","end":[47,62]}},{"comments":null,"title":"ord1Tuple","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","Ord"],"Ord"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Ord"],"Ord1"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Tuple"],"Tuple"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[49,1],"name":"/home/r/purescript-stuff/bower_components/purescript-tuples/src/Data/Tuple.purs","end":[49,71]}},{"comments":null,"title":"boundedTuple","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","Bounded"],"Bounded"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"constraintClass":[["Data","Bounded"],"Bounded"],"constraintArgs":[{"tag":"TypeVar","contents":"b"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Bounded"],"Bounded"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Tuple"],"Tuple"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}},"sourceSpan":{"start":[51,1],"name":"/home/r/purescript-stuff/bower_components/purescript-tuples/src/Data/Tuple.purs","end":[53,31]}},{"comments":null,"title":"semigroupoidTuple","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Semigroupoid"],"Semigroupoid"]},{"tag":"TypeConstructor","contents":[["Data","Tuple"],"Tuple"]}]}},"sourceSpan":{"start":[55,1],"name":"/home/r/purescript-stuff/bower_components/purescript-tuples/src/Data/Tuple.purs","end":[56,46]}},{"comments":"The `Semigroup` instance enables use of the associative operator `<>` on\n`Tuple`s whenever there are `Semigroup` instances for the component\ntypes. The `<>` operator is applied pairwise, so:\n```purescript\n(Tuple a1 b1) <> (Tuple a2 b2) = Tuple (a1 <> a2) (b1 <> b2)\n```\n","title":"semigroupTuple","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","Semigroup"],"Semigroup"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"constraintClass":[["Data","Semigroup"],"Semigroup"],"constraintArgs":[{"tag":"TypeVar","contents":"b"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Semigroup"],"Semigroup"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Tuple"],"Tuple"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}},"sourceSpan":{"start":[64,1],"name":"/home/r/purescript-stuff/bower_components/purescript-tuples/src/Data/Tuple.purs","end":[65,67]}},{"comments":null,"title":"monoidTuple","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","Monoid"],"Monoid"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"constraintClass":[["Data","Monoid"],"Monoid"],"constraintArgs":[{"tag":"TypeVar","contents":"b"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Monoid"],"Monoid"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Tuple"],"Tuple"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}},"sourceSpan":{"start":[67,1],"name":"/home/r/purescript-stuff/bower_components/purescript-tuples/src/Data/Tuple.purs","end":[68,31]}},{"comments":null,"title":"semiringTuple","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","Semiring"],"Semiring"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"constraintClass":[["Data","Semiring"],"Semiring"],"constraintArgs":[{"tag":"TypeVar","contents":"b"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Semiring"],"Semiring"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Tuple"],"Tuple"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}},"sourceSpan":{"start":[70,1],"name":"/home/r/purescript-stuff/bower_components/purescript-tuples/src/Data/Tuple.purs","end":[74,25]}},{"comments":null,"title":"ringTuple","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","Ring"],"Ring"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"constraintClass":[["Data","Ring"],"Ring"],"constraintArgs":[{"tag":"TypeVar","contents":"b"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Ring"],"Ring"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Tuple"],"Tuple"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}},"sourceSpan":{"start":[76,1],"name":"/home/r/purescript-stuff/bower_components/purescript-tuples/src/Data/Tuple.purs","end":[77,66]}},{"comments":null,"title":"commutativeRingTuple","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","CommutativeRing"],"CommutativeRing"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"constraintClass":[["Data","CommutativeRing"],"CommutativeRing"],"constraintArgs":[{"tag":"TypeVar","contents":"b"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","CommutativeRing"],"CommutativeRing"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Tuple"],"Tuple"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}},"sourceSpan":{"start":[79,1],"name":"/home/r/purescript-stuff/bower_components/purescript-tuples/src/Data/Tuple.purs","end":[79,103]}},{"comments":null,"title":"heytingAlgebraTuple","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","HeytingAlgebra"],"HeytingAlgebra"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"constraintClass":[["Data","HeytingAlgebra"],"HeytingAlgebra"],"constraintArgs":[{"tag":"TypeVar","contents":"b"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","HeytingAlgebra"],"HeytingAlgebra"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Tuple"],"Tuple"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}},"sourceSpan":{"start":[81,1],"name":"/home/r/purescript-stuff/bower_components/purescript-tuples/src/Data/Tuple.purs","end":[87,42]}},{"comments":null,"title":"booleanAlgebraTuple","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","BooleanAlgebra"],"BooleanAlgebra"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"constraintClass":[["Data","BooleanAlgebra"],"BooleanAlgebra"],"constraintArgs":[{"tag":"TypeVar","contents":"b"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","BooleanAlgebra"],"BooleanAlgebra"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Tuple"],"Tuple"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}},"sourceSpan":{"start":[89,1],"name":"/home/r/purescript-stuff/bower_components/purescript-tuples/src/Data/Tuple.purs","end":[89,99]}},{"comments":"The `Functor` instance allows functions to transform the contents of a\n`Tuple` with the `<$>` operator, applying the function to the second\ncomponent, so:\n```purescript\nf <$> (Tuple x y) = Tuple x (f y)\n````\n","title":"functorTuple","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Functor"],"Functor"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Tuple"],"Tuple"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[97,1],"name":"/home/r/purescript-stuff/bower_components/purescript-tuples/src/Data/Tuple.purs","end":[98,36]}},{"comments":null,"title":"invariantTuple","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Functor","Invariant"],"Invariant"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Tuple"],"Tuple"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[100,1],"name":"/home/r/purescript-stuff/bower_components/purescript-tuples/src/Data/Tuple.purs","end":[101,15]}},{"comments":null,"title":"bifunctorTuple","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Bifunctor"],"Bifunctor"]},{"tag":"TypeConstructor","contents":[["Data","Tuple"],"Tuple"]}]}},"sourceSpan":{"start":[103,1],"name":"/home/r/purescript-stuff/bower_components/purescript-tuples/src/Data/Tuple.purs","end":[104,44]}},{"comments":"The `Functor` instance allows functions to transform the contents of a\n`Tuple` with the `<*>` operator whenever there is a `Semigroup` instance\nfor the `fst` component, so:\n```purescript\n(Tuple a1 f) <*> (Tuple a2 x) == Tuple (a1 <> a2) (f x)\n```\n","title":"applyTuple","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","Semigroup"],"Semigroup"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Apply"],"Apply"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Tuple"],"Tuple"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[112,1],"name":"/home/r/purescript-stuff/bower_components/purescript-tuples/src/Data/Tuple.purs","end":[113,59]}},{"comments":null,"title":"biapplyTuple","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Biapply"],"Biapply"]},{"tag":"TypeConstructor","contents":[["Data","Tuple"],"Tuple"]}]}},"sourceSpan":{"start":[115,1],"name":"/home/r/purescript-stuff/bower_components/purescript-tuples/src/Data/Tuple.purs","end":[116,54]}},{"comments":null,"title":"applicativeTuple","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","Monoid"],"Monoid"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Applicative"],"Applicative"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Tuple"],"Tuple"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[118,1],"name":"/home/r/purescript-stuff/bower_components/purescript-tuples/src/Data/Tuple.purs","end":[119,22]}},{"comments":null,"title":"biapplicativeTuple","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Biapplicative"],"Biapplicative"]},{"tag":"TypeConstructor","contents":[["Data","Tuple"],"Tuple"]}]}},"sourceSpan":{"start":[121,1],"name":"/home/r/purescript-stuff/bower_components/purescript-tuples/src/Data/Tuple.purs","end":[122,17]}},{"comments":null,"title":"bindTuple","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","Semigroup"],"Semigroup"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Bind"],"Bind"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Tuple"],"Tuple"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[124,1],"name":"/home/r/purescript-stuff/bower_components/purescript-tuples/src/Data/Tuple.purs","end":[126,37]}},{"comments":null,"title":"monadTuple","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","Monoid"],"Monoid"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad"],"Monad"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Tuple"],"Tuple"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[128,1],"name":"/home/r/purescript-stuff/bower_components/purescript-tuples/src/Data/Tuple.purs","end":[128,53]}},{"comments":null,"title":"extendTuple","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Extend"],"Extend"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Tuple"],"Tuple"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[130,1],"name":"/home/r/purescript-stuff/bower_components/purescript-tuples/src/Data/Tuple.purs","end":[131,41]}},{"comments":null,"title":"comonadTuple","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Comonad"],"Comonad"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Tuple"],"Tuple"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[133,1],"name":"/home/r/purescript-stuff/bower_components/purescript-tuples/src/Data/Tuple.purs","end":[134,16]}},{"comments":null,"title":"lazyTuple","info":{"declType":"instance","dependencies":[{"constraintClass":[["Control","Lazy"],"Lazy"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"constraintClass":[["Control","Lazy"],"Lazy"],"constraintArgs":[{"tag":"TypeVar","contents":"b"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Lazy"],"Lazy"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Tuple"],"Tuple"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}},"sourceSpan":{"start":[136,1],"name":"/home/r/purescript-stuff/bower_components/purescript-tuples/src/Data/Tuple.purs","end":[137,76]}},{"comments":null,"title":"foldableTuple","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Foldable"],"Foldable"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Tuple"],"Tuple"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[139,1],"name":"/home/r/purescript-stuff/bower_components/purescript-tuples/src/Data/Tuple.purs","end":[142,30]}},{"comments":null,"title":"bifoldableTuple","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Bifoldable"],"Bifoldable"]},{"tag":"TypeConstructor","contents":[["Data","Tuple"],"Tuple"]}]}},"sourceSpan":{"start":[144,1],"name":"/home/r/purescript-stuff/bower_components/purescript-tuples/src/Data/Tuple.purs","end":[147,42]}},{"comments":null,"title":"traversableTuple","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Traversable"],"Traversable"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Tuple"],"Tuple"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[149,1],"name":"/home/r/purescript-stuff/bower_components/purescript-tuples/src/Data/Tuple.purs","end":[151,39]}},{"comments":null,"title":"bitraversableTuple","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Bitraversable"],"Bitraversable"]},{"tag":"TypeConstructor","contents":[["Data","Tuple"],"Tuple"]}]}},"sourceSpan":{"start":[153,1],"name":"/home/r/purescript-stuff/bower_components/purescript-tuples/src/Data/Tuple.purs","end":[155,45]}},{"comments":null,"title":"distributiveTuple","info":{"declType":"instance","dependencies":[{"constraintClass":[["Type","Equality"],"TypeEquals"],"constraintArgs":[{"tag":"TypeVar","contents":"a"},{"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Distributive"],"Distributive"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Tuple"],"Tuple"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[157,1],"name":"/home/r/purescript-stuff/bower_components/purescript-tuples/src/Data/Tuple.purs","end":[159,45]}}],"comments":"A simple product type for wrapping a pair of component values.\n","title":"Tuple","info":{"declType":"data","dataDeclType":"data","typeArguments":[["a",null],["b",null]]},"sourceSpan":{"start":[30,1],"name":"/home/r/purescript-stuff/bower_components/purescript-tuples/src/Data/Tuple.purs","end":[30,27]}},{"children":[],"comments":"Turn a function of two arguments into a function that expects a tuple.\n","title":"uncurry","info":{"declType":"value","type":{"tag":"ForAll","contents":["c",{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeVar","contents":"c"}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Tuple"],"Tuple"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeVar","contents":"c"}]}]},null]},null]},null]}},"sourceSpan":{"start":[174,1],"name":"/home/r/purescript-stuff/bower_components/purescript-tuples/src/Data/Tuple.purs","end":[174,57]}},{"children":[],"comments":"Exchange the first and second components of a tuple.\n","title":"swap","info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Tuple"],"Tuple"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Tuple"],"Tuple"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeVar","contents":"a"}]}]},null]},null]}},"sourceSpan":{"start":[178,1],"name":"/home/r/purescript-stuff/bower_components/purescript-tuples/src/Data/Tuple.purs","end":[178,43]}},{"children":[],"comments":"Returns the second component of a tuple.\n","title":"snd","info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Tuple"],"Tuple"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeVar","contents":"b"}]},null]},null]}},"sourceSpan":{"start":[166,1],"name":"/home/r/purescript-stuff/bower_components/purescript-tuples/src/Data/Tuple.purs","end":[166,34]}},{"children":[],"comments":"Returns the first component of a tuple.\n","title":"fst","info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Tuple"],"Tuple"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeVar","contents":"a"}]},null]},null]}},"sourceSpan":{"start":[162,1],"name":"/home/r/purescript-stuff/bower_components/purescript-tuples/src/Data/Tuple.purs","end":[162,34]}},{"children":[],"comments":"Turn a function that expects a tuple into a function of two arguments.\n","title":"curry","info":{"declType":"value","type":{"tag":"ForAll","contents":["c",{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Tuple"],"Tuple"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeVar","contents":"c"}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeVar","contents":"c"}]}]}]},null]},null]},null]}},"sourceSpan":{"start":[170,1],"name":"/home/r/purescript-stuff/bower_components/purescript-tuples/src/Data/Tuple.purs","end":[170,55]}}]},{"moduleName":{"package":"purescript-tuples","item":["Data","Tuple","Nested"]},"declarations":[{"children":[],"comments":"Shorthand for constructing n-tuples as nested pairs.\n`a /\\ b /\\ c /\\ d /\\ unit` becomes `Tuple a (Tuple b (Tuple c (Tuple d unit)))`\n","title":"(/\\)","info":{"declType":"alias","alias":[["Data","Tuple"],{"Right":{"Right":"Tuple"}}],"fixity":{"associativity":"infixr","precedence":6}},"sourceSpan":{"start":[31,1],"name":"/home/r/purescript-stuff/bower_components/purescript-tuples/src/Data/Tuple/Nested.purs","end":[31,21]}},{"children":[],"comments":"Shorthand for constructing n-tuple types as nested pairs.\n`forall a b c d. a /\\ b /\\ c /\\ d /\\ Unit` becomes\n`forall a b c d. Tuple a (Tuple b (Tuple c (Tuple d Unit)))`\n","title":"type (/\\)","info":{"declType":"alias","alias":[["Data","Tuple"],{"Left":"Tuple"}],"fixity":{"associativity":"infixr","precedence":6}},"sourceSpan":{"start":[36,1],"name":"/home/r/purescript-stuff/bower_components/purescript-tuples/src/Data/Tuple/Nested.purs","end":[36,26]}}]},{"moduleName":{"package":"purescript-debug","item":["Debug","Trace"]},"declarations":[{"children":[],"comments":"Same as `traceAnyM` but only for `Show`able values\n","title":"traceShowM","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["m",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Debug","Trace"],"DebugWarning"],"constraintArgs":[],"constraintData":null},{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Show"],"Show"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"tag":"ConstrainedType","contents":[{"constraintClass":[["Control","Monad"],"Monad"],"constraintArgs":[{"tag":"TypeVar","contents":"m"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"m"},{"tag":"TypeVar","contents":"a"}]}]}]}]}]},null]},null]}},"sourceSpan":{"start":[72,1],"name":"/home/r/purescript-stuff/bower_components/purescript-debug/src/Debug/Trace.purs","end":[72,72]}},{"children":[],"comments":"Log a `Show`able value to the console for debugging purposes and then\nreturn the unit value of the Applicative `a`.\n","title":"traceShowA","info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Debug","Trace"],"DebugWarning"],"constraintArgs":[],"constraintData":null},{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Show"],"Show"],"constraintArgs":[{"tag":"TypeVar","contents":"b"}],"constraintData":null},{"tag":"ConstrainedType","contents":[{"constraintClass":[["Control","Applicative"],"Applicative"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"a"},{"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}]}]}]}]},null]},null]}},"sourceSpan":{"start":[54,1],"name":"/home/r/purescript-stuff/bower_components/purescript-debug/src/Debug/Trace.purs","end":[54,81]}},{"children":[],"comments":"Log a `Show`able value to the console for debugging purposes and then\nreturn a value.\n","title":"traceShow","info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Debug","Trace"],"DebugWarning"],"constraintArgs":[],"constraintData":null},{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Show"],"Show"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]},{"tag":"TypeVar","contents":"b"}]}}]},{"tag":"TypeVar","contents":"b"}]}]}]}]},null]},null]}},"sourceSpan":{"start":[23,1],"name":"/home/r/purescript-stuff/bower_components/purescript-debug/src/Debug/Trace.purs","end":[23,73]}},{"children":[],"comments":"Log any PureScript value to the console and return it in `Monad`\nuseful when one has monadic chains\n```purescript\nmbArray :: Maybe (Array Int)\nfoo :: Int\nfoo = fromMaybe zero\n  $ mbArray\n  >>= traceAnyM\n  >>= head\n  >>= traceAnyM\n```\n","title":"traceAnyM","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["m",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Debug","Trace"],"DebugWarning"],"constraintArgs":[],"constraintData":null},{"tag":"ConstrainedType","contents":[{"constraintClass":[["Control","Monad"],"Monad"],"constraintArgs":[{"tag":"TypeVar","contents":"m"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"m"},{"tag":"TypeVar","contents":"a"}]}]}]}]},null]},null]}},"sourceSpan":{"start":[68,1],"name":"/home/r/purescript-stuff/bower_components/purescript-debug/src/Debug/Trace.purs","end":[68,61]}},{"children":[],"comments":"Log any PureScript value to the console and return the unit value of the\nApplicative `a`.\n","title":"traceAnyA","info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Debug","Trace"],"DebugWarning"],"constraintArgs":[],"constraintData":null},{"tag":"ConstrainedType","contents":[{"constraintClass":[["Control","Applicative"],"Applicative"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"a"},{"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}]}]}]},null]},null]}},"sourceSpan":{"start":[37,1],"name":"/home/r/purescript-stuff/bower_components/purescript-debug/src/Debug/Trace.purs","end":[37,70]}},{"children":[],"comments":"Log any PureScript value to the console for debugging purposes and then\nreturn a value. This will log the value's underlying representation for\nlow-level debugging.\n","title":"traceAny","info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Debug","Trace"],"DebugWarning"],"constraintArgs":[],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]},{"tag":"TypeVar","contents":"b"}]}}]},{"tag":"TypeVar","contents":"b"}]}]}]},null]},null]}},"sourceSpan":{"start":[29,1],"name":"/home/r/purescript-stuff/bower_components/purescript-debug/src/Debug/Trace.purs","end":[29,77]}},{"children":[],"comments":"Log a message to the console for debugging purposes and then return the\nunit value of the Applicative `a`.\n\nFor example:\n``` purescript\ndoSomething = do\n  traceA \"Hello\"\n  ... some value or computation ...\n```\n","title":"traceA","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Debug","Trace"],"DebugWarning"],"constraintArgs":[],"constraintData":null},{"tag":"ConstrainedType","contents":[{"constraintClass":[["Control","Applicative"],"Applicative"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"a"},{"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}]}]}]},null]}},"sourceSpan":{"start":[49,1],"name":"/home/r/purescript-stuff/bower_components/purescript-debug/src/Debug/Trace.purs","end":[49,70]}},{"children":[],"comments":"Log a message to the console for debugging purposes and then return a\nvalue. The return value is thunked so it is not evaluated until after the\nmessage has been printed, to preserve a predictable console output.\n\nFor example:\n``` purescript\ndoSomething = trace \"Hello\" \\_ -> ... some value or computation ...\n```\n","title":"trace","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Debug","Trace"],"DebugWarning"],"constraintArgs":[],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]},{"tag":"TypeVar","contents":"a"}]}}]},{"tag":"TypeVar","contents":"a"}]}]}]},null]}},"sourceSpan":{"start":[18,1],"name":"/home/r/purescript-stuff/bower_components/purescript-debug/src/Debug/Trace.purs","end":[18,62]}},{"children":[],"comments":"Log any value and return it\n","title":"spy","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Debug","Trace"],"DebugWarning"],"constraintArgs":[],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"a"}]}]},null]}},"sourceSpan":{"start":[32,1],"name":"/home/r/purescript-stuff/bower_components/purescript-debug/src/Debug/Trace.purs","end":[32,40]}}]},{"moduleName":{"package":"purescript-partial","item":["Partial"]},"declarations":[{"children":[],"comments":"A partial function which crashes on any input with the specified message.\n","title":"crashWith","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Prim"],"Partial"],"constraintArgs":[],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeVar","contents":"a"}]}]},null]}},"sourceSpan":{"start":[12,1],"name":"/home/r/purescript-stuff/bower_components/purescript-partial/src/Partial.purs","end":[12,60]}},{"children":[],"comments":"A partial function which crashes on any input with a default message.\n","title":"crash","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Prim"],"Partial"],"constraintArgs":[],"constraintData":null},{"tag":"TypeVar","contents":"a"}]},null]}},"sourceSpan":{"start":[8,1],"name":"/home/r/purescript-stuff/bower_components/purescript-partial/src/Partial.purs","end":[8,32]}}]},{"moduleName":{"package":"purescript-partial","item":["Partial","Unsafe"]},"declarations":[{"children":[],"comments":"Discharge a partiality constraint, unsafely.\n","title":"unsafePartial","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"ConstrainedType","contents":[{"constraintClass":[["Prim"],"Partial"],"constraintArgs":[],"constraintData":null},{"tag":"TypeVar","contents":"a"}]}}]},{"tag":"TypeVar","contents":"a"}]},null]}},"sourceSpan":{"start":[11,1],"name":"/home/r/purescript-stuff/bower_components/purescript-partial/src/Partial/Unsafe.purs","end":[11,62]}},{"children":[],"comments":"A function which crashes with the specified error message.\n","title":"unsafeCrashWith","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeVar","contents":"a"}]},null]}},"sourceSpan":{"start":[18,1],"name":"/home/r/purescript-stuff/bower_components/purescript-partial/src/Partial/Unsafe.purs","end":[18,41]}}]},{"moduleName":{"package":"purescript-prelude","item":["Prelude"]},"declarations":[{"children":[{"comments":null,"title":"showVoid","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Show"],"Show"]},{"tag":"TypeConstructor","contents":[["Data","Void"],"Void"]}]}},"sourceSpan":{"start":[12,1],"name":"/home/r/purescript-stuff/bower_components/purescript-prelude/src/Data/Void.purs","end":[13,16]}}],"comments":"An uninhabited data type.\n\n`Void` is useful to eliminate the possibility of a value being created.\nFor example, a value of type `Either Void Boolean` can never have\na Left value created in PureScript.\n","title":"Void","info":{"declType":"data","dataDeclType":"newtype","typeArguments":[]},"sourceSpan":{"start":[10,1],"name":"/home/r/purescript-stuff/bower_components/purescript-prelude/src/Data/Void.purs","end":[10,25]}},{"children":[{"comments":null,"title":"showUnit","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Show"],"Show"]},{"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}},"sourceSpan":{"start":[16,1],"name":"/home/r/purescript-stuff/bower_components/purescript-prelude/src/Data/Unit.purs","end":[17,12]}}],"comments":"The `Unit` type has a single inhabitant, called `unit`. It represents\nvalues with no computational content.\n\n`Unit` is often used, wrapped in a monadic type constructor, as the\nreturn type of a computation where only\nthe _effects_ are important.\n","title":"Unit","info":{"kind":{"tag":"NamedKind","contents":[["Prim"],"Type"]},"declType":"externData"},"sourceSpan":{"start":[11,1],"name":"/home/r/purescript-stuff/bower_components/purescript-prelude/src/Data/Unit.purs","end":[11,33]}},{"children":[{"comments":null,"title":"LT","info":{"arguments":[],"declType":"dataConstructor"},"sourceSpan":null},{"comments":null,"title":"GT","info":{"arguments":[],"declType":"dataConstructor"},"sourceSpan":null},{"comments":null,"title":"EQ","info":{"arguments":[],"declType":"dataConstructor"},"sourceSpan":null},{"comments":null,"title":"eqOrdering","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Eq"],"Eq"]},{"tag":"TypeConstructor","contents":[["Data","Ordering"],"Ordering"]}]}},"sourceSpan":{"start":[15,1],"name":"/home/r/purescript-stuff/bower_components/purescript-prelude/src/Data/Ordering.purs","end":[19,19]}},{"comments":null,"title":"semigroupOrdering","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Semigroup"],"Semigroup"]},{"tag":"TypeConstructor","contents":[["Data","Ordering"],"Ordering"]}]}},"sourceSpan":{"start":[21,1],"name":"/home/r/purescript-stuff/bower_components/purescript-prelude/src/Data/Ordering.purs","end":[24,18]}},{"comments":null,"title":"showOrdering","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Show"],"Show"]},{"tag":"TypeConstructor","contents":[["Data","Ordering"],"Ordering"]}]}},"sourceSpan":{"start":[26,1],"name":"/home/r/purescript-stuff/bower_components/purescript-prelude/src/Data/Ordering.purs","end":[31,1]}}],"comments":"The `Ordering` data type represents the three possible outcomes of\ncomparing two values:\n\n`LT` - The first value is _less than_ the second.\n`GT` - The first value is _greater than_ the second.\n`EQ` - The first value is _equal to_ the second.\n","title":"Ordering","info":{"declType":"data","dataDeclType":"data","typeArguments":[]},"sourceSpan":{"start":[13,1],"name":"/home/r/purescript-stuff/bower_components/purescript-prelude/src/Data/Ordering.purs","end":[13,29]}},{"children":[{"comments":null,"title":"pure","info":{"declType":"typeClassMember","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}]},null]}},"sourceSpan":null},{"comments":null,"title":"applicativeFn","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Applicative"],"Applicative"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"r"}]}}]}},"sourceSpan":{"start":[35,1],"name":"/home/r/purescript-stuff/bower_components/purescript-prelude/src/Control/Applicative.purs","end":[36,15]}},{"comments":null,"title":"applicativeArray","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Applicative"],"Applicative"]},{"tag":"TypeConstructor","contents":[["Prim"],"Array"]}]}},"sourceSpan":{"start":[38,1],"name":"/home/r/purescript-stuff/bower_components/purescript-prelude/src/Control/Applicative.purs","end":[39,15]}}],"comments":"The `Applicative` type class extends the [`Apply`](#apply) type class\nwith a `pure` function, which can be used to create values of type `f a`\nfrom values of type `a`.\n\nWhere [`Apply`](#apply) provides the ability to lift functions of two or\nmore arguments to functions whose arguments are wrapped using `f`, and\n[`Functor`](#functor) provides the ability to lift functions of one\nargument, `pure` can be seen as the function which lifts functions of\n_zero_ arguments. That is, `Applicative` functors support a lifting\noperation for any number of function arguments.\n\nInstances must satisfy the following laws in addition to the `Apply`\nlaws:\n\n- Identity: `(pure id) <*> v = v`\n- Composition: `pure (<<<) <*> f <*> g <*> h = f <*> (g <*> h)`\n- Homomorphism: `(pure f) <*> (pure x) = pure (f x)`\n- Interchange: `u <*> (pure y) = (pure (_ $ y)) <*> u`\n","title":"Applicative","info":{"fundeps":[],"arguments":[["f",null]],"declType":"typeClass","superclasses":[{"constraintClass":[["Control","Apply"],"Apply"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}],"constraintData":null}]},"sourceSpan":{"start":[32,1],"name":"/home/r/purescript-stuff/bower_components/purescript-prelude/src/Control/Applicative.purs","end":[33,29]}},{"children":[{"comments":null,"title":"apply","info":{"declType":"typeClassMember","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"b"}]}]}]},null]},null]}},"sourceSpan":null},{"comments":null,"title":"applyFn","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Apply"],"Apply"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"r"}]}}]}},"sourceSpan":{"start":[40,1],"name":"/home/r/purescript-stuff/bower_components/purescript-prelude/src/Control/Apply.purs","end":[41,26]}},{"comments":null,"title":"applyArray","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Apply"],"Apply"]},{"tag":"TypeConstructor","contents":[["Prim"],"Array"]}]}},"sourceSpan":{"start":[43,1],"name":"/home/r/purescript-stuff/bower_components/purescript-prelude/src/Control/Apply.purs","end":[44,21]}}],"comments":"The `Apply` class provides the `(<*>)` which is used to apply a function\nto an argument under a type constructor.\n\n`Apply` can be used to lift functions of two or more arguments to work on\nvalues wrapped with the type constructor `f`. It might also be understood\nin terms of the `lift2` function:\n\n```purescript\nlift2 :: forall f a b c. Apply f => (a -> b -> c) -> f a -> f b -> f c\nlift2 f a b = f <$> a <*> b\n```\n\n`(<*>)` is recovered from `lift2` as `lift2 ($)`. That is, `(<*>)` lifts\nthe function application operator `($)` to arguments wrapped with the\ntype constructor `f`.\n\nInstances must satisfy the following law in addition to the `Functor`\nlaws:\n\n- Associative composition: `(<<<) <$> f <*> g <*> h = f <*> (g <*> h)`\n\nFormally, `Apply` represents a strong lax semi-monoidal endofunctor.\n","title":"Apply","info":{"fundeps":[],"arguments":[["f",null]],"declType":"typeClass","superclasses":[{"constraintClass":[["Data","Functor"],"Functor"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}],"constraintData":null}]},"sourceSpan":{"start":[35,1],"name":"/home/r/purescript-stuff/bower_components/purescript-prelude/src/Control/Apply.purs","end":[36,48]}},{"children":[{"comments":null,"title":"bind","info":{"declType":"typeClassMember","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"m"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"m"},{"tag":"TypeVar","contents":"b"}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"m"},{"tag":"TypeVar","contents":"b"}]}]}]},null]},null]}},"sourceSpan":null},{"comments":null,"title":"bindFn","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Bind"],"Bind"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"r"}]}}]}},"sourceSpan":{"start":[63,1],"name":"/home/r/purescript-stuff/bower_components/purescript-prelude/src/Control/Bind.purs","end":[64,25]}},{"comments":null,"title":"bindArray","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Bind"],"Bind"]},{"tag":"TypeConstructor","contents":[["Prim"],"Array"]}]}},"sourceSpan":{"start":[66,1],"name":"/home/r/purescript-stuff/bower_components/purescript-prelude/src/Control/Bind.purs","end":[67,19]}}],"comments":"The `Bind` type class extends the [`Apply`](#apply) type class with a\n\"bind\" operation `(>>=)` which composes computations in sequence, using\nthe return value of one computation to determine the next computation.\n\nThe `>>=` operator can also be expressed using `do` notation, as follows:\n\n```purescript\nx >>= f = do y <- x\n             f y\n```\n\nwhere the function argument of `f` is given the name `y`.\n\nInstances must satisfy the following law in addition to the `Apply`\nlaws:\n\n- Associativity: `(x >>= f) >>= g = x >>= (\\k -> f k >>= g)`\n\nAssociativity tells us that we can regroup operations which use `do`\nnotation so that we can unambiguously write, for example:\n\n```purescript\ndo x <- m1\n   y <- m2 x\n   m3 x y\n```\n","title":"Bind","info":{"fundeps":[],"arguments":[["m",null]],"declType":"typeClass","superclasses":[{"constraintClass":[["Control","Apply"],"Apply"],"constraintArgs":[{"tag":"TypeVar","contents":"m"}],"constraintData":null}]},"sourceSpan":{"start":[48,1],"name":"/home/r/purescript-stuff/bower_components/purescript-prelude/src/Control/Bind.purs","end":[49,47]}},{"children":[{"comments":null,"title":"booleanAlgebraBoolean","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","BooleanAlgebra"],"BooleanAlgebra"]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}},"sourceSpan":{"start":[19,1],"name":"/home/r/purescript-stuff/bower_components/purescript-prelude/src/Data/BooleanAlgebra.purs","end":[19,57]}},{"comments":null,"title":"booleanAlgebraUnit","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","BooleanAlgebra"],"BooleanAlgebra"]},{"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}},"sourceSpan":{"start":[20,1],"name":"/home/r/purescript-stuff/bower_components/purescript-prelude/src/Data/BooleanAlgebra.purs","end":[20,51]}},{"comments":null,"title":"booleanAlgebraFn","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","BooleanAlgebra"],"BooleanAlgebra"],"constraintArgs":[{"tag":"TypeVar","contents":"b"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","BooleanAlgebra"],"BooleanAlgebra"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}},"sourceSpan":{"start":[21,1],"name":"/home/r/purescript-stuff/bower_components/purescript-prelude/src/Data/BooleanAlgebra.purs","end":[21,72]}}],"comments":"The `BooleanAlgebra` type class represents types that behave like boolean\nvalues.\n\nInstances should satisfy the following laws in addition to the\n`HeytingAlgebra` law:\n\n- Excluded middle:\n  - `a || not a = tt`\n","title":"BooleanAlgebra","info":{"fundeps":[],"arguments":[["a",null]],"declType":"typeClass","superclasses":[{"constraintClass":[["Data","HeytingAlgebra"],"HeytingAlgebra"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}]},"sourceSpan":{"start":[17,1],"name":"/home/r/purescript-stuff/bower_components/purescript-prelude/src/Data/BooleanAlgebra.purs","end":[17,43]}},{"children":[{"comments":null,"title":"top","info":{"declType":"typeClassMember","type":{"tag":"TypeVar","contents":"a"}},"sourceSpan":null},{"comments":null,"title":"bottom","info":{"declType":"typeClassMember","type":{"tag":"TypeVar","contents":"a"}},"sourceSpan":null},{"comments":null,"title":"boundedBoolean","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Bounded"],"Bounded"]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}},"sourceSpan":{"start":[21,1],"name":"/home/r/purescript-stuff/bower_components/purescript-prelude/src/Data/Bounded.purs","end":[23,17]}},{"comments":null,"title":"boundedInt","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Bounded"],"Bounded"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}},"sourceSpan":{"start":[25,1],"name":"/home/r/purescript-stuff/bower_components/purescript-prelude/src/Data/Bounded.purs","end":[27,21]}},{"comments":"Characters fall within the Unicode range.\n","title":"boundedChar","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Bounded"],"Bounded"]},{"tag":"TypeConstructor","contents":[["Prim"],"Char"]}]}},"sourceSpan":{"start":[33,1],"name":"/home/r/purescript-stuff/bower_components/purescript-prelude/src/Data/Bounded.purs","end":[35,22]}},{"comments":null,"title":"boundedOrdering","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Bounded"],"Bounded"]},{"tag":"TypeConstructor","contents":[["Data","Ordering"],"Ordering"]}]}},"sourceSpan":{"start":[40,1],"name":"/home/r/purescript-stuff/bower_components/purescript-prelude/src/Data/Bounded.purs","end":[42,14]}},{"comments":null,"title":"boundedUnit","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Bounded"],"Bounded"]},{"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}},"sourceSpan":{"start":[44,1],"name":"/home/r/purescript-stuff/bower_components/purescript-prelude/src/Data/Bounded.purs","end":[46,12]}}],"comments":"The `Bounded` type class represents totally ordered types that have an\nupper and lower boundary.\n\nInstances should satisfy the following law in addition to the `Ord` laws:\n\n- Bounded: `bottom <= a <= top`\n","title":"Bounded","info":{"fundeps":[],"arguments":[["a",null]],"declType":"typeClass","superclasses":[{"constraintClass":[["Data","Ord"],"Ord"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}]},"sourceSpan":{"start":[17,1],"name":"/home/r/purescript-stuff/bower_components/purescript-prelude/src/Data/Bounded.purs","end":[19,14]}},{"children":[{"comments":null,"title":"id","info":{"declType":"typeClassMember","type":{"tag":"ForAll","contents":["t",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"a"},{"tag":"TypeVar","contents":"t"}]},{"tag":"TypeVar","contents":"t"}]},null]}},"sourceSpan":null},{"comments":null,"title":"categoryFn","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Category"],"Category"]},{"tag":"TypeConstructor","contents":[["Prim"],"Function"]}]}},"sourceSpan":{"start":[19,1],"name":"/home/r/purescript-stuff/bower_components/purescript-prelude/src/Control/Category.purs","end":[20,10]}}],"comments":"`Category`s consist of objects and composable morphisms between them, and\nas such are [`Semigroupoids`](#semigroupoid), but unlike `semigroupoids`\nmust have an identity element.\n\nInstances must satisfy the following law in addition to the\n`Semigroupoid` law:\n\n- Identity: `id <<< p = p <<< id = p`\n","title":"Category","info":{"fundeps":[],"arguments":[["a",null]],"declType":"typeClass","superclasses":[{"constraintClass":[["Control","Semigroupoid"],"Semigroupoid"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}]},"sourceSpan":{"start":[16,1],"name":"/home/r/purescript-stuff/bower_components/purescript-prelude/src/Control/Category.purs","end":[17,24]}},{"children":[{"comments":null,"title":"commutativeRingInt","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","CommutativeRing"],"CommutativeRing"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}},"sourceSpan":{"start":[20,1],"name":"/home/r/purescript-stuff/bower_components/purescript-prelude/src/Data/CommutativeRing.purs","end":[20,51]}},{"comments":null,"title":"commutativeRingNumber","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","CommutativeRing"],"CommutativeRing"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]}},"sourceSpan":{"start":[21,1],"name":"/home/r/purescript-stuff/bower_components/purescript-prelude/src/Data/CommutativeRing.purs","end":[21,57]}},{"comments":null,"title":"commutativeRingUnit","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","CommutativeRing"],"CommutativeRing"]},{"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}},"sourceSpan":{"start":[22,1],"name":"/home/r/purescript-stuff/bower_components/purescript-prelude/src/Data/CommutativeRing.purs","end":[22,53]}},{"comments":null,"title":"commutativeRingFn","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","CommutativeRing"],"CommutativeRing"],"constraintArgs":[{"tag":"TypeVar","contents":"b"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","CommutativeRing"],"CommutativeRing"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}},"sourceSpan":{"start":[23,1],"name":"/home/r/purescript-stuff/bower_components/purescript-prelude/src/Data/CommutativeRing.purs","end":[23,75]}}],"comments":"The `CommutativeRing` class is for rings where multiplication is\ncommutative.\n\nInstances must satisfy the following law in addition to the `Ring`\nlaws:\n\n- Commutative multiplication: `a * b = b * a`\n","title":"CommutativeRing","info":{"fundeps":[],"arguments":[["a",null]],"declType":"typeClass","superclasses":[{"constraintClass":[["Data","Ring"],"Ring"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}]},"sourceSpan":{"start":[18,1],"name":"/home/r/purescript-stuff/bower_components/purescript-prelude/src/Data/CommutativeRing.purs","end":[18,34]}},{"children":[{"comments":null,"title":"discard","info":{"declType":"typeClassMember","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["f",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Control","Bind"],"Bind"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"b"}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"b"}]}]}]}]},null]},null]}},"sourceSpan":null},{"comments":null,"title":"discardUnit","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Bind"],"Discard"]},{"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}},"sourceSpan":{"start":[79,1],"name":"/home/r/purescript-stuff/bower_components/purescript-prelude/src/Control/Bind.purs","end":[80,17]}}],"comments":"A class for types whose values can safely be discarded\nin a `do` notation block.\n\nAn example is the `Unit` type, since there is only one\npossible value which can be returned.\n","title":"Discard","info":{"fundeps":[],"arguments":[["a",null]],"declType":"typeClass","superclasses":[]},"sourceSpan":{"start":[76,1],"name":"/home/r/purescript-stuff/bower_components/purescript-prelude/src/Control/Bind.purs","end":[77,60]}},{"children":[{"comments":null,"title":"eq","info":{"declType":"typeClassMember","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}]}},"sourceSpan":null},{"comments":null,"title":"eqBoolean","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Eq"],"Eq"]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}},"sourceSpan":{"start":[33,1],"name":"/home/r/purescript-stuff/bower_components/purescript-prelude/src/Data/Eq.purs","end":[34,13]}},{"comments":null,"title":"eqInt","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Eq"],"Eq"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}},"sourceSpan":{"start":[36,1],"name":"/home/r/purescript-stuff/bower_components/purescript-prelude/src/Data/Eq.purs","end":[37,13]}},{"comments":null,"title":"eqNumber","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Eq"],"Eq"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]}},"sourceSpan":{"start":[39,1],"name":"/home/r/purescript-stuff/bower_components/purescript-prelude/src/Data/Eq.purs","end":[40,13]}},{"comments":null,"title":"eqChar","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Eq"],"Eq"]},{"tag":"TypeConstructor","contents":[["Prim"],"Char"]}]}},"sourceSpan":{"start":[42,1],"name":"/home/r/purescript-stuff/bower_components/purescript-prelude/src/Data/Eq.purs","end":[43,13]}},{"comments":null,"title":"eqString","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Eq"],"Eq"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}},"sourceSpan":{"start":[45,1],"name":"/home/r/purescript-stuff/bower_components/purescript-prelude/src/Data/Eq.purs","end":[46,13]}},{"comments":null,"title":"eqUnit","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Eq"],"Eq"]},{"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}},"sourceSpan":{"start":[48,1],"name":"/home/r/purescript-stuff/bower_components/purescript-prelude/src/Data/Eq.purs","end":[49,16]}},{"comments":null,"title":"eqVoid","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Eq"],"Eq"]},{"tag":"TypeConstructor","contents":[["Data","Void"],"Void"]}]}},"sourceSpan":{"start":[51,1],"name":"/home/r/purescript-stuff/bower_components/purescript-prelude/src/Data/Eq.purs","end":[52,16]}},{"comments":null,"title":"eqArray","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","Eq"],"Eq"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Eq"],"Eq"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[54,1],"name":"/home/r/purescript-stuff/bower_components/purescript-prelude/src/Data/Eq.purs","end":[55,22]}}],"comments":"The `Eq` type class represents types which support decidable equality.\n\n`Eq` instances should satisfy the following laws:\n\n- Reflexivity: `x == x = true`\n- Symmetry: `x == y = y == x`\n- Transitivity: if `x == y` and `y == z` then `x == z`\n\n**Note:** The `Number` type is not an entirely law abiding member of this\nclass due to the presence of `NaN`, since `NaN /= NaN`. Additionally,\ncomputing with `Number` can result in a loss of precision, so sometimes\nvalues that should be equivalent are not.\n","title":"Eq","info":{"fundeps":[],"arguments":[["a",null]],"declType":"typeClass","superclasses":[]},"sourceSpan":{"start":[21,1],"name":"/home/r/purescript-stuff/bower_components/purescript-prelude/src/Data/Eq.purs","end":[22,26]}},{"children":[{"comments":null,"title":"degree","info":{"declType":"typeClassMember","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}},"sourceSpan":null},{"comments":null,"title":"div","info":{"declType":"typeClassMember","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":null},{"comments":null,"title":"mod","info":{"declType":"typeClassMember","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":null},{"comments":null,"title":"euclideanRingInt","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","EuclideanRing"],"EuclideanRing"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}},"sourceSpan":{"start":[55,1],"name":"/home/r/purescript-stuff/bower_components/purescript-prelude/src/Data/EuclideanRing.purs","end":[58,15]}},{"comments":null,"title":"euclideanRingNumber","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","EuclideanRing"],"EuclideanRing"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]}},"sourceSpan":{"start":[60,1],"name":"/home/r/purescript-stuff/bower_components/purescript-prelude/src/Data/EuclideanRing.purs","end":[65,1]}}],"comments":"The `EuclideanRing` class is for commutative rings that support division.\nThe mathematical structure this class is based on is sometimes also called\na *Euclidean domain*.\n\nInstances must satisfy the following laws in addition to the `Ring`\nlaws:\n\n- Integral domain: `one /= zero`, and if `a` and `b` are both nonzero then\n  so is their product `a * b`\n- Euclidean function `degree`:\n  - Nonnegativity: For all nonzero `a`, `degree a >= 0`\n  - Quotient/remainder: For all `a` and `b`, where `b` is nonzero,\n    let `q = a / b` and ``r = a `mod` b``; then `a = q*b + r`, and also\n    either `r = zero` or `degree r < degree b`\n- Submultiplicative euclidean function:\n  - For all nonzero `a` and `b`, `degree a <= degree (a * b)`\n\nThe behaviour of division by `zero` is unconstrained by these laws,\nmeaning that individual instances are free to choose how to behave in this\ncase. Similarly, there are no restrictions on what the result of\n`degree zero` is; it doesn't make sense to ask for `degree zero` in the\nsame way that it doesn't make sense to divide by `zero`, so again,\nindividual instances may choose how to handle this case.\n\nFor any `EuclideanRing` which is also a `Field`, one valid choice\nfor `degree` is simply `const 1`. In fact, unless there's a specific\nreason not to, `Field` types should normally use this definition of\n`degree`.\n\nThe `Unit` instance is provided for backwards compatibility, but it is\nnot law-abiding, because `Unit` fails to form an integral domain. This\ninstance will be removed in a future release.\n","title":"EuclideanRing","info":{"fundeps":[],"arguments":[["a",null]],"declType":"typeClass","superclasses":[{"constraintClass":[["Data","CommutativeRing"],"CommutativeRing"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}]},"sourceSpan":{"start":[48,1],"name":"/home/r/purescript-stuff/bower_components/purescript-prelude/src/Data/EuclideanRing.purs","end":[51,21]}},{"children":[{"comments":null,"title":"fieldNumber","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Field"],"Field"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]}},"sourceSpan":{"start":[26,1],"name":"/home/r/purescript-stuff/bower_components/purescript-prelude/src/Data/Field.purs","end":[26,31]}}],"comments":"The `Field` class is for types that are commutative fields.\n\nInstances must satisfy the following law in addition to the\n`EuclideanRing` laws:\n\n- Non-zero multiplicative inverse: ``a `mod` b = zero`` for all `a` and `b`\n\nThe `Unit` instance is provided for backwards compatibility, but it is\nnot law-abiding, because `Unit` does not obey the `EuclideanRing` laws.\nThis instance will be removed in a future release.\n","title":"Field","info":{"fundeps":[],"arguments":[["a",null]],"declType":"typeClass","superclasses":[{"constraintClass":[["Data","EuclideanRing"],"EuclideanRing"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}]},"sourceSpan":{"start":[24,1],"name":"/home/r/purescript-stuff/bower_components/purescript-prelude/src/Data/Field.purs","end":[24,33]}},{"children":[{"comments":null,"title":"map","info":{"declType":"typeClassMember","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"b"}]}]}]},null]},null]}},"sourceSpan":null},{"comments":null,"title":"functorFn","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Functor"],"Functor"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"r"}]}}]}},"sourceSpan":{"start":[39,1],"name":"/home/r/purescript-stuff/bower_components/purescript-prelude/src/Data/Functor.purs","end":[40,16]}},{"comments":null,"title":"functorArray","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Functor"],"Functor"]},{"tag":"TypeConstructor","contents":[["Prim"],"Array"]}]}},"sourceSpan":{"start":[42,1],"name":"/home/r/purescript-stuff/bower_components/purescript-prelude/src/Data/Functor.purs","end":[43,17]}}],"comments":"A `Functor` is a type constructor which supports a mapping operation\n`map`.\n\n`map` can be used to turn functions `a -> b` into functions\n`f a -> f b` whose argument and return types use the type constructor `f`\nto represent some computational context.\n\nInstances must satisfy the following laws:\n\n- Identity: `map id = id`\n- Composition: `map (f <<< g) = map f <<< map g`\n","title":"Functor","info":{"fundeps":[],"arguments":[["f",null]],"declType":"typeClass","superclasses":[]},"sourceSpan":{"start":[24,1],"name":"/home/r/purescript-stuff/bower_components/purescript-prelude/src/Data/Functor.purs","end":[25,44]}},{"children":[{"comments":null,"title":"conj","info":{"declType":"typeClassMember","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":null},{"comments":null,"title":"disj","info":{"declType":"typeClassMember","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":null},{"comments":null,"title":"not","info":{"declType":"typeClassMember","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"a"}]}},"sourceSpan":null},{"comments":null,"title":"heytingAlgebraBoolean","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","HeytingAlgebra"],"HeytingAlgebra"]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}},"sourceSpan":{"start":[44,1],"name":"/home/r/purescript-stuff/bower_components/purescript-prelude/src/Data/HeytingAlgebra.purs","end":[50,16]}},{"comments":null,"title":"heytingAlgebraUnit","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","HeytingAlgebra"],"HeytingAlgebra"]},{"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}},"sourceSpan":{"start":[52,1],"name":"/home/r/purescript-stuff/bower_components/purescript-prelude/src/Data/HeytingAlgebra.purs","end":[58,15]}},{"comments":null,"title":"heytingAlgebraFunction","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","HeytingAlgebra"],"HeytingAlgebra"],"constraintArgs":[{"tag":"TypeVar","contents":"b"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","HeytingAlgebra"],"HeytingAlgebra"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}},"sourceSpan":{"start":[60,1],"name":"/home/r/purescript-stuff/bower_components/purescript-prelude/src/Data/HeytingAlgebra.purs","end":[66,22]}}],"comments":"The `HeytingAlgebra` type class represents types that are bounded lattices with\nan implication operator such that the following laws hold:\n\n- Associativity:\n  - `a || (b || c) = (a || b) || c`\n  - `a && (b && c) = (a && b) && c`\n- Commutativity:\n  - `a || b = b || a`\n  - `a && b = b && a`\n- Absorption:\n  - `a || (a && b) = a`\n  - `a && (a || b) = a`\n- Idempotent:\n  - `a || a = a`\n  - `a && a = a`\n- Identity:\n  - `a || ff = a`\n  - `a && tt = a`\n- Implication:\n  - ``a `implies` a = tt``\n  - ``a && (a `implies` b) = a && b``\n  - ``b && (a `implies` b) = b``\n  - ``a `implies` (b && c) = (a `implies` b) && (a `implies` c)``\n- Complemented:\n  - ``not a = a `implies` ff``\n","title":"HeytingAlgebra","info":{"fundeps":[],"arguments":[["a",null]],"declType":"typeClass","superclasses":[]},"sourceSpan":{"start":[33,1],"name":"/home/r/purescript-stuff/bower_components/purescript-prelude/src/Data/HeytingAlgebra.purs","end":[39,16]}},{"children":[{"comments":null,"title":"monadFn","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad"],"Monad"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"r"}]}}]}},"sourceSpan":{"start":[32,1],"name":"/home/r/purescript-stuff/bower_components/purescript-prelude/src/Control/Monad.purs","end":[32,35]}},{"comments":null,"title":"monadArray","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad"],"Monad"]},{"tag":"TypeConstructor","contents":[["Prim"],"Array"]}]}},"sourceSpan":{"start":[33,1],"name":"/home/r/purescript-stuff/bower_components/purescript-prelude/src/Control/Monad.purs","end":[33,35]}}],"comments":"The `Monad` type class combines the operations of the `Bind` and\n`Applicative` type classes. Therefore, `Monad` instances represent type\nconstructors which support sequential composition, and also lifting of\nfunctions of arbitrary arity.\n\nInstances must satisfy the following laws in addition to the\n`Applicative` and `Bind` laws:\n\n- Left Identity: `pure x >>= f = f x`\n- Right Identity: `x >>= pure = x`\n","title":"Monad","info":{"fundeps":[],"arguments":[["m",null]],"declType":"typeClass","superclasses":[{"constraintClass":[["Control","Applicative"],"Applicative"],"constraintArgs":[{"tag":"TypeVar","contents":"m"}],"constraintData":null},{"constraintClass":[["Control","Bind"],"Bind"],"constraintArgs":[{"tag":"TypeVar","contents":"m"}],"constraintData":null}]},"sourceSpan":{"start":[30,1],"name":"/home/r/purescript-stuff/bower_components/purescript-prelude/src/Control/Monad.purs","end":[30,41]}},{"children":[{"comments":null,"title":"compare","info":{"declType":"typeClassMember","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeConstructor","contents":[["Data","Ordering"],"Ordering"]}]}]}},"sourceSpan":null},{"comments":null,"title":"ordBoolean","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Ord"],"Ord"]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}},"sourceSpan":{"start":[36,1],"name":"/home/r/purescript-stuff/bower_components/purescript-prelude/src/Data/Ord.purs","end":[37,26]}},{"comments":null,"title":"ordInt","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Ord"],"Ord"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}},"sourceSpan":{"start":[39,1],"name":"/home/r/purescript-stuff/bower_components/purescript-prelude/src/Data/Ord.purs","end":[40,26]}},{"comments":null,"title":"ordNumber","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Ord"],"Ord"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]}},"sourceSpan":{"start":[42,1],"name":"/home/r/purescript-stuff/bower_components/purescript-prelude/src/Data/Ord.purs","end":[43,26]}},{"comments":null,"title":"ordString","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Ord"],"Ord"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}},"sourceSpan":{"start":[45,1],"name":"/home/r/purescript-stuff/bower_components/purescript-prelude/src/Data/Ord.purs","end":[46,26]}},{"comments":null,"title":"ordChar","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Ord"],"Ord"]},{"tag":"TypeConstructor","contents":[["Prim"],"Char"]}]}},"sourceSpan":{"start":[48,1],"name":"/home/r/purescript-stuff/bower_components/purescript-prelude/src/Data/Ord.purs","end":[49,26]}},{"comments":null,"title":"ordUnit","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Ord"],"Ord"]},{"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}},"sourceSpan":{"start":[51,1],"name":"/home/r/purescript-stuff/bower_components/purescript-prelude/src/Data/Ord.purs","end":[52,19]}},{"comments":null,"title":"ordVoid","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Ord"],"Ord"]},{"tag":"TypeConstructor","contents":[["Data","Void"],"Void"]}]}},"sourceSpan":{"start":[54,1],"name":"/home/r/purescript-stuff/bower_components/purescript-prelude/src/Data/Ord.purs","end":[55,19]}},{"comments":null,"title":"ordArray","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","Ord"],"Ord"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Ord"],"Ord"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[57,1],"name":"/home/r/purescript-stuff/bower_components/purescript-prelude/src/Data/Ord.purs","end":[66,1]}},{"comments":null,"title":"ordOrdering","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Ord"],"Ord"]},{"tag":"TypeConstructor","contents":[["Data","Ordering"],"Ordering"]}]}},"sourceSpan":{"start":[68,1],"name":"/home/r/purescript-stuff/bower_components/purescript-prelude/src/Data/Ord.purs","end":[75,21]}}],"comments":"The `Ord` type class represents types which support comparisons with a\n_total order_.\n\n`Ord` instances should satisfy the laws of total orderings:\n\n- Reflexivity: `a <= a`\n- Antisymmetry: if `a <= b` and `b <= a` then `a = b`\n- Transitivity: if `a <= b` and `b <= c` then `a <= c`\n","title":"Ord","info":{"fundeps":[],"arguments":[["a",null]],"declType":"typeClass","superclasses":[{"constraintClass":[["Data","Eq"],"Eq"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}]},"sourceSpan":{"start":[33,1],"name":"/home/r/purescript-stuff/bower_components/purescript-prelude/src/Data/Ord.purs","end":[34,32]}},{"children":[{"comments":null,"title":"sub","info":{"declType":"typeClassMember","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":null},{"comments":null,"title":"ringInt","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Ring"],"Ring"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}},"sourceSpan":{"start":[21,1],"name":"/home/r/purescript-stuff/bower_components/purescript-prelude/src/Data/Ring.purs","end":[22,15]}},{"comments":null,"title":"ringNumber","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Ring"],"Ring"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]}},"sourceSpan":{"start":[24,1],"name":"/home/r/purescript-stuff/bower_components/purescript-prelude/src/Data/Ring.purs","end":[25,15]}},{"comments":null,"title":"ringUnit","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Ring"],"Ring"]},{"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}},"sourceSpan":{"start":[27,1],"name":"/home/r/purescript-stuff/bower_components/purescript-prelude/src/Data/Ring.purs","end":[28,17]}},{"comments":null,"title":"ringFn","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","Ring"],"Ring"],"constraintArgs":[{"tag":"TypeVar","contents":"b"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Ring"],"Ring"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}},"sourceSpan":{"start":[30,1],"name":"/home/r/purescript-stuff/bower_components/purescript-prelude/src/Data/Ring.purs","end":[31,24]}}],"comments":"The `Ring` class is for types that support addition, multiplication,\nand subtraction operations.\n\nInstances must satisfy the following law in addition to the `Semiring`\nlaws:\n\n- Additive inverse: `a - a = (zero - a) + a = zero`\n","title":"Ring","info":{"fundeps":[],"arguments":[["a",null]],"declType":"typeClass","superclasses":[{"constraintClass":[["Data","Semiring"],"Semiring"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}]},"sourceSpan":{"start":[16,1],"name":"/home/r/purescript-stuff/bower_components/purescript-prelude/src/Data/Ring.purs","end":[17,21]}},{"children":[{"comments":null,"title":"append","info":{"declType":"typeClassMember","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":null},{"comments":null,"title":"semigroupString","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Semigroup"],"Semigroup"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}},"sourceSpan":{"start":[19,1],"name":"/home/r/purescript-stuff/bower_components/purescript-prelude/src/Data/Semigroup.purs","end":[20,24]}},{"comments":null,"title":"semigroupUnit","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Semigroup"],"Semigroup"]},{"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}},"sourceSpan":{"start":[22,1],"name":"/home/r/purescript-stuff/bower_components/purescript-prelude/src/Data/Semigroup.purs","end":[23,20]}},{"comments":null,"title":"semigroupVoid","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Semigroup"],"Semigroup"]},{"tag":"TypeConstructor","contents":[["Data","Void"],"Void"]}]}},"sourceSpan":{"start":[25,1],"name":"/home/r/purescript-stuff/bower_components/purescript-prelude/src/Data/Semigroup.purs","end":[26,20]}},{"comments":null,"title":"semigroupFn","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","Semigroup"],"Semigroup"],"constraintArgs":[{"tag":"TypeVar","contents":"s'"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Semigroup"],"Semigroup"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"s"}]},{"tag":"TypeVar","contents":"s'"}]}}]}},"sourceSpan":{"start":[28,1],"name":"/home/r/purescript-stuff/bower_components/purescript-prelude/src/Data/Semigroup.purs","end":[29,28]}},{"comments":null,"title":"semigroupArray","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Semigroup"],"Semigroup"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[31,1],"name":"/home/r/purescript-stuff/bower_components/purescript-prelude/src/Data/Semigroup.purs","end":[32,23]}}],"comments":"The `Semigroup` type class identifies an associative operation on a type.\n\nInstances are required to satisfy the following law:\n\n- Associativity: `(x <> y) <> z = x <> (y <> z)`\n\nOne example of a `Semigroup` is `String`, with `(<>)` defined as string\nconcatenation.\n","title":"Semigroup","info":{"fundeps":[],"arguments":[["a",null]],"declType":"typeClass","superclasses":[]},"sourceSpan":{"start":[14,1],"name":"/home/r/purescript-stuff/bower_components/purescript-prelude/src/Data/Semigroup.purs","end":[15,24]}},{"children":[{"comments":null,"title":"compose","info":{"declType":"typeClassMember","type":{"tag":"ForAll","contents":["d",{"tag":"ForAll","contents":["c",{"tag":"ForAll","contents":["b",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"a"},{"tag":"TypeVar","contents":"c"}]},{"tag":"TypeVar","contents":"d"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"a"},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeVar","contents":"c"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"a"},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeVar","contents":"d"}]}]}]},null]},null]},null]}},"sourceSpan":null},{"comments":null,"title":"semigroupoidFn","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Semigroupoid"],"Semigroupoid"]},{"tag":"TypeConstructor","contents":[["Prim"],"Function"]}]}},"sourceSpan":{"start":[15,1],"name":"/home/r/purescript-stuff/bower_components/purescript-prelude/src/Control/Semigroupoid.purs","end":[16,26]}}],"comments":"A `Semigroupoid` is similar to a [`Category`](#category) but does not\nrequire an identity element `id`, just composable morphisms.\n\n`Semigroupoid`s must satisfy the following law:\n\n- Associativity: `p <<< (q <<< r) = (p <<< q) <<< r`\n\nOne example of a `Semigroupoid` is the function type constructor `(->)`,\nwith `(<<<)` defined as function composition.\n","title":"Semigroupoid","info":{"fundeps":[],"arguments":[["a",null]],"declType":"typeClass","superclasses":[]},"sourceSpan":{"start":[12,1],"name":"/home/r/purescript-stuff/bower_components/purescript-prelude/src/Control/Semigroupoid.purs","end":[13,51]}},{"children":[{"comments":null,"title":"add","info":{"declType":"typeClassMember","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":null},{"comments":null,"title":"zero","info":{"declType":"typeClassMember","type":{"tag":"TypeVar","contents":"a"}},"sourceSpan":null},{"comments":null,"title":"mul","info":{"declType":"typeClassMember","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":null},{"comments":null,"title":"one","info":{"declType":"typeClassMember","type":{"tag":"TypeVar","contents":"a"}},"sourceSpan":null},{"comments":null,"title":"semiringInt","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Semiring"],"Semiring"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}},"sourceSpan":{"start":[35,1],"name":"/home/r/purescript-stuff/bower_components/purescript-prelude/src/Data/Semiring.purs","end":[41,1]}},{"comments":null,"title":"semiringNumber","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Semiring"],"Semiring"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]}},"sourceSpan":{"start":[41,1],"name":"/home/r/purescript-stuff/bower_components/purescript-prelude/src/Data/Semiring.purs","end":[47,1]}},{"comments":null,"title":"semiringFn","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","Semiring"],"Semiring"],"constraintArgs":[{"tag":"TypeVar","contents":"b"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Semiring"],"Semiring"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}},"sourceSpan":{"start":[47,1],"name":"/home/r/purescript-stuff/bower_components/purescript-prelude/src/Data/Semiring.purs","end":[51,18]}},{"comments":null,"title":"semiringUnit","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Semiring"],"Semiring"]},{"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}},"sourceSpan":{"start":[53,1],"name":"/home/r/purescript-stuff/bower_components/purescript-prelude/src/Data/Semiring.purs","end":[57,13]}}],"comments":"The `Semiring` class is for types that support an addition and\nmultiplication operation.\n\nInstances must satisfy the following laws:\n\n- Commutative monoid under addition:\n  - Associativity: `(a + b) + c = a + (b + c)`\n  - Identity: `zero + a = a + zero = a`\n  - Commutative: `a + b = b + a`\n- Monoid under multiplication:\n  - Associativity: `(a * b) * c = a * (b * c)`\n  - Identity: `one * a = a * one = a`\n- Multiplication distributes over addition:\n  - Left distributivity: `a * (b + c) = (a * b) + (a * c)`\n  - Right distributivity: `(a + b) * c = (a * c) + (b * c)`\n- Annihilation: `zero * a = a * zero = zero`\n\n**Note:** The `Number` and `Int` types are not fully law abiding\nmembers of this class hierarchy due to the potential for arithmetic\noverflows, and in the case of `Number`, the presence of `NaN` and\n`Infinity` values. The behaviour is unspecified in these cases.\n","title":"Semiring","info":{"fundeps":[],"arguments":[["a",null]],"declType":"typeClass","superclasses":[]},"sourceSpan":{"start":[26,1],"name":"/home/r/purescript-stuff/bower_components/purescript-prelude/src/Data/Semiring.purs","end":[30,12]}},{"children":[{"comments":null,"title":"show","info":{"declType":"typeClassMember","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}},"sourceSpan":null},{"comments":null,"title":"showBoolean","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Show"],"Show"]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}},"sourceSpan":{"start":[12,1],"name":"/home/r/purescript-stuff/bower_components/purescript-prelude/src/Data/Show.purs","end":[16,1]}},{"comments":null,"title":"showInt","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Show"],"Show"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}},"sourceSpan":{"start":[16,1],"name":"/home/r/purescript-stuff/bower_components/purescript-prelude/src/Data/Show.purs","end":[17,21]}},{"comments":null,"title":"showNumber","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Show"],"Show"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]}},"sourceSpan":{"start":[19,1],"name":"/home/r/purescript-stuff/bower_components/purescript-prelude/src/Data/Show.purs","end":[20,24]}},{"comments":null,"title":"showChar","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Show"],"Show"]},{"tag":"TypeConstructor","contents":[["Prim"],"Char"]}]}},"sourceSpan":{"start":[22,1],"name":"/home/r/purescript-stuff/bower_components/purescript-prelude/src/Data/Show.purs","end":[23,22]}},{"comments":null,"title":"showString","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Show"],"Show"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}},"sourceSpan":{"start":[25,1],"name":"/home/r/purescript-stuff/bower_components/purescript-prelude/src/Data/Show.purs","end":[26,24]}},{"comments":null,"title":"showArray","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","Show"],"Show"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Show"],"Show"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[28,1],"name":"/home/r/purescript-stuff/bower_components/purescript-prelude/src/Data/Show.purs","end":[29,28]}}],"comments":"The `Show` type class represents those types which can be converted into\na human-readable `String` representation.\n\nWhile not required, it is recommended that for any expression `x`, the\nstring `show x` be executable PureScript code which evaluates to the same\nvalue as the expression `x`.\n","title":"Show","info":{"fundeps":[],"arguments":[["a",null]],"declType":"typeClass","superclasses":[]},"sourceSpan":{"start":[9,1],"name":"/home/r/purescript-stuff/bower_components/purescript-prelude/src/Data/Show.purs","end":[10,22]}},{"children":[],"comments":"Perform a monadic action when a condition is true, where the conditional\nvalue is also in a monadic context.\n","title":"whenM","info":{"declType":"value","type":{"tag":"ForAll","contents":["m",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Control","Monad"],"Monad"],"constraintArgs":[{"tag":"TypeVar","contents":"m"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"m"},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"m"},{"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"m"},{"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}]}]}]},null]}},"sourceSpan":{"start":[70,1],"name":"/home/r/purescript-stuff/bower_components/purescript-prelude/src/Control/Monad.purs","end":[70,60]}},{"children":[],"comments":"Perform a applicative action when a condition is true.\n","title":"when","info":{"declType":"value","type":{"tag":"ForAll","contents":["m",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Control","Applicative"],"Applicative"],"constraintArgs":[{"tag":"TypeVar","contents":"m"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"m"},{"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"m"},{"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}]}]}]},null]}},"sourceSpan":{"start":[57,1],"name":"/home/r/purescript-stuff/bower_components/purescript-prelude/src/Control/Applicative.purs","end":[57,63]}},{"children":[],"comments":"The `void` function is used to ignore the type wrapped by a\n[`Functor`](#functor), replacing it with `Unit` and keeping only the type\ninformation provided by the type constructor itself.\n\n`void` is often useful when using `do` notation to change the return type\nof a monadic computation:\n\n```purescript\nmain = forE 1 10 \\n -> void do\n  print n\n  print (n * n)\n```\n","title":"void","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["f",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Functor"],"Functor"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}]}]},null]},null]}},"sourceSpan":{"start":[59,1],"name":"/home/r/purescript-stuff/bower_components/purescript-prelude/src/Data/Functor.purs","end":[59,47]}},{"children":[],"comments":"Perform a monadic action unless a condition is true, where the conditional\nvalue is also in a monadic context.\n","title":"unlessM","info":{"declType":"value","type":{"tag":"ForAll","contents":["m",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Control","Monad"],"Monad"],"constraintArgs":[{"tag":"TypeVar","contents":"m"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"m"},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"m"},{"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"m"},{"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}]}]}]},null]}},"sourceSpan":{"start":[77,1],"name":"/home/r/purescript-stuff/bower_components/purescript-prelude/src/Control/Monad.purs","end":[77,62]}},{"children":[],"comments":"Perform a applicative action unless a condition is true.\n","title":"unless","info":{"declType":"value","type":{"tag":"ForAll","contents":["m",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Control","Applicative"],"Applicative"],"constraintArgs":[{"tag":"TypeVar","contents":"m"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"m"},{"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"m"},{"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}]}]}]},null]}},"sourceSpan":{"start":[62,1],"name":"/home/r/purescript-stuff/bower_components/purescript-prelude/src/Control/Applicative.purs","end":[62,65]}},{"children":[],"comments":"`unit` is the sole inhabitant of the `Unit` type.\n","title":"unit","info":{"declType":"value","type":{"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}},"sourceSpan":{"start":[14,1],"name":"/home/r/purescript-stuff/bower_components/purescript-prelude/src/Data/Unit.purs","end":[14,28]}},{"children":[],"comments":"An alias for `true`, which can be useful in guard clauses:\n\n```purescript\nmax x y | x >= y    = x\n        | otherwise = y\n```\n","title":"otherwise","info":{"declType":"value","type":{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}},"sourceSpan":{"start":[9,1],"name":"/home/r/purescript-stuff/bower_components/purescript-prelude/src/Data/Boolean.purs","end":[9,21]}},{"children":[],"comments":"`notEq` tests whether one value is _not equal_ to another. Shorthand for\n`not (eq x y)`.\n","title":"notEq","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Eq"],"Eq"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}]}]},null]}},"sourceSpan":{"start":[28,1],"name":"/home/r/purescript-stuff/bower_components/purescript-prelude/src/Data/Eq.purs","end":[28,45]}},{"children":[],"comments":"`negate x` can be used as a shorthand for `zero - x`.\n","title":"negate","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Ring"],"Ring"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"a"}]}]},null]}},"sourceSpan":{"start":[34,1],"name":"/home/r/purescript-stuff/bower_components/purescript-prelude/src/Data/Ring.purs","end":[34,37]}},{"children":[],"comments":"Take the minimum of two values. If they are considered equal, the first\nargument is chosen.\n","title":"min","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Ord"],"Ord"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"a"}]}]}]},null]}},"sourceSpan":{"start":[112,1],"name":"/home/r/purescript-stuff/bower_components/purescript-prelude/src/Data/Ord.purs","end":[112,38]}},{"children":[],"comments":"Take the maximum of two values. If they are considered equal, the first\nargument is chosen.\n","title":"max","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Ord"],"Ord"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"a"}]}]}]},null]}},"sourceSpan":{"start":[121,1],"name":"/home/r/purescript-stuff/bower_components/purescript-prelude/src/Data/Ord.purs","end":[121,38]}},{"children":[],"comments":"`liftM1` provides a default implementation of `(<$>)` for any\n[`Monad`](#monad), without using `(<$>)` as provided by the\n[`Functor`](#functor)-[`Monad`](#monad) superclass relationship.\n\n`liftM1` can therefore be used to write [`Functor`](#functor) instances\nas follows:\n\n```purescript\ninstance functorF :: Functor F where\n  map = liftM1\n```\n","title":"liftM1","info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["m",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Control","Monad"],"Monad"],"constraintArgs":[{"tag":"TypeVar","contents":"m"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"m"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"m"},{"tag":"TypeVar","contents":"b"}]}]}]}]},null]},null]},null]}},"sourceSpan":{"start":[46,1],"name":"/home/r/purescript-stuff/bower_components/purescript-prelude/src/Control/Monad.purs","end":[46,58]}},{"children":[],"comments":"`liftA1` provides a default implementation of `(<$>)` for any\n[`Applicative`](#applicative) functor, without using `(<$>)` as provided\nby the [`Functor`](#functor)-[`Applicative`](#applicative) superclass\nrelationship.\n\n`liftA1` can therefore be used to write [`Functor`](#functor) instances\nas follows:\n\n```purescript\ninstance functorF :: Functor F where\n  map = liftA1\n```\n","title":"liftA1","info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["f",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Control","Applicative"],"Applicative"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"b"}]}]}]}]},null]},null]},null]}},"sourceSpan":{"start":[53,1],"name":"/home/r/purescript-stuff/bower_components/purescript-prelude/src/Control/Applicative.purs","end":[53,64]}},{"children":[],"comments":"The *least common multiple* of two values.\n","title":"lcm","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Eq"],"Eq"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","EuclideanRing"],"EuclideanRing"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"a"}]}]}]}]},null]}},"sourceSpan":{"start":[79,1],"name":"/home/r/purescript-stuff/bower_components/purescript-prelude/src/Data/EuclideanRing.purs","end":[79,56]}},{"children":[],"comments":"Collapse two applications of a monadic type constructor into one.\n","title":"join","info":{"declType":"value","type":{"tag":"ForAll","contents":["m",{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Control","Bind"],"Bind"],"constraintArgs":[{"tag":"TypeVar","contents":"m"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"m"},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"m"},{"tag":"TypeVar","contents":"a"}]}}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"m"},{"tag":"TypeVar","contents":"a"}]}]}]},null]},null]}},"sourceSpan":{"start":[83,1],"name":"/home/r/purescript-stuff/bower_components/purescript-prelude/src/Control/Bind.purs","end":[83,45]}},{"children":[],"comments":"Execute a monadic action if a condition holds.\n\nFor example:\n\n```purescript\nmain = ifM ((< 0.5) <$> random)\n         (trace \"Heads\")\n         (trace \"Tails\")\n```\n","title":"ifM","info":{"declType":"value","type":{"tag":"ForAll","contents":["m",{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Control","Bind"],"Bind"],"constraintArgs":[{"tag":"TypeVar","contents":"m"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"m"},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"m"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"m"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"m"},{"tag":"TypeVar","contents":"a"}]}]}]}]}]},null]},null]}},"sourceSpan":{"start":[115,1],"name":"/home/r/purescript-stuff/bower_components/purescript-prelude/src/Control/Bind.purs","end":[115,60]}},{"children":[],"comments":"The *greatest common divisor* of two values.\n","title":"gcd","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Eq"],"Eq"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","EuclideanRing"],"EuclideanRing"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"a"}]}]}]}]},null]}},"sourceSpan":{"start":[72,1],"name":"/home/r/purescript-stuff/bower_components/purescript-prelude/src/Data/EuclideanRing.purs","end":[72,56]}},{"children":[],"comments":"Flips the order of the arguments to a function of two arguments.\n\n```purescript\nflip const 1 2 = const 2 1 = 2\n```\n","title":"flip","info":{"declType":"value","type":{"tag":"ForAll","contents":["c",{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeVar","contents":"c"}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"c"}]}]}]},null]},null]},null]}},"sourceSpan":{"start":[17,1],"name":"/home/r/purescript-stuff/bower_components/purescript-prelude/src/Data/Function.purs","end":[17,51]}},{"children":[],"comments":"Apply a value in a computational context to a value in no context.\n\nGeneralizes `flip`.\n\n```purescript\nlongEnough :: String -> Bool\nhasSymbol :: String -> Bool\nhasDigit :: String -> Bool\npassword :: String\n\nvalidate :: String -> List Bool\nvalidate = flap [longEnough, hasSymbol, hasDigit]\n```\n\n```purescript\nflap (-) 3 4 == 1\nthreeve <$> Just 1 <@> 'a' <*> Just true == Just (threeve 1 'a' true)\n```\n","title":"flap","info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["f",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Functor"],"Functor"],"constraintArgs":[{"tag":"TypeVar","contents":"f"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"b"}]}]}]}]},null]},null]},null]}},"sourceSpan":{"start":[93,1],"name":"/home/r/purescript-stuff/bower_components/purescript-prelude/src/Data/Functor.purs","end":[93,58]}},{"children":[],"comments":"Returns its first argument and ignores its second.\n\n```purescript\nconst 1 \"hello\" = 1\n```\n","title":"const","info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeVar","contents":"a"}]}]},null]},null]}},"sourceSpan":{"start":[25,1],"name":"/home/r/purescript-stuff/bower_components/purescript-prelude/src/Data/Function.purs","end":[25,33]}},{"children":[],"comments":"Compares two values by mapping them to a type with an `Ord` instance.\n","title":"comparing","info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Ord"],"Ord"],"constraintArgs":[{"tag":"TypeVar","contents":"b"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeConstructor","contents":[["Data","Ordering"],"Ordering"]}]}]}}]}]},null]},null]}},"sourceSpan":{"start":[107,1],"name":"/home/r/purescript-stuff/bower_components/purescript-prelude/src/Data/Ord.purs","end":[107,67]}},{"children":[],"comments":"Clamp a value between a minimum and a maximum. For example:\n\n``` purescript\nlet f = clamp 0 10\nf (-5) == 0\nf 5    == 5\nf 15   == 10\n```\n","title":"clamp","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Ord"],"Ord"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"a"}]}]}]}]},null]}},"sourceSpan":{"start":[136,1],"name":"/home/r/purescript-stuff/bower_components/purescript-prelude/src/Data/Ord.purs","end":[136,45]}},{"children":[],"comments":"Test whether a value is between a minimum and a maximum (inclusive).\nFor example:\n\n``` purescript\nlet f = between 0 10\nf 0    == true\nf (-5) == false\nf 5    == true\nf 10   == true\nf 15   == false\n```\n","title":"between","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Ord"],"Ord"],"constraintArgs":[{"tag":"TypeVar","contents":"a"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}]}]}]},null]}},"sourceSpan":{"start":[150,1],"name":"/home/r/purescript-stuff/bower_components/purescript-prelude/src/Data/Ord.purs","end":[150,53]}},{"children":[],"comments":"`ap` provides a default implementation of `(<*>)` for any\n[`Monad`](#monad), without using `(<*>)` as provided by the\n[`Apply`](#apply)-[`Monad`](#monad) superclass relationship.\n\n`ap` can therefore be used to write [`Apply`](#apply) instances as\nfollows:\n\n```purescript\ninstance applyF :: Apply F where\n  apply = ap\n```\n","title":"ap","info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["m",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Control","Monad"],"Monad"],"constraintArgs":[{"tag":"TypeVar","contents":"m"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"m"},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"m"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"m"},{"tag":"TypeVar","contents":"b"}]}]}]}]},null]},null]},null]}},"sourceSpan":{"start":[62,1],"name":"/home/r/purescript-stuff/bower_components/purescript-prelude/src/Control/Monad.purs","end":[62,56]}},{"children":[],"comments":null,"title":"absurd","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Void"],"Void"]}]},{"tag":"TypeVar","contents":"a"}]},null]}},"sourceSpan":{"start":[15,1],"name":"/home/r/purescript-stuff/bower_components/purescript-prelude/src/Data/Void.purs","end":[15,30]}},{"children":[],"comments":null,"title":"(||)","info":{"declType":"alias","alias":[["Data","HeytingAlgebra"],{"Right":{"Left":{"Ident":"disj"}}}],"fixity":{"associativity":"infixr","precedence":2}},"sourceSpan":{"start":[42,1],"name":"/home/r/purescript-stuff/bower_components/purescript-prelude/src/Data/HeytingAlgebra.purs","end":[42,20]}},{"children":[],"comments":null,"title":"(>>>)","info":{"declType":"alias","alias":[["Control","Semigroupoid"],{"Right":{"Left":{"Ident":"composeFlipped"}}}],"fixity":{"associativity":"infixr","precedence":9}},"sourceSpan":{"start":[24,1],"name":"/home/r/purescript-stuff/bower_components/purescript-prelude/src/Control/Semigroupoid.purs","end":[24,28]}},{"children":[],"comments":null,"title":"(>>=)","info":{"declType":"alias","alias":[["Control","Bind"],{"Right":{"Left":{"Ident":"bind"}}}],"fixity":{"associativity":"infixl","precedence":1}},"sourceSpan":{"start":[51,1],"name":"/home/r/purescript-stuff/bower_components/purescript-prelude/src/Control/Bind.purs","end":[51,21]}},{"children":[],"comments":null,"title":"(>=>)","info":{"declType":"alias","alias":[["Control","Bind"],{"Right":{"Left":{"Ident":"composeKleisli"}}}],"fixity":{"associativity":"infixr","precedence":1}},"sourceSpan":{"start":[98,1],"name":"/home/r/purescript-stuff/bower_components/purescript-prelude/src/Control/Bind.purs","end":[98,31]}},{"children":[],"comments":null,"title":"(>=)","info":{"declType":"alias","alias":[["Data","Ord"],{"Right":{"Left":{"Ident":"greaterThanOrEq"}}}],"fixity":{"associativity":"infixl","precedence":4}},"sourceSpan":{"start":[104,1],"name":"/home/r/purescript-stuff/bower_components/purescript-prelude/src/Data/Ord.purs","end":[104,31]}},{"children":[],"comments":null,"title":"(>)","info":{"declType":"alias","alias":[["Data","Ord"],{"Right":{"Left":{"Ident":"greaterThan"}}}],"fixity":{"associativity":"infixl","precedence":4}},"sourceSpan":{"start":[103,1],"name":"/home/r/purescript-stuff/bower_components/purescript-prelude/src/Data/Ord.purs","end":[103,26]}},{"children":[],"comments":null,"title":"(==)","info":{"declType":"alias","alias":[["Data","Eq"],{"Right":{"Left":{"Ident":"eq"}}}],"fixity":{"associativity":"infix","precedence":4}},"sourceSpan":{"start":[24,1],"name":"/home/r/purescript-stuff/bower_components/purescript-prelude/src/Data/Eq.purs","end":[24,17]}},{"children":[],"comments":null,"title":"(=<<)","info":{"declType":"alias","alias":[["Control","Bind"],{"Right":{"Left":{"Ident":"bindFlipped"}}}],"fixity":{"associativity":"infixr","precedence":1}},"sourceSpan":{"start":[61,1],"name":"/home/r/purescript-stuff/bower_components/purescript-prelude/src/Control/Bind.purs","end":[61,28]}},{"children":[],"comments":null,"title":"(<@>)","info":{"declType":"alias","alias":[["Data","Functor"],{"Right":{"Left":{"Ident":"flap"}}}],"fixity":{"associativity":"infixl","precedence":4}},"sourceSpan":{"start":[96,1],"name":"/home/r/purescript-stuff/bower_components/purescript-prelude/src/Data/Functor.purs","end":[96,18]}},{"children":[],"comments":null,"title":"(<>)","info":{"declType":"alias","alias":[["Data","Semigroup"],{"Right":{"Left":{"Ident":"append"}}}],"fixity":{"associativity":"infixr","precedence":5}},"sourceSpan":{"start":[17,1],"name":"/home/r/purescript-stuff/bower_components/purescript-prelude/src/Data/Semigroup.purs","end":[17,22]}},{"children":[],"comments":null,"title":"(<=<)","info":{"declType":"alias","alias":[["Control","Bind"],{"Right":{"Left":{"Ident":"composeKleisliFlipped"}}}],"fixity":{"associativity":"infixr","precedence":1}},"sourceSpan":{"start":[104,1],"name":"/home/r/purescript-stuff/bower_components/purescript-prelude/src/Control/Bind.purs","end":[104,38]}},{"children":[],"comments":null,"title":"(<=)","info":{"declType":"alias","alias":[["Data","Ord"],{"Right":{"Left":{"Ident":"lessThanOrEq"}}}],"fixity":{"associativity":"infixl","precedence":4}},"sourceSpan":{"start":[102,1],"name":"/home/r/purescript-stuff/bower_components/purescript-prelude/src/Data/Ord.purs","end":[102,28]}},{"children":[],"comments":null,"title":"(<<<)","info":{"declType":"alias","alias":[["Control","Semigroupoid"],{"Right":{"Left":{"Ident":"compose"}}}],"fixity":{"associativity":"infixr","precedence":9}},"sourceSpan":{"start":[18,1],"name":"/home/r/purescript-stuff/bower_components/purescript-prelude/src/Control/Semigroupoid.purs","end":[18,24]}},{"children":[],"comments":null,"title":"(<*>)","info":{"declType":"alias","alias":[["Control","Apply"],{"Right":{"Left":{"Ident":"apply"}}}],"fixity":{"associativity":"infixl","precedence":4}},"sourceSpan":{"start":[38,1],"name":"/home/r/purescript-stuff/bower_components/purescript-prelude/src/Control/Apply.purs","end":[38,22]}},{"children":[],"comments":null,"title":"(<*)","info":{"declType":"alias","alias":[["Control","Apply"],{"Right":{"Left":{"Ident":"applyFirst"}}}],"fixity":{"associativity":"infixl","precedence":4}},"sourceSpan":{"start":[52,1],"name":"/home/r/purescript-stuff/bower_components/purescript-prelude/src/Control/Apply.purs","end":[52,26]}},{"children":[],"comments":null,"title":"(<$>)","info":{"declType":"alias","alias":[["Data","Functor"],{"Right":{"Left":{"Ident":"map"}}}],"fixity":{"associativity":"infixl","precedence":4}},"sourceSpan":{"start":[27,1],"name":"/home/r/purescript-stuff/bower_components/purescript-prelude/src/Data/Functor.purs","end":[27,20]}},{"children":[],"comments":null,"title":"(<$)","info":{"declType":"alias","alias":[["Data","Functor"],{"Right":{"Left":{"Ident":"voidRight"}}}],"fixity":{"associativity":"infixl","precedence":4}},"sourceSpan":{"start":[67,1],"name":"/home/r/purescript-stuff/bower_components/purescript-prelude/src/Data/Functor.purs","end":[67,25]}},{"children":[],"comments":null,"title":"(<#>)","info":{"declType":"alias","alias":[["Data","Functor"],{"Right":{"Left":{"Ident":"mapFlipped"}}}],"fixity":{"associativity":"infixl","precedence":1}},"sourceSpan":{"start":[37,1],"name":"/home/r/purescript-stuff/bower_components/purescript-prelude/src/Data/Functor.purs","end":[37,27]}},{"children":[],"comments":null,"title":"(<)","info":{"declType":"alias","alias":[["Data","Ord"],{"Right":{"Left":{"Ident":"lessThan"}}}],"fixity":{"associativity":"infixl","precedence":4}},"sourceSpan":{"start":[101,1],"name":"/home/r/purescript-stuff/bower_components/purescript-prelude/src/Data/Ord.purs","end":[101,23]}},{"children":[],"comments":null,"title":"(/=)","info":{"declType":"alias","alias":[["Data","Eq"],{"Right":{"Left":{"Ident":"notEq"}}}],"fixity":{"associativity":"infix","precedence":4}},"sourceSpan":{"start":[31,1],"name":"/home/r/purescript-stuff/bower_components/purescript-prelude/src/Data/Eq.purs","end":[31,20]}},{"children":[],"comments":null,"title":"(/)","info":{"declType":"alias","alias":[["Data","EuclideanRing"],{"Right":{"Left":{"Ident":"div"}}}],"fixity":{"associativity":"infixl","precedence":7}},"sourceSpan":{"start":[53,1],"name":"/home/r/purescript-stuff/bower_components/purescript-prelude/src/Data/EuclideanRing.purs","end":[53,18]}},{"children":[],"comments":null,"title":"(-)","info":{"declType":"alias","alias":[["Data","Ring"],{"Right":{"Left":{"Ident":"sub"}}}],"fixity":{"associativity":"infixl","precedence":6}},"sourceSpan":{"start":[19,1],"name":"/home/r/purescript-stuff/bower_components/purescript-prelude/src/Data/Ring.purs","end":[19,18]}},{"children":[],"comments":null,"title":"(+)","info":{"declType":"alias","alias":[["Data","Semiring"],{"Right":{"Left":{"Ident":"add"}}}],"fixity":{"associativity":"infixl","precedence":6}},"sourceSpan":{"start":[32,1],"name":"/home/r/purescript-stuff/bower_components/purescript-prelude/src/Data/Semiring.purs","end":[32,18]}},{"children":[],"comments":null,"title":"(*>)","info":{"declType":"alias","alias":[["Control","Apply"],{"Right":{"Left":{"Ident":"applySecond"}}}],"fixity":{"associativity":"infixl","precedence":4}},"sourceSpan":{"start":[58,1],"name":"/home/r/purescript-stuff/bower_components/purescript-prelude/src/Control/Apply.purs","end":[58,27]}},{"children":[],"comments":null,"title":"(*)","info":{"declType":"alias","alias":[["Data","Semiring"],{"Right":{"Left":{"Ident":"mul"}}}],"fixity":{"associativity":"infixl","precedence":7}},"sourceSpan":{"start":[33,1],"name":"/home/r/purescript-stuff/bower_components/purescript-prelude/src/Data/Semiring.purs","end":[33,18]}},{"children":[],"comments":null,"title":"(&&)","info":{"declType":"alias","alias":[["Data","HeytingAlgebra"],{"Right":{"Left":{"Ident":"conj"}}}],"fixity":{"associativity":"infixr","precedence":3}},"sourceSpan":{"start":[41,1],"name":"/home/r/purescript-stuff/bower_components/purescript-prelude/src/Data/HeytingAlgebra.purs","end":[41,20]}},{"children":[],"comments":null,"title":"($>)","info":{"declType":"alias","alias":[["Data","Functor"],{"Right":{"Left":{"Ident":"voidLeft"}}}],"fixity":{"associativity":"infixl","precedence":4}},"sourceSpan":{"start":[73,1],"name":"/home/r/purescript-stuff/bower_components/purescript-prelude/src/Data/Functor.purs","end":[73,24]}},{"children":[],"comments":"Applies a function to an argument: the reverse of `(#)`.\n\n```purescript\nlength $ groupBy productCategory $ filter isInStock $ products\n```\n\nis equivalent to:\n\n```purescript\nlength (groupBy productCategory (filter isInStock products))\n```\n\nOr another alternative equivalent, applying chain of composed functions to\na value:\n\n```purescript\nlength <<< groupBy productCategory <<< filter isInStock $ products\n```\n","title":"($)","info":{"declType":"alias","alias":[["Data","Function"],{"Right":{"Left":{"Ident":"apply"}}}],"fixity":{"associativity":"infixr","precedence":0}},"sourceSpan":{"start":[52,1],"name":"/home/r/purescript-stuff/bower_components/purescript-prelude/src/Data/Function.purs","end":[52,20]}},{"children":[],"comments":"Applies an argument to a function: the reverse of `($)`.\n\n```purescript\nproducts # filter isInStock # groupBy productCategory # length\n```\n\nis equivalent to:\n\n```purescript\nlength (groupBy productCategory (filter isInStock products))\n```\n\nOr another alternative equivalent, applying a value to a chain of composed\nfunctions:\n\n```purescript\nproducts # filter isInStock >>> groupBy productCategory >>> length\n```\n","title":"(#)","info":{"declType":"alias","alias":[["Data","Function"],{"Right":{"Left":{"Ident":"applyFlipped"}}}],"fixity":{"associativity":"infixl","precedence":1}},"sourceSpan":{"start":[78,1],"name":"/home/r/purescript-stuff/bower_components/purescript-prelude/src/Data/Function.purs","end":[78,27]}},{"children":[],"comments":null,"title":"type (~>)","info":{"declType":"alias","alias":[["Data","NaturalTransformation"],{"Left":"NaturalTransformation"}],"fixity":{"associativity":"infixr","precedence":4}},"sourceSpan":{"start":[19,1],"name":"/home/r/purescript-stuff/bower_components/purescript-prelude/src/Data/NaturalTransformation.purs","end":[19,40]}}]},{"moduleName":{"package":"purescript-proxy","item":["Type","Proxy"]},"declarations":[{"children":[{"comments":null,"title":"Proxy3","info":{"arguments":[],"declType":"dataConstructor"},"sourceSpan":null},{"comments":null,"title":"eqProxy3","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Eq"],"Eq"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Type","Proxy"],"Proxy3"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[151,1],"name":"/home/r/purescript-stuff/bower_components/purescript-proxy/src/Type/Proxy.purs","end":[151,42]}},{"comments":null,"title":"ordProxy3","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Ord"],"Ord"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Type","Proxy"],"Proxy3"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[153,1],"name":"/home/r/purescript-stuff/bower_components/purescript-proxy/src/Type/Proxy.purs","end":[153,44]}},{"comments":null,"title":"booleanAlgebraProxy3","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","BooleanAlgebra"],"BooleanAlgebra"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Type","Proxy"],"Proxy3"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[155,1],"name":"/home/r/purescript-stuff/bower_components/purescript-proxy/src/Type/Proxy.purs","end":[155,59]}},{"comments":null,"title":"boundedProxy3","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Bounded"],"Bounded"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Type","Proxy"],"Proxy3"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[157,1],"name":"/home/r/purescript-stuff/bower_components/purescript-proxy/src/Type/Proxy.purs","end":[159,15]}},{"comments":null,"title":"commutativeRingProxy3","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","CommutativeRing"],"CommutativeRing"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Type","Proxy"],"Proxy3"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[161,1],"name":"/home/r/purescript-stuff/bower_components/purescript-proxy/src/Type/Proxy.purs","end":[161,61]}},{"comments":null,"title":"discardProxy3","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Bind"],"Discard"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Type","Proxy"],"Proxy3"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[163,1],"name":"/home/r/purescript-stuff/bower_components/purescript-proxy/src/Type/Proxy.purs","end":[164,17]}},{"comments":null,"title":"heytingAlgebraProxy3","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","HeytingAlgebra"],"HeytingAlgebra"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Type","Proxy"],"Proxy3"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[166,1],"name":"/home/r/purescript-stuff/bower_components/purescript-proxy/src/Type/Proxy.purs","end":[172,14]}},{"comments":null,"title":"ringProxy3","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Ring"],"Ring"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Type","Proxy"],"Proxy3"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[174,1],"name":"/home/r/purescript-stuff/bower_components/purescript-proxy/src/Type/Proxy.purs","end":[175,19]}},{"comments":null,"title":"semigroupProxy3","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Semigroup"],"Semigroup"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Type","Proxy"],"Proxy3"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[177,1],"name":"/home/r/purescript-stuff/bower_components/purescript-proxy/src/Type/Proxy.purs","end":[178,22]}},{"comments":null,"title":"semiringProxy3","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Semiring"],"Semiring"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Type","Proxy"],"Proxy3"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[180,1],"name":"/home/r/purescript-stuff/bower_components/purescript-proxy/src/Type/Proxy.purs","end":[184,16]}},{"comments":null,"title":"showProxy3","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Show"],"Show"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Type","Proxy"],"Proxy3"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[186,1],"name":"/home/r/purescript-stuff/bower_components/purescript-proxy/src/Type/Proxy.purs","end":[187,12]}}],"comments":"Value proxy for kind `Type -> Type -> Type` types.\n","title":"Proxy3","info":{"declType":"data","dataDeclType":"data","typeArguments":[["a",{"tag":"FunKind","contents":[{"tag":"NamedKind","contents":[["Prim"],"Type"]},{"tag":"FunKind","contents":[{"tag":"NamedKind","contents":[["Prim"],"Type"]},{"tag":"NamedKind","contents":[["Prim"],"Type"]}]}]}]]},"sourceSpan":{"start":[149,1],"name":"/home/r/purescript-stuff/bower_components/purescript-proxy/src/Type/Proxy.purs","end":[149,49]}},{"children":[{"comments":null,"title":"Proxy2","info":{"arguments":[],"declType":"dataConstructor"},"sourceSpan":null},{"comments":null,"title":"eqProxy2","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Eq"],"Eq"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Type","Proxy"],"Proxy2"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[110,1],"name":"/home/r/purescript-stuff/bower_components/purescript-proxy/src/Type/Proxy.purs","end":[110,42]}},{"comments":null,"title":"ordProxy2","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Ord"],"Ord"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Type","Proxy"],"Proxy2"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[112,1],"name":"/home/r/purescript-stuff/bower_components/purescript-proxy/src/Type/Proxy.purs","end":[112,44]}},{"comments":null,"title":"booleanAlgebraProxy2","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","BooleanAlgebra"],"BooleanAlgebra"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Type","Proxy"],"Proxy2"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[114,1],"name":"/home/r/purescript-stuff/bower_components/purescript-proxy/src/Type/Proxy.purs","end":[114,59]}},{"comments":null,"title":"boundedProxy2","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Bounded"],"Bounded"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Type","Proxy"],"Proxy2"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[116,1],"name":"/home/r/purescript-stuff/bower_components/purescript-proxy/src/Type/Proxy.purs","end":[118,15]}},{"comments":null,"title":"commutativeRingProxy2","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","CommutativeRing"],"CommutativeRing"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Type","Proxy"],"Proxy2"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[120,1],"name":"/home/r/purescript-stuff/bower_components/purescript-proxy/src/Type/Proxy.purs","end":[120,61]}},{"comments":null,"title":"discardProxy2","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Bind"],"Discard"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Type","Proxy"],"Proxy2"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[122,1],"name":"/home/r/purescript-stuff/bower_components/purescript-proxy/src/Type/Proxy.purs","end":[123,17]}},{"comments":null,"title":"heytingAlgebraProxy2","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","HeytingAlgebra"],"HeytingAlgebra"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Type","Proxy"],"Proxy2"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[125,1],"name":"/home/r/purescript-stuff/bower_components/purescript-proxy/src/Type/Proxy.purs","end":[131,14]}},{"comments":null,"title":"ringProxy2","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Ring"],"Ring"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Type","Proxy"],"Proxy2"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[133,1],"name":"/home/r/purescript-stuff/bower_components/purescript-proxy/src/Type/Proxy.purs","end":[134,19]}},{"comments":null,"title":"semigroupProxy2","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Semigroup"],"Semigroup"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Type","Proxy"],"Proxy2"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[136,1],"name":"/home/r/purescript-stuff/bower_components/purescript-proxy/src/Type/Proxy.purs","end":[137,22]}},{"comments":null,"title":"semiringProxy2","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Semiring"],"Semiring"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Type","Proxy"],"Proxy2"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[139,1],"name":"/home/r/purescript-stuff/bower_components/purescript-proxy/src/Type/Proxy.purs","end":[143,16]}},{"comments":null,"title":"showProxy2","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Show"],"Show"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Type","Proxy"],"Proxy2"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[145,1],"name":"/home/r/purescript-stuff/bower_components/purescript-proxy/src/Type/Proxy.purs","end":[148,1]}}],"comments":"Value proxy for kind `Type -> Type` types.\n","title":"Proxy2","info":{"declType":"data","dataDeclType":"data","typeArguments":[["a",{"tag":"FunKind","contents":[{"tag":"NamedKind","contents":[["Prim"],"Type"]},{"tag":"NamedKind","contents":[["Prim"],"Type"]}]}]]},"sourceSpan":{"start":[108,1],"name":"/home/r/purescript-stuff/bower_components/purescript-proxy/src/Type/Proxy.purs","end":[108,41]}},{"children":[{"comments":null,"title":"Proxy","info":{"arguments":[],"declType":"dataConstructor"},"sourceSpan":null},{"comments":null,"title":"eqProxy","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Eq"],"Eq"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Type","Proxy"],"Proxy"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[56,1],"name":"/home/r/purescript-stuff/bower_components/purescript-proxy/src/Type/Proxy.purs","end":[56,40]}},{"comments":null,"title":"functorProxy","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Functor"],"Functor"]},{"tag":"TypeConstructor","contents":[["Type","Proxy"],"Proxy"]}]}},"sourceSpan":{"start":[58,1],"name":"/home/r/purescript-stuff/bower_components/purescript-proxy/src/Type/Proxy.purs","end":[58,46]}},{"comments":null,"title":"ordProxy","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Ord"],"Ord"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Type","Proxy"],"Proxy"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[60,1],"name":"/home/r/purescript-stuff/bower_components/purescript-proxy/src/Type/Proxy.purs","end":[60,42]}},{"comments":null,"title":"applicativeProxy","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Applicative"],"Applicative"]},{"tag":"TypeConstructor","contents":[["Type","Proxy"],"Proxy"]}]}},"sourceSpan":{"start":[62,1],"name":"/home/r/purescript-stuff/bower_components/purescript-proxy/src/Type/Proxy.purs","end":[63,17]}},{"comments":null,"title":"applyProxy","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Apply"],"Apply"]},{"tag":"TypeConstructor","contents":[["Type","Proxy"],"Proxy"]}]}},"sourceSpan":{"start":[65,1],"name":"/home/r/purescript-stuff/bower_components/purescript-proxy/src/Type/Proxy.purs","end":[66,20]}},{"comments":null,"title":"bindProxy","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Bind"],"Bind"]},{"tag":"TypeConstructor","contents":[["Type","Proxy"],"Proxy"]}]}},"sourceSpan":{"start":[68,1],"name":"/home/r/purescript-stuff/bower_components/purescript-proxy/src/Type/Proxy.purs","end":[69,19]}},{"comments":null,"title":"booleanAlgebraProxy","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","BooleanAlgebra"],"BooleanAlgebra"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Type","Proxy"],"Proxy"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[71,1],"name":"/home/r/purescript-stuff/bower_components/purescript-proxy/src/Type/Proxy.purs","end":[71,57]}},{"comments":null,"title":"boundedProxy","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Bounded"],"Bounded"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Type","Proxy"],"Proxy"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[73,1],"name":"/home/r/purescript-stuff/bower_components/purescript-proxy/src/Type/Proxy.purs","end":[75,14]}},{"comments":null,"title":"commutativeRingProxy","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","CommutativeRing"],"CommutativeRing"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Type","Proxy"],"Proxy"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[77,1],"name":"/home/r/purescript-stuff/bower_components/purescript-proxy/src/Type/Proxy.purs","end":[77,59]}},{"comments":null,"title":"discardProxy","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Bind"],"Discard"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Type","Proxy"],"Proxy"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[79,1],"name":"/home/r/purescript-stuff/bower_components/purescript-proxy/src/Type/Proxy.purs","end":[80,17]}},{"comments":null,"title":"heytingAlgebraProxy","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","HeytingAlgebra"],"HeytingAlgebra"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Type","Proxy"],"Proxy"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[82,1],"name":"/home/r/purescript-stuff/bower_components/purescript-proxy/src/Type/Proxy.purs","end":[88,13]}},{"comments":null,"title":"monadProxy","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad"],"Monad"]},{"tag":"TypeConstructor","contents":[["Type","Proxy"],"Proxy"]}]}},"sourceSpan":{"start":[90,1],"name":"/home/r/purescript-stuff/bower_components/purescript-proxy/src/Type/Proxy.purs","end":[90,35]}},{"comments":null,"title":"ringProxy","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Ring"],"Ring"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Type","Proxy"],"Proxy"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[92,1],"name":"/home/r/purescript-stuff/bower_components/purescript-proxy/src/Type/Proxy.purs","end":[93,18]}},{"comments":null,"title":"semigroupProxy","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Semigroup"],"Semigroup"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Type","Proxy"],"Proxy"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[95,1],"name":"/home/r/purescript-stuff/bower_components/purescript-proxy/src/Type/Proxy.purs","end":[96,21]}},{"comments":null,"title":"semiringProxy","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Semiring"],"Semiring"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Type","Proxy"],"Proxy"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[98,1],"name":"/home/r/purescript-stuff/bower_components/purescript-proxy/src/Type/Proxy.purs","end":[102,15]}},{"comments":null,"title":"showProxy","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Show"],"Show"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Type","Proxy"],"Proxy"]},{"tag":"TypeVar","contents":"a"}]}}]}},"sourceSpan":{"start":[104,1],"name":"/home/r/purescript-stuff/bower_components/purescript-proxy/src/Type/Proxy.purs","end":[107,1]}}],"comments":"Value proxy for kind `Type` types.\n","title":"Proxy","info":{"declType":"data","dataDeclType":"data","typeArguments":[["a",null]]},"sourceSpan":{"start":[54,1],"name":"/home/r/purescript-stuff/bower_components/purescript-proxy/src/Type/Proxy.purs","end":[54,21]}}]},{"moduleName":{"package":"purescript-unsafe-coerce","item":["Unsafe","Coerce"]},"declarations":[{"children":[],"comments":"A _highly unsafe_ function, which can be used to persuade the type system that\nany type is the same as any other type. When using this function, it is your\n(that is, the caller's) responsibility to ensure that the underlying\nrepresentation for both types is the same.\n\nOne application for this function is to avoid doing work that you know is a\nno-op because of newtypes. For example, if you have an `Array (Conj a)` and you\nwant an `Array (Disj a)`, you could do `Data.Array.map (runConj >>> Disj)`, but\nthis performs an unnecessary traversal. `unsafeCoerce` accomplishes the same\nfor free.\n\nIt is highly recommended to define specializations of this function rather than\nusing it as-is. For example:\n\n```purescript\nmapConjToDisj :: forall a. Array (Conj a) -> Array (Disj a)\nmapConjToDisj = unsafeCoerce\n```\n\nThis way, you won't have any nasty surprises due to the inferred type being\ndifferent to what you expected.\n","title":"unsafeCoerce","info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]},null]},null]}},"sourceSpan":{"start":[27,1],"name":"/home/r/purescript-stuff/bower_components/purescript-unsafe-coerce/src/Unsafe/Coerce.purs","end":[27,49]}}]}],"name":"Stuff","comments":null,"declarations":[{"children":[],"comments":null,"title":"type (\\/)","info":{"declType":"alias","alias":[["Data","Either"],{"Left":"Either"}],"fixity":{"associativity":"infixr","precedence":6}},"sourceSpan":{"start":[111,1],"name":"/home/r/purescript-stuff/src/Stuff.purs","end":[111,27]}},{"children":[],"comments":null,"title":"log","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad","IOSync"],"IOSync"]},{"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}]}},"sourceSpan":{"start":[113,1],"name":"/home/r/purescript-stuff/src/Stuff.purs","end":[113,29]}},{"children":[],"comments":null,"title":"logError","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad","IOSync"],"IOSync"]},{"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}]}},"sourceSpan":{"start":[116,1],"name":"/home/r/purescript-stuff/src/Stuff.purs","end":[116,34]}},{"children":[],"comments":null,"title":"logInfo","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad","IOSync"],"IOSync"]},{"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}]}},"sourceSpan":{"start":[119,1],"name":"/home/r/purescript-stuff/src/Stuff.purs","end":[119,33]}},{"children":[],"comments":null,"title":"logWarning","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad","IOSync"],"IOSync"]},{"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}]}},"sourceSpan":{"start":[122,1],"name":"/home/r/purescript-stuff/src/Stuff.purs","end":[122,36]}},{"children":[],"comments":null,"title":"dlmap","info":{"declType":"value","type":{"tag":"ForAll","contents":["p",{"tag":"ForAll","contents":["c",{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Profunctor"],"Profunctor"],"constraintArgs":[{"tag":"TypeVar","contents":"p"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"p"},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeVar","contents":"c"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"p"},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"c"}]}]}]}]},null]},null]},null]},null]}},"sourceSpan":{"start":[125,1],"name":"/home/r/purescript-stuff/src/Stuff.purs","end":[125,63]}},{"children":[],"comments":null,"title":"drmap","info":{"declType":"value","type":{"tag":"ForAll","contents":["p",{"tag":"ForAll","contents":["c",{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Profunctor"],"Profunctor"],"constraintArgs":[{"tag":"TypeVar","contents":"p"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeVar","contents":"c"}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"p"},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"p"},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"c"}]}]}]}]},null]},null]},null]},null]}},"sourceSpan":{"start":[128,1],"name":"/home/r/purescript-stuff/src/Stuff.purs","end":[128,63]}},{"children":[],"comments":null,"title":"(\\)","info":{"declType":"alias","alias":[["Control","Semigroupoid"],{"Right":{"Left":{"Ident":"compose"}}}],"fixity":{"associativity":"infixr","precedence":9}},"sourceSpan":{"start":[131,1],"name":"/home/r/purescript-stuff/src/Stuff.purs","end":[131,22]}},{"children":[],"comments":null,"title":"(\\\\)","info":{"declType":"alias","alias":[["Stuff"],{"Right":{"Left":{"Ident":"compose2"}}}],"fixity":{"associativity":"infixr","precedence":9}},"sourceSpan":{"start":[132,1],"name":"/home/r/purescript-stuff/src/Stuff.purs","end":[132,24]}},{"children":[],"comments":null,"title":"(\\\\\\)","info":{"declType":"alias","alias":[["Stuff"],{"Right":{"Left":{"Ident":"compose3"}}}],"fixity":{"associativity":"infixr","precedence":9}},"sourceSpan":{"start":[133,1],"name":"/home/r/purescript-stuff/src/Stuff.purs","end":[133,25]}},{"children":[],"comments":null,"title":"(\\\\\\\\)","info":{"declType":"alias","alias":[["Stuff"],{"Right":{"Left":{"Ident":"compose4"}}}],"fixity":{"associativity":"infixr","precedence":9}},"sourceSpan":{"start":[134,1],"name":"/home/r/purescript-stuff/src/Stuff.purs","end":[134,26]}},{"children":[],"comments":null,"title":"(\\\\\\\\\\)","info":{"declType":"alias","alias":[["Stuff"],{"Right":{"Left":{"Ident":"compose5"}}}],"fixity":{"associativity":"infixr","precedence":9}},"sourceSpan":{"start":[135,1],"name":"/home/r/purescript-stuff/src/Stuff.purs","end":[135,27]}},{"children":[],"comments":null,"title":"compose2","info":{"declType":"value","type":{"tag":"ForAll","contents":["t99",{"tag":"ForAll","contents":["t98",{"tag":"ForAll","contents":["t102",{"tag":"ForAll","contents":["t101",{"tag":"ForAll","contents":["t100",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Control","Semigroupoid"],"Semigroupoid"],"constraintArgs":[{"tag":"TypeVar","contents":"t99"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"t99"},{"tag":"TypeVar","contents":"t101"}]},{"tag":"TypeVar","contents":"t100"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"t98"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"t99"},{"tag":"TypeVar","contents":"t102"}]},{"tag":"TypeVar","contents":"t101"}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"t98"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"t99"},{"tag":"TypeVar","contents":"t102"}]},{"tag":"TypeVar","contents":"t100"}]}]}]}]}]},null]},null]},null]},null]},null]}},"sourceSpan":{"start":[137,1],"name":"/home/r/purescript-stuff/src/Stuff.purs","end":[137,127]}},{"children":[],"comments":null,"title":"compose3","info":{"declType":"value","type":{"tag":"ForAll","contents":["t94",{"tag":"ForAll","contents":["t93",{"tag":"ForAll","contents":["t92",{"tag":"ForAll","contents":["t91",{"tag":"ForAll","contents":["t90",{"tag":"ForAll","contents":["t86",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Control","Semigroupoid"],"Semigroupoid"],"constraintArgs":[{"tag":"TypeVar","contents":"t91"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"t91"},{"tag":"TypeVar","contents":"t93"}]},{"tag":"TypeVar","contents":"t92"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"t86"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"t90"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"t91"},{"tag":"TypeVar","contents":"t94"}]},{"tag":"TypeVar","contents":"t93"}]}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"t86"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"t90"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"t91"},{"tag":"TypeVar","contents":"t94"}]},{"tag":"TypeVar","contents":"t92"}]}]}]}]}]}]},null]},null]},null]},null]},null]},null]}},"sourceSpan":{"start":[140,1],"name":"/home/r/purescript-stuff/src/Stuff.purs","end":[140,136]}},{"children":[],"comments":null,"title":"compose4","info":{"declType":"value","type":{"tag":"ForAll","contents":["t82",{"tag":"ForAll","contents":["t81",{"tag":"ForAll","contents":["t80",{"tag":"ForAll","contents":["t79",{"tag":"ForAll","contents":["t78",{"tag":"ForAll","contents":["t74",{"tag":"ForAll","contents":["t70",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Control","Semigroupoid"],"Semigroupoid"],"constraintArgs":[{"tag":"TypeVar","contents":"t79"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"t79"},{"tag":"TypeVar","contents":"t81"}]},{"tag":"TypeVar","contents":"t80"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"t70"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"t74"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"t78"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"t79"},{"tag":"TypeVar","contents":"t82"}]},{"tag":"TypeVar","contents":"t81"}]}]}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"t70"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"t74"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"t78"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"t79"},{"tag":"TypeVar","contents":"t82"}]},{"tag":"TypeVar","contents":"t80"}]}]}]}]}]}]}]},null]},null]},null]},null]},null]},null]},null]}},"sourceSpan":{"start":[143,1],"name":"/home/r/purescript-stuff/src/Stuff.purs","end":[143,154]}},{"children":[],"comments":null,"title":"compose5","info":{"declType":"value","type":{"tag":"ForAll","contents":["t66",{"tag":"ForAll","contents":["t65",{"tag":"ForAll","contents":["t64",{"tag":"ForAll","contents":["t63",{"tag":"ForAll","contents":["t62",{"tag":"ForAll","contents":["t58",{"tag":"ForAll","contents":["t54",{"tag":"ForAll","contents":["t50",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Control","Semigroupoid"],"Semigroupoid"],"constraintArgs":[{"tag":"TypeVar","contents":"t63"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"t63"},{"tag":"TypeVar","contents":"t65"}]},{"tag":"TypeVar","contents":"t64"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"t50"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"t54"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"t58"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"t62"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"t63"},{"tag":"TypeVar","contents":"t66"}]},{"tag":"TypeVar","contents":"t65"}]}]}]}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"t50"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"t54"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"t58"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"t62"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"t63"},{"tag":"TypeVar","contents":"t66"}]},{"tag":"TypeVar","contents":"t64"}]}]}]}]}]}]}]}]},null]},null]},null]},null]},null]},null]},null]},null]}},"sourceSpan":{"start":[146,1],"name":"/home/r/purescript-stuff/src/Stuff.purs","end":[146,172]}}]}],"resolvedDependencies":{"purescript-fixed-points":"4.0.0","purescript-proxy":"2.1.0","purescript-exceptions":"3.0.0","purescript-newtype":"2.0.0","purescript-group":"3.1.0","purescript-control":"3.3.0","purescript-console":"3.0.0","purescript-either":"3.1.0","purescript-profunctor":"3.2.0","purescript-arrays":"4.1.2","purescript-maybe":"3.0.0","purescript-symbols":"3.0.0","purescript-type-equality":"2.1.0","purescript-exists":"3.0.0","purescript-distributive":"3.0.0","purescript-unfoldable":"3.0.0","purescript-invariant":"3.0.0","purescript-io":"4.0.0","purescript-lazy":"3.0.0","purescript-monoid":"3.0.0","purescript-aff":"3.1.0","purescript-modules":"3.0.0","purescript-foldable-traversable":"3.3.1","purescript-debug":"3.0.0","purescript-tailrec":"3.3.0","purescript-gen":"1.1.0","purescript-functors":"2.1.0","purescript-leibniz":"4.0.0","purescript-prelude":"3.0.0","purescript-st":"3.0.0","purescript-bifunctors":"3.0.0","purescript-nonempty":"4.0.0","purescript-contravariant":"3.0.0","purescript-generics":"4.0.0","purescript-unsafe-coerce":"3.0.0","purescript-refs":"3.0.0","purescript-integers":"3.0.0","purescript-eff":"3.1.0","purescript-orders":"3.0.0","purescript-const":"3.0.0","purescript-transformers":"3.4.0","purescript-globals":"3.0.0","purescript-math":"2.1.0","purescript-enums":"3.2.0","purescript-parallel":"3.0.0","purescript-tuples":"4.1.0","purescript-partial":"1.2.1","purescript-strings":"3.2.1","purescript-identity":"3.1.0","purescript-lists":"4.7.0","purescript-datetime":"3.2.0","purescript-functions":"3.0.0"},"version":"3.0.0","github":["rightfold","purescript-stuff"],"versionTag":"v3.0.0","moduleMap":{"Data.BooleanAlgebra":"purescript-prelude","Data.Decide":"purescript-contravariant","Data.Ring":"purescript-prelude","Data.Functor.Nu":"purescript-fixed-points","Control.Monad.Trans.Class":"purescript-transformers","Data.Functor.Product":"purescript-functors","Data.NonEmpty":"purescript-nonempty","Data.Module":"purescript-modules","Control.Monad.Eff.Ref":"purescript-refs","Data.Char.Gen":"purescript-strings","Control.Monad.Aff.Class":"purescript-aff","Data.Generic":"purescript-generics","Data.Enum.Gen":"purescript-enums","Control.Comonad.Env":"purescript-transformers","Control.Comonad.Traced.Class":"purescript-transformers","Data.Functor.Mu":"purescript-fixed-points","Data.Semigroup.Commutative":"purescript-group","Control.Monad.Eff.Unsafe":"purescript-eff","Data.Functor.Compose":"purescript-functors","Data.Int.Bits":"purescript-integers","Data.DateTime":"purescript-datetime","Control.Monad.IOSync.Class":"purescript-io","Data.Bifunctor.Flip":"purescript-bifunctors","Data.Ord":"purescript-prelude","Control.Monad.Gen":"purescript-gen","Data.Date":"purescript-datetime","Data.Monoid.Dual":"purescript-monoid","Control.Monad.Rec.Class":"purescript-tailrec","Data.Time.Component":"purescript-datetime","Data.Bitraversable":"purescript-foldable-traversable","Data.Profunctor.Costar":"purescript-profunctor","Data.Profunctor.Cowrap":"purescript-profunctor","Data.Boolean":"purescript-prelude","Control.Biapplicative":"purescript-bifunctors","Control.Parallel.Class":"purescript-parallel","Type.Proxy":"purescript-proxy","Data.Array.ST.Iterator":"purescript-arrays","Data.DateTime.Gen":"purescript-datetime","Data.Bounded":"purescript-prelude","Control.Monad.State.Trans":"purescript-transformers","Data.Int":"purescript-integers","Data.Profunctor.Cochoice":"purescript-profunctor","Data.Show":"purescript-prelude","Data.Bifunctor.Clown":"purescript-bifunctors","Control.Monad.Writer.Trans":"purescript-transformers","Data.Foldable":"purescript-foldable-traversable","Data.Divide":"purescript-contravariant","Control.Comonad.Store.Class":"purescript-transformers","Data.Enum":"purescript-enums","Control.Monad.Aff.AVar":"purescript-aff","Control.Apply":"purescript-prelude","Data.Functor.Contravariant":"purescript-contravariant","Data.Tuple.Nested":"purescript-tuples","Control.Monad":"purescript-prelude","Data.Lazy":"purescript-lazy","Data.Monoid":"purescript-monoid","Data.Profunctor.Closed":"purescript-profunctor","Control.Monad.Eff.Uncurried":"purescript-eff","Control.Monad.List.Trans":"purescript-transformers","Control.Monad.RWS":"purescript-transformers","Data.Maybe.First":"purescript-maybe","Control.Bind":"purescript-prelude","Data.Profunctor.Split":"purescript-profunctor","Control.Monad.IO":"purescript-io","Data.Monoid.Additive":"purescript-monoid","Data.Symbol":"purescript-symbols","Data.String.Regex":"purescript-strings","Data.Profunctor.Join":"purescript-profunctor","Data.HeytingAlgebra":"purescript-prelude","Control.Alt":"purescript-control","Data.Date.Gen":"purescript-datetime","Control.Monad.Maybe.Trans":"purescript-transformers","Control.Monad.Cont":"purescript-transformers","Data.Time.Component.Gen":"purescript-datetime","Data.List.ZipList":"purescript-lists","Data.Ord.Min":"purescript-orders","Data.Functor.Coproduct.Nested":"purescript-functors","Data.Ord.Unsafe":"purescript-prelude","Data.Semigroup":"purescript-prelude","Control.Monad.Reader":"purescript-transformers","Data.Const":"purescript-const","Control.Monad.Eff":"purescript-eff","Control.Comonad.Traced.Trans":"purescript-transformers","Data.Ord.Down":"purescript-orders","Data.Array.ST.Partial":"purescript-arrays","Data.Profunctor.Clown":"purescript-profunctor","Data.Tuple":"purescript-tuples","Data.Semigroup.Foldable":"purescript-foldable-traversable","Control.Biapply":"purescript-bifunctors","Data.Distributive":"purescript-distributive","Type.Equality":"purescript-type-equality","Control.Alternative":"purescript-control","Data.Semiring":"purescript-prelude","Data.Exists":"purescript-exists","Data.CommutativeRing":"purescript-prelude","Data.NaturalTransformation":"purescript-prelude","Data.Monoid.Conj":"purescript-monoid","Control.Monad.Aff.Internal":"purescript-aff","Data.Functor.App":"purescript-functors","Data.Profunctor.Star":"purescript-profunctor","Data.Unfoldable":"purescript-unfoldable","Data.Profunctor.Wrap":"purescript-profunctor","Control.Comonad.Store.Trans":"purescript-transformers","Control.Monad.ST":"purescript-st","Control.Monad.State.Class":"purescript-transformers","Data.List.Types":"purescript-lists","Data.Group.Action":"purescript-group","Data.Leibniz":"purescript-leibniz","Data.Functor":"purescript-prelude","Unsafe.Coerce":"purescript-unsafe-coerce","Control.Monad.Writer.Class":"purescript-transformers","Data.Profunctor.Strong":"purescript-profunctor","Control.Monad.Except":"purescript-transformers","Data.List.Lazy.Types":"purescript-lists","Data.DateTime.Locale":"purescript-datetime","Control.Category":"purescript-prelude","Control.Monad.Gen.Common":"purescript-gen","Control.Monad.RWS.Trans":"purescript-transformers","Control.Monad.Cont.Trans":"purescript-transformers","Data.Maybe":"purescript-maybe","Data.String.Regex.Unsafe":"purescript-strings","Data.Profunctor":"purescript-profunctor","Control.Comonad":"purescript-control","Data.Function":"purescript-prelude","Data.List":"purescript-lists","Data.Field":"purescript-prelude","Data.List.Lazy":"purescript-lists","Data.EuclideanRing":"purescript-prelude","Data.Functor.Invariant":"purescript-invariant","Control.Comonad.Traced":"purescript-transformers","Global.Unsafe":"purescript-globals","Data.Comparison":"purescript-contravariant","Data.String.Unsafe":"purescript-strings","Prelude":"purescript-prelude","Control.Monad.Aff":"purescript-aff","Data.Predicate":"purescript-contravariant","Partial.Unsafe":"purescript-partial","Data.Array":"purescript-arrays","Data.Bifunctor.Product":"purescript-bifunctors","Control.Extend":"purescript-control","Control.Lazy":"purescript-control","Data.Function.Uncurried":"purescript-functions","Control.Monad.Reader.Trans":"purescript-transformers","Data.Functor.Product.Nested":"purescript-functors","Control.Comonad.Env.Class":"purescript-transformers","Control.Monad.IOSync":"purescript-io","Data.Eq":"purescript-prelude","Data.Either.Nested":"purescript-either","Data.Newtype":"purescript-newtype","Control.Monad.Eff.Console":"purescript-console","Data.Semigroup.Traversable":"purescript-foldable-traversable","Data.Bifunctor":"purescript-bifunctors","Data.Monoid.Disj":"purescript-monoid","Control.Monad.Eff.Exception":"purescript-exceptions","Control.Monad.Gen.Class":"purescript-gen","Data.Array.Partial":"purescript-arrays","Data.String.CaseInsensitive":"purescript-strings","Control.Parallel":"purescript-parallel","Control.MonadPlus":"purescript-control","Data.Void":"purescript-prelude","Control.MonadZero":"purescript-control","Data.DateTime.Instant":"purescript-datetime","Data.Profunctor.Costrong":"purescript-profunctor","Data.Ord.Max":"purescript-orders","Control.Comonad.Store":"purescript-transformers","Control.Monad.Except.Trans":"purescript-transformers","Data.Bifunctor.Joker":"purescript-bifunctors","Data.Divisible":"purescript-contravariant","Data.Bifunctor.Wrap":"purescript-bifunctors","Data.Equivalence":"purescript-contravariant","Data.Maybe.Last":"purescript-maybe","Data.Unit":"purescript-prelude","Control.Monad.Eff.Ref.Unsafe":"purescript-refs","Data.List.NonEmpty":"purescript-lists","Data.List.Lazy.NonEmpty":"purescript-lists","Data.Ordering":"purescript-prelude","Data.Functor.Coproduct":"purescript-functors","Control.Monad.Cont.Class":"purescript-transformers","Data.TacitString":"purescript-fixed-points","Data.Identity":"purescript-identity","Control.Monad.IO.Class":"purescript-io","Math":"purescript-math","Control.Comonad.Trans.Class":"purescript-transformers","Data.String":"purescript-strings","Control.Plus":"purescript-control","Data.Profunctor.Joker":"purescript-profunctor","Control.Monad.Eff.Class":"purescript-eff","Data.Time":"purescript-datetime","Type.Row.Effect.Equality":"purescript-type-equality","Data.Time.Duration":"purescript-datetime","Data.Date.Component":"purescript-datetime","Partial":"purescript-partial","Control.Comonad.Env.Trans":"purescript-transformers","Global":"purescript-globals","Control.Monad.Reader.Class":"purescript-transformers","Data.Decidable":"purescript-contravariant","Control.Monad.Aff.Unsafe":"purescript-aff","Data.Monoid.Multiplicative":"purescript-monoid","Data.Array.ST":"purescript-arrays","Control.Monad.Error.Class":"purescript-transformers","Control.Monad.Aff.Console":"purescript-aff","Control.Semigroupoid":"purescript-prelude","Debug.Trace":"purescript-debug","Data.Monoid.Alternate":"purescript-monoid","Data.Char":"purescript-strings","Data.Bifunctor.Join":"purescript-bifunctors","Control.Monad.Eff.Exception.Unsafe":"purescript-exceptions","Data.Bifoldable":"purescript-foldable-traversable","Data.Monoid.Endo":"purescript-monoid","Control.Monad.State":"purescript-transformers","Data.List.Partial":"purescript-lists","Data.String.Regex.Flags":"purescript-strings","Data.Either":"purescript-either","Data.Time.Duration.Gen":"purescript-datetime","Data.Date.Component.Gen":"purescript-datetime","Control.Applicative":"purescript-prelude","Data.Op":"purescript-contravariant","Data.Group":"purescript-group","Control.Monad.IO.Effect":"purescript-io","Control.Monad.Writer":"purescript-transformers","Data.Profunctor.Choice":"purescript-profunctor","Data.Time.Gen":"purescript-datetime","Data.Traversable":"purescript-foldable-traversable","Data.String.Gen":"purescript-strings"},"compilerVersion":"0.11.4"}