{"uploader":"rnons","packageMeta":{"repository":{"url":"git://github.com/rnons/purescript-svg-parser.git","type":"git"},"ignore":["**/.*","node_modules","bower_components","output"],"devDependencies":{"purescript-psci-support":"^4.0.0"},"dependencies":{"purescript-string-parsers":"^5.0.0","purescript-prelude":"^4.0.0","purescript-generics-rep":"^6.0.0"},"name":"purescript-svg-parser","keywords":["purescript","svg"],"license":["BSD-3-Clause"],"description":"A library to parse string to SVG"},"tagTime":"2018-10-12T10:03:23+0000","modules":[{"reExports":[],"name":"Svg.Parser","comments":"A module to Parse an SVG document `String` as `SvgNode`.  If you are using\n`purescript-halogen`, `Svg.Parser.Halogen` is for you. If you are using\nother view libraries, you need to write an adapter to convert `SvgNode` to\nthe `HTML` type you are using.\n","declarations":[{"children":[{"comments":null,"title":"SvgElement","info":{"arguments":[{"tag":"TypeConstructor","contents":[["Svg","Parser"],"Element"]}],"declType":"dataConstructor"},"sourceSpan":null},{"comments":null,"title":"SvgText","info":{"arguments":[{"tag":"TypeConstructor","contents":[["Prim"],"String"]}],"declType":"dataConstructor"},"sourceSpan":null},{"comments":null,"title":"SvgComment","info":{"arguments":[{"tag":"TypeConstructor","contents":[["Prim"],"String"]}],"declType":"dataConstructor"},"sourceSpan":null},{"comments":null,"title":"eqSvgNode","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Eq"],"Eq"]},{"tag":"TypeConstructor","contents":[["Svg","Parser"],"SvgNode"]}]}},"sourceSpan":{"start":[34,8],"name":"/home/rnons/repo/purescript-svg-parser/src/Svg/Parser.purs","end":[34,40]}},{"comments":null,"title":"genericRepSvgNode","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Generic","Rep"],"Generic"]},{"tag":"TypeConstructor","contents":[["Svg","Parser"],"SvgNode"]}]},{"tag":"TypeWildcard","contents":{"start":[35,54],"name":"/home/rnons/repo/purescript-svg-parser/src/Svg/Parser.purs","end":[35,55]}}]}},"sourceSpan":{"start":[35,8],"name":"/home/rnons/repo/purescript-svg-parser/src/Svg/Parser.purs","end":[35,55]}},{"comments":null,"title":"showSvgNode","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Show"],"Show"]},{"tag":"TypeConstructor","contents":[["Svg","Parser"],"SvgNode"]}]}},"sourceSpan":{"start":[36,1],"name":"/home/rnons/repo/purescript-svg-parser/src/Svg/Parser.purs","end":[36,37]}}],"comments":"A SVG node can be one of the three: SvgElement, SvgText or SvgComment.\n","title":"SvgNode","info":{"declType":"data","dataDeclType":"data","typeArguments":[]},"sourceSpan":{"start":[29,1],"name":"/home/rnons/repo/purescript-svg-parser/src/Svg/Parser.purs","end":[32,22]}},{"children":[],"comments":"An Element consists of a tag name, a list of attributes, a list of children nodes.\n\n<svg xmlns=\"http://www.w3.org/2000/svg\"></svg>\n\nwill be parsed as\n\n``` purescript\n{ name: \"svg\"\n, attributes: [ SvgAttribute \"xmlns\" \"http://www.w3.org/2000/svg\" ]\n, children: []\n}\n","title":"Element","info":{"arguments":[],"declType":"typeSynonym","type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Record"]},{"tag":"RCons","contents":["name",{"tag":"TypeConstructor","contents":[["Prim"],"String"]},{"tag":"RCons","contents":["attributes",{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","List","Types"],"List"]},{"tag":"TypeConstructor","contents":[["Svg","Parser"],"SvgAttribute"]}]},{"tag":"RCons","contents":["children",{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","List","Types"],"List"]},{"tag":"TypeConstructor","contents":[["Svg","Parser"],"SvgNode"]}]},{"tag":"REmpty"}]}]}]}]}},"sourceSpan":{"start":[49,1],"name":"/home/rnons/repo/purescript-svg-parser/src/Svg/Parser.purs","end":[53,4]}},{"children":[{"comments":null,"title":"SvgAttribute","info":{"arguments":[{"tag":"TypeConstructor","contents":[["Prim"],"String"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}],"declType":"dataConstructor"},"sourceSpan":null},{"comments":null,"title":"eqSvgAttribute","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Eq"],"Eq"]},{"tag":"TypeConstructor","contents":[["Svg","Parser"],"SvgAttribute"]}]}},"sourceSpan":{"start":[58,8],"name":"/home/rnons/repo/purescript-svg-parser/src/Svg/Parser.purs","end":[58,50]}},{"comments":null,"title":"genericRepSvgAttribute","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Generic","Rep"],"Generic"]},{"tag":"TypeConstructor","contents":[["Svg","Parser"],"SvgAttribute"]}]},{"tag":"TypeWildcard","contents":{"start":[59,64],"name":"/home/rnons/repo/purescript-svg-parser/src/Svg/Parser.purs","end":[59,65]}}]}},"sourceSpan":{"start":[59,8],"name":"/home/rnons/repo/purescript-svg-parser/src/Svg/Parser.purs","end":[59,65]}},{"comments":null,"title":"showSvgAttribute","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Show"],"Show"]},{"tag":"TypeConstructor","contents":[["Svg","Parser"],"SvgAttribute"]}]}},"sourceSpan":{"start":[60,1],"name":"/home/rnons/repo/purescript-svg-parser/src/Svg/Parser.purs","end":[60,47]}}],"comments":"An attribute consists of attribute name and value\n","title":"SvgAttribute","info":{"declType":"data","dataDeclType":"data","typeArguments":[]},"sourceSpan":{"start":[56,1],"name":"/home/rnons/repo/purescript-svg-parser/src/Svg/Parser.purs","end":[56,47]}},{"children":[],"comments":"Parse an SVG source `String` as `SvgNode`.\nYou can then use `SvgNode` to construct the `HTML` type you are using.\n\nNOTE: Everything before `<svg` and after `</svg>` are ignored.\n","title":"parseToSvgNode","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Either"],"Either"]},{"tag":"TypeConstructor","contents":[["Text","Parsing","StringParser"],"ParseError"]}]},{"tag":"TypeConstructor","contents":[["Svg","Parser"],"SvgNode"]}]}]}},"sourceSpan":{"start":[138,1],"name":"/home/rnons/repo/purescript-svg-parser/src/Svg/Parser.purs","end":[138,54]}}]}],"resolvedDependencies":{"purescript-string-parsers":"5.0.0","purescript-newtype":"3.0.0","purescript-effect":"2.0.0","purescript-control":"4.1.0","purescript-console":"4.1.0","purescript-either":"4.0.0","purescript-arrays":"5.1.0","purescript-maybe":"4.0.0","purescript-type-equality":"3.0.0","purescript-distributive":"4.0.0","purescript-unfoldable":"4.0.0","purescript-invariant":"4.1.0","purescript-lazy":"4.0.0","purescript-foldable-traversable":"4.1.0","purescript-tailrec":"4.0.0","purescript-gen":"2.1.0","purescript-prelude":"4.1.0","purescript-st":"4.0.0","purescript-bifunctors":"4.0.0","purescript-nonempty":"5.0.0","purescript-unsafe-coerce":"4.0.0","purescript-refs":"4.1.0","purescript-integers":"4.0.0","purescript-orders":"4.0.0","purescript-globals":"4.0.0","purescript-generics-rep":"6.1.0","purescript-math":"2.1.1","purescript-enums":"4.0.0","purescript-psci-support":"4.0.0","purescript-tuples":"5.0.0","purescript-partial":"2.0.0","purescript-strings":"4.0.0","purescript-identity":"4.0.0","purescript-lists":"5.3.0"},"version":"1.0.0","github":["rnons","purescript-svg-parser"],"versionTag":"v1.0.0","moduleMap":{"Data.BooleanAlgebra":"purescript-prelude","Data.Ring":"purescript-prelude","Data.NonEmpty":"purescript-nonempty","Effect.Uncurried":"purescript-effect","Data.Char.Gen":"purescript-strings","Data.String.NonEmpty":"purescript-strings","Effect":"purescript-effect","Data.Traversable.Accum.Internal":"purescript-foldable-traversable","Data.Enum.Gen":"purescript-enums","Data.Int.Bits":"purescript-integers","Text.Parsing.StringParser":"purescript-string-parsers","Data.Bifunctor.Flip":"purescript-bifunctors","Data.String.CodePoints":"purescript-strings","Data.Ord":"purescript-prelude","Control.Monad.Gen":"purescript-gen","Type.Data.Row":"purescript-prelude","Data.Monoid.Dual":"purescript-prelude","Data.Generic.Rep.Ring":"purescript-generics-rep","Control.Monad.Rec.Class":"purescript-tailrec","Data.Bitraversable":"purescript-foldable-traversable","Data.Boolean":"purescript-prelude","Control.Biapplicative":"purescript-bifunctors","Data.Array.NonEmpty.Internal":"purescript-arrays","Data.Array.ST.Iterator":"purescript-arrays","Data.String.Pattern":"purescript-strings","Data.Bounded":"purescript-prelude","Data.TraversableWithIndex":"purescript-foldable-traversable","Data.Int":"purescript-integers","Data.Show":"purescript-prelude","Data.Bifunctor.Clown":"purescript-bifunctors","Data.Foldable":"purescript-foldable-traversable","Data.Enum":"purescript-enums","Control.Apply":"purescript-prelude","Data.Tuple.Nested":"purescript-tuples","Data.Generic.Rep.Semigroup":"purescript-generics-rep","Control.Monad":"purescript-prelude","Data.Lazy":"purescript-lazy","Data.Monoid":"purescript-prelude","Data.String.Common":"purescript-strings","Data.Maybe.First":"purescript-maybe","Control.Bind":"purescript-prelude","Data.Monoid.Additive":"purescript-prelude","Data.Symbol":"purescript-prelude","Data.String.Regex":"purescript-strings","Data.HeytingAlgebra":"purescript-prelude","Control.Alt":"purescript-control","Control.Monad.ST.Internal":"purescript-st","Type.Data.RowList":"purescript-prelude","Effect.Ref":"purescript-refs","Data.Either.Inject":"purescript-either","Data.List.ZipList":"purescript-lists","Data.Ord.Min":"purescript-orders","Data.Ord.Unsafe":"purescript-prelude","Data.Semigroup":"purescript-prelude","Data.Array.NonEmpty":"purescript-arrays","Data.Generic.Rep.Enum":"purescript-generics-rep","Data.Generic.Rep.Bounded":"purescript-generics-rep","Data.Ord.Down":"purescript-orders","Data.Array.ST.Partial":"purescript-arrays","Data.Generic.Rep.Show":"purescript-generics-rep","Effect.Unsafe":"purescript-effect","Data.Tuple":"purescript-tuples","Data.Semigroup.Foldable":"purescript-foldable-traversable","Control.Biapply":"purescript-bifunctors","Data.Distributive":"purescript-distributive","Type.Equality":"purescript-type-equality","Control.Alternative":"purescript-control","Data.Semiring":"purescript-prelude","Effect.Console":"purescript-console","Data.Traversable.Accum":"purescript-foldable-traversable","Data.CommutativeRing":"purescript-prelude","Data.NaturalTransformation":"purescript-prelude","Data.Monoid.Conj":"purescript-prelude","Text.Parsing.StringParser.Combinators":"purescript-string-parsers","Data.Unfoldable":"purescript-unfoldable","Control.Monad.ST":"purescript-st","Data.List.Types":"purescript-lists","Data.String.NonEmpty.CodeUnits":"purescript-strings","Data.Functor":"purescript-prelude","Unsafe.Coerce":"purescript-unsafe-coerce","Data.Generic.Rep.Ord":"purescript-generics-rep","Text.Parsing.StringParser.CodeUnits":"purescript-string-parsers","Data.List.Lazy.Types":"purescript-lists","Control.Category":"purescript-prelude","Control.Monad.Gen.Common":"purescript-gen","Data.Maybe":"purescript-maybe","Data.String.Regex.Unsafe":"purescript-strings","Control.Comonad":"purescript-control","Data.Function":"purescript-prelude","Data.List":"purescript-lists","Data.Field":"purescript-prelude","Data.List.Lazy":"purescript-lists","Data.Generic.Rep.Eq":"purescript-generics-rep","Data.EuclideanRing":"purescript-prelude","Data.Semigroup.Last":"purescript-prelude","Data.Semigroup.First":"purescript-prelude","Data.Functor.Invariant":"purescript-invariant","Global.Unsafe":"purescript-globals","Data.String.Unsafe":"purescript-strings","Prelude":"purescript-prelude","Effect.Class":"purescript-effect","Partial.Unsafe":"purescript-partial","Data.Array":"purescript-arrays","Data.Bifunctor.Product":"purescript-bifunctors","Control.Extend":"purescript-control","Data.Unfoldable1":"purescript-unfoldable","Control.Lazy":"purescript-control","Data.Eq":"purescript-prelude","Data.Either.Nested":"purescript-either","Data.Newtype":"purescript-newtype","Data.Semigroup.Traversable":"purescript-foldable-traversable","Data.Bifunctor":"purescript-bifunctors","Data.Monoid.Disj":"purescript-prelude","Control.Monad.Gen.Class":"purescript-gen","Data.Array.Partial":"purescript-arrays","Data.String.CaseInsensitive":"purescript-strings","Control.MonadPlus":"purescript-control","Data.Void":"purescript-prelude","Control.MonadZero":"purescript-control","Data.Ord.Max":"purescript-orders","Data.String.CodeUnits":"purescript-strings","Data.Bifunctor.Joker":"purescript-bifunctors","Data.FunctorWithIndex":"purescript-foldable-traversable","Data.DivisionRing":"purescript-prelude","Data.Bifunctor.Wrap":"purescript-bifunctors","PSCI.Support":"purescript-psci-support","Data.Maybe.Last":"purescript-maybe","Data.Unit":"purescript-prelude","Data.List.NonEmpty":"purescript-lists","Data.Generic.Rep.Semiring":"purescript-generics-rep","Data.List.Lazy.NonEmpty":"purescript-lists","Data.Ordering":"purescript-prelude","Data.Identity":"purescript-identity","Math":"purescript-math","Data.String":"purescript-strings","Control.Plus":"purescript-control","Text.Parsing.StringParser.CodePoints":"purescript-string-parsers","Partial":"purescript-partial","Global":"purescript-globals","Data.String.NonEmpty.CodePoints":"purescript-strings","Data.String.NonEmpty.Internal":"purescript-strings","Data.Monoid.Multiplicative":"purescript-prelude","Data.String.NonEmpty.CaseInsensitive":"purescript-strings","Data.Array.ST":"purescript-arrays","Data.Generic.Rep.HeytingAlgebra":"purescript-generics-rep","Data.Generic.Rep.Monoid":"purescript-generics-rep","Control.Semigroupoid":"purescript-prelude","Text.Parsing.StringParser.Expr":"purescript-string-parsers","Data.Monoid.Alternate":"purescript-control","Data.Char":"purescript-strings","Data.Generic.Rep":"purescript-generics-rep","Effect.Class.Console":"purescript-console","Data.Bifunctor.Join":"purescript-bifunctors","Data.Bifoldable":"purescript-foldable-traversable","Control.Monad.ST.Ref":"purescript-st","Data.Monoid.Endo":"purescript-prelude","Data.List.Partial":"purescript-lists","Data.String.Regex.Flags":"purescript-strings","Data.Either":"purescript-either","Control.Applicative":"purescript-prelude","Data.FoldableWithIndex":"purescript-foldable-traversable","Record.Unsafe":"purescript-prelude","Data.Traversable":"purescript-foldable-traversable","Data.String.Gen":"purescript-strings"},"compilerVersion":"0.12.0"}