{"uploader":"hdgarrood","packageMeta":{"repository":{"url":"git://github.com/purescript/purescript-type-equality.git","type":"git"},"ignore":["**/.*","node_modules","bower_components","output"],"devDependencies":{"purescript-newtype":"^2.0.0","purescript-console":"^3.0.0"},"dependencies":{"purescript-eff":"^3.1.0"},"name":"purescript-type-equality","license":["MIT"]},"tagTime":"2017-04-24T16:03:33+0000","modules":[{"reExports":[],"name":"Type.Equality","comments":null,"declarations":[{"children":[{"comments":null,"title":"to","info":{"declType":"typeClassMember","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}},"sourceSpan":null},{"comments":null,"title":"from","info":{"declType":"typeClassMember","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeVar","contents":"a"}]}},"sourceSpan":null},{"comments":null,"title":"refl","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Type","Equality"],"TypeEquals"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"a"}]}},"sourceSpan":{"start":[21,1],"name":"/tmp/tmp.ppUFosN0IU/src/Type/Equality.purs","end":[23,12]}}],"comments":"This type class asserts that types `a` and `b`\nare equal.\n\nThe functional dependencies and the single\ninstance below will force the two type arguments\nto unify when either one is known.\n\nNote: any instance will necessarily overlap with\n`refl` below, so instances of this class should\nnot be defined in libraries.\n","title":"TypeEquals","info":{"fundeps":[[["a"],["b"]],[["b"],["a"]]],"arguments":[["a",null],["b",null]],"declType":"typeClass","superclasses":[]},"sourceSpan":{"start":[17,1],"name":"/tmp/tmp.ppUFosN0IU/src/Type/Equality.purs","end":[19,17]}}]},{"reExports":[],"name":"Type.Row.Effect.Equality","comments":null,"declarations":[{"children":[{"comments":null,"title":"to","info":{"declType":"typeClassMember","type":{"tag":"ForAll","contents":["r",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"r"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"r"},{"tag":"TypeVar","contents":"b"}]}]},null]}},"sourceSpan":null},{"comments":null,"title":"from","info":{"declType":"typeClassMember","type":{"tag":"ForAll","contents":["r",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"r"},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"r"},{"tag":"TypeVar","contents":"a"}]}]},null]}},"sourceSpan":null},{"comments":null,"title":"refl","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Type","Row","Effect","Equality"],"EffectRowEquals"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"a"}]}},"sourceSpan":{"start":[22,1],"name":"/tmp/tmp.ppUFosN0IU/src/Type/Row/Effect/Equality.purs","end":[24,13]}}],"comments":"This type class asserts that effect rows `a` and `b` are equal.\n\nThe functional dependencies and the single instance below will force the\ntwo type arguments to unify when either one is known.\n\nNote: any instance will necessarily ovelap with `refl` below, so instances\nof this class should not be defined in libraries.\n","title":"EffectRowEquals","info":{"fundeps":[[["a"],["b"]],[["b"],["a"]]],"arguments":[["a",{"tag":"Row","contents":{"tag":"NamedKind","contents":[["Control","Monad","Eff"],"Effect"]}}],["b",{"tag":"Row","contents":{"tag":"NamedKind","contents":[["Control","Monad","Eff"],"Effect"]}}]],"declType":"typeClass","superclasses":[]},"sourceSpan":{"start":[18,1],"name":"/tmp/tmp.ppUFosN0IU/src/Type/Row/Effect/Equality.purs","end":[20,31]}},{"children":[],"comments":"A version of `to` that can be applied to types like `Eff`, `Aff`, etc.\n","title":"effTo","info":{"declType":"value","type":{"tag":"ForAll","contents":["x",{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["e",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Type","Row","Effect","Equality"],"EffectRowEquals"],"constraintArgs":[{"tag":"TypeVar","contents":"a"},{"tag":"TypeVar","contents":"b"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"e"},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"x"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"e"},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeVar","contents":"x"}]}]}]},null]},null]},null]},null]}},"sourceSpan":{"start":[32,1],"name":"/tmp/tmp.ppUFosN0IU/src/Type/Row/Effect/Equality.purs","end":[32,63]}},{"children":[],"comments":"A version of `from` that can be applied to types like `Eff`, `Aff`, etc.\n","title":"effFrom","info":{"declType":"value","type":{"tag":"ForAll","contents":["x",{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["e",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Type","Row","Effect","Equality"],"EffectRowEquals"],"constraintArgs":[{"tag":"TypeVar","contents":"a"},{"tag":"TypeVar","contents":"b"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"e"},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeVar","contents":"x"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"e"},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"x"}]}]}]},null]},null]},null]},null]}},"sourceSpan":{"start":[36,1],"name":"/tmp/tmp.ppUFosN0IU/src/Type/Row/Effect/Equality.purs","end":[36,65]}}]}],"resolvedDependencies":{"purescript-newtype":"2.0.0","purescript-console":"3.0.0","purescript-prelude":"3.0.0","purescript-eff":"3.1.0"},"version":"2.1.0","github":["purescript","purescript-type-equality"],"versionTag":"v2.1.0","moduleMap":{"Data.BooleanAlgebra":"purescript-prelude","Data.Ring":"purescript-prelude","Control.Monad.Eff.Unsafe":"purescript-eff","Data.Ord":"purescript-prelude","Data.Boolean":"purescript-prelude","Data.Bounded":"purescript-prelude","Data.Show":"purescript-prelude","Control.Apply":"purescript-prelude","Control.Monad":"purescript-prelude","Control.Monad.Eff.Uncurried":"purescript-eff","Control.Bind":"purescript-prelude","Data.HeytingAlgebra":"purescript-prelude","Data.Ord.Unsafe":"purescript-prelude","Data.Semigroup":"purescript-prelude","Control.Monad.Eff":"purescript-eff","Data.Semiring":"purescript-prelude","Data.CommutativeRing":"purescript-prelude","Data.NaturalTransformation":"purescript-prelude","Data.Functor":"purescript-prelude","Control.Category":"purescript-prelude","Data.Function":"purescript-prelude","Data.Field":"purescript-prelude","Data.EuclideanRing":"purescript-prelude","Prelude":"purescript-prelude","Data.Eq":"purescript-prelude","Data.Newtype":"purescript-newtype","Control.Monad.Eff.Console":"purescript-console","Data.Void":"purescript-prelude","Data.Unit":"purescript-prelude","Data.Ordering":"purescript-prelude","Control.Monad.Eff.Class":"purescript-eff","Control.Semigroupoid":"purescript-prelude","Control.Applicative":"purescript-prelude"},"compilerVersion":"0.11.4"}