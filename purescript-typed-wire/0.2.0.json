{"uploader":"hdgarrood","packageMeta":{"moduleType":["node"],"repository":{"url":"git://github.com/typed-wire/purescript-typed-wire","type":"git"},"ignore":["**/.*","node_modules","bower_components","output"],"dependencies":{"purescript-argonaut":"~0.12.0","purescript-datetime":"~0.9.1"},"name":"purescript-typed-wire"},"modules":[{"reExports":[],"name":"Data.TypedWire.Api","comments":null,"declarations":[{"children":[{"comments":null,"title":"DELETE","info":{"arguments":[],"declType":"dataConstructor"},"sourceSpan":null},{"comments":null,"title":"GET","info":{"arguments":[],"declType":"dataConstructor"},"sourceSpan":null},{"comments":null,"title":"HEAD","info":{"arguments":[],"declType":"dataConstructor"},"sourceSpan":null},{"comments":null,"title":"OPTIONS","info":{"arguments":[],"declType":"dataConstructor"},"sourceSpan":null},{"comments":null,"title":"PATCH","info":{"arguments":[],"declType":"dataConstructor"},"sourceSpan":null},{"comments":null,"title":"POST","info":{"arguments":[],"declType":"dataConstructor"},"sourceSpan":null},{"comments":null,"title":"PUT","info":{"arguments":[],"declType":"dataConstructor"},"sourceSpan":null},{"comments":null,"title":"MOVE","info":{"arguments":[],"declType":"dataConstructor"},"sourceSpan":null},{"comments":null,"title":"COPY","info":{"arguments":[],"declType":"dataConstructor"},"sourceSpan":null},{"comments":null,"title":"CustomMethod","info":{"arguments":[{"tag":"TypeConstructor","contents":[["Prim"],"String"]}],"declType":"dataConstructor"},"sourceSpan":null}],"comments":null,"title":"ApiMethod","fixity":null,"info":{"declType":"data","dataDeclType":"data","typeArguments":[]},"sourceSpan":{"start":[5,1],"name":"src/Data/TypedWire/Api.purs","end":[17,1]}},{"children":[],"comments":null,"title":"ApiHeader","fixity":null,"info":{"arguments":[],"declType":"typeSynonym","type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Object"]},{"tag":"RCons","contents":["key",{"tag":"TypeConstructor","contents":[["Prim"],"String"]},{"tag":"RCons","contents":["value",{"tag":"TypeConstructor","contents":[["Prim"],"String"]},{"tag":"REmpty","contents":[]}]}]}]}},"sourceSpan":{"start":[17,1],"name":"src/Data/TypedWire/Api.purs","end":[22,1]}},{"children":[],"comments":null,"title":"ApiRequest","fixity":null,"info":{"arguments":[["req",null]],"declType":"typeSynonym","type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Object"]},{"tag":"RCons","contents":["headers",{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeConstructor","contents":[["Data","TypedWire","Api"],"ApiHeader"]}]},{"tag":"RCons","contents":["method",{"tag":"TypeConstructor","contents":[["Data","TypedWire","Api"],"ApiMethod"]},{"tag":"RCons","contents":["body",{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeConstructor","contents":[["Data","Argonaut","Core"],"Json"]}]},{"tag":"RCons","contents":["url",{"tag":"TypeConstructor","contents":[["Prim"],"String"]},{"tag":"REmpty","contents":[]}]}]}]}]}]}},"sourceSpan":{"start":[22,1],"name":"src/Data/TypedWire/Api.purs","end":[29,1]}},{"children":[],"comments":null,"title":"ApiResponse","fixity":null,"info":{"arguments":[["resp",null]],"declType":"typeSynonym","type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Object"]},{"tag":"RCons","contents":["body",{"tag":"TypeConstructor","contents":[["Data","Argonaut","Core"],"Json"]},{"tag":"RCons","contents":["statusCode",{"tag":"TypeConstructor","contents":[["Prim"],"Int"]},{"tag":"REmpty","contents":[]}]}]}]}},"sourceSpan":{"start":[29,1],"name":"src/Data/TypedWire/Api.purs","end":[34,1]}},{"children":[],"comments":null,"title":"ApiCall","fixity":null,"info":{"arguments":[["m",null],["req",null],["resp",null]],"declType":"typeSynonym","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","TypedWire","Api"],"ApiRequest"]},{"tag":"TypeVar","contents":"req"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"m"},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","TypedWire","Api"],"ApiResponse"]},{"tag":"TypeVar","contents":"resp"}]}]}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"m"},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Either"],"Either"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeVar","contents":"resp"}]}]}]}},"sourceSpan":{"start":[34,1],"name":"src/Data/TypedWire/Api.purs","end":[36,1]}},{"children":[{"comments":null,"title":"toPathPiece","info":{"declType":"typeClassMember","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"s"}]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}},"sourceSpan":null},{"comments":null,"title":"stringPathPiece","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","TypedWire","Api"],"PathPiece"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}},"sourceSpan":{"start":[39,1],"name":"src/Data/TypedWire/Api.purs","end":[42,1]}},{"comments":null,"title":"intPathPiece","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","TypedWire","Api"],"PathPiece"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}},"sourceSpan":{"start":[42,1],"name":"src/Data/TypedWire/Api.purs","end":[45,1]}},{"comments":null,"title":"numberPathPiece","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","TypedWire","Api"],"PathPiece"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]}},"sourceSpan":{"start":[45,1],"name":"src/Data/TypedWire/Api.purs","end":[48,1]}},{"comments":null,"title":"boolPathPiece","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","TypedWire","Api"],"PathPiece"]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}},"sourceSpan":{"start":[48,1],"name":"src/Data/TypedWire/Api.purs","end":[49,19]}}],"comments":null,"title":"PathPiece","fixity":null,"info":{"arguments":[["s",null]],"declType":"typeClass","superclasses":[]},"sourceSpan":{"start":[36,1],"name":"src/Data/TypedWire/Api.purs","end":[39,1]}}]},{"reExports":[{"moduleName":["Control","Alt"],"declarations":[{"children":[{"comments":null,"title":"alt","info":{"declType":"typeClassMember","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}]}]},null]}},"sourceSpan":null},{"comments":null,"title":"altArray","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Alt"],"Alt"]},{"tag":"TypeConstructor","contents":[["Prim"],"Array"]}]}},"sourceSpan":{"start":[28,1],"name":"bower_components/purescript-control/src/Control/Alt.purs","end":[29,9]}}],"comments":"The `Alt` type class identifies an associative operation on a type\nconstructor.  It is similar to `Semigroup`, except that it applies to\ntypes of kind `* -> *`, like `Array` or `List`, rather than concrete types\n`String` or `Number`.\n\n`Alt` instances are required to satisfy the following laws:\n\n- Associativity: `(x <|> y) <|> z == x <|> (y <|> z)`\n- Distributivity: `f <$> (x <|> y) == (f <$> x) <|> (f <$> y)`\n\nFor example, the `Array` (`[]`) type is an instance of `Alt`, where\n`(<|>)` is defined to be concatenation.\n","title":"Alt","fixity":null,"info":{"arguments":[["f",null]],"declType":"typeClass","superclasses":[[[["Prelude"],"Functor"],[{"tag":"TypeVar","contents":"f"}]]]},"sourceSpan":{"start":[19,1],"name":"bower_components/purescript-control/src/Control/Alt.purs","end":[22,1]}},{"children":[],"comments":"An infix version of `alt`.\n","title":"(<|>)","fixity":{"associativity":"infixl","precedence":3},"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["f",{"tag":"ConstrainedType","contents":[[[[["Control","Alt"],"Alt"],[{"tag":"TypeVar","contents":"f"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}]}]}]},null]},null]}},"sourceSpan":{"start":[25,1],"name":"bower_components/purescript-control/src/Control/Alt.purs","end":[26,1]}}]},{"moduleName":["Control","Monad"],"declarations":[{"children":[],"comments":"Perform a monadic action unless a condition is true.\n","title":"unless","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["m",{"tag":"ConstrainedType","contents":[[[[["Prelude"],"Monad"],[{"tag":"TypeVar","contents":"m"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"m"},{"tag":"TypeConstructor","contents":[["Prelude"],"Unit"]}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"m"},{"tag":"TypeConstructor","contents":[["Prelude"],"Unit"]}]}]}]}]},null]}},"sourceSpan":{"start":[13,1],"name":"bower_components/purescript-control/src/Control/Monad.purs","end":[14,1]}},{"children":[],"comments":"Perform a monadic action when a condition is true.\n","title":"when","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["m",{"tag":"ConstrainedType","contents":[[[[["Prelude"],"Monad"],[{"tag":"TypeVar","contents":"m"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"m"},{"tag":"TypeConstructor","contents":[["Prelude"],"Unit"]}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"m"},{"tag":"TypeConstructor","contents":[["Prelude"],"Unit"]}]}]}]}]},null]}},"sourceSpan":{"start":[8,1],"name":"bower_components/purescript-control/src/Control/Monad.purs","end":[9,1]}}]},{"moduleName":["Data","Argonaut"],"declarations":[{"children":[],"comments":null,"title":"JArray","fixity":null,"info":{"arguments":[],"declType":"typeSynonym","type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeConstructor","contents":[["Data","Argonaut","Core"],"Json"]}]}},"sourceSpan":{"start":[57,1],"name":"bower_components/purescript-argonaut-core/src/Data/Argonaut/Core.purs","end":[58,1]}},{"children":[],"comments":null,"title":"JAssoc","fixity":null,"info":{"arguments":[],"declType":"typeSynonym","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Tuple"],"Tuple"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeConstructor","contents":[["Data","Argonaut","Core"],"Json"]}]}},"sourceSpan":{"start":[56,1],"name":"bower_components/purescript-argonaut-core/src/Data/Argonaut/Core.purs","end":[57,1]}},{"children":[],"comments":null,"title":"JBoolean","fixity":null,"info":{"arguments":[],"declType":"typeSynonym","type":{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}},"sourceSpan":{"start":[53,1],"name":"bower_components/purescript-argonaut-core/src/Data/Argonaut/Core.purs","end":[54,1]}},{"children":[{"comments":null,"title":"JCursorTop","info":{"arguments":[],"declType":"dataConstructor"},"sourceSpan":null},{"comments":null,"title":"JField","info":{"arguments":[{"tag":"TypeConstructor","contents":[["Prim"],"String"]},{"tag":"TypeConstructor","contents":[["Data","Argonaut","JCursor"],"JCursor"]}],"declType":"dataConstructor"},"sourceSpan":null},{"comments":null,"title":"JIndex","info":{"arguments":[{"tag":"TypeConstructor","contents":[["Prim"],"Int"]},{"tag":"TypeConstructor","contents":[["Data","Argonaut","JCursor"],"JCursor"]}],"declType":"dataConstructor"},"sourceSpan":null},{"comments":null,"title":"showJCursor","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prelude"],"Show"]},{"tag":"TypeConstructor","contents":[["Data","Argonaut","JCursor"],"JCursor"]}]}},"sourceSpan":{"start":[157,1],"name":"bower_components/purescript-argonaut-traversals/src/Data/Argonaut/JCursor.purs","end":[162,1]}},{"comments":null,"title":"eqJCursor","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prelude"],"Eq"]},{"tag":"TypeConstructor","contents":[["Data","Argonaut","JCursor"],"JCursor"]}]}},"sourceSpan":{"start":[165,1],"name":"bower_components/purescript-argonaut-traversals/src/Data/Argonaut/JCursor.purs","end":[171,1]}},{"comments":null,"title":"ordJCursor","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prelude"],"Ord"]},{"tag":"TypeConstructor","contents":[["Data","Argonaut","JCursor"],"JCursor"]}]}},"sourceSpan":{"start":[171,1],"name":"bower_components/purescript-argonaut-traversals/src/Data/Argonaut/JCursor.purs","end":[184,1]}},{"comments":null,"title":"semigroupJCursor","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prelude"],"Semigroup"]},{"tag":"TypeConstructor","contents":[["Data","Argonaut","JCursor"],"JCursor"]}]}},"sourceSpan":{"start":[184,1],"name":"bower_components/purescript-argonaut-traversals/src/Data/Argonaut/JCursor.purs","end":[190,1]}},{"comments":null,"title":"monoidJCursor","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Monoid"],"Monoid"]},{"tag":"TypeConstructor","contents":[["Data","Argonaut","JCursor"],"JCursor"]}]}},"sourceSpan":{"start":[190,1],"name":"bower_components/purescript-argonaut-traversals/src/Data/Argonaut/JCursor.purs","end":[193,1]}},{"comments":null,"title":"encodeJsonJCursor","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Argonaut","Encode"],"EncodeJson"]},{"tag":"TypeConstructor","contents":[["Data","Argonaut","JCursor"],"JCursor"]}]}},"sourceSpan":{"start":[193,1],"name":"bower_components/purescript-argonaut-traversals/src/Data/Argonaut/JCursor.purs","end":[199,1]}},{"comments":null,"title":"decodeJsonJCursor","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Argonaut","Decode"],"DecodeJson"]},{"tag":"TypeConstructor","contents":[["Data","Argonaut","JCursor"],"JCursor"]}]}},"sourceSpan":{"start":[202,1],"name":"bower_components/purescript-argonaut-traversals/src/Data/Argonaut/JCursor.purs","end":[219,76]}}],"comments":null,"title":"JCursor","fixity":null,"info":{"declType":"data","dataDeclType":"data","typeArguments":[]},"sourceSpan":{"start":[20,1],"name":"bower_components/purescript-argonaut-traversals/src/Data/Argonaut/JCursor.purs","end":[25,1]}},{"children":[{"comments":null,"title":"eqJNull","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prelude"],"Eq"]},{"tag":"TypeConstructor","contents":[["Data","Argonaut","Core"],"JNull"]}]}},"sourceSpan":{"start":[176,1],"name":"bower_components/purescript-argonaut-core/src/Data/Argonaut/Core.purs","end":[179,1]}},{"comments":null,"title":"ordJNull","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prelude"],"Ord"]},{"tag":"TypeConstructor","contents":[["Data","Argonaut","Core"],"JNull"]}]}},"sourceSpan":{"start":[179,1],"name":"bower_components/purescript-argonaut-core/src/Data/Argonaut/Core.purs","end":[182,1]}},{"comments":null,"title":"showJNull","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prelude"],"Show"]},{"tag":"TypeConstructor","contents":[["Data","Argonaut","Core"],"JNull"]}]}},"sourceSpan":{"start":[182,1],"name":"bower_components/purescript-argonaut-core/src/Data/Argonaut/Core.purs","end":[185,1]}}],"comments":null,"title":"JNull","fixity":null,"info":{"kind":{"tag":"Star","contents":[]},"declType":"externData"},"sourceSpan":{"start":[60,1],"name":"bower_components/purescript-argonaut-core/src/Data/Argonaut/Core.purs","end":[61,1]}},{"children":[],"comments":null,"title":"JNumber","fixity":null,"info":{"arguments":[],"declType":"typeSynonym","type":{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}},"sourceSpan":{"start":[54,1],"name":"bower_components/purescript-argonaut-core/src/Data/Argonaut/Core.purs","end":[55,1]}},{"children":[],"comments":null,"title":"JObject","fixity":null,"info":{"arguments":[],"declType":"typeSynonym","type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","StrMap"],"StrMap"]},{"tag":"TypeConstructor","contents":[["Data","Argonaut","Core"],"Json"]}]}},"sourceSpan":{"start":[58,1],"name":"bower_components/purescript-argonaut-core/src/Data/Argonaut/Core.purs","end":[60,1]}},{"children":[],"comments":null,"title":"JString","fixity":null,"info":{"arguments":[],"declType":"typeSynonym","type":{"tag":"TypeConstructor","contents":[["Prim"],"String"]}},"sourceSpan":{"start":[55,1],"name":"bower_components/purescript-argonaut-core/src/Data/Argonaut/Core.purs","end":[56,1]}},{"children":[{"comments":null,"title":"eqJson","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prelude"],"Eq"]},{"tag":"TypeConstructor","contents":[["Data","Argonaut","Core"],"Json"]}]}},"sourceSpan":{"start":[185,1],"name":"bower_components/purescript-argonaut-core/src/Data/Argonaut/Core.purs","end":[188,1]}},{"comments":null,"title":"ordJson","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prelude"],"Ord"]},{"tag":"TypeConstructor","contents":[["Data","Argonaut","Core"],"Json"]}]}},"sourceSpan":{"start":[188,1],"name":"bower_components/purescript-argonaut-core/src/Data/Argonaut/Core.purs","end":[191,1]}},{"comments":null,"title":"showJson","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prelude"],"Show"]},{"tag":"TypeConstructor","contents":[["Data","Argonaut","Core"],"Json"]}]}},"sourceSpan":{"start":[191,1],"name":"bower_components/purescript-argonaut-core/src/Data/Argonaut/Core.purs","end":[196,1]}}],"comments":null,"title":"Json","fixity":null,"info":{"kind":{"tag":"Star","contents":[]},"declType":"externData"},"sourceSpan":{"start":[61,1],"name":"bower_components/purescript-argonaut-core/src/Data/Argonaut/Core.purs","end":[63,1]}},{"children":[{"comments":null,"title":"JsonPrim","info":{"arguments":[{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Argonaut","Core"],"JNull"]}]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Argonaut","Core"],"JBoolean"]}]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Argonaut","Core"],"JNumber"]}]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Argonaut","Core"],"JString"]}]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeVar","contents":"a"}]}]}]}]},null]}],"declType":"dataConstructor"},"sourceSpan":null},{"comments":null,"title":"showJsonPrim","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prelude"],"Show"]},{"tag":"TypeConstructor","contents":[["Data","Argonaut","JCursor"],"JsonPrim"]}]}},"sourceSpan":{"start":[162,1],"name":"bower_components/purescript-argonaut-traversals/src/Data/Argonaut/JCursor.purs","end":[165,1]}}],"comments":null,"title":"JsonPrim","fixity":null,"info":{"declType":"data","dataDeclType":"newtype","typeArguments":[]},"sourceSpan":{"start":[25,1],"name":"bower_components/purescript-argonaut-traversals/src/Data/Argonaut/JCursor.purs","end":[33,1]}},{"children":[{"comments":null,"title":"printJson","info":{"declType":"typeClassMember","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Argonaut","Core"],"Json"]}]},{"tag":"TypeVar","contents":"a"}]}},"sourceSpan":null},{"comments":null,"title":"printerString","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Argonaut","Printer"],"Printer"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}},"sourceSpan":{"start":[9,1],"name":"bower_components/purescript-argonaut-core/src/Data/Argonaut/Printer.purs","end":[10,15]}}],"comments":null,"title":"Printer","fixity":null,"info":{"arguments":[["a",null]],"declType":"typeClass","superclasses":[]},"sourceSpan":{"start":[6,1],"name":"bower_components/purescript-argonaut-core/src/Data/Argonaut/Printer.purs","end":[9,1]}},{"children":[],"comments":null,"title":"_Array","fixity":null,"info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Lens","Types"],"PrismP"]},{"tag":"TypeConstructor","contents":[["Data","Argonaut","Core"],"Json"]}]},{"tag":"TypeConstructor","contents":[["Data","Argonaut","Core"],"JArray"]}]}},"sourceSpan":{"start":[18,1],"name":"bower_components/purescript-argonaut-traversals/src/Data/Argonaut/Prisms.purs","end":[19,1]}},{"children":[],"comments":null,"title":"_Boolean","fixity":null,"info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Lens","Types"],"PrismP"]},{"tag":"TypeConstructor","contents":[["Data","Argonaut","Core"],"Json"]}]},{"tag":"TypeConstructor","contents":[["Data","Argonaut","Core"],"JBoolean"]}]}},"sourceSpan":{"start":[9,1],"name":"bower_components/purescript-argonaut-traversals/src/Data/Argonaut/Prisms.purs","end":[10,1]}},{"children":[],"comments":null,"title":"_JsonArray","fixity":null,"info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Lens","Types"],"TraversalP"]},{"tag":"TypeConstructor","contents":[["Data","Argonaut","Core"],"Json"]}]},{"tag":"TypeConstructor","contents":[["Data","Argonaut","Core"],"Json"]}]}},"sourceSpan":{"start":[19,1],"name":"bower_components/purescript-argonaut-traversals/src/Data/Argonaut/Traversals.purs","end":[20,1]}},{"children":[],"comments":null,"title":"_JsonBoolean","fixity":null,"info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Lens","Types"],"TraversalP"]},{"tag":"TypeConstructor","contents":[["Data","Argonaut","Core"],"Json"]}]},{"tag":"TypeConstructor","contents":[["Data","Argonaut","Core"],"Json"]}]}},"sourceSpan":{"start":[10,1],"name":"bower_components/purescript-argonaut-traversals/src/Data/Argonaut/Traversals.purs","end":[11,1]}},{"children":[],"comments":null,"title":"_JsonNull","fixity":null,"info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Lens","Types"],"TraversalP"]},{"tag":"TypeConstructor","contents":[["Data","Argonaut","Core"],"Json"]}]},{"tag":"TypeConstructor","contents":[["Data","Argonaut","Core"],"Json"]}]}},"sourceSpan":{"start":[7,1],"name":"bower_components/purescript-argonaut-traversals/src/Data/Argonaut/Traversals.purs","end":[8,1]}},{"children":[],"comments":null,"title":"_JsonNumber","fixity":null,"info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Lens","Types"],"TraversalP"]},{"tag":"TypeConstructor","contents":[["Data","Argonaut","Core"],"Json"]}]},{"tag":"TypeConstructor","contents":[["Data","Argonaut","Core"],"Json"]}]}},"sourceSpan":{"start":[13,1],"name":"bower_components/purescript-argonaut-traversals/src/Data/Argonaut/Traversals.purs","end":[14,1]}},{"children":[],"comments":null,"title":"_JsonObject","fixity":null,"info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Lens","Types"],"TraversalP"]},{"tag":"TypeConstructor","contents":[["Data","Argonaut","Core"],"Json"]}]},{"tag":"TypeConstructor","contents":[["Data","Argonaut","Core"],"Json"]}]}},"sourceSpan":{"start":[22,1],"name":"bower_components/purescript-argonaut-traversals/src/Data/Argonaut/Traversals.purs","end":[23,1]}},{"children":[],"comments":null,"title":"_JsonString","fixity":null,"info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Lens","Types"],"TraversalP"]},{"tag":"TypeConstructor","contents":[["Data","Argonaut","Core"],"Json"]}]},{"tag":"TypeConstructor","contents":[["Data","Argonaut","Core"],"Json"]}]}},"sourceSpan":{"start":[16,1],"name":"bower_components/purescript-argonaut-traversals/src/Data/Argonaut/Traversals.purs","end":[17,1]}},{"children":[],"comments":null,"title":"_Null","fixity":null,"info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Lens","Types"],"PrismP"]},{"tag":"TypeConstructor","contents":[["Data","Argonaut","Core"],"Json"]}]},{"tag":"TypeConstructor","contents":[["Data","Argonaut","Core"],"JNull"]}]}},"sourceSpan":{"start":[6,1],"name":"bower_components/purescript-argonaut-traversals/src/Data/Argonaut/Prisms.purs","end":[7,1]}},{"children":[],"comments":null,"title":"_Number","fixity":null,"info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Lens","Types"],"PrismP"]},{"tag":"TypeConstructor","contents":[["Data","Argonaut","Core"],"Json"]}]},{"tag":"TypeConstructor","contents":[["Data","Argonaut","Core"],"JNumber"]}]}},"sourceSpan":{"start":[12,1],"name":"bower_components/purescript-argonaut-traversals/src/Data/Argonaut/Prisms.purs","end":[13,1]}},{"children":[],"comments":null,"title":"_Object","fixity":null,"info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Lens","Types"],"PrismP"]},{"tag":"TypeConstructor","contents":[["Data","Argonaut","Core"],"Json"]}]},{"tag":"TypeConstructor","contents":[["Data","Argonaut","Core"],"JObject"]}]}},"sourceSpan":{"start":[21,1],"name":"bower_components/purescript-argonaut-traversals/src/Data/Argonaut/Prisms.purs","end":[22,1]}},{"children":[],"comments":null,"title":"_String","fixity":null,"info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Lens","Types"],"PrismP"]},{"tag":"TypeConstructor","contents":[["Data","Argonaut","Core"],"Json"]}]},{"tag":"TypeConstructor","contents":[["Data","Argonaut","Core"],"JString"]}]}},"sourceSpan":{"start":[15,1],"name":"bower_components/purescript-argonaut-traversals/src/Data/Argonaut/Prisms.purs","end":[16,1]}},{"children":[],"comments":null,"title":"cursorGet","fixity":null,"info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Argonaut","JCursor"],"JCursor"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Argonaut","Core"],"Json"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeConstructor","contents":[["Data","Argonaut","Core"],"Json"]}]}]}]}},"sourceSpan":{"start":[70,1],"name":"bower_components/purescript-argonaut-traversals/src/Data/Argonaut/JCursor.purs","end":[71,1]}},{"children":[],"comments":null,"title":"cursorSet","fixity":null,"info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Argonaut","JCursor"],"JCursor"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Argonaut","Core"],"Json"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Argonaut","Core"],"Json"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeConstructor","contents":[["Data","Argonaut","Core"],"Json"]}]}]}]}]}},"sourceSpan":{"start":[82,1],"name":"bower_components/purescript-argonaut-traversals/src/Data/Argonaut/JCursor.purs","end":[83,1]}},{"children":[],"comments":null,"title":"downField","fixity":null,"info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Argonaut","JCursor"],"JCursor"]}]},{"tag":"TypeConstructor","contents":[["Data","Argonaut","JCursor"],"JCursor"]}]}]}},"sourceSpan":{"start":[58,1],"name":"bower_components/purescript-argonaut-traversals/src/Data/Argonaut/JCursor.purs","end":[59,1]}},{"children":[],"comments":null,"title":"downIndex","fixity":null,"info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Argonaut","JCursor"],"JCursor"]}]},{"tag":"TypeConstructor","contents":[["Data","Argonaut","JCursor"],"JCursor"]}]}]}},"sourceSpan":{"start":[64,1],"name":"bower_components/purescript-argonaut-traversals/src/Data/Argonaut/JCursor.purs","end":[65,1]}},{"children":[],"comments":null,"title":"exactNull","fixity":null,"info":{"declType":"value","type":{"tag":"TypeConstructor","contents":[["Data","Argonaut","Core"],"JNull"]}},"sourceSpan":{"start":[36,1],"name":"bower_components/purescript-argonaut-traversals/src/Data/Argonaut/JCursor.purs","end":[38,1]}},{"children":[],"comments":null,"title":"fail","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[[[[["Prelude"],"Show"],[{"tag":"TypeVar","contents":"a"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Either"],"Either"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeVar","contents":"b"}]}]}]},null]},null]}},"sourceSpan":{"start":[199,1],"name":"bower_components/purescript-argonaut-traversals/src/Data/Argonaut/JCursor.purs","end":[200,1]}},{"children":[],"comments":null,"title":"foldJson","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Argonaut","Core"],"JNull"]}]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Argonaut","Core"],"JBoolean"]}]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Argonaut","Core"],"JNumber"]}]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Argonaut","Core"],"JString"]}]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Argonaut","Core"],"JArray"]}]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Argonaut","Core"],"JObject"]}]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Argonaut","Core"],"Json"]}]},{"tag":"TypeVar","contents":"a"}]}]}]}]}]}]}]},null]}},"sourceSpan":{"start":[63,1],"name":"bower_components/purescript-argonaut-core/src/Data/Argonaut/Core.purs","end":[67,1]}},{"children":[],"comments":null,"title":"foldJsonArray","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Argonaut","Core"],"JArray"]}]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Argonaut","Core"],"Json"]}]},{"tag":"TypeVar","contents":"a"}]}]}]},null]}},"sourceSpan":{"start":[81,1],"name":"bower_components/purescript-argonaut-core/src/Data/Argonaut/Core.purs","end":[82,1]}},{"children":[],"comments":null,"title":"foldJsonBoolean","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Argonaut","Core"],"JBoolean"]}]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Argonaut","Core"],"Json"]}]},{"tag":"TypeVar","contents":"a"}]}]}]},null]}},"sourceSpan":{"start":[72,1],"name":"bower_components/purescript-argonaut-core/src/Data/Argonaut/Core.purs","end":[73,1]}},{"children":[],"comments":null,"title":"foldJsonNull","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Argonaut","Core"],"JNull"]}]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Argonaut","Core"],"Json"]}]},{"tag":"TypeVar","contents":"a"}]}]}]},null]}},"sourceSpan":{"start":[69,1],"name":"bower_components/purescript-argonaut-core/src/Data/Argonaut/Core.purs","end":[70,1]}},{"children":[],"comments":null,"title":"foldJsonNumber","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Argonaut","Core"],"JNumber"]}]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Argonaut","Core"],"Json"]}]},{"tag":"TypeVar","contents":"a"}]}]}]},null]}},"sourceSpan":{"start":[75,1],"name":"bower_components/purescript-argonaut-core/src/Data/Argonaut/Core.purs","end":[76,1]}},{"children":[],"comments":null,"title":"foldJsonObject","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Argonaut","Core"],"JObject"]}]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Argonaut","Core"],"Json"]}]},{"tag":"TypeVar","contents":"a"}]}]}]},null]}},"sourceSpan":{"start":[84,1],"name":"bower_components/purescript-argonaut-core/src/Data/Argonaut/Core.purs","end":[85,1]}},{"children":[],"comments":null,"title":"foldJsonString","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Argonaut","Core"],"JString"]}]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Argonaut","Core"],"Json"]}]},{"tag":"TypeVar","contents":"a"}]}]}]},null]}},"sourceSpan":{"start":[78,1],"name":"bower_components/purescript-argonaut-core/src/Data/Argonaut/Core.purs","end":[79,1]}},{"children":[],"comments":null,"title":"fromArray","fixity":null,"info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Argonaut","Core"],"JArray"]}]},{"tag":"TypeConstructor","contents":[["Data","Argonaut","Core"],"Json"]}]}},"sourceSpan":{"start":[144,1],"name":"bower_components/purescript-argonaut-core/src/Data/Argonaut/Core.purs","end":[145,1]}},{"children":[],"comments":null,"title":"fromBoolean","fixity":null,"info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Argonaut","Core"],"JBoolean"]}]},{"tag":"TypeConstructor","contents":[["Data","Argonaut","Core"],"Json"]}]}},"sourceSpan":{"start":[141,1],"name":"bower_components/purescript-argonaut-core/src/Data/Argonaut/Core.purs","end":[142,1]}},{"children":[],"comments":null,"title":"fromNull","fixity":null,"info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Argonaut","Core"],"JNull"]}]},{"tag":"TypeConstructor","contents":[["Data","Argonaut","Core"],"Json"]}]}},"sourceSpan":{"start":[140,1],"name":"bower_components/purescript-argonaut-core/src/Data/Argonaut/Core.purs","end":[141,1]}},{"children":[],"comments":null,"title":"fromNumber","fixity":null,"info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Argonaut","Core"],"JNumber"]}]},{"tag":"TypeConstructor","contents":[["Data","Argonaut","Core"],"Json"]}]}},"sourceSpan":{"start":[142,1],"name":"bower_components/purescript-argonaut-core/src/Data/Argonaut/Core.purs","end":[143,1]}},{"children":[],"comments":null,"title":"fromObject","fixity":null,"info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Argonaut","Core"],"JObject"]}]},{"tag":"TypeConstructor","contents":[["Data","Argonaut","Core"],"Json"]}]}},"sourceSpan":{"start":[145,1],"name":"bower_components/purescript-argonaut-core/src/Data/Argonaut/Core.purs","end":[149,1]}},{"children":[],"comments":null,"title":"fromPrims","fixity":null,"info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","List"],"List"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Tuple"],"Tuple"]},{"tag":"TypeConstructor","contents":[["Data","Argonaut","JCursor"],"JCursor"]}]},{"tag":"TypeConstructor","contents":[["Data","Argonaut","JCursor"],"JsonPrim"]}]}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeConstructor","contents":[["Data","Argonaut","Core"],"Json"]}]}]}},"sourceSpan":{"start":[151,1],"name":"bower_components/purescript-argonaut-traversals/src/Data/Argonaut/JCursor.purs","end":[152,1]}},{"children":[],"comments":null,"title":"fromString","fixity":null,"info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Argonaut","Core"],"JString"]}]},{"tag":"TypeConstructor","contents":[["Data","Argonaut","Core"],"Json"]}]}},"sourceSpan":{"start":[143,1],"name":"bower_components/purescript-argonaut-core/src/Data/Argonaut/Core.purs","end":[144,1]}},{"children":[],"comments":null,"title":"inferEmpty","fixity":null,"info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Argonaut","JCursor"],"JCursor"]}]},{"tag":"TypeConstructor","contents":[["Data","Argonaut","Core"],"Json"]}]}},"sourceSpan":{"start":[77,1],"name":"bower_components/purescript-argonaut-traversals/src/Data/Argonaut/JCursor.purs","end":[78,1]}},{"children":[],"comments":null,"title":"insideOut","fixity":null,"info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Argonaut","JCursor"],"JCursor"]}]},{"tag":"TypeConstructor","contents":[["Data","Argonaut","JCursor"],"JCursor"]}]}},"sourceSpan":{"start":[53,1],"name":"bower_components/purescript-argonaut-traversals/src/Data/Argonaut/JCursor.purs","end":[54,1]}},{"children":[],"comments":null,"title":"isArray","fixity":null,"info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Argonaut","Core"],"Json"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}},"sourceSpan":{"start":[108,1],"name":"bower_components/purescript-argonaut-core/src/Data/Argonaut/Core.purs","end":[109,1]}},{"children":[],"comments":null,"title":"isBoolean","fixity":null,"info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Argonaut","Core"],"Json"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}},"sourceSpan":{"start":[99,1],"name":"bower_components/purescript-argonaut-core/src/Data/Argonaut/Core.purs","end":[100,1]}},{"children":[],"comments":null,"title":"isNull","fixity":null,"info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Argonaut","Core"],"Json"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}},"sourceSpan":{"start":[96,1],"name":"bower_components/purescript-argonaut-core/src/Data/Argonaut/Core.purs","end":[97,1]}},{"children":[],"comments":null,"title":"isNumber","fixity":null,"info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Argonaut","Core"],"Json"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}},"sourceSpan":{"start":[102,1],"name":"bower_components/purescript-argonaut-core/src/Data/Argonaut/Core.purs","end":[103,1]}},{"children":[],"comments":null,"title":"isObject","fixity":null,"info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Argonaut","Core"],"Json"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}},"sourceSpan":{"start":[111,1],"name":"bower_components/purescript-argonaut-core/src/Data/Argonaut/Core.purs","end":[112,1]}},{"children":[],"comments":null,"title":"isString","fixity":null,"info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Argonaut","Core"],"Json"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}},"sourceSpan":{"start":[105,1],"name":"bower_components/purescript-argonaut-core/src/Data/Argonaut/Core.purs","end":[106,1]}},{"children":[],"comments":null,"title":"jsonEmptyArray","fixity":null,"info":{"declType":"value","type":{"tag":"TypeConstructor","contents":[["Data","Argonaut","Core"],"Json"]}},"sourceSpan":{"start":[162,1],"name":"bower_components/purescript-argonaut-core/src/Data/Argonaut/Core.purs","end":[163,1]}},{"children":[],"comments":null,"title":"jsonEmptyObject","fixity":null,"info":{"declType":"value","type":{"tag":"TypeConstructor","contents":[["Data","Argonaut","Core"],"Json"]}},"sourceSpan":{"start":[165,1],"name":"bower_components/purescript-argonaut-core/src/Data/Argonaut/Core.purs","end":[166,1]}},{"children":[],"comments":null,"title":"jsonFalse","fixity":null,"info":{"declType":"value","type":{"tag":"TypeConstructor","contents":[["Data","Argonaut","Core"],"Json"]}},"sourceSpan":{"start":[153,1],"name":"bower_components/purescript-argonaut-core/src/Data/Argonaut/Core.purs","end":[154,1]}},{"children":[],"comments":null,"title":"jsonNull","fixity":null,"info":{"declType":"value","type":{"tag":"TypeConstructor","contents":[["Data","Argonaut","Core"],"Json"]}},"sourceSpan":{"start":[149,1],"name":"bower_components/purescript-argonaut-core/src/Data/Argonaut/Core.purs","end":[151,1]}},{"children":[],"comments":null,"title":"jsonParser","fixity":null,"info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Either"],"Either"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeConstructor","contents":[["Data","Argonaut","Core"],"Json"]}]}]}},"sourceSpan":{"start":[9,1],"name":"bower_components/purescript-argonaut-core/src/Data/Argonaut/Parser.purs","end":[10,1]}},{"children":[],"comments":null,"title":"jsonSingletonArray","fixity":null,"info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Argonaut","Core"],"Json"]}]},{"tag":"TypeConstructor","contents":[["Data","Argonaut","Core"],"Json"]}]}},"sourceSpan":{"start":[168,1],"name":"bower_components/purescript-argonaut-core/src/Data/Argonaut/Core.purs","end":[169,1]}},{"children":[],"comments":null,"title":"jsonSingletonObject","fixity":null,"info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Argonaut","Core"],"Json"]}]},{"tag":"TypeConstructor","contents":[["Data","Argonaut","Core"],"Json"]}]}]}},"sourceSpan":{"start":[171,1],"name":"bower_components/purescript-argonaut-core/src/Data/Argonaut/Core.purs","end":[172,1]}},{"children":[],"comments":null,"title":"jsonTrue","fixity":null,"info":{"declType":"value","type":{"tag":"TypeConstructor","contents":[["Data","Argonaut","Core"],"Json"]}},"sourceSpan":{"start":[151,1],"name":"bower_components/purescript-argonaut-core/src/Data/Argonaut/Core.purs","end":[152,1]}},{"children":[],"comments":null,"title":"jsonZero","fixity":null,"info":{"declType":"value","type":{"tag":"TypeConstructor","contents":[["Data","Argonaut","Core"],"Json"]}},"sourceSpan":{"start":[156,1],"name":"bower_components/purescript-argonaut-core/src/Data/Argonaut/Core.purs","end":[157,1]}},{"children":[],"comments":null,"title":"primBool","fixity":null,"info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Argonaut","Core"],"JBoolean"]}]},{"tag":"TypeConstructor","contents":[["Data","Argonaut","JCursor"],"JsonPrim"]}]}},"sourceSpan":{"start":[41,1],"name":"bower_components/purescript-argonaut-traversals/src/Data/Argonaut/JCursor.purs","end":[42,1]}},{"children":[],"comments":null,"title":"primNull","fixity":null,"info":{"declType":"value","type":{"tag":"TypeConstructor","contents":[["Data","Argonaut","JCursor"],"JsonPrim"]}},"sourceSpan":{"start":[38,1],"name":"bower_components/purescript-argonaut-traversals/src/Data/Argonaut/JCursor.purs","end":[39,1]}},{"children":[],"comments":null,"title":"primNum","fixity":null,"info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Argonaut","Core"],"JNumber"]}]},{"tag":"TypeConstructor","contents":[["Data","Argonaut","JCursor"],"JsonPrim"]}]}},"sourceSpan":{"start":[44,1],"name":"bower_components/purescript-argonaut-traversals/src/Data/Argonaut/JCursor.purs","end":[45,1]}},{"children":[],"comments":null,"title":"primStr","fixity":null,"info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Argonaut","Core"],"JString"]}]},{"tag":"TypeConstructor","contents":[["Data","Argonaut","JCursor"],"JsonPrim"]}]}},"sourceSpan":{"start":[47,1],"name":"bower_components/purescript-argonaut-traversals/src/Data/Argonaut/JCursor.purs","end":[48,1]}},{"children":[],"comments":null,"title":"primToJson","fixity":null,"info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Argonaut","JCursor"],"JsonPrim"]}]},{"tag":"TypeConstructor","contents":[["Data","Argonaut","Core"],"Json"]}]}},"sourceSpan":{"start":[50,1],"name":"bower_components/purescript-argonaut-traversals/src/Data/Argonaut/JCursor.purs","end":[51,1]}},{"children":[],"comments":null,"title":"runJsonPrim","fixity":null,"info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Argonaut","JCursor"],"JsonPrim"]}]},{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Argonaut","Core"],"JNull"]}]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Argonaut","Core"],"JBoolean"]}]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Argonaut","Core"],"JNumber"]}]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Argonaut","Core"],"JString"]}]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeVar","contents":"a"}]}]}]}]},null]}]}},"sourceSpan":{"start":[33,1],"name":"bower_components/purescript-argonaut-traversals/src/Data/Argonaut/JCursor.purs","end":[34,1]}},{"children":[],"comments":null,"title":"toArray","fixity":null,"info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Argonaut","Core"],"Json"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeConstructor","contents":[["Data","Argonaut","Core"],"JArray"]}]}]}},"sourceSpan":{"start":[132,1],"name":"bower_components/purescript-argonaut-core/src/Data/Argonaut/Core.purs","end":[133,1]}},{"children":[],"comments":null,"title":"toBoolean","fixity":null,"info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Argonaut","Core"],"Json"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeConstructor","contents":[["Data","Argonaut","Core"],"JBoolean"]}]}]}},"sourceSpan":{"start":[123,1],"name":"bower_components/purescript-argonaut-core/src/Data/Argonaut/Core.purs","end":[124,1]}},{"children":[],"comments":null,"title":"toNull","fixity":null,"info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Argonaut","Core"],"Json"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeConstructor","contents":[["Data","Argonaut","Core"],"JNull"]}]}]}},"sourceSpan":{"start":[120,1],"name":"bower_components/purescript-argonaut-core/src/Data/Argonaut/Core.purs","end":[121,1]}},{"children":[],"comments":null,"title":"toNumber","fixity":null,"info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Argonaut","Core"],"Json"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeConstructor","contents":[["Data","Argonaut","Core"],"JNumber"]}]}]}},"sourceSpan":{"start":[126,1],"name":"bower_components/purescript-argonaut-core/src/Data/Argonaut/Core.purs","end":[127,1]}},{"children":[],"comments":null,"title":"toObject","fixity":null,"info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Argonaut","Core"],"Json"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeConstructor","contents":[["Data","Argonaut","Core"],"JObject"]}]}]}},"sourceSpan":{"start":[135,1],"name":"bower_components/purescript-argonaut-core/src/Data/Argonaut/Core.purs","end":[136,1]}},{"children":[],"comments":null,"title":"toPrims","fixity":null,"info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Argonaut","Core"],"Json"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","List"],"List"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Tuple"],"Tuple"]},{"tag":"TypeConstructor","contents":[["Data","Argonaut","JCursor"],"JCursor"]}]},{"tag":"TypeConstructor","contents":[["Data","Argonaut","JCursor"],"JsonPrim"]}]}]}]}},"sourceSpan":{"start":[113,1],"name":"bower_components/purescript-argonaut-traversals/src/Data/Argonaut/JCursor.purs","end":[114,1]}},{"children":[],"comments":null,"title":"toString","fixity":null,"info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Argonaut","Core"],"Json"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeConstructor","contents":[["Data","Argonaut","Core"],"JString"]}]}]}},"sourceSpan":{"start":[129,1],"name":"bower_components/purescript-argonaut-core/src/Data/Argonaut/Core.purs","end":[130,1]}},{"children":[],"comments":null,"title":"(.?)","fixity":{"associativity":"infix","precedence":7},"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[[[[["Data","Argonaut","Decode"],"DecodeJson"],[{"tag":"TypeVar","contents":"a"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Argonaut","Core"],"JObject"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Either"],"Either"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeVar","contents":"a"}]}]}]}]},null]}},"sourceSpan":{"start":[34,1],"name":"bower_components/purescript-argonaut-codecs/src/Data/Argonaut/Combinators.purs","end":[35,1]}},{"children":[],"comments":null,"title":"(:=)","fixity":{"associativity":"infix","precedence":7},"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[[[[["Data","Argonaut","Encode"],"EncodeJson"],[{"tag":"TypeVar","contents":"a"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeConstructor","contents":[["Data","Argonaut","Core"],"JAssoc"]}]}]}]},null]}},"sourceSpan":{"start":[23,1],"name":"bower_components/purescript-argonaut-codecs/src/Data/Argonaut/Combinators.purs","end":[24,1]}},{"children":[],"comments":null,"title":"(?>>=)","fixity":{"associativity":"infixl","precedence":1},"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Either"],"Either"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeVar","contents":"a"}]}]}]},null]}},"sourceSpan":{"start":[29,1],"name":"bower_components/purescript-argonaut-codecs/src/Data/Argonaut/Combinators.purs","end":[30,1]}},{"children":[],"comments":null,"title":"(~>)","fixity":{"associativity":"infixr","precedence":6},"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[[[[["Data","Argonaut","Encode"],"EncodeJson"],[{"tag":"TypeVar","contents":"a"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Argonaut","Core"],"JAssoc"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeConstructor","contents":[["Data","Argonaut","Core"],"Json"]}]}]}]},null]}},"sourceSpan":{"start":[26,1],"name":"bower_components/purescript-argonaut-codecs/src/Data/Argonaut/Combinators.purs","end":[27,1]}}]},{"moduleName":["Data","Argonaut","Decode"],"declarations":[{"children":[{"comments":null,"title":"decodeJson","info":{"declType":"typeClassMember","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Argonaut","Core"],"Json"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Either"],"Either"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":null},{"comments":null,"title":"decodeJsonMaybe","info":{"declType":"instance","dependencies":[[[["Data","Argonaut","Decode"],"DecodeJson"],[{"tag":"TypeVar","contents":"a"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Argonaut","Decode"],"DecodeJson"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[68,1],"name":"bower_components/purescript-argonaut-codecs/src/Data/Argonaut/Decode.purs","end":[73,1]}},{"comments":null,"title":"decodeJsonTuple","info":{"declType":"instance","dependencies":[[[["Data","Argonaut","Decode"],"DecodeJson"],[{"tag":"TypeVar","contents":"a"}]],[[["Data","Argonaut","Decode"],"DecodeJson"],[{"tag":"TypeVar","contents":"b"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Argonaut","Decode"],"DecodeJson"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Tuple"],"Tuple"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]}},"sourceSpan":{"start":[73,1],"name":"bower_components/purescript-argonaut-codecs/src/Data/Argonaut/Decode.purs","end":[79,1]}},{"comments":null,"title":"decodeJsonEither","info":{"declType":"instance","dependencies":[[[["Data","Argonaut","Decode"],"DecodeJson"],[{"tag":"TypeVar","contents":"a"}]],[[["Data","Argonaut","Decode"],"DecodeJson"],[{"tag":"TypeVar","contents":"b"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Argonaut","Decode"],"DecodeJson"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Either"],"Either"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]}},"sourceSpan":{"start":[79,1],"name":"bower_components/purescript-argonaut-codecs/src/Data/Argonaut/Decode.purs","end":[98,1]}},{"comments":null,"title":"decodeJsonNull","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Argonaut","Decode"],"DecodeJson"]},{"tag":"TypeConstructor","contents":[["Prelude"],"Unit"]}]}},"sourceSpan":{"start":[98,1],"name":"bower_components/purescript-argonaut-codecs/src/Data/Argonaut/Decode.purs","end":[101,1]}},{"comments":null,"title":"decodeJsonBoolean","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Argonaut","Decode"],"DecodeJson"]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}},"sourceSpan":{"start":[101,1],"name":"bower_components/purescript-argonaut-codecs/src/Data/Argonaut/Decode.purs","end":[104,1]}},{"comments":null,"title":"decodeJsonNumber","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Argonaut","Decode"],"DecodeJson"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]}},"sourceSpan":{"start":[104,1],"name":"bower_components/purescript-argonaut-codecs/src/Data/Argonaut/Decode.purs","end":[107,1]}},{"comments":null,"title":"decodeJsonInt","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Argonaut","Decode"],"DecodeJson"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}},"sourceSpan":{"start":[107,1],"name":"bower_components/purescript-argonaut-codecs/src/Data/Argonaut/Decode.purs","end":[111,1]}},{"comments":null,"title":"decodeJsonString","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Argonaut","Decode"],"DecodeJson"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}},"sourceSpan":{"start":[111,1],"name":"bower_components/purescript-argonaut-codecs/src/Data/Argonaut/Decode.purs","end":[114,1]}},{"comments":null,"title":"decodeJsonJson","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Argonaut","Decode"],"DecodeJson"]},{"tag":"TypeConstructor","contents":[["Data","Argonaut","Core"],"Json"]}]}},"sourceSpan":{"start":[114,1],"name":"bower_components/purescript-argonaut-codecs/src/Data/Argonaut/Decode.purs","end":[117,1]}},{"comments":null,"title":"decodeJsonChar","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Argonaut","Decode"],"DecodeJson"]},{"tag":"TypeConstructor","contents":[["Prim"],"Char"]}]}},"sourceSpan":{"start":[117,1],"name":"bower_components/purescript-argonaut-codecs/src/Data/Argonaut/Decode.purs","end":[122,1]}},{"comments":null,"title":"decodeStrMap","info":{"declType":"instance","dependencies":[[[["Data","Argonaut","Decode"],"DecodeJson"],[{"tag":"TypeVar","contents":"a"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Argonaut","Decode"],"DecodeJson"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","StrMap"],"StrMap"]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[122,1],"name":"bower_components/purescript-argonaut-codecs/src/Data/Argonaut/Decode.purs","end":[127,1]}},{"comments":null,"title":"decodeArray","info":{"declType":"instance","dependencies":[[[["Data","Argonaut","Decode"],"DecodeJson"],[{"tag":"TypeVar","contents":"a"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Argonaut","Decode"],"DecodeJson"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[127,1],"name":"bower_components/purescript-argonaut-codecs/src/Data/Argonaut/Decode.purs","end":[132,1]}},{"comments":null,"title":"decodeList","info":{"declType":"instance","dependencies":[[[["Data","Argonaut","Decode"],"DecodeJson"],[{"tag":"TypeVar","contents":"a"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Argonaut","Decode"],"DecodeJson"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","List"],"List"]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[132,1],"name":"bower_components/purescript-argonaut-codecs/src/Data/Argonaut/Decode.purs","end":[137,1]}},{"comments":null,"title":"decodeMap","info":{"declType":"instance","dependencies":[[[["Prelude"],"Ord"],[{"tag":"TypeVar","contents":"a"}]],[[["Data","Argonaut","Decode"],"DecodeJson"],[{"tag":"TypeVar","contents":"a"}]],[[["Data","Argonaut","Decode"],"DecodeJson"],[{"tag":"TypeVar","contents":"b"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Argonaut","Decode"],"DecodeJson"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Map"],"Map"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]}},"sourceSpan":{"start":[137,1],"name":"bower_components/purescript-argonaut-codecs/src/Data/Argonaut/Decode.purs","end":[140,1]}}],"comments":null,"title":"DecodeJson","fixity":null,"info":{"arguments":[["a",null]],"declType":"typeClass","superclasses":[]},"sourceSpan":{"start":[28,1],"name":"bower_components/purescript-argonaut-codecs/src/Data/Argonaut/Decode.purs","end":[32,1]}},{"children":[],"comments":null,"title":"decodeMaybe","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[[[[["Data","Argonaut","Decode"],"DecodeJson"],[{"tag":"TypeVar","contents":"a"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Argonaut","Core"],"Json"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeVar","contents":"a"}]}]}]},null]}},"sourceSpan":{"start":[140,1],"name":"bower_components/purescript-argonaut-codecs/src/Data/Argonaut/Decode.purs","end":[141,1]}},{"children":[],"comments":"Decode `Json` representation of a value which has a `Generic` type.\n","title":"gDecodeJson","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[[[[["Data","Generic"],"Generic"],[{"tag":"TypeVar","contents":"a"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Argonaut","Core"],"Json"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Either"],"Either"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeVar","contents":"a"}]}]}]},null]}},"sourceSpan":{"start":[32,1],"name":"bower_components/purescript-argonaut-codecs/src/Data/Argonaut/Decode.purs","end":[33,1]}},{"children":[],"comments":"Decode `Json` representation of a `GenericSpine`.\n","title":"gDecodeJson'","fixity":null,"info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Generic"],"GenericSignature"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Argonaut","Core"],"Json"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Either"],"Either"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeConstructor","contents":[["Data","Generic"],"GenericSpine"]}]}]}]}},"sourceSpan":{"start":[37,1],"name":"bower_components/purescript-argonaut-codecs/src/Data/Argonaut/Decode.purs","end":[38,1]}}]},{"moduleName":["Data","Argonaut","Encode"],"declarations":[{"children":[{"comments":null,"title":"encodeJson","info":{"declType":"typeClassMember","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeConstructor","contents":[["Data","Argonaut","Core"],"Json"]}]}},"sourceSpan":null},{"comments":null,"title":"encodeJsonMaybe","info":{"declType":"instance","dependencies":[[[["Data","Argonaut","Encode"],"EncodeJson"],[{"tag":"TypeVar","contents":"a"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Argonaut","Encode"],"EncodeJson"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[45,1],"name":"bower_components/purescript-argonaut-codecs/src/Data/Argonaut/Encode.purs","end":[49,1]}},{"comments":null,"title":"encodeJsonTuple","info":{"declType":"instance","dependencies":[[[["Data","Argonaut","Encode"],"EncodeJson"],[{"tag":"TypeVar","contents":"a"}]],[[["Data","Argonaut","Encode"],"EncodeJson"],[{"tag":"TypeVar","contents":"b"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Argonaut","Encode"],"EncodeJson"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Tuple"],"Tuple"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]}},"sourceSpan":{"start":[49,1],"name":"bower_components/purescript-argonaut-codecs/src/Data/Argonaut/Encode.purs","end":[52,1]}},{"comments":null,"title":"encodeJsonEither","info":{"declType":"instance","dependencies":[[[["Data","Argonaut","Encode"],"EncodeJson"],[{"tag":"TypeVar","contents":"a"}]],[[["Data","Argonaut","Encode"],"EncodeJson"],[{"tag":"TypeVar","contents":"b"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Argonaut","Encode"],"EncodeJson"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Either"],"Either"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]}},"sourceSpan":{"start":[52,1],"name":"bower_components/purescript-argonaut-codecs/src/Data/Argonaut/Encode.purs","end":[60,1]}},{"comments":null,"title":"encodeJsonUnit","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Argonaut","Encode"],"EncodeJson"]},{"tag":"TypeConstructor","contents":[["Prelude"],"Unit"]}]}},"sourceSpan":{"start":[60,1],"name":"bower_components/purescript-argonaut-codecs/src/Data/Argonaut/Encode.purs","end":[63,1]}},{"comments":null,"title":"encodeJsonJBoolean","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Argonaut","Encode"],"EncodeJson"]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}},"sourceSpan":{"start":[63,1],"name":"bower_components/purescript-argonaut-codecs/src/Data/Argonaut/Encode.purs","end":[66,1]}},{"comments":null,"title":"encodeJsonJNumber","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Argonaut","Encode"],"EncodeJson"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]}},"sourceSpan":{"start":[66,1],"name":"bower_components/purescript-argonaut-codecs/src/Data/Argonaut/Encode.purs","end":[69,1]}},{"comments":null,"title":"encodeJsonInt","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Argonaut","Encode"],"EncodeJson"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}},"sourceSpan":{"start":[69,1],"name":"bower_components/purescript-argonaut-codecs/src/Data/Argonaut/Encode.purs","end":[72,1]}},{"comments":null,"title":"encodeJsonJString","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Argonaut","Encode"],"EncodeJson"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}},"sourceSpan":{"start":[72,1],"name":"bower_components/purescript-argonaut-codecs/src/Data/Argonaut/Encode.purs","end":[75,1]}},{"comments":null,"title":"encodeJsonJson","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Argonaut","Encode"],"EncodeJson"]},{"tag":"TypeConstructor","contents":[["Data","Argonaut","Core"],"Json"]}]}},"sourceSpan":{"start":[75,1],"name":"bower_components/purescript-argonaut-codecs/src/Data/Argonaut/Encode.purs","end":[78,1]}},{"comments":null,"title":"encodeJsonChar","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Argonaut","Encode"],"EncodeJson"]},{"tag":"TypeConstructor","contents":[["Prim"],"Char"]}]}},"sourceSpan":{"start":[78,1],"name":"bower_components/purescript-argonaut-codecs/src/Data/Argonaut/Encode.purs","end":[81,1]}},{"comments":null,"title":"encodeJsonArray","info":{"declType":"instance","dependencies":[[[["Data","Argonaut","Encode"],"EncodeJson"],[{"tag":"TypeVar","contents":"a"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Argonaut","Encode"],"EncodeJson"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[81,1],"name":"bower_components/purescript-argonaut-codecs/src/Data/Argonaut/Encode.purs","end":[84,1]}},{"comments":null,"title":"encodeJsonList","info":{"declType":"instance","dependencies":[[[["Data","Argonaut","Encode"],"EncodeJson"],[{"tag":"TypeVar","contents":"a"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Argonaut","Encode"],"EncodeJson"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","List"],"List"]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[84,1],"name":"bower_components/purescript-argonaut-codecs/src/Data/Argonaut/Encode.purs","end":[90,1]}},{"comments":null,"title":"encodeStrMap","info":{"declType":"instance","dependencies":[[[["Data","Argonaut","Encode"],"EncodeJson"],[{"tag":"TypeVar","contents":"a"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Argonaut","Encode"],"EncodeJson"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","StrMap"],"StrMap"]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[90,1],"name":"bower_components/purescript-argonaut-codecs/src/Data/Argonaut/Encode.purs","end":[93,1]}},{"comments":null,"title":"encodeMap","info":{"declType":"instance","dependencies":[[[["Prelude"],"Ord"],[{"tag":"TypeVar","contents":"a"}]],[[["Data","Argonaut","Encode"],"EncodeJson"],[{"tag":"TypeVar","contents":"a"}]],[[["Data","Argonaut","Encode"],"EncodeJson"],[{"tag":"TypeVar","contents":"b"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Argonaut","Encode"],"EncodeJson"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Map"],"Map"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]}},"sourceSpan":{"start":[93,1],"name":"bower_components/purescript-argonaut-codecs/src/Data/Argonaut/Encode.purs","end":[94,33]}}],"comments":null,"title":"EncodeJson","fixity":null,"info":{"arguments":[["a",null]],"declType":"typeClass","superclasses":[]},"sourceSpan":{"start":[22,1],"name":"bower_components/purescript-argonaut-codecs/src/Data/Argonaut/Encode.purs","end":[26,1]}},{"children":[],"comments":"Encode any `Generic` data structure into `Json`.\n","title":"gEncodeJson","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[[[[["Data","Generic"],"Generic"],[{"tag":"TypeVar","contents":"a"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeConstructor","contents":[["Data","Argonaut","Core"],"Json"]}]}]},null]}},"sourceSpan":{"start":[26,1],"name":"bower_components/purescript-argonaut-codecs/src/Data/Argonaut/Encode.purs","end":[27,1]}},{"children":[],"comments":"Encode `GenericSpine` into `Json`.\n","title":"gEncodeJson'","fixity":null,"info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Generic"],"GenericSpine"]}]},{"tag":"TypeConstructor","contents":[["Data","Argonaut","Core"],"Json"]}]}},"sourceSpan":{"start":[30,1],"name":"bower_components/purescript-argonaut-codecs/src/Data/Argonaut/Encode.purs","end":[31,1]}}]},{"moduleName":["Data","Array"],"declarations":[{"children":[],"comments":"Update or delete the element at the specified index by applying a\nfunction to the current value, returning a new array or `Nothing` if the\nindex is out-of-bounds.\n","title":"alterAt","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeVar","contents":"a"}]}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]}]}]}]}]},null]}},"sourceSpan":{"start":[346,1],"name":"bower_components/purescript-arrays/src/Data/Array.purs","end":[347,1]}},{"children":[],"comments":"Filter an array of optional values, keeping only the elements which contain\na value, creating a new array.\n","title":"catMaybes","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeVar","contents":"a"}]}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]}]},null]}},"sourceSpan":{"start":[393,1],"name":"bower_components/purescript-arrays/src/Data/Array.purs","end":[394,1]}},{"children":[],"comments":"Flatten an array of arrays, creating a new array.\n","title":"concat","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]}]},null]}},"sourceSpan":{"start":[361,1],"name":"bower_components/purescript-arrays/src/Data/Array.purs","end":[365,1]}},{"children":[],"comments":"Apply a function to each element in an array, and flatten the results\ninto a single, new array.\n","title":"concatMap","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"b"}]}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"b"}]}]}]},null]},null]}},"sourceSpan":{"start":[365,1],"name":"bower_components/purescript-arrays/src/Data/Array.purs","end":[366,1]}},{"children":[],"comments":"Attaches an element to the front of an array, creating a new array.\n\n```purescript\ncons 1 [2, 3, 4] = [1, 2, 3, 4]\n```\n\nNote, the running time of this function is `O(n)`.\n","title":"cons","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]}]}]},null]}},"sourceSpan":{"start":[177,1],"name":"bower_components/purescript-arrays/src/Data/Array.purs","end":[179,1]}},{"children":[],"comments":"Delete the first element of an array which is equal to the specified value,\ncreating a new array.\n","title":"delete","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[[[[["Prelude"],"Eq"],[{"tag":"TypeVar","contents":"a"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]}]}]}]},null]}},"sourceSpan":{"start":[509,1],"name":"bower_components/purescript-arrays/src/Data/Array.purs","end":[510,1]}},{"children":[],"comments":"Delete the element at the specified index, creating a new array, or\nreturning `Nothing` if the index is out of bounds.\n","title":"deleteAt","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]}]}]}]},null]}},"sourceSpan":{"start":[315,1],"name":"bower_components/purescript-arrays/src/Data/Array.purs","end":[316,1]}},{"children":[],"comments":"Delete the first element of an array which matches the specified value,\nunder the equivalence relation provided in the first argument, creating a\nnew array.\n","title":"deleteBy","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]}]}]}]},null]}},"sourceSpan":{"start":[515,1],"name":"bower_components/purescript-arrays/src/Data/Array.purs","end":[516,1]}},{"children":[],"comments":"Drop a number of elements from the start of an array, creating a new array.\n","title":"drop","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]}]}]},null]}},"sourceSpan":{"start":[434,1],"name":"bower_components/purescript-arrays/src/Data/Array.purs","end":[438,1]}},{"children":[],"comments":"Remove the longest initial subarray for which all element satisfy the\nspecified predicate, creating a new array.\n","title":"dropWhile","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]}]}]},null]}},"sourceSpan":{"start":[438,1],"name":"bower_components/purescript-arrays/src/Data/Array.purs","end":[439,1]}},{"children":[],"comments":"Find the index of the first element equal to the specified element.\n","title":"elemIndex","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[[[[["Prelude"],"Eq"],[{"tag":"TypeVar","contents":"a"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}]}]}]},null]}},"sourceSpan":{"start":[274,1],"name":"bower_components/purescript-arrays/src/Data/Array.purs","end":[275,1]}},{"children":[],"comments":"Find the index of the last element equal to the specified element.\n","title":"elemLastIndex","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[[[[["Prelude"],"Eq"],[{"tag":"TypeVar","contents":"a"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}]}]}]},null]}},"sourceSpan":{"start":[278,1],"name":"bower_components/purescript-arrays/src/Data/Array.purs","end":[279,1]}},{"children":[],"comments":"Filter an array, keeping the elements which satisfy a predicate function,\ncreating a new array.\n","title":"filter","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]}]}]},null]}},"sourceSpan":{"start":[370,1],"name":"bower_components/purescript-arrays/src/Data/Array.purs","end":[378,1]}},{"children":[],"comments":"Filter where the predicate returns a monadic `Boolean`.\n\n```purescript\npowerSet :: forall a. [a] -> [[a]]\npowerSet = filterM (const [true, false])\n```\n","title":"filterM","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["m",{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[[[[["Prelude"],"Monad"],[{"tag":"TypeVar","contents":"m"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"m"},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"m"},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]}]}]}]}]},null]},null]}},"sourceSpan":{"start":[378,1],"name":"bower_components/purescript-arrays/src/Data/Array.purs","end":[379,1]}},{"children":[],"comments":"Find the first index for which a predicate holds.\n","title":"findIndex","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}]}]},null]}},"sourceSpan":{"start":[282,1],"name":"bower_components/purescript-arrays/src/Data/Array.purs","end":[283,1]}},{"children":[],"comments":"Find the last index for which a predicate holds.\n","title":"findLastIndex","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}]}]},null]}},"sourceSpan":{"start":[292,1],"name":"bower_components/purescript-arrays/src/Data/Array.purs","end":[293,1]}},{"children":[],"comments":"Perform a fold using a monadic step function.\n","title":"foldM","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["m",{"tag":"ConstrainedType","contents":[[[[["Prelude"],"Monad"],[{"tag":"TypeVar","contents":"m"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"m"},{"tag":"TypeVar","contents":"a"}]}]}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"m"},{"tag":"TypeVar","contents":"a"}]}]}]}]}]},null]},null]},null]}},"sourceSpan":{"start":[565,1],"name":"bower_components/purescript-arrays/src/Data/Array.purs","end":[566,1]}},{"children":[],"comments":"Group equal, consecutive elements of an array into arrays.\n\n```purescript\ngroup [1,1,2,2,1] == [[1,1],[2,2],[1]]\n```\n","title":"group","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[[[[["Prelude"],"Eq"],[{"tag":"TypeVar","contents":"a"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]}]}]}]},null]}},"sourceSpan":{"start":[463,1],"name":"bower_components/purescript-arrays/src/Data/Array.purs","end":[464,1]}},{"children":[],"comments":"Sort and then group the elements of an array into arrays.\n\n```purescript\ngroup' [1,1,2,2,1] == [[1,1,1],[2,2]]\n```\n","title":"group'","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[[[[["Prelude"],"Ord"],[{"tag":"TypeVar","contents":"a"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]}]}]}]},null]}},"sourceSpan":{"start":[471,1],"name":"bower_components/purescript-arrays/src/Data/Array.purs","end":[472,1]}},{"children":[],"comments":"Group equal, consecutive elements of an array into arrays, using the\nspecified equivalence relation to detemine equality.\n","title":"groupBy","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]}]}]}]},null]}},"sourceSpan":{"start":[476,1],"name":"bower_components/purescript-arrays/src/Data/Array.purs","end":[477,1]}},{"children":[],"comments":"Get the first element in an array, or `Nothing` if the array is empty\n\nRunning time: `O(1)`.\n","title":"head","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeVar","contents":"a"}]}]},null]}},"sourceSpan":{"start":[208,1],"name":"bower_components/purescript-arrays/src/Data/Array.purs","end":[209,1]}},{"children":[],"comments":"This function provides a safe way to read a value at a particular index\nfrom an array.\n","title":"index","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeVar","contents":"a"}]}]}]},null]}},"sourceSpan":{"start":[258,1],"name":"bower_components/purescript-arrays/src/Data/Array.purs","end":[259,1]}},{"children":[],"comments":"Get all but the last element of an array, creating a new array, or `Nothing` if the array is empty.\n\nRunning time: `O(n)` where `n` is the length of the array\n","title":"init","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]}]}]},null]}},"sourceSpan":{"start":[226,1],"name":"bower_components/purescript-arrays/src/Data/Array.purs","end":[227,1]}},{"children":[],"comments":"Insert an element into a sorted array.\n","title":"insert","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[[[[["Prelude"],"Ord"],[{"tag":"TypeVar","contents":"a"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]}]}]}]},null]}},"sourceSpan":{"start":[191,1],"name":"bower_components/purescript-arrays/src/Data/Array.purs","end":[192,1]}},{"children":[],"comments":"Insert an element at the specified index, creating a new array, or\nreturning `Nothing` if the index is out of bounds.\n","title":"insertAt","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]}]}]}]}]},null]}},"sourceSpan":{"start":[303,1],"name":"bower_components/purescript-arrays/src/Data/Array.purs","end":[304,1]}},{"children":[],"comments":"Insert an element into a sorted array, using the specified function to\ndetermine the ordering of elements.\n","title":"insertBy","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeConstructor","contents":[["Prelude"],"Ordering"]}]}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]}]}]}]},null]}},"sourceSpan":{"start":[196,1],"name":"bower_components/purescript-arrays/src/Data/Array.purs","end":[197,1]}},{"children":[],"comments":"Calculate the intersection of two arrays, creating a new array.\n","title":"intersect","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[[[[["Prelude"],"Eq"],[{"tag":"TypeVar","contents":"a"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]}]}]}]},null]}},"sourceSpan":{"start":[528,1],"name":"bower_components/purescript-arrays/src/Data/Array.purs","end":[529,1]}},{"children":[],"comments":"Calculate the intersection of two arrays, using the specified equivalence\nrelation to compare elements, creating a new array.\n","title":"intersectBy","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]}]}]}]},null]}},"sourceSpan":{"start":[533,1],"name":"bower_components/purescript-arrays/src/Data/Array.purs","end":[534,1]}},{"children":[],"comments":"Get the last element in an array, or `Nothing` if the array is empty\n\nRunning time: `O(1)`.\n","title":"last","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeVar","contents":"a"}]}]},null]}},"sourceSpan":{"start":[214,1],"name":"bower_components/purescript-arrays/src/Data/Array.purs","end":[215,1]}},{"children":[],"comments":"Get the number of elements in an array.\n","title":"length","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},null]}},"sourceSpan":{"start":[164,1],"name":"bower_components/purescript-arrays/src/Data/Array.purs","end":[177,1]}},{"children":[],"comments":"Attempt a computation multiple times, returning as many successful results\nas possible (possibly zero).\n\nThe `Lazy` constraint is used to generate the result lazily, to ensure\ntermination.\n","title":"many","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["f",{"tag":"ConstrainedType","contents":[[[[["Control","Alternative"],"Alternative"],[{"tag":"TypeVar","contents":"f"}]],[[["Control","Lazy"],"Lazy"],[{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]}]}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]}]}]}]},null]},null]}},"sourceSpan":{"start":[152,1],"name":"bower_components/purescript-arrays/src/Data/Array.purs","end":[153,1]}},{"children":[],"comments":"Apply a function to each element in an array, keeping only the results\nwhich contain a value, creating a new array.\n","title":"mapMaybe","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeVar","contents":"b"}]}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"b"}]}]}]},null]},null]}},"sourceSpan":{"start":[388,1],"name":"bower_components/purescript-arrays/src/Data/Array.purs","end":[389,1]}},{"children":[],"comments":"Apply a function to the element at the specified index, creating a new\narray, or returning `Nothing` if the index is out of bounds.\n","title":"modifyAt","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]}]}]}]}]},null]}},"sourceSpan":{"start":[338,1],"name":"bower_components/purescript-arrays/src/Data/Array.purs","end":[339,1]}},{"children":[],"comments":"Remove the duplicates from an array, creating a new array.\n","title":"nub","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[[[[["Prelude"],"Eq"],[{"tag":"TypeVar","contents":"a"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]}]}]},null]}},"sourceSpan":{"start":[486,1],"name":"bower_components/purescript-arrays/src/Data/Array.purs","end":[487,1]}},{"children":[],"comments":"Remove the duplicates from an array, where element equality is determined\nby the specified equivalence relation, creating a new array.\n","title":"nubBy","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]}]}]},null]}},"sourceSpan":{"start":[491,1],"name":"bower_components/purescript-arrays/src/Data/Array.purs","end":[492,1]}},{"children":[],"comments":"Test whether an array is empty.\n","title":"null","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]},null]}},"sourceSpan":{"start":[160,1],"name":"bower_components/purescript-arrays/src/Data/Array.purs","end":[161,1]}},{"children":[],"comments":"Create an array containing a range of integers, including both endpoints.\n","title":"range","fixity":null,"info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}]}]}},"sourceSpan":{"start":[124,1],"name":"bower_components/purescript-arrays/src/Data/Array.purs","end":[126,1]}},{"children":[],"comments":"Create an array with repeated instances of a value.\n","title":"replicate","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]}]}]},null]}},"sourceSpan":{"start":[133,1],"name":"bower_components/purescript-arrays/src/Data/Array.purs","end":[136,1]}},{"children":[],"comments":"Perform a monadic action `n` times collecting all of the results.\n","title":"replicateM","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["m",{"tag":"ConstrainedType","contents":[[[[["Prelude"],"Monad"],[{"tag":"TypeVar","contents":"m"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"m"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"m"},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]}]}]}]}]},null]},null]}},"sourceSpan":{"start":[136,1],"name":"bower_components/purescript-arrays/src/Data/Array.purs","end":[137,1]}},{"children":[],"comments":"Reverse an array, creating a new array.\n","title":"reverse","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]}]},null]}},"sourceSpan":{"start":[358,1],"name":"bower_components/purescript-arrays/src/Data/Array.purs","end":[361,1]}},{"children":[],"comments":"Create an array of one element\n","title":"singleton","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]}]},null]}},"sourceSpan":{"start":[120,1],"name":"bower_components/purescript-arrays/src/Data/Array.purs","end":[121,1]}},{"children":[],"comments":"Extract a subarray by a start and end index.\n","title":"slice","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]}]}]}]},null]}},"sourceSpan":{"start":[421,1],"name":"bower_components/purescript-arrays/src/Data/Array.purs","end":[425,1]}},{"children":[],"comments":"Append an element to the end of an array, creating a new array.\n","title":"snoc","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]}]}]},null]}},"sourceSpan":{"start":[188,1],"name":"bower_components/purescript-arrays/src/Data/Array.purs","end":[191,1]}},{"children":[],"comments":"Attempt a computation multiple times, requiring at least one success.\n\nThe `Lazy` constraint is used to generate the result lazily, to ensure\ntermination.\n","title":"some","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["f",{"tag":"ConstrainedType","contents":[[[[["Control","Alternative"],"Alternative"],[{"tag":"TypeVar","contents":"f"}]],[[["Control","Lazy"],"Lazy"],[{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]}]}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]}]}]}]},null]},null]}},"sourceSpan":{"start":[144,1],"name":"bower_components/purescript-arrays/src/Data/Array.purs","end":[145,1]}},{"children":[],"comments":"Sort the elements of an array in increasing order, creating a new array.\n","title":"sort","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[[[[["Prelude"],"Ord"],[{"tag":"TypeVar","contents":"a"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]}]}]},null]}},"sourceSpan":{"start":[401,1],"name":"bower_components/purescript-arrays/src/Data/Array.purs","end":[402,1]}},{"children":[],"comments":"Sort the elements of an array in increasing order, where elements are compared using\nthe specified partial ordering, creating a new array.\n","title":"sortBy","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeConstructor","contents":[["Prelude"],"Ordering"]}]}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]}]}]},null]}},"sourceSpan":{"start":[406,1],"name":"bower_components/purescript-arrays/src/Data/Array.purs","end":[407,1]}},{"children":[],"comments":"Split an array into two parts:\n\n1. the longest initial subarray for which all element satisfy the specified\n   predicate\n2. the remaining elements\n\n```purescript\nspan (\\n -> n % 2 == 1) [1,3,2,4,5] == { init: [1,3], rest: [2,4,5] }\n```\n","title":"span","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Object"]},{"tag":"RCons","contents":["init",{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"RCons","contents":["rest",{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"REmpty","contents":[]}]}]}]}]}]},null]}},"sourceSpan":{"start":[450,1],"name":"bower_components/purescript-arrays/src/Data/Array.purs","end":[451,1]}},{"children":[],"comments":"Get all but the first element of an array, creating a new array, or `Nothing` if the array is empty\n\nRunning time: `O(n)` where `n` is the length of the array\n","title":"tail","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]}]}]},null]}},"sourceSpan":{"start":[220,1],"name":"bower_components/purescript-arrays/src/Data/Array.purs","end":[221,1]}},{"children":[],"comments":"Keep only a number of elements from the start of an array, creating a new\narray.\n","title":"take","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]}]}]},null]}},"sourceSpan":{"start":[425,1],"name":"bower_components/purescript-arrays/src/Data/Array.purs","end":[426,1]}},{"children":[],"comments":"Calculate the longest initial subarray for which all element satisfy the\nspecified predicate, creating a new array.\n","title":"takeWhile","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]}]}]},null]}},"sourceSpan":{"start":[430,1],"name":"bower_components/purescript-arrays/src/Data/Array.purs","end":[431,1]}},{"children":[],"comments":"Break an array into its first element and remaining elements.\n\nUsing `uncons` provides a way of writing code that would use cons patterns\nin Haskell or pre-PureScript 0.7:\n``` purescript\nf (x : xs) = something\nf [] = somethingElse\n```\nBecomes:\n``` purescript\nf arr = case uncons arr of\n  Just { head: x, tail: xs } -> something\n  Nothing -> somethingElse\n```\n","title":"uncons","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Object"]},{"tag":"RCons","contents":["head",{"tag":"TypeVar","contents":"a"},{"tag":"RCons","contents":["tail",{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"REmpty","contents":[]}]}]}]}]}]},null]}},"sourceSpan":{"start":[244,1],"name":"bower_components/purescript-arrays/src/Data/Array.purs","end":[245,1]}},{"children":[],"comments":"Calculate the union of two lists.\n\nRunning time: `O(n^2)`\n","title":"union","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[[[[["Prelude"],"Eq"],[{"tag":"TypeVar","contents":"a"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]}]}]}]},null]}},"sourceSpan":{"start":[499,1],"name":"bower_components/purescript-arrays/src/Data/Array.purs","end":[500,1]}},{"children":[],"comments":"Calculate the union of two arrays, using the specified function to\ndetermine equality of elements.\n","title":"unionBy","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]}]}]}]},null]}},"sourceSpan":{"start":[504,1],"name":"bower_components/purescript-arrays/src/Data/Array.purs","end":[505,1]}},{"children":[],"comments":"Transforms a list of pairs into a list of first components and a list of\nsecond components.\n","title":"unzip","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Tuple"],"Tuple"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Tuple"],"Tuple"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"b"}]}]}]},null]},null]}},"sourceSpan":{"start":[560,1],"name":"bower_components/purescript-arrays/src/Data/Array.purs","end":[561,1]}},{"children":[],"comments":"Change the element at the specified index, creating a new array, or\nreturning `Nothing` if the index is out of bounds.\n","title":"updateAt","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]}]}]}]}]},null]}},"sourceSpan":{"start":[326,1],"name":"bower_components/purescript-arrays/src/Data/Array.purs","end":[327,1]}},{"children":[],"comments":"Rakes two lists and returns a list of corresponding pairs.\nIf one input list is short, excess elements of the longer list are discarded.\n","title":"zip","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Tuple"],"Tuple"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]}]}]},null]},null]}},"sourceSpan":{"start":[555,1],"name":"bower_components/purescript-arrays/src/Data/Array.purs","end":[556,1]}},{"children":[],"comments":"Apply a function to pairs of elements at the same index in two arrays,\ncollecting the results in a new array.\n\nIf one array is longer, elements will be discarded from the longer array.\n\nFor example\n\n```purescript\nzipWith (*) [1, 2, 3] [4, 5, 6, 7] == [4, 10, 18]\n```\n","title":"zipWith","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["c",{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeVar","contents":"c"}]}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"c"}]}]}]}]},null]},null]},null]}},"sourceSpan":{"start":[546,1],"name":"bower_components/purescript-arrays/src/Data/Array.purs","end":[550,1]}},{"children":[],"comments":"A generalization of `zipWith` which accumulates results in some `Applicative`\nfunctor.\n","title":"zipWithA","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["c",{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["m",{"tag":"ConstrainedType","contents":[[[[["Prelude"],"Applicative"],[{"tag":"TypeVar","contents":"m"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"m"},{"tag":"TypeVar","contents":"c"}]}]}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"m"},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"c"}]}]}]}]}]}]},null]},null]},null]},null]}},"sourceSpan":{"start":[550,1],"name":"bower_components/purescript-arrays/src/Data/Array.purs","end":[551,1]}},{"children":[],"comments":"An infix version of `index`.\n","title":"(!!)","fixity":{"associativity":"infixl","precedence":8},"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeVar","contents":"a"}]}]}]},null]}},"sourceSpan":{"start":[270,1],"name":"bower_components/purescript-arrays/src/Data/Array.purs","end":[271,1]}},{"children":[],"comments":"An infix synonym for `range`.\n","title":"(..)","fixity":{"associativity":"infix","precedence":8},"info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}]}]}},"sourceSpan":{"start":[129,1],"name":"bower_components/purescript-arrays/src/Data/Array.purs","end":[130,1]}},{"children":[],"comments":"An infix alias for `cons`.\n\nNote, the running time of this function is `O(n)`.\n","title":"(:)","fixity":{"associativity":"infixr","precedence":6},"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]}]}]},null]}},"sourceSpan":{"start":[184,1],"name":"bower_components/purescript-arrays/src/Data/Array.purs","end":[185,1]}},{"children":[],"comments":"Delete the first occurrence of each element in the second array from the\nfirst array, creating a new array.\n","title":"(\\\\)","fixity":{"associativity":"infix","precedence":5},"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[[[[["Prelude"],"Eq"],[{"tag":"TypeVar","contents":"a"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]}]}]}]},null]}},"sourceSpan":{"start":[523,1],"name":"bower_components/purescript-arrays/src/Data/Array.purs","end":[524,1]}}]},{"moduleName":["Data","Either"],"declarations":[{"children":[{"comments":null,"title":"Left","info":{"arguments":[{"tag":"TypeVar","contents":"a"}],"declType":"dataConstructor"},"sourceSpan":null},{"comments":null,"title":"Right","info":{"arguments":[{"tag":"TypeVar","contents":"b"}],"declType":"dataConstructor"},"sourceSpan":null},{"comments":"The `Functor` instance allows functions to transform the contents of a\n`Right` with the `<$>` operator:\n\n``` purescript\nf <$> Right x == Right (f x)\n```\n\n`Left` values are untouched:\n\n``` purescript\nf <$> Left y == Left y\n```\n","title":"functorEither","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prelude"],"Functor"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Either"],"Either"]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[52,1],"name":"bower_components/purescript-either/src/Data/Either.purs","end":[56,1]}},{"comments":null,"title":"bifunctorEither","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Bifunctor"],"Bifunctor"]},{"tag":"TypeConstructor","contents":[["Data","Either"],"Either"]}]}},"sourceSpan":{"start":[56,1],"name":"bower_components/purescript-either/src/Data/Either.purs","end":[92,1]}},{"comments":"The `Apply` instance allows functions contained within a `Right` to\ntransform a value contained within a `Right` using the `(<*>)` operator:\n\n``` purescript\nRight f <*> Right x == Right (f x)\n```\n\n`Left` values are left untouched:\n\n``` purescript\nLeft f <*> Right x == Left x\nRight f <*> Left y == Left y\n```\n\nCombining `Functor`'s `<$>` with `Apply`'s `<*>` can be used transform a\npure function to take `Either`-typed arguments so `f :: a -> b -> c`\nbecomes `f :: Either l a -> Either l b -> Either l c`:\n\n``` purescript\nf <$> Right x <*> Right y == Right (f x y)\n```\n\nThe `Left`-preserving behaviour of both operators means the result of\nan expression like the above but where any one of the values is `Left`\nmeans the whole result becomes `Left` also, taking the first `Left` value\nfound:\n\n``` purescript\nf <$> Left x <*> Right y == Left x\nf <$> Right x <*> Left y == Left y\nf <$> Left x <*> Left y == Left x\n```\n","title":"applyEither","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prelude"],"Apply"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Either"],"Either"]},{"tag":"TypeVar","contents":"e"}]}]}},"sourceSpan":{"start":[92,1],"name":"bower_components/purescript-either/src/Data/Either.purs","end":[116,1]}},{"comments":"The `Applicative` instance enables lifting of values into `Either` with the\n`pure` or `return` function (`return` is an alias for `pure`):\n\n``` purescript\npure x :: Either _ _ == Right x\nreturn x :: Either _ _ == Right x\n```\n\nCombining `Functor`'s `<$>` with `Apply`'s `<*>` and `Applicative`'s\n`pure` can be used to pass a mixture of `Either` and non-`Either` typed\nvalues to a function that does not usually expect them, by using `pure`\nfor any value that is not already `Either` typed:\n\n``` purescript\nf <$> Right x <*> pure y == Right (f x y)\n```\n\nEven though `pure = Right` it is recommended to use `pure` in situations\nlike this as it allows the choice of `Applicative` to be changed later\nwithout having to go through and replace `Right` with a new constructor.\n","title":"applicativeEither","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prelude"],"Applicative"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Either"],"Either"]},{"tag":"TypeVar","contents":"e"}]}]}},"sourceSpan":{"start":[116,1],"name":"bower_components/purescript-either/src/Data/Either.purs","end":[128,1]}},{"comments":"The `Alt` instance allows for a choice to be made between two `Either`\nvalues with the `<|>` operator, where the first `Right` encountered\nis taken.\n\n``` purescript\nRight x <|> Right y == Right x\nLeft x <|> Right y == Right y\nLeft x <|> Left y == Left y\n```\n","title":"altEither","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Alt"],"Alt"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Either"],"Either"]},{"tag":"TypeVar","contents":"e"}]}]}},"sourceSpan":{"start":[128,1],"name":"bower_components/purescript-either/src/Data/Either.purs","end":[139,1]}},{"comments":"The `Bind` instance allows sequencing of `Either` values and functions that\nreturn an `Either` by using the `>>=` operator:\n\n``` purescript\nLeft x >>= f = Left x\nRight x >>= f = f x\n```\n","title":"bindEither","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prelude"],"Bind"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Either"],"Either"]},{"tag":"TypeVar","contents":"e"}]}]}},"sourceSpan":{"start":[139,1],"name":"bower_components/purescript-either/src/Data/Either.purs","end":[157,1]}},{"comments":"The `Monad` instance guarantees that there are both `Applicative` and\n`Bind` instances for `Either`. This also enables the `do` syntactic sugar:\n\n``` purescript\ndo\n  x' <- x\n  y' <- y\n  pure (f x' y')\n```\n\nWhich is equivalent to:\n\n``` purescript\nx >>= (\\x' -> y >>= (\\y' -> pure (f x' y')))\n```\n","title":"monadEither","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prelude"],"Monad"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Either"],"Either"]},{"tag":"TypeVar","contents":"e"}]}]}},"sourceSpan":{"start":[157,1],"name":"bower_components/purescript-either/src/Data/Either.purs","end":[167,1]}},{"comments":"The `Extend` instance allows sequencing of `Either` values and functions\nthat accept an `Either` and return a non-`Either` result using the\n`<<=` operator.\n\n``` purescript\nf <<= Left x = Left x\nf <<= Right x = Right (f x)\n```\n","title":"extendEither","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Extend"],"Extend"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Either"],"Either"]},{"tag":"TypeVar","contents":"e"}]}]}},"sourceSpan":{"start":[167,1],"name":"bower_components/purescript-either/src/Data/Either.purs","end":[174,1]}},{"comments":"The `Show` instance allows `Either` values to be rendered as a string with\n`show` whenever there is an `Show` instance for both type the `Either` can\ncontain.\n","title":"showEither","info":{"declType":"instance","dependencies":[[[["Prelude"],"Show"],[{"tag":"TypeVar","contents":"a"}]],[[["Prelude"],"Show"],[{"tag":"TypeVar","contents":"b"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prelude"],"Show"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Either"],"Either"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]}},"sourceSpan":{"start":[174,1],"name":"bower_components/purescript-either/src/Data/Either.purs","end":[181,1]}},{"comments":"The `Eq` instance allows `Either` values to be checked for equality with\n`==` and inequality with `/=` whenever there is an `Eq` instance for both\ntypes the `Either` can contain.\n","title":"eqEither","info":{"declType":"instance","dependencies":[[[["Prelude"],"Eq"],[{"tag":"TypeVar","contents":"a"}]],[[["Prelude"],"Eq"],[{"tag":"TypeVar","contents":"b"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prelude"],"Eq"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Either"],"Either"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]}},"sourceSpan":{"start":[181,1],"name":"bower_components/purescript-either/src/Data/Either.purs","end":[191,1]}},{"comments":"The `Ord` instance allows `Either` values to be compared with\n`compare`, `>`, `>=`, `<` and `<=` whenever there is an `Ord` instance for\nboth types the `Either` can contain.\n\nAny `Left` value is considered to be less than a `Right` value.\n","title":"ordEither","info":{"declType":"instance","dependencies":[[[["Prelude"],"Ord"],[{"tag":"TypeVar","contents":"a"}]],[[["Prelude"],"Ord"],[{"tag":"TypeVar","contents":"b"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prelude"],"Ord"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Either"],"Either"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]}},"sourceSpan":{"start":[191,1],"name":"bower_components/purescript-either/src/Data/Either.purs","end":[197,1]}},{"comments":null,"title":"boundedEither","info":{"declType":"instance","dependencies":[[[["Prelude"],"Bounded"],[{"tag":"TypeVar","contents":"a"}]],[[["Prelude"],"Bounded"],[{"tag":"TypeVar","contents":"b"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prelude"],"Bounded"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Either"],"Either"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]}},"sourceSpan":{"start":[197,1],"name":"bower_components/purescript-either/src/Data/Either.purs","end":[201,1]}},{"comments":null,"title":"foldableEither","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Foldable"],"Foldable"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Either"],"Either"]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[201,1],"name":"bower_components/purescript-either/src/Data/Either.purs","end":[209,1]}},{"comments":null,"title":"bifoldableEither","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Bifoldable"],"Bifoldable"]},{"tag":"TypeConstructor","contents":[["Data","Either"],"Either"]}]}},"sourceSpan":{"start":[209,1],"name":"bower_components/purescript-either/src/Data/Either.purs","end":[217,1]}},{"comments":null,"title":"traversableEither","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Traversable"],"Traversable"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Either"],"Either"]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[217,1],"name":"bower_components/purescript-either/src/Data/Either.purs","end":[223,1]}},{"comments":null,"title":"bitraversableEither","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Bitraversable"],"Bitraversable"]},{"tag":"TypeConstructor","contents":[["Data","Either"],"Either"]}]}},"sourceSpan":{"start":[223,1],"name":"bower_components/purescript-either/src/Data/Either.purs","end":[229,1]}},{"comments":null,"title":"semiringEither","info":{"declType":"instance","dependencies":[[[["Prelude"],"Semiring"],[{"tag":"TypeVar","contents":"b"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prelude"],"Semiring"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Either"],"Either"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]}},"sourceSpan":{"start":[229,1],"name":"bower_components/purescript-either/src/Data/Either.purs","end":[235,1]}},{"comments":null,"title":"semigroupEither","info":{"declType":"instance","dependencies":[[[["Prelude"],"Semigroup"],[{"tag":"TypeVar","contents":"b"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prelude"],"Semigroup"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Either"],"Either"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]}},"sourceSpan":{"start":[235,1],"name":"bower_components/purescript-either/src/Data/Either.purs","end":[236,33]}}],"comments":"The `Either` type is used to represent a choice between two types of value.\n\nA common use case for `Either` is error handling, where `Left` is used to\ncarry an error value and `Right` is used to carry a success value.\n","title":"Either","fixity":null,"info":{"declType":"data","dataDeclType":"data","typeArguments":[["a",null],["b",null]]},"sourceSpan":{"start":[18,1],"name":"bower_components/purescript-either/src/Data/Either.purs","end":[28,1]}},{"children":[],"comments":"Takes two functions and an `Either` value, if the value is a `Left` the\ninner value is applied to the first function, if the value is a `Right`\nthe inner value is applied to the second function.\n\n``` purescript\neither f g (Left x) == f x\neither f g (Right y) == g y\n```\n","title":"either","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["c",{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"c"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeVar","contents":"c"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Either"],"Either"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeVar","contents":"c"}]}]}]},null]},null]},null]}},"sourceSpan":{"start":[28,1],"name":"bower_components/purescript-either/src/Data/Either.purs","end":[29,1]}},{"children":[],"comments":"Returns `true` when the `Either` value was constructed with `Left`.\n","title":"isLeft","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Either"],"Either"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]},null]},null]}},"sourceSpan":{"start":[33,1],"name":"bower_components/purescript-either/src/Data/Either.purs","end":[34,1]}},{"children":[],"comments":"Returns `true` when the `Either` value was constructed with `Right`.\n","title":"isRight","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Either"],"Either"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]},null]},null]}},"sourceSpan":{"start":[37,1],"name":"bower_components/purescript-either/src/Data/Either.purs","end":[38,1]}}]},{"moduleName":["Data","Functor"],"declarations":[{"children":[],"comments":"A version of `(<$)` with its arguments flipped.\n","title":"($>)","fixity":{"associativity":"infixl","precedence":4},"info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["f",{"tag":"ConstrainedType","contents":[[[[["Prelude"],"Functor"],[{"tag":"TypeVar","contents":"f"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"b"}]}]}]}]},null]},null]},null]}},"sourceSpan":{"start":[15,1],"name":"bower_components/purescript-control/src/Data/Functor.purs","end":[16,1]}},{"children":[],"comments":"Ignore the return value of a computation, using the specified return value instead.\n","title":"(<$)","fixity":{"associativity":"infixl","precedence":4},"info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["f",{"tag":"ConstrainedType","contents":[[[[["Prelude"],"Functor"],[{"tag":"TypeVar","contents":"f"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}]}]}]},null]},null]},null]}},"sourceSpan":{"start":[11,1],"name":"bower_components/purescript-control/src/Data/Functor.purs","end":[12,1]}}]},{"moduleName":["Data","Generic"],"declarations":[{"children":[],"comments":"Identifies a data constructor.\n","title":"DataConstructor","fixity":null,"info":{"arguments":[],"declType":"typeSynonym","type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Object"]},{"tag":"RCons","contents":["sigConstructor",{"tag":"TypeConstructor","contents":[["Prim"],"String"]},{"tag":"RCons","contents":["sigValues",{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prelude"],"Unit"]}]},{"tag":"TypeConstructor","contents":[["Data","Generic"],"GenericSignature"]}]}]},{"tag":"REmpty","contents":[]}]}]}]}},"sourceSpan":{"start":[39,1],"name":"bower_components/purescript-generics/src/Data/Generic.purs","end":[45,1]}},{"children":[{"comments":null,"title":"SigProd","info":{"arguments":[{"tag":"TypeConstructor","contents":[["Prim"],"String"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeConstructor","contents":[["Data","Generic"],"DataConstructor"]}]}],"declType":"dataConstructor"},"sourceSpan":null},{"comments":null,"title":"SigRecord","info":{"arguments":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Object"]},{"tag":"RCons","contents":["recLabel",{"tag":"TypeConstructor","contents":[["Prim"],"String"]},{"tag":"RCons","contents":["recValue",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prelude"],"Unit"]}]},{"tag":"TypeConstructor","contents":[["Data","Generic"],"GenericSignature"]}]},{"tag":"REmpty","contents":[]}]}]}]}]}],"declType":"dataConstructor"},"sourceSpan":null},{"comments":null,"title":"SigNumber","info":{"arguments":[],"declType":"dataConstructor"},"sourceSpan":null},{"comments":null,"title":"SigBoolean","info":{"arguments":[],"declType":"dataConstructor"},"sourceSpan":null},{"comments":null,"title":"SigInt","info":{"arguments":[],"declType":"dataConstructor"},"sourceSpan":null},{"comments":null,"title":"SigString","info":{"arguments":[],"declType":"dataConstructor"},"sourceSpan":null},{"comments":null,"title":"SigChar","info":{"arguments":[],"declType":"dataConstructor"},"sourceSpan":null},{"comments":null,"title":"SigArray","info":{"arguments":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prelude"],"Unit"]}]},{"tag":"TypeConstructor","contents":[["Data","Generic"],"GenericSignature"]}]}],"declType":"dataConstructor"},"sourceSpan":null},{"comments":null,"title":"showGenericSignature","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prelude"],"Show"]},{"tag":"TypeConstructor","contents":[["Data","Generic"],"GenericSignature"]}]}},"sourceSpan":{"start":[89,1],"name":"bower_components/purescript-generics/src/Data/Generic.purs","end":[94,1]}}],"comments":"A GenericSignature is a universal representation of the structure of an arbitrary data structure (that does not contain function arrows).\n","title":"GenericSignature","fixity":null,"info":{"declType":"data","dataDeclType":"data","typeArguments":[]},"sourceSpan":{"start":[45,1],"name":"bower_components/purescript-generics/src/Data/Generic.purs","end":[54,1]}},{"children":[{"comments":null,"title":"SProd","info":{"arguments":[{"tag":"TypeConstructor","contents":[["Prim"],"String"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prelude"],"Unit"]}]},{"tag":"TypeConstructor","contents":[["Data","Generic"],"GenericSpine"]}]}]}],"declType":"dataConstructor"},"sourceSpan":null},{"comments":null,"title":"SRecord","info":{"arguments":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Object"]},{"tag":"RCons","contents":["recLabel",{"tag":"TypeConstructor","contents":[["Prim"],"String"]},{"tag":"RCons","contents":["recValue",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prelude"],"Unit"]}]},{"tag":"TypeConstructor","contents":[["Data","Generic"],"GenericSpine"]}]},{"tag":"REmpty","contents":[]}]}]}]}]}],"declType":"dataConstructor"},"sourceSpan":null},{"comments":null,"title":"SNumber","info":{"arguments":[{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}],"declType":"dataConstructor"},"sourceSpan":null},{"comments":null,"title":"SBoolean","info":{"arguments":[{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}],"declType":"dataConstructor"},"sourceSpan":null},{"comments":null,"title":"SInt","info":{"arguments":[{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}],"declType":"dataConstructor"},"sourceSpan":null},{"comments":null,"title":"SString","info":{"arguments":[{"tag":"TypeConstructor","contents":[["Prim"],"String"]}],"declType":"dataConstructor"},"sourceSpan":null},{"comments":null,"title":"SChar","info":{"arguments":[{"tag":"TypeConstructor","contents":[["Prim"],"Char"]}],"declType":"dataConstructor"},"sourceSpan":null},{"comments":null,"title":"SArray","info":{"arguments":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prelude"],"Unit"]}]},{"tag":"TypeConstructor","contents":[["Data","Generic"],"GenericSpine"]}]}]}],"declType":"dataConstructor"},"sourceSpan":null},{"comments":null,"title":"eqGeneric","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prelude"],"Eq"]},{"tag":"TypeConstructor","contents":[["Data","Generic"],"GenericSpine"]}]}},"sourceSpan":{"start":[257,1],"name":"bower_components/purescript-generics/src/Data/Generic.purs","end":[272,1]}},{"comments":null,"title":"ordGeneric","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prelude"],"Ord"]},{"tag":"TypeConstructor","contents":[["Data","Generic"],"GenericSpine"]}]}},"sourceSpan":{"start":[277,1],"name":"bower_components/purescript-generics/src/Data/Generic.purs","end":[318,1]}}],"comments":"A GenericSpine is a universal representation of an arbitrary data structure (that does not contain function arrows).\n","title":"GenericSpine","fixity":null,"info":{"declType":"data","dataDeclType":"data","typeArguments":[]},"sourceSpan":{"start":[29,1],"name":"bower_components/purescript-generics/src/Data/Generic.purs","end":[39,1]}},{"children":[{"comments":null,"title":"toSpine","info":{"declType":"typeClassMember","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeConstructor","contents":[["Data","Generic"],"GenericSpine"]}]}},"sourceSpan":null},{"comments":null,"title":"toSignature","info":{"declType":"typeClassMember","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Type","Proxy"],"Proxy"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeConstructor","contents":[["Data","Generic"],"GenericSignature"]}]}},"sourceSpan":null},{"comments":null,"title":"fromSpine","info":{"declType":"typeClassMember","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Generic"],"GenericSpine"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":null},{"comments":null,"title":"genericNumber","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Generic"],"Generic"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]}},"sourceSpan":{"start":[142,1],"name":"bower_components/purescript-generics/src/Data/Generic.purs","end":[148,1]}},{"comments":null,"title":"genericInt","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Generic"],"Generic"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}},"sourceSpan":{"start":[148,1],"name":"bower_components/purescript-generics/src/Data/Generic.purs","end":[154,1]}},{"comments":null,"title":"genericString","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Generic"],"Generic"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}},"sourceSpan":{"start":[154,1],"name":"bower_components/purescript-generics/src/Data/Generic.purs","end":[160,1]}},{"comments":null,"title":"genericChar","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Generic"],"Generic"]},{"tag":"TypeConstructor","contents":[["Prim"],"Char"]}]}},"sourceSpan":{"start":[160,1],"name":"bower_components/purescript-generics/src/Data/Generic.purs","end":[166,1]}},{"comments":null,"title":"genericBool","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Generic"],"Generic"]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}},"sourceSpan":{"start":[166,1],"name":"bower_components/purescript-generics/src/Data/Generic.purs","end":[172,1]}},{"comments":null,"title":"genericArray","info":{"declType":"instance","dependencies":[[[["Data","Generic"],"Generic"],[{"tag":"TypeVar","contents":"a"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Generic"],"Generic"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[172,1],"name":"bower_components/purescript-generics/src/Data/Generic.purs","end":[181,1]}},{"comments":null,"title":"genericTuple","info":{"declType":"instance","dependencies":[[[["Data","Generic"],"Generic"],[{"tag":"TypeVar","contents":"a"}]],[[["Data","Generic"],"Generic"],[{"tag":"TypeVar","contents":"b"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Generic"],"Generic"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Tuple"],"Tuple"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]}},"sourceSpan":{"start":[181,1],"name":"bower_components/purescript-generics/src/Data/Generic.purs","end":[197,1]}},{"comments":null,"title":"genericMaybe","info":{"declType":"instance","dependencies":[[[["Data","Generic"],"Generic"],[{"tag":"TypeVar","contents":"a"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Generic"],"Generic"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[197,1],"name":"bower_components/purescript-generics/src/Data/Generic.purs","end":[214,1]}},{"comments":null,"title":"genericEither","info":{"declType":"instance","dependencies":[[[["Data","Generic"],"Generic"],[{"tag":"TypeVar","contents":"a"}]],[[["Data","Generic"],"Generic"],[{"tag":"TypeVar","contents":"b"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Generic"],"Generic"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Either"],"Either"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]}},"sourceSpan":{"start":[214,1],"name":"bower_components/purescript-generics/src/Data/Generic.purs","end":[235,1]}}],"comments":"The Generic typeclass provides methods for sending data to/from spine representations, as well as querying about the signatures of spine representations.\nFor standard data structures, you can simply write `derive instance genericFoo :: Generic Foo` in the module they are declared, and the instance methods will be filled in for you.\n","title":"Generic","fixity":null,"info":{"arguments":[["a",null]],"declType":"typeClass","superclasses":[]},"sourceSpan":{"start":[118,1],"name":"bower_components/purescript-generics/src/Data/Generic.purs","end":[124,1]}},{"children":[],"comments":"This function can be used as the default instance for the compare method of Ord for any instance of Generic\n","title":"gCompare","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[[[[["Data","Generic"],"Generic"],[{"tag":"TypeVar","contents":"a"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeConstructor","contents":[["Prelude"],"Ordering"]}]}]}]},null]}},"sourceSpan":{"start":[318,1],"name":"bower_components/purescript-generics/src/Data/Generic.purs","end":[319,1]}},{"children":[],"comments":"This function can be used as the default instance for Eq for any instance of Generic\n","title":"gEq","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[[[[["Data","Generic"],"Generic"],[{"tag":"TypeVar","contents":"a"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}]}]},null]}},"sourceSpan":{"start":[272,1],"name":"bower_components/purescript-generics/src/Data/Generic.purs","end":[273,1]}},{"children":[],"comments":"This function can be used as the default instance for Show for any instance of Generic\n","title":"gShow","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[[[[["Data","Generic"],"Generic"],[{"tag":"TypeVar","contents":"a"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}]},null]}},"sourceSpan":{"start":[252,1],"name":"bower_components/purescript-generics/src/Data/Generic.purs","end":[253,1]}},{"children":[],"comments":"Checks that the spine follows the structure defined by the signature\n","title":"isValidSpine","fixity":null,"info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Generic"],"GenericSignature"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Generic"],"GenericSpine"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}]}},"sourceSpan":{"start":[124,1],"name":"bower_components/purescript-generics/src/Data/Generic.purs","end":[125,1]}},{"children":[],"comments":null,"title":"showDataConstructor","fixity":null,"info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Generic"],"DataConstructor"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}},"sourceSpan":{"start":[104,1],"name":"bower_components/purescript-generics/src/Data/Generic.purs","end":[105,1]}},{"children":[],"comments":null,"title":"showSignature","fixity":null,"info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Generic"],"GenericSignature"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}},"sourceSpan":{"start":[54,1],"name":"bower_components/purescript-generics/src/Data/Generic.purs","end":[55,1]}}]},{"moduleName":["Data","Maybe"],"declarations":[{"children":[{"comments":null,"title":"Nothing","info":{"arguments":[],"declType":"dataConstructor"},"sourceSpan":null},{"comments":null,"title":"Just","info":{"arguments":[{"tag":"TypeVar","contents":"a"}],"declType":"dataConstructor"},"sourceSpan":null},{"comments":"The `Functor` instance allows functions to transform the contents of a\n`Just` with the `<$>` operator:\n\n``` purescript\nf <$> Just x == Just (f x)\n```\n\n`Nothing` values are left untouched:\n\n``` purescript\nf <$> Nothing == Nothing\n```\n","title":"functorMaybe","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prelude"],"Functor"]},{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]}]}},"sourceSpan":{"start":[86,1],"name":"bower_components/purescript-maybe/src/Data/Maybe.purs","end":[121,1]}},{"comments":"The `Apply` instance allows functions contained within a `Just` to\ntransform a value contained within a `Just` using the `apply` operator:\n\n``` purescript\nJust f <*> Just x == Just (f x)\n```\n\n`Nothing` values are left untouched:\n\n``` purescript\nJust f <*> Nothing == Nothing\nNothing <*> Just x == Nothing\n```\n\nCombining `Functor`'s `<$>` with `Apply`'s `<*>` can be used transform a\npure function to take `Maybe`-typed arguments so `f :: a -> b -> c`\nbecomes `f :: Maybe a -> Maybe b -> Maybe c`:\n\n``` purescript\nf <$> Just x <*> Just y == Just (f x y)\n```\n\nThe `Nothing`-preserving behaviour of both operators means the result of\nan expression like the above but where any one of the values is `Nothing`\nmeans the whole result becomes `Nothing` also:\n\n``` purescript\nf <$> Nothing <*> Just y == Nothing\nf <$> Just x <*> Nothing == Nothing\nf <$> Nothing <*> Nothing == Nothing\n```\n","title":"applyMaybe","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prelude"],"Apply"]},{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]}]}},"sourceSpan":{"start":[121,1],"name":"bower_components/purescript-maybe/src/Data/Maybe.purs","end":[145,1]}},{"comments":"The `Applicative` instance enables lifting of values into `Maybe` with the\n`pure` or `return` function (`return` is an alias for `pure`):\n\n``` purescript\npure x :: Maybe _ == Just x\nreturn x :: Maybe _ == Just x\n```\n\nCombining `Functor`'s `<$>` with `Apply`'s `<*>` and `Applicative`'s\n`pure` can be used to pass a mixture of `Maybe` and non-`Maybe` typed\nvalues to a function that does not usually expect them, by using `pure`\nfor any value that is not already `Maybe` typed:\n\n``` purescript\nf <$> Just x <*> pure y == Just (f x y)\n```\n\nEven though `pure = Just` it is recommended to use `pure` in situations\nlike this as it allows the choice of `Applicative` to be changed later\nwithout having to go through and replace `Just` with a new constructor.\n","title":"applicativeMaybe","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prelude"],"Applicative"]},{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]}]}},"sourceSpan":{"start":[145,1],"name":"bower_components/purescript-maybe/src/Data/Maybe.purs","end":[157,1]}},{"comments":"The `Alt` instance allows for a choice to be made between two `Maybe`\nvalues with the `<|>` operator, where the first `Just` encountered\nis taken.\n\n``` purescript\nJust x <|> Just y == Just x\nNothing <|> Just y == Just y\nNothing <|> Nothing == Nothing\n```\n","title":"altMaybe","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Alt"],"Alt"]},{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]}]}},"sourceSpan":{"start":[157,1],"name":"bower_components/purescript-maybe/src/Data/Maybe.purs","end":[166,1]}},{"comments":"The `Plus` instance provides a default `Maybe` value:\n\n``` purescript\nempty :: Maybe _ == Nothing\n```\n","title":"plusMaybe","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Plus"],"Plus"]},{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]}]}},"sourceSpan":{"start":[166,1],"name":"bower_components/purescript-maybe/src/Data/Maybe.purs","end":[171,1]}},{"comments":"The `Alternative` instance guarantees that there are both `Applicative` and\n`Plus` instances for `Maybe`.\n","title":"alternativeMaybe","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Alternative"],"Alternative"]},{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]}]}},"sourceSpan":{"start":[171,1],"name":"bower_components/purescript-maybe/src/Data/Maybe.purs","end":[180,1]}},{"comments":"The `Bind` instance allows sequencing of `Maybe` values and functions that\nreturn a `Maybe` by using the `>>=` operator:\n\n``` purescript\nJust x >>= f = f x\nNothing >>= f = Nothing\n```\n","title":"bindMaybe","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prelude"],"Bind"]},{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]}]}},"sourceSpan":{"start":[180,1],"name":"bower_components/purescript-maybe/src/Data/Maybe.purs","end":[199,1]}},{"comments":"The `Monad` instance guarantees that there are both `Applicative` and\n`Bind` instances for `Maybe`. This also enables the `do` syntactic sugar:\n\n``` purescript\ndo\n  x' <- x\n  y' <- y\n  pure (f x' y')\n```\n\nWhich is equivalent to:\n\n``` purescript\nx >>= (\\x' -> y >>= (\\y' -> pure (f x' y')))\n```\n","title":"monadMaybe","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prelude"],"Monad"]},{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]}]}},"sourceSpan":{"start":[199,1],"name":"bower_components/purescript-maybe/src/Data/Maybe.purs","end":[203,1]}},{"comments":"The `MonadPlus` instance guarantees that there are both `Monad` and\n`Alternative` instances for `Maybe`.\n","title":"monadPlusMaybe","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","MonadPlus"],"MonadPlus"]},{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]}]}},"sourceSpan":{"start":[203,1],"name":"bower_components/purescript-maybe/src/Data/Maybe.purs","end":[213,1]}},{"comments":"The `Extend` instance allows sequencing of `Maybe` values and functions\nthat accept a `Maybe a` and return a non-`Maybe` result using the\n`<<=` operator.\n\n``` purescript\nf <<= Nothing = Nothing\nf <<= Just x = Just (f x)\n```\n","title":"extendMaybe","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Extend"],"Extend"]},{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]}]}},"sourceSpan":{"start":[213,1],"name":"bower_components/purescript-maybe/src/Data/Maybe.purs","end":[217,1]}},{"comments":null,"title":"invariantMaybe","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Functor","Invariant"],"Invariant"]},{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]}]}},"sourceSpan":{"start":[217,1],"name":"bower_components/purescript-maybe/src/Data/Maybe.purs","end":[231,1]}},{"comments":"The `Semigroup` instance enables use of the operator `<>` on `Maybe` values\nwhenever there is a `Semigroup` instance for the type the `Maybe` contains.\nThe exact behaviour of `<>` depends on the \"inner\" `Semigroup` instance,\nbut generally captures the notion of appending or combining things.\n\n``` purescript\nJust x <> Just y = Just (x <> y)\nJust x <> Nothing = Just x\nNothing <> Just y = Just y\nNothing <> Nothing = Nothing\n```\n","title":"semigroupMaybe","info":{"declType":"instance","dependencies":[[[["Prelude"],"Semigroup"],[{"tag":"TypeVar","contents":"a"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prelude"],"Semigroup"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[231,1],"name":"bower_components/purescript-maybe/src/Data/Maybe.purs","end":[236,1]}},{"comments":null,"title":"monoidMaybe","info":{"declType":"instance","dependencies":[[[["Prelude"],"Semigroup"],[{"tag":"TypeVar","contents":"a"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Monoid"],"Monoid"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[236,1],"name":"bower_components/purescript-maybe/src/Data/Maybe.purs","end":[239,1]}},{"comments":null,"title":"semiringMaybe","info":{"declType":"instance","dependencies":[[[["Prelude"],"Semiring"],[{"tag":"TypeVar","contents":"a"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prelude"],"Semiring"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[239,1],"name":"bower_components/purescript-maybe/src/Data/Maybe.purs","end":[245,1]}},{"comments":null,"title":"moduloSemiringMaybe","info":{"declType":"instance","dependencies":[[[["Prelude"],"ModuloSemiring"],[{"tag":"TypeVar","contents":"a"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prelude"],"ModuloSemiring"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[245,1],"name":"bower_components/purescript-maybe/src/Data/Maybe.purs","end":[249,1]}},{"comments":null,"title":"ringMaybe","info":{"declType":"instance","dependencies":[[[["Prelude"],"Ring"],[{"tag":"TypeVar","contents":"a"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prelude"],"Ring"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[249,1],"name":"bower_components/purescript-maybe/src/Data/Maybe.purs","end":[252,1]}},{"comments":null,"title":"divisionRingMaybe","info":{"declType":"instance","dependencies":[[[["Prelude"],"DivisionRing"],[{"tag":"TypeVar","contents":"a"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prelude"],"DivisionRing"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[252,1],"name":"bower_components/purescript-maybe/src/Data/Maybe.purs","end":[254,1]}},{"comments":null,"title":"numMaybe","info":{"declType":"instance","dependencies":[[[["Prelude"],"Num"],[{"tag":"TypeVar","contents":"a"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prelude"],"Num"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[254,1],"name":"bower_components/purescript-maybe/src/Data/Maybe.purs","end":[259,1]}},{"comments":"The `Eq` instance allows `Maybe` values to be checked for equality with\n`==` and inequality with `/=` whenever there is an `Eq` instance for the\ntype the `Maybe` contains.\n","title":"eqMaybe","info":{"declType":"instance","dependencies":[[[["Prelude"],"Eq"],[{"tag":"TypeVar","contents":"a"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prelude"],"Eq"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[259,1],"name":"bower_components/purescript-maybe/src/Data/Maybe.purs","end":[269,1]}},{"comments":"The `Ord` instance allows `Maybe` values to be compared with\n`compare`, `>`, `>=`, `<` and `<=` whenever there is an `Ord` instance for\nthe type the `Maybe` contains.\n\n`Nothing` is considered to be less than any `Just` value.\n","title":"ordMaybe","info":{"declType":"instance","dependencies":[[[["Prelude"],"Ord"],[{"tag":"TypeVar","contents":"a"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prelude"],"Ord"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[269,1],"name":"bower_components/purescript-maybe/src/Data/Maybe.purs","end":[275,1]}},{"comments":null,"title":"boundedMaybe","info":{"declType":"instance","dependencies":[[[["Prelude"],"Bounded"],[{"tag":"TypeVar","contents":"a"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prelude"],"Bounded"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[275,1],"name":"bower_components/purescript-maybe/src/Data/Maybe.purs","end":[279,1]}},{"comments":null,"title":"boundedOrdMaybe","info":{"declType":"instance","dependencies":[[[["Prelude"],"BoundedOrd"],[{"tag":"TypeVar","contents":"a"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prelude"],"BoundedOrd"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[279,1],"name":"bower_components/purescript-maybe/src/Data/Maybe.purs","end":[281,1]}},{"comments":null,"title":"booleanAlgebraMaybe","info":{"declType":"instance","dependencies":[[[["Prelude"],"BooleanAlgebra"],[{"tag":"TypeVar","contents":"a"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prelude"],"BooleanAlgebra"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[281,1],"name":"bower_components/purescript-maybe/src/Data/Maybe.purs","end":[289,1]}},{"comments":"The `Show` instance allows `Maybe` values to be rendered as a string with\n`show` whenever there is an `Show` instance for the type the `Maybe`\ncontains.\n","title":"showMaybe","info":{"declType":"instance","dependencies":[[[["Prelude"],"Show"],[{"tag":"TypeVar","contents":"a"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prelude"],"Show"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[289,1],"name":"bower_components/purescript-maybe/src/Data/Maybe.purs","end":[291,19]}}],"comments":"The `Maybe` type is used to represent optional values and can be seen as\nsomething like a type-safe `null`, where `Nothing` is `null` and `Just x`\nis the non-null value `x`.\n","title":"Maybe","fixity":null,"info":{"declType":"data","dataDeclType":"data","typeArguments":[["a",null]]},"sourceSpan":{"start":[16,1],"name":"bower_components/purescript-maybe/src/Data/Maybe.purs","end":[26,1]}},{"children":[],"comments":"Takes a default value, and a `Maybe` value. If the `Maybe` value is\n`Nothing` the default value is returned, otherwise the value inside the\n`Just` is returned.\n\n``` purescript\nfromMaybe x Nothing == x\nfromMaybe x (Just y) == y\n```\n","title":"fromMaybe","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeVar","contents":"a"}]}]},null]}},"sourceSpan":{"start":[51,1],"name":"bower_components/purescript-maybe/src/Data/Maybe.purs","end":[52,1]}},{"children":[],"comments":"Similar to `fromMaybe` but for use in cases where the default value may be\nexpensive to compute. As PureScript is not lazy, the standard `fromMaybe`\nhas to evaluate the default value before returning the result, whereas here\nthe value is only computed when the `Maybe` is known to be `Nothing`.\n\n``` purescript\nfromMaybe' (\\_ -> x) Nothing == x\nfromMaybe' (\\_ -> x) (Just y) == y\n```\n","title":"fromMaybe'","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prelude"],"Unit"]}]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeVar","contents":"a"}]}]},null]}},"sourceSpan":{"start":[63,1],"name":"bower_components/purescript-maybe/src/Data/Maybe.purs","end":[64,1]}},{"children":[],"comments":"Returns `true` when the `Maybe` value was constructed with `Just`.\n","title":"isJust","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]},null]}},"sourceSpan":{"start":[67,1],"name":"bower_components/purescript-maybe/src/Data/Maybe.purs","end":[68,1]}},{"children":[],"comments":"Returns `true` when the `Maybe` value is `Nothing`.\n","title":"isNothing","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]},null]}},"sourceSpan":{"start":[71,1],"name":"bower_components/purescript-maybe/src/Data/Maybe.purs","end":[72,1]}},{"children":[],"comments":"Takes a default value, a function, and a `Maybe` value. If the `Maybe`\nvalue is `Nothing` the default value is returned, otherwise the function\nis applied to the value inside the `Just` and the result is returned.\n\n``` purescript\nmaybe x f Nothing == x\nmaybe x f (Just y) == f y\n```\n","title":"maybe","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeVar","contents":"b"}]}]}]},null]},null]}},"sourceSpan":{"start":[26,1],"name":"bower_components/purescript-maybe/src/Data/Maybe.purs","end":[27,1]}},{"children":[],"comments":"Similar to `maybe` but for use in cases where the default value may be\nexpensive to compute. As PureScript is not lazy, the standard `maybe` has\nto evaluate the default value before returning the result, whereas here\nthe value is only computed when the `Maybe` is known to be `Nothing`.\n\n``` purescript\nmaybe' (\\_ -> x) f Nothing == x\nmaybe' (\\_ -> x) f (Just y) == f y\n```\n","title":"maybe'","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prelude"],"Unit"]}]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeVar","contents":"b"}]}]}]},null]},null]}},"sourceSpan":{"start":[39,1],"name":"bower_components/purescript-maybe/src/Data/Maybe.purs","end":[40,1]}}]},{"moduleName":["Prelude"],"declarations":[{"children":[{"comments":null,"title":"LT","info":{"arguments":[],"declType":"dataConstructor"},"sourceSpan":null},{"comments":null,"title":"GT","info":{"arguments":[],"declType":"dataConstructor"},"sourceSpan":null},{"comments":null,"title":"EQ","info":{"arguments":[],"declType":"dataConstructor"},"sourceSpan":null},{"comments":null,"title":"semigroupOrdering","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prelude"],"Semigroup"]},{"tag":"TypeConstructor","contents":[["Prelude"],"Ordering"]}]}},"sourceSpan":{"start":[413,1],"name":"bower_components/purescript-prelude/src/Prelude.purs","end":[418,1]}},{"comments":null,"title":"eqOrdering","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prelude"],"Eq"]},{"tag":"TypeConstructor","contents":[["Prelude"],"Ordering"]}]}},"sourceSpan":{"start":[613,1],"name":"bower_components/purescript-prelude/src/Prelude.purs","end":[619,1]}},{"comments":null,"title":"ordOrdering","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prelude"],"Ord"]},{"tag":"TypeConstructor","contents":[["Prelude"],"Ordering"]}]}},"sourceSpan":{"start":[668,1],"name":"bower_components/purescript-prelude/src/Prelude.purs","end":[677,1]}},{"comments":null,"title":"boundedOrdering","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prelude"],"Bounded"]},{"tag":"TypeConstructor","contents":[["Prelude"],"Ordering"]}]}},"sourceSpan":{"start":[732,1],"name":"bower_components/purescript-prelude/src/Prelude.purs","end":[736,1]}},{"comments":null,"title":"boundedOrdOrdering","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prelude"],"BoundedOrd"]},{"tag":"TypeConstructor","contents":[["Prelude"],"Ordering"]}]}},"sourceSpan":{"start":[764,1],"name":"bower_components/purescript-prelude/src/Prelude.purs","end":[765,1]}},{"comments":null,"title":"showOrdering","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prelude"],"Show"]},{"tag":"TypeConstructor","contents":[["Prelude"],"Ordering"]}]}},"sourceSpan":{"start":[863,1],"name":"bower_components/purescript-prelude/src/Prelude.purs","end":[868,1]}}],"comments":"The `Ordering` data type represents the three possible outcomes of\ncomparing two values:\n\n`LT` - The first value is _less than_ the second.\n`GT` - The first value is _greater than_ the second.\n`EQ` - The first value is _equal to_ the second.\n","title":"Ordering","fixity":null,"info":{"declType":"data","dataDeclType":"data","typeArguments":[]},"sourceSpan":{"start":[629,1],"name":"bower_components/purescript-prelude/src/Prelude.purs","end":[639,1]}},{"children":[{"comments":null,"title":"semigroupUnit","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prelude"],"Semigroup"]},{"tag":"TypeConstructor","contents":[["Prelude"],"Unit"]}]}},"sourceSpan":{"start":[407,1],"name":"bower_components/purescript-prelude/src/Prelude.purs","end":[410,1]}},{"comments":null,"title":"semiringUnit","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prelude"],"Semiring"]},{"tag":"TypeConstructor","contents":[["Prelude"],"Unit"]}]}},"sourceSpan":{"start":[458,1],"name":"bower_components/purescript-prelude/src/Prelude.purs","end":[464,1]}},{"comments":null,"title":"ringUnit","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prelude"],"Ring"]},{"tag":"TypeConstructor","contents":[["Prelude"],"Unit"]}]}},"sourceSpan":{"start":[496,1],"name":"bower_components/purescript-prelude/src/Prelude.purs","end":[499,1]}},{"comments":null,"title":"moduloSemiringUnit","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prelude"],"ModuloSemiring"]},{"tag":"TypeConstructor","contents":[["Prelude"],"Unit"]}]}},"sourceSpan":{"start":[531,1],"name":"bower_components/purescript-prelude/src/Prelude.purs","end":[535,1]}},{"comments":null,"title":"divisionRingUnit","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prelude"],"DivisionRing"]},{"tag":"TypeConstructor","contents":[["Prelude"],"Unit"]}]}},"sourceSpan":{"start":[557,1],"name":"bower_components/purescript-prelude/src/Prelude.purs","end":[565,1]}},{"comments":null,"title":"numUnit","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prelude"],"Num"]},{"tag":"TypeConstructor","contents":[["Prelude"],"Unit"]}]}},"sourceSpan":{"start":[568,1],"name":"bower_components/purescript-prelude/src/Prelude.purs","end":[577,1]}},{"comments":null,"title":"eqUnit","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prelude"],"Eq"]},{"tag":"TypeConstructor","contents":[["Prelude"],"Unit"]}]}},"sourceSpan":{"start":[607,1],"name":"bower_components/purescript-prelude/src/Prelude.purs","end":[610,1]}},{"comments":null,"title":"ordUnit","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prelude"],"Ord"]},{"tag":"TypeConstructor","contents":[["Prelude"],"Unit"]}]}},"sourceSpan":{"start":[657,1],"name":"bower_components/purescript-prelude/src/Prelude.purs","end":[660,1]}},{"comments":null,"title":"boundedUnit","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prelude"],"Bounded"]},{"tag":"TypeConstructor","contents":[["Prelude"],"Unit"]}]}},"sourceSpan":{"start":[728,1],"name":"bower_components/purescript-prelude/src/Prelude.purs","end":[732,1]}},{"comments":null,"title":"boundedOrdUnit","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prelude"],"BoundedOrd"]},{"tag":"TypeConstructor","contents":[["Prelude"],"Unit"]}]}},"sourceSpan":{"start":[763,1],"name":"bower_components/purescript-prelude/src/Prelude.purs","end":[764,1]}},{"comments":null,"title":"booleanAlgebraUnit","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prelude"],"BooleanAlgebra"]},{"tag":"TypeConstructor","contents":[["Prelude"],"Unit"]}]}},"sourceSpan":{"start":[807,1],"name":"bower_components/purescript-prelude/src/Prelude.purs","end":[812,1]}},{"comments":null,"title":"showUnit","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prelude"],"Show"]},{"tag":"TypeConstructor","contents":[["Prelude"],"Unit"]}]}},"sourceSpan":{"start":[857,1],"name":"bower_components/purescript-prelude/src/Prelude.purs","end":[860,1]}}],"comments":"The `Unit` type has a single inhabitant, called `unit`. It represents\nvalues with no computational content.\n\n`Unit` is often used, wrapped in a monadic type constructor, as the\nreturn type of a computation where only\nthe _effects_ are important.\n","title":"Unit","fixity":null,"info":{"declType":"data","dataDeclType":"newtype","typeArguments":[]},"sourceSpan":{"start":[36,1],"name":"bower_components/purescript-prelude/src/Prelude.purs","end":[39,1]}},{"children":[{"comments":null,"title":"pure","info":{"declType":"typeClassMember","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}]},null]}},"sourceSpan":null},{"comments":null,"title":"applicativeFn","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prelude"],"Applicative"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"r"}]}]}},"sourceSpan":{"start":[266,1],"name":"bower_components/purescript-prelude/src/Prelude.purs","end":[269,1]}},{"comments":null,"title":"applicativeArray","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prelude"],"Applicative"]},{"tag":"TypeConstructor","contents":[["Prim"],"Array"]}]}},"sourceSpan":{"start":[269,1],"name":"bower_components/purescript-prelude/src/Prelude.purs","end":[273,1]}}],"comments":"The `Applicative` type class extends the [`Apply`](#apply) type class\nwith a `pure` function, which can be used to create values of type `f a`\nfrom values of type `a`.\n\nWhere [`Apply`](#apply) provides the ability to lift functions of two or\nmore arguments to functions whose arguments are wrapped using `f`, and\n[`Functor`](#functor) provides the ability to lift functions of one\nargument, `pure` can be seen as the function which lifts functions of\n_zero_ arguments. That is, `Applicative` functors support a lifting\noperation for any number of function arguments.\n\nInstances must satisfy the following laws in addition to the `Apply`\nlaws:\n\n- Identity: `(pure id) <*> v = v`\n- Composition: `(pure <<<) <*> f <*> g <*> h = f <*> (g <*> h)`\n- Homomorphism: `(pure f) <*> (pure x) = pure (f x)`\n- Interchange: `u <*> (pure y) = (pure ($ y)) <*> u`\n","title":"Applicative","fixity":null,"info":{"arguments":[["f",null]],"declType":"typeClass","superclasses":[[[["Prelude"],"Apply"],[{"tag":"TypeVar","contents":"f"}]]]},"sourceSpan":{"start":[263,1],"name":"bower_components/purescript-prelude/src/Prelude.purs","end":[266,1]}},{"children":[{"comments":null,"title":"apply","info":{"declType":"typeClassMember","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"b"}]}]}]},null]},null]}},"sourceSpan":null},{"comments":null,"title":"applyFn","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prelude"],"Apply"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"r"}]}]}},"sourceSpan":{"start":[233,1],"name":"bower_components/purescript-prelude/src/Prelude.purs","end":[236,1]}},{"comments":null,"title":"applyArray","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prelude"],"Apply"]},{"tag":"TypeConstructor","contents":[["Prim"],"Array"]}]}},"sourceSpan":{"start":[236,1],"name":"bower_components/purescript-prelude/src/Prelude.purs","end":[239,1]}}],"comments":"The `Apply` class provides the `(<*>)` which is used to apply a function\nto an argument under a type constructor.\n\n`Apply` can be used to lift functions of two or more arguments to work on\nvalues wrapped with the type constructor `f`. It might also be understood\nin terms of the `lift2` function:\n\n```purescript\nlift2 :: forall f a b c. (Apply f) => (a -> b -> c) -> f a -> f b -> f c\nlift2 f a b = f <$> a <*> b\n```\n\n`(<*>)` is recovered from `lift2` as `lift2 ($)`. That is, `(<*>)` lifts\nthe function application operator `($)` to arguments wrapped with the\ntype constructor `f`.\n\nInstances must satisfy the following law in addition to the `Functor`\nlaws:\n\n- Associative composition: `(<<<) <$> f <*> g <*> h = f <*> (g <*> h)`\n\nFormally, `Apply` represents a strong lax semi-monoidal endofunctor.\n","title":"Apply","fixity":null,"info":{"arguments":[["f",null]],"declType":"typeClass","superclasses":[[[["Prelude"],"Functor"],[{"tag":"TypeVar","contents":"f"}]]]},"sourceSpan":{"start":[230,1],"name":"bower_components/purescript-prelude/src/Prelude.purs","end":[233,1]}},{"children":[{"comments":null,"title":"bind","info":{"declType":"typeClassMember","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"m"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"m"},{"tag":"TypeVar","contents":"b"}]}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"m"},{"tag":"TypeVar","contents":"b"}]}]}]},null]},null]}},"sourceSpan":null},{"comments":null,"title":"bindFn","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prelude"],"Bind"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"r"}]}]}},"sourceSpan":{"start":[320,1],"name":"bower_components/purescript-prelude/src/Prelude.purs","end":[323,1]}},{"comments":null,"title":"bindArray","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prelude"],"Bind"]},{"tag":"TypeConstructor","contents":[["Prim"],"Array"]}]}},"sourceSpan":{"start":[323,1],"name":"bower_components/purescript-prelude/src/Prelude.purs","end":[326,1]}}],"comments":"The `Bind` type class extends the [`Apply`](#apply) type class with a\n\"bind\" operation `(>>=)` which composes computations in sequence, using\nthe return value of one computation to determine the next computation.\n\nThe `>>=` operator can also be expressed using `do` notation, as follows:\n\n```purescript\nx >>= f = do y <- x\n             f y\n```\n\nwhere the function argument of `f` is given the name `y`.\n\nInstances must satisfy the following law in addition to the `Apply`\nlaws:\n\n- Associativity: `(x >>= f) >>= g = x >>= (\\k => f k >>= g)`\n\nAssociativity tells us that we can regroup operations which use `do`\nnotation so that we can unambiguously write, for example:\n\n```purescript\ndo x <- m1\n   y <- m2 x\n   m3 x y\n```\n","title":"Bind","fixity":null,"info":{"arguments":[["m",null]],"declType":"typeClass","superclasses":[[[["Prelude"],"Apply"],[{"tag":"TypeVar","contents":"m"}]]]},"sourceSpan":{"start":[317,1],"name":"bower_components/purescript-prelude/src/Prelude.purs","end":[320,1]}},{"children":[{"comments":null,"title":"conj","info":{"declType":"typeClassMember","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":null},{"comments":null,"title":"disj","info":{"declType":"typeClassMember","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":null},{"comments":null,"title":"not","info":{"declType":"typeClassMember","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"a"}]}},"sourceSpan":null},{"comments":null,"title":"booleanAlgebraBoolean","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prelude"],"BooleanAlgebra"]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}},"sourceSpan":{"start":[802,1],"name":"bower_components/purescript-prelude/src/Prelude.purs","end":[807,1]}},{"comments":null,"title":"booleanAlgebraUnit","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prelude"],"BooleanAlgebra"]},{"tag":"TypeConstructor","contents":[["Prelude"],"Unit"]}]}},"sourceSpan":{"start":[807,1],"name":"bower_components/purescript-prelude/src/Prelude.purs","end":[812,1]}},{"comments":null,"title":"booleanAlgebraFn","info":{"declType":"instance","dependencies":[[[["Prelude"],"BooleanAlgebra"],[{"tag":"TypeVar","contents":"b"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prelude"],"BooleanAlgebra"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]}},"sourceSpan":{"start":[812,1],"name":"bower_components/purescript-prelude/src/Prelude.purs","end":[817,1]}}],"comments":"The `BooleanAlgebra` type class represents types that behave like boolean\nvalues.\n\nInstances should satisfy the following laws in addition to the `Bounded`\nlaws:\n\n- Associativity:\n  - `a || (b || c) = (a || b) || c`\n  - `a && (b && c) = (a && b) && c`\n- Commutativity:\n  - `a || b = b || a`\n  - `a && b = b && a`\n- Distributivity:\n  - `a && (b || c) = (a && b) || (a && c)`\n  - `a || (b && c) = (a || b) && (a || c)`\n- Identity:\n  - `a || bottom = a`\n  - `a && top = a`\n- Idempotent:\n  - `a || a = a`\n  - `a && a = a`\n- Absorption:\n  - `a || (a && b) = a`\n  - `a && (a || b) = a`\n- Annhiliation:\n  - `a || top = top`\n- Complementation:\n  - `a && not a = bottom`\n  - `a || not a = top`\n","title":"BooleanAlgebra","fixity":null,"info":{"arguments":[["a",null]],"declType":"typeClass","superclasses":[[[["Prelude"],"Bounded"],[{"tag":"TypeVar","contents":"a"}]]]},"sourceSpan":{"start":[797,1],"name":"bower_components/purescript-prelude/src/Prelude.purs","end":[802,1]}},{"children":[{"comments":null,"title":"top","info":{"declType":"typeClassMember","type":{"tag":"TypeVar","contents":"a"}},"sourceSpan":null},{"comments":null,"title":"bottom","info":{"declType":"typeClassMember","type":{"tag":"TypeVar","contents":"a"}},"sourceSpan":null},{"comments":null,"title":"boundedBoolean","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prelude"],"Bounded"]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}},"sourceSpan":{"start":[724,1],"name":"bower_components/purescript-prelude/src/Prelude.purs","end":[728,1]}},{"comments":null,"title":"boundedUnit","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prelude"],"Bounded"]},{"tag":"TypeConstructor","contents":[["Prelude"],"Unit"]}]}},"sourceSpan":{"start":[728,1],"name":"bower_components/purescript-prelude/src/Prelude.purs","end":[732,1]}},{"comments":null,"title":"boundedOrdering","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prelude"],"Bounded"]},{"tag":"TypeConstructor","contents":[["Prelude"],"Ordering"]}]}},"sourceSpan":{"start":[732,1],"name":"bower_components/purescript-prelude/src/Prelude.purs","end":[736,1]}},{"comments":null,"title":"boundedInt","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prelude"],"Bounded"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}},"sourceSpan":{"start":[736,1],"name":"bower_components/purescript-prelude/src/Prelude.purs","end":[741,1]}},{"comments":"Characters fall within the Unicode range.\n","title":"boundedChar","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prelude"],"Bounded"]},{"tag":"TypeConstructor","contents":[["Prim"],"Char"]}]}},"sourceSpan":{"start":[741,1],"name":"bower_components/purescript-prelude/src/Prelude.purs","end":[745,1]}},{"comments":null,"title":"boundedFn","info":{"declType":"instance","dependencies":[[[["Prelude"],"Bounded"],[{"tag":"TypeVar","contents":"b"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prelude"],"Bounded"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]}},"sourceSpan":{"start":[745,1],"name":"bower_components/purescript-prelude/src/Prelude.purs","end":[749,1]}}],"comments":"The `Bounded` type class represents types that are finite.\n\nAlthough there are no \"internal\" laws for `Bounded`, every value of `a`\nshould be considered less than or equal to `top` by some means, and greater\nthan or equal to `bottom`.\n\nThe lack of explicit `Ord` constraint allows flexibility in the use of\n`Bounded` so it can apply to total and partially ordered sets, boolean\nalgebras, etc.\n","title":"Bounded","fixity":null,"info":{"arguments":[["a",null]],"declType":"typeClass","superclasses":[]},"sourceSpan":{"start":[720,1],"name":"bower_components/purescript-prelude/src/Prelude.purs","end":[724,1]}},{"children":[{"comments":null,"title":"boundedOrdBoolean","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prelude"],"BoundedOrd"]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}},"sourceSpan":{"start":[762,1],"name":"bower_components/purescript-prelude/src/Prelude.purs","end":[763,1]}},{"comments":null,"title":"boundedOrdUnit","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prelude"],"BoundedOrd"]},{"tag":"TypeConstructor","contents":[["Prelude"],"Unit"]}]}},"sourceSpan":{"start":[763,1],"name":"bower_components/purescript-prelude/src/Prelude.purs","end":[764,1]}},{"comments":null,"title":"boundedOrdOrdering","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prelude"],"BoundedOrd"]},{"tag":"TypeConstructor","contents":[["Prelude"],"Ordering"]}]}},"sourceSpan":{"start":[764,1],"name":"bower_components/purescript-prelude/src/Prelude.purs","end":[765,1]}},{"comments":null,"title":"boundedOrdInt","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prelude"],"BoundedOrd"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}},"sourceSpan":{"start":[765,1],"name":"bower_components/purescript-prelude/src/Prelude.purs","end":[766,1]}},{"comments":null,"title":"boundedOrdChar","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prelude"],"BoundedOrd"]},{"tag":"TypeConstructor","contents":[["Prim"],"Char"]}]}},"sourceSpan":{"start":[766,1],"name":"bower_components/purescript-prelude/src/Prelude.purs","end":[797,1]}}],"comments":"The `BoundedOrd` type class represents totally ordered finite data types.\n\nInstances should satisfy the following law in addition to the `Ord` laws:\n\n- Ordering: `bottom <= a <= top`\n","title":"BoundedOrd","fixity":null,"info":{"arguments":[["a",null]],"declType":"typeClass","superclasses":[[[["Prelude"],"Bounded"],[{"tag":"TypeVar","contents":"a"}]],[[["Prelude"],"Ord"],[{"tag":"TypeVar","contents":"a"}]]]},"sourceSpan":{"start":[760,1],"name":"bower_components/purescript-prelude/src/Prelude.purs","end":[762,1]}},{"children":[{"comments":null,"title":"id","info":{"declType":"typeClassMember","type":{"tag":"ForAll","contents":["t",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"a"},{"tag":"TypeVar","contents":"t"}]},{"tag":"TypeVar","contents":"t"}]},null]}},"sourceSpan":null},{"comments":null,"title":"categoryFn","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prelude"],"Category"]},{"tag":"TypeConstructor","contents":[["Prim"],"Function"]}]}},"sourceSpan":{"start":[153,1],"name":"bower_components/purescript-prelude/src/Prelude.purs","end":[167,1]}}],"comments":"`Category`s consist of objects and composable morphisms between them, and\nas such are [`Semigroupoids`](#semigroupoid), but unlike `semigroupoids`\nmust have an identity element.\n\nInstances must satisfy the following law in addition to the\n`Semigroupoid` law:\n\n- Identity: `id <<< p = p <<< id = p`\n","title":"Category","fixity":null,"info":{"arguments":[["a",null]],"declType":"typeClass","superclasses":[[[["Prelude"],"Semigroupoid"],[{"tag":"TypeVar","contents":"a"}]]]},"sourceSpan":{"start":[150,1],"name":"bower_components/purescript-prelude/src/Prelude.purs","end":[153,1]}},{"children":[{"comments":null,"title":"divisionRingNumber","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prelude"],"DivisionRing"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]}},"sourceSpan":{"start":[556,1],"name":"bower_components/purescript-prelude/src/Prelude.purs","end":[557,1]}},{"comments":null,"title":"divisionRingUnit","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prelude"],"DivisionRing"]},{"tag":"TypeConstructor","contents":[["Prelude"],"Unit"]}]}},"sourceSpan":{"start":[557,1],"name":"bower_components/purescript-prelude/src/Prelude.purs","end":[565,1]}}],"comments":"A `Ring` where every nonzero element has a multiplicative inverse.\n\nInstances must satisfy the following law in addition to the `Ring` and\n`ModuloSemiring` laws:\n\n- Multiplicative inverse: `(one / x) * x = one`\n\nAs a consequence of this ```a `mod` b = zero``` as no divide operation\nwill have a remainder.\n","title":"DivisionRing","fixity":null,"info":{"arguments":[["a",null]],"declType":"typeClass","superclasses":[[[["Prelude"],"Ring"],[{"tag":"TypeVar","contents":"a"}]],[[["Prelude"],"ModuloSemiring"],[{"tag":"TypeVar","contents":"a"}]]]},"sourceSpan":{"start":[554,1],"name":"bower_components/purescript-prelude/src/Prelude.purs","end":[556,1]}},{"children":[{"comments":null,"title":"eq","info":{"declType":"typeClassMember","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}]}},"sourceSpan":null},{"comments":null,"title":"eqBoolean","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prelude"],"Eq"]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}},"sourceSpan":{"start":[592,1],"name":"bower_components/purescript-prelude/src/Prelude.purs","end":[595,1]}},{"comments":null,"title":"eqInt","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prelude"],"Eq"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}},"sourceSpan":{"start":[595,1],"name":"bower_components/purescript-prelude/src/Prelude.purs","end":[598,1]}},{"comments":null,"title":"eqNumber","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prelude"],"Eq"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]}},"sourceSpan":{"start":[598,1],"name":"bower_components/purescript-prelude/src/Prelude.purs","end":[601,1]}},{"comments":null,"title":"eqChar","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prelude"],"Eq"]},{"tag":"TypeConstructor","contents":[["Prim"],"Char"]}]}},"sourceSpan":{"start":[601,1],"name":"bower_components/purescript-prelude/src/Prelude.purs","end":[604,1]}},{"comments":null,"title":"eqString","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prelude"],"Eq"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}},"sourceSpan":{"start":[604,1],"name":"bower_components/purescript-prelude/src/Prelude.purs","end":[607,1]}},{"comments":null,"title":"eqUnit","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prelude"],"Eq"]},{"tag":"TypeConstructor","contents":[["Prelude"],"Unit"]}]}},"sourceSpan":{"start":[607,1],"name":"bower_components/purescript-prelude/src/Prelude.purs","end":[610,1]}},{"comments":null,"title":"eqArray","info":{"declType":"instance","dependencies":[[[["Prelude"],"Eq"],[{"tag":"TypeVar","contents":"a"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prelude"],"Eq"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[610,1],"name":"bower_components/purescript-prelude/src/Prelude.purs","end":[613,1]}},{"comments":null,"title":"eqOrdering","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prelude"],"Eq"]},{"tag":"TypeConstructor","contents":[["Prelude"],"Ordering"]}]}},"sourceSpan":{"start":[613,1],"name":"bower_components/purescript-prelude/src/Prelude.purs","end":[619,1]}}],"comments":"The `Eq` type class represents types which support decidable equality.\n\n`Eq` instances should satisfy the following laws:\n\n- Reflexivity: `x == x = true`\n- Symmetry: `x == y = y == x`\n- Transitivity: if `x == y` and `y == z` then `x == z`\n","title":"Eq","fixity":null,"info":{"arguments":[["a",null]],"declType":"typeClass","superclasses":[]},"sourceSpan":{"start":[577,1],"name":"bower_components/purescript-prelude/src/Prelude.purs","end":[580,1]}},{"children":[{"comments":null,"title":"map","info":{"declType":"typeClassMember","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"b"}]}]}]},null]},null]}},"sourceSpan":null},{"comments":null,"title":"functorFn","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prelude"],"Functor"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"r"}]}]}},"sourceSpan":{"start":[170,1],"name":"bower_components/purescript-prelude/src/Prelude.purs","end":[173,1]}},{"comments":null,"title":"functorArray","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prelude"],"Functor"]},{"tag":"TypeConstructor","contents":[["Prim"],"Array"]}]}},"sourceSpan":{"start":[173,1],"name":"bower_components/purescript-prelude/src/Prelude.purs","end":[176,1]}}],"comments":"A `Functor` is a type constructor which supports a mapping operation\n`(<$>)`.\n\n`(<$>)` can be used to turn functions `a -> b` into functions\n`f a -> f b` whose argument and return types use the type constructor `f`\nto represent some computational context.\n\nInstances must satisfy the following laws:\n\n- Identity: `(<$>) id = id`\n- Composition: `(<$>) (f <<< g) = (f <$>) <<< (g <$>)`\n","title":"Functor","fixity":null,"info":{"arguments":[["f",null]],"declType":"typeClass","superclasses":[]},"sourceSpan":{"start":[167,1],"name":"bower_components/purescript-prelude/src/Prelude.purs","end":[170,1]}},{"children":[{"comments":null,"title":"div","info":{"declType":"typeClassMember","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":null},{"comments":null,"title":"mod","info":{"declType":"typeClassMember","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":null},{"comments":null,"title":"moduloSemiringInt","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prelude"],"ModuloSemiring"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}},"sourceSpan":{"start":[523,1],"name":"bower_components/purescript-prelude/src/Prelude.purs","end":[527,1]}},{"comments":null,"title":"moduloSemiringNumber","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prelude"],"ModuloSemiring"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]}},"sourceSpan":{"start":[527,1],"name":"bower_components/purescript-prelude/src/Prelude.purs","end":[531,1]}},{"comments":null,"title":"moduloSemiringUnit","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prelude"],"ModuloSemiring"]},{"tag":"TypeConstructor","contents":[["Prelude"],"Unit"]}]}},"sourceSpan":{"start":[531,1],"name":"bower_components/purescript-prelude/src/Prelude.purs","end":[535,1]}}],"comments":"The `ModuloSemiring` class is for types that support addition,\nmultiplication, division, and modulo (division remainder) operations.\n\nInstances must satisfy the following law in addition to the `Semiring`\nlaws:\n\n- Remainder: ``a / b * b + (a `mod` b) = a``\n","title":"ModuloSemiring","fixity":null,"info":{"arguments":[["a",null]],"declType":"typeClass","superclasses":[[[["Prelude"],"Semiring"],[{"tag":"TypeVar","contents":"a"}]]]},"sourceSpan":{"start":[519,1],"name":"bower_components/purescript-prelude/src/Prelude.purs","end":[523,1]}},{"children":[{"comments":null,"title":"monadFn","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prelude"],"Monad"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"r"}]}]}},"sourceSpan":{"start":[346,1],"name":"bower_components/purescript-prelude/src/Prelude.purs","end":[347,1]}},{"comments":null,"title":"monadArray","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prelude"],"Monad"]},{"tag":"TypeConstructor","contents":[["Prim"],"Array"]}]}},"sourceSpan":{"start":[347,1],"name":"bower_components/purescript-prelude/src/Prelude.purs","end":[360,1]}}],"comments":"The `Monad` type class combines the operations of the `Bind` and\n`Applicative` type classes. Therefore, `Monad` instances represent type\nconstructors which support sequential composition, and also lifting of\nfunctions of arbitrary arity.\n\nInstances must satisfy the following laws in addition to the\n`Applicative` and `Bind` laws:\n\n- Left Identity: `pure x >>= f = f x`\n- Right Identity: `x >>= pure = x`\n","title":"Monad","fixity":null,"info":{"arguments":[["m",null]],"declType":"typeClass","superclasses":[[[["Prelude"],"Applicative"],[{"tag":"TypeVar","contents":"m"}]],[[["Prelude"],"Bind"],[{"tag":"TypeVar","contents":"m"}]]]},"sourceSpan":{"start":[344,1],"name":"bower_components/purescript-prelude/src/Prelude.purs","end":[346,1]}},{"children":[{"comments":null,"title":"numNumber","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prelude"],"Num"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]}},"sourceSpan":{"start":[567,1],"name":"bower_components/purescript-prelude/src/Prelude.purs","end":[568,1]}},{"comments":null,"title":"numUnit","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prelude"],"Num"]},{"tag":"TypeConstructor","contents":[["Prelude"],"Unit"]}]}},"sourceSpan":{"start":[568,1],"name":"bower_components/purescript-prelude/src/Prelude.purs","end":[577,1]}}],"comments":"The `Num` class is for types that are commutative fields.\n\nInstances must satisfy the following law in addition to the\n`DivisionRing` laws:\n\n- Commutative multiplication: `a * b = b * a`\n","title":"Num","fixity":null,"info":{"arguments":[["a",null]],"declType":"typeClass","superclasses":[[[["Prelude"],"DivisionRing"],[{"tag":"TypeVar","contents":"a"}]]]},"sourceSpan":{"start":[565,1],"name":"bower_components/purescript-prelude/src/Prelude.purs","end":[567,1]}},{"children":[{"comments":null,"title":"compare","info":{"declType":"typeClassMember","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeConstructor","contents":[["Prelude"],"Ordering"]}]}]}},"sourceSpan":null},{"comments":null,"title":"ordBoolean","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prelude"],"Ord"]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}},"sourceSpan":{"start":[642,1],"name":"bower_components/purescript-prelude/src/Prelude.purs","end":[645,1]}},{"comments":null,"title":"ordInt","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prelude"],"Ord"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}},"sourceSpan":{"start":[645,1],"name":"bower_components/purescript-prelude/src/Prelude.purs","end":[648,1]}},{"comments":null,"title":"ordNumber","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prelude"],"Ord"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]}},"sourceSpan":{"start":[648,1],"name":"bower_components/purescript-prelude/src/Prelude.purs","end":[651,1]}},{"comments":null,"title":"ordString","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prelude"],"Ord"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}},"sourceSpan":{"start":[651,1],"name":"bower_components/purescript-prelude/src/Prelude.purs","end":[654,1]}},{"comments":null,"title":"ordChar","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prelude"],"Ord"]},{"tag":"TypeConstructor","contents":[["Prim"],"Char"]}]}},"sourceSpan":{"start":[654,1],"name":"bower_components/purescript-prelude/src/Prelude.purs","end":[657,1]}},{"comments":null,"title":"ordUnit","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prelude"],"Ord"]},{"tag":"TypeConstructor","contents":[["Prelude"],"Unit"]}]}},"sourceSpan":{"start":[657,1],"name":"bower_components/purescript-prelude/src/Prelude.purs","end":[660,1]}},{"comments":null,"title":"ordArray","info":{"declType":"instance","dependencies":[[[["Prelude"],"Ord"],[{"tag":"TypeVar","contents":"a"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prelude"],"Ord"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[660,1],"name":"bower_components/purescript-prelude/src/Prelude.purs","end":[666,1]}},{"comments":null,"title":"ordOrdering","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prelude"],"Ord"]},{"tag":"TypeConstructor","contents":[["Prelude"],"Ordering"]}]}},"sourceSpan":{"start":[668,1],"name":"bower_components/purescript-prelude/src/Prelude.purs","end":[677,1]}}],"comments":"The `Ord` type class represents types which support comparisons with a\n_total order_.\n\n`Ord` instances should satisfy the laws of total orderings:\n\n- Reflexivity: `a <= a`\n- Antisymmetry: if `a <= b` and `b <= a` then `a = b`\n- Transitivity: if `a <= b` and `b <= c` then `a <= c`\n","title":"Ord","fixity":null,"info":{"arguments":[["a",null]],"declType":"typeClass","superclasses":[[[["Prelude"],"Eq"],[{"tag":"TypeVar","contents":"a"}]]]},"sourceSpan":{"start":[639,1],"name":"bower_components/purescript-prelude/src/Prelude.purs","end":[642,1]}},{"children":[{"comments":null,"title":"sub","info":{"declType":"typeClassMember","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":null},{"comments":null,"title":"ringInt","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prelude"],"Ring"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}},"sourceSpan":{"start":[490,1],"name":"bower_components/purescript-prelude/src/Prelude.purs","end":[493,1]}},{"comments":null,"title":"ringNumber","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prelude"],"Ring"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]}},"sourceSpan":{"start":[493,1],"name":"bower_components/purescript-prelude/src/Prelude.purs","end":[496,1]}},{"comments":null,"title":"ringUnit","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prelude"],"Ring"]},{"tag":"TypeConstructor","contents":[["Prelude"],"Unit"]}]}},"sourceSpan":{"start":[496,1],"name":"bower_components/purescript-prelude/src/Prelude.purs","end":[499,1]}}],"comments":"The `Ring` class is for types that support addition, multiplication,\nand subtraction operations.\n\nInstances must satisfy the following law in addition to the `Semiring`\nlaws:\n\n- Additive inverse: `a - a = (zero - a) + a = zero`\n","title":"Ring","fixity":null,"info":{"arguments":[["a",null]],"declType":"typeClass","superclasses":[[[["Prelude"],"Semiring"],[{"tag":"TypeVar","contents":"a"}]]]},"sourceSpan":{"start":[487,1],"name":"bower_components/purescript-prelude/src/Prelude.purs","end":[490,1]}},{"children":[{"comments":null,"title":"append","info":{"declType":"typeClassMember","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":null},{"comments":null,"title":"semigroupString","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prelude"],"Semigroup"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}},"sourceSpan":{"start":[404,1],"name":"bower_components/purescript-prelude/src/Prelude.purs","end":[407,1]}},{"comments":null,"title":"semigroupUnit","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prelude"],"Semigroup"]},{"tag":"TypeConstructor","contents":[["Prelude"],"Unit"]}]}},"sourceSpan":{"start":[407,1],"name":"bower_components/purescript-prelude/src/Prelude.purs","end":[410,1]}},{"comments":null,"title":"semigroupFn","info":{"declType":"instance","dependencies":[[[["Prelude"],"Semigroup"],[{"tag":"TypeVar","contents":"s'"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prelude"],"Semigroup"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"s"}]},{"tag":"TypeVar","contents":"s'"}]}]}},"sourceSpan":{"start":[410,1],"name":"bower_components/purescript-prelude/src/Prelude.purs","end":[413,1]}},{"comments":null,"title":"semigroupOrdering","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prelude"],"Semigroup"]},{"tag":"TypeConstructor","contents":[["Prelude"],"Ordering"]}]}},"sourceSpan":{"start":[413,1],"name":"bower_components/purescript-prelude/src/Prelude.purs","end":[418,1]}},{"comments":null,"title":"semigroupArray","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prelude"],"Semigroup"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[418,1],"name":"bower_components/purescript-prelude/src/Prelude.purs","end":[421,1]}}],"comments":"The `Semigroup` type class identifies an associative operation on a type.\n\nInstances are required to satisfy the following law:\n\n- Associativity: `(x <> y) <> z = x <> (y <> z)`\n\nOne example of a `Semigroup` is `String`, with `(<>)` defined as string\nconcatenation.\n","title":"Semigroup","fixity":null,"info":{"arguments":[["a",null]],"declType":"typeClass","superclasses":[]},"sourceSpan":{"start":[390,1],"name":"bower_components/purescript-prelude/src/Prelude.purs","end":[393,1]}},{"children":[{"comments":null,"title":"compose","info":{"declType":"typeClassMember","type":{"tag":"ForAll","contents":["d",{"tag":"ForAll","contents":["c",{"tag":"ForAll","contents":["b",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"a"},{"tag":"TypeVar","contents":"c"}]},{"tag":"TypeVar","contents":"d"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"a"},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeVar","contents":"c"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"a"},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeVar","contents":"d"}]}]}]},null]},null]},null]}},"sourceSpan":null},{"comments":null,"title":"semigroupoidFn","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prelude"],"Semigroupoid"]},{"tag":"TypeConstructor","contents":[["Prim"],"Function"]}]}},"sourceSpan":{"start":[128,1],"name":"bower_components/purescript-prelude/src/Prelude.purs","end":[131,1]}}],"comments":"A `Semigroupoid` is similar to a [`Category`](#category) but does not\nrequire an identity element `id`, just composable morphisms.\n\n`Semigroupoid`s must satisfy the following law:\n\n- Associativity: `p <<< (q <<< r) = (p <<< q) <<< r`\n\nOne example of a `Semigroupoid` is the function type constructor `(->)`,\nwith `(<<<)` defined as function composition.\n","title":"Semigroupoid","fixity":null,"info":{"arguments":[["a",null]],"declType":"typeClass","superclasses":[]},"sourceSpan":{"start":[125,1],"name":"bower_components/purescript-prelude/src/Prelude.purs","end":[128,1]}},{"children":[{"comments":null,"title":"add","info":{"declType":"typeClassMember","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":null},{"comments":null,"title":"zero","info":{"declType":"typeClassMember","type":{"tag":"TypeVar","contents":"a"}},"sourceSpan":null},{"comments":null,"title":"mul","info":{"declType":"typeClassMember","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":null},{"comments":null,"title":"one","info":{"declType":"typeClassMember","type":{"tag":"TypeVar","contents":"a"}},"sourceSpan":null},{"comments":null,"title":"semiringInt","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prelude"],"Semiring"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}},"sourceSpan":{"start":[446,1],"name":"bower_components/purescript-prelude/src/Prelude.purs","end":[452,1]}},{"comments":null,"title":"semiringNumber","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prelude"],"Semiring"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]}},"sourceSpan":{"start":[452,1],"name":"bower_components/purescript-prelude/src/Prelude.purs","end":[458,1]}},{"comments":null,"title":"semiringUnit","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prelude"],"Semiring"]},{"tag":"TypeConstructor","contents":[["Prelude"],"Unit"]}]}},"sourceSpan":{"start":[458,1],"name":"bower_components/purescript-prelude/src/Prelude.purs","end":[464,1]}}],"comments":"The `Semiring` class is for types that support an addition and\nmultiplication operation.\n\nInstances must satisfy the following laws:\n\n- Commutative monoid under addition:\n  - Associativity: `(a + b) + c = a + (b + c)`\n  - Identity: `zero + a = a + zero = a`\n  - Commutative: `a + b = b + a`\n- Monoid under multiplication:\n  - Associativity: `(a * b) * c = a * (b * c)`\n  - Identity: `one * a = a * one = a`\n- Multiplication distributes over addition:\n  - Left distributivity: `a * (b + c) = (a * b) + (a * c)`\n  - Right distributivity: `(a + b) * c = (a * c) + (b * c)`\n- Annihiliation: `zero * a = a * zero = zero`\n","title":"Semiring","fixity":null,"info":{"arguments":[["a",null]],"declType":"typeClass","superclasses":[]},"sourceSpan":{"start":[440,1],"name":"bower_components/purescript-prelude/src/Prelude.purs","end":[446,1]}},{"children":[{"comments":null,"title":"show","info":{"declType":"typeClassMember","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}},"sourceSpan":null},{"comments":null,"title":"showBoolean","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prelude"],"Show"]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}},"sourceSpan":{"start":[841,1],"name":"bower_components/purescript-prelude/src/Prelude.purs","end":[845,1]}},{"comments":null,"title":"showInt","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prelude"],"Show"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}},"sourceSpan":{"start":[845,1],"name":"bower_components/purescript-prelude/src/Prelude.purs","end":[848,1]}},{"comments":null,"title":"showNumber","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prelude"],"Show"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]}},"sourceSpan":{"start":[848,1],"name":"bower_components/purescript-prelude/src/Prelude.purs","end":[851,1]}},{"comments":null,"title":"showChar","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prelude"],"Show"]},{"tag":"TypeConstructor","contents":[["Prim"],"Char"]}]}},"sourceSpan":{"start":[851,1],"name":"bower_components/purescript-prelude/src/Prelude.purs","end":[854,1]}},{"comments":null,"title":"showString","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prelude"],"Show"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}},"sourceSpan":{"start":[854,1],"name":"bower_components/purescript-prelude/src/Prelude.purs","end":[857,1]}},{"comments":null,"title":"showUnit","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prelude"],"Show"]},{"tag":"TypeConstructor","contents":[["Prelude"],"Unit"]}]}},"sourceSpan":{"start":[857,1],"name":"bower_components/purescript-prelude/src/Prelude.purs","end":[860,1]}},{"comments":null,"title":"showArray","info":{"declType":"instance","dependencies":[[[["Prelude"],"Show"],[{"tag":"TypeVar","contents":"a"}]]],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prelude"],"Show"]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Array"]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":{"start":[860,1],"name":"bower_components/purescript-prelude/src/Prelude.purs","end":[863,1]}},{"comments":null,"title":"showOrdering","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prelude"],"Show"]},{"tag":"TypeConstructor","contents":[["Prelude"],"Ordering"]}]}},"sourceSpan":{"start":[863,1],"name":"bower_components/purescript-prelude/src/Prelude.purs","end":[868,1]}}],"comments":"The `Show` type class represents those types which can be converted into\na human-readable `String` representation.\n\nWhile not required, it is recommended that for any expression `x`, the\nstring `show x` be executable PureScript code which evaluates to the same\nvalue as the expression `x`.\n","title":"Show","fixity":null,"info":{"arguments":[["a",null]],"declType":"typeClass","superclasses":[]},"sourceSpan":{"start":[838,1],"name":"bower_components/purescript-prelude/src/Prelude.purs","end":[841,1]}},{"children":[],"comments":"`ap` provides a default implementation of `(<*>)` for any\n[`Monad`](#monad), without using `(<*>)` as provided by the\n[`Apply`](#apply)-[`Monad`](#monad) superclass relationship.\n\n`ap` can therefore be used to write [`Apply`](#apply) instances as\nfollows:\n\n```purescript\ninstance applyF :: Apply F where\n  apply = ap\n```\n","title":"ap","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["m",{"tag":"ConstrainedType","contents":[[[[["Prelude"],"Monad"],[{"tag":"TypeVar","contents":"m"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"m"},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"m"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"m"},{"tag":"TypeVar","contents":"b"}]}]}]}]},null]},null]},null]}},"sourceSpan":{"start":[376,1],"name":"bower_components/purescript-prelude/src/Prelude.purs","end":[377,1]}},{"children":[],"comments":"This function returns its first argument, and can be used to assert type\nequalities. This can be useful when types are otherwise ambiguous.\n\n```purescript\nmain = print $ [] `asTypeOf` [0]\n```\n\nIf instead, we had written `main = print []`, the type of the argument\n`[]` would have been ambiguous, resulting in a compile-time error.\n","title":"asTypeOf","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"a"}]}]},null]}},"sourceSpan":{"start":[104,1],"name":"bower_components/purescript-prelude/src/Prelude.purs","end":[105,1]}},{"children":[],"comments":"Returns its first argument and ignores its second.\n\n```purescript\nconst 1 \"hello\" = 1\n```\n","title":"const","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeVar","contents":"a"}]}]},null]},null]}},"sourceSpan":{"start":[92,1],"name":"bower_components/purescript-prelude/src/Prelude.purs","end":[93,1]}},{"children":[],"comments":"Flips the order of the arguments to a function of two arguments.\n\n```purescript\nflip const 1 2 = const 2 1 = 2\n```\n","title":"flip","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["c",{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeVar","contents":"c"}]}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"c"}]}]}]},null]},null]},null]}},"sourceSpan":{"start":[84,1],"name":"bower_components/purescript-prelude/src/Prelude.purs","end":[85,1]}},{"children":[],"comments":"`liftA1` provides a default implementation of `(<$>)` for any\n[`Applicative`](#applicative) functor, without using `(<$>)` as provided\nby the [`Functor`](#functor)-[`Applicative`](#applicative) superclass\nrelationship.\n\n`liftA1` can therefore be used to write [`Functor`](#functor) instances\nas follows:\n\n```purescript\ninstance functorF :: Functor F where\n  map = liftA1\n```\n","title":"liftA1","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["f",{"tag":"ConstrainedType","contents":[[[[["Prelude"],"Applicative"],[{"tag":"TypeVar","contents":"f"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"b"}]}]}]}]},null]},null]},null]}},"sourceSpan":{"start":[288,1],"name":"bower_components/purescript-prelude/src/Prelude.purs","end":[289,1]}},{"children":[],"comments":"`liftM1` provides a default implementation of `(<$>)` for any\n[`Monad`](#monad), without using `(<$>)` as provided by the\n[`Functor`](#functor)-[`Monad`](#monad) superclass relationship.\n\n`liftM1` can therefore be used to write [`Functor`](#functor) instances\nas follows:\n\n```purescript\ninstance functorF :: Functor F where\n  map = liftM1\n```\n","title":"liftM1","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["m",{"tag":"ConstrainedType","contents":[[[[["Prelude"],"Monad"],[{"tag":"TypeVar","contents":"m"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"m"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"m"},{"tag":"TypeVar","contents":"b"}]}]}]}]},null]},null]},null]}},"sourceSpan":{"start":[360,1],"name":"bower_components/purescript-prelude/src/Prelude.purs","end":[361,1]}},{"children":[],"comments":"`negate x` can be used as a shorthand for `zero - x`.\n","title":"negate","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[[[[["Prelude"],"Ring"],[{"tag":"TypeVar","contents":"a"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"a"}]}]},null]}},"sourceSpan":{"start":[506,1],"name":"bower_components/purescript-prelude/src/Prelude.purs","end":[507,1]}},{"children":[],"comments":"An alias for `true`, which can be useful in guard clauses:\n\n```purescript\nmax x y | x >= y    = x\n        | otherwise = y\n```\n","title":"otherwise","fixity":null,"info":{"declType":"value","type":{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}},"sourceSpan":{"start":[113,1],"name":"bower_components/purescript-prelude/src/Prelude.purs","end":[114,1]}},{"children":[],"comments":"`return` is an alias for `pure`.\n","title":"return","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["m",{"tag":"ConstrainedType","contents":[[[[["Prelude"],"Applicative"],[{"tag":"TypeVar","contents":"m"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"m"},{"tag":"TypeVar","contents":"a"}]}]}]},null]},null]}},"sourceSpan":{"start":[273,1],"name":"bower_components/purescript-prelude/src/Prelude.purs","end":[274,1]}},{"children":[],"comments":"`unit` is the sole inhabitant of the `Unit` type.\n","title":"unit","fixity":null,"info":{"declType":"value","type":{"tag":"TypeConstructor","contents":[["Prelude"],"Unit"]}},"sourceSpan":{"start":[39,1],"name":"bower_components/purescript-prelude/src/Prelude.purs","end":[40,1]}},{"children":[],"comments":null,"title":"unsafeCompare","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeConstructor","contents":[["Prelude"],"Ordering"]}]}]},null]}},"sourceSpan":{"start":[706,1],"name":"bower_components/purescript-prelude/src/Prelude.purs","end":[707,1]}},{"children":[],"comments":"The `void` function is used to ignore the type wrapped by a\n[`Functor`](#functor), replacing it with `Unit` and keeping only the type\ninformation provided by the type constructor itself.\n\n`void` is often useful when using `do` notation to change the return type\nof a monadic computation:\n\n```purescript\nmain = forE 1 10 \\n -> void do\n  print n\n  print (n * n)\n```\n","title":"void","fixity":null,"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["f",{"tag":"ConstrainedType","contents":[[[[["Prelude"],"Functor"],[{"tag":"TypeVar","contents":"f"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeConstructor","contents":[["Prelude"],"Unit"]}]}]}]},null]},null]}},"sourceSpan":{"start":[205,1],"name":"bower_components/purescript-prelude/src/Prelude.purs","end":[206,1]}},{"children":[],"comments":"Applies an argument to a function.\n\n```purescript\nproducts # filter isInStock # groupBy productCategory # length\n```\n\nis equivalent to:\n\n```purescript\nlength (groupBy productCategory (filter isInStock products))\n```\n\n`(#)` is different from [`($)`](#-1) because it is left-infix instead of\nright: `x # a # b # c # d = (((x # a) # b) # c) # d = d (c (b (a x)))`\n","title":"(#)","fixity":{"associativity":"infixl","precedence":1},"info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeVar","contents":"b"}]}]},null]},null]}},"sourceSpan":{"start":[76,1],"name":"bower_components/purescript-prelude/src/Prelude.purs","end":[77,1]}},{"children":[],"comments":"Applies a function to its argument.\n\n```purescript\nlength $ groupBy productCategory $ filter isInStock $ products\n```\n\nis equivalent to:\n\n```purescript\nlength (groupBy productCategory (filter isInStock products))\n```\n\n`($)` is different from [`(#)`](#-2) because it is right-infix instead of\nleft: `a $ b $ c $ d x = a $ (b $ (c $ (d $ x))) = a (b (c (d x)))`\n","title":"($)","fixity":{"associativity":"infixr","precedence":0},"info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]},null]},null]}},"sourceSpan":{"start":[59,1],"name":"bower_components/purescript-prelude/src/Prelude.purs","end":[60,1]}},{"children":[],"comments":"`(&&)` is an alias for `conj`.\n","title":"(&&)","fixity":{"associativity":"infixr","precedence":3},"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[[[[["Prelude"],"BooleanAlgebra"],[{"tag":"TypeVar","contents":"a"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"a"}]}]}]},null]}},"sourceSpan":{"start":[821,1],"name":"bower_components/purescript-prelude/src/Prelude.purs","end":[822,1]}},{"children":[],"comments":"`(*)` is an alias for `mul`.\n","title":"(*)","fixity":{"associativity":"infixl","precedence":7},"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[[[[["Prelude"],"Semiring"],[{"tag":"TypeVar","contents":"a"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"a"}]}]}]},null]}},"sourceSpan":{"start":[472,1],"name":"bower_components/purescript-prelude/src/Prelude.purs","end":[473,1]}},{"children":[],"comments":"`(+)` is an alias for `add`.\n","title":"(+)","fixity":{"associativity":"infixl","precedence":6},"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[[[[["Prelude"],"Semiring"],[{"tag":"TypeVar","contents":"a"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"a"}]}]}]},null]}},"sourceSpan":{"start":[468,1],"name":"bower_components/purescript-prelude/src/Prelude.purs","end":[469,1]}},{"children":[],"comments":"`(++)` is an alternative alias for `append`.\n","title":"(++)","fixity":{"associativity":"infixr","precedence":5},"info":{"declType":"value","type":{"tag":"ForAll","contents":["s",{"tag":"ConstrainedType","contents":[[[[["Prelude"],"Semigroup"],[{"tag":"TypeVar","contents":"s"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"s"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"s"}]},{"tag":"TypeVar","contents":"s"}]}]}]},null]}},"sourceSpan":{"start":[401,1],"name":"bower_components/purescript-prelude/src/Prelude.purs","end":[402,1]}},{"children":[],"comments":"`(-)` is an alias for `sub`.\n","title":"(-)","fixity":{"associativity":"infixl","precedence":6},"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[[[[["Prelude"],"Ring"],[{"tag":"TypeVar","contents":"a"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"a"}]}]}]},null]}},"sourceSpan":{"start":[502,1],"name":"bower_components/purescript-prelude/src/Prelude.purs","end":[503,1]}},{"children":[],"comments":"`(/)` is an alias for `div`.\n","title":"(/)","fixity":{"associativity":"infixl","precedence":7},"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[[[[["Prelude"],"ModuloSemiring"],[{"tag":"TypeVar","contents":"a"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"a"}]}]}]},null]}},"sourceSpan":{"start":[538,1],"name":"bower_components/purescript-prelude/src/Prelude.purs","end":[539,1]}},{"children":[],"comments":"`(/=)` tests whether one value is _not equal_ to another. Shorthand for\n`not (x == y)`.\n","title":"(/=)","fixity":{"associativity":"infix","precedence":4},"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[[[[["Prelude"],"Eq"],[{"tag":"TypeVar","contents":"a"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}]}]},null]}},"sourceSpan":{"start":[589,1],"name":"bower_components/purescript-prelude/src/Prelude.purs","end":[590,1]}},{"children":[],"comments":"Test whether one value is _strictly less than_ another.\n","title":"(<)","fixity":{"associativity":"infixl","precedence":4},"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[[[[["Prelude"],"Ord"],[{"tag":"TypeVar","contents":"a"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}]}]},null]}},"sourceSpan":{"start":[683,1],"name":"bower_components/purescript-prelude/src/Prelude.purs","end":[684,1]}},{"children":[],"comments":"`(<#>)` is `(<$>)` with its arguments reversed. For example:\n\n```purescript\n[1, 2, 3] <#> \\n -> n * n\n```\n","title":"(<#>)","fixity":{"associativity":"infixl","precedence":1},"info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["f",{"tag":"ConstrainedType","contents":[[[[["Prelude"],"Functor"],[{"tag":"TypeVar","contents":"f"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"b"}]}]}]}]},null]},null]},null]}},"sourceSpan":{"start":[190,1],"name":"bower_components/purescript-prelude/src/Prelude.purs","end":[191,1]}},{"children":[],"comments":"`(<$>)` is an alias for `map`\n","title":"(<$>)","fixity":{"associativity":"infixl","precedence":4},"info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["f",{"tag":"ConstrainedType","contents":[[[[["Prelude"],"Functor"],[{"tag":"TypeVar","contents":"f"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"b"}]}]}]}]},null]},null]},null]}},"sourceSpan":{"start":[182,1],"name":"bower_components/purescript-prelude/src/Prelude.purs","end":[183,1]}},{"children":[],"comments":"`(<*>)` is an alias for `apply`.\n","title":"(<*>)","fixity":{"associativity":"infixl","precedence":4},"info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["f",{"tag":"ConstrainedType","contents":[[[[["Prelude"],"Apply"],[{"tag":"TypeVar","contents":"f"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"f"},{"tag":"TypeVar","contents":"b"}]}]}]}]},null]},null]},null]}},"sourceSpan":{"start":[242,1],"name":"bower_components/purescript-prelude/src/Prelude.purs","end":[243,1]}},{"children":[],"comments":"`(<<<)` is an alias for `compose`.\n","title":"(<<<)","fixity":{"associativity":"infixr","precedence":9},"info":{"declType":"value","type":{"tag":"ForAll","contents":["d",{"tag":"ForAll","contents":["c",{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[[[[["Prelude"],"Semigroupoid"],[{"tag":"TypeVar","contents":"a"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"a"},{"tag":"TypeVar","contents":"c"}]},{"tag":"TypeVar","contents":"d"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"a"},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeVar","contents":"c"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"a"},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeVar","contents":"d"}]}]}]}]},null]},null]},null]},null]}},"sourceSpan":{"start":[135,1],"name":"bower_components/purescript-prelude/src/Prelude.purs","end":[136,1]}},{"children":[],"comments":"Test whether one value is _non-strictly less than_ another.\n","title":"(<=)","fixity":{"associativity":"infixl","precedence":4},"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[[[[["Prelude"],"Ord"],[{"tag":"TypeVar","contents":"a"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}]}]},null]}},"sourceSpan":{"start":[695,1],"name":"bower_components/purescript-prelude/src/Prelude.purs","end":[696,1]}},{"children":[],"comments":"`(<>)` is an alias for `append`.\n","title":"(<>)","fixity":{"associativity":"infixr","precedence":5},"info":{"declType":"value","type":{"tag":"ForAll","contents":["s",{"tag":"ConstrainedType","contents":[[[[["Prelude"],"Semigroup"],[{"tag":"TypeVar","contents":"s"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"s"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"s"}]},{"tag":"TypeVar","contents":"s"}]}]}]},null]}},"sourceSpan":{"start":[397,1],"name":"bower_components/purescript-prelude/src/Prelude.purs","end":[398,1]}},{"children":[],"comments":"`(==)` is an alias for `eq`. Tests whether one value is equal to another.\n","title":"(==)","fixity":{"associativity":"infix","precedence":4},"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[[[[["Prelude"],"Eq"],[{"tag":"TypeVar","contents":"a"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}]}]},null]}},"sourceSpan":{"start":[584,1],"name":"bower_components/purescript-prelude/src/Prelude.purs","end":[585,1]}},{"children":[],"comments":"Test whether one value is _strictly greater than_ another.\n","title":"(>)","fixity":{"associativity":"infixl","precedence":4},"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[[[[["Prelude"],"Ord"],[{"tag":"TypeVar","contents":"a"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}]}]},null]}},"sourceSpan":{"start":[689,1],"name":"bower_components/purescript-prelude/src/Prelude.purs","end":[690,1]}},{"children":[],"comments":"Test whether one value is _non-strictly greater than_ another.\n","title":"(>=)","fixity":{"associativity":"infixl","precedence":4},"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[[[[["Prelude"],"Ord"],[{"tag":"TypeVar","contents":"a"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]}]}]},null]}},"sourceSpan":{"start":[701,1],"name":"bower_components/purescript-prelude/src/Prelude.purs","end":[702,1]}},{"children":[],"comments":"`(>>=)` is an alias for `bind`.\n","title":"(>>=)","fixity":{"associativity":"infixl","precedence":1},"info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["m",{"tag":"ConstrainedType","contents":[[[[["Prelude"],"Bind"],[{"tag":"TypeVar","contents":"m"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"m"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"m"},{"tag":"TypeVar","contents":"b"}]}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"m"},{"tag":"TypeVar","contents":"b"}]}]}]}]},null]},null]},null]}},"sourceSpan":{"start":[331,1],"name":"bower_components/purescript-prelude/src/Prelude.purs","end":[332,1]}},{"children":[],"comments":"Forwards composition, or `(<<<)` with its arguments reversed.\n","title":"(>>>)","fixity":{"associativity":"infixr","precedence":9},"info":{"declType":"value","type":{"tag":"ForAll","contents":["d",{"tag":"ForAll","contents":["c",{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[[[[["Prelude"],"Semigroupoid"],[{"tag":"TypeVar","contents":"a"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"a"},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeVar","contents":"c"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"a"},{"tag":"TypeVar","contents":"c"}]},{"tag":"TypeVar","contents":"d"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"a"},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeVar","contents":"d"}]}]}]}]},null]},null]},null]},null]}},"sourceSpan":{"start":[139,1],"name":"bower_components/purescript-prelude/src/Prelude.purs","end":[140,1]}},{"children":[],"comments":"`(||)` is an alias for `disj`.\n","title":"(||)","fixity":{"associativity":"infixr","precedence":2},"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[[[[["Prelude"],"BooleanAlgebra"],[{"tag":"TypeVar","contents":"a"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"a"}]}]}]},null]}},"sourceSpan":{"start":[825,1],"name":"bower_components/purescript-prelude/src/Prelude.purs","end":[826,1]}}]}],"name":"Data.TypedWire.Prelude","comments":null,"declarations":[{"children":[{"comments":null,"title":"AsBase64","info":{"arguments":[{"tag":"TypeConstructor","contents":[["Prim"],"String"]}],"declType":"dataConstructor"},"sourceSpan":null},{"comments":null,"title":"genericAsBase64","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Generic"],"Generic"]},{"tag":"TypeConstructor","contents":[["Data","TypedWire","Prelude"],"AsBase64"]}]}},"sourceSpan":{"start":[41,1],"name":"src/Data/TypedWire/Prelude.purs","end":[43,1]}},{"comments":null,"title":"showAsBase64","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prelude"],"Show"]},{"tag":"TypeConstructor","contents":[["Data","TypedWire","Prelude"],"AsBase64"]}]}},"sourceSpan":{"start":[43,1],"name":"src/Data/TypedWire/Prelude.purs","end":[46,1]}},{"comments":null,"title":"eqAsBase64","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prelude"],"Eq"]},{"tag":"TypeConstructor","contents":[["Data","TypedWire","Prelude"],"AsBase64"]}]}},"sourceSpan":{"start":[46,1],"name":"src/Data/TypedWire/Prelude.purs","end":[49,1]}},{"comments":null,"title":"decodeAsBase64","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Argonaut","Decode"],"DecodeJson"]},{"tag":"TypeConstructor","contents":[["Data","TypedWire","Prelude"],"AsBase64"]}]}},"sourceSpan":{"start":[52,1],"name":"src/Data/TypedWire/Prelude.purs","end":[56,1]}},{"comments":null,"title":"encodeAsBase64","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Argonaut","Encode"],"EncodeJson"]},{"tag":"TypeConstructor","contents":[["Data","TypedWire","Prelude"],"AsBase64"]}]}},"sourceSpan":{"start":[56,1],"name":"src/Data/TypedWire/Prelude.purs","end":[59,1]}}],"comments":null,"title":"AsBase64","fixity":null,"info":{"declType":"data","dataDeclType":"newtype","typeArguments":[]},"sourceSpan":{"start":[40,1],"name":"src/Data/TypedWire/Prelude.purs","end":[41,1]}},{"children":[{"comments":null,"title":"DateTime","info":{"arguments":[{"tag":"TypeConstructor","contents":[["Data","Date"],"Date"]}],"declType":"dataConstructor"},"sourceSpan":null},{"comments":null,"title":"showDateTime","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prelude"],"Show"]},{"tag":"TypeConstructor","contents":[["Data","TypedWire","Prelude"],"DateTime"]}]}},"sourceSpan":{"start":[61,1],"name":"src/Data/TypedWire/Prelude.purs","end":[64,1]}},{"comments":null,"title":"eqDateTime","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prelude"],"Eq"]},{"tag":"TypeConstructor","contents":[["Data","TypedWire","Prelude"],"DateTime"]}]}},"sourceSpan":{"start":[64,1],"name":"src/Data/TypedWire/Prelude.purs","end":[67,1]}},{"comments":null,"title":"decodeDateTime","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Argonaut","Decode"],"DecodeJson"]},{"tag":"TypeConstructor","contents":[["Data","TypedWire","Prelude"],"DateTime"]}]}},"sourceSpan":{"start":[70,1],"name":"src/Data/TypedWire/Prelude.purs","end":[77,1]}},{"comments":null,"title":"encodeDateTime","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Argonaut","Encode"],"EncodeJson"]},{"tag":"TypeConstructor","contents":[["Data","TypedWire","Prelude"],"DateTime"]}]}},"sourceSpan":{"start":[77,1],"name":"src/Data/TypedWire/Prelude.purs","end":[80,1]}}],"comments":null,"title":"DateTime","fixity":null,"info":{"declType":"data","dataDeclType":"newtype","typeArguments":[]},"sourceSpan":{"start":[59,1],"name":"src/Data/TypedWire/Prelude.purs","end":[61,1]}},{"children":[{"comments":null,"title":"Day","info":{"arguments":[{"tag":"TypeConstructor","contents":[["Data","Date"],"Date"]}],"declType":"dataConstructor"},"sourceSpan":null},{"comments":null,"title":"showDay","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prelude"],"Show"]},{"tag":"TypeConstructor","contents":[["Data","TypedWire","Prelude"],"Day"]}]}},"sourceSpan":{"start":[82,1],"name":"src/Data/TypedWire/Prelude.purs","end":[85,1]}},{"comments":null,"title":"eqDay","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prelude"],"Eq"]},{"tag":"TypeConstructor","contents":[["Data","TypedWire","Prelude"],"Day"]}]}},"sourceSpan":{"start":[85,1],"name":"src/Data/TypedWire/Prelude.purs","end":[88,1]}},{"comments":null,"title":"decodeDay","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Argonaut","Decode"],"DecodeJson"]},{"tag":"TypeConstructor","contents":[["Data","TypedWire","Prelude"],"Day"]}]}},"sourceSpan":{"start":[146,1],"name":"src/Data/TypedWire/Prelude.purs","end":[153,1]}},{"comments":null,"title":"encodeDay","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Argonaut","Encode"],"EncodeJson"]},{"tag":"TypeConstructor","contents":[["Data","TypedWire","Prelude"],"Day"]}]}},"sourceSpan":{"start":[153,1],"name":"src/Data/TypedWire/Prelude.purs","end":[156,1]}}],"comments":null,"title":"Day","fixity":null,"info":{"declType":"data","dataDeclType":"newtype","typeArguments":[]},"sourceSpan":{"start":[80,1],"name":"src/Data/TypedWire/Prelude.purs","end":[82,1]}},{"children":[{"comments":null,"title":"TimeOfDay","info":{"arguments":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Object"]},{"tag":"RCons","contents":["hour",{"tag":"TypeConstructor","contents":[["Data","Time"],"HourOfDay"]},{"tag":"RCons","contents":["minute",{"tag":"TypeConstructor","contents":[["Data","Time"],"MinuteOfHour"]},{"tag":"RCons","contents":["second",{"tag":"TypeConstructor","contents":[["Data","Time"],"SecondOfMinute"]},{"tag":"REmpty","contents":[]}]}]}]}]}],"declType":"dataConstructor"},"sourceSpan":null},{"comments":null,"title":"eqTimeOfDay","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prelude"],"Eq"]},{"tag":"TypeConstructor","contents":[["Data","TypedWire","Prelude"],"TimeOfDay"]}]}},"sourceSpan":{"start":[163,1],"name":"src/Data/TypedWire/Prelude.purs","end":[167,1]}},{"comments":null,"title":"showTimeOfDay","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prelude"],"Show"]},{"tag":"TypeConstructor","contents":[["Data","TypedWire","Prelude"],"TimeOfDay"]}]}},"sourceSpan":{"start":[167,1],"name":"src/Data/TypedWire/Prelude.purs","end":[170,1]}},{"comments":null,"title":"decodeTimeOfDay","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Argonaut","Decode"],"DecodeJson"]},{"tag":"TypeConstructor","contents":[["Data","TypedWire","Prelude"],"TimeOfDay"]}]}},"sourceSpan":{"start":[189,1],"name":"src/Data/TypedWire/Prelude.purs","end":[196,1]}},{"comments":null,"title":"encodeTimeOfDay","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Argonaut","Encode"],"EncodeJson"]},{"tag":"TypeConstructor","contents":[["Data","TypedWire","Prelude"],"TimeOfDay"]}]}},"sourceSpan":{"start":[196,1],"name":"src/Data/TypedWire/Prelude.purs","end":[199,1]}}],"comments":null,"title":"TimeOfDay","fixity":null,"info":{"declType":"data","dataDeclType":"newtype","typeArguments":[]},"sourceSpan":{"start":[156,1],"name":"src/Data/TypedWire/Prelude.purs","end":[163,1]}},{"children":[],"comments":null,"title":"(.??)","fixity":{"associativity":"infixl","precedence":-1},"info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ConstrainedType","contents":[[[[["Data","Argonaut","Decode"],"DecodeJson"],[{"tag":"TypeVar","contents":"a"}]]],{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","Argonaut","Core"],"JObject"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Either"],"Either"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeVar","contents":"a"}]}]}]}]}]},null]}},"sourceSpan":{"start":[199,1],"name":"src/Data/TypedWire/Prelude.purs","end":[200,1]}},{"children":[],"comments":null,"title":"eatBool","fixity":null,"info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Boolean"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Either"],"Either"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeConstructor","contents":[["Prelude"],"Unit"]}]}]}},"sourceSpan":{"start":[205,1],"name":"src/Data/TypedWire/Prelude.purs","end":[206,1]}}]}],"resolvedDependencies":{"purescript-coproducts":"0.4.0","purescript-proxy":"0.1.0","purescript-maps":"0.5.4","purescript-control":"0.3.2","purescript-either":"0.2.3","purescript-profunctor":"0.3.2","purescript-arrays":"0.4.4","purescript-maybe":"0.3.5","purescript-argonaut":"0.12.0","purescript-profunctor-lenses":"0.3.5","purescript-unfoldable":"0.4.1","purescript-invariant":"0.3.0","purescript-argonaut-traversals":"0.7.0","purescript-argonaut-core":"0.2.3","purescript-lazy":"0.4.0","purescript-monoid":"0.3.2","purescript-foldable-traversable":"0.4.2","purescript-tailrec":"0.3.1","purescript-functors":"0.1.0","purescript-prelude":"0.1.4","purescript-st":"0.1.1","purescript-bifunctors":"0.4.0","purescript-contravariant":"0.2.3","purescript-generics":"0.7.2","purescript-unsafe-coerce":"0.1.0","purescript-integers":"0.2.1","purescript-argonaut-codecs":"0.6.1","purescript-eff":"0.1.2","purescript-const":"0.5.0","purescript-globals":"0.2.2","purescript-math":"0.2.0","purescript-enums":"0.7.0","purescript-tuples":"0.4.0","purescript-strings":"0.7.1","purescript-identity":"0.4.1","purescript-sets":"0.5.7","purescript-lists":"0.7.9","purescript-datetime":"0.9.1","purescript-functions":"0.1.0"},"bookmarks":[{"package":null,"item":["Data.TypedWire.Api","ApiMethod"]},{"package":null,"item":["Data.TypedWire.Api","ApiHeader"]},{"package":null,"item":["Data.TypedWire.Api","ApiRequest"]},{"package":null,"item":["Data.TypedWire.Api","ApiResponse"]},{"package":null,"item":["Data.TypedWire.Api","ApiCall"]},{"package":null,"item":["Data.TypedWire.Api","PathPiece"]},{"package":null,"item":["Data.TypedWire.Api","stringPathPiece"]},{"package":null,"item":["Data.TypedWire.Api","intPathPiece"]},{"package":null,"item":["Data.TypedWire.Api","numberPathPiece"]},{"package":null,"item":["Data.TypedWire.Api","boolPathPiece"]},{"package":null,"item":["Data.TypedWire.Prelude","AsBase64"]},{"package":null,"item":["Data.TypedWire.Prelude","genericAsBase64"]},{"package":null,"item":["Data.TypedWire.Prelude","showAsBase64"]},{"package":null,"item":["Data.TypedWire.Prelude","eqAsBase64"]},{"package":null,"item":["Data.TypedWire.Prelude","decodeAsBase64"]},{"package":null,"item":["Data.TypedWire.Prelude","encodeAsBase64"]},{"package":null,"item":["Data.TypedWire.Prelude","DateTime"]},{"package":null,"item":["Data.TypedWire.Prelude","showDateTime"]},{"package":null,"item":["Data.TypedWire.Prelude","eqDateTime"]},{"package":null,"item":["Data.TypedWire.Prelude","decodeDateTime"]},{"package":null,"item":["Data.TypedWire.Prelude","encodeDateTime"]},{"package":null,"item":["Data.TypedWire.Prelude","Day"]},{"package":null,"item":["Data.TypedWire.Prelude","showDay"]},{"package":null,"item":["Data.TypedWire.Prelude","eqDay"]},{"package":null,"item":["Data.TypedWire.Prelude","decodeDay"]},{"package":null,"item":["Data.TypedWire.Prelude","encodeDay"]},{"package":null,"item":["Data.TypedWire.Prelude","TimeOfDay"]},{"package":null,"item":["Data.TypedWire.Prelude","eqTimeOfDay"]},{"package":null,"item":["Data.TypedWire.Prelude","showTimeOfDay"]},{"package":null,"item":["Data.TypedWire.Prelude","decodeTimeOfDay"]},{"package":null,"item":["Data.TypedWire.Prelude","encodeTimeOfDay"]},{"package":null,"item":["Data.TypedWire.Prelude","(.??)"]},{"package":null,"item":["Data.TypedWire.Prelude","eatBool"]},{"package":"purescript-lists","item":["Data.List.ZipList","ZipList"]},{"package":"purescript-lists","item":["Data.List.ZipList","runZipList"]},{"package":"purescript-lists","item":["Data.List.ZipList","showZipList"]},{"package":"purescript-lists","item":["Data.List.ZipList","eqZipList"]},{"package":"purescript-lists","item":["Data.List.ZipList","ordZipList"]},{"package":"purescript-lists","item":["Data.List.ZipList","semigroupZipList"]},{"package":"purescript-lists","item":["Data.List.ZipList","monoidZipList"]},{"package":"purescript-lists","item":["Data.List.ZipList","foldableZipList"]},{"package":"purescript-lists","item":["Data.List.ZipList","traversableZipList"]},{"package":"purescript-lists","item":["Data.List.ZipList","functorZipList"]},{"package":"purescript-lists","item":["Data.List.ZipList","applyZipList"]},{"package":"purescript-lists","item":["Data.List.ZipList","applicativeZipList"]},{"package":"purescript-lists","item":["Data.List.ZipList","altZipList"]},{"package":"purescript-lists","item":["Data.List.ZipList","plusZipList"]},{"package":"purescript-lists","item":["Data.List.ZipList","alternativeZipList"]},{"package":"purescript-lists","item":["Data.List.Lazy","List"]},{"package":"purescript-lists","item":["Data.List.Lazy","runList"]},{"package":"purescript-lists","item":["Data.List.Lazy","toUnfoldable"]},{"package":"purescript-lists","item":["Data.List.Lazy","fromFoldable"]},{"package":"purescript-lists","item":["Data.List.Lazy","Step"]},{"package":"purescript-lists","item":["Data.List.Lazy","step"]},{"package":"purescript-lists","item":["Data.List.Lazy","nil"]},{"package":"purescript-lists","item":["Data.List.Lazy","singleton"]},{"package":"purescript-lists","item":["Data.List.Lazy","(..)"]},{"package":"purescript-lists","item":["Data.List.Lazy","range"]},{"package":"purescript-lists","item":["Data.List.Lazy","repeat"]},{"package":"purescript-lists","item":["Data.List.Lazy","iterate"]},{"package":"purescript-lists","item":["Data.List.Lazy","cycle"]},{"package":"purescript-lists","item":["Data.List.Lazy","null"]},{"package":"purescript-lists","item":["Data.List.Lazy","length"]},{"package":"purescript-lists","item":["Data.List.Lazy","cons"]},{"package":"purescript-lists","item":["Data.List.Lazy","(:)"]},{"package":"purescript-lists","item":["Data.List.Lazy","(:)"]},{"package":"purescript-lists","item":["Data.List.Lazy","insert"]},{"package":"purescript-lists","item":["Data.List.Lazy","insertBy"]},{"package":"purescript-lists","item":["Data.List.Lazy","head"]},{"package":"purescript-lists","item":["Data.List.Lazy","last"]},{"package":"purescript-lists","item":["Data.List.Lazy","tail"]},{"package":"purescript-lists","item":["Data.List.Lazy","init"]},{"package":"purescript-lists","item":["Data.List.Lazy","uncons"]},{"package":"purescript-lists","item":["Data.List.Lazy","index"]},{"package":"purescript-lists","item":["Data.List.Lazy","(!!)"]},{"package":"purescript-lists","item":["Data.List.Lazy","(!!)"]},{"package":"purescript-lists","item":["Data.List.Lazy","insertAt"]},{"package":"purescript-lists","item":["Data.List.Lazy","deleteAt"]},{"package":"purescript-lists","item":["Data.List.Lazy","updateAt"]},{"package":"purescript-lists","item":["Data.List.Lazy","modifyAt"]},{"package":"purescript-lists","item":["Data.List.Lazy","alterAt"]},{"package":"purescript-lists","item":["Data.List.Lazy","reverse"]},{"package":"purescript-lists","item":["Data.List.Lazy","concat"]},{"package":"purescript-lists","item":["Data.List.Lazy","concatMap"]},{"package":"purescript-lists","item":["Data.List.Lazy","filter"]},{"package":"purescript-lists","item":["Data.List.Lazy","mapMaybe"]},{"package":"purescript-lists","item":["Data.List.Lazy","catMaybes"]},{"package":"purescript-lists","item":["Data.List.Lazy","take"]},{"package":"purescript-lists","item":["Data.List.Lazy","takeWhile"]},{"package":"purescript-lists","item":["Data.List.Lazy","drop"]},{"package":"purescript-lists","item":["Data.List.Lazy","dropWhile"]},{"package":"purescript-lists","item":["Data.List.Lazy","span"]},{"package":"purescript-lists","item":["Data.List.Lazy","group"]},{"package":"purescript-lists","item":["Data.List.Lazy","groupBy"]},{"package":"purescript-lists","item":["Data.List.Lazy","nub"]},{"package":"purescript-lists","item":["Data.List.Lazy","nubBy"]},{"package":"purescript-lists","item":["Data.List.Lazy","union"]},{"package":"purescript-lists","item":["Data.List.Lazy","unionBy"]},{"package":"purescript-lists","item":["Data.List.Lazy","delete"]},{"package":"purescript-lists","item":["Data.List.Lazy","deleteBy"]},{"package":"purescript-lists","item":["Data.List.Lazy","(\\\\)"]},{"package":"purescript-lists","item":["Data.List.Lazy","(\\\\)"]},{"package":"purescript-lists","item":["Data.List.Lazy","intersect"]},{"package":"purescript-lists","item":["Data.List.Lazy","intersectBy"]},{"package":"purescript-lists","item":["Data.List.Lazy","zipWith"]},{"package":"purescript-lists","item":["Data.List.Lazy","zip"]},{"package":"purescript-lists","item":["Data.List.Lazy","toList"]},{"package":"purescript-lists","item":["Data.List.Lazy","fromList"]},{"package":"purescript-lists","item":["Data.List.Lazy","showList"]},{"package":"purescript-lists","item":["Data.List.Lazy","eqList"]},{"package":"purescript-lists","item":["Data.List.Lazy","ordList"]},{"package":"purescript-lists","item":["Data.List.Lazy","lazyList"]},{"package":"purescript-lists","item":["Data.List.Lazy","semigroupList"]},{"package":"purescript-lists","item":["Data.List.Lazy","monoidList"]},{"package":"purescript-lists","item":["Data.List.Lazy","functorList"]},{"package":"purescript-lists","item":["Data.List.Lazy","foldableList"]},{"package":"purescript-lists","item":["Data.List.Lazy","unfoldableList"]},{"package":"purescript-lists","item":["Data.List.Lazy","traversableList"]},{"package":"purescript-lists","item":["Data.List.Lazy","applyList"]},{"package":"purescript-lists","item":["Data.List.Lazy","applicativeList"]},{"package":"purescript-lists","item":["Data.List.Lazy","bindList"]},{"package":"purescript-lists","item":["Data.List.Lazy","monadList"]},{"package":"purescript-lists","item":["Data.List.Lazy","altList"]},{"package":"purescript-lists","item":["Data.List.Lazy","plusList"]},{"package":"purescript-lists","item":["Data.List.Lazy","alternativeList"]},{"package":"purescript-lists","item":["Data.List.Lazy","monadPlusList"]},{"package":"purescript-maps","item":["Data.StrMap.Unsafe","unsafeIndex"]},{"package":"purescript-maps","item":["Data.StrMap.ST.Unsafe","unsafeGet"]},{"package":"purescript-profunctor-lenses","item":["Data.Lens.At","At"]},{"package":"purescript-profunctor-lenses","item":["Data.Lens.At","atIdentity"]},{"package":"purescript-profunctor-lenses","item":["Data.Lens.At","atMaybe"]},{"package":"purescript-profunctor-lenses","item":["Data.Lens.At","atSet"]},{"package":"purescript-profunctor-lenses","item":["Data.Lens.At","atMap"]},{"package":"purescript-profunctor-lenses","item":["Data.Lens.At","atStrMap"]},{"package":"purescript-profunctor-lenses","item":["Data.Lens.Index","Index"]},{"package":"purescript-profunctor-lenses","item":["Data.Lens.Index","indexArr"]},{"package":"purescript-profunctor-lenses","item":["Data.Lens.Index","indexMaybe"]},{"package":"purescript-profunctor-lenses","item":["Data.Lens.Index","indexIdentity"]},{"package":"purescript-profunctor-lenses","item":["Data.Lens.Index","indexArray"]},{"package":"purescript-profunctor-lenses","item":["Data.Lens.Index","indexSet"]},{"package":"purescript-profunctor-lenses","item":["Data.Lens.Index","indexMap"]},{"package":"purescript-profunctor-lenses","item":["Data.Lens.Index","indexStrMap"]},{"package":"purescript-argonaut-traversals","item":["Data.Argonaut.JCursor","JCursor"]},{"package":"purescript-argonaut-traversals","item":["Data.Argonaut.JCursor","JsonPrim"]},{"package":"purescript-argonaut-traversals","item":["Data.Argonaut.JCursor","runJsonPrim"]},{"package":"purescript-argonaut-traversals","item":["Data.Argonaut.JCursor","exactNull"]},{"package":"purescript-argonaut-traversals","item":["Data.Argonaut.JCursor","primNull"]},{"package":"purescript-argonaut-traversals","item":["Data.Argonaut.JCursor","primBool"]},{"package":"purescript-argonaut-traversals","item":["Data.Argonaut.JCursor","primNum"]},{"package":"purescript-argonaut-traversals","item":["Data.Argonaut.JCursor","primStr"]},{"package":"purescript-argonaut-traversals","item":["Data.Argonaut.JCursor","primToJson"]},{"package":"purescript-argonaut-traversals","item":["Data.Argonaut.JCursor","insideOut"]},{"package":"purescript-argonaut-traversals","item":["Data.Argonaut.JCursor","downField"]},{"package":"purescript-argonaut-traversals","item":["Data.Argonaut.JCursor","downIndex"]},{"package":"purescript-argonaut-traversals","item":["Data.Argonaut.JCursor","cursorGet"]},{"package":"purescript-argonaut-traversals","item":["Data.Argonaut.JCursor","inferEmpty"]},{"package":"purescript-argonaut-traversals","item":["Data.Argonaut.JCursor","cursorSet"]},{"package":"purescript-argonaut-traversals","item":["Data.Argonaut.JCursor","toPrims"]},{"package":"purescript-argonaut-traversals","item":["Data.Argonaut.JCursor","fromPrims"]},{"package":"purescript-argonaut-traversals","item":["Data.Argonaut.JCursor","showJCursor"]},{"package":"purescript-argonaut-traversals","item":["Data.Argonaut.JCursor","showJsonPrim"]},{"package":"purescript-argonaut-traversals","item":["Data.Argonaut.JCursor","eqJCursor"]},{"package":"purescript-argonaut-traversals","item":["Data.Argonaut.JCursor","ordJCursor"]},{"package":"purescript-argonaut-traversals","item":["Data.Argonaut.JCursor","semigroupJCursor"]},{"package":"purescript-argonaut-traversals","item":["Data.Argonaut.JCursor","monoidJCursor"]},{"package":"purescript-argonaut-traversals","item":["Data.Argonaut.JCursor","encodeJsonJCursor"]},{"package":"purescript-argonaut-traversals","item":["Data.Argonaut.JCursor","fail"]},{"package":"purescript-argonaut-traversals","item":["Data.Argonaut.JCursor","decodeJsonJCursor"]},{"package":"purescript-argonaut-codecs","item":["Data.Argonaut.Combinators","(:=)"]},{"package":"purescript-argonaut-codecs","item":["Data.Argonaut.Combinators","(.?)"]},{"package":"purescript-argonaut-codecs","item":["Data.Argonaut.Combinators","(~>)"]},{"package":"purescript-argonaut-codecs","item":["Data.Argonaut.Combinators","(?>>=)"]},{"package":"purescript-argonaut-codecs","item":["Data.Argonaut.Combinators","(:=)"]},{"package":"purescript-argonaut-codecs","item":["Data.Argonaut.Combinators","(~>)"]},{"package":"purescript-argonaut-codecs","item":["Data.Argonaut.Combinators","(?>>=)"]},{"package":"purescript-argonaut-codecs","item":["Data.Argonaut.Combinators","(.?)"]},{"package":"purescript-argonaut-codecs","item":["Data.Argonaut.Encode","EncodeJson"]},{"package":"purescript-argonaut-codecs","item":["Data.Argonaut.Encode","gEncodeJson"]},{"package":"purescript-argonaut-codecs","item":["Data.Argonaut.Encode","gEncodeJson'"]},{"package":"purescript-argonaut-codecs","item":["Data.Argonaut.Encode","encodeJsonMaybe"]},{"package":"purescript-argonaut-codecs","item":["Data.Argonaut.Encode","encodeJsonTuple"]},{"package":"purescript-argonaut-codecs","item":["Data.Argonaut.Encode","encodeJsonEither"]},{"package":"purescript-argonaut-codecs","item":["Data.Argonaut.Encode","encodeJsonUnit"]},{"package":"purescript-argonaut-codecs","item":["Data.Argonaut.Encode","encodeJsonJBoolean"]},{"package":"purescript-argonaut-codecs","item":["Data.Argonaut.Encode","encodeJsonJNumber"]},{"package":"purescript-argonaut-codecs","item":["Data.Argonaut.Encode","encodeJsonInt"]},{"package":"purescript-argonaut-codecs","item":["Data.Argonaut.Encode","encodeJsonJString"]},{"package":"purescript-argonaut-codecs","item":["Data.Argonaut.Encode","encodeJsonJson"]},{"package":"purescript-argonaut-codecs","item":["Data.Argonaut.Encode","encodeJsonChar"]},{"package":"purescript-argonaut-codecs","item":["Data.Argonaut.Encode","encodeJsonArray"]},{"package":"purescript-argonaut-codecs","item":["Data.Argonaut.Encode","encodeJsonList"]},{"package":"purescript-argonaut-codecs","item":["Data.Argonaut.Encode","encodeStrMap"]},{"package":"purescript-argonaut-codecs","item":["Data.Argonaut.Encode","encodeMap"]},{"package":"purescript-argonaut-codecs","item":["Data.Argonaut.Decode","DecodeJson"]},{"package":"purescript-argonaut-codecs","item":["Data.Argonaut.Decode","gDecodeJson"]},{"package":"purescript-argonaut-codecs","item":["Data.Argonaut.Decode","gDecodeJson'"]},{"package":"purescript-argonaut-codecs","item":["Data.Argonaut.Decode","decodeJsonMaybe"]},{"package":"purescript-argonaut-codecs","item":["Data.Argonaut.Decode","decodeJsonTuple"]},{"package":"purescript-argonaut-codecs","item":["Data.Argonaut.Decode","decodeJsonEither"]},{"package":"purescript-argonaut-codecs","item":["Data.Argonaut.Decode","decodeJsonNull"]},{"package":"purescript-argonaut-codecs","item":["Data.Argonaut.Decode","decodeJsonBoolean"]},{"package":"purescript-argonaut-codecs","item":["Data.Argonaut.Decode","decodeJsonNumber"]},{"package":"purescript-argonaut-codecs","item":["Data.Argonaut.Decode","decodeJsonInt"]},{"package":"purescript-argonaut-codecs","item":["Data.Argonaut.Decode","decodeJsonString"]},{"package":"purescript-argonaut-codecs","item":["Data.Argonaut.Decode","decodeJsonJson"]},{"package":"purescript-argonaut-codecs","item":["Data.Argonaut.Decode","decodeJsonChar"]},{"package":"purescript-argonaut-codecs","item":["Data.Argonaut.Decode","decodeStrMap"]},{"package":"purescript-argonaut-codecs","item":["Data.Argonaut.Decode","decodeArray"]},{"package":"purescript-argonaut-codecs","item":["Data.Argonaut.Decode","decodeList"]},{"package":"purescript-argonaut-codecs","item":["Data.Argonaut.Decode","decodeMap"]},{"package":"purescript-argonaut-codecs","item":["Data.Argonaut.Decode","decodeMaybe"]},{"package":"purescript-argonaut-traversals","item":["Data.Argonaut.Traversals","_JsonNull"]},{"package":"purescript-argonaut-traversals","item":["Data.Argonaut.Traversals","_JsonBoolean"]},{"package":"purescript-argonaut-traversals","item":["Data.Argonaut.Traversals","_JsonNumber"]},{"package":"purescript-argonaut-traversals","item":["Data.Argonaut.Traversals","_JsonString"]},{"package":"purescript-argonaut-traversals","item":["Data.Argonaut.Traversals","_JsonArray"]},{"package":"purescript-argonaut-traversals","item":["Data.Argonaut.Traversals","_JsonObject"]},{"package":"purescript-argonaut-traversals","item":["Data.Argonaut.Prisms","_Null"]},{"package":"purescript-argonaut-traversals","item":["Data.Argonaut.Prisms","_Boolean"]},{"package":"purescript-argonaut-traversals","item":["Data.Argonaut.Prisms","_Number"]},{"package":"purescript-argonaut-traversals","item":["Data.Argonaut.Prisms","_String"]},{"package":"purescript-argonaut-traversals","item":["Data.Argonaut.Prisms","_Array"]},{"package":"purescript-argonaut-traversals","item":["Data.Argonaut.Prisms","_Object"]},{"package":"purescript-argonaut-core","item":["Data.Argonaut.Printer","Printer"]},{"package":"purescript-argonaut-core","item":["Data.Argonaut.Printer","printerString"]},{"package":"purescript-argonaut-core","item":["Data.Argonaut.Parser","jsonParser"]},{"package":"purescript-argonaut-core","item":["Data.Argonaut.Core","JBoolean"]},{"package":"purescript-argonaut-core","item":["Data.Argonaut.Core","JNumber"]},{"package":"purescript-argonaut-core","item":["Data.Argonaut.Core","JString"]},{"package":"purescript-argonaut-core","item":["Data.Argonaut.Core","JAssoc"]},{"package":"purescript-argonaut-core","item":["Data.Argonaut.Core","JArray"]},{"package":"purescript-argonaut-core","item":["Data.Argonaut.Core","JObject"]},{"package":"purescript-argonaut-core","item":["Data.Argonaut.Core","JNull"]},{"package":"purescript-argonaut-core","item":["Data.Argonaut.Core","Json"]},{"package":"purescript-argonaut-core","item":["Data.Argonaut.Core","foldJson"]},{"package":"purescript-argonaut-core","item":["Data.Argonaut.Core","foldJsonNull"]},{"package":"purescript-argonaut-core","item":["Data.Argonaut.Core","foldJsonBoolean"]},{"package":"purescript-argonaut-core","item":["Data.Argonaut.Core","foldJsonNumber"]},{"package":"purescript-argonaut-core","item":["Data.Argonaut.Core","foldJsonString"]},{"package":"purescript-argonaut-core","item":["Data.Argonaut.Core","foldJsonArray"]},{"package":"purescript-argonaut-core","item":["Data.Argonaut.Core","foldJsonObject"]},{"package":"purescript-argonaut-core","item":["Data.Argonaut.Core","isNull"]},{"package":"purescript-argonaut-core","item":["Data.Argonaut.Core","isBoolean"]},{"package":"purescript-argonaut-core","item":["Data.Argonaut.Core","isNumber"]},{"package":"purescript-argonaut-core","item":["Data.Argonaut.Core","isString"]},{"package":"purescript-argonaut-core","item":["Data.Argonaut.Core","isArray"]},{"package":"purescript-argonaut-core","item":["Data.Argonaut.Core","isObject"]},{"package":"purescript-argonaut-core","item":["Data.Argonaut.Core","toNull"]},{"package":"purescript-argonaut-core","item":["Data.Argonaut.Core","toBoolean"]},{"package":"purescript-argonaut-core","item":["Data.Argonaut.Core","toNumber"]},{"package":"purescript-argonaut-core","item":["Data.Argonaut.Core","toString"]},{"package":"purescript-argonaut-core","item":["Data.Argonaut.Core","toArray"]},{"package":"purescript-argonaut-core","item":["Data.Argonaut.Core","toObject"]},{"package":"purescript-argonaut-core","item":["Data.Argonaut.Core","fromNull"]},{"package":"purescript-argonaut-core","item":["Data.Argonaut.Core","fromBoolean"]},{"package":"purescript-argonaut-core","item":["Data.Argonaut.Core","fromNumber"]},{"package":"purescript-argonaut-core","item":["Data.Argonaut.Core","fromString"]},{"package":"purescript-argonaut-core","item":["Data.Argonaut.Core","fromArray"]},{"package":"purescript-argonaut-core","item":["Data.Argonaut.Core","fromObject"]},{"package":"purescript-argonaut-core","item":["Data.Argonaut.Core","jsonNull"]},{"package":"purescript-argonaut-core","item":["Data.Argonaut.Core","jsonTrue"]},{"package":"purescript-argonaut-core","item":["Data.Argonaut.Core","jsonFalse"]},{"package":"purescript-argonaut-core","item":["Data.Argonaut.Core","jsonZero"]},{"package":"purescript-argonaut-core","item":["Data.Argonaut.Core","jsonEmptyArray"]},{"package":"purescript-argonaut-core","item":["Data.Argonaut.Core","jsonEmptyObject"]},{"package":"purescript-argonaut-core","item":["Data.Argonaut.Core","jsonSingletonArray"]},{"package":"purescript-argonaut-core","item":["Data.Argonaut.Core","jsonSingletonObject"]},{"package":"purescript-argonaut-core","item":["Data.Argonaut.Core","eqJNull"]},{"package":"purescript-argonaut-core","item":["Data.Argonaut.Core","ordJNull"]},{"package":"purescript-argonaut-core","item":["Data.Argonaut.Core","showJNull"]},{"package":"purescript-argonaut-core","item":["Data.Argonaut.Core","eqJson"]},{"package":"purescript-argonaut-core","item":["Data.Argonaut.Core","ordJson"]},{"package":"purescript-argonaut-core","item":["Data.Argonaut.Core","showJson"]},{"package":"purescript-maps","item":["Data.StrMap","StrMap"]},{"package":"purescript-maps","item":["Data.StrMap","thawST"]},{"package":"purescript-maps","item":["Data.StrMap","freezeST"]},{"package":"purescript-maps","item":["Data.StrMap","runST"]},{"package":"purescript-maps","item":["Data.StrMap","functorStrMap"]},{"package":"purescript-maps","item":["Data.StrMap","fold"]},{"package":"purescript-maps","item":["Data.StrMap","foldMap"]},{"package":"purescript-maps","item":["Data.StrMap","foldM"]},{"package":"purescript-maps","item":["Data.StrMap","foldableStrMap"]},{"package":"purescript-maps","item":["Data.StrMap","traversableStrMap"]},{"package":"purescript-maps","item":["Data.StrMap","foldMaybe"]},{"package":"purescript-maps","item":["Data.StrMap","all"]},{"package":"purescript-maps","item":["Data.StrMap","eqStrMap"]},{"package":"purescript-maps","item":["Data.StrMap","showStrMap"]},{"package":"purescript-maps","item":["Data.StrMap","empty"]},{"package":"purescript-maps","item":["Data.StrMap","isSubmap"]},{"package":"purescript-maps","item":["Data.StrMap","isEmpty"]},{"package":"purescript-maps","item":["Data.StrMap","size"]},{"package":"purescript-maps","item":["Data.StrMap","singleton"]},{"package":"purescript-maps","item":["Data.StrMap","lookup"]},{"package":"purescript-maps","item":["Data.StrMap","member"]},{"package":"purescript-maps","item":["Data.StrMap","insert"]},{"package":"purescript-maps","item":["Data.StrMap","delete"]},{"package":"purescript-maps","item":["Data.StrMap","alter"]},{"package":"purescript-maps","item":["Data.StrMap","update"]},{"package":"purescript-maps","item":["Data.StrMap","fromFoldable"]},{"package":"purescript-maps","item":["Data.StrMap","fromFoldableWith"]},{"package":"purescript-maps","item":["Data.StrMap","fromList"]},{"package":"purescript-maps","item":["Data.StrMap","fromListWith"]},{"package":"purescript-maps","item":["Data.StrMap","toList"]},{"package":"purescript-maps","item":["Data.StrMap","keys"]},{"package":"purescript-maps","item":["Data.StrMap","values"]},{"package":"purescript-maps","item":["Data.StrMap","union"]},{"package":"purescript-maps","item":["Data.StrMap","unions"]},{"package":"purescript-maps","item":["Data.StrMap","semigroupStrMap"]},{"package":"purescript-maps","item":["Data.StrMap","monoidStrMap"]},{"package":"purescript-sets","item":["Data.Set","Set"]},{"package":"purescript-sets","item":["Data.Set","eqSet"]},{"package":"purescript-sets","item":["Data.Set","showSet"]},{"package":"purescript-sets","item":["Data.Set","ordSet"]},{"package":"purescript-sets","item":["Data.Set","monoidSet"]},{"package":"purescript-sets","item":["Data.Set","semigroupSet"]},{"package":"purescript-sets","item":["Data.Set","foldableSet"]},{"package":"purescript-sets","item":["Data.Set","empty"]},{"package":"purescript-sets","item":["Data.Set","isEmpty"]},{"package":"purescript-sets","item":["Data.Set","singleton"]},{"package":"purescript-sets","item":["Data.Set","checkValid"]},{"package":"purescript-sets","item":["Data.Set","member"]},{"package":"purescript-sets","item":["Data.Set","insert"]},{"package":"purescript-sets","item":["Data.Set","delete"]},{"package":"purescript-sets","item":["Data.Set","fromFoldable"]},{"package":"purescript-sets","item":["Data.Set","toList"]},{"package":"purescript-sets","item":["Data.Set","fromList"]},{"package":"purescript-sets","item":["Data.Set","size"]},{"package":"purescript-sets","item":["Data.Set","union"]},{"package":"purescript-sets","item":["Data.Set","unions"]},{"package":"purescript-sets","item":["Data.Set","difference"]},{"package":"purescript-sets","item":["Data.Set","subset"]},{"package":"purescript-sets","item":["Data.Set","properSubset"]},{"package":"purescript-sets","item":["Data.Set","intersection"]},{"package":"purescript-maps","item":["Data.Map","Map"]},{"package":"purescript-maps","item":["Data.Map","eqMap"]},{"package":"purescript-maps","item":["Data.Map","showMap"]},{"package":"purescript-maps","item":["Data.Map","ordMap"]},{"package":"purescript-maps","item":["Data.Map","semigroupMap"]},{"package":"purescript-maps","item":["Data.Map","monoidMap"]},{"package":"purescript-maps","item":["Data.Map","functorMap"]},{"package":"purescript-maps","item":["Data.Map","foldableMap"]},{"package":"purescript-maps","item":["Data.Map","traversableMap"]},{"package":"purescript-maps","item":["Data.Map","showTree"]},{"package":"purescript-maps","item":["Data.Map","empty"]},{"package":"purescript-maps","item":["Data.Map","isEmpty"]},{"package":"purescript-maps","item":["Data.Map","singleton"]},{"package":"purescript-maps","item":["Data.Map","checkValid"]},{"package":"purescript-maps","item":["Data.Map","lookup"]},{"package":"purescript-maps","item":["Data.Map","member"]},{"package":"purescript-maps","item":["Data.Map","insert"]},{"package":"purescript-maps","item":["Data.Map","delete"]},{"package":"purescript-maps","item":["Data.Map","alter"]},{"package":"purescript-maps","item":["Data.Map","update"]},{"package":"purescript-maps","item":["Data.Map","fromFoldable"]},{"package":"purescript-maps","item":["Data.Map","fromFoldableWith"]},{"package":"purescript-maps","item":["Data.Map","toList"]},{"package":"purescript-maps","item":["Data.Map","fromList"]},{"package":"purescript-maps","item":["Data.Map","fromListWith"]},{"package":"purescript-maps","item":["Data.Map","keys"]},{"package":"purescript-maps","item":["Data.Map","values"]},{"package":"purescript-maps","item":["Data.Map","unionWith"]},{"package":"purescript-maps","item":["Data.Map","union"]},{"package":"purescript-maps","item":["Data.Map","unions"]},{"package":"purescript-maps","item":["Data.Map","size"]},{"package":"purescript-lists","item":["Data.List.Unsafe","head"]},{"package":"purescript-lists","item":["Data.List.Unsafe","tail"]},{"package":"purescript-lists","item":["Data.List.Unsafe","last"]},{"package":"purescript-lists","item":["Data.List.Unsafe","init"]},{"package":"purescript-profunctor-lenses","item":["Data.Lens.Fold","(^?)"]},{"package":"purescript-profunctor-lenses","item":["Data.Lens.Fold","(^..)"]},{"package":"purescript-profunctor-lenses","item":["Data.Lens.Fold","preview"]},{"package":"purescript-profunctor-lenses","item":["Data.Lens.Fold","(^?)"]},{"package":"purescript-profunctor-lenses","item":["Data.Lens.Fold","foldOf"]},{"package":"purescript-profunctor-lenses","item":["Data.Lens.Fold","foldMapOf"]},{"package":"purescript-profunctor-lenses","item":["Data.Lens.Fold","foldrOf"]},{"package":"purescript-profunctor-lenses","item":["Data.Lens.Fold","foldlOf"]},{"package":"purescript-profunctor-lenses","item":["Data.Lens.Fold","allOf"]},{"package":"purescript-profunctor-lenses","item":["Data.Lens.Fold","anyOf"]},{"package":"purescript-profunctor-lenses","item":["Data.Lens.Fold","andOf"]},{"package":"purescript-profunctor-lenses","item":["Data.Lens.Fold","orOf"]},{"package":"purescript-profunctor-lenses","item":["Data.Lens.Fold","elemOf"]},{"package":"purescript-profunctor-lenses","item":["Data.Lens.Fold","notElemOf"]},{"package":"purescript-profunctor-lenses","item":["Data.Lens.Fold","sumOf"]},{"package":"purescript-profunctor-lenses","item":["Data.Lens.Fold","productOf"]},{"package":"purescript-profunctor-lenses","item":["Data.Lens.Fold","lengthOf"]},{"package":"purescript-profunctor-lenses","item":["Data.Lens.Fold","firstOf"]},{"package":"purescript-profunctor-lenses","item":["Data.Lens.Fold","lastOf"]},{"package":"purescript-profunctor-lenses","item":["Data.Lens.Fold","maximumOf"]},{"package":"purescript-profunctor-lenses","item":["Data.Lens.Fold","minimumOf"]},{"package":"purescript-profunctor-lenses","item":["Data.Lens.Fold","findOf"]},{"package":"purescript-profunctor-lenses","item":["Data.Lens.Fold","sequenceOf_"]},{"package":"purescript-profunctor-lenses","item":["Data.Lens.Fold","toListOf"]},{"package":"purescript-profunctor-lenses","item":["Data.Lens.Fold","(^..)"]},{"package":"purescript-profunctor-lenses","item":["Data.Lens.Fold","has"]},{"package":"purescript-profunctor-lenses","item":["Data.Lens.Fold","hasn't"]},{"package":"purescript-profunctor-lenses","item":["Data.Lens.Fold","filtered"]},{"package":"purescript-profunctor-lenses","item":["Data.Lens.Fold","replicated"]},{"package":"purescript-lists","item":["Data.List","List"]},{"package":"purescript-lists","item":["Data.List","toUnfoldable"]},{"package":"purescript-lists","item":["Data.List","fromFoldable"]},{"package":"purescript-lists","item":["Data.List","singleton"]},{"package":"purescript-lists","item":["Data.List","(..)"]},{"package":"purescript-lists","item":["Data.List","(..)"]},{"package":"purescript-lists","item":["Data.List","range"]},{"package":"purescript-lists","item":["Data.List","replicate"]},{"package":"purescript-lists","item":["Data.List","replicateM"]},{"package":"purescript-lists","item":["Data.List","some"]},{"package":"purescript-lists","item":["Data.List","many"]},{"package":"purescript-lists","item":["Data.List","null"]},{"package":"purescript-lists","item":["Data.List","length"]},{"package":"purescript-lists","item":["Data.List","(:)"]},{"package":"purescript-lists","item":["Data.List","(:)"]},{"package":"purescript-lists","item":["Data.List","snoc"]},{"package":"purescript-lists","item":["Data.List","insert"]},{"package":"purescript-lists","item":["Data.List","insertBy"]},{"package":"purescript-lists","item":["Data.List","head"]},{"package":"purescript-lists","item":["Data.List","last"]},{"package":"purescript-lists","item":["Data.List","tail"]},{"package":"purescript-lists","item":["Data.List","init"]},{"package":"purescript-lists","item":["Data.List","uncons"]},{"package":"purescript-lists","item":["Data.List","index"]},{"package":"purescript-lists","item":["Data.List","(!!)"]},{"package":"purescript-lists","item":["Data.List","(!!)"]},{"package":"purescript-lists","item":["Data.List","elemIndex"]},{"package":"purescript-lists","item":["Data.List","elemLastIndex"]},{"package":"purescript-lists","item":["Data.List","findIndex"]},{"package":"purescript-lists","item":["Data.List","findLastIndex"]},{"package":"purescript-lists","item":["Data.List","insertAt"]},{"package":"purescript-lists","item":["Data.List","deleteAt"]},{"package":"purescript-lists","item":["Data.List","updateAt"]},{"package":"purescript-lists","item":["Data.List","modifyAt"]},{"package":"purescript-lists","item":["Data.List","alterAt"]},{"package":"purescript-lists","item":["Data.List","reverse"]},{"package":"purescript-lists","item":["Data.List","concat"]},{"package":"purescript-lists","item":["Data.List","concatMap"]},{"package":"purescript-lists","item":["Data.List","filter"]},{"package":"purescript-lists","item":["Data.List","filterM"]},{"package":"purescript-lists","item":["Data.List","mapMaybe"]},{"package":"purescript-lists","item":["Data.List","catMaybes"]},{"package":"purescript-lists","item":["Data.List","sort"]},{"package":"purescript-lists","item":["Data.List","sortBy"]},{"package":"purescript-lists","item":["Data.List","slice"]},{"package":"purescript-lists","item":["Data.List","take"]},{"package":"purescript-lists","item":["Data.List","takeWhile"]},{"package":"purescript-lists","item":["Data.List","drop"]},{"package":"purescript-lists","item":["Data.List","dropWhile"]},{"package":"purescript-lists","item":["Data.List","span"]},{"package":"purescript-lists","item":["Data.List","group"]},{"package":"purescript-lists","item":["Data.List","group'"]},{"package":"purescript-lists","item":["Data.List","groupBy"]},{"package":"purescript-lists","item":["Data.List","nub"]},{"package":"purescript-lists","item":["Data.List","nubBy"]},{"package":"purescript-lists","item":["Data.List","union"]},{"package":"purescript-lists","item":["Data.List","unionBy"]},{"package":"purescript-lists","item":["Data.List","delete"]},{"package":"purescript-lists","item":["Data.List","deleteBy"]},{"package":"purescript-lists","item":["Data.List","(\\\\)"]},{"package":"purescript-lists","item":["Data.List","(\\\\)"]},{"package":"purescript-lists","item":["Data.List","intersect"]},{"package":"purescript-lists","item":["Data.List","intersectBy"]},{"package":"purescript-lists","item":["Data.List","zipWith"]},{"package":"purescript-lists","item":["Data.List","zipWithA"]},{"package":"purescript-lists","item":["Data.List","zip"]},{"package":"purescript-lists","item":["Data.List","unzip"]},{"package":"purescript-lists","item":["Data.List","foldM"]},{"package":"purescript-lists","item":["Data.List","toList"]},{"package":"purescript-lists","item":["Data.List","fromList"]},{"package":"purescript-lists","item":["Data.List","showList"]},{"package":"purescript-lists","item":["Data.List","eqList"]},{"package":"purescript-lists","item":["Data.List","ordList"]},{"package":"purescript-lists","item":["Data.List","semigroupList"]},{"package":"purescript-lists","item":["Data.List","monoidList"]},{"package":"purescript-lists","item":["Data.List","functorList"]},{"package":"purescript-lists","item":["Data.List","foldableList"]},{"package":"purescript-lists","item":["Data.List","unfoldableList"]},{"package":"purescript-lists","item":["Data.List","traversableList"]},{"package":"purescript-lists","item":["Data.List","applyList"]},{"package":"purescript-lists","item":["Data.List","applicativeList"]},{"package":"purescript-lists","item":["Data.List","bindList"]},{"package":"purescript-lists","item":["Data.List","monadList"]},{"package":"purescript-lists","item":["Data.List","altList"]},{"package":"purescript-lists","item":["Data.List","plusList"]},{"package":"purescript-lists","item":["Data.List","alternativeList"]},{"package":"purescript-lists","item":["Data.List","monadPlusList"]},{"package":"purescript-datetime","item":["Data.Date.UTC","dateTime"]},{"package":"purescript-datetime","item":["Data.Date.UTC","date"]},{"package":"purescript-datetime","item":["Data.Date.UTC","year"]},{"package":"purescript-datetime","item":["Data.Date.UTC","month"]},{"package":"purescript-datetime","item":["Data.Date.UTC","dayOfMonth"]},{"package":"purescript-datetime","item":["Data.Date.UTC","dayOfWeek"]},{"package":"purescript-datetime","item":["Data.Date.UTC","hourOfDay"]},{"package":"purescript-datetime","item":["Data.Date.UTC","minuteOfHour"]},{"package":"purescript-datetime","item":["Data.Date.UTC","secondOfMinute"]},{"package":"purescript-datetime","item":["Data.Date.UTC","millisecondOfSecond"]},{"package":"purescript-datetime","item":["Data.Date.Locale","Locale"]},{"package":"purescript-datetime","item":["Data.Date.Locale","dateTime"]},{"package":"purescript-datetime","item":["Data.Date.Locale","date"]},{"package":"purescript-datetime","item":["Data.Date.Locale","year"]},{"package":"purescript-datetime","item":["Data.Date.Locale","month"]},{"package":"purescript-datetime","item":["Data.Date.Locale","dayOfMonth"]},{"package":"purescript-datetime","item":["Data.Date.Locale","dayOfWeek"]},{"package":"purescript-datetime","item":["Data.Date.Locale","hourOfDay"]},{"package":"purescript-datetime","item":["Data.Date.Locale","minuteOfHour"]},{"package":"purescript-datetime","item":["Data.Date.Locale","secondOfMinute"]},{"package":"purescript-datetime","item":["Data.Date.Locale","millisecondOfSecond"]},{"package":"purescript-datetime","item":["Data.Date.Locale","toLocaleString"]},{"package":"purescript-datetime","item":["Data.Date.Locale","toLocaleTimeString"]},{"package":"purescript-datetime","item":["Data.Date.Locale","toLocaleDateString"]},{"package":"purescript-datetime","item":["Data.Date","JSDate"]},{"package":"purescript-datetime","item":["Data.Date","Date"]},{"package":"purescript-datetime","item":["Data.Date","eqDate"]},{"package":"purescript-datetime","item":["Data.Date","ordDate"]},{"package":"purescript-datetime","item":["Data.Date","showDate"]},{"package":"purescript-datetime","item":["Data.Date","fromJSDate"]},{"package":"purescript-datetime","item":["Data.Date","toJSDate"]},{"package":"purescript-datetime","item":["Data.Date","fromEpochMilliseconds"]},{"package":"purescript-datetime","item":["Data.Date","toEpochMilliseconds"]},{"package":"purescript-datetime","item":["Data.Date","fromString"]},{"package":"purescript-datetime","item":["Data.Date","fromStringStrict"]},{"package":"purescript-datetime","item":["Data.Date","Now"]},{"package":"purescript-datetime","item":["Data.Date","now"]},{"package":"purescript-datetime","item":["Data.Date","nowEpochMilliseconds"]},{"package":"purescript-datetime","item":["Data.Date","LocaleOffset"]},{"package":"purescript-datetime","item":["Data.Date","timezoneOffset"]},{"package":"purescript-datetime","item":["Data.Date","Year"]},{"package":"purescript-datetime","item":["Data.Date","eqYear"]},{"package":"purescript-datetime","item":["Data.Date","ordYear"]},{"package":"purescript-datetime","item":["Data.Date","semiringYear"]},{"package":"purescript-datetime","item":["Data.Date","ringYear"]},{"package":"purescript-datetime","item":["Data.Date","showYear"]},{"package":"purescript-datetime","item":["Data.Date","Month"]},{"package":"purescript-datetime","item":["Data.Date","eqMonth"]},{"package":"purescript-datetime","item":["Data.Date","ordMonth"]},{"package":"purescript-datetime","item":["Data.Date","boundedMonth"]},{"package":"purescript-datetime","item":["Data.Date","boundedOrdMonth"]},{"package":"purescript-datetime","item":["Data.Date","showMonth"]},{"package":"purescript-datetime","item":["Data.Date","enumMonth"]},{"package":"purescript-datetime","item":["Data.Date","DayOfMonth"]},{"package":"purescript-datetime","item":["Data.Date","eqDayOfMonth"]},{"package":"purescript-datetime","item":["Data.Date","ordDayOfMonth"]},{"package":"purescript-datetime","item":["Data.Date","DayOfWeek"]},{"package":"purescript-datetime","item":["Data.Date","eqDayOfWeek"]},{"package":"purescript-datetime","item":["Data.Date","ordDayOfWeek"]},{"package":"purescript-datetime","item":["Data.Date","boundedDayOfWeek"]},{"package":"purescript-datetime","item":["Data.Date","boundedOrdDayOfWeek"]},{"package":"purescript-datetime","item":["Data.Date","showDayOfWeek"]},{"package":"purescript-datetime","item":["Data.Date","enumDayOfWeek"]},{"package":"purescript-enums","item":["Data.Enum","Cardinality"]},{"package":"purescript-enums","item":["Data.Enum","runCardinality"]},{"package":"purescript-enums","item":["Data.Enum","Enum"]},{"package":"purescript-enums","item":["Data.Enum","defaultSucc"]},{"package":"purescript-enums","item":["Data.Enum","defaultPred"]},{"package":"purescript-enums","item":["Data.Enum","defaultToEnum"]},{"package":"purescript-enums","item":["Data.Enum","defaultFromEnum"]},{"package":"purescript-enums","item":["Data.Enum","enumFromTo"]},{"package":"purescript-enums","item":["Data.Enum","enumFromThenTo"]},{"package":"purescript-enums","item":["Data.Enum","intFromTo"]},{"package":"purescript-enums","item":["Data.Enum","intStepFromTo"]},{"package":"purescript-enums","item":["Data.Enum","enumChar"]},{"package":"purescript-enums","item":["Data.Enum","enumMaybe"]},{"package":"purescript-enums","item":["Data.Enum","enumBoolean"]},{"package":"purescript-enums","item":["Data.Enum","enumTuple"]},{"package":"purescript-enums","item":["Data.Enum","enumEither"]},{"package":"purescript-unfoldable","item":["Data.Unfoldable","Unfoldable"]},{"package":"purescript-unfoldable","item":["Data.Unfoldable","unfoldableArray"]},{"package":"purescript-unfoldable","item":["Data.Unfoldable","replicate"]},{"package":"purescript-unfoldable","item":["Data.Unfoldable","replicateA"]},{"package":"purescript-unfoldable","item":["Data.Unfoldable","none"]},{"package":"purescript-unfoldable","item":["Data.Unfoldable","singleton"]},{"package":"purescript-tuples","item":["Data.Tuple.Nested","Tuple2"]},{"package":"purescript-tuples","item":["Data.Tuple.Nested","Tuple3"]},{"package":"purescript-tuples","item":["Data.Tuple.Nested","Tuple4"]},{"package":"purescript-tuples","item":["Data.Tuple.Nested","Tuple5"]},{"package":"purescript-tuples","item":["Data.Tuple.Nested","Tuple6"]},{"package":"purescript-tuples","item":["Data.Tuple.Nested","Tuple7"]},{"package":"purescript-tuples","item":["Data.Tuple.Nested","Tuple8"]},{"package":"purescript-tuples","item":["Data.Tuple.Nested","Tuple9"]},{"package":"purescript-tuples","item":["Data.Tuple.Nested","Tuple10"]},{"package":"purescript-tuples","item":["Data.Tuple.Nested","tuple2"]},{"package":"purescript-tuples","item":["Data.Tuple.Nested","tuple3"]},{"package":"purescript-tuples","item":["Data.Tuple.Nested","tuple4"]},{"package":"purescript-tuples","item":["Data.Tuple.Nested","tuple5"]},{"package":"purescript-tuples","item":["Data.Tuple.Nested","tuple6"]},{"package":"purescript-tuples","item":["Data.Tuple.Nested","tuple7"]},{"package":"purescript-tuples","item":["Data.Tuple.Nested","tuple8"]},{"package":"purescript-tuples","item":["Data.Tuple.Nested","tuple9"]},{"package":"purescript-tuples","item":["Data.Tuple.Nested","tuple10"]},{"package":"purescript-tuples","item":["Data.Tuple.Nested","uncurry2"]},{"package":"purescript-tuples","item":["Data.Tuple.Nested","curry2"]},{"package":"purescript-tuples","item":["Data.Tuple.Nested","uncurry3"]},{"package":"purescript-tuples","item":["Data.Tuple.Nested","curry3"]},{"package":"purescript-tuples","item":["Data.Tuple.Nested","uncurry4"]},{"package":"purescript-tuples","item":["Data.Tuple.Nested","curry4"]},{"package":"purescript-tuples","item":["Data.Tuple.Nested","uncurry5"]},{"package":"purescript-tuples","item":["Data.Tuple.Nested","curry5"]},{"package":"purescript-tuples","item":["Data.Tuple.Nested","uncurry6"]},{"package":"purescript-tuples","item":["Data.Tuple.Nested","curry6"]},{"package":"purescript-tuples","item":["Data.Tuple.Nested","uncurry7"]},{"package":"purescript-tuples","item":["Data.Tuple.Nested","curry7"]},{"package":"purescript-tuples","item":["Data.Tuple.Nested","uncurry8"]},{"package":"purescript-tuples","item":["Data.Tuple.Nested","curry8"]},{"package":"purescript-tuples","item":["Data.Tuple.Nested","uncurry9"]},{"package":"purescript-tuples","item":["Data.Tuple.Nested","curry9"]},{"package":"purescript-tuples","item":["Data.Tuple.Nested","uncurry10"]},{"package":"purescript-tuples","item":["Data.Tuple.Nested","curry10"]},{"package":"purescript-tuples","item":["Data.Tuple.Nested","(/\\)"]},{"package":"purescript-tuples","item":["Data.Tuple.Nested","(/\\)"]},{"package":"purescript-profunctor-lenses","item":["Data.Lens.Traversal","traversed"]},{"package":"purescript-profunctor-lenses","item":["Data.Lens.Traversal","traverseOf"]},{"package":"purescript-profunctor-lenses","item":["Data.Lens.Traversal","sequenceOf"]},{"package":"purescript-profunctor-lenses","item":["Data.Lens.Traversal","failover"]},{"package":"purescript-profunctor-lenses","item":["Data.Lens.Setter","(%~)"]},{"package":"purescript-profunctor-lenses","item":["Data.Lens.Setter","(.~)"]},{"package":"purescript-profunctor-lenses","item":["Data.Lens.Setter","(+~)"]},{"package":"purescript-profunctor-lenses","item":["Data.Lens.Setter","(-~)"]},{"package":"purescript-profunctor-lenses","item":["Data.Lens.Setter","(*~)"]},{"package":"purescript-profunctor-lenses","item":["Data.Lens.Setter","(//~)"]},{"package":"purescript-profunctor-lenses","item":["Data.Lens.Setter","(||~)"]},{"package":"purescript-profunctor-lenses","item":["Data.Lens.Setter","(&&~)"]},{"package":"purescript-profunctor-lenses","item":["Data.Lens.Setter","(<>~)"]},{"package":"purescript-profunctor-lenses","item":["Data.Lens.Setter","(++~)"]},{"package":"purescript-profunctor-lenses","item":["Data.Lens.Setter","(?~)"]},{"package":"purescript-profunctor-lenses","item":["Data.Lens.Setter","over"]},{"package":"purescript-profunctor-lenses","item":["Data.Lens.Setter","(%~)"]},{"package":"purescript-profunctor-lenses","item":["Data.Lens.Setter","set"]},{"package":"purescript-profunctor-lenses","item":["Data.Lens.Setter","(.~)"]},{"package":"purescript-profunctor-lenses","item":["Data.Lens.Setter","(+~)"]},{"package":"purescript-profunctor-lenses","item":["Data.Lens.Setter","(*~)"]},{"package":"purescript-profunctor-lenses","item":["Data.Lens.Setter","(-~)"]},{"package":"purescript-profunctor-lenses","item":["Data.Lens.Setter","(//~)"]},{"package":"purescript-profunctor-lenses","item":["Data.Lens.Setter","(||~)"]},{"package":"purescript-profunctor-lenses","item":["Data.Lens.Setter","(&&~)"]},{"package":"purescript-profunctor-lenses","item":["Data.Lens.Setter","(<>~)"]},{"package":"purescript-profunctor-lenses","item":["Data.Lens.Setter","(++~)"]},{"package":"purescript-profunctor-lenses","item":["Data.Lens.Setter","(?~)"]},{"package":"purescript-profunctor-lenses","item":["Data.Lens.Prism.Maybe","_Nothing"]},{"package":"purescript-profunctor-lenses","item":["Data.Lens.Prism.Maybe","_Just"]},{"package":"purescript-profunctor-lenses","item":["Data.Lens.Prism.Coproduct","_Left"]},{"package":"purescript-profunctor-lenses","item":["Data.Lens.Prism.Coproduct","_Right"]},{"package":"purescript-profunctor-lenses","item":["Data.Lens.Prism.Either","_Left"]},{"package":"purescript-profunctor-lenses","item":["Data.Lens.Prism.Either","_Right"]},{"package":"purescript-profunctor-lenses","item":["Data.Lens.Prism","prism"]},{"package":"purescript-profunctor-lenses","item":["Data.Lens.Prism","prism'"]},{"package":"purescript-profunctor-lenses","item":["Data.Lens.Prism","review"]},{"package":"purescript-profunctor-lenses","item":["Data.Lens.Prism","nearly"]},{"package":"purescript-profunctor-lenses","item":["Data.Lens.Prism","only"]},{"package":"purescript-profunctor-lenses","item":["Data.Lens.Prism","clonePrism"]},{"package":"purescript-profunctor-lenses","item":["Data.Lens.Prism","withPrism"]},{"package":"purescript-profunctor-lenses","item":["Data.Lens.Prism","matching"]},{"package":"purescript-profunctor-lenses","item":["Data.Lens.Prism","is"]},{"package":"purescript-profunctor-lenses","item":["Data.Lens.Prism","isn't"]},{"package":"purescript-profunctor-lenses","item":["Data.Lens.Lens.Void","devoid"]},{"package":"purescript-profunctor-lenses","item":["Data.Lens.Lens.Unit","united"]},{"package":"purescript-profunctor-lenses","item":["Data.Lens.Lens.Product","_1"]},{"package":"purescript-profunctor-lenses","item":["Data.Lens.Lens.Product","_2"]},{"package":"purescript-profunctor-lenses","item":["Data.Lens.Lens.Tuple","_1"]},{"package":"purescript-profunctor-lenses","item":["Data.Lens.Lens.Tuple","_2"]},{"package":"purescript-profunctor-lenses","item":["Data.Lens.Lens","lens'"]},{"package":"purescript-profunctor-lenses","item":["Data.Lens.Lens","lens"]},{"package":"purescript-profunctor-lenses","item":["Data.Lens.Lens","withLens"]},{"package":"purescript-profunctor-lenses","item":["Data.Lens.Lens","cloneLens"]},{"package":"purescript-profunctor-lenses","item":["Data.Lens.Iso.Product","_Product"]},{"package":"purescript-profunctor-lenses","item":["Data.Lens.Iso.Coproduct","_Coproduct"]},{"package":"purescript-profunctor-lenses","item":["Data.Lens.Iso","iso"]},{"package":"purescript-profunctor-lenses","item":["Data.Lens.Iso","withIso"]},{"package":"purescript-profunctor-lenses","item":["Data.Lens.Iso","cloneIso"]},{"package":"purescript-profunctor-lenses","item":["Data.Lens.Iso","au"]},{"package":"purescript-profunctor-lenses","item":["Data.Lens.Iso","auf"]},{"package":"purescript-profunctor-lenses","item":["Data.Lens.Iso","under"]},{"package":"purescript-profunctor-lenses","item":["Data.Lens.Iso","curried"]},{"package":"purescript-profunctor-lenses","item":["Data.Lens.Iso","uncurried"]},{"package":"purescript-profunctor-lenses","item":["Data.Lens.Iso","flipped"]},{"package":"purescript-profunctor-lenses","item":["Data.Lens.Getter","(^.)"]},{"package":"purescript-profunctor-lenses","item":["Data.Lens.Getter","view"]},{"package":"purescript-profunctor-lenses","item":["Data.Lens.Getter","(^.)"]},{"package":"purescript-profunctor-lenses","item":["Data.Lens.Getter","to"]},{"package":"purescript-profunctor-lenses","item":["Data.Lens.Types","Optic"]},{"package":"purescript-profunctor-lenses","item":["Data.Lens.Types","OpticP"]},{"package":"purescript-profunctor-lenses","item":["Data.Lens.Types","Iso"]},{"package":"purescript-profunctor-lenses","item":["Data.Lens.Types","IsoP"]},{"package":"purescript-profunctor-lenses","item":["Data.Lens.Types","AnIso"]},{"package":"purescript-profunctor-lenses","item":["Data.Lens.Types","AnIsoP"]},{"package":"purescript-profunctor-lenses","item":["Data.Lens.Types","Lens"]},{"package":"purescript-profunctor-lenses","item":["Data.Lens.Types","LensP"]},{"package":"purescript-profunctor-lenses","item":["Data.Lens.Types","ALens"]},{"package":"purescript-profunctor-lenses","item":["Data.Lens.Types","ALensP"]},{"package":"purescript-profunctor-lenses","item":["Data.Lens.Types","Prism"]},{"package":"purescript-profunctor-lenses","item":["Data.Lens.Types","PrismP"]},{"package":"purescript-profunctor-lenses","item":["Data.Lens.Types","APrism"]},{"package":"purescript-profunctor-lenses","item":["Data.Lens.Types","APrismP"]},{"package":"purescript-profunctor-lenses","item":["Data.Lens.Types","Traversal"]},{"package":"purescript-profunctor-lenses","item":["Data.Lens.Types","TraversalP"]},{"package":"purescript-profunctor-lenses","item":["Data.Lens.Types","Getter"]},{"package":"purescript-profunctor-lenses","item":["Data.Lens.Types","GetterP"]},{"package":"purescript-profunctor-lenses","item":["Data.Lens.Types","Setter"]},{"package":"purescript-profunctor-lenses","item":["Data.Lens.Types","SetterP"]},{"package":"purescript-profunctor-lenses","item":["Data.Lens.Types","Review"]},{"package":"purescript-profunctor-lenses","item":["Data.Lens.Types","ReviewP"]},{"package":"purescript-profunctor-lenses","item":["Data.Lens.Types","Fold"]},{"package":"purescript-profunctor-lenses","item":["Data.Lens.Types","FoldP"]},{"package":"purescript-profunctor-lenses","item":["Data.Lens.Internal.Wander","Wander"]},{"package":"purescript-profunctor-lenses","item":["Data.Lens.Internal.Wander","wanderFunction"]},{"package":"purescript-profunctor-lenses","item":["Data.Lens.Internal.Wander","wanderStar"]},{"package":"purescript-profunctor","item":["Data.Profunctor.Star","Star"]},{"package":"purescript-profunctor","item":["Data.Profunctor.Star","runStar"]},{"package":"purescript-profunctor","item":["Data.Profunctor.Star","profunctorStar"]},{"package":"purescript-profunctor","item":["Data.Profunctor.Star","strongStar"]},{"package":"purescript-profunctor","item":["Data.Profunctor.Star","choiceStar"]},{"package":"purescript-profunctor-lenses","item":["Data.Lens.Internal.Shop","Shop"]},{"package":"purescript-profunctor-lenses","item":["Data.Lens.Internal.Shop","profunctorShop"]},{"package":"purescript-profunctor-lenses","item":["Data.Lens.Internal.Shop","strongShop"]},{"package":"purescript-profunctor","item":["Data.Profunctor.Strong","Strong"]},{"package":"purescript-profunctor","item":["Data.Profunctor.Strong","strongFn"]},{"package":"purescript-profunctor","item":["Data.Profunctor.Strong","(***)"]},{"package":"purescript-profunctor","item":["Data.Profunctor.Strong","(&&&)"]},{"package":"purescript-profunctor","item":["Data.Profunctor.Strong","(***)"]},{"package":"purescript-profunctor","item":["Data.Profunctor.Strong","(&&&)"]},{"package":"purescript-profunctor","item":["Data.Profunctor.Costrong","Costrong"]},{"package":"purescript-generics","item":["Data.Generic","GenericSpine"]},{"package":"purescript-generics","item":["Data.Generic","DataConstructor"]},{"package":"purescript-generics","item":["Data.Generic","GenericSignature"]},{"package":"purescript-generics","item":["Data.Generic","showSignature"]},{"package":"purescript-generics","item":["Data.Generic","showGenericSignature"]},{"package":"purescript-generics","item":["Data.Generic","showDataConstructor"]},{"package":"purescript-generics","item":["Data.Generic","Generic"]},{"package":"purescript-generics","item":["Data.Generic","isValidSpine"]},{"package":"purescript-generics","item":["Data.Generic","genericNumber"]},{"package":"purescript-generics","item":["Data.Generic","genericInt"]},{"package":"purescript-generics","item":["Data.Generic","genericString"]},{"package":"purescript-generics","item":["Data.Generic","genericChar"]},{"package":"purescript-generics","item":["Data.Generic","genericBool"]},{"package":"purescript-generics","item":["Data.Generic","genericArray"]},{"package":"purescript-generics","item":["Data.Generic","genericTuple"]},{"package":"purescript-generics","item":["Data.Generic","genericMaybe"]},{"package":"purescript-generics","item":["Data.Generic","genericEither"]},{"package":"purescript-generics","item":["Data.Generic","gShow"]},{"package":"purescript-generics","item":["Data.Generic","eqGeneric"]},{"package":"purescript-generics","item":["Data.Generic","gEq"]},{"package":"purescript-generics","item":["Data.Generic","ordGeneric"]},{"package":"purescript-generics","item":["Data.Generic","gCompare"]},{"package":"purescript-functors","item":["Data.Functor.Product","Product"]},{"package":"purescript-functors","item":["Data.Functor.Product","runProduct"]},{"package":"purescript-functors","item":["Data.Functor.Product","product"]},{"package":"purescript-functors","item":["Data.Functor.Product","functorProduct"]},{"package":"purescript-functors","item":["Data.Functor.Product","foldableProduct"]},{"package":"purescript-functors","item":["Data.Functor.Product","traversableProduct"]},{"package":"purescript-functors","item":["Data.Functor.Product","applyProduct"]},{"package":"purescript-functors","item":["Data.Functor.Product","applicativeProduct"]},{"package":"purescript-functors","item":["Data.Functor.Product","bindProduct"]},{"package":"purescript-functors","item":["Data.Functor.Product","monadProduct"]},{"package":"purescript-contravariant","item":["Data.Functor.Contravariant.Divisible","Divide"]},{"package":"purescript-contravariant","item":["Data.Functor.Contravariant.Divisible","Divisible"]},{"package":"purescript-contravariant","item":["Data.Functor.Contravariant.Divisible","divideComparison"]},{"package":"purescript-contravariant","item":["Data.Functor.Contravariant.Divisible","divisibleComparison"]},{"package":"purescript-contravariant","item":["Data.Functor.Contravariant.Divisible","divideEquivalence"]},{"package":"purescript-contravariant","item":["Data.Functor.Contravariant.Divisible","divisibleEquivalence"]},{"package":"purescript-contravariant","item":["Data.Functor.Contravariant.Divisible","dividePredicate"]},{"package":"purescript-contravariant","item":["Data.Functor.Contravariant.Divisible","divisiblePredicate"]},{"package":"purescript-contravariant","item":["Data.Functor.Contravariant.Divisible","divideOp"]},{"package":"purescript-contravariant","item":["Data.Functor.Contravariant.Divisible","divisibleOp"]},{"package":"purescript-contravariant","item":["Data.Functor.Contravariant.Divisible","divided"]},{"package":"purescript-contravariant","item":["Data.Functor.Contravariant.Divisible","Decide"]},{"package":"purescript-contravariant","item":["Data.Functor.Contravariant.Divisible","Decidable"]},{"package":"purescript-contravariant","item":["Data.Functor.Contravariant.Divisible","decided"]},{"package":"purescript-contravariant","item":["Data.Functor.Contravariant.Divisible","decideComparison"]},{"package":"purescript-contravariant","item":["Data.Functor.Contravariant.Divisible","decidableComparison"]},{"package":"purescript-contravariant","item":["Data.Functor.Contravariant.Divisible","decideEquivalence"]},{"package":"purescript-contravariant","item":["Data.Functor.Contravariant.Divisible","decidableEquivalence"]},{"package":"purescript-contravariant","item":["Data.Functor.Contravariant.Divisible","decidePredicate"]},{"package":"purescript-contravariant","item":["Data.Functor.Contravariant.Divisible","decidablePredicate"]},{"package":"purescript-contravariant","item":["Data.Functor.Contravariant.Divisible","decideOp"]},{"package":"purescript-contravariant","item":["Data.Functor.Contravariant.Divisible","decidableOp"]},{"package":"purescript-arrays","item":["Data.Array.Unsafe","unsafeIndex"]},{"package":"purescript-arrays","item":["Data.Array.Unsafe","head"]},{"package":"purescript-arrays","item":["Data.Array.Unsafe","tail"]},{"package":"purescript-arrays","item":["Data.Array.Unsafe","last"]},{"package":"purescript-arrays","item":["Data.Array.Unsafe","init"]},{"package":"purescript-arrays","item":["Data.Array","singleton"]},{"package":"purescript-arrays","item":["Data.Array","range"]},{"package":"purescript-arrays","item":["Data.Array","(..)"]},{"package":"purescript-arrays","item":["Data.Array","(..)"]},{"package":"purescript-arrays","item":["Data.Array","replicate"]},{"package":"purescript-arrays","item":["Data.Array","replicateM"]},{"package":"purescript-arrays","item":["Data.Array","some"]},{"package":"purescript-arrays","item":["Data.Array","many"]},{"package":"purescript-arrays","item":["Data.Array","null"]},{"package":"purescript-arrays","item":["Data.Array","length"]},{"package":"purescript-arrays","item":["Data.Array","cons"]},{"package":"purescript-arrays","item":["Data.Array","(:)"]},{"package":"purescript-arrays","item":["Data.Array","(:)"]},{"package":"purescript-arrays","item":["Data.Array","snoc"]},{"package":"purescript-arrays","item":["Data.Array","insert"]},{"package":"purescript-arrays","item":["Data.Array","insertBy"]},{"package":"purescript-arrays","item":["Data.Array","head"]},{"package":"purescript-arrays","item":["Data.Array","last"]},{"package":"purescript-arrays","item":["Data.Array","tail"]},{"package":"purescript-arrays","item":["Data.Array","init"]},{"package":"purescript-arrays","item":["Data.Array","uncons"]},{"package":"purescript-arrays","item":["Data.Array","index"]},{"package":"purescript-arrays","item":["Data.Array","(!!)"]},{"package":"purescript-arrays","item":["Data.Array","(!!)"]},{"package":"purescript-arrays","item":["Data.Array","elemIndex"]},{"package":"purescript-arrays","item":["Data.Array","elemLastIndex"]},{"package":"purescript-arrays","item":["Data.Array","findIndex"]},{"package":"purescript-arrays","item":["Data.Array","findLastIndex"]},{"package":"purescript-arrays","item":["Data.Array","insertAt"]},{"package":"purescript-arrays","item":["Data.Array","deleteAt"]},{"package":"purescript-arrays","item":["Data.Array","updateAt"]},{"package":"purescript-arrays","item":["Data.Array","modifyAt"]},{"package":"purescript-arrays","item":["Data.Array","alterAt"]},{"package":"purescript-arrays","item":["Data.Array","reverse"]},{"package":"purescript-arrays","item":["Data.Array","concat"]},{"package":"purescript-arrays","item":["Data.Array","concatMap"]},{"package":"purescript-arrays","item":["Data.Array","filter"]},{"package":"purescript-arrays","item":["Data.Array","filterM"]},{"package":"purescript-arrays","item":["Data.Array","mapMaybe"]},{"package":"purescript-arrays","item":["Data.Array","catMaybes"]},{"package":"purescript-arrays","item":["Data.Array","sort"]},{"package":"purescript-arrays","item":["Data.Array","sortBy"]},{"package":"purescript-arrays","item":["Data.Array","slice"]},{"package":"purescript-arrays","item":["Data.Array","take"]},{"package":"purescript-arrays","item":["Data.Array","takeWhile"]},{"package":"purescript-arrays","item":["Data.Array","drop"]},{"package":"purescript-arrays","item":["Data.Array","dropWhile"]},{"package":"purescript-arrays","item":["Data.Array","span"]},{"package":"purescript-arrays","item":["Data.Array","group"]},{"package":"purescript-arrays","item":["Data.Array","group'"]},{"package":"purescript-arrays","item":["Data.Array","groupBy"]},{"package":"purescript-arrays","item":["Data.Array","nub"]},{"package":"purescript-arrays","item":["Data.Array","nubBy"]},{"package":"purescript-arrays","item":["Data.Array","union"]},{"package":"purescript-arrays","item":["Data.Array","unionBy"]},{"package":"purescript-arrays","item":["Data.Array","delete"]},{"package":"purescript-arrays","item":["Data.Array","deleteBy"]},{"package":"purescript-arrays","item":["Data.Array","(\\\\)"]},{"package":"purescript-arrays","item":["Data.Array","(\\\\)"]},{"package":"purescript-arrays","item":["Data.Array","intersect"]},{"package":"purescript-arrays","item":["Data.Array","intersectBy"]},{"package":"purescript-arrays","item":["Data.Array","zipWith"]},{"package":"purescript-arrays","item":["Data.Array","zipWithA"]},{"package":"purescript-arrays","item":["Data.Array","zip"]},{"package":"purescript-arrays","item":["Data.Array","unzip"]},{"package":"purescript-arrays","item":["Data.Array","foldM"]},{"package":"purescript-tuples","item":["Data.Tuple","Tuple"]},{"package":"purescript-tuples","item":["Data.Tuple","showTuple"]},{"package":"purescript-tuples","item":["Data.Tuple","eqTuple"]},{"package":"purescript-tuples","item":["Data.Tuple","ordTuple"]},{"package":"purescript-tuples","item":["Data.Tuple","boundedTuple"]},{"package":"purescript-tuples","item":["Data.Tuple","boundedOrdTuple"]},{"package":"purescript-tuples","item":["Data.Tuple","semigroupoidTuple"]},{"package":"purescript-tuples","item":["Data.Tuple","semigroupTuple"]},{"package":"purescript-tuples","item":["Data.Tuple","monoidTuple"]},{"package":"purescript-tuples","item":["Data.Tuple","semiringTuple"]},{"package":"purescript-tuples","item":["Data.Tuple","moduloSemiringTuple"]},{"package":"purescript-tuples","item":["Data.Tuple","ringTuple"]},{"package":"purescript-tuples","item":["Data.Tuple","divisionRingTuple"]},{"package":"purescript-tuples","item":["Data.Tuple","numTuple"]},{"package":"purescript-tuples","item":["Data.Tuple","booleanAlgebraTuple"]},{"package":"purescript-tuples","item":["Data.Tuple","functorTuple"]},{"package":"purescript-tuples","item":["Data.Tuple","invariantTuple"]},{"package":"purescript-tuples","item":["Data.Tuple","bifunctorTuple"]},{"package":"purescript-tuples","item":["Data.Tuple","applyTuple"]},{"package":"purescript-tuples","item":["Data.Tuple","biapplyTuple"]},{"package":"purescript-tuples","item":["Data.Tuple","applicativeTuple"]},{"package":"purescript-tuples","item":["Data.Tuple","biapplicativeTuple"]},{"package":"purescript-tuples","item":["Data.Tuple","bindTuple"]},{"package":"purescript-tuples","item":["Data.Tuple","monadTuple"]},{"package":"purescript-tuples","item":["Data.Tuple","extendTuple"]},{"package":"purescript-tuples","item":["Data.Tuple","comonadTuple"]},{"package":"purescript-tuples","item":["Data.Tuple","lazyTuple"]},{"package":"purescript-tuples","item":["Data.Tuple","foldableTuple"]},{"package":"purescript-tuples","item":["Data.Tuple","bifoldableTuple"]},{"package":"purescript-tuples","item":["Data.Tuple","traversableTuple"]},{"package":"purescript-tuples","item":["Data.Tuple","bitraversableTuple"]},{"package":"purescript-tuples","item":["Data.Tuple","fst"]},{"package":"purescript-tuples","item":["Data.Tuple","snd"]},{"package":"purescript-tuples","item":["Data.Tuple","curry"]},{"package":"purescript-tuples","item":["Data.Tuple","uncurry"]},{"package":"purescript-tuples","item":["Data.Tuple","swap"]},{"package":"purescript-tuples","item":["Data.Tuple","lookup"]},{"package":"purescript-tailrec","item":["Control.Monad.Rec.Class","MonadRec"]},{"package":"purescript-tailrec","item":["Control.Monad.Rec.Class","tailRecM2"]},{"package":"purescript-tailrec","item":["Control.Monad.Rec.Class","tailRecM3"]},{"package":"purescript-tailrec","item":["Control.Monad.Rec.Class","tailRec"]},{"package":"purescript-tailrec","item":["Control.Monad.Rec.Class","monadRecIdentity"]},{"package":"purescript-tailrec","item":["Control.Monad.Rec.Class","monadRecEff"]},{"package":"purescript-tailrec","item":["Control.Monad.Rec.Class","forever"]},{"package":"purescript-identity","item":["Data.Identity","Identity"]},{"package":"purescript-identity","item":["Data.Identity","runIdentity"]},{"package":"purescript-identity","item":["Data.Identity","eqIdentity"]},{"package":"purescript-identity","item":["Data.Identity","ordIdentity"]},{"package":"purescript-identity","item":["Data.Identity","boundedIdentity"]},{"package":"purescript-identity","item":["Data.Identity","boundedOrdIdentity"]},{"package":"purescript-identity","item":["Data.Identity","booleanAlgebraIdentity"]},{"package":"purescript-identity","item":["Data.Identity","semigroupIdenity"]},{"package":"purescript-identity","item":["Data.Identity","monoidIdentity"]},{"package":"purescript-identity","item":["Data.Identity","semiringIdentity"]},{"package":"purescript-identity","item":["Data.Identity","moduloSemiringIdentity"]},{"package":"purescript-identity","item":["Data.Identity","ringIdentity"]},{"package":"purescript-identity","item":["Data.Identity","divisionRingIdentity"]},{"package":"purescript-identity","item":["Data.Identity","numIdentity"]},{"package":"purescript-identity","item":["Data.Identity","showIdentity"]},{"package":"purescript-identity","item":["Data.Identity","functorIdentity"]},{"package":"purescript-identity","item":["Data.Identity","invariantIdentity"]},{"package":"purescript-identity","item":["Data.Identity","applyIdentity"]},{"package":"purescript-identity","item":["Data.Identity","applicativeIdentity"]},{"package":"purescript-identity","item":["Data.Identity","bindIdentity"]},{"package":"purescript-identity","item":["Data.Identity","monadIdentity"]},{"package":"purescript-identity","item":["Data.Identity","extendIdentity"]},{"package":"purescript-identity","item":["Data.Identity","comonadIdentity"]},{"package":"purescript-identity","item":["Data.Identity","foldableIdentity"]},{"package":"purescript-identity","item":["Data.Identity","traversableIdentity"]},{"package":"purescript-coproducts","item":["Data.Functor.Coproduct","Coproduct"]},{"package":"purescript-coproducts","item":["Data.Functor.Coproduct","runCoproduct"]},{"package":"purescript-coproducts","item":["Data.Functor.Coproduct","left"]},{"package":"purescript-coproducts","item":["Data.Functor.Coproduct","right"]},{"package":"purescript-coproducts","item":["Data.Functor.Coproduct","coproduct"]},{"package":"purescript-coproducts","item":["Data.Functor.Coproduct","functorCoproduct"]},{"package":"purescript-coproducts","item":["Data.Functor.Coproduct","foldableCoproduct"]},{"package":"purescript-coproducts","item":["Data.Functor.Coproduct","traversableCoproduct"]},{"package":"purescript-profunctor","item":["Data.Profunctor.Cochoice","Cochoice"]},{"package":"purescript-profunctor-lenses","item":["Data.Lens.Internal.Tagged","Tagged"]},{"package":"purescript-profunctor-lenses","item":["Data.Lens.Internal.Tagged","taggedProfunctor"]},{"package":"purescript-profunctor-lenses","item":["Data.Lens.Internal.Tagged","taggedChoice"]},{"package":"purescript-profunctor-lenses","item":["Data.Lens.Internal.Tagged","unTagged"]},{"package":"purescript-profunctor-lenses","item":["Data.Lens.Internal.Market","Market"]},{"package":"purescript-profunctor-lenses","item":["Data.Lens.Internal.Market","functorMarket"]},{"package":"purescript-profunctor-lenses","item":["Data.Lens.Internal.Market","profunctorMarket"]},{"package":"purescript-profunctor-lenses","item":["Data.Lens.Internal.Market","choiceMarket"]},{"package":"purescript-profunctor","item":["Data.Profunctor.Choice","Choice"]},{"package":"purescript-profunctor","item":["Data.Profunctor.Choice","choiceFn"]},{"package":"purescript-profunctor","item":["Data.Profunctor.Choice","(+++)"]},{"package":"purescript-profunctor","item":["Data.Profunctor.Choice","(|||)"]},{"package":"purescript-profunctor","item":["Data.Profunctor.Choice","(+++)"]},{"package":"purescript-profunctor","item":["Data.Profunctor.Choice","(|||)"]},{"package":"purescript-either","item":["Data.Either.Unsafe","fromLeft"]},{"package":"purescript-either","item":["Data.Either.Unsafe","fromRight"]},{"package":"purescript-either","item":["Data.Either.Nested","Either2"]},{"package":"purescript-either","item":["Data.Either.Nested","Either3"]},{"package":"purescript-either","item":["Data.Either.Nested","Either4"]},{"package":"purescript-either","item":["Data.Either.Nested","Either5"]},{"package":"purescript-either","item":["Data.Either.Nested","Either6"]},{"package":"purescript-either","item":["Data.Either.Nested","Either7"]},{"package":"purescript-either","item":["Data.Either.Nested","Either8"]},{"package":"purescript-either","item":["Data.Either.Nested","Either9"]},{"package":"purescript-either","item":["Data.Either.Nested","Either10"]},{"package":"purescript-either","item":["Data.Either.Nested","either1of2"]},{"package":"purescript-either","item":["Data.Either.Nested","either2of2"]},{"package":"purescript-either","item":["Data.Either.Nested","either1of3"]},{"package":"purescript-either","item":["Data.Either.Nested","either2of3"]},{"package":"purescript-either","item":["Data.Either.Nested","either3of3"]},{"package":"purescript-either","item":["Data.Either.Nested","either1of4"]},{"package":"purescript-either","item":["Data.Either.Nested","either2of4"]},{"package":"purescript-either","item":["Data.Either.Nested","either3of4"]},{"package":"purescript-either","item":["Data.Either.Nested","either4of4"]},{"package":"purescript-either","item":["Data.Either.Nested","either1of5"]},{"package":"purescript-either","item":["Data.Either.Nested","either2of5"]},{"package":"purescript-either","item":["Data.Either.Nested","either3of5"]},{"package":"purescript-either","item":["Data.Either.Nested","either4of5"]},{"package":"purescript-either","item":["Data.Either.Nested","either5of5"]},{"package":"purescript-either","item":["Data.Either.Nested","either1of6"]},{"package":"purescript-either","item":["Data.Either.Nested","either2of6"]},{"package":"purescript-either","item":["Data.Either.Nested","either3of6"]},{"package":"purescript-either","item":["Data.Either.Nested","either4of6"]},{"package":"purescript-either","item":["Data.Either.Nested","either5of6"]},{"package":"purescript-either","item":["Data.Either.Nested","either6of6"]},{"package":"purescript-either","item":["Data.Either.Nested","either1of7"]},{"package":"purescript-either","item":["Data.Either.Nested","either2of7"]},{"package":"purescript-either","item":["Data.Either.Nested","either3of7"]},{"package":"purescript-either","item":["Data.Either.Nested","either4of7"]},{"package":"purescript-either","item":["Data.Either.Nested","either5of7"]},{"package":"purescript-either","item":["Data.Either.Nested","either6of7"]},{"package":"purescript-either","item":["Data.Either.Nested","either7of7"]},{"package":"purescript-either","item":["Data.Either.Nested","either1of8"]},{"package":"purescript-either","item":["Data.Either.Nested","either2of8"]},{"package":"purescript-either","item":["Data.Either.Nested","either3of8"]},{"package":"purescript-either","item":["Data.Either.Nested","either4of8"]},{"package":"purescript-either","item":["Data.Either.Nested","either5of8"]},{"package":"purescript-either","item":["Data.Either.Nested","either6of8"]},{"package":"purescript-either","item":["Data.Either.Nested","either7of8"]},{"package":"purescript-either","item":["Data.Either.Nested","either8of8"]},{"package":"purescript-either","item":["Data.Either.Nested","either1of9"]},{"package":"purescript-either","item":["Data.Either.Nested","either2of9"]},{"package":"purescript-either","item":["Data.Either.Nested","either3of9"]},{"package":"purescript-either","item":["Data.Either.Nested","either4of9"]},{"package":"purescript-either","item":["Data.Either.Nested","either5of9"]},{"package":"purescript-either","item":["Data.Either.Nested","either6of9"]},{"package":"purescript-either","item":["Data.Either.Nested","either7of9"]},{"package":"purescript-either","item":["Data.Either.Nested","either8of9"]},{"package":"purescript-either","item":["Data.Either.Nested","either9of9"]},{"package":"purescript-either","item":["Data.Either.Nested","either1of10"]},{"package":"purescript-either","item":["Data.Either.Nested","either2of10"]},{"package":"purescript-either","item":["Data.Either.Nested","either3of10"]},{"package":"purescript-either","item":["Data.Either.Nested","either4of10"]},{"package":"purescript-either","item":["Data.Either.Nested","either5of10"]},{"package":"purescript-either","item":["Data.Either.Nested","either6of10"]},{"package":"purescript-either","item":["Data.Either.Nested","either7of10"]},{"package":"purescript-either","item":["Data.Either.Nested","either8of10"]},{"package":"purescript-either","item":["Data.Either.Nested","either9of10"]},{"package":"purescript-either","item":["Data.Either.Nested","either10of10"]},{"package":"purescript-either","item":["Data.Either.Nested","either2"]},{"package":"purescript-either","item":["Data.Either.Nested","either3"]},{"package":"purescript-either","item":["Data.Either.Nested","either4"]},{"package":"purescript-either","item":["Data.Either.Nested","either5"]},{"package":"purescript-either","item":["Data.Either.Nested","either6"]},{"package":"purescript-either","item":["Data.Either.Nested","either7"]},{"package":"purescript-either","item":["Data.Either.Nested","either8"]},{"package":"purescript-either","item":["Data.Either.Nested","either9"]},{"package":"purescript-either","item":["Data.Either.Nested","either10"]},{"package":"purescript-either","item":["Data.Either","Either"]},{"package":"purescript-either","item":["Data.Either","either"]},{"package":"purescript-either","item":["Data.Either","isLeft"]},{"package":"purescript-either","item":["Data.Either","isRight"]},{"package":"purescript-either","item":["Data.Either","functorEither"]},{"package":"purescript-either","item":["Data.Either","bifunctorEither"]},{"package":"purescript-either","item":["Data.Either","applyEither"]},{"package":"purescript-either","item":["Data.Either","applicativeEither"]},{"package":"purescript-either","item":["Data.Either","altEither"]},{"package":"purescript-either","item":["Data.Either","bindEither"]},{"package":"purescript-either","item":["Data.Either","monadEither"]},{"package":"purescript-either","item":["Data.Either","extendEither"]},{"package":"purescript-either","item":["Data.Either","showEither"]},{"package":"purescript-either","item":["Data.Either","eqEither"]},{"package":"purescript-either","item":["Data.Either","ordEither"]},{"package":"purescript-either","item":["Data.Either","boundedEither"]},{"package":"purescript-either","item":["Data.Either","foldableEither"]},{"package":"purescript-either","item":["Data.Either","bifoldableEither"]},{"package":"purescript-either","item":["Data.Either","traversableEither"]},{"package":"purescript-either","item":["Data.Either","bitraversableEither"]},{"package":"purescript-either","item":["Data.Either","semiringEither"]},{"package":"purescript-either","item":["Data.Either","semigroupEither"]},{"package":"purescript-const","item":["Data.Const","Const"]},{"package":"purescript-const","item":["Data.Const","getConst"]},{"package":"purescript-const","item":["Data.Const","eqConst"]},{"package":"purescript-const","item":["Data.Const","ordConst"]},{"package":"purescript-const","item":["Data.Const","boundedConst"]},{"package":"purescript-const","item":["Data.Const","showConst"]},{"package":"purescript-const","item":["Data.Const","semigroupoidConst"]},{"package":"purescript-const","item":["Data.Const","semigroupConst"]},{"package":"purescript-const","item":["Data.Const","monoidConst"]},{"package":"purescript-const","item":["Data.Const","functorConst"]},{"package":"purescript-const","item":["Data.Const","invariantConst"]},{"package":"purescript-const","item":["Data.Const","applyConst"]},{"package":"purescript-const","item":["Data.Const","bindConst"]},{"package":"purescript-const","item":["Data.Const","applicativeConst"]},{"package":"purescript-const","item":["Data.Const","contravariantConst"]},{"package":"purescript-const","item":["Data.Const","foldableConst"]},{"package":"purescript-const","item":["Data.Const","traversableConst"]},{"package":"purescript-foldable-traversable","item":["Data.Traversable","Traversable"]},{"package":"purescript-foldable-traversable","item":["Data.Traversable","traverseDefault"]},{"package":"purescript-foldable-traversable","item":["Data.Traversable","sequenceDefault"]},{"package":"purescript-foldable-traversable","item":["Data.Traversable","traversableArray"]},{"package":"purescript-foldable-traversable","item":["Data.Traversable","traversableMaybe"]},{"package":"purescript-foldable-traversable","item":["Data.Traversable","traversableFirst"]},{"package":"purescript-foldable-traversable","item":["Data.Traversable","traversableLast"]},{"package":"purescript-foldable-traversable","item":["Data.Traversable","traversableAdditive"]},{"package":"purescript-foldable-traversable","item":["Data.Traversable","traversableDual"]},{"package":"purescript-foldable-traversable","item":["Data.Traversable","traversableConj"]},{"package":"purescript-foldable-traversable","item":["Data.Traversable","traversableDisj"]},{"package":"purescript-foldable-traversable","item":["Data.Traversable","traversableMultiplicative"]},{"package":"purescript-foldable-traversable","item":["Data.Traversable","for"]},{"package":"purescript-foldable-traversable","item":["Data.Traversable","Accum"]},{"package":"purescript-foldable-traversable","item":["Data.Traversable","scanl"]},{"package":"purescript-foldable-traversable","item":["Data.Traversable","mapAccumL"]},{"package":"purescript-foldable-traversable","item":["Data.Traversable","scanr"]},{"package":"purescript-foldable-traversable","item":["Data.Traversable","mapAccumR"]},{"package":"purescript-strings","item":["Data.String.Regex","Regex"]},{"package":"purescript-strings","item":["Data.String.Regex","showRegex"]},{"package":"purescript-strings","item":["Data.String.Regex","RegexFlags"]},{"package":"purescript-strings","item":["Data.String.Regex","noFlags"]},{"package":"purescript-strings","item":["Data.String.Regex","regex"]},{"package":"purescript-strings","item":["Data.String.Regex","source"]},{"package":"purescript-strings","item":["Data.String.Regex","flags"]},{"package":"purescript-strings","item":["Data.String.Regex","renderFlags"]},{"package":"purescript-strings","item":["Data.String.Regex","parseFlags"]},{"package":"purescript-strings","item":["Data.String.Regex","test"]},{"package":"purescript-strings","item":["Data.String.Regex","match"]},{"package":"purescript-strings","item":["Data.String.Regex","replace"]},{"package":"purescript-strings","item":["Data.String.Regex","replace'"]},{"package":"purescript-strings","item":["Data.String.Regex","search"]},{"package":"purescript-strings","item":["Data.String.Regex","split"]},{"package":"purescript-strings","item":["Data.String","charAt"]},{"package":"purescript-strings","item":["Data.String","fromChar"]},{"package":"purescript-strings","item":["Data.String","singleton"]},{"package":"purescript-strings","item":["Data.String","charCodeAt"]},{"package":"purescript-strings","item":["Data.String","toChar"]},{"package":"purescript-strings","item":["Data.String","null"]},{"package":"purescript-strings","item":["Data.String","uncons"]},{"package":"purescript-strings","item":["Data.String","takeWhile"]},{"package":"purescript-strings","item":["Data.String","dropWhile"]},{"package":"purescript-strings","item":["Data.String","stripPrefix"]},{"package":"purescript-strings","item":["Data.String","stripSuffix"]},{"package":"purescript-strings","item":["Data.String","fromCharArray"]},{"package":"purescript-strings","item":["Data.String","contains"]},{"package":"purescript-strings","item":["Data.String","indexOf"]},{"package":"purescript-strings","item":["Data.String","indexOf'"]},{"package":"purescript-strings","item":["Data.String","lastIndexOf"]},{"package":"purescript-strings","item":["Data.String","lastIndexOf'"]},{"package":"purescript-strings","item":["Data.String","length"]},{"package":"purescript-strings","item":["Data.String","localeCompare"]},{"package":"purescript-strings","item":["Data.String","replace"]},{"package":"purescript-strings","item":["Data.String","take"]},{"package":"purescript-strings","item":["Data.String","drop"]},{"package":"purescript-strings","item":["Data.String","count"]},{"package":"purescript-strings","item":["Data.String","split"]},{"package":"purescript-strings","item":["Data.String","toCharArray"]},{"package":"purescript-strings","item":["Data.String","toLower"]},{"package":"purescript-strings","item":["Data.String","toUpper"]},{"package":"purescript-strings","item":["Data.String","trim"]},{"package":"purescript-strings","item":["Data.String","joinWith"]},{"package":"purescript-maps","item":["Data.StrMap.ST","STStrMap"]},{"package":"purescript-maps","item":["Data.StrMap.ST","new"]},{"package":"purescript-maps","item":["Data.StrMap.ST","peek"]},{"package":"purescript-maps","item":["Data.StrMap.ST","poke"]},{"package":"purescript-maps","item":["Data.StrMap.ST","delete"]},{"package":"purescript-integers","item":["Data.Int","fromNumber"]},{"package":"purescript-integers","item":["Data.Int","floor"]},{"package":"purescript-integers","item":["Data.Int","ceil"]},{"package":"purescript-integers","item":["Data.Int","round"]},{"package":"purescript-integers","item":["Data.Int","toNumber"]},{"package":"purescript-integers","item":["Data.Int","fromString"]},{"package":"purescript-integers","item":["Data.Int","even"]},{"package":"purescript-integers","item":["Data.Int","odd"]},{"package":"purescript-maybe","item":["Data.Maybe.Unsafe","fromJust"]},{"package":"purescript-maybe","item":["Data.Maybe.Unsafe","unsafeThrow"]},{"package":"purescript-foldable-traversable","item":["Data.Foldable","Foldable"]},{"package":"purescript-foldable-traversable","item":["Data.Foldable","foldrDefault"]},{"package":"purescript-foldable-traversable","item":["Data.Foldable","foldlDefault"]},{"package":"purescript-foldable-traversable","item":["Data.Foldable","foldMapDefaultR"]},{"package":"purescript-foldable-traversable","item":["Data.Foldable","foldMapDefaultL"]},{"package":"purescript-foldable-traversable","item":["Data.Foldable","foldableArray"]},{"package":"purescript-foldable-traversable","item":["Data.Foldable","foldableMaybe"]},{"package":"purescript-foldable-traversable","item":["Data.Foldable","foldableFirst"]},{"package":"purescript-foldable-traversable","item":["Data.Foldable","foldableLast"]},{"package":"purescript-foldable-traversable","item":["Data.Foldable","foldableAdditive"]},{"package":"purescript-foldable-traversable","item":["Data.Foldable","foldableDual"]},{"package":"purescript-foldable-traversable","item":["Data.Foldable","foldableDisj"]},{"package":"purescript-foldable-traversable","item":["Data.Foldable","foldableConj"]},{"package":"purescript-foldable-traversable","item":["Data.Foldable","foldableMultiplicative"]},{"package":"purescript-foldable-traversable","item":["Data.Foldable","fold"]},{"package":"purescript-foldable-traversable","item":["Data.Foldable","traverse_"]},{"package":"purescript-foldable-traversable","item":["Data.Foldable","for_"]},{"package":"purescript-foldable-traversable","item":["Data.Foldable","sequence_"]},{"package":"purescript-foldable-traversable","item":["Data.Foldable","mconcat"]},{"package":"purescript-foldable-traversable","item":["Data.Foldable","intercalate"]},{"package":"purescript-foldable-traversable","item":["Data.Foldable","and"]},{"package":"purescript-foldable-traversable","item":["Data.Foldable","or"]},{"package":"purescript-foldable-traversable","item":["Data.Foldable","any"]},{"package":"purescript-foldable-traversable","item":["Data.Foldable","all"]},{"package":"purescript-foldable-traversable","item":["Data.Foldable","sum"]},{"package":"purescript-foldable-traversable","item":["Data.Foldable","product"]},{"package":"purescript-foldable-traversable","item":["Data.Foldable","elem"]},{"package":"purescript-foldable-traversable","item":["Data.Foldable","notElem"]},{"package":"purescript-foldable-traversable","item":["Data.Foldable","find"]},{"package":"purescript-foldable-traversable","item":["Data.Foldable","maximum"]},{"package":"purescript-foldable-traversable","item":["Data.Foldable","maximumBy"]},{"package":"purescript-foldable-traversable","item":["Data.Foldable","minimum"]},{"package":"purescript-foldable-traversable","item":["Data.Foldable","minimumBy"]},{"package":"purescript-maybe","item":["Data.Maybe.Last","Last"]},{"package":"purescript-maybe","item":["Data.Maybe.Last","runLast"]},{"package":"purescript-maybe","item":["Data.Maybe.Last","eqLast"]},{"package":"purescript-maybe","item":["Data.Maybe.Last","ordLast"]},{"package":"purescript-maybe","item":["Data.Maybe.Last","boundedLast"]},{"package":"purescript-maybe","item":["Data.Maybe.Last","functorLast"]},{"package":"purescript-maybe","item":["Data.Maybe.Last","applyLast"]},{"package":"purescript-maybe","item":["Data.Maybe.Last","applicativeLast"]},{"package":"purescript-maybe","item":["Data.Maybe.Last","bindLast"]},{"package":"purescript-maybe","item":["Data.Maybe.Last","monadLast"]},{"package":"purescript-maybe","item":["Data.Maybe.Last","extendLast"]},{"package":"purescript-maybe","item":["Data.Maybe.Last","invariantLast"]},{"package":"purescript-maybe","item":["Data.Maybe.Last","showLast"]},{"package":"purescript-maybe","item":["Data.Maybe.Last","semigroupLast"]},{"package":"purescript-maybe","item":["Data.Maybe.Last","monoidLast"]},{"package":"purescript-maybe","item":["Data.Maybe.First","First"]},{"package":"purescript-maybe","item":["Data.Maybe.First","runFirst"]},{"package":"purescript-maybe","item":["Data.Maybe.First","eqFirst"]},{"package":"purescript-maybe","item":["Data.Maybe.First","ordFirst"]},{"package":"purescript-maybe","item":["Data.Maybe.First","boundedFirst"]},{"package":"purescript-maybe","item":["Data.Maybe.First","functorFirst"]},{"package":"purescript-maybe","item":["Data.Maybe.First","applyFirst"]},{"package":"purescript-maybe","item":["Data.Maybe.First","applicativeFirst"]},{"package":"purescript-maybe","item":["Data.Maybe.First","bindFirst"]},{"package":"purescript-maybe","item":["Data.Maybe.First","monadFirst"]},{"package":"purescript-maybe","item":["Data.Maybe.First","extendFirst"]},{"package":"purescript-maybe","item":["Data.Maybe.First","invariantFirst"]},{"package":"purescript-maybe","item":["Data.Maybe.First","showFirst"]},{"package":"purescript-maybe","item":["Data.Maybe.First","semigroupFirst"]},{"package":"purescript-maybe","item":["Data.Maybe.First","monoidFirst"]},{"package":"purescript-arrays","item":["Data.Array.ST","STArray"]},{"package":"purescript-arrays","item":["Data.Array.ST","Assoc"]},{"package":"purescript-arrays","item":["Data.Array.ST","runSTArray"]},{"package":"purescript-arrays","item":["Data.Array.ST","emptySTArray"]},{"package":"purescript-arrays","item":["Data.Array.ST","thaw"]},{"package":"purescript-arrays","item":["Data.Array.ST","freeze"]},{"package":"purescript-arrays","item":["Data.Array.ST","peekSTArray"]},{"package":"purescript-arrays","item":["Data.Array.ST","pokeSTArray"]},{"package":"purescript-arrays","item":["Data.Array.ST","pushSTArray"]},{"package":"purescript-arrays","item":["Data.Array.ST","pushAllSTArray"]},{"package":"purescript-arrays","item":["Data.Array.ST","spliceSTArray"]},{"package":"purescript-arrays","item":["Data.Array.ST","toAssocArray"]},{"package":"purescript-maybe","item":["Data.Maybe","Maybe"]},{"package":"purescript-maybe","item":["Data.Maybe","maybe"]},{"package":"purescript-maybe","item":["Data.Maybe","maybe'"]},{"package":"purescript-maybe","item":["Data.Maybe","fromMaybe"]},{"package":"purescript-maybe","item":["Data.Maybe","fromMaybe'"]},{"package":"purescript-maybe","item":["Data.Maybe","isJust"]},{"package":"purescript-maybe","item":["Data.Maybe","isNothing"]},{"package":"purescript-maybe","item":["Data.Maybe","functorMaybe"]},{"package":"purescript-maybe","item":["Data.Maybe","applyMaybe"]},{"package":"purescript-maybe","item":["Data.Maybe","applicativeMaybe"]},{"package":"purescript-maybe","item":["Data.Maybe","altMaybe"]},{"package":"purescript-maybe","item":["Data.Maybe","plusMaybe"]},{"package":"purescript-maybe","item":["Data.Maybe","alternativeMaybe"]},{"package":"purescript-maybe","item":["Data.Maybe","bindMaybe"]},{"package":"purescript-maybe","item":["Data.Maybe","monadMaybe"]},{"package":"purescript-maybe","item":["Data.Maybe","monadPlusMaybe"]},{"package":"purescript-maybe","item":["Data.Maybe","extendMaybe"]},{"package":"purescript-maybe","item":["Data.Maybe","invariantMaybe"]},{"package":"purescript-maybe","item":["Data.Maybe","semigroupMaybe"]},{"package":"purescript-maybe","item":["Data.Maybe","monoidMaybe"]},{"package":"purescript-maybe","item":["Data.Maybe","semiringMaybe"]},{"package":"purescript-maybe","item":["Data.Maybe","moduloSemiringMaybe"]},{"package":"purescript-maybe","item":["Data.Maybe","ringMaybe"]},{"package":"purescript-maybe","item":["Data.Maybe","divisionRingMaybe"]},{"package":"purescript-maybe","item":["Data.Maybe","numMaybe"]},{"package":"purescript-maybe","item":["Data.Maybe","eqMaybe"]},{"package":"purescript-maybe","item":["Data.Maybe","ordMaybe"]},{"package":"purescript-maybe","item":["Data.Maybe","boundedMaybe"]},{"package":"purescript-maybe","item":["Data.Maybe","boundedOrdMaybe"]},{"package":"purescript-maybe","item":["Data.Maybe","booleanAlgebraMaybe"]},{"package":"purescript-maybe","item":["Data.Maybe","showMaybe"]},{"package":"purescript-control","item":["Control.MonadPlus","MonadPlus"]},{"package":"purescript-control","item":["Control.MonadPlus","guard"]},{"package":"purescript-control","item":["Control.MonadPlus","monadPlusArray"]},{"package":"purescript-control","item":["Control.Alternative","Alternative"]},{"package":"purescript-control","item":["Control.Alternative","alternativeArray"]},{"package":"purescript-control","item":["Control.Plus","Plus"]},{"package":"purescript-control","item":["Control.Plus","plusArray"]},{"package":"purescript-control","item":["Control.Alt","Alt"]},{"package":"purescript-control","item":["Control.Alt","(<|>)"]},{"package":"purescript-control","item":["Control.Alt","(<|>)"]},{"package":"purescript-control","item":["Control.Alt","altArray"]},{"package":"purescript-foldable-traversable","item":["Data.Bitraversable","Bitraversable"]},{"package":"purescript-foldable-traversable","item":["Data.Bitraversable","bitraverseDefault"]},{"package":"purescript-foldable-traversable","item":["Data.Bitraversable","bisequenceDefault"]},{"package":"purescript-foldable-traversable","item":["Data.Bitraversable","bifor"]},{"package":"purescript-foldable-traversable","item":["Data.Bifoldable","Bifoldable"]},{"package":"purescript-foldable-traversable","item":["Data.Bifoldable","bifoldrDefault"]},{"package":"purescript-foldable-traversable","item":["Data.Bifoldable","bifoldlDefault"]},{"package":"purescript-foldable-traversable","item":["Data.Bifoldable","bifoldMapDefaultR"]},{"package":"purescript-foldable-traversable","item":["Data.Bifoldable","bifoldMapDefaultL"]},{"package":"purescript-foldable-traversable","item":["Data.Bifoldable","bifold"]},{"package":"purescript-foldable-traversable","item":["Data.Bifoldable","bitraverse_"]},{"package":"purescript-foldable-traversable","item":["Data.Bifoldable","bifor_"]},{"package":"purescript-foldable-traversable","item":["Data.Bifoldable","bisequence_"]},{"package":"purescript-foldable-traversable","item":["Data.Bifoldable","biany"]},{"package":"purescript-foldable-traversable","item":["Data.Bifoldable","biall"]},{"package":"purescript-control","item":["Control.Apply","(<*)"]},{"package":"purescript-control","item":["Control.Apply","(*>)"]},{"package":"purescript-control","item":["Control.Apply","(<*)"]},{"package":"purescript-control","item":["Control.Apply","(*>)"]},{"package":"purescript-control","item":["Control.Apply","lift2"]},{"package":"purescript-control","item":["Control.Apply","lift3"]},{"package":"purescript-control","item":["Control.Apply","lift4"]},{"package":"purescript-control","item":["Control.Apply","lift5"]},{"package":"purescript-bifunctors","item":["Data.Bifunctor.Wrap","Wrap"]},{"package":"purescript-bifunctors","item":["Data.Bifunctor.Wrap","unwrap"]},{"package":"purescript-bifunctors","item":["Data.Bifunctor.Wrap","wrapBifunctor"]},{"package":"purescript-bifunctors","item":["Data.Bifunctor.Wrap","wrapFunctor"]},{"package":"purescript-bifunctors","item":["Data.Bifunctor.Wrap","wrapBiapply"]},{"package":"purescript-bifunctors","item":["Data.Bifunctor.Wrap","wrapBiapplicative"]},{"package":"purescript-bifunctors","item":["Data.Bifunctor.Product","Product"]},{"package":"purescript-bifunctors","item":["Data.Bifunctor.Product","productBifunctor"]},{"package":"purescript-bifunctors","item":["Data.Bifunctor.Product","productBiapply"]},{"package":"purescript-bifunctors","item":["Data.Bifunctor.Product","productBiapplicative"]},{"package":"purescript-bifunctors","item":["Data.Bifunctor.Joker","Joker"]},{"package":"purescript-bifunctors","item":["Data.Bifunctor.Joker","runJoker"]},{"package":"purescript-bifunctors","item":["Data.Bifunctor.Joker","jokerBifunctor"]},{"package":"purescript-bifunctors","item":["Data.Bifunctor.Joker","jokerFunctor"]},{"package":"purescript-bifunctors","item":["Data.Bifunctor.Joker","jokerBiapply"]},{"package":"purescript-bifunctors","item":["Data.Bifunctor.Joker","jokerBiapplicative"]},{"package":"purescript-bifunctors","item":["Data.Bifunctor.Join","Join"]},{"package":"purescript-bifunctors","item":["Data.Bifunctor.Join","runJoin"]},{"package":"purescript-bifunctors","item":["Data.Bifunctor.Join","joinFunctor"]},{"package":"purescript-bifunctors","item":["Data.Bifunctor.Join","joinApply"]},{"package":"purescript-bifunctors","item":["Data.Bifunctor.Join","joinApplicative"]},{"package":"purescript-bifunctors","item":["Data.Bifunctor.Flip","Flip"]},{"package":"purescript-bifunctors","item":["Data.Bifunctor.Flip","runFlip"]},{"package":"purescript-bifunctors","item":["Data.Bifunctor.Flip","flipBifunctor"]},{"package":"purescript-bifunctors","item":["Data.Bifunctor.Flip","flipFunctor"]},{"package":"purescript-bifunctors","item":["Data.Bifunctor.Flip","flipBiapply"]},{"package":"purescript-bifunctors","item":["Data.Bifunctor.Flip","flipBiapplicative"]},{"package":"purescript-bifunctors","item":["Data.Bifunctor.Clown","Clown"]},{"package":"purescript-bifunctors","item":["Data.Bifunctor.Clown","runClown"]},{"package":"purescript-bifunctors","item":["Data.Bifunctor.Clown","clownBifunctor"]},{"package":"purescript-bifunctors","item":["Data.Bifunctor.Clown","clownFunctor"]},{"package":"purescript-bifunctors","item":["Data.Bifunctor.Clown","clownBiapply"]},{"package":"purescript-bifunctors","item":["Data.Bifunctor.Clown","clownBiapplicative"]},{"package":"purescript-bifunctors","item":["Control.Biapplicative","Biapplicative"]},{"package":"purescript-bifunctors","item":["Control.Biapply","(<<$>>)"]},{"package":"purescript-bifunctors","item":["Control.Biapply","(<<*>>)"]},{"package":"purescript-bifunctors","item":["Control.Biapply","(<<*)"]},{"package":"purescript-bifunctors","item":["Control.Biapply","(*>>)"]},{"package":"purescript-bifunctors","item":["Control.Biapply","(<<$>>)"]},{"package":"purescript-bifunctors","item":["Control.Biapply","Biapply"]},{"package":"purescript-bifunctors","item":["Control.Biapply","(<<*>>)"]},{"package":"purescript-bifunctors","item":["Control.Biapply","(*>>)"]},{"package":"purescript-bifunctors","item":["Control.Biapply","(<<*)"]},{"package":"purescript-bifunctors","item":["Control.Biapply","bilift2"]},{"package":"purescript-bifunctors","item":["Control.Biapply","bilift3"]},{"package":"purescript-control","item":["Control.Bind","(=<<)"]},{"package":"purescript-control","item":["Control.Bind","(>=>)"]},{"package":"purescript-control","item":["Control.Bind","(<=<)"]},{"package":"purescript-control","item":["Control.Bind","(=<<)"]},{"package":"purescript-control","item":["Control.Bind","(>=>)"]},{"package":"purescript-control","item":["Control.Bind","(<=<)"]},{"package":"purescript-control","item":["Control.Bind","join"]},{"package":"purescript-control","item":["Control.Bind","ifM"]},{"package":"purescript-monoid","item":["Data.Monoid.Multiplicative","Multiplicative"]},{"package":"purescript-monoid","item":["Data.Monoid.Multiplicative","runMultiplicative"]},{"package":"purescript-monoid","item":["Data.Monoid.Multiplicative","eqMultiplicative"]},{"package":"purescript-monoid","item":["Data.Monoid.Multiplicative","ordMultiplicative"]},{"package":"purescript-monoid","item":["Data.Monoid.Multiplicative","functorMultiplicative"]},{"package":"purescript-monoid","item":["Data.Monoid.Multiplicative","applyMultiplicative"]},{"package":"purescript-monoid","item":["Data.Monoid.Multiplicative","applicativeMultiplicative"]},{"package":"purescript-monoid","item":["Data.Monoid.Multiplicative","bindMultiplicative"]},{"package":"purescript-monoid","item":["Data.Monoid.Multiplicative","monadMultiplicative"]},{"package":"purescript-monoid","item":["Data.Monoid.Multiplicative","extendMultiplicative"]},{"package":"purescript-monoid","item":["Data.Monoid.Multiplicative","comonadMultiplicative"]},{"package":"purescript-monoid","item":["Data.Monoid.Multiplicative","invariantMultiplicative"]},{"package":"purescript-monoid","item":["Data.Monoid.Multiplicative","showMultiplicative"]},{"package":"purescript-monoid","item":["Data.Monoid.Multiplicative","semigroupMultiplicative"]},{"package":"purescript-monoid","item":["Data.Monoid.Multiplicative","monoidMultiplicative"]},{"package":"purescript-monoid","item":["Data.Monoid.Dual","Dual"]},{"package":"purescript-monoid","item":["Data.Monoid.Dual","runDual"]},{"package":"purescript-monoid","item":["Data.Monoid.Dual","eqDual"]},{"package":"purescript-monoid","item":["Data.Monoid.Dual","ordDual"]},{"package":"purescript-monoid","item":["Data.Monoid.Dual","functorDual"]},{"package":"purescript-monoid","item":["Data.Monoid.Dual","applyDual"]},{"package":"purescript-monoid","item":["Data.Monoid.Dual","applicativeDual"]},{"package":"purescript-monoid","item":["Data.Monoid.Dual","bindDual"]},{"package":"purescript-monoid","item":["Data.Monoid.Dual","monadDual"]},{"package":"purescript-monoid","item":["Data.Monoid.Dual","extendDual"]},{"package":"purescript-monoid","item":["Data.Monoid.Dual","comonadDual"]},{"package":"purescript-monoid","item":["Data.Monoid.Dual","invariantDual"]},{"package":"purescript-monoid","item":["Data.Monoid.Dual","showDual"]},{"package":"purescript-monoid","item":["Data.Monoid.Dual","semigroupDual"]},{"package":"purescript-monoid","item":["Data.Monoid.Dual","monoidDual"]},{"package":"purescript-monoid","item":["Data.Monoid.Disj","Disj"]},{"package":"purescript-monoid","item":["Data.Monoid.Disj","runDisj"]},{"package":"purescript-monoid","item":["Data.Monoid.Disj","eqDisj"]},{"package":"purescript-monoid","item":["Data.Monoid.Disj","ordDisj"]},{"package":"purescript-monoid","item":["Data.Monoid.Disj","boundedDisj"]},{"package":"purescript-monoid","item":["Data.Monoid.Disj","functorDisj"]},{"package":"purescript-monoid","item":["Data.Monoid.Disj","applyDisj"]},{"package":"purescript-monoid","item":["Data.Monoid.Disj","applicativeDisj"]},{"package":"purescript-monoid","item":["Data.Monoid.Disj","bindDisj"]},{"package":"purescript-monoid","item":["Data.Monoid.Disj","monadDisj"]},{"package":"purescript-monoid","item":["Data.Monoid.Disj","extendDisj"]},{"package":"purescript-monoid","item":["Data.Monoid.Disj","comonadDisj"]},{"package":"purescript-monoid","item":["Data.Monoid.Disj","showDisj"]},{"package":"purescript-monoid","item":["Data.Monoid.Disj","semigroupDisj"]},{"package":"purescript-monoid","item":["Data.Monoid.Disj","monoidDisj"]},{"package":"purescript-monoid","item":["Data.Monoid.Disj","semiringDisj"]},{"package":"purescript-monoid","item":["Data.Monoid.Conj","Conj"]},{"package":"purescript-monoid","item":["Data.Monoid.Conj","runConj"]},{"package":"purescript-monoid","item":["Data.Monoid.Conj","eqConj"]},{"package":"purescript-monoid","item":["Data.Monoid.Conj","ordConj"]},{"package":"purescript-monoid","item":["Data.Monoid.Conj","boundedConj"]},{"package":"purescript-monoid","item":["Data.Monoid.Conj","functorConj"]},{"package":"purescript-monoid","item":["Data.Monoid.Conj","applyConj"]},{"package":"purescript-monoid","item":["Data.Monoid.Conj","applicativeConj"]},{"package":"purescript-monoid","item":["Data.Monoid.Conj","bindConj"]},{"package":"purescript-monoid","item":["Data.Monoid.Conj","monadConj"]},{"package":"purescript-monoid","item":["Data.Monoid.Conj","extendConj"]},{"package":"purescript-monoid","item":["Data.Monoid.Conj","comonadConj"]},{"package":"purescript-monoid","item":["Data.Monoid.Conj","showConj"]},{"package":"purescript-monoid","item":["Data.Monoid.Conj","semigroupConj"]},{"package":"purescript-monoid","item":["Data.Monoid.Conj","monoidConj"]},{"package":"purescript-monoid","item":["Data.Monoid.Conj","semiringConj"]},{"package":"purescript-monoid","item":["Data.Monoid.Additive","Additive"]},{"package":"purescript-monoid","item":["Data.Monoid.Additive","runAdditive"]},{"package":"purescript-monoid","item":["Data.Monoid.Additive","eqAdditive"]},{"package":"purescript-monoid","item":["Data.Monoid.Additive","ordAdditive"]},{"package":"purescript-monoid","item":["Data.Monoid.Additive","functorAdditive"]},{"package":"purescript-monoid","item":["Data.Monoid.Additive","applyAdditive"]},{"package":"purescript-monoid","item":["Data.Monoid.Additive","applicativeAdditive"]},{"package":"purescript-monoid","item":["Data.Monoid.Additive","bindAdditive"]},{"package":"purescript-monoid","item":["Data.Monoid.Additive","monadAdditive"]},{"package":"purescript-monoid","item":["Data.Monoid.Additive","extendAdditive"]},{"package":"purescript-monoid","item":["Data.Monoid.Additive","comonadAdditive"]},{"package":"purescript-monoid","item":["Data.Monoid.Additive","invariantAdditive"]},{"package":"purescript-monoid","item":["Data.Monoid.Additive","showAdditive"]},{"package":"purescript-monoid","item":["Data.Monoid.Additive","semigroupAdditive"]},{"package":"purescript-monoid","item":["Data.Monoid.Additive","monoidAdditive"]},{"package":"purescript-lazy","item":["Data.Lazy","Lazy"]},{"package":"purescript-lazy","item":["Data.Lazy","defer"]},{"package":"purescript-lazy","item":["Data.Lazy","force"]},{"package":"purescript-lazy","item":["Data.Lazy","semiringLazy"]},{"package":"purescript-lazy","item":["Data.Lazy","ringLazy"]},{"package":"purescript-lazy","item":["Data.Lazy","moduloSemiringLazy"]},{"package":"purescript-lazy","item":["Data.Lazy","divisionRingLazy"]},{"package":"purescript-lazy","item":["Data.Lazy","numLazy"]},{"package":"purescript-lazy","item":["Data.Lazy","eqLazy"]},{"package":"purescript-lazy","item":["Data.Lazy","ordLazy"]},{"package":"purescript-lazy","item":["Data.Lazy","boundedLazy"]},{"package":"purescript-lazy","item":["Data.Lazy","boundedOrdLazy"]},{"package":"purescript-lazy","item":["Data.Lazy","semigroupLazy"]},{"package":"purescript-lazy","item":["Data.Lazy","monoidLazy"]},{"package":"purescript-lazy","item":["Data.Lazy","booleanAlgebraLazy"]},{"package":"purescript-lazy","item":["Data.Lazy","functorLazy"]},{"package":"purescript-lazy","item":["Data.Lazy","applyLazy"]},{"package":"purescript-lazy","item":["Data.Lazy","applicativeLazy"]},{"package":"purescript-lazy","item":["Data.Lazy","bindLazy"]},{"package":"purescript-lazy","item":["Data.Lazy","monadLazy"]},{"package":"purescript-lazy","item":["Data.Lazy","extendLazy"]},{"package":"purescript-lazy","item":["Data.Lazy","comonadLazy"]},{"package":"purescript-lazy","item":["Data.Lazy","showLazy"]},{"package":"purescript-lazy","item":["Data.Lazy","lazyLazy"]},{"package":"purescript-control","item":["Control.Comonad","Comonad"]},{"package":"purescript-control","item":["Control.Extend","(=>>)"]},{"package":"purescript-control","item":["Control.Extend","(<<=)"]},{"package":"purescript-control","item":["Control.Extend","(=>=)"]},{"package":"purescript-control","item":["Control.Extend","(=<=)"]},{"package":"purescript-control","item":["Control.Extend","Extend"]},{"package":"purescript-control","item":["Control.Extend","extendFn"]},{"package":"purescript-control","item":["Control.Extend","(<<=)"]},{"package":"purescript-control","item":["Control.Extend","(=>>)"]},{"package":"purescript-control","item":["Control.Extend","(=>=)"]},{"package":"purescript-control","item":["Control.Extend","(=<=)"]},{"package":"purescript-control","item":["Control.Extend","duplicate"]},{"package":"purescript-control","item":["Control.Lazy","Lazy"]},{"package":"purescript-control","item":["Control.Lazy","fix"]},{"package":"purescript-control","item":["Control.Monad","when"]},{"package":"purescript-control","item":["Control.Monad","unless"]},{"package":"purescript-st","item":["Control.Monad.ST","ST"]},{"package":"purescript-st","item":["Control.Monad.ST","STRef"]},{"package":"purescript-st","item":["Control.Monad.ST","newSTRef"]},{"package":"purescript-st","item":["Control.Monad.ST","readSTRef"]},{"package":"purescript-st","item":["Control.Monad.ST","modifySTRef"]},{"package":"purescript-st","item":["Control.Monad.ST","writeSTRef"]},{"package":"purescript-st","item":["Control.Monad.ST","runST"]},{"package":"purescript-st","item":["Control.Monad.ST","pureST"]},{"package":"purescript-eff","item":["Control.Monad.Eff.Unsafe","unsafeInterleaveEff"]},{"package":"purescript-eff","item":["Control.Monad.Eff.Unsafe","unsafePerformEff"]},{"package":"purescript-eff","item":["Control.Monad.Eff.Class","MonadEff"]},{"package":"purescript-eff","item":["Control.Monad.Eff.Class","monadEffEff"]},{"package":"purescript-eff","item":["Control.Monad.Eff","Eff"]},{"package":"purescript-eff","item":["Control.Monad.Eff","Pure"]},{"package":"purescript-eff","item":["Control.Monad.Eff","runPure"]},{"package":"purescript-eff","item":["Control.Monad.Eff","functorEff"]},{"package":"purescript-eff","item":["Control.Monad.Eff","applyEff"]},{"package":"purescript-eff","item":["Control.Monad.Eff","applicativeEff"]},{"package":"purescript-eff","item":["Control.Monad.Eff","bindEff"]},{"package":"purescript-eff","item":["Control.Monad.Eff","monadEff"]},{"package":"purescript-eff","item":["Control.Monad.Eff","untilE"]},{"package":"purescript-eff","item":["Control.Monad.Eff","whileE"]},{"package":"purescript-eff","item":["Control.Monad.Eff","forE"]},{"package":"purescript-eff","item":["Control.Monad.Eff","foreachE"]},{"package":"purescript-bifunctors","item":["Data.Bifunctor","Bifunctor"]},{"package":"purescript-bifunctors","item":["Data.Bifunctor","lmap"]},{"package":"purescript-bifunctors","item":["Data.Bifunctor","rmap"]},{"package":"purescript-strings","item":["Data.Char","toString"]},{"package":"purescript-strings","item":["Data.Char","toCharCode"]},{"package":"purescript-strings","item":["Data.Char","fromCharCode"]},{"package":"purescript-strings","item":["Data.Char","toLower"]},{"package":"purescript-strings","item":["Data.Char","toUpper"]},{"package":"purescript-contravariant","item":["Data.Equivalence","Equivalence"]},{"package":"purescript-contravariant","item":["Data.Equivalence","runEquivalence"]},{"package":"purescript-contravariant","item":["Data.Equivalence","contravariantEquivalence"]},{"package":"purescript-contravariant","item":["Data.Equivalence","semigroupEquivalence"]},{"package":"purescript-contravariant","item":["Data.Equivalence","monoidEquivalence"]},{"package":"purescript-contravariant","item":["Data.Equivalence","defaultEquivalence"]},{"package":"purescript-contravariant","item":["Data.Equivalence","comparisonEquivalence"]},{"package":"purescript-contravariant","item":["Data.Comparison","Comparison"]},{"package":"purescript-contravariant","item":["Data.Comparison","runComparison"]},{"package":"purescript-contravariant","item":["Data.Comparison","contravariantComparison"]},{"package":"purescript-contravariant","item":["Data.Comparison","semigroupComparison"]},{"package":"purescript-contravariant","item":["Data.Comparison","monoidComparison"]},{"package":"purescript-contravariant","item":["Data.Comparison","defaultComparison"]},{"package":"purescript-functions","item":["Data.Function","on"]},{"package":"purescript-functions","item":["Data.Function","Fn0"]},{"package":"purescript-functions","item":["Data.Function","Fn1"]},{"package":"purescript-functions","item":["Data.Function","Fn2"]},{"package":"purescript-functions","item":["Data.Function","Fn3"]},{"package":"purescript-functions","item":["Data.Function","Fn4"]},{"package":"purescript-functions","item":["Data.Function","Fn5"]},{"package":"purescript-functions","item":["Data.Function","Fn6"]},{"package":"purescript-functions","item":["Data.Function","Fn7"]},{"package":"purescript-functions","item":["Data.Function","Fn8"]},{"package":"purescript-functions","item":["Data.Function","Fn9"]},{"package":"purescript-functions","item":["Data.Function","Fn10"]},{"package":"purescript-functions","item":["Data.Function","mkFn0"]},{"package":"purescript-functions","item":["Data.Function","mkFn1"]},{"package":"purescript-functions","item":["Data.Function","mkFn2"]},{"package":"purescript-functions","item":["Data.Function","mkFn3"]},{"package":"purescript-functions","item":["Data.Function","mkFn4"]},{"package":"purescript-functions","item":["Data.Function","mkFn5"]},{"package":"purescript-functions","item":["Data.Function","mkFn6"]},{"package":"purescript-functions","item":["Data.Function","mkFn7"]},{"package":"purescript-functions","item":["Data.Function","mkFn8"]},{"package":"purescript-functions","item":["Data.Function","mkFn9"]},{"package":"purescript-functions","item":["Data.Function","mkFn10"]},{"package":"purescript-functions","item":["Data.Function","runFn0"]},{"package":"purescript-functions","item":["Data.Function","runFn1"]},{"package":"purescript-functions","item":["Data.Function","runFn2"]},{"package":"purescript-functions","item":["Data.Function","runFn3"]},{"package":"purescript-functions","item":["Data.Function","runFn4"]},{"package":"purescript-functions","item":["Data.Function","runFn5"]},{"package":"purescript-functions","item":["Data.Function","runFn6"]},{"package":"purescript-functions","item":["Data.Function","runFn7"]},{"package":"purescript-functions","item":["Data.Function","runFn8"]},{"package":"purescript-functions","item":["Data.Function","runFn9"]},{"package":"purescript-functions","item":["Data.Function","runFn10"]},{"package":"purescript-control","item":["Data.Functor","(<$)"]},{"package":"purescript-control","item":["Data.Functor","($>)"]},{"package":"purescript-control","item":["Data.Functor","(<$)"]},{"package":"purescript-control","item":["Data.Functor","($>)"]},{"package":"purescript-contravariant","item":["Data.Predicate","Predicate"]},{"package":"purescript-contravariant","item":["Data.Predicate","runPredicate"]},{"package":"purescript-contravariant","item":["Data.Predicate","contravariantPredicate"]},{"package":"purescript-contravariant","item":["Data.Op","Op"]},{"package":"purescript-contravariant","item":["Data.Op","runOp"]},{"package":"purescript-contravariant","item":["Data.Op","semigroupoidOp"]},{"package":"purescript-contravariant","item":["Data.Op","categoryOp"]},{"package":"purescript-contravariant","item":["Data.Op","contravariantOp"]},{"package":"purescript-contravariant","item":["Data.Op","semigroupOp"]},{"package":"purescript-contravariant","item":["Data.Op","monoidOp"]},{"package":"purescript-profunctor-lenses","item":["Data.Lens.Internal.Void","Void"]},{"package":"purescript-profunctor-lenses","item":["Data.Lens.Internal.Void","absurd"]},{"package":"purescript-profunctor-lenses","item":["Data.Lens.Internal.Void","coerce"]},{"package":"purescript-contravariant","item":["Data.Functor.Contravariant","Contravariant"]},{"package":"purescript-contravariant","item":["Data.Functor.Contravariant","(>$<)"]},{"package":"purescript-contravariant","item":["Data.Functor.Contravariant","(>#<)"]},{"package":"purescript-monoid","item":["Data.Monoid.Endo","Endo"]},{"package":"purescript-monoid","item":["Data.Monoid.Endo","runEndo"]},{"package":"purescript-monoid","item":["Data.Monoid.Endo","invariantEndo"]},{"package":"purescript-monoid","item":["Data.Monoid.Endo","semigroupEndo"]},{"package":"purescript-monoid","item":["Data.Monoid.Endo","monoidEndo"]},{"package":"purescript-invariant","item":["Data.Functor.Invariant","Invariant"]},{"package":"purescript-invariant","item":["Data.Functor.Invariant","imapF"]},{"package":"purescript-invariant","item":["Data.Functor.Invariant","invariantFn"]},{"package":"purescript-invariant","item":["Data.Functor.Invariant","invariantArray"]},{"package":"purescript-integers","item":["Data.Int.Bits","(.&.)"]},{"package":"purescript-integers","item":["Data.Int.Bits","(.|.)"]},{"package":"purescript-integers","item":["Data.Int.Bits","(.^.)"]},{"package":"purescript-integers","item":["Data.Int.Bits","(.&.)"]},{"package":"purescript-integers","item":["Data.Int.Bits","(.|.)"]},{"package":"purescript-integers","item":["Data.Int.Bits","(.^.)"]},{"package":"purescript-integers","item":["Data.Int.Bits","shl"]},{"package":"purescript-integers","item":["Data.Int.Bits","shr"]},{"package":"purescript-integers","item":["Data.Int.Bits","zshr"]},{"package":"purescript-integers","item":["Data.Int.Bits","complement"]},{"package":"purescript-profunctor-lenses","item":["Data.Lens.Internal.Exchange","Exchange"]},{"package":"purescript-profunctor-lenses","item":["Data.Lens.Internal.Exchange","functorExchange"]},{"package":"purescript-profunctor-lenses","item":["Data.Lens.Internal.Exchange","profunctorExchange"]},{"package":"purescript-monoid","item":["Data.Monoid","Monoid"]},{"package":"purescript-monoid","item":["Data.Monoid","monoidUnit"]},{"package":"purescript-monoid","item":["Data.Monoid","monoidFn"]},{"package":"purescript-monoid","item":["Data.Monoid","monoidString"]},{"package":"purescript-monoid","item":["Data.Monoid","monoidArray"]},{"package":"purescript-profunctor","item":["Data.Profunctor.Closed","Closed"]},{"package":"purescript-profunctor","item":["Data.Profunctor.Closed","closedFunction"]},{"package":"purescript-profunctor","item":["Data.Profunctor","Profunctor"]},{"package":"purescript-profunctor","item":["Data.Profunctor","lmap"]},{"package":"purescript-profunctor","item":["Data.Profunctor","rmap"]},{"package":"purescript-profunctor","item":["Data.Profunctor","arr"]},{"package":"purescript-profunctor","item":["Data.Profunctor","profunctorFn"]},{"package":"purescript-strings","item":["Data.String.Unsafe","charCodeAt"]},{"package":"purescript-strings","item":["Data.String.Unsafe","charAt"]},{"package":"purescript-strings","item":["Data.String.Unsafe","char"]},{"package":"purescript-datetime","item":["Data.Time","HourOfDay"]},{"package":"purescript-datetime","item":["Data.Time","eqHourOfDay"]},{"package":"purescript-datetime","item":["Data.Time","ordHourOfDay"]},{"package":"purescript-datetime","item":["Data.Time","Hours"]},{"package":"purescript-datetime","item":["Data.Time","eqHours"]},{"package":"purescript-datetime","item":["Data.Time","ordHours"]},{"package":"purescript-datetime","item":["Data.Time","semiringHours"]},{"package":"purescript-datetime","item":["Data.Time","ringHours"]},{"package":"purescript-datetime","item":["Data.Time","moduloSemiringHours"]},{"package":"purescript-datetime","item":["Data.Time","divisionRingHours"]},{"package":"purescript-datetime","item":["Data.Time","numHours"]},{"package":"purescript-datetime","item":["Data.Time","showHours"]},{"package":"purescript-datetime","item":["Data.Time","MinuteOfHour"]},{"package":"purescript-datetime","item":["Data.Time","eqMinuteOfHour"]},{"package":"purescript-datetime","item":["Data.Time","ordMinuteOfHour"]},{"package":"purescript-datetime","item":["Data.Time","Minutes"]},{"package":"purescript-datetime","item":["Data.Time","eqMinutes"]},{"package":"purescript-datetime","item":["Data.Time","ordMinutes"]},{"package":"purescript-datetime","item":["Data.Time","semiringMinutes"]},{"package":"purescript-datetime","item":["Data.Time","ringMinutes"]},{"package":"purescript-datetime","item":["Data.Time","moduloSemiringMinutes"]},{"package":"purescript-datetime","item":["Data.Time","divisionRingMinutes"]},{"package":"purescript-datetime","item":["Data.Time","numMinutes"]},{"package":"purescript-datetime","item":["Data.Time","showMinutes"]},{"package":"purescript-datetime","item":["Data.Time","SecondOfMinute"]},{"package":"purescript-datetime","item":["Data.Time","eqSecondOfMinute"]},{"package":"purescript-datetime","item":["Data.Time","ordSecondOfMinute"]},{"package":"purescript-datetime","item":["Data.Time","Seconds"]},{"package":"purescript-datetime","item":["Data.Time","eqSeconds"]},{"package":"purescript-datetime","item":["Data.Time","ordSeconds"]},{"package":"purescript-datetime","item":["Data.Time","semiringSeconds"]},{"package":"purescript-datetime","item":["Data.Time","ringSeconds"]},{"package":"purescript-datetime","item":["Data.Time","moduloSemiringSeconds"]},{"package":"purescript-datetime","item":["Data.Time","divisionRingSeconds"]},{"package":"purescript-datetime","item":["Data.Time","numSeconds"]},{"package":"purescript-datetime","item":["Data.Time","showSeconds"]},{"package":"purescript-datetime","item":["Data.Time","MillisecondOfSecond"]},{"package":"purescript-datetime","item":["Data.Time","eqMillisecondOfSecond"]},{"package":"purescript-datetime","item":["Data.Time","ordMillisecondOfSecond"]},{"package":"purescript-datetime","item":["Data.Time","Milliseconds"]},{"package":"purescript-datetime","item":["Data.Time","eqMilliseconds"]},{"package":"purescript-datetime","item":["Data.Time","ordMilliseconds"]},{"package":"purescript-datetime","item":["Data.Time","semiringMilliseconds"]},{"package":"purescript-datetime","item":["Data.Time","ringMilliseconds"]},{"package":"purescript-datetime","item":["Data.Time","moduloSemiringMilliseconds"]},{"package":"purescript-datetime","item":["Data.Time","divisionRingMilliseconds"]},{"package":"purescript-datetime","item":["Data.Time","numMilliseconds"]},{"package":"purescript-datetime","item":["Data.Time","showMilliseconds"]},{"package":"purescript-datetime","item":["Data.Time","TimeValue"]},{"package":"purescript-datetime","item":["Data.Time","timeValueHours"]},{"package":"purescript-datetime","item":["Data.Time","timeValueMinutes"]},{"package":"purescript-datetime","item":["Data.Time","timeValueSeconds"]},{"package":"purescript-datetime","item":["Data.Time","timeValueMilliseconds"]},{"package":"purescript-globals","item":["Global","nan"]},{"package":"purescript-globals","item":["Global","isNaN"]},{"package":"purescript-globals","item":["Global","infinity"]},{"package":"purescript-globals","item":["Global","isFinite"]},{"package":"purescript-globals","item":["Global","readInt"]},{"package":"purescript-globals","item":["Global","readFloat"]},{"package":"purescript-globals","item":["Global","decodeURI"]},{"package":"purescript-globals","item":["Global","encodeURI"]},{"package":"purescript-globals","item":["Global","decodeURIComponent"]},{"package":"purescript-globals","item":["Global","encodeURIComponent"]},{"package":"purescript-globals","item":["Global.Unsafe","unsafeStringify"]},{"package":"purescript-math","item":["Math","Radians"]},{"package":"purescript-math","item":["Math","abs"]},{"package":"purescript-math","item":["Math","acos"]},{"package":"purescript-math","item":["Math","asin"]},{"package":"purescript-math","item":["Math","atan"]},{"package":"purescript-math","item":["Math","atan2"]},{"package":"purescript-math","item":["Math","ceil"]},{"package":"purescript-math","item":["Math","cos"]},{"package":"purescript-math","item":["Math","exp"]},{"package":"purescript-math","item":["Math","floor"]},{"package":"purescript-math","item":["Math","log"]},{"package":"purescript-math","item":["Math","max"]},{"package":"purescript-math","item":["Math","min"]},{"package":"purescript-math","item":["Math","pow"]},{"package":"purescript-math","item":["Math","round"]},{"package":"purescript-math","item":["Math","sin"]},{"package":"purescript-math","item":["Math","sqrt"]},{"package":"purescript-math","item":["Math","tan"]},{"package":"purescript-math","item":["Math","(%)"]},{"package":"purescript-math","item":["Math","(%)"]},{"package":"purescript-math","item":["Math","e"]},{"package":"purescript-math","item":["Math","ln2"]},{"package":"purescript-math","item":["Math","ln10"]},{"package":"purescript-math","item":["Math","log2e"]},{"package":"purescript-math","item":["Math","log10e"]},{"package":"purescript-math","item":["Math","pi"]},{"package":"purescript-math","item":["Math","sqrt1_2"]},{"package":"purescript-math","item":["Math","sqrt2"]},{"package":"purescript-prelude","item":["Prelude","Unit"]},{"package":"purescript-prelude","item":["Prelude","unit"]},{"package":"purescript-prelude","item":["Prelude","($)"]},{"package":"purescript-prelude","item":["Prelude","(#)"]},{"package":"purescript-prelude","item":["Prelude","($)"]},{"package":"purescript-prelude","item":["Prelude","(#)"]},{"package":"purescript-prelude","item":["Prelude","flip"]},{"package":"purescript-prelude","item":["Prelude","const"]},{"package":"purescript-prelude","item":["Prelude","asTypeOf"]},{"package":"purescript-prelude","item":["Prelude","otherwise"]},{"package":"purescript-prelude","item":["Prelude","Semigroupoid"]},{"package":"purescript-prelude","item":["Prelude","semigroupoidFn"]},{"package":"purescript-prelude","item":["Prelude","(>>>)"]},{"package":"purescript-prelude","item":["Prelude","(<<<)"]},{"package":"purescript-prelude","item":["Prelude","(<<<)"]},{"package":"purescript-prelude","item":["Prelude","(>>>)"]},{"package":"purescript-prelude","item":["Prelude","Category"]},{"package":"purescript-prelude","item":["Prelude","categoryFn"]},{"package":"purescript-prelude","item":["Prelude","Functor"]},{"package":"purescript-prelude","item":["Prelude","functorFn"]},{"package":"purescript-prelude","item":["Prelude","functorArray"]},{"package":"purescript-prelude","item":["Prelude","(<$>)"]},{"package":"purescript-prelude","item":["Prelude","(<#>)"]},{"package":"purescript-prelude","item":["Prelude","(<$>)"]},{"package":"purescript-prelude","item":["Prelude","(<#>)"]},{"package":"purescript-prelude","item":["Prelude","void"]},{"package":"purescript-prelude","item":["Prelude","Apply"]},{"package":"purescript-prelude","item":["Prelude","applyFn"]},{"package":"purescript-prelude","item":["Prelude","applyArray"]},{"package":"purescript-prelude","item":["Prelude","(<*>)"]},{"package":"purescript-prelude","item":["Prelude","(<*>)"]},{"package":"purescript-prelude","item":["Prelude","Applicative"]},{"package":"purescript-prelude","item":["Prelude","applicativeFn"]},{"package":"purescript-prelude","item":["Prelude","applicativeArray"]},{"package":"purescript-prelude","item":["Prelude","return"]},{"package":"purescript-prelude","item":["Prelude","liftA1"]},{"package":"purescript-prelude","item":["Prelude","Bind"]},{"package":"purescript-prelude","item":["Prelude","bindFn"]},{"package":"purescript-prelude","item":["Prelude","bindArray"]},{"package":"purescript-prelude","item":["Prelude","(>>=)"]},{"package":"purescript-prelude","item":["Prelude","(>>=)"]},{"package":"purescript-prelude","item":["Prelude","Monad"]},{"package":"purescript-prelude","item":["Prelude","monadFn"]},{"package":"purescript-prelude","item":["Prelude","monadArray"]},{"package":"purescript-prelude","item":["Prelude","liftM1"]},{"package":"purescript-prelude","item":["Prelude","ap"]},{"package":"purescript-prelude","item":["Prelude","Semigroup"]},{"package":"purescript-prelude","item":["Prelude","(<>)"]},{"package":"purescript-prelude","item":["Prelude","(++)"]},{"package":"purescript-prelude","item":["Prelude","(<>)"]},{"package":"purescript-prelude","item":["Prelude","(++)"]},{"package":"purescript-prelude","item":["Prelude","semigroupString"]},{"package":"purescript-prelude","item":["Prelude","semigroupUnit"]},{"package":"purescript-prelude","item":["Prelude","semigroupFn"]},{"package":"purescript-prelude","item":["Prelude","semigroupOrdering"]},{"package":"purescript-prelude","item":["Prelude","semigroupArray"]},{"package":"purescript-prelude","item":["Prelude","Semiring"]},{"package":"purescript-prelude","item":["Prelude","semiringInt"]},{"package":"purescript-prelude","item":["Prelude","semiringNumber"]},{"package":"purescript-prelude","item":["Prelude","semiringUnit"]},{"package":"purescript-prelude","item":["Prelude","(+)"]},{"package":"purescript-prelude","item":["Prelude","(*)"]},{"package":"purescript-prelude","item":["Prelude","(+)"]},{"package":"purescript-prelude","item":["Prelude","(*)"]},{"package":"purescript-prelude","item":["Prelude","Ring"]},{"package":"purescript-prelude","item":["Prelude","ringInt"]},{"package":"purescript-prelude","item":["Prelude","ringNumber"]},{"package":"purescript-prelude","item":["Prelude","ringUnit"]},{"package":"purescript-prelude","item":["Prelude","(-)"]},{"package":"purescript-prelude","item":["Prelude","(-)"]},{"package":"purescript-prelude","item":["Prelude","negate"]},{"package":"purescript-prelude","item":["Prelude","ModuloSemiring"]},{"package":"purescript-prelude","item":["Prelude","moduloSemiringInt"]},{"package":"purescript-prelude","item":["Prelude","moduloSemiringNumber"]},{"package":"purescript-prelude","item":["Prelude","moduloSemiringUnit"]},{"package":"purescript-prelude","item":["Prelude","(/)"]},{"package":"purescript-prelude","item":["Prelude","(/)"]},{"package":"purescript-prelude","item":["Prelude","DivisionRing"]},{"package":"purescript-prelude","item":["Prelude","divisionRingNumber"]},{"package":"purescript-prelude","item":["Prelude","divisionRingUnit"]},{"package":"purescript-prelude","item":["Prelude","Num"]},{"package":"purescript-prelude","item":["Prelude","numNumber"]},{"package":"purescript-prelude","item":["Prelude","numUnit"]},{"package":"purescript-prelude","item":["Prelude","Eq"]},{"package":"purescript-prelude","item":["Prelude","(==)"]},{"package":"purescript-prelude","item":["Prelude","(/=)"]},{"package":"purescript-prelude","item":["Prelude","(==)"]},{"package":"purescript-prelude","item":["Prelude","(/=)"]},{"package":"purescript-prelude","item":["Prelude","eqBoolean"]},{"package":"purescript-prelude","item":["Prelude","eqInt"]},{"package":"purescript-prelude","item":["Prelude","eqNumber"]},{"package":"purescript-prelude","item":["Prelude","eqChar"]},{"package":"purescript-prelude","item":["Prelude","eqString"]},{"package":"purescript-prelude","item":["Prelude","eqUnit"]},{"package":"purescript-prelude","item":["Prelude","eqArray"]},{"package":"purescript-prelude","item":["Prelude","eqOrdering"]},{"package":"purescript-prelude","item":["Prelude","Ordering"]},{"package":"purescript-prelude","item":["Prelude","Ord"]},{"package":"purescript-prelude","item":["Prelude","ordBoolean"]},{"package":"purescript-prelude","item":["Prelude","ordInt"]},{"package":"purescript-prelude","item":["Prelude","ordNumber"]},{"package":"purescript-prelude","item":["Prelude","ordString"]},{"package":"purescript-prelude","item":["Prelude","ordChar"]},{"package":"purescript-prelude","item":["Prelude","ordUnit"]},{"package":"purescript-prelude","item":["Prelude","ordArray"]},{"package":"purescript-prelude","item":["Prelude","ordOrdering"]},{"package":"purescript-prelude","item":["Prelude","(<)"]},{"package":"purescript-prelude","item":["Prelude","(>)"]},{"package":"purescript-prelude","item":["Prelude","(<=)"]},{"package":"purescript-prelude","item":["Prelude","(>=)"]},{"package":"purescript-prelude","item":["Prelude","(<)"]},{"package":"purescript-prelude","item":["Prelude","(>)"]},{"package":"purescript-prelude","item":["Prelude","(<=)"]},{"package":"purescript-prelude","item":["Prelude","(>=)"]},{"package":"purescript-prelude","item":["Prelude","unsafeCompare"]},{"package":"purescript-prelude","item":["Prelude","Bounded"]},{"package":"purescript-prelude","item":["Prelude","boundedBoolean"]},{"package":"purescript-prelude","item":["Prelude","boundedUnit"]},{"package":"purescript-prelude","item":["Prelude","boundedOrdering"]},{"package":"purescript-prelude","item":["Prelude","boundedInt"]},{"package":"purescript-prelude","item":["Prelude","boundedChar"]},{"package":"purescript-prelude","item":["Prelude","boundedFn"]},{"package":"purescript-prelude","item":["Prelude","BoundedOrd"]},{"package":"purescript-prelude","item":["Prelude","boundedOrdBoolean"]},{"package":"purescript-prelude","item":["Prelude","boundedOrdUnit"]},{"package":"purescript-prelude","item":["Prelude","boundedOrdOrdering"]},{"package":"purescript-prelude","item":["Prelude","boundedOrdInt"]},{"package":"purescript-prelude","item":["Prelude","boundedOrdChar"]},{"package":"purescript-prelude","item":["Prelude","BooleanAlgebra"]},{"package":"purescript-prelude","item":["Prelude","booleanAlgebraBoolean"]},{"package":"purescript-prelude","item":["Prelude","booleanAlgebraUnit"]},{"package":"purescript-prelude","item":["Prelude","booleanAlgebraFn"]},{"package":"purescript-prelude","item":["Prelude","(&&)"]},{"package":"purescript-prelude","item":["Prelude","(||)"]},{"package":"purescript-prelude","item":["Prelude","(&&)"]},{"package":"purescript-prelude","item":["Prelude","(||)"]},{"package":"purescript-prelude","item":["Prelude","Show"]},{"package":"purescript-prelude","item":["Prelude","showBoolean"]},{"package":"purescript-prelude","item":["Prelude","showInt"]},{"package":"purescript-prelude","item":["Prelude","showNumber"]},{"package":"purescript-prelude","item":["Prelude","showChar"]},{"package":"purescript-prelude","item":["Prelude","showString"]},{"package":"purescript-prelude","item":["Prelude","showUnit"]},{"package":"purescript-prelude","item":["Prelude","showArray"]},{"package":"purescript-prelude","item":["Prelude","showOrdering"]},{"package":"purescript-proxy","item":["Type.Proxy","Proxy"]},{"package":"purescript-proxy","item":["Type.Proxy","Proxy2"]},{"package":"purescript-proxy","item":["Type.Proxy","Proxy3"]},{"package":"purescript-unsafe-coerce","item":["Unsafe.Coerce","unsafeCoerce"]}],"version":"0.2.0","github":["typed-wire","purescript-typed-wire"],"versionTag":"0.2.0","compilerVersion":"0.8.0.0"}