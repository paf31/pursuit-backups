{"uploader":"zaquest","packageMeta":{"homepage":"https://github.com/zaquest/purescript-uint","repository":{"url":"git://github.com/zaquest/purescript-uint.git","type":"git"},"ignore":["**/.*","node_modules","bower_components","output"],"devDependencies":{"purescript-psci-support":"^3.0.0"},"dependencies":{"purescript-maybe":"^3.0.0","purescript-math":"^2.0.0"},"name":"purescript-uint","license":["MIT"],"description":"32-bit unsigned integers for PureScript"},"tagTime":"2017-04-10T09:17:45+0000","modules":[{"reExports":[],"name":"Data.UInt","comments":"This module provides 32-bit unsigned integers. Provided type `UInt`\nis based on the `x >>> 0` trick analogous to how PureScript's `Int`\nis based on `x | 0` trick.\nThe type has range from `0` to `4294967295`.\n","declarations":[{"children":[{"comments":null,"title":"uintSemiring","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Semiring"],"Semiring"]},{"tag":"TypeConstructor","contents":[["Data","UInt"],"UInt"]}]}},"sourceSpan":{"start":[86,1],"name":"/home/zaquest/projects/purescript-uint/src/Data/UInt.purs","end":[90,16]}},{"comments":null,"title":"uintRing","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Ring"],"Ring"]},{"tag":"TypeConstructor","contents":[["Data","UInt"],"UInt"]}]}},"sourceSpan":{"start":[94,1],"name":"/home/zaquest/projects/purescript-uint/src/Data/UInt.purs","end":[95,16]}},{"comments":null,"title":"uintCommutativeRing","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","CommutativeRing"],"CommutativeRing"]},{"tag":"TypeConstructor","contents":[["Data","UInt"],"UInt"]}]}},"sourceSpan":{"start":[97,1],"name":"/home/zaquest/projects/purescript-uint/src/Data/UInt.purs","end":[97,53]}},{"comments":null,"title":"uintEulideanRing","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","EuclideanRing"],"EuclideanRing"]},{"tag":"TypeConstructor","contents":[["Data","UInt"],"UInt"]}]}},"sourceSpan":{"start":[103,1],"name":"/home/zaquest/projects/purescript-uint/src/Data/UInt.purs","end":[106,22]}},{"comments":null,"title":"uintEqInstance","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Eq"],"Eq"]},{"tag":"TypeConstructor","contents":[["Data","UInt"],"UInt"]}]}},"sourceSpan":{"start":[110,1],"name":"/home/zaquest/projects/purescript-uint/src/Data/UInt.purs","end":[111,14]}},{"comments":null,"title":"uintOrd","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Ord"],"Ord"]},{"tag":"TypeConstructor","contents":[["Data","UInt"],"UInt"]}]}},"sourceSpan":{"start":[115,1],"name":"/home/zaquest/projects/purescript-uint/src/Data/UInt.purs","end":[116,29]}},{"comments":null,"title":"uintShowInstance","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Show"],"Show"]},{"tag":"TypeConstructor","contents":[["Data","UInt"],"UInt"]}]}},"sourceSpan":{"start":[133,1],"name":"/home/zaquest/projects/purescript-uint/src/Data/UInt.purs","end":[136,1]}},{"comments":null,"title":"uintBounded","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Bounded"],"Bounded"]},{"tag":"TypeConstructor","contents":[["Data","UInt"],"UInt"]}]}},"sourceSpan":{"start":[136,1],"name":"/home/zaquest/projects/purescript-uint/src/Data/UInt.purs","end":[138,21]}}],"comments":null,"title":"UInt","info":{"kind":{"tag":"NamedKind","contents":[["Prim"],"Type"]},"declType":"externData"},"sourceSpan":{"start":[35,1],"name":"/home/zaquest/projects/purescript-uint/src/Data/UInt.purs","end":[35,33]}},{"children":[],"comments":"Cast an `Int` to an `UInt` turning negative `Int`s into `UInt`s\nin range from `2^31` to `2^32-1`.\n\n    > fromInt 123\n    123u\n\n    > fromInt (-123)\n    4294967173u\n","title":"fromInt","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeConstructor","contents":[["Data","UInt"],"UInt"]}]}},"sourceSpan":{"start":[48,1],"name":"/home/zaquest/projects/purescript-uint/src/Data/UInt.purs","end":[48,23]}},{"children":[],"comments":"Converts positive `Int`s into `UInt`. Returns `Nothing` for\nnegative `Int`s\n\n    > fromInt' 123\n    (Just 123u)\n\n    > fromInt' (-123)\n    Nothing\n","title":"fromInt'","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeConstructor","contents":[["Data","UInt"],"UInt"]}]}]}},"sourceSpan":{"start":[59,1],"name":"/home/zaquest/projects/purescript-uint/src/Data/UInt.purs","end":[59,30]}},{"children":[],"comments":"Cast an `UInt` to an `Int` turning `UInt`s in range from `2^31`\nto `2^32-1` into negative `Int`s.\n\n    > toInt (fromInt 123)\n    123\n\n    > toInt (fromInt (-1))\n    -1\n","title":"toInt","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","UInt"],"UInt"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}},"sourceSpan":{"start":[70,1],"name":"/home/zaquest/projects/purescript-uint/src/Data/UInt.purs","end":[70,36]}},{"children":[],"comments":"Converts `UInt`s in range from `0` to `2^31-1` into `Int`s. Rreturns\n`Nothing` for `UInt`'s in range from `2^31` to `2^32-1`.\n\n    > toInt' (fromInt 123)\n    (Just 123)\n\n    > toInt' (fromInt (-1))\n    Nothing\n","title":"toInt'","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","UInt"],"UInt"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeConstructor","contents":[["Prim"],"Int"]}]}]}},"sourceSpan":{"start":[80,1],"name":"/home/zaquest/projects/purescript-uint/src/Data/UInt.purs","end":[80,28]}},{"children":[],"comments":"Tries to parse an `UInt` from a `String`.\n","title":"fromString","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeConstructor","contents":[["Data","UInt"],"UInt"]}]}]}},"sourceSpan":{"start":[121,1],"name":"/home/zaquest/projects/purescript-uint/src/Data/UInt.purs","end":[121,35]}},{"children":[],"comments":"Converts an `UInt` to a `String`.\n\nThere is also a `Show` instance (so you can use `show`), but that\nappends `u` suffix, which isn't always what you'll want.\n\n     toString (fromInt 42) == \"42\"\n     show (fromInt 42) == \"42u\"\n","title":"toString","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","UInt"],"UInt"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"String"]}]}},"sourceSpan":{"start":[131,1],"name":"/home/zaquest/projects/purescript-uint/src/Data/UInt.purs","end":[131,42]}},{"children":[],"comments":"Cast a `Number` `n` to `UInt` by performing 0-bit unsigned right\nshift `n >>> 0`.\n","title":"fromNumber","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]},{"tag":"TypeConstructor","contents":[["Data","UInt"],"UInt"]}]}},"sourceSpan":{"start":[142,1],"name":"/home/zaquest/projects/purescript-uint/src/Data/UInt.purs","end":[142,29]}},{"children":[],"comments":"Convert a `Number` which is already an `UInt` to `UInt`. Fails\nfor non-integers and integers not in range from `0` to `2^32-1`.\n","title":"fromNumber'","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Maybe"],"Maybe"]},{"tag":"TypeConstructor","contents":[["Data","UInt"],"UInt"]}]}]}},"sourceSpan":{"start":[147,1],"name":"/home/zaquest/projects/purescript-uint/src/Data/UInt.purs","end":[147,36]}},{"children":[],"comments":"Cast an `UInt` to a `Number`, which is always safe to do.\n","title":"toNumber","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","UInt"],"UInt"]}]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]}},"sourceSpan":{"start":[151,1],"name":"/home/zaquest/projects/purescript-uint/src/Data/UInt.purs","end":[151,42]}},{"children":[],"comments":"Convert a `Number` to an `UInt`. Takes the closest integer equal to or\nless than the argument. Values outside the `UInt` range are clamped.\n\n    > floor 27.1\n    27u\n\n    > floor 27.9\n    27u\n\n    > floor (-27.1)\n    0u\n\n    > floor (1.0e65)\n    4294967295u\n\n    > floor (-1.0e65)\n    0u\n","title":"floor","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]},{"tag":"TypeConstructor","contents":[["Data","UInt"],"UInt"]}]}},"sourceSpan":{"start":[173,1],"name":"/home/zaquest/projects/purescript-uint/src/Data/UInt.purs","end":[173,24]}},{"children":[],"comments":"Convert a `Number` to an `UInt`. Takes the closest integer equal to or\ngreater than the argument. Values outside the `UInt` range are clamped.\n\n    > ceil 27.1\n    28u\n\n    > ceil 27.9\n    28u\n\n    > ceil (-27.1)\n    0u\n\n    > ceil (1.0e65)\n    4294967295u\n\n    > ceil (-1.0e65)\n    0u\n","title":"ceil","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]},{"tag":"TypeConstructor","contents":[["Data","UInt"],"UInt"]}]}},"sourceSpan":{"start":[193,1],"name":"/home/zaquest/projects/purescript-uint/src/Data/UInt.purs","end":[193,23]}},{"children":[],"comments":"Convert a `Number` to an `UInt`, by taking the nearest integer to the\nargument. Values outside the `UInt` range are clamped.\n\n    > round 27.1\n    27u\n\n    > round 27.9\n    28u\n\n    > round (-27.1)\n    0u\n\n    > round (-27.9)\n    0u\n\n    > round (1.0e65)\n    4294967295u\n\n    > round (-1.0e65)\n    0u\n","title":"round","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Prim"],"Number"]}]},{"tag":"TypeConstructor","contents":[["Data","UInt"],"UInt"]}]}},"sourceSpan":{"start":[216,1],"name":"/home/zaquest/projects/purescript-uint/src/Data/UInt.purs","end":[216,24]}},{"children":[],"comments":"Raises the first argument to the power of the second argument (the exponent).\n\n    > pow (fromInt 2) (fromInt 3)\n    8u\n","title":"pow","info":{"declType":"value","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","UInt"],"UInt"]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeConstructor","contents":[["Data","UInt"],"UInt"]}]},{"tag":"TypeConstructor","contents":[["Data","UInt"],"UInt"]}]}]}},"sourceSpan":{"start":[243,1],"name":"/home/zaquest/projects/purescript-uint/src/Data/UInt.purs","end":[243,39]}}]}],"resolvedDependencies":{"purescript-newtype":"2.0.0","purescript-control":"3.0.0","purescript-console":"3.0.0","purescript-maybe":"3.0.0","purescript-invariant":"3.0.0","purescript-monoid":"3.0.0","purescript-prelude":"3.0.0","purescript-eff":"3.1.0","purescript-math":"2.0.0","purescript-psci-support":"3.0.0"},"version":"0.4.0","github":["zaquest","purescript-uint"],"versionTag":"v0.4.0","moduleMap":{"Data.BooleanAlgebra":"purescript-prelude","Data.Ring":"purescript-prelude","Control.Monad.Eff.Unsafe":"purescript-eff","Data.Ord":"purescript-prelude","Data.Monoid.Dual":"purescript-monoid","Data.Boolean":"purescript-prelude","Data.Bounded":"purescript-prelude","Data.Show":"purescript-prelude","Control.Apply":"purescript-prelude","Control.Monad":"purescript-prelude","Data.Monoid":"purescript-monoid","Control.Monad.Eff.Uncurried":"purescript-eff","Data.Maybe.First":"purescript-maybe","Control.Bind":"purescript-prelude","Data.Monoid.Additive":"purescript-monoid","Data.HeytingAlgebra":"purescript-prelude","Control.Alt":"purescript-control","Data.Ord.Unsafe":"purescript-prelude","Data.Semigroup":"purescript-prelude","Control.Monad.Eff":"purescript-eff","Control.Alternative":"purescript-control","Data.Semiring":"purescript-prelude","Data.CommutativeRing":"purescript-prelude","Data.NaturalTransformation":"purescript-prelude","Data.Monoid.Conj":"purescript-monoid","Data.Functor":"purescript-prelude","Control.Category":"purescript-prelude","Data.Maybe":"purescript-maybe","Control.Comonad":"purescript-control","Data.Function":"purescript-prelude","Data.Field":"purescript-prelude","Data.EuclideanRing":"purescript-prelude","Data.Functor.Invariant":"purescript-invariant","Prelude":"purescript-prelude","Control.Extend":"purescript-control","Control.Lazy":"purescript-control","Data.Eq":"purescript-prelude","Data.Newtype":"purescript-newtype","Control.Monad.Eff.Console":"purescript-console","Data.Monoid.Disj":"purescript-monoid","Control.MonadPlus":"purescript-control","Data.Void":"purescript-prelude","Control.MonadZero":"purescript-control","PSCI.Support":"purescript-psci-support","Data.Maybe.Last":"purescript-maybe","Data.Unit":"purescript-prelude","Data.Ordering":"purescript-prelude","Math":"purescript-math","Control.Plus":"purescript-control","Control.Monad.Eff.Class":"purescript-eff","Data.Monoid.Multiplicative":"purescript-monoid","Control.Semigroupoid":"purescript-prelude","Data.Monoid.Alternate":"purescript-monoid","Data.Monoid.Endo":"purescript-monoid","Control.Applicative":"purescript-prelude"},"compilerVersion":"0.11.3"}