{"uploader":"zudov","packageMeta":{"moduleType":["node"],"repository":{"url":"git://github.com/zudov/purescript-var.git","type":"git"},"ignore":["**/.*","node_modules","bower_components","output"],"devDependencies":{"purescript-console":"^3.0.0"},"authors":[{"email":"co@zudov.me","name":"Konstantin Zudov"}],"dependencies":{"purescript-invariant":"^3.0.0","purescript-contravariant":"^3.0.0","purescript-eff":"^3.0.0"},"name":"purescript-var","keywords":["purescript"],"license":["BSD-3-Clause"],"description":"Vars -- references that can be read/written from the Eff monad"},"tagTime":"2017-04-27T12:02:23+0000","modules":[{"reExports":[],"name":"Control.Monad.Eff.Var","comments":"`Var`s allow to provide a uniform read/write access to the references in\nthe `Eff` monad. This is mostly useful when making low-level FFI bindings.\nFor example we might have some global counter with the following API:\n```purescript\nforeign import data COUNT :: !\ngetCounter :: forall eff. Eff (count :: COUNT | eff) Int\nsetCounter :: forall eff. Int -> Eff (count :: COUNT | eff) Unit\n```\n\n`getCounter` and `setCounter` can be kept together in a `Var`:\n```purescript\ncounter :: forall eff. Var (count :: COUNT | eff) Int\ncounter = makeVar getCounter setCounter\n```\n\n`counter` can be used in this way:\n```purescript\nmain = do\n  counter $= 0          -- set counter to 0\n  get counter >>= print -- => 0\n  counter $= 2          -- set counter to 2\n  get counter >>= print -- => 2\n  counter $~ (* 5)      -- multiply counter by 5\n  get counter >>= print -- => 10\n```\n","declarations":[{"children":[{"comments":null,"title":"get","info":{"declType":"typeClassMember","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"var"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad","Eff"],"Eff"]},{"tag":"TypeVar","contents":"eff"}]},{"tag":"TypeVar","contents":"a"}]}]}},"sourceSpan":null},{"comments":null,"title":"gettableVar","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad","Eff","Var"],"Gettable"]},{"tag":"TypeVar","contents":"eff"}]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad","Eff","Var"],"Var"]},{"tag":"TypeVar","contents":"eff"}]}}]},{"tag":"TypeVar","contents":"a"}]}},"sourceSpan":{"start":[93,1],"name":"/home/zudov/prog/purescript/purescript-var/src/Control/Monad/Eff/Var.purs","end":[94,40]}},{"comments":null,"title":"gettableGettableVar","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad","Eff","Var"],"Gettable"]},{"tag":"TypeVar","contents":"eff"}]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad","Eff","Var"],"GettableVar"]},{"tag":"TypeVar","contents":"eff"}]}}]},{"tag":"TypeVar","contents":"a"}]}},"sourceSpan":{"start":[112,1],"name":"/home/zudov/prog/purescript/purescript-var/src/Control/Monad/Eff/Var.purs","end":[113,36]}}],"comments":"Typeclass for vars that can be read.\n","title":"Gettable","info":{"fundeps":[[["var"],["a"]],[["var"],["eff"]]],"arguments":[["eff",{"tag":"Row","contents":{"tag":"NamedKind","contents":[["Control","Monad","Eff"],"Effect"]}}],["var",{"tag":"FunKind","contents":[{"tag":"NamedKind","contents":[["Prim"],"Type"]},{"tag":"NamedKind","contents":[["Prim"],"Type"]}]}],["a",{"tag":"NamedKind","contents":[["Prim"],"Type"]}]],"declType":"typeClass","superclasses":[]},"sourceSpan":{"start":[59,1],"name":"/home/zudov/prog/purescript/purescript-var/src/Control/Monad/Eff/Var.purs","end":[60,28]}},{"children":[{"comments":null,"title":"set","info":{"declType":"typeClassMember","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"var"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad","Eff"],"Eff"]},{"tag":"TypeVar","contents":"eff"}]},{"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}]}]}},"sourceSpan":null},{"comments":null,"title":"settableVar","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad","Eff","Var"],"Settable"]},{"tag":"TypeVar","contents":"eff"}]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad","Eff","Var"],"Var"]},{"tag":"TypeVar","contents":"eff"}]}}]},{"tag":"TypeVar","contents":"a"}]}},"sourceSpan":{"start":[90,1],"name":"/home/zudov/prog/purescript/purescript-var/src/Control/Monad/Eff/Var.purs","end":[91,41]}},{"comments":null,"title":"settableSettableVar","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad","Eff","Var"],"Settable"]},{"tag":"TypeVar","contents":"eff"}]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad","Eff","Var"],"SettableVar"]},{"tag":"TypeVar","contents":"eff"}]}}]},{"tag":"TypeVar","contents":"a"}]}},"sourceSpan":{"start":[132,1],"name":"/home/zudov/prog/purescript/purescript-var/src/Control/Monad/Eff/Var.purs","end":[133,36]}}],"comments":"Typeclass for vars that can be written.\n","title":"Settable","info":{"fundeps":[[["var"],["a"]],[["var"],["eff"]]],"arguments":[["eff",{"tag":"Row","contents":{"tag":"NamedKind","contents":[["Control","Monad","Eff"],"Effect"]}}],["var",{"tag":"FunKind","contents":[{"tag":"NamedKind","contents":[["Prim"],"Type"]},{"tag":"NamedKind","contents":[["Prim"],"Type"]}]}],["a",{"tag":"NamedKind","contents":[["Prim"],"Type"]}]],"declType":"typeClass","superclasses":[]},"sourceSpan":{"start":[63,1],"name":"/home/zudov/prog/purescript/purescript-var/src/Control/Monad/Eff/Var.purs","end":[64,36]}},{"children":[],"comments":"Alias for `set`.\n","title":"($=)","info":{"declType":"alias","alias":[["Control","Monad","Eff","Var"],{"Right":{"Left":{"Ident":"set"}}}],"fixity":{"associativity":"infixr","precedence":2}},"sourceSpan":{"start":[67,1],"name":"/home/zudov/prog/purescript/purescript-var/src/Control/Monad/Eff/Var.purs","end":[67,19]}},{"children":[{"comments":null,"title":"update","info":{"declType":"typeClassMember","type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeVar","contents":"var"},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"a"}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad","Eff"],"Eff"]},{"tag":"TypeVar","contents":"eff"}]},{"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}]}]}},"sourceSpan":null},{"comments":null,"title":"updatableVar","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad","Eff","Var"],"Updatable"]},{"tag":"TypeVar","contents":"eff"}]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad","Eff","Var"],"Var"]},{"tag":"TypeVar","contents":"eff"}]}}]},{"tag":"TypeVar","contents":"a"}]}},"sourceSpan":{"start":[96,1],"name":"/home/zudov/prog/purescript/purescript-var/src/Control/Monad/Eff/Var.purs","end":[97,37]}}],"comments":"Typeclass for vars that can be updated.\n","title":"Updatable","info":{"fundeps":[[["var"],["a"]],[["var"],["eff"]]],"arguments":[["eff",{"tag":"Row","contents":{"tag":"NamedKind","contents":[["Control","Monad","Eff"],"Effect"]}}],["var",{"tag":"FunKind","contents":[{"tag":"NamedKind","contents":[["Prim"],"Type"]},{"tag":"NamedKind","contents":[["Prim"],"Type"]}]}],["a",{"tag":"NamedKind","contents":[["Prim"],"Type"]}]],"declType":"typeClass","superclasses":[]},"sourceSpan":{"start":[70,1],"name":"/home/zudov/prog/purescript/purescript-var/src/Control/Monad/Eff/Var.purs","end":[71,46]}},{"children":[],"comments":"Alias for `get`\n","title":"($~)","info":{"declType":"alias","alias":[["Control","Monad","Eff","Var"],{"Right":{"Left":{"Ident":"update"}}}],"fixity":{"associativity":"infixr","precedence":2}},"sourceSpan":{"start":[74,1],"name":"/home/zudov/prog/purescript/purescript-var/src/Control/Monad/Eff/Var.purs","end":[74,22]}},{"children":[{"comments":null,"title":"settableVar","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad","Eff","Var"],"Settable"]},{"tag":"TypeVar","contents":"eff"}]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad","Eff","Var"],"Var"]},{"tag":"TypeVar","contents":"eff"}]}}]},{"tag":"TypeVar","contents":"a"}]}},"sourceSpan":{"start":[90,1],"name":"/home/zudov/prog/purescript/purescript-var/src/Control/Monad/Eff/Var.purs","end":[91,41]}},{"comments":null,"title":"gettableVar","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad","Eff","Var"],"Gettable"]},{"tag":"TypeVar","contents":"eff"}]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad","Eff","Var"],"Var"]},{"tag":"TypeVar","contents":"eff"}]}}]},{"tag":"TypeVar","contents":"a"}]}},"sourceSpan":{"start":[93,1],"name":"/home/zudov/prog/purescript/purescript-var/src/Control/Monad/Eff/Var.purs","end":[94,40]}},{"comments":null,"title":"updatableVar","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad","Eff","Var"],"Updatable"]},{"tag":"TypeVar","contents":"eff"}]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad","Eff","Var"],"Var"]},{"tag":"TypeVar","contents":"eff"}]}}]},{"tag":"TypeVar","contents":"a"}]}},"sourceSpan":{"start":[96,1],"name":"/home/zudov/prog/purescript/purescript-var/src/Control/Monad/Eff/Var.purs","end":[97,37]}},{"comments":null,"title":"invariantVar","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Functor","Invariant"],"Invariant"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad","Eff","Var"],"Var"]},{"tag":"TypeVar","contents":"eff"}]}}]}},"sourceSpan":{"start":[99,1],"name":"/home/zudov/prog/purescript/purescript-var/src/Control/Monad/Eff/Var.purs","end":[102,29]}}],"comments":"Read/Write var which holds a value of type `a` and produces effects `eff`\nwhen read or written.\n","title":"Var","info":{"declType":"data","dataDeclType":"newtype","typeArguments":[["eff",{"tag":"Row","contents":{"tag":"NamedKind","contents":[["Control","Monad","Eff"],"Effect"]}}],["a",null]]},"sourceSpan":{"start":[78,1],"name":"/home/zudov/prog/purescript/purescript-var/src/Control/Monad/Eff/Var.purs","end":[81,10]}},{"children":[],"comments":"Create a `Var` from getter and setter.\n","title":"makeVar","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["eff",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad","Eff"],"Eff"]},{"tag":"TypeVar","contents":"eff"}]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad","Eff"],"Eff"]},{"tag":"TypeVar","contents":"eff"}]},{"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad","Eff","Var"],"Var"]},{"tag":"TypeVar","contents":"eff"}]},{"tag":"TypeVar","contents":"a"}]}]}]},null]},null]}},"sourceSpan":{"start":[84,1],"name":"/home/zudov/prog/purescript/purescript-var/src/Control/Monad/Eff/Var.purs","end":[84,71]}},{"children":[{"comments":null,"title":"gettableGettableVar","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad","Eff","Var"],"Gettable"]},{"tag":"TypeVar","contents":"eff"}]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad","Eff","Var"],"GettableVar"]},{"tag":"TypeVar","contents":"eff"}]}}]},{"tag":"TypeVar","contents":"a"}]}},"sourceSpan":{"start":[112,1],"name":"/home/zudov/prog/purescript/purescript-var/src/Control/Monad/Eff/Var.purs","end":[113,36]}},{"comments":null,"title":"functorGettableVar","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Functor"],"Functor"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad","Eff","Var"],"GettableVar"]},{"tag":"TypeVar","contents":"eff"}]}}]}},"sourceSpan":{"start":[115,1],"name":"/home/zudov/prog/purescript/purescript-var/src/Control/Monad/Eff/Var.purs","end":[116,48]}},{"comments":null,"title":"applyGettableVar","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Apply"],"Apply"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad","Eff","Var"],"GettableVar"]},{"tag":"TypeVar","contents":"eff"}]}}]}},"sourceSpan":{"start":[118,1],"name":"/home/zudov/prog/purescript/purescript-var/src/Control/Monad/Eff/Var.purs","end":[119,66]}},{"comments":null,"title":"applicativeGettableVar","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Applicative"],"Applicative"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad","Eff","Var"],"GettableVar"]},{"tag":"TypeVar","contents":"eff"}]}}]}},"sourceSpan":{"start":[121,1],"name":"/home/zudov/prog/purescript/purescript-var/src/Control/Monad/Eff/Var.purs","end":[122,30]}}],"comments":"Read-only var which holds a value of type `a` and produces effects `eff`\nwhen read.\n","title":"GettableVar","info":{"declType":"data","dataDeclType":"newtype","typeArguments":[["eff",null],["a",null]]},"sourceSpan":{"start":[106,1],"name":"/home/zudov/prog/purescript/purescript-var/src/Control/Monad/Eff/Var.purs","end":[106,52]}},{"children":[],"comments":"Create a `GettableVar` from getter.\n","title":"makeGettableVar","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["eff",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad","Eff"],"Eff"]},{"tag":"TypeVar","contents":"eff"}]},{"tag":"TypeVar","contents":"a"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad","Eff","Var"],"GettableVar"]},{"tag":"TypeVar","contents":"eff"}]},{"tag":"TypeVar","contents":"a"}]}]},null]},null]}},"sourceSpan":{"start":[109,1],"name":"/home/zudov/prog/purescript/purescript-var/src/Control/Monad/Eff/Var.purs","end":[109,64]}},{"children":[{"comments":null,"title":"settableSettableVar","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad","Eff","Var"],"Settable"]},{"tag":"TypeVar","contents":"eff"}]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad","Eff","Var"],"SettableVar"]},{"tag":"TypeVar","contents":"eff"}]}}]},{"tag":"TypeVar","contents":"a"}]}},"sourceSpan":{"start":[132,1],"name":"/home/zudov/prog/purescript/purescript-var/src/Control/Monad/Eff/Var.purs","end":[133,36]}},{"comments":null,"title":"contravariantSettableVar","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Functor","Contravariant"],"Contravariant"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad","Eff","Var"],"SettableVar"]},{"tag":"TypeVar","contents":"eff"}]}}]}},"sourceSpan":{"start":[135,1],"name":"/home/zudov/prog/purescript/purescript-var/src/Control/Monad/Eff/Var.purs","end":[136,49]}},{"comments":null,"title":"divideSettableVar","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Divide"],"Divide"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad","Eff","Var"],"SettableVar"]},{"tag":"TypeVar","contents":"eff"}]}}]}},"sourceSpan":{"start":[138,1],"name":"/home/zudov/prog/purescript/purescript-var/src/Control/Monad/Eff/Var.purs","end":[143,15]}},{"comments":null,"title":"divisibleSettableVar","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Divisible"],"Divisible"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad","Eff","Var"],"SettableVar"]},{"tag":"TypeVar","contents":"eff"}]}}]}},"sourceSpan":{"start":[145,1],"name":"/home/zudov/prog/purescript/purescript-var/src/Control/Monad/Eff/Var.purs","end":[146,40]}},{"comments":null,"title":"decideSettableVar","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Decide"],"Decide"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad","Eff","Var"],"SettableVar"]},{"tag":"TypeVar","contents":"eff"}]}}]}},"sourceSpan":{"start":[148,1],"name":"/home/zudov/prog/purescript/purescript-var/src/Control/Monad/Eff/Var.purs","end":[149,88]}},{"comments":null,"title":"decidableSettableVar","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Decidable"],"Decidable"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad","Eff","Var"],"SettableVar"]},{"tag":"TypeVar","contents":"eff"}]}}]}},"sourceSpan":{"start":[151,1],"name":"/home/zudov/prog/purescript/purescript-var/src/Control/Monad/Eff/Var.purs","end":[153,37]}}],"comments":"Write-only var which holds a value of type `a` and produces effects `eff`\nwhen written.\n","title":"SettableVar","info":{"declType":"data","dataDeclType":"newtype","typeArguments":[["eff",null],["a",null]]},"sourceSpan":{"start":[126,1],"name":"/home/zudov/prog/purescript/purescript-var/src/Control/Monad/Eff/Var.purs","end":[126,60]}},{"children":[],"comments":"Create a `SettableVar` from setter.\n","title":"makeSettableVar","info":{"declType":"value","type":{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["eff",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad","Eff"],"Eff"]},{"tag":"TypeVar","contents":"eff"}]},{"tag":"TypeConstructor","contents":[["Data","Unit"],"Unit"]}]}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Monad","Eff","Var"],"SettableVar"]},{"tag":"TypeVar","contents":"eff"}]},{"tag":"TypeVar","contents":"a"}]}]},null]},null]}},"sourceSpan":{"start":[129,1],"name":"/home/zudov/prog/purescript/purescript-var/src/Control/Monad/Eff/Var.purs","end":[129,74]}}]}],"resolvedDependencies":{"purescript-newtype":"2.0.0","purescript-control":"3.0.0","purescript-console":"3.0.0","purescript-either":"3.0.0","purescript-maybe":"3.0.0","purescript-invariant":"3.0.0","purescript-monoid":"3.0.0","purescript-foldable-traversable":"3.0.0","purescript-prelude":"3.0.0","purescript-bifunctors":"3.0.0","purescript-contravariant":"3.0.0","purescript-eff":"3.1.0","purescript-tuples":"4.0.0"},"version":"2.0.0","github":["zudov","purescript-var"],"versionTag":"v2.0.0","moduleMap":{"Data.BooleanAlgebra":"purescript-prelude","Data.Decide":"purescript-contravariant","Data.Ring":"purescript-prelude","Control.Monad.Eff.Unsafe":"purescript-eff","Data.Bifunctor.Flip":"purescript-bifunctors","Data.Ord":"purescript-prelude","Data.Monoid.Dual":"purescript-monoid","Data.Bitraversable":"purescript-foldable-traversable","Data.Boolean":"purescript-prelude","Control.Biapplicative":"purescript-bifunctors","Data.Bounded":"purescript-prelude","Data.Show":"purescript-prelude","Data.Bifunctor.Clown":"purescript-bifunctors","Data.Foldable":"purescript-foldable-traversable","Data.Divide":"purescript-contravariant","Control.Apply":"purescript-prelude","Data.Functor.Contravariant":"purescript-contravariant","Data.Tuple.Nested":"purescript-tuples","Control.Monad":"purescript-prelude","Data.Monoid":"purescript-monoid","Control.Monad.Eff.Uncurried":"purescript-eff","Data.Maybe.First":"purescript-maybe","Control.Bind":"purescript-prelude","Data.Monoid.Additive":"purescript-monoid","Data.HeytingAlgebra":"purescript-prelude","Control.Alt":"purescript-control","Data.Ord.Unsafe":"purescript-prelude","Data.Semigroup":"purescript-prelude","Control.Monad.Eff":"purescript-eff","Data.Tuple":"purescript-tuples","Control.Biapply":"purescript-bifunctors","Control.Alternative":"purescript-control","Data.Semiring":"purescript-prelude","Data.CommutativeRing":"purescript-prelude","Data.NaturalTransformation":"purescript-prelude","Data.Monoid.Conj":"purescript-monoid","Data.Functor":"purescript-prelude","Control.Category":"purescript-prelude","Data.Maybe":"purescript-maybe","Control.Comonad":"purescript-control","Data.Function":"purescript-prelude","Data.Field":"purescript-prelude","Data.EuclideanRing":"purescript-prelude","Data.Functor.Invariant":"purescript-invariant","Data.Comparison":"purescript-contravariant","Prelude":"purescript-prelude","Data.Predicate":"purescript-contravariant","Data.Bifunctor.Product":"purescript-bifunctors","Control.Extend":"purescript-control","Control.Lazy":"purescript-control","Data.Eq":"purescript-prelude","Data.Either.Nested":"purescript-either","Data.Newtype":"purescript-newtype","Control.Monad.Eff.Console":"purescript-console","Data.Bifunctor":"purescript-bifunctors","Data.Monoid.Disj":"purescript-monoid","Control.MonadPlus":"purescript-control","Data.Void":"purescript-prelude","Control.MonadZero":"purescript-control","Data.Bifunctor.Joker":"purescript-bifunctors","Data.Divisible":"purescript-contravariant","Data.Bifunctor.Wrap":"purescript-bifunctors","Data.Equivalence":"purescript-contravariant","Data.Maybe.Last":"purescript-maybe","Data.Unit":"purescript-prelude","Data.Ordering":"purescript-prelude","Control.Plus":"purescript-control","Control.Monad.Eff.Class":"purescript-eff","Data.Decidable":"purescript-contravariant","Data.Monoid.Multiplicative":"purescript-monoid","Control.Semigroupoid":"purescript-prelude","Data.Monoid.Alternate":"purescript-monoid","Data.Bifunctor.Join":"purescript-bifunctors","Data.Bifoldable":"purescript-foldable-traversable","Data.Monoid.Endo":"purescript-monoid","Data.Either":"purescript-either","Control.Applicative":"purescript-prelude","Data.Op":"purescript-contravariant","Data.Traversable":"purescript-foldable-traversable"},"compilerVersion":"0.11.4"}