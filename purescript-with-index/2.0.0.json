{"uploader":"paf31","packageMeta":{"repository":{"url":"git://github.com/paf31/purescript-with-index.git","type":"git"},"ignore":["**/.*","node_modules","bower_components","output"],"devDependencies":{"purescript-maps":"^3.5.2","purescript-psci-support":"^3.0.0"},"dependencies":{"purescript-newtype":"^2.0.0","purescript-monoid":"^3.3.0"},"name":"purescript-with-index","license":["BSD-3-Clause"]},"tagTime":"2017-10-14T22:38:07+0000","modules":[{"reExports":[],"name":"Data.WithIndex","comments":"A tiny library for composing WithIndex maps, folds and traversals.\n\nOne of the benefits of lenses and traversals is that they can be\ncreated, composed and used, using only the machinery available in base.\nFor more advanced use cases, there is the `purescript-lens` library.\n\nThis library tries to provide something similar for WithIndex traversals.\n\nMany data structures provide functions which map or traverse while providing\naccess to an index. See for example the `TraversableWithIndex` type class.\nUsing this module, it is possible to compose such maps and traversals,\nwhile combining indices using some `Monoid`.\n\nTo use this library, wrap any maps or traversals you wish to use with the `WithIndex`\nconstructor. You may also need to change the index type using the `reindex`\nfunction. These wrapped functions can be composed using the composition operator.\n\nRegular maps and traversals can also be used with the `withoutIndex` function or\nby using the `(<.)` and `(.>)` operators.\n","declarations":[{"children":[{"comments":null,"title":"WithIndex","info":{"arguments":[{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"i"}]},{"tag":"TypeVar","contents":"a"}]}}]},{"tag":"TypeVar","contents":"b"}]}}],"declType":"dataConstructor"},"sourceSpan":null},{"comments":null,"title":"newtypeWithIndex","info":{"declType":"instance","dependencies":[],"type":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","Newtype"],"Newtype"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","WithIndex"],"WithIndex"]},{"tag":"TypeVar","contents":"i"}]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]},{"tag":"TypeWildcard","contents":{"start":[63,63],"name":"/Users/phil/Documents/Code/purescript/purescript-with-index/src/Data/WithIndex.purs","end":[63,64]}}]}},"sourceSpan":{"start":[63,8],"name":"/Users/phil/Documents/Code/purescript/purescript-with-index/src/Data/WithIndex.purs","end":[63,64]}},{"comments":null,"title":"semigroupoidWithIndex","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","Semigroup"],"Semigroup"],"constraintArgs":[{"tag":"TypeVar","contents":"i"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Semigroupoid"],"Semigroupoid"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","WithIndex"],"WithIndex"]},{"tag":"TypeVar","contents":"i"}]}}]}},"sourceSpan":{"start":[65,1],"name":"/Users/phil/Documents/Code/purescript/purescript-with-index/src/Data/WithIndex.purs","end":[65,76]}},{"comments":null,"title":"categoryWithIndex","info":{"declType":"instance","dependencies":[{"constraintClass":[["Data","Monoid"],"Monoid"],"constraintArgs":[{"tag":"TypeVar","contents":"i"}],"constraintData":null}],"type":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Control","Category"],"Category"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","WithIndex"],"WithIndex"]},{"tag":"TypeVar","contents":"i"}]}}]}},"sourceSpan":{"start":[68,1],"name":"/Users/phil/Documents/Code/purescript/purescript-with-index/src/Data/WithIndex.purs","end":[68,65]}}],"comments":"A wrapper for a mapping or traversal function which uses an index.\n\nFor example, using the `Data.Map` module:\n\n```purescript\nWithIndex mapWithKey\n  :: WithIndex i (a -> b) (Map i a -> Map i b)\n```\n\nThese wrapped functions can be composed using the composition operator:\n\n```purescript\nWithIndex mapWithKey . WithIndex mapWithKey\n  :: Monoid i =>\n     WithIndex i (a -> b) (Map i (Map i a) -> Map i (Map i b))\n```\n\nand then applied using `withIndex`:\n\n```purescript\nwithIndex $ WithIndex mapWithKey . WithIndex mapWithKey\n  :: Monoid i => (i -> a -> b) -> Map i (Map i a) -> Map i (Map i b)\n```\n","title":"WithIndex","info":{"declType":"data","dataDeclType":"newtype","typeArguments":[["i",null],["a",null],["b",null]]},"sourceSpan":{"start":[61,1],"name":"/Users/phil/Documents/Code/purescript/purescript-with-index/src/Data/WithIndex.purs","end":[61,52]}},{"children":[],"comments":"Change the `Monoid` used to combine indices.\n\nFor example, to keep track of only the first index seen, use `Data.Maybe.First`:\n\n```purescript\nreindex (First . pure)\n  :: WithIndex i a b -> WithIndex (First i) a b\n```\n\nor keep track of all indices using a list\n\n```purescript\nreindex singleton\n  :: WithIndex i a b -> WithIndex (List i) a b\n```\n","title":"reindex","info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["j",{"tag":"ForAll","contents":["i",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"i"}]},{"tag":"TypeVar","contents":"j"}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","WithIndex"],"WithIndex"]},{"tag":"TypeVar","contents":"i"}]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","WithIndex"],"WithIndex"]},{"tag":"TypeVar","contents":"j"}]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]}]},null]},null]},null]},null]}},"sourceSpan":{"start":[86,1],"name":"/Users/phil/Documents/Code/purescript/purescript-with-index/src/Data/WithIndex.purs","end":[86,74]}},{"children":[],"comments":"Turn a regular function into an wrapped function, so that it can be\ncomposed with other wrapped functions.\n\nFor example, to traverse two layers, keeping only the first index:\n\n```purescript\nWithIndex mapWithKey . withoutIndex map\n  :: Monoid i =>\n     WithIndex i (a -> b) (Map i (Map k a) -> Map i (Map k b))\n```\n","title":"withoutIndex","info":{"declType":"value","type":{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["i",{"tag":"ConstrainedType","contents":[{"constraintClass":[["Data","Monoid"],"Monoid"],"constraintArgs":[{"tag":"TypeVar","contents":"i"}],"constraintData":null},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","WithIndex"],"WithIndex"]},{"tag":"TypeVar","contents":"i"}]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]}]},null]},null]},null]}},"sourceSpan":{"start":[99,1],"name":"/Users/phil/Documents/Code/purescript/purescript-with-index/src/Data/WithIndex.purs","end":[99,70]}},{"children":[],"comments":"Compose two wrapped functions, composing their index types using\nfunction application.\n\nThis is useful in some circumstances when building up a traversal\nin an applicative style.\n\nSee the test suite for an example.\n","title":"applyWithIndex","info":{"declType":"value","type":{"tag":"ForAll","contents":["c",{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["j",{"tag":"ForAll","contents":["i",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","WithIndex"],"WithIndex"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"i"}]},{"tag":"TypeVar","contents":"j"}]}}]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeVar","contents":"c"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","WithIndex"],"WithIndex"]},{"tag":"TypeVar","contents":"i"}]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","WithIndex"],"WithIndex"]},{"tag":"TypeVar","contents":"j"}]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"c"}]}]}]},null]},null]},null]},null]},null]}},"sourceSpan":{"start":[109,1],"name":"/Users/phil/Documents/Code/purescript/purescript-with-index/src/Data/WithIndex.purs","end":[113,21]}},{"children":[],"comments":null,"title":"(<.>)","info":{"declType":"alias","alias":[["Data","WithIndex"],{"Right":{"Left":{"Ident":"applyWithIndex"}}}],"fixity":{"associativity":"infixl","precedence":4}},"sourceSpan":{"start":[117,1],"name":"/Users/phil/Documents/Code/purescript/purescript-with-index/src/Data/WithIndex.purs","end":[117,31]}},{"children":[],"comments":"Compose a wrapped function with a regular function on the right.\n","title":"applyVoidLeft","info":{"declType":"value","type":{"tag":"ForAll","contents":["c",{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["i",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","WithIndex"],"WithIndex"]},{"tag":"TypeVar","contents":"i"}]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeVar","contents":"c"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","WithIndex"],"WithIndex"]},{"tag":"TypeVar","contents":"i"}]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"c"}]}]}]},null]},null]},null]},null]}},"sourceSpan":{"start":[120,1],"name":"/Users/phil/Documents/Code/purescript/purescript-with-index/src/Data/WithIndex.purs","end":[124,21]}},{"children":[],"comments":null,"title":"(<.)","info":{"declType":"alias","alias":[["Data","WithIndex"],{"Right":{"Left":{"Ident":"applyVoidLeft"}}}],"fixity":{"associativity":"infixl","precedence":4}},"sourceSpan":{"start":[128,1],"name":"/Users/phil/Documents/Code/purescript/purescript-with-index/src/Data/WithIndex.purs","end":[128,29]}},{"children":[],"comments":"Compose a wrapped function with a regular function on the left.\n","title":"applyVoidRight","info":{"declType":"value","type":{"tag":"ForAll","contents":["c",{"tag":"ForAll","contents":["a",{"tag":"ForAll","contents":["b",{"tag":"ForAll","contents":["i",{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"ParensInType","contents":{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeVar","contents":"b"}]},{"tag":"TypeVar","contents":"c"}]}}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Prim"],"Function"]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","WithIndex"],"WithIndex"]},{"tag":"TypeVar","contents":"i"}]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"b"}]}]},{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeApp","contents":[{"tag":"TypeConstructor","contents":[["Data","WithIndex"],"WithIndex"]},{"tag":"TypeVar","contents":"i"}]},{"tag":"TypeVar","contents":"a"}]},{"tag":"TypeVar","contents":"c"}]}]}]},null]},null]},null]},null]}},"sourceSpan":{"start":[131,1],"name":"/Users/phil/Documents/Code/purescript/purescript-with-index/src/Data/WithIndex.purs","end":[135,21]}},{"children":[],"comments":null,"title":"(.>)","info":{"declType":"alias","alias":[["Data","WithIndex"],{"Right":{"Left":{"Ident":"applyVoidRight"}}}],"fixity":{"associativity":"infixl","precedence":4}},"sourceSpan":{"start":[139,1],"name":"/Users/phil/Documents/Code/purescript/purescript-with-index/src/Data/WithIndex.purs","end":[139,28]}}]}],"resolvedDependencies":{"purescript-newtype":"2.0.0","purescript-maps":"3.5.2","purescript-control":"3.3.1","purescript-console":"3.0.0","purescript-either":"3.1.0","purescript-arrays":"4.2.1","purescript-maybe":"3.0.0","purescript-type-equality":"2.1.0","purescript-distributive":"3.0.0","purescript-unfoldable":"3.0.0","purescript-invariant":"3.0.0","purescript-lazy":"3.0.0","purescript-monoid":"3.3.0","purescript-foldable-traversable":"3.6.1","purescript-tailrec":"3.3.0","purescript-gen":"1.1.0","purescript-prelude":"3.1.0","purescript-st":"3.0.0","purescript-bifunctors":"3.0.0","purescript-nonempty":"4.0.0","purescript-unsafe-coerce":"3.0.0","purescript-integers":"3.1.0","purescript-eff":"3.1.0","purescript-globals":"3.0.0","purescript-math":"2.1.0","purescript-psci-support":"3.0.0","purescript-tuples":"4.1.0","purescript-partial":"1.2.1","purescript-identity":"3.1.0","purescript-lists":"4.10.0","purescript-functions":"3.0.0"},"version":"2.0.0","github":["paf31","purescript-with-index"],"versionTag":"v2.0.0","moduleMap":{"Data.BooleanAlgebra":"purescript-prelude","Data.Ring":"purescript-prelude","Data.NonEmpty":"purescript-nonempty","Data.Traversable.Accum.Internal":"purescript-foldable-traversable","Data.StrMap":"purescript-maps","Control.Monad.Eff.Unsafe":"purescript-eff","Data.Int.Bits":"purescript-integers","Data.Bifunctor.Flip":"purescript-bifunctors","Data.Ord":"purescript-prelude","Control.Monad.Gen":"purescript-gen","Data.Monoid.Dual":"purescript-monoid","Control.Monad.Rec.Class":"purescript-tailrec","Data.StrMap.ST.Unsafe":"purescript-maps","Data.Bitraversable":"purescript-foldable-traversable","Data.Boolean":"purescript-prelude","Data.Map":"purescript-maps","Control.Biapplicative":"purescript-bifunctors","Data.Array.ST.Iterator":"purescript-arrays","Data.Bounded":"purescript-prelude","Data.TraversableWithIndex":"purescript-foldable-traversable","Data.Int":"purescript-integers","Data.StrMap.Gen":"purescript-maps","Data.Show":"purescript-prelude","Data.Bifunctor.Clown":"purescript-bifunctors","Data.Foldable":"purescript-foldable-traversable","Control.Apply":"purescript-prelude","Data.Tuple.Nested":"purescript-tuples","Control.Monad":"purescript-prelude","Data.Lazy":"purescript-lazy","Data.Monoid":"purescript-monoid","Control.Monad.Eff.Uncurried":"purescript-eff","Data.Maybe.First":"purescript-maybe","Control.Bind":"purescript-prelude","Data.Monoid.Additive":"purescript-monoid","Data.Map.Gen":"purescript-maps","Data.HeytingAlgebra":"purescript-prelude","Control.Alt":"purescript-control","Data.List.ZipList":"purescript-lists","Data.Ord.Unsafe":"purescript-prelude","Data.Semigroup":"purescript-prelude","Control.Monad.Eff":"purescript-eff","Data.Array.ST.Partial":"purescript-arrays","Data.StrMap.Unsafe":"purescript-maps","Data.Tuple":"purescript-tuples","Data.Semigroup.Foldable":"purescript-foldable-traversable","Control.Biapply":"purescript-bifunctors","Data.Distributive":"purescript-distributive","Type.Equality":"purescript-type-equality","Control.Alternative":"purescript-control","Data.Semiring":"purescript-prelude","Data.StrMap.ST":"purescript-maps","Data.Traversable.Accum":"purescript-foldable-traversable","Data.CommutativeRing":"purescript-prelude","Data.NaturalTransformation":"purescript-prelude","Data.Monoid.Conj":"purescript-monoid","Data.Unfoldable":"purescript-unfoldable","Control.Monad.ST":"purescript-st","Data.List.Types":"purescript-lists","Data.Functor":"purescript-prelude","Unsafe.Coerce":"purescript-unsafe-coerce","Data.List.Lazy.Types":"purescript-lists","Control.Category":"purescript-prelude","Control.Monad.Gen.Common":"purescript-gen","Data.Maybe":"purescript-maybe","Control.Comonad":"purescript-control","Data.Function":"purescript-prelude","Data.List":"purescript-lists","Data.Field":"purescript-prelude","Data.List.Lazy":"purescript-lists","Data.EuclideanRing":"purescript-prelude","Data.Functor.Invariant":"purescript-invariant","Global.Unsafe":"purescript-globals","Prelude":"purescript-prelude","Partial.Unsafe":"purescript-partial","Data.Array":"purescript-arrays","Data.Bifunctor.Product":"purescript-bifunctors","Control.Extend":"purescript-control","Control.Lazy":"purescript-control","Data.Function.Uncurried":"purescript-functions","Data.Eq":"purescript-prelude","Data.Either.Nested":"purescript-either","Data.Newtype":"purescript-newtype","Control.Monad.Eff.Console":"purescript-console","Data.Semigroup.Traversable":"purescript-foldable-traversable","Data.Bifunctor":"purescript-bifunctors","Data.Monoid.Disj":"purescript-monoid","Control.Monad.Gen.Class":"purescript-gen","Data.Array.Partial":"purescript-arrays","Control.MonadPlus":"purescript-control","Data.Void":"purescript-prelude","Control.MonadZero":"purescript-control","Data.Bifunctor.Joker":"purescript-bifunctors","Data.FunctorWithIndex":"purescript-foldable-traversable","Data.DivisionRing":"purescript-prelude","Data.Bifunctor.Wrap":"purescript-bifunctors","PSCI.Support":"purescript-psci-support","Data.Maybe.Last":"purescript-maybe","Data.Unit":"purescript-prelude","Data.List.NonEmpty":"purescript-lists","Data.List.Lazy.NonEmpty":"purescript-lists","Data.Ordering":"purescript-prelude","Data.Identity":"purescript-identity","Math":"purescript-math","Control.Plus":"purescript-control","Control.Monad.Eff.Class":"purescript-eff","Type.Row.Effect.Equality":"purescript-type-equality","Partial":"purescript-partial","Global":"purescript-globals","Data.Monoid.Multiplicative":"purescript-monoid","Data.Array.ST":"purescript-arrays","Control.Semigroupoid":"purescript-prelude","Data.Monoid.Alternate":"purescript-monoid","Data.Bifunctor.Join":"purescript-bifunctors","Data.Bifoldable":"purescript-foldable-traversable","Data.Monoid.Endo":"purescript-monoid","Data.List.Partial":"purescript-lists","Data.Either":"purescript-either","Control.Applicative":"purescript-prelude","Data.FoldableWithIndex":"purescript-foldable-traversable","Data.Traversable":"purescript-foldable-traversable"},"compilerVersion":"0.11.4"}